{"_path":"/unity/2020-10-18-unity-ecs-component","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"unity ecs component","description":"General Purpose ComponentShared component data    不存储在chunk中,而是存储在sharedComponentManager,而chunk中存的是索引.. 若ForEach中包含了Share Component，那么必须调用WithoutBurst方法和使用Run来执行Chunk component data    相当于单例...更改后,会更改所有相关实体System State Components  类似一个标记..但是实体销毁时,并不会回收entity,只有当所有satecomponent移除后Dynamic buffer compo","body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"General Purpose Component"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Shared component data    不存储在chunk中,而是存储在sharedComponentManager,而chunk中存的是索引.. 若ForEach中包含了Share Component，那么必须调用WithoutBurst方法和使用Run来执行"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Chunk component data    相当于单例...更改后,会更改所有相关实体"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"System State Components  类似一个标记..但是实体销毁时,并不会回收entity,只有当所有satecomponent移除后"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Dynamic buffer components    可以理解为一个数组component"}]}]},{"type":"element","tag":"h2","props":{"id":"general-purpose-component普通用途组件"},"children":[{"type":"text","value":"General Purpose Component（普通用途组件）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这里指的是最普通的组件，可以通过实现 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IComponentData"}]},{"type":"text","value":" 接口来创建。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IComponentData"}]},{"type":"text","value":" 不存储行为，只储存数据。"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IComponentData"}]},{"type":"text","value":" 还是一个结构体（Struct）而不是一个类（Class），这意味着被复制时默认是通过值而不是通过引用。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通常我们会用下面的"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"模式"}]},{"type":"text","value":"来修改组件数据："}]},{"type":"element","tag":"pre","props":{"code":"var transform = group.transform[index]; // Read\n    \ntransform.heading = playerInput.move; // Modify\ntransform.position += deltaTime * playerInput.move * settings.playerMoveSpeed;\n\ngroup.transform[index] = transform; // Write\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var transform = group.transform[index]; // Read\n    \ntransform.heading = playerInput.move; // Modify\ntransform.position += deltaTime * playerInput.move * settings.playerMoveSpeed;\n\ngroup.transform[index] = transform; // Write\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IComponentData"}]},{"type":"text","value":" 结构不包含托管对象（managed objects）的引用，所有"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IComponentData"}]},{"type":"text","value":" 被存在无垃圾回收的"},{"type":"element","tag":"a","props":{"href":"https://docs.unity3d.com/Packages/com.unity.entities@0.0/manual/chunk_iteration.html","rel":["nofollow"]},"children":[{"type":"text","value":"块内存（chunk memory）"}]},{"type":"text","value":"中。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你可能还听过一种组件是不包含数据、只用来标记的“Tag”组件（Tag component），其用途也很广，例如我们可以轻易地给实体加标记来区分玩家和敌人，这样系统中能更容易通过组件的类型来筛选我们想要的实体。如果我们给一个内存块（Chunk）中的所有实体都添加\"Tag“组件的话，只有内存块中对应的原型会修改，不添加数据，因此官方也推荐利用好”Tag“组件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"See file: /Packages/com.unity.entities/Unity.Entities/IComponentData.cs."}]},{"type":"element","tag":"h2","props":{"id":"shared-components共享组件"},"children":[{"type":"text","value":"Shared components（共享组件）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Shared components 是一种特殊的组件，你可以把某些特殊的需要共享的值放到 shared component 中，从而在实体中与其他组件划分开。例如有时候我们的实体需要共享一套材质，我们可以为需要共享的材质创建 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Rendering.RenderMesh"}]},{"type":"text","value":"，再放到 shared components 中。原型中也可以定义 shared components，这一点和其他组件是一样的。"}]},{"type":"element","tag":"pre","props":{"code":"[System.Serializable]\npublic struct RenderMesh : ISharedComponentData\n{\n    public Mesh                 mesh;\n    public Material             material;\n\n    public ShadowCastingMode    castShadows;\n    public bool                 receiveShadows;\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[System.Serializable]\npublic struct RenderMesh : ISharedComponentData\n{\n    public Mesh                 mesh;\n    public Material             material;\n\n    public ShadowCastingMode    castShadows;\n    public bool                 receiveShadows;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当你为一个实体添加一个 shared components 时， "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityManager"}]},{"type":"text","value":" 会把所有带有同样 shared components 的实体放到一个同样的内存块中（Chunks）。shared components 允许我们的系统去一并处理相似的（有同样 shared components 的）实体。"}]},{"type":"element","tag":"h3","props":{"id":"内存结构"},"children":[{"type":"text","value":"内存结构"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2020-10-18-unity-ecs-component/5d295d398f62598876.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"每个内存块（Chunk）会有一个存放 shared components 索引的数组。这句话包含了几个要点："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对于实体来说，有同样 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 的实体会被一起放到同样的内存块（Chunk）中。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果我们有两个存储在同样的内存块中的两个实体，它们有同样的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 类型和值。我们修改其中一个实体的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 的值，这样会导致这个实体会被移动到一个新的内存块中，因为一个内存块共享同一个数组的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 索引。事实上，从一个实体中增加或者移除一个组件，或者改变 shared components 的值都会导致这种操作的发生。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"其索引存储在内存块而非实体中，因此 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 对实体来说是低开销的。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"因为内存块只需要存其索引，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 的内存消耗几乎可以忽略不计。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因为上面的第二个要点，我们不能滥用 shared components。滥用 shared components 将让 Unity 不能利用好内存块（Chunk），因此我们要避免添加不必要的数据或修改数据到 shared components 中。我们可以通过 Entity Debugger 来监测内存块的利用。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2020-10-18-unity-ecs-component/5d295b6d78b7f51832.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"拿上一段 RenderMesh 的例子来说，共享材质会更有效率，因为 shared components 有其自己的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"manager"}]},{"type":"text","value":" 和哈希表。其中 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"manager"}]},{"type":"text","value":" 带有一个存储 shared components 数据的自由列表（"},{"type":"element","tag":"a","props":{"href":"https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%A1%A8","rel":["nofollow"]},"children":[{"type":"text","value":"freelist"}]},{"type":"text","value":"），哈希表可以快速地找到相应的值。内存块里面存的是索引数组，需要找数据的时候就会从 Shared Component Manager 中找。"}]},{"type":"element","tag":"h3","props":{"id":"其他要点"},"children":[{"type":"text","value":"其他要点"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityQuery"}]},{"type":"text","value":" 可以迭代所有拥有相同 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 的实体"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"我们可以用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityQuery.SetFilter()"}]},{"type":"text","value":" 来迭代所有拥有某个特定 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 的实体。这种操作开销十分低，因为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SetFilter"}]},{"type":"text","value":" 内部筛选的只是 int 的索引。前面说了每个内存块都有一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 索引数组，因此对于每个内存块来说，筛选（filtering）的消耗都是可以忽略不计的。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"怎么样获取 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 的值呢？"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityManager.GetAllUniqueSharedComponentData<T>"}]},{"type":"text","value":" 可以得到在存活的实体中（alive entities）的所有的泛型 T 类型的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 值，结果以参数中的列表返回，你也可以通过其重载的方法获得所有值的索引。其他获取值的方法可以参考 /Packages/com.unity.entities/Unity.Entities/EntityManagerAccessComponentData.cs。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 是自动引用计数的，例如在没有任何内存块拥有某个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 索引的时候，引用计数会置零，从而知道要删除"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 的数据 。这一点就能看出其在 ECS 的世界中是非常独特的存在，想要深入了解可以看这篇文章"},{"type":"element","tag":"a","props":{"href":"https://gametorrahod.com/everything-about-isharedcomponentdata/","rel":["nofollow"]},"children":[{"type":"text","value":"《Everything about ISharedComponentData》"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 应该尽量不去更改，因为更改 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 会导致实体的组件数据需要复制到其他的内存块中。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你也可以读读这篇更深入的文章"},{"type":"element","tag":"a","props":{"href":"https://gametorrahod.com/everything-about-isharedcomponentdata/","rel":["nofollow"]},"children":[{"type":"text","value":"《Everything about ISharedComponentData》"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"h2","props":{"id":"system-state-components系统状态组件"},"children":[{"type":"text","value":"System state components（系统状态组件）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemStateComponentData"}]},{"type":"text","value":" 允许你跟踪系统（System）的资源，并允许你合适地创建和删除某些资源，这些过程中不依赖独立的回调（individual callback）。"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"假设有一个网络同步 System State，其监控一个 Component A 的同步，则我只需要定义一个 SystemStateComponent SA。当 Entity [有 A，无 SA] 时，表示 A 刚添加，此时添加 SA。等到 Entity [无 A，有 SA] 时,表示 A 被删除（尝试销毁Entity 时也会删除 A）。\n"},{"type":"element","tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/51289405","rel":["nofollow"]},"children":[{"type":"text","value":"《浅入浅出Unity ECS》"}]},{"type":"text","value":" BenzzZX"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemStateComponentData"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemStateSharedComponentData"}]},{"type":"text","value":" 这两个类型与 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ComponentData"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SharedComponentData"}]},{"type":"text","value":" 十分相似，不同的是前者两个类型都是系统级别的，不会在实体删除的时候被删除。"}]},{"type":"element","tag":"h3","props":{"id":"motivation诱因"},"children":[{"type":"text","value":"Motivation（诱因）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"System state components 有这样特殊的行为，是因为："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"系统可能需要保持一个基于 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ComponentData"}]},{"type":"text","value":" 的内部状态。例如已经被分配的资源。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"系统需要通过值来管理这些状态，也需要管理其他系统所造成的的状态改变。例如在组件中的值改变的时候，或者在相关组件被添加或者被删除的时候。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"“没有回调”是 ECS 设计规则的重要元素。"}]}]},{"type":"element","tag":"h3","props":{"id":"concept概念"},"children":[{"type":"text","value":"Concept（概念）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemStateComponentData"}]},{"type":"text","value":" 普遍用法是镜像一个用户组件，并提供内部状态。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上面引用的网络同步的例子中，A 就是用户分配的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ComponentData"}]},{"type":"text","value":"，SA 就是系统分配的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemComponentData"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面以 FooComponent （"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ComponentData"}]},{"type":"text","value":"）和 FooStateComponent（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemComponentData"}]},{"type":"text","value":"）做主要用途的示例。前两个用途已经在前面的网络同步例子中呈现过。"}]},{"type":"element","tag":"h4","props":{"id":"检测组件的添加"},"children":[{"type":"text","value":"检测组件的添加"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果用户添加 FooComponent 时，FooStateComponent 还不存在。FooSystem 会在 update 中查询，如果实体只有 FooComponent 而没有 FooStateComponent,，则可以判断这个实体是新添加的。这时候 FooSystem 会加上 FooStateComponent 组件和其他需要的内部状态。"}]},{"type":"element","tag":"h4","props":{"id":"检测组件的删除"},"children":[{"type":"text","value":"检测组件的删除"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果用户删除 FooComponent 后，FooStateComponent 仍然存在。FooSystem 会在 update 中查询，如果实体没有 FooComponent 而有 FooStateComponent,，则可以判断 FooComponent 已经被删除了。这时候 FooSystem 会给删除 FooStateComponent 组件和修改其他需要的内部状态。"}]},{"type":"element","tag":"h4","props":{"id":"监测实体的删除"},"children":[{"type":"text","value":"监测实体的删除"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通常 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DestroyEntity"}]},{"type":"text","value":" 这个方法可以用来："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"找到所有由某个实体 ID 标记的所有组件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"删除那些组件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"回收实体 ID 以作重用"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然而，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DestroyEntity"}]},{"type":"text","value":" 无法删除 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemStateComponentData"}]},{"type":"text","value":" 。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在你删除实体时，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityManager"}]},{"type":"text","value":" "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"不会"}]},{"type":"text","value":"移除任何 system state components，在它们没被删除的时候，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityManager"}]},{"type":"text","value":" 也不会回收其实体的 ID 。这样允许系统（System）在一个实体被删除的时候，去整理内部的状态（internal state），也能清理关联着实体 ID 的相关的资源和状态。实体 ID 只会在所有 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SystemStateComponentData"}]},{"type":"text","value":" 被删除的时候才被重用。"}]},{"type":"element","tag":"h2","props":{"id":"dynamic-buffers动态缓冲"},"children":[{"type":"text","value":"Dynamic Buffers（动态缓冲）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DynamicBuffer"}]},{"type":"text","value":" 也是组件的一种类型，它能把一个变量内存空间大小的弹性的缓冲（variable-sized, “stretchy” buffer）和一个实体关联起来。它内部存储着一定数量的元素，但如果内部所占内存空间太大，会额外划分一个堆内存（heap memory）来存储。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"动态缓冲的内存管理是全自动的。与 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DynamicBuffer"}]},{"type":"text","value":" 关联的内存由 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityManager"}]},{"type":"text","value":" 来管理，这样当"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DynamicBuffer"}]},{"type":"text","value":" 组件被删除的时候，所关联的堆内存空间也会自动释放掉。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上面的解释可能略显苍白，实际上 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DynamicBuffer"}]},{"type":"text","value":" 可以看成一个有默认大小的数组，其行为和性能都和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"NativeArray"}]},{"type":"text","value":"（在 ECS 中常用的无 GC 容器类型）差不多，但是存储数据超过默认大小也没关系，上文提到了会创建一个堆内存来存储多的数据。"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DynamicBuffer"}]},{"type":"text","value":" 可以通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ToNativeArray"}]},{"type":"text","value":" 转成 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"NativeArray"}]},{"type":"text","value":" 类型，其中只是把指针重新指向缓冲，不会复制数据。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://tsubakit1.hateblo.jp/entry/2018/11/07/234502","rel":["nofollow"]},"children":[{"type":"text","value":"【Unity】ECSで配列を格納する Dynamic Buffers"}]},{"type":"text","value":" 这篇文章中，作者用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DynamicBuffer"}]},{"type":"text","value":" 来储存临近的圆柱体实体，从而更方便地与这些实体交互。"}]},{"type":"element","tag":"h3","props":{"id":"定义缓冲"},"children":[{"type":"text","value":"定义缓冲"}]},{"type":"element","tag":"pre","props":{"code":"// 8 指的是缓冲中默认元素的数量，例如这例子中存的是 Integer 类型\n// 那么 8 integers （32 bytes）就是缓冲的默认大小\n// 64 位机器中则占 16 bytes\n[InternalBufferCapacity(8)]\npublic struct MyBufferElement : IBufferElementData\n{\n    // 下面的隐式转换是可选的，这样可以少写些代码\n    public static implicit operator int(MyBufferElement e) { return e.Value; }\n    public static implicit operator MyBufferElement(int e) { return new MyBufferElement { Value = e }; }\n\n    // 每个缓冲元素要存储的值\n    public int Value;\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 8 指的是缓冲中默认元素的数量，例如这例子中存的是 Integer 类型\n// 那么 8 integers （32 bytes）就是缓冲的默认大小\n// 64 位机器中则占 16 bytes\n[InternalBufferCapacity(8)]\npublic struct MyBufferElement : IBufferElementData\n{\n    // 下面的隐式转换是可选的，这样可以少写些代码\n    public static implicit operator int(MyBufferElement e) { return e.Value; }\n    public static implicit operator MyBufferElement(int e) { return new MyBufferElement { Value = e }; }\n\n    // 每个缓冲元素要存储的值\n    public int Value;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可能有点奇怪，我们要定义缓冲中元素的结构而不是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Buffer"}]},{"type":"text","value":" 缓冲本身，其实这样在 ECS 中有两个好处："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对于 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"float3"}]},{"type":"text","value":" 或者其他常见的值类型来说，这样能支持多种 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DynamicBuffer"}]},{"type":"text","value":" 。我们可以重用已有的缓冲元素的结构，来定义其他的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Buffers"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"我们可以将 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Buffer"}]},{"type":"text","value":" 的元素类型包含在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"EntityArchetypes"}]},{"type":"text","value":" 中，这样它会表现得像拥有一个组件一样。例如用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AddBuffer()"}]},{"type":"text","value":" 方法，可以通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"entityManager.AddBuffer<MyBufferElement>(entity);"}]},{"type":"text","value":" 来添加缓冲。"}]}]},{"type":"element","tag":"h2","props":{"id":"关于prefab到entity"},"children":[{"type":"text","value":"关于prefab到entity"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IDeclareReferencedPrefabs"}]},{"type":"text","value":" ： 将prefab引用添加到Conversion World。在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IConvertGameObjectToEntity"}]},{"type":"text","value":"中可以通过GameObjectConversionSystem根据prefab获取entity"}]}]},{"type":"element","tag":"pre","props":{"code":"public void DeclareReferencedPrefabs(List<GameObject> referencedPrefabs) => referencedPrefabs.Add(Prefab);\n","language":"cpp","meta":"","className":["language-cpp"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public void DeclareReferencedPrefabs(List<GameObject> referencedPrefabs) => referencedPrefabs.Add(Prefab);\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IConvertGameObjectToEntity"}]},{"type":"text","value":"：自动生成一个新的entity，然后自定义对entity的操作。"}]}]},{"type":"element","tag":"pre","props":{"code":"public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentData(entity, new PeriodicSpawner\n        {\n            Prefab = conversionSystem.GetPrimaryEntity(Prefab),\n            SecondsBetweenSpawns = 1 / SpawnsPerSecond\n        });\n    }\n","language":"cpp","meta":"","className":["language-cpp"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentData(entity, new PeriodicSpawner\n        {\n            Prefab = conversionSystem.GetPrimaryEntity(Prefab),\n            SecondsBetweenSpawns = 1 / SpawnsPerSecond\n        });\n    }\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Knightmore/MultiWorldBootstrap","rel":["nofollow"]},"children":[{"type":"text","value":"Knightmore/MultiWorldBootstrap: Unity ICustomBootstrap extension for multiple custom world creation in ECS (github.com)"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"general-purpose-component普通用途组件","depth":2,"text":"General Purpose Component（普通用途组件）"},{"id":"shared-components共享组件","depth":2,"text":"Shared components（共享组件）","children":[{"id":"内存结构","depth":3,"text":"内存结构"},{"id":"其他要点","depth":3,"text":"其他要点"}]},{"id":"system-state-components系统状态组件","depth":2,"text":"System state components（系统状态组件）","children":[{"id":"motivation诱因","depth":3,"text":"Motivation（诱因）"},{"id":"concept概念","depth":3,"text":"Concept（概念）"}]},{"id":"dynamic-buffers动态缓冲","depth":2,"text":"Dynamic Buffers（动态缓冲）","children":[{"id":"定义缓冲","depth":3,"text":"定义缓冲"}]},{"id":"关于prefab到entity","depth":2,"text":"关于prefab到entity"}]}},"_type":"markdown","_id":"content:unity:2020-10-18-unity-ecs-component.md","_source":"content","_file":"unity/2020-10-18-unity-ecs-component.md","_extension":"md","date":"2020-10-18"}