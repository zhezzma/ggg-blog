{"_path":"/unity/2020-10-20-ecs-world","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"源代码分析world的创建","description":"Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs"}]},{"type":"element","tag":"pre","props":{"code":"    static class AutomaticWorldBootstrap\n    {\n        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]\n        static void Initialize()\n        {\n            DefaultWorldInitialization.Initialize(\"Default World\", false);\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    static class AutomaticWorldBootstrap\n    {\n        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]\n        static void Initialize()\n        {\n            DefaultWorldInitialization.Initialize(\"Default World\", false);\n        }\n    }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Packages/com.unity.entities/Unity.Entities/DefaultWorldInitialization.cs"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"检查是否有bootstrap没有的话则自动创建world"}]},{"type":"element","tag":"pre","props":{"code":"        /// <summary>\n        /// Initializes the default world or runs ICustomBootstrap if one is available.\n        /// </summary>\n        /// <param name=\"defaultWorldName\">The name of the world that will be created. Unless there is a custom bootstrap.</param>\n        /// <param name=\"editorWorld\">Editor worlds by default only include systems with [ExecuteAlways]. If editorWorld is true, ICustomBootstrap will not be used.</param>\n        public static World Initialize(string defaultWorldName, bool editorWorld = false)\n        {\n            RegisterUnloadOrPlayModeChangeShutdown();\n\n            if (!editorWorld)\n            {\n                var bootStrap = CreateBootStrap();\n                if (bootStrap != null && bootStrap.Initialize(defaultWorldName))\n                {\n                    Assert.IsTrue(World.DefaultGameObjectInjectionWorld != null,\n                        $\"ICustomBootstrap.Initialize() implementation failed to set \" +\n                        $\"World.DefaultGameObjectInjectionWorld, despite returning true \" +\n                        $\"(indicating the World has been properly initialized)\");\n                    return World.DefaultGameObjectInjectionWorld;\n                }\n            }\n\n            var world = new World(defaultWorldName, editorWorld ? WorldFlags.Editor : WorldFlags.Game);\n            World.DefaultGameObjectInjectionWorld = world;\n\n            var systemList = GetAllSystems(WorldSystemFilterFlags.Default, editorWorld);\n            AddSystemToRootLevelSystemGroupsInternal(world, systemList, systemList.Count);\n\n#if !UNITY_DOTSRUNTIME\n            ScriptBehaviourUpdateOrder.AddWorldToCurrentPlayerLoop(world);\n#endif\n\n            DefaultWorldInitialized?.Invoke(world);\n            return world;\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        /// <summary>\n        /// Initializes the default world or runs ICustomBootstrap if one is available.\n        /// </summary>\n        /// <param name=\"defaultWorldName\">The name of the world that will be created. Unless there is a custom bootstrap.</param>\n        /// <param name=\"editorWorld\">Editor worlds by default only include systems with [ExecuteAlways]. If editorWorld is true, ICustomBootstrap will not be used.</param>\n        public static World Initialize(string defaultWorldName, bool editorWorld = false)\n        {\n            RegisterUnloadOrPlayModeChangeShutdown();\n\n            if (!editorWorld)\n            {\n                var bootStrap = CreateBootStrap();\n                if (bootStrap != null && bootStrap.Initialize(defaultWorldName))\n                {\n                    Assert.IsTrue(World.DefaultGameObjectInjectionWorld != null,\n                        $\"ICustomBootstrap.Initialize() implementation failed to set \" +\n                        $\"World.DefaultGameObjectInjectionWorld, despite returning true \" +\n                        $\"(indicating the World has been properly initialized)\");\n                    return World.DefaultGameObjectInjectionWorld;\n                }\n            }\n\n            var world = new World(defaultWorldName, editorWorld ? WorldFlags.Editor : WorldFlags.Game);\n            World.DefaultGameObjectInjectionWorld = world;\n\n            var systemList = GetAllSystems(WorldSystemFilterFlags.Default, editorWorld);\n            AddSystemToRootLevelSystemGroupsInternal(world, systemList, systemList.Count);\n\n#if !UNITY_DOTSRUNTIME\n            ScriptBehaviourUpdateOrder.AddWorldToCurrentPlayerLoop(world);\n#endif\n\n            DefaultWorldInitialized?.Invoke(world);\n            return world;\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"查找可用的bootstrap并实例化"}]},{"type":"element","tag":"pre","props":{"code":"        static ICustomBootstrap CreateBootStrap()\n        {\n#if !UNITY_DOTSRUNTIME\n            var bootstrapTypes = TypeManager.GetTypesDerivedFrom(typeof(ICustomBootstrap));\n            Type selectedType = null;\n\n            foreach (var bootType in bootstrapTypes)\n            {\n                if (bootType.IsAbstract || bootType.ContainsGenericParameters)\n                    continue;\n\n                if (selectedType == null)\n                    selectedType = bootType;\n                else if (selectedType.IsAssignableFrom(bootType))\n                    selectedType = bootType;\n                else if (!bootType.IsAssignableFrom(selectedType))\n                    Debug.LogError(\"Multiple custom ICustomBootstrap specified, ignoring \" + bootType);\n            }\n            ICustomBootstrap bootstrap = null;\n            if (selectedType != null)\n                bootstrap = Activator.CreateInstance(selectedType) as ICustomBootstrap;\n\n            return bootstrap;\n#else\n            throw new Exception(\"This method should have been replaced by code-gen.\");\n#endif\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        static ICustomBootstrap CreateBootStrap()\n        {\n#if !UNITY_DOTSRUNTIME\n            var bootstrapTypes = TypeManager.GetTypesDerivedFrom(typeof(ICustomBootstrap));\n            Type selectedType = null;\n\n            foreach (var bootType in bootstrapTypes)\n            {\n                if (bootType.IsAbstract || bootType.ContainsGenericParameters)\n                    continue;\n\n                if (selectedType == null)\n                    selectedType = bootType;\n                else if (selectedType.IsAssignableFrom(bootType))\n                    selectedType = bootType;\n                else if (!bootType.IsAssignableFrom(selectedType))\n                    Debug.LogError(\"Multiple custom ICustomBootstrap specified, ignoring \" + bootType);\n            }\n            ICustomBootstrap bootstrap = null;\n            if (selectedType != null)\n                bootstrap = Activator.CreateInstance(selectedType) as ICustomBootstrap;\n\n            return bootstrap;\n#else\n            throw new Exception(\"This method should have been replaced by code-gen.\");\n#endif\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"小技巧: 新建一个ICustomBootstrap,在Initialize抛出异常.则能在追踪栈找到代码的入口"}]},{"type":"element","tag":"pre","props":{"code":"Multiple custom ICustomBootstrap specified, ignoring GameBootstrap\nUnityEngine.Debug:LogError(Object)\nUnity.Debug:LogError(Object) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/Stubs/Unity/Debug.cs:13)\nUnity.Entities.DefaultWorldInitialization:CreateBootStrap() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:351)\nUnity.Entities.DefaultWorldInitialization:Initialize(String, Boolean) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:116)\nUnity.Entities.AutomaticWorldBootstrap:Initialize() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs:15)\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Multiple custom ICustomBootstrap specified, ignoring GameBootstrap\nUnityEngine.Debug:LogError(Object)\nUnity.Debug:LogError(Object) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/Stubs/Unity/Debug.cs:13)\nUnity.Entities.DefaultWorldInitialization:CreateBootStrap() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:351)\nUnity.Entities.DefaultWorldInitialization:Initialize(String, Boolean) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:116)\nUnity.Entities.AutomaticWorldBootstrap:Initialize() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs:15)\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:unity:2020-10-20-ecs-world.md","_source":"content","_file":"unity/2020-10-20-ecs-world.md","_extension":"md","date":"2020-10-20"}