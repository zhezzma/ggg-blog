{"_path":"/unity/2020-10-21-platform","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"unity使用platforms构建","description":"BuildConfiguration他继承于scriptobject,他的扩展名是\".buildconfiguration\"导入的时候执行了编辑器脚本    [ScriptedImporter(3, new[] { BuildConfiguration.AssetExtension })]\n    sealed class BuildConfigurationScriptedImporter : ScriptedImporter\n    {\n        public override void OnImportAsset(AssetImportContext context)\n      ","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"buildconfiguration"},"children":[{"type":"text","value":"BuildConfiguration"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"他继承于scriptobject,他的扩展名是\".buildconfiguration\"导入的时候执行了编辑器脚本"}]}]},{"type":"element","tag":"pre","props":{"code":"    [ScriptedImporter(3, new[] { BuildConfiguration.AssetExtension })]\n    sealed class BuildConfigurationScriptedImporter : ScriptedImporter\n    {\n        public override void OnImportAsset(AssetImportContext context)\n        {\n            var asset = BuildConfiguration.CreateInstance();\n            if (BuildConfiguration.DeserializeFromPath(asset, context.assetPath))\n            {\n                context.AddObjectToAsset(\"asset\", asset/*, icon*/);\n                context.SetMainObject(asset);\n            }\n        }\n    ...\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    [ScriptedImporter(3, new[] { BuildConfiguration.AssetExtension })]\n    sealed class BuildConfigurationScriptedImporter : ScriptedImporter\n    {\n        public override void OnImportAsset(AssetImportContext context)\n        {\n            var asset = BuildConfiguration.CreateInstance();\n            if (BuildConfiguration.DeserializeFromPath(asset, context.assetPath))\n            {\n                context.AddObjectToAsset(\"asset\", asset/*, icon*/);\n                context.SetMainObject(asset);\n            }\n        }\n    ...\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"再看下他再unity中的编辑器显示"}]}]},{"type":"element","tag":"pre","props":{"code":"[CustomEditor(typeof(BuildConfigurationScriptedImporter))]\n    internal sealed class BuildConfigurationScriptedImporterEditor : ScriptedImporterEditor\n    {\n        static class ClassNames\n        {\n            public const string BaseClassName = nameof(BuildConfiguration);\n            public const string Dependencies = BaseClassName + \"__asset-dependencies\";\n            public const string Header = BaseClassName + \"__asset-header\";\n            public const string HeaderLabel = BaseClassName + \"__asset-header-label\";\n            public const string BuildAction = BaseClassName + \"__build-action\";\n            public const string BuildDropdown = BaseClassName + \"__build-dropdown\";\n            public const string AddComponent = BaseClassName + \"__add-component-button\";\n            public const string OptionalComponents = BaseClassName + \"__optional-components\";\n        }\n\n        internal struct BuildAction : IEquatable<BuildAction>\n        {\n            public string Name;\n            public Action<BuildConfiguration> Action;\n\n            public bool Equals(BuildAction other)\n            {\n                return Name == other.Name;\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[CustomEditor(typeof(BuildConfigurationScriptedImporter))]\n    internal sealed class BuildConfigurationScriptedImporterEditor : ScriptedImporterEditor\n    {\n        static class ClassNames\n        {\n            public const string BaseClassName = nameof(BuildConfiguration);\n            public const string Dependencies = BaseClassName + \"__asset-dependencies\";\n            public const string Header = BaseClassName + \"__asset-header\";\n            public const string HeaderLabel = BaseClassName + \"__asset-header-label\";\n            public const string BuildAction = BaseClassName + \"__build-action\";\n            public const string BuildDropdown = BaseClassName + \"__build-dropdown\";\n            public const string AddComponent = BaseClassName + \"__add-component-button\";\n            public const string OptionalComponents = BaseClassName + \"__optional-components\";\n        }\n\n        internal struct BuildAction : IEquatable<BuildAction>\n        {\n            public string Name;\n            public Action<BuildConfiguration> Action;\n\n            public bool Equals(BuildAction other)\n            {\n                return Name == other.Name;\n            }\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"该脚本定义了三个按钮"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"build"}]},{"type":"text","value":","},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"run"}]},{"type":"text","value":","},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"build and run"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何建立"}]}]},{"type":"element","tag":"pre","props":{"code":"        public BuildResult Build()\n        {\n            var pipeline = GetBuildPipeline();\n            var canUse = CanUsePipeline(pipeline);\n            if (!canUse.Result)\n            {\n                return BuildResult.Failure(pipeline, this, canUse.Reason);\n            }\n\n            var what = !string.IsNullOrEmpty(name) ? $\" {name}\" : string.Empty;\n            using (var progress = new BuildProgress($\"Building{what}\", \"Please wait...\"))\n            {\n                return pipeline.Build(this, progress);\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        public BuildResult Build()\n        {\n            var pipeline = GetBuildPipeline();\n            var canUse = CanUsePipeline(pipeline);\n            if (!canUse.Result)\n            {\n                return BuildResult.Failure(pipeline, this, canUse.Reason);\n            }\n\n            var what = !string.IsNullOrEmpty(name) ? $\" {name}\" : string.Empty;\n            using (var progress = new BuildProgress($\"Building{what}\", \"Please wait...\"))\n            {\n                return pipeline.Build(this, progress);\n            }\n        }\n"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"从IBuildPipelineComponent组件中获取Pipeline..继承IBuildPipelineComponent接口的组件有"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ClassicBuildProfile"}]},{"type":"text","value":","},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DotsRuntimeBuildProfile"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"关于platform,我们看下安卓建立的配置,可以看到手动实例化了"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ClassicBuildProfile"}]},{"type":"text","value":",并且设置了platform"},{"type":"element","tag":"pre","props":{"code":"    static class AndroidMenuItem\n    {\n        const string k_CreateBuildConfigurationAssetClassic = BuildConfigurationMenuItem.k_BuildConfigurationMenu + \"Android Classic Build Configuration\";\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic, true)]\n        static bool CreateBuildConfigurationAssetClassicValidation()\n        {\n            return Directory.Exists(AssetDatabase.GetAssetPath(Selection.activeObject));\n        }\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic)]\n        static void CreateBuildConfigurationAssetClassic()\n        {\n            Selection.activeObject = BuildConfigurationMenuItem.CreateAssetInActiveDirectory(\n                \"AndroidClassic\",\n                new GeneralSettings(),\n                new SceneList(),\n                new ClassicBuildProfile { Platform = new AndroidPlatform() });\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    static class AndroidMenuItem\n    {\n        const string k_CreateBuildConfigurationAssetClassic = BuildConfigurationMenuItem.k_BuildConfigurationMenu + \"Android Classic Build Configuration\";\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic, true)]\n        static bool CreateBuildConfigurationAssetClassicValidation()\n        {\n            return Directory.Exists(AssetDatabase.GetAssetPath(Selection.activeObject));\n        }\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic)]\n        static void CreateBuildConfigurationAssetClassic()\n        {\n            Selection.activeObject = BuildConfigurationMenuItem.CreateAssetInActiveDirectory(\n                \"AndroidClassic\",\n                new GeneralSettings(),\n                new SceneList(),\n                new ClassicBuildProfile { Platform = new AndroidPlatform() });\n        }\n    }\n"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"buildplayerstep"},"children":[{"type":"text","value":"BuildPlayerStep"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"我们看到他的最终执行仍然使用了API, UnityEditor.BuildPipeline.BuildPlayer(buildPlayerOptions);"}]}]},{"type":"element","tag":"pre","props":{"code":"sealed class BuildPlayerStep : BuildStepBase\n    {\n        public override Type[] UsedComponents { get; } =\n        {\n            typeof(ClassicBuildProfile),\n            typeof(SceneList),\n            typeof(GeneralSettings),\n            typeof(OutputBuildDirectory)\n        };\n\n        public override BuildResult Run(BuildContext context)\n        {\n            var classicSharedData = context.GetValue<ClassicSharedData>();\n            var target = classicSharedData.BuildTarget;\n            if (target <= 0)\n                return context.Failure($\"Invalid build target '{target.ToString()}'.\");\n            if (target != EditorUserBuildSettings.activeBuildTarget)\n                return context.Failure($\"{nameof(EditorUserBuildSettings.activeBuildTarget)} must be switched before {nameof(BuildPlayerStep)} step.\");\n\n            var embeddedScenes = context.GetValue<EmbeddedScenesValue>().Scenes;\n            if (embeddedScenes.Length == 0)\n                return context.Failure(\"There are no scenes to build.\");\n\n            var outputPath = context.GetOutputBuildDirectory();\n            if (!Directory.Exists(outputPath))\n                Directory.CreateDirectory(outputPath);\n\n            string locationPathName;\n            if (context.HasValue<LocationInfo>())\n            {\n                locationPathName = context.GetValue<LocationInfo>().Path;\n            }\n            else\n            {\n                var generalSettings = context.GetComponentOrDefault<GeneralSettings>();\n                locationPathName = Path.Combine(outputPath, generalSettings.ProductName + ClassicBuildProfile.GetExecutableExtension(target));\n            }\n\n            var buildPlayerOptions = new BuildPlayerOptions()\n            {\n                scenes = embeddedScenes,\n                target = target,\n                locationPathName = locationPathName,\n                targetGroup = UnityEditor.BuildPipeline.GetBuildTargetGroup(target),\n            };\n\n            buildPlayerOptions.options = BuildOptions.None;\n\n            foreach (var customizer in classicSharedData.Customizers)\n                buildPlayerOptions.options |= customizer.ProvideBuildOptions();\n\n            var extraScriptingDefines = classicSharedData.Customizers.SelectMany(c => c.ProvidePlayerScriptingDefines()).ToArray();\n            buildPlayerOptions.extraScriptingDefines = extraScriptingDefines;\n\n            var report = UnityEditor.BuildPipeline.BuildPlayer(buildPlayerOptions);\n            context.SetValue(report);\n\n            return context.FromReport(report);\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sealed class BuildPlayerStep : BuildStepBase\n    {\n        public override Type[] UsedComponents { get; } =\n        {\n            typeof(ClassicBuildProfile),\n            typeof(SceneList),\n            typeof(GeneralSettings),\n            typeof(OutputBuildDirectory)\n        };\n\n        public override BuildResult Run(BuildContext context)\n        {\n            var classicSharedData = context.GetValue<ClassicSharedData>();\n            var target = classicSharedData.BuildTarget;\n            if (target <= 0)\n                return context.Failure($\"Invalid build target '{target.ToString()}'.\");\n            if (target != EditorUserBuildSettings.activeBuildTarget)\n                return context.Failure($\"{nameof(EditorUserBuildSettings.activeBuildTarget)} must be switched before {nameof(BuildPlayerStep)} step.\");\n\n            var embeddedScenes = context.GetValue<EmbeddedScenesValue>().Scenes;\n            if (embeddedScenes.Length == 0)\n                return context.Failure(\"There are no scenes to build.\");\n\n            var outputPath = context.GetOutputBuildDirectory();\n            if (!Directory.Exists(outputPath))\n                Directory.CreateDirectory(outputPath);\n\n            string locationPathName;\n            if (context.HasValue<LocationInfo>())\n            {\n                locationPathName = context.GetValue<LocationInfo>().Path;\n            }\n            else\n            {\n                var generalSettings = context.GetComponentOrDefault<GeneralSettings>();\n                locationPathName = Path.Combine(outputPath, generalSettings.ProductName + ClassicBuildProfile.GetExecutableExtension(target));\n            }\n\n            var buildPlayerOptions = new BuildPlayerOptions()\n            {\n                scenes = embeddedScenes,\n                target = target,\n                locationPathName = locationPathName,\n                targetGroup = UnityEditor.BuildPipeline.GetBuildTargetGroup(target),\n            };\n\n            buildPlayerOptions.options = BuildOptions.None;\n\n            foreach (var customizer in classicSharedData.Customizers)\n                buildPlayerOptions.options |= customizer.ProvideBuildOptions();\n\n            var extraScriptingDefines = classicSharedData.Customizers.SelectMany(c => c.ProvidePlayerScriptingDefines()).ToArray();\n            buildPlayerOptions.extraScriptingDefines = extraScriptingDefines;\n\n            var report = UnityEditor.BuildPipeline.BuildPlayer(buildPlayerOptions);\n            context.SetValue(report);\n\n            return context.FromReport(report);\n        }\n    }\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"buildconfiguration","depth":2,"text":"BuildConfiguration"},{"id":"buildplayerstep","depth":2,"text":"BuildPlayerStep"}]}},"_type":"markdown","_id":"content:unity:2020-10-21-platform.md","_source":"content","_file":"unity/2020-10-21-platform.md","_extension":"md","date":"2020-10-21"}