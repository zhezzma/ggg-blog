{"_path":"/unity/2020-01-12-collision-detection","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"常见的2D碰撞检测","description":"“碰乜鬼嘢啊，碰走晒我滴靓牌”。想到“碰”就自然联想到了“麻将”这一伟大发明。当然除了“碰”，洗牌的时候也充满了各种『碰撞』。","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"“碰乜鬼嘢啊，碰走晒我滴靓牌”。想到“碰”就自然联想到了“麻将”这一伟大发明。当然除了“碰”，洗牌的时候也充满了各种『碰撞』。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"好了，不废话。直入主题——碰撞检测。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 2D 环境下，常见的碰撞检测方法如下："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"外接图形判别法"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"轴对称包围盒（Axis-Aligned Bounding Box），即无旋转矩形。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"圆形碰撞"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"圆形与矩形（无旋转）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"圆形与旋转矩形（以矩形中心点为旋转轴）"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"光线投射法"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"分离轴定理"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"其他"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"地图格子划分"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"像素检测"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下文将由易到难的顺序介绍上述各种碰撞检测方法：外接图形判别法 > 其他 > 光线投射法 > 分离轴定理。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外，有一些场景只要我们约定好限定条件，也能实现我们想要的碰撞，如下面的碰壁反弹："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当球碰到边框就反弹(如"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"x/y轴方向速度取反"}]},{"type":"text","value":")。"}]},{"type":"element","tag":"pre","props":{"code":"if(ball.left < 0 || ball.right  > rect.width)  ball.velocityX = -ball.velocityX\nif(ball.top  < 0 || ball.bottom > rect.height) ball.velocityY = -ball.velocityY\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if(ball.left < 0 || ball.right  > rect.width)  ball.velocityX = -ball.velocityX\nif(ball.top  < 0 || ball.bottom > rect.height) ball.velocityY = -ball.velocityY\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"再例如当一个人走到 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"100px"}]},{"type":"text","value":" 位置时不进行跳跃，就会碰到石头等等。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因此，某些场景只需通过设定到适当的参数即可实现碰撞检测。"}]},{"type":"element","tag":"h2","props":{"id":"外接图形判别法"},"children":[{"type":"text","value":"外接图形判别法"}]},{"type":"element","tag":"h3","props":{"id":"轴对称包围盒axis-aligned-bounding-box"},"children":[{"type":"text","value":"轴对称包围盒（Axis-Aligned Bounding Box）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：判断任意两个（无旋转）矩形的任意一边是否无间距，从而判断是否碰撞。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"算法："}]},{"type":"element","tag":"pre","props":{"code":"rect1.x < rect2.x + rect2.width &&\nrect1.x + rect1.width > rect2.x &&\nrect1.y < rect2.y + rect2.height &&\nrect1.height + rect1.y > rect2.y\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rect1.x < rect2.x + rect2.width &&\nrect1.x + rect1.width > rect2.x &&\nrect1.y < rect2.y + rect2.height &&\nrect1.height + rect1.y > rect2.y\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"两矩形间碰撞的各种情况：\n"},{"type":"element","tag":"img","props":{"alt":"轴对称包围盒","src":"/images/2020-01-12-Collision-detection/rectangle_collision.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在线运行示例（先点击运行示例以获取焦点，下同）："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缺点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"相对局限：两物体必须是矩形，且均不允许旋转（即关于水平和垂直方向上对称）。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对于包含着图案（非填满整个矩形）的矩形进行碰撞检测，可能存在精度不足的问题。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"物体运动速度过快时，可能会在相邻两动画帧之间快速穿越，导致忽略了本应碰撞的事件发生。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"适用案例："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"（类）矩形物体间的碰撞。"}]}]},{"type":"element","tag":"h3","props":{"id":"圆形碰撞circle-collision"},"children":[{"type":"text","value":"圆形碰撞（Circle Collision）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：通过判断任意两个圆形的圆心距离是否小于两圆半径之和，若小于则为碰撞。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"两点之间的距离由以下公式可得：\n"},{"type":"element","tag":"img","props":{"alt":"两点之间距离","src":"/images/2020-01-12-Collision-detection/two_point_distance.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"判断两圆心距离是否小于两半径之和："}]},{"type":"element","tag":"pre","props":{"code":"Math.sqrt(Math.pow(circleA.x - circleB.x, 2) +\n          Math.pow(circleA.y - circleB.y, 2)) \n    < circleA.radius + circleB.radius\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Math.sqrt(Math.pow(circleA.x - circleB.x, 2) +\n          Math.pow(circleA.y - circleB.y, 2)) \n    < circleA.radius + circleB.radius\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"图例：\n"},{"type":"element","tag":"img","props":{"alt":"圆形间的碰撞检测","src":"/images/2020-01-12-Collision-detection/circle_collision.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在线运行示例："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缺点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"与『轴对称包围盒』类似"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"适用案例："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"（类）圆形的物体，如各种球类碰撞。"}]}]},{"type":"element","tag":"h3","props":{"id":"圆形与矩形无旋转"},"children":[{"type":"text","value":"圆形与矩形（无旋转）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：通过找出矩形上离圆心最近的点，然后通过判断该点与圆心的距离是否小于圆的半径，若小于则为碰撞。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那如何找出矩形上离圆心最近的点呢？下面我们从 x 轴、y 轴两个方向分别进行寻找。为了方便描述，我们先约定以下变量："}]},{"type":"element","tag":"pre","props":{"code":"矩形上离圆心最近的点为变量：closestPoint = {x, y};\n矩形 rect = {x, y, w, h}; // 左上角与宽高\n圆形 circle = {x, y, r}; // 圆心与半径\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"矩形上离圆心最近的点为变量：closestPoint = {x, y};\n矩形 rect = {x, y, w, h}; // 左上角与宽高\n圆形 circle = {x, y, r}; // 圆心与半径\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先是 x 轴："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果圆心在矩形的左侧（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"if(circle.x < rect.x)"}]},{"type":"text","value":"），那么 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"closestPoint.x = rect.x"}]},{"type":"text","value":"。\n"},{"type":"element","tag":"img","props":{"alt":"圆心在矩形的左侧","src":"/images/2020-01-12-Collision-detection/cicle_rectangle_left.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果圆心在矩形的右侧（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"else if(circle.x > rect.x + rect.w)"}]},{"type":"text","value":"），那么 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"closestPoint.x = rect.x + rect.w"}]},{"type":"text","value":"。\n"},{"type":"element","tag":"img","props":{"alt":"圆心在矩形的右侧","src":"/images/2020-01-12-Collision-detection/circle_rectangle_right.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果圆心在矩形的正上下方（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":"），那么 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"closestPoint.x = circle.x"}]},{"type":"text","value":"。\n"},{"type":"element","tag":"img","props":{"alt":"圆心在矩形的正上下方","src":"/images/2020-01-12-Collision-detection/circle_rectangle_center.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"同理，对于 y 轴（此处不列举图例）："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果圆心在矩形的上方（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"if(circle.y < rect.y)"}]},{"type":"text","value":"），那么 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"closestPoint.y = rect.y"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果圆心在矩形的下方（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"else if(circle.y > rect.y + rect.h)"}]},{"type":"text","value":"），那么 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"closestPoint.y = rect.y + rect.h"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果圆心在矩形的正左右两侧（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":"），那么 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"closestPoint.y = circle.y"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因此，通过上述方法即可找出矩形上离圆心最近的点了，然后通过『两点之间的距离公式』得出『最近点』与『圆心』的距离，最后将其与圆的半径相比，即可判断是否发生碰撞。"}]},{"type":"element","tag":"pre","props":{"code":"var distance = Math.sqrt(Math.pow(closestPoint.x - circle.x, 2) + Math.pow(closestPoint.y - circle.y, 2))\n\nif(distance < circle.r) return true // 发生碰撞\nelse return false // 未发生碰撞\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var distance = Math.sqrt(Math.pow(closestPoint.x - circle.x, 2) + Math.pow(closestPoint.y - circle.y, 2))\n\nif(distance < circle.r) return true // 发生碰撞\nelse return false // 未发生碰撞\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在线运行示例："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缺点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"矩形需是轴对称的，即不能旋转。"}]}]},{"type":"element","tag":"h3","props":{"id":"圆形与旋转矩形以矩形中心为旋转轴"},"children":[{"type":"text","value":"圆形与旋转矩形（以矩形中心为旋转轴）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：即使矩形以其中心为旋转轴进行了旋转，但是判断它与圆形是否发生碰撞的本质还是找出矩形上离圆心的最近点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于旋转后的矩形，要找出其离圆心最近的点，视乎有些困难。其实，我们可以将我们思想的范围进行扩大：将矩形的旋转看作是整个画布的旋转。那么我们将画布（即 Canvas）反向旋转『矩形旋转的角度』后，所看到的结果就是上一个方法“圆形与矩形（无旋转）”的情形。因此，我们只需求出画布旋转后的圆心位置，即可使用『圆形与矩形（无旋转）』的判断方法了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"绕矩形中心旋转后的画布","src":"/images/2020-01-12-Collision-detection/circle_and_rotated_rect.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"先给出可直接套用的公式，从而得出旋转后的圆心坐标："}]},{"type":"element","tag":"pre","props":{"code":"x’ = cos(β) * (cx – centerX) – sin(β) * (cy – centerY) + centerX\ny’ = sin(β) * (cx – centerX) + cos(β) * (cy – centerY) + centerY\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"x’ = cos(β) * (cx – centerX) – sin(β) * (cy – centerY) + centerX\ny’ = sin(β) * (cx – centerX) + cos(β) * (cy – centerY) + centerY\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面给出该公式的推导过程："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"根据下图，计算某个点绕另外一个点旋转一定角度后的坐标。我们设 A(x,y) 绕 B(a,b) 旋转 β 度后的位置为 C(c,d)。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"某个点绕另外一个点旋转一定角度后的坐标的公式推导","src":"/images/2020-01-12-Collision-detection/circle_and_rotated_rect_formula.png"},"children":[]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"设 A 点旋转前的角度为 δ，则旋转（逆时针）到 C 点后的角度为(δ+β)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"由于 |AB| 与 |CB| 相等（即长度），且"},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"|AB| = y/sin(δ) = x / cos(δ)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"|CB| = d/sin(δ + β) = c / cos(δ + β)"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"半径 r = x / cos(δ) = y / sin(δ) = d / sin(δ + β) = c / cos(δ + β)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"由以下三角函数两角和差公式："},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sin(δ + β) = sin(δ)cos(β) + cos(δ)sin(β)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"cos(δ + β) = cos(δ)cos(β) - sin(δ)sin(β)"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可得出旋转后的坐标："},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"c = r * cos(δ + β) = r * cos(δ)cos(β) - r * sin(δ)sin(β) = x * cos(β) - y * sin(β)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"d = r * sin(δ + β) = r * sin(δ)cos(β) + r * cos(δ)sin(β) = y * cos(β) + x * sin(β)"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由上述公式推导后可得：旋转后的坐标 (c,d) 只与旋转前的坐标 (x,y) 及旋转的角度 β 有关。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当然，(c,d) 是旋转一定角度后『相对于旋转点（轴）的坐标』。因此，前面提到的『可直接套用的公式』中加上了矩形的中心点的坐标值。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从图中也可以得出以下结论：A 点旋转后的 C 点总是在圆周（半径为 |AB|）上运动，利用这点可让物体绕旋转点（轴）做圆周运动。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"得到旋转后的圆心坐标值后，即可使用『圆形与矩形（无旋转）』方法进行碰撞检测了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在线运行案例："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"优点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"相对于圆形与矩形（未旋转）的方法，适用范围更广。"}]}]},{"type":"element","tag":"h2","props":{"id":"其他"},"children":[{"type":"text","value":"其他"}]},{"type":"element","tag":"h3","props":{"id":"地图格子划分"},"children":[{"type":"text","value":"地图格子划分"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：将地图（场景）划分为一个个格子。地图中参与检测的对象都存储着自身所在格子的坐标，那么你即可以认为两个物体在相邻格子时为碰撞，又或者两个物体在同一格才为碰撞。另外，采用此方式的前提是：地图中所有可能参与碰撞的物体都要是格子单元的大小或者是其整数倍。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"蓝色X"}]},{"type":"text","value":" 为障碍物：\n"},{"type":"element","tag":"img","props":{"alt":"地图格子碰撞检测","src":"/images/2020-01-12-Collision-detection/map_cell_collision.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"实现方法："}]},{"type":"element","tag":"pre","props":{"code":"// 通过特定标识指定（非）可行区域\nmap = [\n  [0, 0, 1, 1, 1, 0, 0, 0, 0],\n  [0, 1, 1, 0, 0, 1, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0, 0]\n],\n// 设定角色的初始位置\nplayer = {left: 2, top: 2}\n\n// 移动前（后）判断角色的下一步的动作（如不能前行）\n...\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 通过特定标识指定（非）可行区域\nmap = [\n  [0, 0, 1, 1, 1, 0, 0, 0, 0],\n  [0, 1, 1, 0, 0, 1, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0, 0]\n],\n// 设定角色的初始位置\nplayer = {left: 2, top: 2}\n\n// 移动前（后）判断角色的下一步的动作（如不能前行）\n...\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在线运行示例："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缺点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"适用场景局限。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"适用案例："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"推箱子、踩地雷等"}]}]},{"type":"element","tag":"h3","props":{"id":"像素检测"},"children":[{"type":"text","value":"像素检测"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：以像素级别检测物体之间是否存在重叠，从而判断是否碰撞。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"实现方法有多种，下面列举在 Canvas 中的两种实现方式："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如下述的案例中，通过将两个物体在 offscreen canvas 中判断同一位置（坐标）下是否同时存在非透明的像素。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"利用 canvas 的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"globalCompositeOperation = 'destination-in'"}]},{"type":"text","value":" 属性。该属性会让两者的重叠部分会被保留，其余区域都变成透明。因此，若存在非透明像素，则为碰撞。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"注意，当待检测碰撞物体为两个时，第一种方法需要两个 offscreen canvas，而第二种只需一个。"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"offscreen canvas：与之相关的是 offscreen rendering。正如其名，它会在某个地方进行渲染，但不是屏幕。“某个地方”其实是"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"内存"}]},{"type":"text","value":"。渲染到内存比渲染到屏幕更快。—— "},{"type":"element","tag":"a","props":{"href":"http://devbutze.blogspot.com/2014/02/html5-canvas-offscreen-rendering.html","rel":["nofollow"]},"children":[{"type":"text","value":"Offscreen Rendering"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当然，我们这里并不是利用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"offscreen render"}]},{"type":"text","value":" 的性能优势，而是利用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"offscreen canvas"}]},{"type":"text","value":" 保存独立物体的像素。换句话说："},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"onscreen canvas 只是起展示作用，碰撞检测是在 offscreen canvas 中进行"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外，由于需要逐像素检测，若对整个 Canvas 内所有像素都进行此操作，无疑会浪费很多资源。因此，我们可以先通过运算得到两者"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"相交区域"}]},{"type":"text","value":"，然后只对该区域内的像素进行检测即可。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"图例：\n"},{"type":"element","tag":"img","props":{"alt":"像素检测","src":"/images/2020-01-12-Collision-detection/pixel_collision.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面示例展示了第一种实现方式："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缺点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"因为需要检查每一像素来判定是否碰撞，性能要求比较高。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"适用案例："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"需要以像素级别检测物体是否碰撞。"}]}]},{"type":"element","tag":"h2","props":{"id":"光线投射法ray-casting"},"children":[{"type":"text","value":"光线投射法（Ray Casting）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：通过检测两个物体的速度矢量是否存在交点，且该交点满足一定条件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于下述抛小球入桶的案例：画一条与物体的速度向量相重合的线("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"#1"}]},{"type":"text","value":")，然后再从另一个待检测物体出发，连线到前一个物体，绘制第二条线("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"#2"}]},{"type":"text","value":")，根据两条线的交点位置来判定是否发生碰撞。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"抛球进桶图例：\n"},{"type":"element","tag":"img","props":{"alt":"光线投射法","src":"/images/2020-01-12-Collision-detection/ray_casting_collision.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在小球飞行的过程中，需要不断计算两直线的交点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当满足以下两个条件时，那么应用程序就可以判定小球已落入桶中："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"两直线交点在桶口的左右边沿间"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"小球位于第二条线（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"#2"}]},{"type":"text","value":"）下方"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在线运行示例："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"优点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"适合运动速度快的物体"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缺点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"适用范围相对局限。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"适用案例："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"抛球运动进桶。"}]}]},{"type":"element","tag":"h2","props":{"id":"分离轴定理separating-axis-theorem"},"children":[{"type":"text","value":"分离轴定理（Separating Axis Theorem）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"概念：通过判断任意两个 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"凸多边形"}]},{"type":"text","value":" 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"图例：\n"},{"type":"element","tag":"img","props":{"alt":"分离轴定理","src":"/images/2020-01-12-Collision-detection/sat_base.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在程序中，遍历所有角度是不现实的。那如何确定 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"投影轴"}]},{"type":"text","value":" 呢？其实"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"投影轴的数量与多边形的边数相等即可。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"https://misc.aotu.io/JChehe/2017-02-13-2d-collision-detection/sat_projection_two.png","src":"/images/2020-01-12-Collision-detection/sat_projection_two.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以较高抽象层次判断两个凸多边形是否碰撞："}]},{"type":"element","tag":"pre","props":{"code":"function polygonsCollide(polygon1, polygon2) {\n    var axes, projection1, projection2\n    \n    // 根据多边形获取所有投影轴\n    axes = polygon1.getAxes()\n    axes.push(polygon2.getAxes())\n    \n    // 遍历所有投影轴，获取多边形在每条投影轴上的投影\n    for(each axis in axes) {\n        projection1 = polygon1.project(axis)\n        projection2 = polygon2.project(axis)\n        \n        // 判断投影轴上的投影是否存在重叠，若检测到存在间隙则立刻退出判断，消除不必要的运算。\n        if(!projection1.overlaps(projection2))\n            return false\n    }\n    return true\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function polygonsCollide(polygon1, polygon2) {\n    var axes, projection1, projection2\n    \n    // 根据多边形获取所有投影轴\n    axes = polygon1.getAxes()\n    axes.push(polygon2.getAxes())\n    \n    // 遍历所有投影轴，获取多边形在每条投影轴上的投影\n    for(each axis in axes) {\n        projection1 = polygon1.project(axis)\n        projection2 = polygon2.project(axis)\n        \n        // 判断投影轴上的投影是否存在重叠，若检测到存在间隙则立刻退出判断，消除不必要的运算。\n        if(!projection1.overlaps(projection2))\n            return false\n    }\n    return true\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上述代码有几个需要解决的地方："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何确定多边形的各个投影轴"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何将多边形投射到某条投影轴上"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何检测两段投影是否发生重叠"}]}]},{"type":"element","tag":"h4","props":{"id":"投影轴"},"children":[{"type":"text","value":"投影轴"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如下图所示，我们使用一条从 p1 指向 p2 的向量来表示多边形的某条边，我们称之为"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"边缘向量"}]},{"type":"text","value":"。在分离轴定理中，还需要确定一条垂直于边缘向量的法向量，我们称之为“"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"边缘法向量"}]},{"type":"text","value":"”。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"投影轴"}]},{"type":"text","value":"平行于边缘法向量。投影轴的位置不限，因为其长度是无限的，故而多边形在该轴上的投影是一样的。该轴的方向才是关键的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"投影轴","src":"/images/2020-01-12-Collision-detection/sat_projection_one.png"},"children":[]}]},{"type":"element","tag":"pre","props":{"code":"// 以原点(0,0)为始，顶点为末。最后通过向量减法得到 边缘向量。\nvar v1 = new Vector(p1.x, p1.y)\n    v2 = new Vector(p2.x, p2.y)\n\n// 首先得到边缘向量，然后再通过边缘向量获得相应边缘法向量（单位向量）。\n// 两向量相减得到边缘向量 p2p1（注：上面应该有个右箭头，以表示向量）。\n// 设向量 p2p1 为(A,B)，那么其法向量通过 x1x2+y1y2 = 0 可得：(-B,A) 或 (B,-A)。\n    axis = v1.edge(v2).normal()\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 以原点(0,0)为始，顶点为末。最后通过向量减法得到 边缘向量。\nvar v1 = new Vector(p1.x, p1.y)\n    v2 = new Vector(p2.x, p2.y)\n\n// 首先得到边缘向量，然后再通过边缘向量获得相应边缘法向量（单位向量）。\n// 两向量相减得到边缘向量 p2p1（注：上面应该有个右箭头，以表示向量）。\n// 设向量 p2p1 为(A,B)，那么其法向量通过 x1x2+y1y2 = 0 可得：(-B,A) 或 (B,-A)。\n    axis = v1.edge(v2).normal()\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以下是向量对象的部分实现，具体可看源码。"}]},{"type":"element","tag":"pre","props":{"code":"var Vector = function(x, y) {\n    this.x = x\n    this.y = y\n}\n\nVector.prototype = {\n    // 获取向量大小（即向量的模），即两点间距离\n    getMagnitude: function() {\n        return Math.sqrt(Math.pow(this.x, 2),\n                         Math.pow(this.y, 2))\n    },\n    // 点积的几何意义之一是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n    // 后续将会用其计算出投影的长度\n    dotProduct: function(vector) {\n        return this.x * vector.x + this.y + vector.y\n    },\n    // 向量相减 得到边\n    subtarct: function(vector) {\n        var v = new Vector()\n        v.x = this.x - vector.x\n        v.y = this.y - vector.y\n        return v\n    },\n    edge: function(vector) {\n        return this.substract(vector)\n    },\n    // 获取当前向量的法向量（垂直）\n    perpendicular: function() {\n        var v = new Vector()\n        v.x = this.y\n        v.y = 0 - this.x\n        return v\n    },\n    // 获取单位向量（即向量大小为1，用于表示向量方向），一个非零向量除以它的模即可得到单位向量\n    normalize: function() {\n        var v = new Vector(0, 0)\n            m = this.getMagnitude()\n        if(m !== 0) {\n            v.x = this.x / m\n            v.y = this.y /m\n        }\n        return v\n    },\n    // 获取边缘法向量的单位向量，即投影轴\n    normal: function() {\n        var p = this.perpendicular()\n        return p .normalize()\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var Vector = function(x, y) {\n    this.x = x\n    this.y = y\n}\n\nVector.prototype = {\n    // 获取向量大小（即向量的模），即两点间距离\n    getMagnitude: function() {\n        return Math.sqrt(Math.pow(this.x, 2),\n                         Math.pow(this.y, 2))\n    },\n    // 点积的几何意义之一是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n    // 后续将会用其计算出投影的长度\n    dotProduct: function(vector) {\n        return this.x * vector.x + this.y + vector.y\n    },\n    // 向量相减 得到边\n    subtarct: function(vector) {\n        var v = new Vector()\n        v.x = this.x - vector.x\n        v.y = this.y - vector.y\n        return v\n    },\n    edge: function(vector) {\n        return this.substract(vector)\n    },\n    // 获取当前向量的法向量（垂直）\n    perpendicular: function() {\n        var v = new Vector()\n        v.x = this.y\n        v.y = 0 - this.x\n        return v\n    },\n    // 获取单位向量（即向量大小为1，用于表示向量方向），一个非零向量除以它的模即可得到单位向量\n    normalize: function() {\n        var v = new Vector(0, 0)\n            m = this.getMagnitude()\n        if(m !== 0) {\n            v.x = this.x / m\n            v.y = this.y /m\n        }\n        return v\n    },\n    // 获取边缘法向量的单位向量，即投影轴\n    normal: function() {\n        var p = this.perpendicular()\n        return p .normalize()\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"此处输入图片的描述","src":"/images/2020-01-12-Collision-detection/vector_subtract.png"},"children":[]},{"type":"text","value":"\n向量相减"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"更多关于向量的知识可通过其它渠道学习。"}]},{"type":"element","tag":"h4","props":{"id":"投影"},"children":[{"type":"text","value":"投影"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"投影的大小：通过将一个多边形上的每个顶点与原点(0,0)组成的向量，投影在某一投影轴上，然后保留该多边形在该投影轴上所有投影中的最大值和最小值，这样即可表示一个多边形在某投影轴上的投影了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"判断两多边形的投影是否重合："},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"projection1.max > projection2.min && project2.max > projection.min"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"此处输入图片的描述","src":"/images/2020-01-12-Collision-detection/sat_project_length.png"},"children":[]},{"type":"text","value":"\n为了易于理解，示例图将坐标轴"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"原点(0,0)"}]},{"type":"text","value":"放置于三角形"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"边1"}]},{"type":"text","value":"投影轴的适当位置。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由上述可得投影对象："}]},{"type":"element","tag":"pre","props":{"code":"// 用最大和最小值表示某一凸多边形在某一投影轴上的投影位置\nvar Projection = function (min, max) {\n    this.min\n    this.max\n}\n\nprojection.prototype = {\n    // 判断两投影是否重叠\n    overlaps: function(projection) {\n        return this.max > projection.min && projection.max > this.min\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 用最大和最小值表示某一凸多边形在某一投影轴上的投影位置\nvar Projection = function (min, max) {\n    this.min\n    this.max\n}\n\nprojection.prototype = {\n    // 判断两投影是否重叠\n    overlaps: function(projection) {\n        return this.max > projection.min && projection.max > this.min\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如何得到向量在投影轴上的长度？\n向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n由于"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"投影轴"}]},{"type":"text","value":"是单位向量（长度为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"），投影的长度为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"x1 * x2 + y1 * y2"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"点积","src":"/images/2020-01-12-Collision-detection/dot_product.png"},"children":[]}]},{"type":"element","tag":"pre","props":{"code":"// 根据多边形的每个定点，得到投影的最大和最小值，以表示投影。\nfunction project = function (axis) {\n    var scalars = [], v = new Vector()\n    \n    this.points.forEach(function (point) {\n        v.x = point.x\n        v.y = point.y\n        scalars.push(v.dotProduct(axis))\n    })\n    return new Projection(Math.min.apply(Math, scalars),\n                          Math.max,apply(Math, scalars))\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 根据多边形的每个定点，得到投影的最大和最小值，以表示投影。\nfunction project = function (axis) {\n    var scalars = [], v = new Vector()\n    \n    this.points.forEach(function (point) {\n        v.x = point.x\n        v.y = point.y\n        scalars.push(v.dotProduct(axis))\n    })\n    return new Projection(Math.min.apply(Math, scalars),\n                          Math.max,apply(Math, scalars))\n}\n"}]}]},{"type":"element","tag":"h4","props":{"id":"圆形与多边形之间的碰撞检测"},"children":[{"type":"text","value":"圆形与多边形之间的碰撞检测"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由于圆形可近似地看成一个有无数条边的正多边形，而我们不可能按照这些边一一进行投影与测试。我们只需将圆形投射到一条投影轴上即可，这条轴就是圆心与多边形顶点中最近的一点的连线，如图所示："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"圆形与多边形的投影轴","src":"/images/2020-01-12-Collision-detection/sat_projection_circle.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因此，该投影轴和多边形自身的投影轴就组成了一组待检测的投影轴了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而对于圆形与圆形之间的碰撞检测依然是最初的两圆心距离是否小于两半径之和。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"分离轴定理的整体代码实现，可查看以下案例："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"优点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"精确"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"缺点："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"不适用于凹多边形"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"适用案例："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"任意凸多边形和圆形。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"更多关于分离轴定理的资料："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://www.sevenson.com.au/actionscript/sat/","rel":["nofollow"]},"children":[{"type":"text","value":"Separating Axis Theorem (SAT) explanation"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://www.metanetsoftware.com/technique/tutorialA.html","rel":["nofollow"]},"children":[{"type":"text","value":"Collision detection and response"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169","rel":["nofollow"]},"children":[{"type":"text","value":"Collision detection Using the Separating Axis Theorem"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://www.codezealot.org/archives/55","rel":["nofollow"]},"children":[{"type":"text","value":"SAT (Separating Axis Theorem)"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://rocketmandevelopment.com/blog/separation-of-axis-theorem-for-collision-detection/","rel":["nofollow"]},"children":[{"type":"text","value":"Separation of Axis Theorem (SAT) for Collision Detection"}]}]}]},{"type":"element","tag":"h4","props":{"id":"延伸最小平移向量mit"},"children":[{"type":"text","value":"延伸：最小平移向量（MIT）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通常来说，如果碰撞之后，相撞的双方依然存在，那么就需要将两者分开。分开之后，可以使原来相撞的两物体彼此弹开，也可以让他们黏在一起，还可以根据具体需要来实现其他行为。不过首先要做的是，还是将两者分开，这就需要用到最小平移向量（Minimum Translation Vector, MIT）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"最小平移向量","src":"/images/2020-01-12-Collision-detection/mit.png"},"children":[]}]},{"type":"element","tag":"h3","props":{"id":"碰撞性能优化"},"children":[{"type":"text","value":"碰撞性能优化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"若每个周期都需要对全部物体进行两两判断，会造成浪费（因为有些物体分布在不同区域，根本不会发生碰撞）。所以，大部分游戏都会将碰撞分为两个阶段：粗略和精细（broad/narrow）。"}]},{"type":"element","tag":"h4","props":{"id":"粗略阶段broad-phase"},"children":[{"type":"text","value":"粗略阶段（Broad Phase）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Broad phase 能为你提供有可能碰撞的实体列表。这可通过一些特殊的数据结构实现，它们能为你提供这些信息：实体存在哪里和哪些实体在其周围。这些数据结构可以是：四叉树（Quad Trees）、R树（R-Trees）或空间哈希映射（Spatial Hashmap）等。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"读者若感兴趣，可以自行查阅相关信息。"}]},{"type":"element","tag":"h4","props":{"id":"精细阶段narrow-phase"},"children":[{"type":"text","value":"精细阶段（Narrow Phase）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当你有了较小的实体列表，你可以利用精细阶段的算法（如上述讲述的碰撞算法）得到一个确切的答案（是否发生碰撞）。"}]},{"type":"element","tag":"h3","props":{"id":"最后"},"children":[{"type":"text","value":"最后"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"碰撞检测有多种，选择合适最重要。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"完！"}]},{"type":"element","tag":"h3","props":{"id":"参考资料"},"children":[{"type":"text","value":"参考资料"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection","rel":["nofollow"]},"children":[{"type":"text","value":"MDN：2D collision detection"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://item.jd.com/11231175.html?dist=jd","rel":["nofollow"]},"children":[{"type":"text","value":"《HTML5 Canvas 核心技术：图形、动画与游戏开发》"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://lazyfoo.net/SDL_tutorials/lesson19/index.php","rel":["nofollow"]},"children":[{"type":"text","value":"Circular Collision Detection"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://www.migapro.com/circle-and-rotated-rectangle-collision-detection/","rel":["nofollow"]},"children":[{"type":"text","value":"Circle and Rotated Rectangle Collision Detection"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://www.cnblogs.com/ywxgod/archive/2010/08/06/1793609.html","rel":["nofollow"]},"children":[{"type":"text","value":"推导坐标旋转公式"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"感谢您的阅读，本文由 "},{"type":"element","tag":"a","props":{"href":"https://aotu.io/","rel":["nofollow"]},"children":[{"type":"text","value":"凹凸实验室"}]},{"type":"text","value":" 版权所有。如若转载，请注明出处：凹凸实验室（"},{"type":"element","tag":"a","props":{"href":"https://aotu.io/notes/2017/02/16/2d-collision-detection/%EF%BC%89","rel":["nofollow"]},"children":[{"type":"text","value":"https://aotu.io/notes/2017/02/16/2d-collision-detection/）"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"外接图形判别法","depth":2,"text":"外接图形判别法","children":[{"id":"轴对称包围盒axis-aligned-bounding-box","depth":3,"text":"轴对称包围盒（Axis-Aligned Bounding Box）"},{"id":"圆形碰撞circle-collision","depth":3,"text":"圆形碰撞（Circle Collision）"},{"id":"圆形与矩形无旋转","depth":3,"text":"圆形与矩形（无旋转）"},{"id":"圆形与旋转矩形以矩形中心为旋转轴","depth":3,"text":"圆形与旋转矩形（以矩形中心为旋转轴）"}]},{"id":"其他","depth":2,"text":"其他","children":[{"id":"地图格子划分","depth":3,"text":"地图格子划分"},{"id":"像素检测","depth":3,"text":"像素检测"}]},{"id":"光线投射法ray-casting","depth":2,"text":"光线投射法（Ray Casting）"},{"id":"分离轴定理separating-axis-theorem","depth":2,"text":"分离轴定理（Separating Axis Theorem）","children":[{"id":"碰撞性能优化","depth":3,"text":"碰撞性能优化"},{"id":"最后","depth":3,"text":"最后"},{"id":"参考资料","depth":3,"text":"参考资料"}]}]}},"_type":"markdown","_id":"content:unity:2020-01-12-Collision-detection.md","_source":"content","_file":"unity/2020-01-12-Collision-detection.md","_extension":"md","date":"2020-01-12"}