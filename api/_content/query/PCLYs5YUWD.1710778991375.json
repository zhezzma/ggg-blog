{"_path":"/dotnet/2019-10-29-time-wheel","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"时间轮的引入","description":"问题引入：在mmorpg游戏中，群战的时候，玩家释放技能，这时候会出现技能冷却时间，每一个技能都是一个定时器，或者在slg游戏中，玩家修建房屋，创建基地，都会产生一个延时操作，等到了指定时间后，完成房屋修建等任务！！！！！","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"问题引入：在mmorpg游戏中，群战的时候，玩家释放技能，这时候会出现技能冷却时间，每一个技能都是一个定时器，或者在slg游戏中，玩家修建房屋，创建基地，都会产生一个延时操作，等到了指定时间后，完成房屋修建等任务！！！！！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"轮询的尴尬：使用一个定时器，定时遍历多个链表，判定链表里面的任务是否到期！ 效率低下,每一次遍历都需要筛选定时器，时间复杂度O（n）."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"多定时器的尴尬：同时创建多个定时器，每个定时器绑定到期任务，多定时器，会加大cpu的负荷，且任务的到期时间不同，必定会产生更多的定时器。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"解决方案：时间轮的引入"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2019-10-29-time-wheel/20180817103356853.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果所示：将同一时间的任务放在一起，组成一个链表，图中每个格子分别指向这样一个链表，定时器每到期一次，图中的指针移动一格，如此循环往复，当指针指向某个格子，代表这个链表里面的定时器可能到期（注意，这里是可能，因为时间轮是一个循环的圈，比如运行一圈需要时间50s,那么一个100s的定时器，虽然在槽位1的链表中，但是需要时间轮运行两圈，这个定时器才到期）"}]},{"type":"element","tag":"h2","props":{"id":"a-full-example"},"children":[{"type":"text","value":"A full example"}]},{"type":"element","tag":"pre","props":{"code":"/// <summary>\n/// Task fired repeatedly\n/// </summary>\nclass IntervalTimerTask : TimerTask\n{\n    public void Run(Timeout timeout)\n    {\n        Console.WriteLine($\"IntervalTimerTask is fired at {DateTime.UtcNow.Ticks / 10000000L}\");\n        timeout.Timer.NewTimeout(this, TimeSpan.FromSeconds(2));\n    }\n}\n\n/// <summary>\n/// Task only be fired for one time\n/// </summary>\nclass OneTimeTask : TimerTask\n{\n    readonly string _userData;\n    public OneTimeTask(string data)\n    {\n        _userData = data;\n    }\n\n    public void Run(Timeout timeout)\n    {\n        Console.WriteLine($\"{_userData} is fired at {DateTime.UtcNow.Ticks / 10000000L}\");\n    }\n}\n\n\nstatic void Main(string[] args)\n{\n    HashedWheelTimer timer = new HashedWheelTimer( tickDuration: TimeSpan.FromSeconds(1)\n        , ticksPerWheel: 100000\n        , maxPendingTimeouts: 0);\n\n    timer.NewTimeout(new OneTimeTask(\"A\"), TimeSpan.FromSeconds(5));\n    timer.NewTimeout(new OneTimeTask(\"B\"), TimeSpan.FromSeconds(4));\n    var timeout = timer.NewTimeout(new OneTimeTask(\"C\"), TimeSpan.FromSeconds(3));\n    timer.NewTimeout(new OneTimeTask(\"D\"), TimeSpan.FromSeconds(2));\n    timer.NewTimeout(new OneTimeTask(\"E\"), TimeSpan.FromSeconds(1));\n\n    timeout.Cancel();\n\n    timer.NewTimeout(new IntervalTimerTask(), TimeSpan.FromSeconds(5));\n    Console.WriteLine($\"{DateTime.UtcNow.Ticks / 10000000L} : Started\");\n    Console.ReadKey();\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/// <summary>\n/// Task fired repeatedly\n/// </summary>\nclass IntervalTimerTask : TimerTask\n{\n    public void Run(Timeout timeout)\n    {\n        Console.WriteLine($\"IntervalTimerTask is fired at {DateTime.UtcNow.Ticks / 10000000L}\");\n        timeout.Timer.NewTimeout(this, TimeSpan.FromSeconds(2));\n    }\n}\n\n/// <summary>\n/// Task only be fired for one time\n/// </summary>\nclass OneTimeTask : TimerTask\n{\n    readonly string _userData;\n    public OneTimeTask(string data)\n    {\n        _userData = data;\n    }\n\n    public void Run(Timeout timeout)\n    {\n        Console.WriteLine($\"{_userData} is fired at {DateTime.UtcNow.Ticks / 10000000L}\");\n    }\n}\n\n\nstatic void Main(string[] args)\n{\n    HashedWheelTimer timer = new HashedWheelTimer( tickDuration: TimeSpan.FromSeconds(1)\n        , ticksPerWheel: 100000\n        , maxPendingTimeouts: 0);\n\n    timer.NewTimeout(new OneTimeTask(\"A\"), TimeSpan.FromSeconds(5));\n    timer.NewTimeout(new OneTimeTask(\"B\"), TimeSpan.FromSeconds(4));\n    var timeout = timer.NewTimeout(new OneTimeTask(\"C\"), TimeSpan.FromSeconds(3));\n    timer.NewTimeout(new OneTimeTask(\"D\"), TimeSpan.FromSeconds(2));\n    timer.NewTimeout(new OneTimeTask(\"E\"), TimeSpan.FromSeconds(1));\n\n    timeout.Cancel();\n\n    timer.NewTimeout(new IntervalTimerTask(), TimeSpan.FromSeconds(5));\n    Console.WriteLine($\"{DateTime.UtcNow.Ticks / 10000000L} : Started\");\n    Console.ReadKey();\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The output of the sample is something like"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/images/2019-10-29-time-wheel/console.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"c# 的实现"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/wangjia184/HashedWheelTimer","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/wangjia184/HashedWheelTimer"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/fanrice123/HashedWheelTimer.NET","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/fanrice123/HashedWheelTimer.NET"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"a-full-example","depth":2,"text":"A full example"}]}},"_type":"markdown","_id":"content:dotnet:2019-10-29-time-wheel.md","_source":"content","_file":"dotnet/2019-10-29-time-wheel.md","_extension":"md","date":"2019-10-29"}