{"_path":"/dotnet/2020-08-10-param-attribute","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"c#特性参数","description":"可以通过反射获取这些特性然后做处理class Program\n{\n    static void Main(string[] args)\n    {\n        var message = new MessageData {\n\n            Header=\"header...\",\n            Body=\"body....\",\n            Footer=\"footer...\",\n        };\n\n        Type objT = typeof(Program);\n        Type fromBodyT = typeof(FromBodyAt","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以通过反射获取这些特性然后做处理"}]},{"type":"element","tag":"pre","props":{"code":"class Program\n{\n    static void Main(string[] args)\n    {\n        var message = new MessageData {\n\n            Header=\"header...\",\n            Body=\"body....\",\n            Footer=\"footer...\",\n        };\n\n        Type objT = typeof(Program);\n        Type fromBodyT = typeof(FromBodyAttribute);\n        MethodInfo method = objT.GetMethod(\"Test\");\n\n        ParameterInfo[] paramsInfo = method.GetParameters();\n        var parameters= new List<object>(paramsInfo.Length);\n        foreach (ParameterInfo parameterInfo in paramsInfo)\n        {\n            var parameter = new object();\n            if (parameterInfo.CustomAttributes.Any(i => i.AttributeType == fromBodyT))\n                parameter = message.Body;\n            parameters.Add(parameter);\n        }\n\n\n        object result = method.Invoke(null, parameters.ToArray());\n        Console.WriteLine(result);\n\n\n    }\n    public class FromBodyAttribute : Attribute\n    {\n    }\n    public static string Test([FromBody] string body)\n    {\n        return body;\n    }\n    class MessageData\n    {\n\n        public string Body { get; set; }\n        public string Header { get; set; }\n        public string Footer { get; set; }\n\n    }\n\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class Program\n{\n    static void Main(string[] args)\n    {\n        var message = new MessageData {\n\n            Header=\"header...\",\n            Body=\"body....\",\n            Footer=\"footer...\",\n        };\n\n        Type objT = typeof(Program);\n        Type fromBodyT = typeof(FromBodyAttribute);\n        MethodInfo method = objT.GetMethod(\"Test\");\n\n        ParameterInfo[] paramsInfo = method.GetParameters();\n        var parameters= new List<object>(paramsInfo.Length);\n        foreach (ParameterInfo parameterInfo in paramsInfo)\n        {\n            var parameter = new object();\n            if (parameterInfo.CustomAttributes.Any(i => i.AttributeType == fromBodyT))\n                parameter = message.Body;\n            parameters.Add(parameter);\n        }\n\n\n        object result = method.Invoke(null, parameters.ToArray());\n        Console.WriteLine(result);\n\n\n    }\n    public class FromBodyAttribute : Attribute\n    {\n    }\n    public static string Test([FromBody] string body)\n    {\n        return body;\n    }\n    class MessageData\n    {\n\n        public string Body { get; set; }\n        public string Header { get; set; }\n        public string Footer { get; set; }\n\n    }\n\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:dotnet:2020-08-10-param-attribute.md","_source":"content","_file":"dotnet/2020-08-10-param-attribute.md","_extension":"md","date":"2020-08-10"}