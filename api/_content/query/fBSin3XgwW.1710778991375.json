{"_path":"/dotnet/2020-08-17-netcore-options","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"IOptions、IOptionsMonitor以及IOptionsSnapshot","description":"ASP.NET Core引入了Options模式，使用类来表示相关的设置组。简单的来说，就是用强类型的类来表达配置项，这带来了很多好处。\n初学者会发现这个框架有3个主要的面向消费者的接口：IOptions、IOptionsMonitor以及IOptionsSnapshot。\n这三个接口初看起来很类似，所以很容易引起困惑，什么场景下该用哪个接口呢？","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"背景"},"children":[{"type":"text","value":"背景"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ASP.NET Core引入了Options模式，使用类来表示相关的设置组。简单的来说，就是用强类型的类来表达配置项，这带来了很多好处。\n初学者会发现这个框架有3个主要的面向消费者的接口：IOptions、IOptionsMonitor以及IOptionsSnapshot。\n这三个接口初看起来很类似，所以很容易引起困惑，什么场景下该用哪个接口呢？"}]},{"type":"element","tag":"h1","props":{"id":"示例"},"children":[{"type":"text","value":"示例"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们先从一小段代码着手（TestOptions类只有一个字符串属性Name，代码略）："}]},{"type":"element","tag":"pre","props":{"code":"class Program\n{\n    static void Main(string[] args)\n    {\n        var builder = new ConfigurationBuilder();\n        builder.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true); //注意最后一个参数值，true表示配置文件更改时会重新加载。\n        var configuration = builder.Build();\n        var services = new ServiceCollection();\n        services.AddOptions();\n        services.Configure<TestOptions>(configuration); //这里通过配置文件绑定TestOptions\n        var provider = services.BuildServiceProvider();\n        Console.WriteLine(\"修改前：\");\n        Print(provider);\n\n        Change(provider); //使用代码修改Options值。\n        Console.WriteLine(\"使用代码修改后：\");\n        Print(provider);\n\n        Console.WriteLine(\"请修改配置文件。\");\n        Console.ReadLine(); //等待手动修改appsettings.json配置文件。\n        Console.WriteLine(\"修改appsettings.json文件后：\");\n        Print(provider);\n    }\n\n    static void Print(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            var options1 = sp.GetRequiredService<IOptions<TestOptions>>();\n            var options2 = sp.GetRequiredService<IOptionsMonitor<TestOptions>>();\n            var options3 = sp.GetRequiredService<IOptionsSnapshot<TestOptions>>();\n            Console.WriteLine(\"IOptions值: {0}\", options1.Value.Name);\n            Console.WriteLine(\"IOptionsMonitor值: {0}\", options2.CurrentValue.Name);\n            Console.WriteLine(\"IOptionsSnapshot值: {0}\", options3.Value.Name);\n            Console.WriteLine();\n        }\n    }\n\n    static void Change(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            sp.GetRequiredService<IOptions<TestOptions>>().Value.Name = \"IOptions Test 1\";\n            sp.GetRequiredService<IOptionsMonitor<TestOptions>>().CurrentValue.Name = \"IOptionsMonitor Test 1\";\n            sp.GetRequiredService<IOptionsSnapshot<TestOptions>>().Value.Name = \"IOptionsSnapshot Test 1\";\n        }\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class Program\n{\n    static void Main(string[] args)\n    {\n        var builder = new ConfigurationBuilder();\n        builder.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true); //注意最后一个参数值，true表示配置文件更改时会重新加载。\n        var configuration = builder.Build();\n        var services = new ServiceCollection();\n        services.AddOptions();\n        services.Configure<TestOptions>(configuration); //这里通过配置文件绑定TestOptions\n        var provider = services.BuildServiceProvider();\n        Console.WriteLine(\"修改前：\");\n        Print(provider);\n\n        Change(provider); //使用代码修改Options值。\n        Console.WriteLine(\"使用代码修改后：\");\n        Print(provider);\n\n        Console.WriteLine(\"请修改配置文件。\");\n        Console.ReadLine(); //等待手动修改appsettings.json配置文件。\n        Console.WriteLine(\"修改appsettings.json文件后：\");\n        Print(provider);\n    }\n\n    static void Print(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            var options1 = sp.GetRequiredService<IOptions<TestOptions>>();\n            var options2 = sp.GetRequiredService<IOptionsMonitor<TestOptions>>();\n            var options3 = sp.GetRequiredService<IOptionsSnapshot<TestOptions>>();\n            Console.WriteLine(\"IOptions值: {0}\", options1.Value.Name);\n            Console.WriteLine(\"IOptionsMonitor值: {0}\", options2.CurrentValue.Name);\n            Console.WriteLine(\"IOptionsSnapshot值: {0}\", options3.Value.Name);\n            Console.WriteLine();\n        }\n    }\n\n    static void Change(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            sp.GetRequiredService<IOptions<TestOptions>>().Value.Name = \"IOptions Test 1\";\n            sp.GetRequiredService<IOptionsMonitor<TestOptions>>().CurrentValue.Name = \"IOptionsMonitor Test 1\";\n            sp.GetRequiredService<IOptionsSnapshot<TestOptions>>().Value.Name = \"IOptionsSnapshot Test 1\";\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"appsettings.json文件："}]},{"type":"element","tag":"pre","props":{"code":"{\n    \"Name\": \"Test 0\"\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    \"Name\": \"Test 0\"\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上面的代码，首先从appsettings.json文件读取配置，然后向容器注册依赖配置文件的TestOptions，接着分别打印IOptions<>,IOptionsMonitor<>和IOptionsSnapshot<>的值。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接着通过代码来修改TestOptions的值，打印。\n然后通过修改appsettings.json文件来修改TestOptions的值，打印。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"注意，"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"我们仅注册了一次TestOptions，却可以分别通过IOptions<>,IOptionsMonitor<>和IOptionsSnapshot<>接口来获取TestOptions的值。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果我们把appsettings.json文件中Name的值修改为Test 2，那么上面这段代码的输出是这样的："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2020-08-17-netcore-options/94928-20200323160553644-291512622.png"},"children":[]}]},{"type":"element","tag":"h1","props":{"id":"分析"},"children":[{"type":"text","value":"分析"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们可以看到第一次通过代码修改IOptions<>和IOptionsMonitor<>的值后，再次打印都被更新了，但是IOptionsSnapshot<>没有，为什么呢？\n让我们从Options框架的源代码着手，理解为什么会这样。\n当我们需要使用Options模式时，我们都会调用定义在OptionsServiceCollectionExtensions类上的扩展方法AddOptions(this IServiceCollection services)。"}]},{"type":"element","tag":"pre","props":{"code":"var services = new ServiceCollection();\nservices.AddOptions();\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var services = new ServiceCollection();\nservices.AddOptions();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们观察AddOptions方法的实现："}]},{"type":"element","tag":"pre","props":{"code":"public static IServiceCollection AddOptions(this IServiceCollection services)\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptions<>), typeof(OptionsManager<>)));\n    services.TryAdd(ServiceDescriptor.Scoped(typeof(IOptionsSnapshot<>), typeof(OptionsManager<>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitor<>), typeof(OptionsMonitor<>)));\n    services.TryAdd(ServiceDescriptor.Transient(typeof(IOptionsFactory<>), typeof(OptionsFactory<>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitorCache<>), typeof(OptionsCache<>)));\n    return services;\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public static IServiceCollection AddOptions(this IServiceCollection services)\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptions<>), typeof(OptionsManager<>)));\n    services.TryAdd(ServiceDescriptor.Scoped(typeof(IOptionsSnapshot<>), typeof(OptionsManager<>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitor<>), typeof(OptionsMonitor<>)));\n    services.TryAdd(ServiceDescriptor.Transient(typeof(IOptionsFactory<>), typeof(OptionsFactory<>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitorCache<>), typeof(OptionsCache<>)));\n    return services;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从上面的代码我们可以得知，IOptions<>和IOptionsMonitor<>被注册为单例服务，而IOptionsSnapshot<>被注册为范围服务。\n由于IOptions<>和IOptionsMonitor<>都被注册为单例服务，因此每次获取的都是同一个实例，所以更改了以后的值是保留的。\n而IOptionsSnapshot<>被注册为范围服务，所以每次创建新范围时获取的都是一个新的值，外部的更改只对当次有效，不会保留到下次（不能跨范围，对于ASP.NET Core来说不能跨请求）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们继续看第二次修改，第二次修改配置文件后IOptionsMonitor<>和IOptionsSnapshot<>的值更新了，而IOptions<>的值没有更新。\nIOptions<>好理解，它被注册为单例服务，第一次访问的时候生成实例并加载配置文件中的值，此后再也不会读取配置文件，所以它的值不会更新。\nIOptionsSnapshot<>被注册为范围服务，每次重新生成一个新的范围时，它都会从配置文件中获取值，因此它的值会更新。\n但是，IOptionsMonitor<>呢，它被注册为单例，为什么也会更新呢？\n让我们回到AddOptions的源代码，我们留意到IOptionsMonitor<>的实现是OptionsManager<>。\n当我们打开OptionsManager的源代码时，一切都很清楚了。\n它的构造函数如下："}]},{"type":"element","tag":"pre","props":{"code":"public OptionsMonitor(IOptionsFactory<TOptions> factory, IEnumerable<IOptionsChangeTokenSource<TOptions>> sources, IOptionsMonitorCache<TOptions> cache)\n{\n    _factory = factory;\n    _sources = sources;\n    _cache = cache;\n\n    foreach (var source in _sources)\n    {\n        var registration = ChangeToken.OnChange(\n                () => source.GetChangeToken(),\n                (name) => InvokeChanged(name),\n                source.Name);\n\n        _registrations.Add(registration);\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public OptionsMonitor(IOptionsFactory<TOptions> factory, IEnumerable<IOptionsChangeTokenSource<TOptions>> sources, IOptionsMonitorCache<TOptions> cache)\n{\n    _factory = factory;\n    _sources = sources;\n    _cache = cache;\n\n    foreach (var source in _sources)\n    {\n        var registration = ChangeToken.OnChange(\n                () => source.GetChangeToken(),\n                (name) => InvokeChanged(name),\n                source.Name);\n\n        _registrations.Add(registration);\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"原来OptionsMonitor的更新能力是从IOptionsChangeTokenSource而来，但是这个接口的实例又是谁呢？\n我们回到最开始的代码的第10行："}]},{"type":"element","tag":"pre","props":{"code":"services.Configure<TestOptions>(configuration);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"services.Configure<TestOptions>(configuration);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这是一个定义在Microsoft.Extensions.Options.ConfigurationExtensions.dll的扩展方法，最后实际调用的是它的一个重载方法，代码如下："}]},{"type":"element","tag":"pre","props":{"code":"public static IServiceCollection Configure<TOptions>(this IServiceCollection services, string name, IConfiguration config, Action<BinderOptions> configureBinder)\n    where TOptions : class\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    if (config == null)\n    {\n        throw new ArgumentNullException(nameof(config));\n    }\n\n    services.AddOptions();\n    services.AddSingleton<IOptionsChangeTokenSource<TOptions>>(new ConfigurationChangeTokenSource<TOptions>(name, config));\n    return services.AddSingleton<IConfigureOptions<TOptions>>(new NamedConfigureFromConfigurationOptions<TOptions>(name, config, configureBinder));\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public static IServiceCollection Configure<TOptions>(this IServiceCollection services, string name, IConfiguration config, Action<BinderOptions> configureBinder)\n    where TOptions : class\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    if (config == null)\n    {\n        throw new ArgumentNullException(nameof(config));\n    }\n\n    services.AddOptions();\n    services.AddSingleton<IOptionsChangeTokenSource<TOptions>>(new ConfigurationChangeTokenSource<TOptions>(name, config));\n    return services.AddSingleton<IConfigureOptions<TOptions>>(new NamedConfigureFromConfigurationOptions<TOptions>(name, config, configureBinder));\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"秘密就在上面的第15行，ConfigurationChangeTokenSource，它引用了代表配置文件的对象config，所以配置文件更新，IOptionsMonitor就会跟着更新。"}]},{"type":"element","tag":"h1","props":{"id":"结论"},"children":[{"type":"text","value":"结论"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"IOptions<>是单例，因此一旦生成了，除非通过代码的方式更改，它的值是不会更新的。\nIOptionsMonitor<>也是单例，但是它通过IOptionsChangeTokenSource<> 能够和配置文件一起更新，也能通过代码的方式更改值。\nIOptionsSnapshot<>是范围，所以在配置文件更新的下一次访问，它的值会更新，但是它不能跨范围通过代码的方式更改值，只能在当前范围（请求）内有效。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"官方文档是这样介绍的：\nIOptionsMonitor用于检索选项和管理TOptions实例的选项通知，它支持下面的场景："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"实例更新通知。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"命名实例。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"重新加载配置。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"选择性的让实例失效。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"IOptionsSnapshot在需要对每个请求重新计算选项的场景中非常有用。\nIOptions可以用来支持Options模式，但是它不支持前面两者所支持的场景，如果你不需要支持上面的场景，你可以继续使用IOptions。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以你应该根据你的实际使用场景来选择到底是用这三者中的哪一个。\n"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"一般来说，如果你依赖配置文件，那么首先考虑IOptionsMonitor<>，如果不合适接着考虑IOptionsSnapshot<>，最后考虑IOptions<>。*"}]},{"type":"text","value":"\n***有一点需要注意，在ASP.NET Core应用中IOptionsMonitor可能会导致同一个请求中选项的值不一致——当你正在修改配置文件的时候——这可能会引发一些奇怪的bug。\n如果这个对你很重要，请使用IOptionsSnapshot，它可以保证同一个请求中的一致性，但是它可能会带来轻微的性能上的损失。\n如果你是在app启动的时候自己构造Options（比如在Startup类中）："}]},{"type":"element","tag":"pre","props":{"code":"services.Configure<TestOptions>(opt => opt.Name = \"Test 0\");\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"services.Configure<TestOptions>(opt => opt.Name = \"Test 0\");\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"IOptions<>最简单，也许是一个不错的选择，Configure扩展方法还有其他重载可以满足你的更多需求。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:dotnet:2020-08-17-netcore-options.md","_source":"content","_file":"dotnet/2020-08-17-netcore-options.md","_extension":"md","date":"2020-08-17"}