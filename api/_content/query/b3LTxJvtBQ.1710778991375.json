{"_path":"/dotnet/2020-07-05-abp-database-user","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"关于abp的用户的一些问题","description":"abp的dbcontext是分成两种的,一个是程序运行的dbcontext,一个是数据迁移的dbcontext","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"数据迁移上下文"},"children":[{"type":"text","value":"数据迁移上下文"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"abp的dbcontext是分成两种的,一个是程序运行的dbcontext,一个是数据迁移的dbcontext"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"PlayGroundMigrationsDbContext.cs"}]}]},{"type":"element","tag":"pre","props":{"code":"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Include modules to your migration db context */\n\n            builder.ConfigurePermissionManagement();\n            builder.ConfigureSettingManagement();\n            builder.ConfigureBackgroundJobs();\n            builder.ConfigureAuditLogging();\n            builder.ConfigureIdentity();\n            builder.ConfigureIdentityServer();\n            builder.ConfigureFeatureManagement();\n            builder.ConfigureTenantManagement();\n\n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n            builder.ConfigureBlogging();\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Include modules to your migration db context */\n\n            builder.ConfigurePermissionManagement();\n            builder.ConfigureSettingManagement();\n            builder.ConfigureBackgroundJobs();\n            builder.ConfigureAuditLogging();\n            builder.ConfigureIdentity();\n            builder.ConfigureIdentityServer();\n            builder.ConfigureFeatureManagement();\n            builder.ConfigureTenantManagement();\n\n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n            builder.ConfigureBlogging();\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"PlayGroundDbContext.cs"}]}]},{"type":"element","tag":"pre","props":{"code":"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Configure the shared tables (with included modules) here */\n\n            builder.Entity<AppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n            });\n \n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Configure the shared tables (with included modules) here */\n\n            builder.Entity<AppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n            });\n \n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们看到他们共同执行了 builder.ConfigurePlayGround();"}]},{"type":"element","tag":"h2","props":{"id":"为什么这样设计"},"children":[{"type":"text","value":"为什么这样设计?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"为了模块间不产生依赖,例如用户表,迁移dbcontext中使用了IdentityUser,而运行的dbcontext使用了appuser进行了对其的映射,"},{"type":"element","tag":"a","props":{"href":"https://github.com/abpframework/abp/issues/1998","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/abpframework/abp/issues/1998"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如何为user添加属性."},{"type":"element","tag":"a","props":{"href":"https://github.com/abpframework/abp/issues/2453","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/abpframework/abp/issues/2453"}]}]}]},{"type":"element","tag":"h1","props":{"id":"如何共用user"},"children":[{"type":"text","value":"如何共用user"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们来看下定义的Iuser接口"}]},{"type":"element","tag":"pre","props":{"code":"    public interface IUser : IAggregateRoot<Guid>, IMultiTenant\n    {\n        string UserName { get; }\n\n        [CanBeNull]\n        string Email { get; }\n\n        [CanBeNull]\n        string Name  { get; }\n\n        [CanBeNull]\n        string Surname { get; }\n\n        bool EmailConfirmed { get; }\n\n        [CanBeNull]\n        string PhoneNumber { get; }\n\n        bool PhoneNumberConfirmed { get; }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    public interface IUser : IAggregateRoot<Guid>, IMultiTenant\n    {\n        string UserName { get; }\n\n        [CanBeNull]\n        string Email { get; }\n\n        [CanBeNull]\n        string Name  { get; }\n\n        [CanBeNull]\n        string Surname { get; }\n\n        bool EmailConfirmed { get; }\n\n        [CanBeNull]\n        string PhoneNumber { get; }\n\n        bool PhoneNumberConfirmed { get; }\n    }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"dbcontext中的配置字段"}]},{"type":"element","tag":"pre","props":{"code":"        public static void ConfigureAbpUser<TUser>(this EntityTypeBuilder<TUser> b)\n            where TUser : class, IUser\n        {\n            b.Property(u => u.TenantId).HasColumnName(nameof(IUser.TenantId));\n            b.Property(u => u.UserName).IsRequired().HasMaxLength(AbpUserConsts.MaxUserNameLength).HasColumnName(nameof(IUser.UserName));\n            b.Property(u => u.Email).IsRequired().HasMaxLength(AbpUserConsts.MaxEmailLength).HasColumnName(nameof(IUser.Email));\n            b.Property(u => u.Name).HasMaxLength(AbpUserConsts.MaxNameLength).HasColumnName(nameof(IUser.Name));\n            b.Property(u => u.Surname).HasMaxLength(AbpUserConsts.MaxSurnameLength).HasColumnName(nameof(IUser.Surname));\n            b.Property(u => u.EmailConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.EmailConfirmed));\n            b.Property(u => u.PhoneNumber).HasMaxLength(AbpUserConsts.MaxPhoneNumberLength).HasColumnName(nameof(IUser.PhoneNumber));\n            b.Property(u => u.PhoneNumberConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.PhoneNumberConfirmed));\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        public static void ConfigureAbpUser<TUser>(this EntityTypeBuilder<TUser> b)\n            where TUser : class, IUser\n        {\n            b.Property(u => u.TenantId).HasColumnName(nameof(IUser.TenantId));\n            b.Property(u => u.UserName).IsRequired().HasMaxLength(AbpUserConsts.MaxUserNameLength).HasColumnName(nameof(IUser.UserName));\n            b.Property(u => u.Email).IsRequired().HasMaxLength(AbpUserConsts.MaxEmailLength).HasColumnName(nameof(IUser.Email));\n            b.Property(u => u.Name).HasMaxLength(AbpUserConsts.MaxNameLength).HasColumnName(nameof(IUser.Name));\n            b.Property(u => u.Surname).HasMaxLength(AbpUserConsts.MaxSurnameLength).HasColumnName(nameof(IUser.Surname));\n            b.Property(u => u.EmailConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.EmailConfirmed));\n            b.Property(u => u.PhoneNumber).HasMaxLength(AbpUserConsts.MaxPhoneNumberLength).HasColumnName(nameof(IUser.PhoneNumber));\n            b.Property(u => u.PhoneNumberConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.PhoneNumberConfirmed));\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"dbcontext中的user表是如何创建,更新和使用的.."},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"UserLookupService.cs"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"先看下查找,其中"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IdentityUserRepositoryExternalUserLookupServiceProvider : IExternalUserLookupServiceProvider,"}]}]},{"type":"element","tag":"pre","props":{"code":" public async Task<TUser> FindByIdAsync(Guid id, CancellationToken cancellationToken = default)\n        {\n            var localUser = await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n\n            if (ExternalUserLookupServiceProvider == null)\n            {\n                return localUser;\n            }\n\n            if (SkipExternalLookupIfLocalUserExists && localUser != null)\n            {\n                return localUser;\n            }\n\n            IUserData externalUser;\n\n            try\n            {\n                externalUser = await ExternalUserLookupServiceProvider.FindByIdAsync(id, cancellationToken);\n                if (externalUser == null)\n                {\n                    if (localUser != null)\n                    {\n                        //TODO: Instead of deleting, should be make it inactive or something like that?\n                        await WithNewUowAsync(() => _userRepository.DeleteAsync(localUser, cancellationToken: cancellationToken));\n                    }\n\n                    return null;\n                }\n            }\n            catch (Exception ex)\n            {\n                Logger.LogException(ex);\n                return localUser;\n            }\n\n            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n\n            return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" public async Task<TUser> FindByIdAsync(Guid id, CancellationToken cancellationToken = default)\n        {\n            var localUser = await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n\n            if (ExternalUserLookupServiceProvider == null)\n            {\n                return localUser;\n            }\n\n            if (SkipExternalLookupIfLocalUserExists && localUser != null)\n            {\n                return localUser;\n            }\n\n            IUserData externalUser;\n\n            try\n            {\n                externalUser = await ExternalUserLookupServiceProvider.FindByIdAsync(id, cancellationToken);\n                if (externalUser == null)\n                {\n                    if (localUser != null)\n                    {\n                        //TODO: Instead of deleting, should be make it inactive or something like that?\n                        await WithNewUowAsync(() => _userRepository.DeleteAsync(localUser, cancellationToken: cancellationToken));\n                    }\n\n                    return null;\n                }\n            }\n            catch (Exception ex)\n            {\n                Logger.LogException(ex);\n                return localUser;\n            }\n\n            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n\n            return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"根据上面代码可见,如果找不到该用户..会自动创建一个,如何继承了IUpdateUserData则会更新"}]},{"type":"element","tag":"pre","props":{"code":"            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"更新还可以通过eventbus"}]},{"type":"element","tag":"pre","props":{"code":"    public class BlogUserSynchronizer :\n        IDistributedEventHandler<EntityUpdatedEto<UserEto>>,\n        ITransientDependency\n    {\n        protected IBlogUserRepository UserRepository { get; }\n        protected IBlogUserLookupService UserLookupService { get; }\n\n        public BlogUserSynchronizer(\n            IBlogUserRepository userRepository, \n            IBlogUserLookupService userLookupService)\n        {\n            UserRepository = userRepository;\n            UserLookupService = userLookupService;\n        }\n\n        public async Task HandleEventAsync(EntityUpdatedEto<UserEto> eventData)\n        {\n            var user = await UserRepository.FindAsync(eventData.Entity.Id);\n            if (user == null)\n            {\n                user = await UserLookupService.FindByIdAsync(eventData.Entity.Id);\n                if (user == null)\n                {\n                    return;\n                }\n            }\n\n            if (user.Update(eventData.Entity))\n            {\n                await UserRepository.UpdateAsync(user);\n            }\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    public class BlogUserSynchronizer :\n        IDistributedEventHandler<EntityUpdatedEto<UserEto>>,\n        ITransientDependency\n    {\n        protected IBlogUserRepository UserRepository { get; }\n        protected IBlogUserLookupService UserLookupService { get; }\n\n        public BlogUserSynchronizer(\n            IBlogUserRepository userRepository, \n            IBlogUserLookupService userLookupService)\n        {\n            UserRepository = userRepository;\n            UserLookupService = userLookupService;\n        }\n\n        public async Task HandleEventAsync(EntityUpdatedEto<UserEto> eventData)\n        {\n            var user = await UserRepository.FindAsync(eventData.Entity.Id);\n            if (user == null)\n            {\n                user = await UserLookupService.FindByIdAsync(eventData.Entity.Id);\n                if (user == null)\n                {\n                    return;\n                }\n            }\n\n            if (user.Update(eventData.Entity))\n            {\n                await UserRepository.UpdateAsync(user);\n            }\n        }\n    }\n"}]}]},{"type":"element","tag":"h1","props":{"id":"如何给identityuser添加额外的属性"},"children":[{"type":"text","value":"如何给IdentityUser添加额外的属性"}]},{"type":"element","tag":"h2","props":{"id":"extra-properties"},"children":[{"type":"text","value":"Extra Properties"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先IdentityUser已经被定义,虽然我们可以通过dbcontext配置修改数据表的字段,,但是不能被映射,所以有了Extra Properties"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.abp.io/zh-Hans/abp/latest/Customizing-Application-Modules-Extending-Entities","rel":["nofollow"]},"children":[{"type":"text","value":"https://docs.abp.io/zh-Hans/abp/latest/Customizing-Application-Modules-Extending-Entities"}]}]},{"type":"element","tag":"h2","props":{"id":"映射"},"children":[{"type":"text","value":"映射"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"会在数据库中创建字段"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AppUser.cs"}]}]},{"type":"element","tag":"pre","props":{"code":"        public virtual string Sex { get; private set; }\n\n        private AppUser()\n        {\n\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        public virtual string Sex { get; private set; }\n\n        private AppUser()\n        {\n\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"PlayGroundDbContext.cs"}]}]},{"type":"element","tag":"pre","props":{"code":"            builder.Entity<AppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n\n                b.Property(x => x.Sex).HasMaxLength(128);\n            });\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"            builder.Entity<AppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n\n                b.Property(x => x.Sex).HasMaxLength(128);\n            });\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"PlayGroundEfCoreEntityExtensionMappings.cs"}]}]},{"type":"element","tag":"pre","props":{"code":"       public static void Configure()\n        {\n            PlayGroundModulePropertyConfigurator.Configure();\n\n            OneTimeRunner.Run(() =>\n            {\n                /* You can configure entity extension properties for the\n                 * entities defined in the used modules.\n                 *\n                 * The properties defined here becomes table fields.\n                 * If you want to use the ExtraProperties dictionary of the entity\n                 * instead of creating a new field, then define the property in the\n                 * PlayGroundDomainObjectExtensions class.\n                 *\n                 * Example:\n                 *\n                 * ObjectExtensionManager.Instance\n                 *    .MapEfCoreProperty<IdentityUser, string>(\n                 *        \"MyProperty\",\n                 *        b => b.HasMaxLength(128)\n                 *    );\n                 *\n                 * See the documentation for more:\n                 * https://docs.abp.io/en/abp/latest/Customizing-Application-Modules-Extending-Entities\n                 */\n\n                ObjectExtensionManager.Instance\n                      .MapEfCoreProperty<IdentityUser, string>(\n                  nameof(AppUser.Sex),\n                  b => b.HasMaxLength(128)\n                      );\n            });\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"       public static void Configure()\n        {\n            PlayGroundModulePropertyConfigurator.Configure();\n\n            OneTimeRunner.Run(() =>\n            {\n                /* You can configure entity extension properties for the\n                 * entities defined in the used modules.\n                 *\n                 * The properties defined here becomes table fields.\n                 * If you want to use the ExtraProperties dictionary of the entity\n                 * instead of creating a new field, then define the property in the\n                 * PlayGroundDomainObjectExtensions class.\n                 *\n                 * Example:\n                 *\n                 * ObjectExtensionManager.Instance\n                 *    .MapEfCoreProperty<IdentityUser, string>(\n                 *        \"MyProperty\",\n                 *        b => b.HasMaxLength(128)\n                 *    );\n                 *\n                 * See the documentation for more:\n                 * https://docs.abp.io/en/abp/latest/Customizing-Application-Modules-Extending-Entities\n                 */\n\n                ObjectExtensionManager.Instance\n                      .MapEfCoreProperty<IdentityUser, string>(\n                  nameof(AppUser.Sex),\n                  b => b.HasMaxLength(128)\n                      );\n            });\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们来看看生成的迁移表"}]},{"type":"element","tag":"pre","props":{"code":"    public partial class Added_Sex_T_User : Migration\n    {\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.AddColumn<string>(\n                name: \"Sex\",\n                table: \"AbpUsers\",\n                maxLength: 128,\n                nullable: true);\n        }\n\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropColumn(\n                name: \"Sex\",\n                table: \"AbpUsers\");\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    public partial class Added_Sex_T_User : Migration\n    {\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.AddColumn<string>(\n                name: \"Sex\",\n                table: \"AbpUsers\",\n                maxLength: 128,\n                nullable: true);\n        }\n\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropColumn(\n                name: \"Sex\",\n                table: \"AbpUsers\");\n        }\n    }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image-20200714123314743","src":"/images/2020-07-05-abp-database-migration/image-20200714123314743.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"它时如何被添加到迁移dbcontext中的"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AbpEntityTypeBuilderExtensions.cs"}]}]},{"type":"element","tag":"pre","props":{"code":"        public static void ConfigureByConvention(this EntityTypeBuilder b)\n        {\n            b.TryConfigureConcurrencyStamp();\n            b.TryConfigureExtraProperties();  //配置扩展属性,就是ExtraProperties字段\n            b.TryConfigureObjectExtensions();//就是这里对象扩展,ObjectExtensionManager.Instance添加属性,然后从这里再根据类型读取出来\n            b.TryConfigureMayHaveCreator();\n            b.TryConfigureMustHaveCreator();\n            b.TryConfigureSoftDelete();\n            b.TryConfigureDeletionTime();\n            b.TryConfigureDeletionAudited();\n            b.TryConfigureCreationTime();\n            b.TryConfigureLastModificationTime();\n            b.TryConfigureModificationAudited();\n            b.TryConfigureMultiTenant();\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        public static void ConfigureByConvention(this EntityTypeBuilder b)\n        {\n            b.TryConfigureConcurrencyStamp();\n            b.TryConfigureExtraProperties();  //配置扩展属性,就是ExtraProperties字段\n            b.TryConfigureObjectExtensions();//就是这里对象扩展,ObjectExtensionManager.Instance添加属性,然后从这里再根据类型读取出来\n            b.TryConfigureMayHaveCreator();\n            b.TryConfigureMustHaveCreator();\n            b.TryConfigureSoftDelete();\n            b.TryConfigureDeletionTime();\n            b.TryConfigureDeletionAudited();\n            b.TryConfigureCreationTime();\n            b.TryConfigureLastModificationTime();\n            b.TryConfigureModificationAudited();\n            b.TryConfigureMultiTenant();\n        }\n"}]}]},{"type":"element","tag":"h2","props":{"id":"同步"},"children":[{"type":"text","value":"同步"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你可以创建"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"自己的表"}]},{"type":"text","value":"来存储属性,而不是创建新实体并映射到同一表. 你通常复制原始实体的一些值. 例如可以将 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Name"}]},{"type":"text","value":" 字段添加到你自己的表中,它是原表中 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Name"}]},{"type":"text","value":" 字段的副本."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这种情况下你不需要处理迁移问题,但是需要处理数据复制问题. 当重复的值发生变化时,你应该在表中同步相同的变化. 你可以使用本地或分布式"},{"type":"element","tag":"a","props":{"href":"https://docs.abp.io/zh-Hans/abp/latest/Event-Bus","rel":["nofollow"]},"children":[{"type":"text","value":"事件总线"}]},{"type":"text","value":"订阅原始实体的更改事件. 这是根据来自另一个微服务的数据推荐的方法,特别是如果它们有单独的物理数据库(你可以在网络中搜索关于微服务设计的数据共享,这是一个广泛的主题)."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"为什么这样设计","depth":2,"text":"为什么这样设计?"},{"id":"extra-properties","depth":2,"text":"Extra Properties"},{"id":"映射","depth":2,"text":"映射"},{"id":"同步","depth":2,"text":"同步"}]}},"_type":"markdown","_id":"content:dotnet:2020-07-05-abp-database-user.md","_source":"content","_file":"dotnet/2020-07-05-abp-database-user.md","_extension":"md","date":"2020-07-05"}