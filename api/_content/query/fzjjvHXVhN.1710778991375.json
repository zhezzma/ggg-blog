{"_path":"/unity/2019-08-12-ugui-raycasters","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"Unity Raycasters 剖析","description":"Raycasters 用来检测当前事件发送给哪个对象，检测原理就是 Raycast。当给定一个屏幕坐标系中的位置，Raycasters 就会利用射线检测寻找潜在的对象，并返回一个离当前屏幕最近的对象。","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Raycasters 用来检测当前事件发送给哪个对象，检测原理就是 Raycast。当给定一个屏幕坐标系中的位置，Raycasters 就会利用射线检测寻找潜在的对象，并返回一个离当前屏幕最近的对象。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 Unity Raycasters 中有三种类型的 Raycasters:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Graphic Raycaster - 存在于 Canvas 下，用于检测 Canvas 中所有的物体"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Physics 2D Raycaster - 用于检测 2D 物体"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Physics Raycaster - 用于检测 3D 物体"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接下来，就来分析一下各个类型 Raycaster 的源码来看看其的工作流程。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Raycast 在 Event System 流程中所处的位置大致如下图:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"unity_event_system_raycaster.png","src":"/images/2019-08-12-ugui-Raycasters/unity_event_system_raycaster.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"baseraycaster-类"},"children":[{"type":"text","value":"BaseRaycaster 类"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unity Raycasters 中的三个 Raycaster 类都继承自 BaseRaycaster。首先就来看看 BaseRaycaster 类。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"BaseRaycaster 类很简单，它包含一个抽象方法 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Raycast"}]},{"type":"text","value":"，定义如下:"}]},{"type":"element","tag":"pre","props":{"code":"abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个方法供子类覆写以实现对不同类别的物体进行射线检测。BaseRaycaster 类还继承自 UIBehaviour 类，因此它还覆写了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OnEnable"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OnDisable"}]},{"type":"text","value":" 方法，在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OnEnable"}]},{"type":"text","value":" 方法中向 RaycasterManager 类注册了自己，在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OnDisable"}]},{"type":"text","value":" 方法中从 RaycasterManager 类移除了自己的注册。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外该类中还包含了 eventCamera、sortOrderPriority、renderOrderPriority 等属性，在射线检测物体时会用到。"}]},{"type":"element","tag":"h2","props":{"id":"physics-raycaster"},"children":[{"type":"text","value":"Physics Raycaster"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Physics Raycaster 用于检测场景中的 3D 物体对象。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PhysicsRaycaster 类继承自 BaseRaycaster，既然是射线检测那么最重要的方法莫过于 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Raycast"}]},{"type":"text","value":"，接下来就一起看看这个方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Raycast"}]},{"type":"text","value":" 方法中，首先使用传入的 PointerEventData 参数调用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ComputeRayAndDistance"}]},{"type":"text","value":" 方法，计算得到从当前射线检测使用的 Camera 的近裁剪面处出发，穿过屏幕事件发生处位置的一条射线；这个方法还会计算一个射线检测使用的最大距离 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"distanceToClipPlane"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ComputeRayAndDistance"}]},{"type":"text","value":" 内部使用了 Camera 类的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ScreenPointToRay"}]},{"type":"text","value":" 方法将某点转换成一条射线，根据得到的射线的方向以及 Camera 的 farClipPlane 和 nearClipPlane 求得检测最大距离 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"distanceToClipPlane"}]},{"type":"text","value":"。具体代码如下:"}]},{"type":"element","tag":"pre","props":{"code":"void ComputeRayAndDistance(PointerEventData eventData, out Ray ray, out float distanceToClipPlane)\n{\n    ray = eventCamera.ScreenPointToRay(eventData.position);\n    float projectionDirection = ray.direction.z;\n    // 这里加了个保护，因为 projectionDirection 近似为 0 的时候不能被除，因此 distanceToClipPlane 取 Mathf.Infinity 无限大\n    distanceToClipPlane = Mathf.Approximately(0.0f, projectionDirection) ? Mathf.Infinity : Mathf.Abs((eventCamera.farClipPlane - eventCamera.nearClipPlane) / projectionDirection);\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void ComputeRayAndDistance(PointerEventData eventData, out Ray ray, out float distanceToClipPlane)\n{\n    ray = eventCamera.ScreenPointToRay(eventData.position);\n    float projectionDirection = ray.direction.z;\n    // 这里加了个保护，因为 projectionDirection 近似为 0 的时候不能被除，因此 distanceToClipPlane 取 Mathf.Infinity 无限大\n    distanceToClipPlane = Mathf.Approximately(0.0f, projectionDirection) ? Mathf.Infinity : Mathf.Abs((eventCamera.farClipPlane - eventCamera.nearClipPlane) / projectionDirection);\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接下来就是进行射线检测了，代码如下:"}]},{"type":"element","tag":"pre","props":{"code":"var hits = ReflectionMethodsCache.Singleton.raycast3DAll(ray, distanceToClipPlane, finalEventMask);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var hits = ReflectionMethodsCache.Singleton.raycast3DAll(ray, distanceToClipPlane, finalEventMask);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这里的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ReflectionMethodsCache"}]},{"type":"text","value":" 类里面缓存了一些通过反射得到的射线检测相关的类方法。在上面的代码中使用了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"raycast3DAll"}]},{"type":"text","value":" 这个代理，最终执行的是 Physics 类的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RaycastAll"}]},{"type":"text","value":" 方法。传入的三个参数就是射线 ray，最大检测距离 distanceToClipPlane 以及需要检测的层 finalEventMask，返回结果就是检测成功得到的 RaycastHit 数组。第三个参数 finalEventMask 定义如下:"}]},{"type":"element","tag":"pre","props":{"code":"public int finalEventMask\n{\n    get { return (eventCamera != null) ? eventCamera.cullingMask & m_EventMask : kNoEventMaskSet; }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public int finalEventMask\n{\n    get { return (eventCamera != null) ? eventCamera.cullingMask & m_EventMask : kNoEventMaskSet; }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们知道，射线检测的时候可以设置哪些 layer 可以接收检测碰撞。上面定义的 finalEventMask 就是需要检测的 layer，如果当前 raycaster 所在的对象有 Camera 组件，那么 finalEventMask 就是摄像机设置的渲染的所有层("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"eventCamera.cullingMask & m_EventMask"}]},{"type":"text","value":")，否则就是默认所有的层("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"int kNoEventMaskSet = -1"}]},{"type":"text","value":")都可以接收射线碰撞检测。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后对检测得到的 RaycastHit 数组按照 distance 由小到大排序。最后将这些射线检测结果依次拼装成 RaycastResult 并返回给 Event System，这里的 RaycastResult 中的 distance 就是 RaycastHit 的 distance(射线起点到射线碰撞点的距离)。"}]},{"type":"element","tag":"h2","props":{"id":"physics2d-raycaster"},"children":[{"type":"text","value":"Physics2D Raycaster"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Physics2DRaycaster 类继承自 PhysicsRaycaster，主要就是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Raycast"}]},{"type":"text","value":" 方法中的一点点细小的区别。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"第一，在进行射线检测的时候，Physics2DRaycaster 中最后调用的是 Physics2D 的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GetRayIntersectionAll"}]},{"type":"text","value":" 方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"第二处同 PhysicsRaycaster 的不同之处是在返回构造 RaycastResult 时，填充的部分值不一样，包括以下几个:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"distance，这个值是摄像机到射线检测碰撞点的距离，而在 PhysicsRaycaster 中是 RaycastHit 的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"distance"}]},{"type":"text","value":" 值(射线起点在近裁剪面发出到碰撞点的距离)。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sortingLayer，这个值是当前对象 SpriteRenderer 组件中的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"sortingLayerID"}]},{"type":"text","value":" 值，在 PhysicsRaycaster 为 0。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sortingOrder，这个同样为当前对象 SpriteRenderer 组件中的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"sortingOrder"}]},{"type":"text","value":" 值，在 PhysicsRaycaster 为 0。"}]}]},{"type":"element","tag":"h2","props":{"id":"graphic-raycaster"},"children":[{"type":"text","value":"Graphic Raycaster"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Graphic Raycaster 用于射线检测 Canvas 中的 Graphic 对象物体，通常绑定在 Canvas 所在的对象身上。"}]},{"type":"element","tag":"h3","props":{"id":"属性或方法"},"children":[{"type":"text","value":"属性或方法"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GraphicRaycaster 类的成员属性很少，除了继承 BaseRaycaster 类的一些属性和方法外，它还拥有以下一些常用的属性或方法:"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"属性"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Ignore Reversed Graphics"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"射线检测时是否忽略背向的 Graphics"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Blocked Objects"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"哪些类型的对象会阻挡 Graphic raycasts"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Blocking Mask"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"哪些 Layer 会阻挡 Graphic raycasts(对 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Blocked Objects"}]},{"type":"text","value":" 指定的对象生效)"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不同于 PhysicsRaycaster 和 Physics2DRaycaster 类中直接使用父类的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"sortOrderPriority"}]},{"type":"text","value":" 方法和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"renderOrderPriority"}]},{"type":"text","value":"，GraphicRaycaster 覆写了这两个方法，并且当 Canvas 的 render mode 设置为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RenderMode.ScreenSpaceOverlay"}]},{"type":"text","value":" 时，上面两个方法分别返回 canvas 的 sortingOrder 以及 rootCanvas 的 renderOrder。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于 eventCamera 的 get 方法，如果 Canvas 的 render mode 设置为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RenderMode.ScreenSpaceOverlay"}]},{"type":"text","value":" 或者 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"enderMode.ScreenSpaceCamera"}]},{"type":"text","value":" 并且 Canvas 的 worldCamera 未设置时，返回 null，否则返回 Canvas 的 worldCamera 或者 Main Camera。"}]},{"type":"element","tag":"h3","props":{"id":"graphicraycasterraycast"},"children":[{"type":"text","value":"GraphicRaycaster.Raycast"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接下来就来到最重要的覆写的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Raycast"}]},{"type":"text","value":" 方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先调用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GraphicRegistry.GetGraphicsForCanvas"}]},{"type":"text","value":" 方法获取当前 Canvas 下所有的 Graphic(canvasGraphics，这些 Graphics 在进行射线检测的时候会用到)。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"紧接着就是 MultiDisplay 的一些检测，代码如下:"}]},{"type":"element","tag":"pre","props":{"code":"int displayIndex;\nvar currentEventCamera = eventCamera;\nif (canvas.renderMode == RenderMode.ScreenSpaceOverlay || currentEventCamera == null)\n    displayIndex = canvas.targetDisplay;\nelse\n    displayIndex = currentEventCamera.targetDisplay;\nvar eventPosition = Display.RelativeMouseAt(eventData.position);\nif (eventPosition != Vector3.zero)\n{\n    // 当前平台支持 MultiDisplay\n    int eventDisplayIndex = (int)eventPosition.z;\n    if (eventDisplayIndex != displayIndex)\n        return;\n}\nelse\n{\n    // 当前平台不支持 MultiDiplay\n    eventPosition = eventData.position;\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"int displayIndex;\nvar currentEventCamera = eventCamera;\nif (canvas.renderMode == RenderMode.ScreenSpaceOverlay || currentEventCamera == null)\n    displayIndex = canvas.targetDisplay;\nelse\n    displayIndex = currentEventCamera.targetDisplay;\nvar eventPosition = Display.RelativeMouseAt(eventData.position);\nif (eventPosition != Vector3.zero)\n{\n    // 当前平台支持 MultiDisplay\n    int eventDisplayIndex = (int)eventPosition.z;\n    if (eventDisplayIndex != displayIndex)\n        return;\n}\nelse\n{\n    // 当前平台不支持 MultiDiplay\n    eventPosition = eventData.position;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以看出，当平台支持 MultiDisplay 时，如果用户操作的不是当前的 Display，那么所有的其他 Display 上产生的事件都会被舍弃。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后将屏幕坐标转换到 Camera 视窗坐标下。如果 eventCamera 不为空，则使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Camera.ScreenToViewportPoint"}]},{"type":"text","value":" 方法转换坐标，否则直接使用当前 Display 的宽高除以 eventPosition 转换为视窗坐标([0,1]之间)。转换后的坐标若超出 Cmera 的范围(0 - 1)，则舍弃该事件。"}]},{"type":"element","tag":"h4","props":{"id":"blocked-objects-和-blocked-mask-出场"},"children":[{"type":"text","value":"Blocked Objects 和 Blocked Mask 出场"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前面讲到 GraphicRaycaster 可以设置 Blocked Objects 和 Blocked Mask 来指定射线检测阻挡，下面一步就到了使用这两个属性来阻断射线检测部分。"}]},{"type":"element","tag":"pre","props":{"code":"if (canvas.renderMode != RenderMode.ScreenSpaceOverlay && blockingObjects != BlockingObjects.None)\n{\n    float distanceToClipPlane\n    // 计算 distanceToClipPlane...\n    if (blockingObjects == BlockingObjects.ThreeD || blockingObjects == BlockingObjects.All)\n    {\n        if (ReflectionMethodsCache.Singleton.raycast3D != null)\n        {\n            var hits = ReflectionMethodsCache.Singleton.raycast3DAll(ray, distanceToClipPlane, (int)m_BlockingMask);\n            if (hits.Length > 0)\n                hitDistance = hits[0].distance;\n        }    \n    }\n    //如果 blockingObjects 包含 BlockingObjects.TwoD，使用 ReflectionMethodsCache.Singleton.getRayIntersectionAll 方法再次计算 hitDistance\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if (canvas.renderMode != RenderMode.ScreenSpaceOverlay && blockingObjects != BlockingObjects.None)\n{\n    float distanceToClipPlane\n    // 计算 distanceToClipPlane...\n    if (blockingObjects == BlockingObjects.ThreeD || blockingObjects == BlockingObjects.All)\n    {\n        if (ReflectionMethodsCache.Singleton.raycast3D != null)\n        {\n            var hits = ReflectionMethodsCache.Singleton.raycast3DAll(ray, distanceToClipPlane, (int)m_BlockingMask);\n            if (hits.Length > 0)\n                hitDistance = hits[0].distance;\n        }    \n    }\n    //如果 blockingObjects 包含 BlockingObjects.TwoD，使用 ReflectionMethodsCache.Singleton.getRayIntersectionAll 方法再次计算 hitDistance\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当 Canvas renderMode 不为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RenderMode.ScreenSpaceOverlay"}]},{"type":"text","value":" 并且设置了 blockingObjects，此时就会 Blocked Objects 和 Blocked Mask 就会生效。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果 blockingObjects 包含了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"BlockingObjects.ThreeD"}]},{"type":"text","value":" 那么则会使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ReflectionMethodsCache.Singleton.raycast3DAll"}]},{"type":"text","value":" 方法计算 hitDistance(PhysicsRaycaster 中也使用的该方法进行射线检测)。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果 blockingObjects 也包含了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"BlockingObjects.TwoD"}]},{"type":"text","value":"，那么会使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ReflectionMethodsCache.Singleton.getRayIntersectionAll"}]},{"type":"text","value":" 方法(Physics2DRaycaster 射线检测使用)再计算 hitDistance。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"具体的计算过程大致是: 这上面的代码中 raycast3DAll 时指定了射线检测层 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"m_BlockingMask"}]},{"type":"text","value":"，这个参数就是自定义设定的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Blocking Mask"}]},{"type":"text","value":"，属于 block mask 的对象在这里就会就行射线检测，并得到最小的一个 hitDistance；"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"后面对所有的 Graphics 进行射线检测时，如果检测结果 distance 大于 hitDistance，那么那个结果会被舍弃"}]},{"type":"text","value":"。如此一来，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Blocking Mask"}]},{"type":"text","value":" 就起到了阻挡的作用，属于这个 layer 的所有对象的一旦被射线检测成功并得到 hitDistance，PhysicsRaycaster 最后的射线检测结果都只会包含这个 hitDistance 距离以内的对象。"}]},{"type":"element","tag":"h4","props":{"id":"graphicraycaster-类重载了-真-raycast-方法"},"children":[{"type":"text","value":"GraphicRaycaster 类重载了 “真” Raycast 方法"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"终于可以进行真真切切的 Graphic Raycast 了。"}]},{"type":"element","tag":"pre","props":{"code":"private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results)\n{\n    int totalCount = foundGraphics.Count;\n    for (int i = 0; i < totalCount; ++i)\n    {\n        Graphic graphic = foundGraphics[i];\n        // depth 为 -1 说明没有被 canvas 处理(未被绘制)\n        // raycastTarget 为 false 说明当前 graphic 不需要被射线检测\n        // graphic.canvasRenderer.cull 为 true，忽略当前 graphic 的 CanvasRender 渲染的物体\n        if (graphic.depth == -1 || !graphic.raycastTarget || graphic.canvasRenderer.cull)\n            continue;\n        // 从指定的 eventCamera 计算 pointerPosition 是否在 graphic 的 Rectangle 区域内 \n        if (!RectTransformUtility.RectangleContainsScreenPoint(graphic.rectTransform, pointerPosition, eventCamera))\n            continue;\n        if (graphic.Raycast(pointerPosition, eventCamera))\n        {\n            s_SortedGraphics.Add(graphic);\n        }\n    }\n    s_SortedGraphics.Sort((g1, g2) => g2.depth.CompareTo(g1.depth));\n    // return result\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results)\n{\n    int totalCount = foundGraphics.Count;\n    for (int i = 0; i < totalCount; ++i)\n    {\n        Graphic graphic = foundGraphics[i];\n        // depth 为 -1 说明没有被 canvas 处理(未被绘制)\n        // raycastTarget 为 false 说明当前 graphic 不需要被射线检测\n        // graphic.canvasRenderer.cull 为 true，忽略当前 graphic 的 CanvasRender 渲染的物体\n        if (graphic.depth == -1 || !graphic.raycastTarget || graphic.canvasRenderer.cull)\n            continue;\n        // 从指定的 eventCamera 计算 pointerPosition 是否在 graphic 的 Rectangle 区域内 \n        if (!RectTransformUtility.RectangleContainsScreenPoint(graphic.rectTransform, pointerPosition, eventCamera))\n            continue;\n        if (graphic.Raycast(pointerPosition, eventCamera))\n        {\n            s_SortedGraphics.Add(graphic);\n        }\n    }\n    s_SortedGraphics.Sort((g1, g2) => g2.depth.CompareTo(g1.depth));\n    // return result\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在循环中对每一个 Graphic 首先进行了初步的筛选，满足条件的 Graphic 才会调用其 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Raycast"}]},{"type":"text","value":" 方法，这里的条件筛选包括 deth、raycastTarget 设置、位置信息是否满足等。"}]},{"type":"element","tag":"h4","props":{"id":"graphicraycast"},"children":[{"type":"text","value":"Graphic.Raycast"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对 Canvas 下所有的 graphic 遍历，满足条件则进行射线检测。Graphic 射线检测过程如下:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"整个检测过程是在一个循环中实现的，从当前 Graphic 节点开始不断向上"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"递归"}]},{"type":"text","value":"，直至向上再没有节点或者节点绑定的组件中有被射线检测出来结果而返回。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于节点对象，首先获取其绑定的所有组件，依次"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"遍历"}]},{"type":"text","value":"判断组件:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"当组件是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Canvas"}]},{"type":"text","value":" 并且其 overrideSorting 为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" 则指定: 若在当前节点绑定的一系列的组件中都未能成功唤起检测，则当前节点组件"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"遍历"}]},{"type":"text","value":"结束后将跳出节点"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"递归"}]},{"type":"text","value":"并默认返回 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果组件是实现了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ICanvasRaycastFilter"}]},{"type":"text","value":" 接口，则判断组件是否是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CanvasGroup"}]},{"type":"text","value":"。若是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CanvasGroup"}]},{"type":"text","value":" 且设置了 ignoreParentGroups 为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":"，那么对于接下来的所有 CanvasGroup 组件将不会调用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IsRaycastLocationValid"}]},{"type":"text","value":" 方法检测；若 CanvasGroup 都未设置 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ignoreParentGroups"}]},{"type":"text","value":"或者不包含 CanvasGroup 组件，则直接调用组件实现的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IsRaycastLocationValid"}]},{"type":"text","value":" 方法计算是否射线检测成功。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从整个 Graphic.Raycast 检测过程可以看出，检测是自当前 graphic 节点开始，一旦检测到某个节点添加实现了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ICanvasRaycastFilter"}]},{"type":"text","value":" 接口且 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IsRaycastLocationValid"}]},{"type":"text","value":" 方法返回 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"false"}]},{"type":"text","value":" 则此 graphic 检测失败并结束检测；否则还会继续向上递归检测父节点，当所有节点(绑定了 Canvas 组件并设置了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Canvas.overrideSorting"}]},{"type":"text","value":" 为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"true"}]},{"type":"text","value":"的节点会截止此次检测)都射线检测成功或是不需要使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IsRaycastLocationValid"}]},{"type":"text","value":" 方法进行检测，则此次 Graphic.Raycast 成功。"}]},{"type":"element","tag":"h4","props":{"id":"graphicraycast-成功的对象深度排序"},"children":[{"type":"text","value":"Graphic.Raycast 成功的对象深度排序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对所有射线检测成功的 graphics 按照深度 depth 从小到大排序。"}]},{"type":"element","tag":"h4","props":{"id":"reversed-graphics-过滤"},"children":[{"type":"text","value":"Reversed Graphics 过滤"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最后对检测结果再过滤。如果设置了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Ignore Reversed Graphics"}]},{"type":"text","value":" 为 true，则将背向 Camera 的对象过滤掉，这里面又分为两种情况:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Camera 为空，直接判断当前 Graphic 方向与正方向 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Vector3.forward"}]},{"type":"text","value":" 是否相交，如下:"},{"type":"element","tag":"pre","props":{"code":"var dir = go.transform.rotation * Vector3.forward;\nappendGraphic = Vector3.Dot(Vector3.forward, dir) > 0;\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var dir = go.transform.rotation * Vector3.forward;\nappendGraphic = Vector3.Dot(Vector3.forward, dir) > 0;\n"}]}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"首先将 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Vector3.forward"}]},{"type":"text","value":" 绕着当前 Graphic 的 rotation 旋转得到 Graphic 的正方向，然后通过点积判断 Graphic 正方向是否与默认正方向(没有 Camera 所以默认正方向为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Vector3.forward"}]},{"type":"text","value":")相交。点积大于 0 则相交，说明当前 Graphic 可以加入射线加测结果中。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"当 Camera 不为空，就使用 Camera 的正方向与 Graphic 的正方向比较是否相交。"}]}]},{"type":"element","tag":"h4","props":{"id":"distance-检测是最终一道坎"},"children":[{"type":"text","value":"distance 检测是最终一道坎"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Ignore Reversed Graphics"}]},{"type":"text","value":" 检测完，对结果进行 distance 计算:"}]},{"type":"element","tag":"pre","props":{"code":"float distance = 0;\nif (currentEventCamera == null || canvas.renderMode == RenderMode.ScreenSpaceOverlay)\n    distance = 0;\nelse\n{\n    Transform trans = go.transform;\n    Vector3 transForward = trans.forward;\n    distance = (Vector3.Dot(transForward, trans.position - currentEventCamera.transform.position) / Vector3.Dot(transForward, ray.direction));\n    if (distance < 0)\n        continue;\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"float distance = 0;\nif (currentEventCamera == null || canvas.renderMode == RenderMode.ScreenSpaceOverlay)\n    distance = 0;\nelse\n{\n    Transform trans = go.transform;\n    Vector3 transForward = trans.forward;\n    distance = (Vector3.Dot(transForward, trans.position - currentEventCamera.transform.position) / Vector3.Dot(transForward, ray.direction));\n    if (distance < 0)\n        continue;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Render Mode 为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RenderMode.ScreenSpaceOverlay"}]},{"type":"text","value":" 或者 Camera 为 null，distance 为 0；否则就计算 Graphic 和 Camera 之间的向量在 Graphic 正方向上的投影以及计算射线方向在 Graphic 正方向上的投影，两者相除就得到最终的 distance。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果 distance 小于 hitDistance(设置的 Blocked Objects 和 Blocked Mask 产生)，则结果通过最终的测试可被用作事件的接收者之一。"}]},{"type":"element","tag":"h3","props":{"id":"射线检测前后的一些操作"},"children":[{"type":"text","value":"射线检测前后的一些操作"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先来看看这些 Raycaster 被唤起的部分，也就是最开始的流程图中的第三步。Input Module 中使用 Raycaster 处理射线检测，真正的 Raycaster 实施代码又回到了 EventSystem 类中的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RaycastAll"}]},{"type":"text","value":" 方法，具体代码如下:"}]},{"type":"element","tag":"pre","props":{"code":"public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults)\n{\n    raycastResults.Clear();\n    var modules = RaycasterManager.GetRaycasters();\n    for (int i = 0; i < modules.Count; ++i)\n    {\n        var module = modules[i];\n        if (module == null || !module.IsActive())\n            continue;\n        module.Raycast(eventData, raycastResults);\n    }\n    raycastResults.Sort(s_RaycastComparer);\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults)\n{\n    raycastResults.Clear();\n    var modules = RaycasterManager.GetRaycasters();\n    for (int i = 0; i < modules.Count; ++i)\n    {\n        var module = modules[i];\n        if (module == null || !module.IsActive())\n            continue;\n        module.Raycast(eventData, raycastResults);\n    }\n    raycastResults.Sort(s_RaycastComparer);\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"场景中可以存在一个或多个 Raycaster。当存在多个时，如果需要发起射线检测，那么每个处于 Active 状态的 Raycaster 都会工作，所有 Raycaster 检测得到的结果都会存放在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"raycastResults"}]},{"type":"text","value":" 中(这些 RaycastResult 都是在各自射线检测器中根据 distance 从小到大排过序的)。方法最后使用自定义 Comparer 对所有的 RaycastResult 排序。"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"s_RaycastComparer"}]},{"type":"text","value":" 有以下几种比较流程:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"两个 RaycastResult 检测所在的 Raycaster 不同"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先比较两个对象的 Camera 的 depth。在渲染中，Camera depth 越小会越先渲染，越大越往后渲染，因此对于射线检测来说，Camera 的 depth 越大，它对应的物体应该先于 Camera depth 小的物体进行射线检测，检测得到的结果也应排在前面。代码如下:"}]},{"type":"element","tag":"pre","props":{"code":"if (lhsEventCamera.depth < rhsEventCamera.depth)\n    return 1;\nif (lhsEventCamera.depth == rhsEventCamera.depth)\n    return 0;\nreturn -1;\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if (lhsEventCamera.depth < rhsEventCamera.depth)\n    return 1;\nif (lhsEventCamera.depth == rhsEventCamera.depth)\n    return 0;\nreturn -1;\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当 Camera depth 相等的时候，使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"sortOrderPriority"}]},{"type":"text","value":" 进行比较。优先级数值越大，越先被射线检测选中，所以这里的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CompareTo"}]},{"type":"text","value":" 方法使用的是右边的参数去比较左边的参数，最终的结果就是按照从大到小(降序)的顺序排列。"}]},{"type":"element","tag":"pre","props":{"code":"return rhs.module.sortOrderPriority.CompareTo(lhs.module.sortOrderPriority);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"return rhs.module.sortOrderPriority.CompareTo(lhs.module.sortOrderPriority);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 PhysicsRaycaster 和 Physics2DRaycaster 类中没有覆写 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"sortOrderPriority"}]},{"type":"text","value":" 方法，因此都返回基类的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"int.MinValue"}]},{"type":"text","value":"；但在 GraphicRaycaster 类中覆写了此方法，当对应的 Canvas 的 renderMode 设置为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RenderMode.ScreenSpaceOverlay"}]},{"type":"text","value":" 时，此时的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"sortOrderPriority"}]},{"type":"text","value":" 返回 Canvas 的 sortingOrder(Sort Order越大越在上层)，否则同样也是返回基类设置的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"int.MinValue"}]},{"type":"text","value":"，这是因为在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RenderMode.ScreenSpaceOverlay"}]},{"type":"text","value":" 模式下，所有的 distance 都将是 0。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当 sortOrderPriority 相同，再使用 renderOrderPriority 比较。"}]},{"type":"element","tag":"pre","props":{"code":"return rhs.module.renderOrderPriority.CompareTo(lhs.module.renderOrderPriority);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"return rhs.module.renderOrderPriority.CompareTo(lhs.module.renderOrderPriority);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"renderOrderPriority 和 sortOrderPriority 类似，仅在 GraphicRaycaster 类中被覆写，也只有在 Canvas 的 renderMode 设置为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"RenderMode.ScreenSpaceOverlay"}]},{"type":"text","value":" 时才返回 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"canvas.rootCanvas.renderOrder"}]},{"type":"text","value":"，这是因为 Canvas 在其他几种 renderMode 下，渲染的先后顺序都和距离摄像机的距离有关。所以 renderOrderPriority 比较也是按照从大到小的顺序得到最终的结果。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"同属于一个 Raycaster 检测得到，但是它们的 sortingLayer 不一样"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于 PhysicsRaycaster 检测得到的对象，sortingLayer 都为 0。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于 Physics2DRaycaster 检测得到的对象，如果对象上挂载有 SpriteRenderer 组件，那么 sortingLayer 对应的 sortingLayerID，否则也为 0。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于 GraphicRaycaster 检测所得，sortingLayer 就是所在 Canvas 的 sortingLayerID。"}]},{"type":"element","tag":"pre","props":{"code":"var rid = SortingLayer.GetLayerValueFromID(rhs.sortingLayer);\nvar lid = SortingLayer.GetLayerValueFromID(lhs.sortingLayer);\nreturn rid.CompareTo(lid);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var rid = SortingLayer.GetLayerValueFromID(rhs.sortingLayer);\nvar lid = SortingLayer.GetLayerValueFromID(lhs.sortingLayer);\nreturn rid.CompareTo(lid);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SortingLayer.GetLayerValueFromID"}]},{"type":"text","value":" 方法计算 sortingLayer 最终的 sorting layer 值，同样是按照降序排列，因此计算得到的 sorting layer 值越大越先排在前面。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sortingLayer 也相同，使用 sortingOrder 比较"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"sortingOrder 和 sortingLayer 类似，PhysicsRaycaster 检测得到的对象 sortingOrder 为 0；Physics2DRaycaster 检测得到的对象是 SpriteRenderer 中的 sortingOrder；GraphicRaycaster 检测所得是所在 Canvas 的 sortingOrder。最终 sortingOrder 越大的对象越排前面。代码如下:"}]},{"type":"element","tag":"pre","props":{"code":"return rhs.sortingOrder.CompareTo(lhs.sortingOrder);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"return rhs.sortingOrder.CompareTo(lhs.sortingOrder);\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sortingOrder 相同，使用 depth 比较"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PhysicsRaycaster 和 Physics2DRaycaster 中 depth 都被设置为了 0；GraphicRaycaster 检测所得的对象的 depth 就是继承自 Graphic 类的对象所在的 Graphic 的 depth，即 Canvas 下所有 Graphic 深度遍历的顺序。比较同样也是按照降序进行的，因此越嵌套在靠近 Canvas 的对象越排在前面。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"depth 相同，使用 distance 比较"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PhysicsRaycaster 中的 distance 就是 RaycastHit 的 distance(射线起点到射线碰撞点的距离)。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Physics2DRaycaster 类中返回的是 Camera 的位置和射线碰撞点之间的距离。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GraphicRaycaster 类中 distance "},{"type":"element","tag":"a","props":{"href":"http://geomalgorithms.com/a06-_intersect-2.html","rel":["nofollow"]},"children":[{"type":"text","value":"计算"}]},{"type":"text","value":"如下:"}]},{"type":"element","tag":"pre","props":{"code":"var go = m_RaycastResults[index].gameObject;\nTransform trans = go.transform;\nVector3 transForward = trans.forward;\n// TODO why user DOT to caculate distance?\ndistance = Vector3.Dot(transForward, trans.position - currentEventCamera.transform.position) / Vector3.Dot(transForward, ray.direction);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var go = m_RaycastResults[index].gameObject;\nTransform trans = go.transform;\nVector3 transForward = trans.forward;\n// TODO why user DOT to caculate distance?\ndistance = Vector3.Dot(transForward, trans.position - currentEventCamera.transform.position) / Vector3.Dot(transForward, ray.direction);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"距离 distance 越小越靠前。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"最后如果上述情况都不能满足，使用 index 比较。先被射线检测到的对象排在前面。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Raycaster 后段部分的流程: 取排过序的 RaycastResult 中第一个结果作为响应事件的输入事件的 pointerCurrentRaycast，根据它来在 Messaging System 中分发事件，大致代码如下:"}]},{"type":"element","tag":"pre","props":{"code":"// 获取 Raycast 结果中对应的 GameObject\nvar currentOverGo = pointerEvent.pointerCurrentRaycast.gameObject;\n// 分发事件\nExecuteEvents.ExecuteHierarchy(currentOverGo, pointerEvent, ExecuteEvents.pointerDownHandler);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 获取 Raycast 结果中对应的 GameObject\nvar currentOverGo = pointerEvent.pointerCurrentRaycast.gameObject;\n// 分发事件\nExecuteEvents.ExecuteHierarchy(currentOverGo, pointerEvent, ExecuteEvents.pointerDownHandler);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Raycaster 在 Event System 中的作用和流程基本就是上述的内容。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"baseraycaster-类","depth":2,"text":"BaseRaycaster 类"},{"id":"physics-raycaster","depth":2,"text":"Physics Raycaster"},{"id":"physics2d-raycaster","depth":2,"text":"Physics2D Raycaster"},{"id":"graphic-raycaster","depth":2,"text":"Graphic Raycaster","children":[{"id":"属性或方法","depth":3,"text":"属性或方法"},{"id":"graphicraycasterraycast","depth":3,"text":"GraphicRaycaster.Raycast"},{"id":"射线检测前后的一些操作","depth":3,"text":"射线检测前后的一些操作"}]}]}},"_type":"markdown","_id":"content:unity:2019-08-12-ugui-Raycasters.md","_source":"content","_file":"unity/2019-08-12-ugui-Raycasters.md","_extension":"md","date":"2019-08-12"}