{"_path":"/tool/2020-07-11-github-actions","_dir":"tool","_draft":false,"_partial":false,"_locale":"","title":"github actions 简单使用","description":"如果你是一个前端项目，可以使用 Node.js 的模板，点击 Set up this workflow","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"快速开始"},"children":[{"type":"text","value":"快速开始"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你是一个前端项目，可以使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Node.js"}]},{"type":"text","value":" 的模板，点击 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Set up this workflow"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"v2-93f521330d963d903561c0575d2d8fac_720w","src":"/images/2020-07-11-github-actions/v2-93f521330d963d903561c0575d2d8fac_720w.jpg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此时生成了一个文件 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".github/workflows/nodejs.yaml"}]},{"type":"text","value":"，修改内容如下"}]},{"type":"element","tag":"pre","props":{"code":"name: Git Action Test\n# on: 用来指定启动触发的事件，push 则表示在监听到 git push 到指定分支时触发。如此之外还可以是 pull_request。\non: [push]   \n\n#jobs:一个 CI/CD 的工作流有许多 jobs 组成，比如最典型的 job 是 lint，test，build 或者 deploy。\n#所有的 job 都是并行的,如果想顺序执行，可以这样 build-job: needs: test-job。\njobs:         \n  build:\n    #runs-on用来指定执行系统环境，不仅有常用的 Linux 发行版，还可以是 macOS 或 Windows。\n    runs-on: ubuntu-latest  \n    # steps 表示每个 job 需要执行的步骤，比如这里我分成了四步：拉取分支 → 安装 Node 环境 → 构建项目 → 上传 COS。\n    steps:  \n    #Action 是组成工作流最核心最基础的元素。每个 Action 可以看作封装的独立脚本，有自己的操作逻辑，我们只需要 uses 并通过 with 传入参数即可。\n    - uses: actions/checkout@v1 \n    - name: Use Node.js 10.x\n      uses: actions/setup-node@v1\n      with:\n        node-version: 10.x\n    - name: npm install, build\n      run: |\n        npm install\n        npm run build --if-present\n      env:\n        CI: true\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"name: Git Action Test\n# on: 用来指定启动触发的事件，push 则表示在监听到 git push 到指定分支时触发。如此之外还可以是 pull_request。\non: [push]   \n\n#jobs:一个 CI/CD 的工作流有许多 jobs 组成，比如最典型的 job 是 lint，test，build 或者 deploy。\n#所有的 job 都是并行的,如果想顺序执行，可以这样 build-job: needs: test-job。\njobs:         \n  build:\n    #runs-on用来指定执行系统环境，不仅有常用的 Linux 发行版，还可以是 macOS 或 Windows。\n    runs-on: ubuntu-latest  \n    # steps 表示每个 job 需要执行的步骤，比如这里我分成了四步：拉取分支 → 安装 Node 环境 → 构建项目 → 上传 COS。\n    steps:  \n    #Action 是组成工作流最核心最基础的元素。每个 Action 可以看作封装的独立脚本，有自己的操作逻辑，我们只需要 uses 并通过 with 传入参数即可。\n    - uses: actions/checkout@v1 \n    - name: Use Node.js 10.x\n      uses: actions/setup-node@v1\n      with:\n        node-version: 10.x\n    - name: npm install, build\n      run: |\n        npm install\n        npm run build --if-present\n      env:\n        CI: true\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"git push"}]},{"type":"text","value":" 操作，此时可以在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github"}]},{"type":"text","value":" 的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Actions"}]},{"type":"text","value":" 标签页看到执行结果"}]},{"type":"element","tag":"h1","props":{"id":"安全相关"},"children":[{"type":"text","value":"安全相关"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如何在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github action"}]},{"type":"text","value":" 上访问敏感数据？如使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ssh"}]},{"type":"text","value":" 登录时如何维护密码。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们可以在 github repo 上依次点击 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Settings"}]},{"type":"text","value":" -> "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Secrets"}]},{"type":"text","value":" 设置 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"secret"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"v2-51c0ee11b4bc61312d8e1af14d906432_720w","src":"/images/2020-07-11-github-actions/v2-51c0ee11b4bc61312d8e1af14d906432_720w.jpg"},"children":[]}]},{"type":"element","tag":"pre","props":{"code":"- name: setup aliyun oss\n  uses: manyuanrong/setup-ossutil@master\n  with:\n    endpoint: oss-cn-beijing.aliyuncs.com\n    access-key-id: ${{ secrets.OSS_KEY_ID }}\n    access-key-secret: ${{ secrets.OSS_KEY_SECRET }}\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"- name: setup aliyun oss\n  uses: manyuanrong/setup-ossutil@master\n  with:\n    endpoint: oss-cn-beijing.aliyuncs.com\n    access-key-id: ${{ secrets.OSS_KEY_ID }}\n    access-key-secret: ${{ secrets.OSS_KEY_SECRET }}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这里的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":" 就是一种 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"context"}]},{"type":"text","value":"，描述 CI/CD 一个 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"workflow"}]},{"type":"text","value":" 中的上下文信息，使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"${{ expression }}"}]},{"type":"text","value":" 语法表示。除了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":"，还有"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github"}]},{"type":"text","value":": "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"workflow"}]},{"type":"text","value":" 的信息，如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"github.sha"}]},{"type":"text","value":" 可以获取当前的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"commit SHA"}]},{"type":"text","value":"，我们可以利用它为 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"sentry"}]},{"type":"text","value":" 或者 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"docker image"}]},{"type":"text","value":" 打入版本号"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"env"}]},{"type":"text","value":": 环境变量"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"job"}]},{"type":"text","value":": 当前执行 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"job"}]},{"type":"text","value":" 的信息，如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"job.status"}]},{"type":"text","value":" 表示当前 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"job"}]},{"type":"text","value":" 的执行状态"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"matrix"}]},{"type":"text","value":": 描述一些构建信息，如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":" 以及 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"os"}]},{"type":"text","value":" 版本号"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"更多 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"context"}]},{"type":"text","value":" 信息可以参考官方文档 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Contexts and expression syntax for GitHub Actions[4]"}]}]},{"type":"element","tag":"h1","props":{"id":"自动创建项目release"},"children":[{"type":"text","value":"自动创建项目Release"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有些项目在发布新版本时，一般都会创建一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github Release"}]},{"type":"text","value":"，并且把对应编译好之后的文件上传到"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Release"}]},{"type":"text","value":"的资源列表中，例如：\n"},{"type":"element","tag":"img","props":{"alt":"2659679572-62492fa02f19b6f9","src":"/images/2020-07-11-github-actions/2659679572-62492fa02f19b6f9.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果这个使用手动操作的话，不仅步骤重复又繁琐(每次都要编译出各个操作系统对应的发行包再进行上传)，而且最蛋疼的是对于国内的网络环境来说，上传文件速度简直不能忍，好不容易上传了一大半搞不好就因为网络原因又要重新上传，相信用过的人都深有体会。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我就在想如果能用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github Actions"}]},{"type":"text","value":"来创建"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Release"}]},{"type":"text","value":",并且做对应的编译和上传，那上面的问题都可以迎刃而解了，于是在官方市场搜索了一下"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Release"}]},{"type":"text","value":"关键字，果然已经有提供对应的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"actions"}]},{"type":"text","value":"了："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/actions/create-release","rel":["nofollow"]},"children":[{"type":"text","value":"create-release"}]},{"type":"text","value":": 用于创建 release"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/actions/upload-release-asset","rel":["nofollow"]},"children":[{"type":"text","value":"upload-release-asset"}]},{"type":"text","value":": 用于上传资源到对应的 release 中"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接着创建一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github仓库"}]},{"type":"text","value":"，我测试的仓库地址是"},{"type":"element","tag":"a","props":{"href":"https://github.com/monkeyWie/github-actions-demo","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/monkeyWie/github-actions-demo"}]},{"type":"text","value":"，项目用 go 语言写的，代码非常简单就是两个 hello world 级别的代码，里面包含了普通的 go 程序和 cgo 程序。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"项目的构建流程是在项目"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"git push --tags"}]},{"type":"text","value":"的时候，触发 workflow，通过"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github Actions"}]},{"type":"text","value":"编译出来"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Windows、Linux、macOS"}]},{"type":"text","value":"三个操作系统对应的 64 位可执行文件，再根据"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"tag name"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"tag message"}]},{"type":"text","value":"来创建对应的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github Release"}]},{"type":"text","value":"，并将编译好的文件上传。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"同样的创建一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".github/workflows/main.yml"}]},{"type":"text","value":"文件，内容如下："}]},{"type":"element","tag":"pre","props":{"code":"name: CI\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - \"v*\" # Push events to matching v*, i.e. v1.0, v20.15.10\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n      - name: Use Golang\n        uses: actions/setup-go@v1\n        with:\n          go-version: \"1.13.x\"\n      - name: Build normal\n        run: |\n          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o normal-windows-x64.exe cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o normal-linux-x64 cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o normal-darwin-x64 cmd/normal/main.go\n          zip normal-windows-x64.zip normal-windows-x64.exe\n          zip normal-linux-x64.zip normal-linux-x64\n          zip normal-darwin-x64.zip normal-darwin-x64\n      - name: Build cgo\n        run: |\n          go get github.com/monkeyWie/xgo\n          ~/go/bin/xgo -targets=windows/amd64,linux/amd64,darwin/amd64 -ldflags=\"-w -s\" -pkg=cmd/cgo/main.go -out=cgo .\n          mv cgo-windows-* cgo-windows-x64.exe\n          mv cgo-linux-* cgo-linux-x64\n          mv cgo-darwin-* cgo-darwin-x64\n          zip cgo-windows-x64.zip cgo-windows-x64.exe\n          zip cgo-linux-x64.zip cgo-linux-x64\n          zip cgo-darwin-x64.zip cgo-darwin-x64\n      - name: Create Release\n        id: create_release\n        uses: monkeyWie/create-release@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release normal windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-windows-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-linux-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-darwin-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n\n      - name: Upload Release cgo windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-windows-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-linux-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-darwin-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"name: CI\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - \"v*\" # Push events to matching v*, i.e. v1.0, v20.15.10\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n      - name: Use Golang\n        uses: actions/setup-go@v1\n        with:\n          go-version: \"1.13.x\"\n      - name: Build normal\n        run: |\n          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o normal-windows-x64.exe cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o normal-linux-x64 cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o normal-darwin-x64 cmd/normal/main.go\n          zip normal-windows-x64.zip normal-windows-x64.exe\n          zip normal-linux-x64.zip normal-linux-x64\n          zip normal-darwin-x64.zip normal-darwin-x64\n      - name: Build cgo\n        run: |\n          go get github.com/monkeyWie/xgo\n          ~/go/bin/xgo -targets=windows/amd64,linux/amd64,darwin/amd64 -ldflags=\"-w -s\" -pkg=cmd/cgo/main.go -out=cgo .\n          mv cgo-windows-* cgo-windows-x64.exe\n          mv cgo-linux-* cgo-linux-x64\n          mv cgo-darwin-* cgo-darwin-x64\n          zip cgo-windows-x64.zip cgo-windows-x64.exe\n          zip cgo-linux-x64.zip cgo-linux-x64\n          zip cgo-darwin-x64.zip cgo-darwin-x64\n      - name: Create Release\n        id: create_release\n        uses: monkeyWie/create-release@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release normal windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-windows-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-linux-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-darwin-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n\n      - name: Upload Release cgo windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-windows-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-linux-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-darwin-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"构建流程如下："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"监听 tag name 为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"v"}]},{"type":"text","value":"开头的 push"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"运行一个 job，在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":"虚拟机环境下"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"拉取源码，安装"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"golang 1.13.x"}]},{"type":"text","value":"环境"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"go build"}]},{"type":"text","value":"交叉编译出不同操作系统下 64 位可执行文件，并使用 zip 压缩"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"xgo"}]},{"type":"text","value":"交叉编译出不同操作系统下 64 位可执行文件，并使用 zip 压缩"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"monkeyWie/create-release@master"}]},{"type":"text","value":"创建 Release，其中会用到"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"${{ secrets.GITHUB_TOKEN }}"}]},{"type":"text","value":"，这是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github Actions"}]},{"type":"text","value":"内置的一个"},{"type":"element","tag":"a","props":{"href":"https://help.github.com/en/github/automating-your-workflow-with-github-actions/virtual-environments-for-github-actions#github_token-secret","rel":["nofollow"]},"children":[{"type":"text","value":"秘钥"}]},{"type":"text","value":"，用于授权访问你自己的 github 存储库，原理就是使用这个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"TOKEN"}]},{"type":"text","value":"调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github API"}]},{"type":"text","value":"来进行创建 release，还有一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"${{ github.ref }}"}]},{"type":"text","value":"也是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Github Actions"}]},{"type":"text","value":"内置的一个"},{"type":"element","tag":"a","props":{"href":"https://help.github.com/en/github/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#github-context","rel":["nofollow"]},"children":[{"type":"text","value":"变量"}]},{"type":"text","value":"，然后通过 action 的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"with"}]},{"type":"text","value":"进行参数传递。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"actions/upload-release-asset@v1.0.1"}]},{"type":"text","value":"上传文件，这里使用了两个表达式"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"${{ steps.create_release.outputs.upload_url }}"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"${{ steps.create_release.outputs.tag }}"}]},{"type":"text","value":"，可以获取到指定"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"action"}]},{"type":"text","value":"的输出，第一个是获取创建好的 release 对应的上传地址，第二个是获取对应的 tag(例如：v1.0.0)，这样就可以在把上传的文件带上版本号。因为这个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"action"}]},{"type":"text","value":"不支持多个文件上传，所以就写了多个 action 进行上传。"}]}]},{"type":"element","tag":"h1","props":{"id":"ssh命令"},"children":[{"type":"text","value":"ssh命令"}]},{"type":"element","tag":"pre","props":{"code":"name: Publish\non: [push]\njobs:\n  build:\n    name: SSH command\n    runs-on: ubuntu-latest\n    steps:\n    - name: git fetch\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ secrets.SERVER_HOST }}\n        username: ${{ secrets.SERVER_USERNAME }}\n        password: ${{ secrets.SERVER_PASSWORD }}\n        command_timeout: 10m\n        script: |\n          git fetch --all\n          git reset --hard origin/master\n  build:\n    name: ...\n    runs-on: ...\n    ...\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"name: Publish\non: [push]\njobs:\n  build:\n    name: SSH command\n    runs-on: ubuntu-latest\n    steps:\n    - name: git fetch\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ secrets.SERVER_HOST }}\n        username: ${{ secrets.SERVER_USERNAME }}\n        password: ${{ secrets.SERVER_PASSWORD }}\n        command_timeout: 10m\n        script: |\n          git fetch --all\n          git reset --hard origin/master\n  build:\n    name: ...\n    runs-on: ...\n    ...\n"}]}]},{"type":"element","tag":"h1","props":{"id":"dotfx"},"children":[{"type":"text","value":"dotFx"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html"}]}]},{"type":"element","tag":"pre","props":{"code":"name: docfx build\non:\n  push:\n    branches:\n      - dev\njobs:\n  build:\n    name: Build\n    runs-on: windows-latest\n    steps:\n      # Check out the branch that triggered this workflow to the 'source' subdirectory\n      - name: Checkout Code\n        uses: actions/checkout@v2\n        with:\n          ref: dev\n          path: source\n      - name: install DocFX\n        run: \"& choco install docfx -y\"\n      # Run a build\n      - name: Build docs\n        run: \"& docfx ./docfx.json\"\n        working-directory: ./source\n      # Check out gh-pages branch to the 'docs' subdirectory\n      - name: Checkout docs\n        uses: actions/checkout@v2\n        with:\n          ref: gh-pages\n          path: docs\n      # Sync the site\n      - name: Clear docs repo\n        run: Get-ChildItem -Force -Exclude .git | ForEach-Object { Remove-Item -Recurse -Verbose -Force $_ }\n        working-directory: ./docs\n      - name: Sync new content\n        run: Copy-Item -Recurse -Verbose -Force \"$env:GITHUB_WORKSPACE/source/_site/*\" \"$env:GITHUB_WORKSPACE/docs\"\n        working-directory: ./docs\n        # update docs\n      - name: Commit to gh-pages and push\n        run: |\n          $ErrorActionPreference = \"Continue\"\n          git add -A\n          git diff HEAD --exit-code\n          if ($LASTEXITCODE -eq 0) {\n            Write-Host \"No changes to commit!\"\n          } else {\n            git config --global user.name \"github-actions-docfx[bot]\"\n            git config --global user.email \"weihanli@outlook.com\"\n            git commit -m \"Updated docs from commit $env:GITHUB_SHA on $env:GITHUB_REF\"\n            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}\n            git push origin gh-pages\n          }\n        working-directory: ./docs\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"name: docfx build\non:\n  push:\n    branches:\n      - dev\njobs:\n  build:\n    name: Build\n    runs-on: windows-latest\n    steps:\n      # Check out the branch that triggered this workflow to the 'source' subdirectory\n      - name: Checkout Code\n        uses: actions/checkout@v2\n        with:\n          ref: dev\n          path: source\n      - name: install DocFX\n        run: \"& choco install docfx -y\"\n      # Run a build\n      - name: Build docs\n        run: \"& docfx ./docfx.json\"\n        working-directory: ./source\n      # Check out gh-pages branch to the 'docs' subdirectory\n      - name: Checkout docs\n        uses: actions/checkout@v2\n        with:\n          ref: gh-pages\n          path: docs\n      # Sync the site\n      - name: Clear docs repo\n        run: Get-ChildItem -Force -Exclude .git | ForEach-Object { Remove-Item -Recurse -Verbose -Force $_ }\n        working-directory: ./docs\n      - name: Sync new content\n        run: Copy-Item -Recurse -Verbose -Force \"$env:GITHUB_WORKSPACE/source/_site/*\" \"$env:GITHUB_WORKSPACE/docs\"\n        working-directory: ./docs\n        # update docs\n      - name: Commit to gh-pages and push\n        run: |\n          $ErrorActionPreference = \"Continue\"\n          git add -A\n          git diff HEAD --exit-code\n          if ($LASTEXITCODE -eq 0) {\n            Write-Host \"No changes to commit!\"\n          } else {\n            git config --global user.name \"github-actions-docfx[bot]\"\n            git config --global user.email \"weihanli@outlook.com\"\n            git commit -m \"Updated docs from commit $env:GITHUB_SHA on $env:GITHUB_REF\"\n            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}\n            git push origin gh-pages\n          }\n        working-directory: ./docs\n"}]}]},{"type":"element","tag":"h1","props":{"id":"hexo"},"children":[{"type":"text","value":"Hexo"}]},{"type":"element","tag":"pre","props":{"code":"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Hexo \n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装hexo\n      run : |\n        npm install -g hexo-cli\n  \n    - name: 生成博客\n      run : |\n        cd main\n        npm install\n        hexo clean\n        hexo generate\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/public/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n        \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Hexo \n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装hexo\n      run : |\n        npm install -g hexo-cli\n  \n    - name: 生成博客\n      run : |\n        cd main\n        npm install\n        hexo clean\n        hexo generate\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/public/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n        \n"}]}]},{"type":"element","tag":"h1","props":{"id":"gitbook"},"children":[{"type":"text","value":"gitbook"}]},{"type":"element","tag":"pre","props":{"code":"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: GitBook\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [12.18.2]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装gitbook\n      run : |\n        npm install -g gitbook-cli\n  \n    - name: 生成书籍\n      run : |\n        cd main/Docs\n        gitbook install\n        gitbook build\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/Docs/_book/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: GitBook\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [12.18.2]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装gitbook\n      run : |\n        npm install -g gitbook-cli\n  \n    - name: 生成书籍\n      run : |\n        cd main/Docs\n        gitbook install\n        gitbook build\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/Docs/_book/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n"}]}]},{"type":"element","tag":"h1","props":{"id":"市场"},"children":[{"type":"text","value":"市场"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/marketplace","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/marketplace"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.github.com/cn/actions/configuring-and-managing-workflows/using-environment-variables","rel":["nofollow"]},"children":[{"type":"text","value":"https://docs.github.com/cn/actions/configuring-and-managing-workflows/using-environment-variables"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:tool:2020-07-11-github-actions.md","_source":"content","_file":"tool/2020-07-11-github-actions.md","_extension":"md","date":"2020-07-11"}