{"_path":"/dotnet/2019-11-05-quartz","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"Creating a Quartz.NET hosted service with ASP.NET Core","description":"In this post I describe how to run Quartz.NET jobs using an ASP.NET Core hosted service. I show how to create a simple IJob, a custom IJobFactory, and a QuartzHostedService that runs jobs while your application is running. I'll also touch on some of the issues to aware of, namely of using scoped services inside singleton classes.","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this post I describe how to run Quartz.NET jobs using an "},{"type":"element","tag":"a","props":{"href":"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2","rel":["nofollow"]},"children":[{"type":"text","value":"ASP.NET Core hosted service"}]},{"type":"text","value":". I show how to create a simple "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":", a custom "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJobFactory"}]},{"type":"text","value":", and a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"QuartzHostedService"}]},{"type":"text","value":" that runs jobs while your application is running. I'll also touch on some of the issues to aware of, namely of using scoped services inside singleton classes."}]},{"type":"element","tag":"h2","props":{"id":"introduction-what-is-quartznet"},"children":[{"type":"text","value":"Introduction - what is Quartz.NET?"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#introduction-what-is-quartz-net-","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2019-11-05-quartz/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As per "},{"type":"element","tag":"a","props":{"href":"https://www.quartz-scheduler.net/","rel":["nofollow"]},"children":[{"type":"text","value":"their website"}]},{"type":"text","value":":"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Quartz.NET is a full-featured, open source job scheduling system that can be used from smallest apps to large scale enterprise systems."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It's an old staple of many ASP.NET developers, used as a way of running background tasks on a timer, in a reliable, clustered, way. Using Quartz.NET with ASP.NET Core is pretty similar - Quartz.NET supports .NET Standard 2.0, so you can easily use it in your applications."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Quartz.NET has two main concepts:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"job"}]},{"type":"text","value":". This is the background tasks that you want to run on some sort of schedule."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"scheduler"}]},{"type":"text","value":". This is responsible for running jobs based on triggers, on a time-based schedule."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ASP.NET Core has good support for running \"background tasks\" via way of "},{"type":"element","tag":"a","props":{"href":"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services","rel":["nofollow"]},"children":[{"type":"text","value":"hosted services"}]},{"type":"text","value":". Hosted services are started when your ASP.NET Core app starts, and run in the background for the lifetime of the application. By creating a Quartz.NET hosted service, you can use a standard ASP.NET Core application for running your tasks in the background."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This sort of non-HTTP scenario is also possible with the \"generic host\", "},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/the-asp-net-core-generic-host-namespace-clashes-and-extension-methods/","rel":["nofollow"]},"children":[{"type":"text","value":"but for various reasons"}]},{"type":"text","value":" I generally don't use those at the moment. This should hopefully improve in ASP.NET Core 3.0 with the extra investment going into these non-HTTP scenarios."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"While it's possible to create "},{"type":"element","tag":"a","props":{"href":"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2#timed-background-tasks","rel":["nofollow"]},"children":[{"type":"text","value":"a \"timed\" background service"}]},{"type":"text","value":", (that runs a tasks every 10 minutes, for example), Quartz.NET provides a far more robust solution. You can ensure tasks only run at specific times of the day (e.g. 2:30am), or only on specific days, or any combination by using a "},{"type":"element","tag":"a","props":{"href":"https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/crontriggers.html","rel":["nofollow"]},"children":[{"type":"text","value":"Cron trigger"}]},{"type":"text","value":". It also allows you to run multiple instances of your application in a clustered fashion, so that only a single instance can run a given task at any one time."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this post I'll show the basics of creating a Quartz.NET job and scheduling it to run on a timer in a hosted service."}]},{"type":"element","tag":"h2","props":{"id":"installing-quartznet"},"children":[{"type":"text","value":"Installing Quartz.NET"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#installing-quartz-net","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"https://andrewlock.net/assets/img/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Quartz.NET is a .NET Standard 2.0 NuGet package, so it should be easy to install in your application. For this test I created an ASP.NET Core project and chose the Empty template. You can install the Quartz.NET package using "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"dotnet add package Quartz"}]},{"type":"text","value":". If you view the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":".csproj"}]},{"type":"text","value":" for the project, it should look something like this:"}]},{"type":"element","tag":"pre","props":{"className":["language-xml"],"code":"<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.2</TargetFramework>\n    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\n    <PackageReference Include=\"Quartz\" Version=\"3.0.7\" />\n  </ItemGroup>\n\n</Project>\n","language":"xml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.2</TargetFramework>\n    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\n    <PackageReference Include=\"Quartz\" Version=\"3.0.7\" />\n  </ItemGroup>\n\n</Project>\n"}]}]},{"type":"element","tag":"h2","props":{"id":"creating-an-ijob"},"children":[{"type":"text","value":"Creating an IJob"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#creating-an-ijob","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"https://andrewlock.net/assets/img/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For the actual background work we are scheduling, we're just going to use a \"hello world\" implementation that writes to an "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ILogger<>"}]},{"type":"text","value":" (and hence to the console). You should implement the Quartz interface "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":" which contains a single asynchronous "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Execute()"}]},{"type":"text","value":" method. Note that we're using dependency injection here to inject the logger into the constructor."}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"using Microsoft.Extensions.Logging;\nusing Quartz;\nusing System.Threading.Tasks;\n\n[DisallowConcurrentExecution]\npublic class HelloWorldJob : IJob\n{\n    private readonly ILogger<HelloWorldJob> _logger;\n    public HelloWorldJob(ILogger<HelloWorldJob> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task Execute(IJobExecutionContext context)\n    {\n        _logger.LogInformation(\"Hello world!\");\n        return Task.CompletedTask;\n    }\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using Microsoft.Extensions.Logging;\nusing Quartz;\nusing System.Threading.Tasks;\n\n[DisallowConcurrentExecution]\npublic class HelloWorldJob : IJob\n{\n    private readonly ILogger<HelloWorldJob> _logger;\n    public HelloWorldJob(ILogger<HelloWorldJob> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task Execute(IJobExecutionContext context)\n    {\n        _logger.LogInformation(\"Hello world!\");\n        return Task.CompletedTask;\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I also decorated the job with the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"[DisallowConcurrentExecution]"}]},{"type":"text","value":" attribute. This attribute "},{"type":"element","tag":"a","props":{"href":"https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/more-about-jobs.html#job-state-and-concurrency","rel":["nofollow"]},"children":[{"type":"text","value":"prevents Quartz.NET from trying to run the same job concurrently"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"creating-an-ijobfactory"},"children":[{"type":"text","value":"Creating an IJobFactory"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#creating-an-ijobfactory","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"https://andrewlock.net/assets/img/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, we need to tell Quartz how it should create instances of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":". By default, Quartz will try and \"new-up\" instances of the job using "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Activator.CreateInstance"}]},{"type":"text","value":", effectively calling "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"new HelloWorldJob()"}]},{"type":"text","value":". Unfortunately, as we're using constructor injection, that won't work. Instead, we can provide a custom "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJobFactory"}]},{"type":"text","value":" that hooks into the ASP.NET Core dependency injection container ("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IServiceProvider"}]},{"type":"text","value":"):"}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"using Microsoft.Extensions.DependencyInjection;\nusing Quartz;\nusing Quartz.Spi;\nusing System;\n\npublic class SingletonJobFactory : IJobFactory\n{\n    private readonly IServiceProvider _serviceProvider;\n    public SingletonJobFactory(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)\n    {\n        return _serviceProvider.GetRequiredService(bundle.JobDetail.JobType) as IJob;\n    }\n\n    public void ReturnJob(IJob job) { }\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using Microsoft.Extensions.DependencyInjection;\nusing Quartz;\nusing Quartz.Spi;\nusing System;\n\npublic class SingletonJobFactory : IJobFactory\n{\n    private readonly IServiceProvider _serviceProvider;\n    public SingletonJobFactory(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)\n    {\n        return _serviceProvider.GetRequiredService(bundle.JobDetail.JobType) as IJob;\n    }\n\n    public void ReturnJob(IJob job) { }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This factory takes an "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IServiceProvider"}]},{"type":"text","value":" in the constructor, and implements the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJobFactory"}]},{"type":"text","value":" interface. The important method is the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"NewJob()"}]},{"type":"text","value":" method, in which the factory has to return the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":" requested by the Quartz scheduler. In this implementation we delegate directly to the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IServiceProvider"}]},{"type":"text","value":", and let the DI container find the required instance. The cast to "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":" at the end is required because the non-generic version of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GetRequiredService"}]},{"type":"text","value":" returns an "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"object"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ReturnJob"}]},{"type":"text","value":" method is where the scheduler tries to return (i.e. destroy) a job that was created by the factory. Unfortunately, there's no mechanism for doing so with the built-in "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IServiceProvider"}]},{"type":"text","value":". We can't create a new "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IScopeService"}]},{"type":"text","value":" that fits into the required Quartz API, so we're stuck only being able to create singleton jobs."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is important. With the above implementation, it is only safe to create "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":" implementations that are "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Singletons"}]},{"type":"text","value":" (or transient)."}]}]},{"type":"element","tag":"h2","props":{"id":"configuring-the-job"},"children":[{"type":"text","value":"Configuring the Job"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#configuring-the-job","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"https://andrewlock.net/assets/img/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I'm only showing a single "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":" implementation here, but we want the Quartz hosted service to be a generic implementation that works for any number of jobs. To help with that, we create a simple DTO called "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobSchedule"}]},{"type":"text","value":" that we'll use to define the timer schedule for a given job type:"}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"using System;\n\npublic class JobSchedule\n{\n    public JobSchedule(Type jobType, string cronExpression)\n    {\n        JobType = jobType;\n        CronExpression = cronExpression;\n    }\n\n    public Type JobType { get; }\n    public string CronExpression { get; }\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using System;\n\npublic class JobSchedule\n{\n    public JobSchedule(Type jobType, string cronExpression)\n    {\n        JobType = jobType;\n        CronExpression = cronExpression;\n    }\n\n    public Type JobType { get; }\n    public string CronExpression { get; }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobType"}]},{"type":"text","value":" is the .NET type of the job ("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"HelloWorldJob"}]},{"type":"text","value":" for our example), and "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CronExpression"}]},{"type":"text","value":" is a "},{"type":"element","tag":"a","props":{"href":"https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/crontriggers.html","rel":["nofollow"]},"children":[{"type":"text","value":"Quartz.NET Cron expression"}]},{"type":"text","value":". Cron expressions allow complex timer scheduling so you can set rules like \"fire every half hour between the hours of 8 am and 10 am, on the 5th and 20th of every month\". Just be sure to "},{"type":"element","tag":"a","props":{"href":"https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/crontriggers.html","rel":["nofollow"]},"children":[{"type":"text","value":"check the documentation"}]},{"type":"text","value":" for examples as not all Cron expressions used by different systems are interchangeable."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We'll add the job to DI and configure its schedule in "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Startup.ConfigureServices()"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\nusing Quartz;\nusing Quartz.Impl;\nusing Quartz.Spi;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add Quartz services\n    services.AddSingleton<IJobFactory, SingletonJobFactory>();\n    services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();\n\n    // Add our job\n    services.AddSingleton<HelloWorldJob>();\n    services.AddSingleton(new JobSchedule(\n        jobType: typeof(HelloWorldJob),\n        cronExpression: \"0/5 * * * * ?\")); // run every 5 seconds\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\nusing Quartz;\nusing Quartz.Impl;\nusing Quartz.Spi;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add Quartz services\n    services.AddSingleton<IJobFactory, SingletonJobFactory>();\n    services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();\n\n    // Add our job\n    services.AddSingleton<HelloWorldJob>();\n    services.AddSingleton(new JobSchedule(\n        jobType: typeof(HelloWorldJob),\n        cronExpression: \"0/5 * * * * ?\")); // run every 5 seconds\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This code adds four things as singletons to the DI container:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SingletonJobFactory"}]},{"type":"text","value":" shown earlier, used for creating the job instances."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"An implementation of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ISchedulerFactory"}]},{"type":"text","value":", the built-in "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"StdSchedulerFactory"}]},{"type":"text","value":", which handles scheduling and managing jobs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"HelloWorldJob"}]},{"type":"text","value":" job itself"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"An instance of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobSchedule"}]},{"type":"text","value":" for the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"HelloWorldJob"}]},{"type":"text","value":" with a Cron expression to run every 5 seconds."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There's only one piece missing now that brings them all together, the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"QuartzHostedService"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"creating-the-quartzhostedservice"},"children":[{"type":"text","value":"Creating the QuartzHostedService"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#creating-the-quartzhostedservice","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"https://andrewlock.net/assets/img/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"QuartzHostedService"}]},{"type":"text","value":" is an implementation of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IHostedService"}]},{"type":"text","value":" that sets up the Quartz scheduler, and starts it running in the background. Due to the design of Quartz, we can implement "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IHostedService"}]},{"type":"text","value":" directly, instead of the "},{"type":"element","tag":"a","props":{"href":"https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/background-tasks-with-ihostedservice","rel":["nofollow"]},"children":[{"type":"text","value":"more common approach of deriving from the base "}]},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"BackgroundService"}]},{"type":"text","value":" class. The full code for the service is listed below, and I'll discuss it afterwards."}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Quartz;\nusing Quartz.Spi;\n\npublic class QuartzHostedService : IHostedService\n{\n    private readonly ISchedulerFactory _schedulerFactory;\n    private readonly IJobFactory _jobFactory;\n    private readonly IEnumerable<JobSchedule> _jobSchedules;\n\n    public QuartzHostedService(\n        ISchedulerFactory schedulerFactory,\n        IJobFactory jobFactory,\n        IEnumerable<JobSchedule> jobSchedules)\n    {\n        _schedulerFactory = schedulerFactory;\n        _jobSchedules = jobSchedules;\n        _jobFactory = jobFactory;\n    }\n    public IScheduler Scheduler { get; set; }\n\n    public async Task StartAsync(CancellationToken cancellationToken)\n    {\n        Scheduler = await _schedulerFactory.GetScheduler(cancellationToken);\n        Scheduler.JobFactory = _jobFactory;\n\n        foreach (var jobSchedule in _jobSchedules)\n        {\n            var job = CreateJob(jobSchedule);\n            var trigger = CreateTrigger(jobSchedule);\n\n            await Scheduler.ScheduleJob(job, trigger, cancellationToken);\n        }\n\n        await Scheduler.Start(cancellationToken);\n    }\n\n    public async Task StopAsync(CancellationToken cancellationToken)\n    {\n        await Scheduler?.Shutdown(cancellationToken);\n    }\n\n    private static IJobDetail CreateJob(JobSchedule schedule)\n    {\n        var jobType = schedule.JobType;\n        return JobBuilder\n            .Create(jobType)\n            .WithIdentity(jobType.FullName)\n            .WithDescription(jobType.Name)\n            .Build();\n    }\n\n    private static ITrigger CreateTrigger(JobSchedule schedule)\n    {\n        return TriggerBuilder\n            .Create()\n            .WithIdentity($\"{schedule.JobType.FullName}.trigger\")\n            .WithCronSchedule(schedule.CronExpression)\n            .WithDescription(schedule.CronExpression)\n            .Build();\n    }\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Quartz;\nusing Quartz.Spi;\n\npublic class QuartzHostedService : IHostedService\n{\n    private readonly ISchedulerFactory _schedulerFactory;\n    private readonly IJobFactory _jobFactory;\n    private readonly IEnumerable<JobSchedule> _jobSchedules;\n\n    public QuartzHostedService(\n        ISchedulerFactory schedulerFactory,\n        IJobFactory jobFactory,\n        IEnumerable<JobSchedule> jobSchedules)\n    {\n        _schedulerFactory = schedulerFactory;\n        _jobSchedules = jobSchedules;\n        _jobFactory = jobFactory;\n    }\n    public IScheduler Scheduler { get; set; }\n\n    public async Task StartAsync(CancellationToken cancellationToken)\n    {\n        Scheduler = await _schedulerFactory.GetScheduler(cancellationToken);\n        Scheduler.JobFactory = _jobFactory;\n\n        foreach (var jobSchedule in _jobSchedules)\n        {\n            var job = CreateJob(jobSchedule);\n            var trigger = CreateTrigger(jobSchedule);\n\n            await Scheduler.ScheduleJob(job, trigger, cancellationToken);\n        }\n\n        await Scheduler.Start(cancellationToken);\n    }\n\n    public async Task StopAsync(CancellationToken cancellationToken)\n    {\n        await Scheduler?.Shutdown(cancellationToken);\n    }\n\n    private static IJobDetail CreateJob(JobSchedule schedule)\n    {\n        var jobType = schedule.JobType;\n        return JobBuilder\n            .Create(jobType)\n            .WithIdentity(jobType.FullName)\n            .WithDescription(jobType.Name)\n            .Build();\n    }\n\n    private static ITrigger CreateTrigger(JobSchedule schedule)\n    {\n        return TriggerBuilder\n            .Create()\n            .WithIdentity($\"{schedule.JobType.FullName}.trigger\")\n            .WithCronSchedule(schedule.CronExpression)\n            .WithDescription(schedule.CronExpression)\n            .Build();\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"QuartzHostedService"}]},{"type":"text","value":" has three dependencies: the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ISchedulerFactory"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJobFactory"}]},{"type":"text","value":" we configured in "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Startup"}]},{"type":"text","value":", and an "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IEnumerable"}]},{"type":"text","value":". We only added a single "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobSchedule"}]},{"type":"text","value":" to the DI container (for the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"HelloWorldJob"}]},{"type":"text","value":"), but if you register more job schedules with the DI container they'll all be injected here."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"StartAsync"}]},{"type":"text","value":" is called when the application starts up and is where we configure Quartz. We start by creating an instance of "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IScheduler"}]},{"type":"text","value":", assigning it to a property for use later, and setting the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobFactory"}]},{"type":"text","value":" for the scheduler to the injected instance:"}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"public async Task StartAsync(CancellationToken cancellationToken)\n{\n    Scheduler = await _schedulerFactory.GetScheduler(cancellationToken);\n    Scheduler.JobFactory = _jobFactory;\n\n    // ...\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public async Task StartAsync(CancellationToken cancellationToken)\n{\n    Scheduler = await _schedulerFactory.GetScheduler(cancellationToken);\n    Scheduler.JobFactory = _jobFactory;\n\n    // ...\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, we loop through the injected job schedules, and create a Quartz "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJobDetail"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ITrigger"}]},{"type":"text","value":" for each one using the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CreateJob"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CreateTrigger"}]},{"type":"text","value":" helper methods at the end of the class. If you don't like how this part works, or need more control over the configuration, you can easily customise it by extending the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobSchedule"}]},{"type":"text","value":" DTO as you see fit."}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"public async Task StartAsync(CancellationToken cancellationToken)\n{\n    // ...\n    foreach (var jobSchedule in _jobSchedules)\n    {\n        var job = CreateJob(jobSchedule);\n        var trigger = CreateTrigger(jobSchedule);\n\n        await Scheduler.ScheduleJob(job, trigger, cancellationToken);\n    }\n    // ...\n}\n\nprivate static IJobDetail CreateJob(JobSchedule schedule)\n{\n    var jobType = schedule.JobType;\n    return JobBuilder\n        .Create(jobType)\n        .WithIdentity(jobType.FullName)\n        .WithDescription(jobType.Name)\n        .Build();\n}\n\nprivate static ITrigger CreateTrigger(JobSchedule schedule)\n{\n    return TriggerBuilder\n        .Create()\n        .WithIdentity($\"{schedule.JobType.FullName}.trigger\")\n        .WithCronSchedule(schedule.CronExpression)\n        .WithDescription(schedule.CronExpression)\n        .Build();\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public async Task StartAsync(CancellationToken cancellationToken)\n{\n    // ...\n    foreach (var jobSchedule in _jobSchedules)\n    {\n        var job = CreateJob(jobSchedule);\n        var trigger = CreateTrigger(jobSchedule);\n\n        await Scheduler.ScheduleJob(job, trigger, cancellationToken);\n    }\n    // ...\n}\n\nprivate static IJobDetail CreateJob(JobSchedule schedule)\n{\n    var jobType = schedule.JobType;\n    return JobBuilder\n        .Create(jobType)\n        .WithIdentity(jobType.FullName)\n        .WithDescription(jobType.Name)\n        .Build();\n}\n\nprivate static ITrigger CreateTrigger(JobSchedule schedule)\n{\n    return TriggerBuilder\n        .Create()\n        .WithIdentity($\"{schedule.JobType.FullName}.trigger\")\n        .WithCronSchedule(schedule.CronExpression)\n        .WithDescription(schedule.CronExpression)\n        .Build();\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, once all the jobs are scheduled, you call "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Scheduler.Start()"}]},{"type":"text","value":" to actually start the Quartz.NET scheduler processing in the background. When the app shuts down, the framework will call "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"StopAsync()"}]},{"type":"text","value":", at which point you can call "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Scheduler.Stop()"}]},{"type":"text","value":" to safely shut down the scheduler process."}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"public async Task StopAsync(CancellationToken cancellationToken)\n{\n    await Scheduler?.Shutdown(cancellationToken);\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public async Task StopAsync(CancellationToken cancellationToken)\n{\n    await Scheduler?.Shutdown(cancellationToken);\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can register the hosted service using the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AddHostedService()"}]},{"type":"text","value":" extension method in "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Startup.ConfigureServices"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddHostedService<QuartzHostedService>();\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddHostedService<QuartzHostedService>();\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you run the application, you should see the background task running every 5 seconds and writing to the Console (or wherever you have logging configured)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Background service writing Hello World to console repeatedly","src":"/images/2019-11-05-quartz/quartz_service.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"using-scoped-services-in-jobs"},"children":[{"type":"text","value":"Using scoped services in jobs"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#using-scoped-services-in-jobs","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"https://andrewlock.net/assets/img/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There's one big problem with the implementation as described in this post: you can only create Singleton or Transient jobs. That means you can't use any dependencies that are registered as Scoped services. For example, you can't inject an EF Core "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DatabaseContext"}]},{"type":"text","value":" into your "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":" implementation, as you'll have a "},{"type":"element","tag":"a","props":{"href":"http://blog.ploeh.dk/2014/06/02/captive-dependency/","rel":["nofollow"]},"children":[{"type":"text","value":"captive dependency"}]},{"type":"text","value":" problem."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Working around this isn't a big issue: you can inject an "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IServiceProvider"}]},{"type":"text","value":" and create your own scope, "},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-in-asp-net-core/#3-creating-a-new-scope-in-iconfigureoptions","rel":["nofollow"]},"children":[{"type":"text","value":"similar to the solution for a similar problem in a previous post"}]},{"type":"text","value":". For example, if you need to use a scoped service in your "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"HelloWorldJob"}]},{"type":"text","value":", you could use something like the following:"}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"public class HelloWorldJob : IJob\n{\n    // Inject the DI provider\n    private readonly IServiceProvider _provider;\n    public HelloWorldJob( IServiceProvider provider)\n    {\n        _provider = provider;\n    }\n\n    public Task Execute(IJobExecutionContext context)\n    {\n        // Create a new scope\n        using(var scope = _provider.CreateScope())\n        {\n            // Resolve the Scoped service\n            var service = scope.ServiceProvider.GetService<IScopedService>();\n            _logger.LogInformation(\"Hello world!\");\n        }\n\n        return Task.CompletedTask;\n    }\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class HelloWorldJob : IJob\n{\n    // Inject the DI provider\n    private readonly IServiceProvider _provider;\n    public HelloWorldJob( IServiceProvider provider)\n    {\n        _provider = provider;\n    }\n\n    public Task Execute(IJobExecutionContext context)\n    {\n        // Create a new scope\n        using(var scope = _provider.CreateScope())\n        {\n            // Resolve the Scoped service\n            var service = scope.ServiceProvider.GetService<IScopedService>();\n            _logger.LogInformation(\"Hello world!\");\n        }\n\n        return Task.CompletedTask;\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This ensures a new scope is created every time the job runs, so you can retrieve (and dispose) scoped services inside the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":". Unfortunately things do get a little messy. In the next post I'll show a variation on this approach that is a little cleaner."}]},{"type":"element","tag":"h2","props":{"id":"summary"},"children":[{"type":"text","value":"Summary"},{"type":"element","tag":"a","props":{"href":"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#summary","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"https://andrewlock.net/assets/img/icons-link.svg"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this post I introduced Quartz.NET and showed how you could use it to schedule background jobs to run in ASP.NET Core using "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IHostedService"}]},{"type":"text","value":". The example shown in this post is best for singleton or transient jobs, which isn't ideal, as consuming scoped services is clumsy. In the next post, I'll show a variation on this approach that makes using scoped services easier."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/andrewlock/blog-examples/tree/master/QuartzHostedService","rel":["nofollow"]},"children":[{"type":"text","value":"Example source code for this post"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/HangfireIO/Cronos","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/HangfireIO/Cronos"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/HangfireIO/Hangfire","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/HangfireIO/Hangfire"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/quartznet/quartznet","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/quartznet/quartznet"}]}]}]},{"type":"element","tag":"h3","props":{"id":"hangfire-与quartznet对比"},"children":[{"type":"text","value":"Hangfire 与quartz.net对比"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在项目没有引入Hangfire之前，一直使用的是Quartz.net。个人认为Quartz.net在定时任务处理方面优势如下："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支持秒级单位的定时任务处理，但是Hangfire只能支持分钟及以上的定时任务处理"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"原因在于Hangfire用的是开源的"},{"type":"element","tag":"a","props":{"href":"https://github.com/atifaziz/NCrontab","rel":["nofollow"]},"children":[{"type":"text","value":"NCrontab"}]},{"type":"text","value":"组件，跟linux上的crontab指令相似。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更加复杂的触发器，日历以及任务调度处理"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可配置的定时任务"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是为什么要换Hangfire? 很大的原因在于项目需要一个后台可监控的应用，不用每次都要从服务器拉取日志查看，在没有ELK的时候相当不方便。Hangfire控制面板不仅提供监控，也可以手动的触发执行定时任务。如果在定时任务处理方面没有很高的要求，比如一定要5s定时执行，Hangfire值得拥有。抛开这些，Hangfire优势太明显了："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"持久化保存任务、队列、统计信息"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"重试机制"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"多语言支持"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支持任务取消"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支持按指定"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Job Queue"}]},{"type":"text","value":"处理任务"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"服务器端工作线程可控，即job执行并发数控制"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"分布式部署，支持高可用"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"良好的扩展性，如支持IOC、Hangfire Dashboard授权控制、Asp.net Core、持久化存储等"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"说了这么多的优点，我们可以有个案例，例如秒杀场景：用户下单->订单生成->扣减库存，Hangfire对于这种分布式的应用处理也是适用的，最后会给出实现。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction-what-is-quartznet","depth":2,"text":"Introduction - what is Quartz.NET?"},{"id":"installing-quartznet","depth":2,"text":"Installing Quartz.NET"},{"id":"creating-an-ijob","depth":2,"text":"Creating an IJob"},{"id":"creating-an-ijobfactory","depth":2,"text":"Creating an IJobFactory"},{"id":"configuring-the-job","depth":2,"text":"Configuring the Job"},{"id":"creating-the-quartzhostedservice","depth":2,"text":"Creating the QuartzHostedService"},{"id":"using-scoped-services-in-jobs","depth":2,"text":"Using scoped services in jobs"},{"id":"summary","depth":2,"text":"Summary","children":[{"id":"hangfire-与quartznet对比","depth":3,"text":"Hangfire 与quartz.net对比"}]}]}},"_type":"markdown","_id":"content:dotnet:2019-11-05-quartz.md","_source":"content","_file":"dotnet/2019-11-05-quartz.md","_extension":"md","date":"2019-11-05"}