{"_path":"/unity/2019-09-01-addressable","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"关于addressable那些事","description":"在本文中将详细的描述Addressable对于内存的管理，如果正确的卸载资源","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在本文中将详细的描述Addressable对于内存的管理，如果正确的卸载资源"}]},{"type":"element","tag":"h2","props":{"id":"镜像资源的加载与卸载"},"children":[{"type":"text","value":"镜像资源的加载与卸载"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Addressables是否能够正确的清理内存主要的取决于是否正确的进行镜像资源的加载与卸载，而如何做到这点又取决于加载的资源的类型与使用加载的方法。"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.Release"}]},{"type":"text","value":"方法可以接受加载到的对象，也可以接受加载时返回的操作句柄("},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AsyncOperationHandle"}]},{"type":"text","value":").比如，进行场景创建时，加载后返回一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AsyncOperationHandle<SceneInstance>"}]},{"type":"text","value":"，你可以通过返回的句柄或者"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"handle.Result"}]},{"type":"text","value":"(在这种情况下返回的Result为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SceneInstance"}]},{"type":"text","value":"对象)进行场景的的释放。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接下来将详细的描述一下不同资源的释放方式及规则。"}]},{"type":"element","tag":"h2","props":{"id":"资源加载"},"children":[{"type":"text","value":"资源加载"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此处的资源指的是使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.LoadAssetAsync"}]},{"type":"text","value":" 或者 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.LoadAssetsAsync"}]},{"type":"text","value":"加载的资源。\n使用上述的两个方法会将资源加载到内存中，但是并不实例化它，每次调用后对应的资源的引用记数都会增加1。如果您使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"LoadAssetAsync"}]},{"type":"text","value":"对同一个“地址”的资源调用了3次，您将会得到三个不同的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AsyncOperationHandle"}]},{"type":"text","value":"的实例，同时这些实例均引用相同的底层操作，对就应的底层操作的引用记数会变成3。如果资源加载成功，加载到的资源将会被存储到"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AsyncOperationHandle.Result"}]},{"type":"text","value":"中，您可以使用Unity的方法进行实例化"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Object.instantite"}]},{"type":"text","value":"，但是这种操作方式不会造成Adressables的引用记数发生变化。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.Release"}]},{"type":"text","value":"方法可以进行卸载，调用后引用记数会减1，一旦资源的引用记数为0，那么它会被彻底的卸载掉。"}]},{"type":"element","tag":"h2","props":{"id":"场景加载"},"children":[{"type":"text","value":"场景加载"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.LoadSceneAsync"}]},{"type":"text","value":"进行场景的加载，同时可以在参数中指定使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Single"}]},{"type":"text","value":"或者"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Additive"}]},{"type":"text","value":"模式，如果指定使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Single"}]},{"type":"text","value":"模式，那么当前所在打开的场景都会被关闭。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.UnloadSceneAsync"}]},{"type":"text","value":"进行场景的卸载，或者打开新场景时使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Single"}]},{"type":"text","value":"模式。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当想要打开一个新场景时可以使用上述Addressables提供的方法或者使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SceneManager.LoadScene"}]},{"type":"text","value":"/"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"SceneManager.LoadSceneAsync"}]},{"type":"text","value":"，一个新场景的打开会关闭当前的场景，那么对应的引用记数也会正确的减少。"}]},{"type":"element","tag":"h2","props":{"id":"gameobject的实例化"},"children":[{"type":"text","value":"GameObject的实例化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GameObject的实例化相对其它的资源有些特殊，在Unity中使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Resources.Load"}]},{"type":"text","value":"其实只是将Prefab的数据加载到了内存中，并未真正的实例化，所以需要再次调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Object.instantite"}]},{"type":"text","value":"才能正确的得到需要的GameObject，在Addressables中也是这样的，不过Addressable提供了一些便利的方法"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.InstantiateAsync"}]},{"type":"text","value":"可以直接得到对应的GameObject。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.InstantiateAsync"}]},{"type":"text","value":"加载一个Prefab时，Addressable会自动实例化，同时在加载的过程中Addressable在加载Prefab的同时也会加载其依赖，将所有的引用记数全部增加。对同一“地址”的资源调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"InstantiateAsync"}]},{"type":"text","value":"三次，将会使其依赖的所有资源的引用记数均增加为3.但是与三次调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"LoadAssetAsync"}]},{"type":"text","value":"不同的是每次调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"InstantiateAsync"}]},{"type":"text","value":"将会得到一个指向同一个操作的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AsyncOperationHandle"}]},{"type":"text","value":",这是因为每一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"InstantiateAsync"}]},{"type":"text","value":"都将得到一个唯一的实例。与其它调用方法的另外一个区别在于"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"InstantiateAsync"}]},{"type":"text","value":"有一个可选参数"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"trackHandle"}]},{"type":"text","value":"，如果将其设置为false，在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AsyncOperationHandle"}]},{"type":"text","value":"释放前，您必须自己保管着此对象，在此期间您可以执行一些操作。这种方法可以提高效率但是需要更多格外的代码来实现。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"关闭实例所在场景或者使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.ReleaseInstance"}]},{"type":"text","value":"可以卸载掉实例化的对象。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果您在加载时将"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"trackHandle"}]},{"type":"text","value":"设置为false,那么您只能通过调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.ReleaseInstance"}]},{"type":"text","value":"并将返回的句柄做为参数，而不能再使用真实的GameObject做为参数进行释放了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"关于"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.ReleaseInstance"}]},{"type":"text","value":"格外的说明：如果调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.ReleaseInstance"}]},{"type":"text","value":"方法来释放一个实例,但是此实例不是由Addressable创建或者说在使用Addressable创建时设置了"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"trackHandle=false"}]},{"type":"text","value":"，此方法调用后将会返回false，以表示Addressable无法释放此实例"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.InstantiateAsync"}]},{"type":"text","value":"方法本身会有一些格外的开销，如果您需要实例化同一个对象很多次，比如说一帧内实例化100个，使用此方法就不再合适，可以考虑使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.LoadAssetAsync"}]},{"type":"text","value":"进行资源的加载，同时自己保存返回的结果，然后再使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GameObject.Instantiate()"}]},{"type":"text","value":"进行实例化，同时当所有的GameObject不再使用后，再通过"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addessables.Release"}]},{"type":"text","value":"方法将保存的结果进行释放。使用此种方法虽然可以提高部分性能，但是需要对其增加格外的管理。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Addressables.InstantiateAsync"}]},{"type":"text","value":"方法本身会有一些格外的开销，如果您需要实例化同一个对象很多次，比如说一帧内实例化100个，可以考虑使用Addressable进行资源的加载"}]},{"type":"element","tag":"h2","props":{"id":"addressable分析工具"},"children":[{"type":"text","value":"Addressable分析工具"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"通过"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Window->Asset Management->Addressable Profiler"}]},{"type":"text","value":"可以打开Addressable的分析工具，在使用此工具前需要将配置中的"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Send Profiler Events"}]},{"type":"text","value":"打开（默认情况下配置文件为Assets/AddressableAssetsData/AddressableAssetSettings)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Send Profiler Events","src":"/images/2019-09-01-addressable/sendprofilerevent.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"窗口中显示了Addressable操作的引用记数，包括加载的AssetBundle及加载的资源等等。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"白色的竖线表示选择的当前的帧"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"蓝色的背景当前加载的资源"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"绿色的部分表示引用记数"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Profiler","src":"/images/2019-09-01-addressable/profiler.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"内存清理时机"},"children":[{"type":"text","value":"内存清理时机"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"即使一个资源的不再被引用也不代表此资源被卸载了，因为一个AssetBundle中可能包含有多个资源，比如：一个名称\"stuff\"的AssetBundle中包含有三个资源\"tree\",“tank”,“cow”，当资源\"tree”被加载后，能够看到\"tree\"的引用记录会是1，同时\"stuff\"的引用记数也是1，接着如果加载了\"tank\"资源，此时\"tree\"与\"tank\"的引用记数均为1，同时\"stuff\"的记数会是2。接下来卸载资源\"tree\"，则\"tree\"的引用记数将会减少为0，在\"Addressable Profiler\"中对应于\"tree\"的记录将会被删除，但是此时由于AssetBundle对应的\"stuff\"并未被卸载，因为还有其它的在使用此AssetBundle。使用AssetBundle时可以从AssetBundle中加载部分内容，但是不能部分卸载AssetBundle，只有AssetBundle中的任何资源都不再被使用时，此AssetBundle才会被卸载"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当使用Unity的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Resources.UnloadUnusedAssets"}]},{"type":"text","value":" (查看"},{"type":"element","tag":"a","props":{"href":"https://docs.unity3d.com/ScriptReference/Resources.UnloadUnusedAssets.html)%E6%97%B6%EF%BC%8C%E4%B8%8A%E8%BF%B0%E6%8F%8F%E8%BF%B0%E4%B8%AD%E7%9A%84%22tree%22%E5%B0%86%E4%BC%9A%E8%A2%AB%E5%8D%B8%E8%BD%BD%E6%8E%89%EF%BC%8C%E4%BD%86%E6%98%AF%E7%94%B1%E4%BA%8E%E6%88%91%E4%BB%AC%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E5%88%B0%E6%AD%A4%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E5%8F%8D%E6%98%A0%E5%BC%95%E7%94%A8%E8%AE%B0%E6%95%B0%E7%9A%84%E5%8F%98%E5%8C%96%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E5%86%85%E5%AD%98%E4%B8%AD%E5%86%85%E5%AE%B9%E7%9A%84%E5%8F%98%E5%8C%96%E3%80%82","rel":["nofollow"]},"children":[{"type":"text","value":"https://docs.unity3d.com/ScriptReference/Resources.UnloadUnusedAssets.html)时，上述描述中的\"tree\"将会被卸载掉，但是由于我们无法检测到此操作，所以我们只能反映引用记数的变化，而不是真正内存中内容的变化。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"需要注意的是：使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Resources.UnloadUnusedAssets"}]},{"type":"text","value":"是一个很费时的操作，一般情况下不建议频繁使用，只有在场景切换时进行调用"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"此段文字有些绕口，简单来说就是由于一个AssetBundle中包含有多个资源，其中的多个资源被加载出来后，只有所有的资源均不再使用时才会正确的卸载掉AssetBundle，同时对于加载出来的资源一般情况下，即使不再使用后也不是立即卸载的，依赖于引擎底层的实现。在Unity中通过使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Resources.UnloadUnusedAssets"}]},{"type":"text","value":"可以将不再使用的资源给卸载掉，但是由于此接口过于耗时，并不推荐频繁使用。可以使用的情况一般有：1 进行场景切换时，2 在某些大资源被销毁时，比如说：某此UI界面占用资源特别多，当此UI界面关闭时可以调用。"}]},{"type":"element","tag":"h3","props":{"id":"一些注意点"},"children":[{"type":"text","value":"一些注意点"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"不要想着用异步加载ui..那会很卡..会出现莫名其妙的事情"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"镜像资源的加载与卸载","depth":2,"text":"镜像资源的加载与卸载"},{"id":"资源加载","depth":2,"text":"资源加载"},{"id":"场景加载","depth":2,"text":"场景加载"},{"id":"gameobject的实例化","depth":2,"text":"GameObject的实例化"},{"id":"addressable分析工具","depth":2,"text":"Addressable分析工具"},{"id":"内存清理时机","depth":2,"text":"内存清理时机","children":[{"id":"一些注意点","depth":3,"text":"一些注意点"}]}]}},"_type":"markdown","_id":"content:unity:2019-09-01-addressable.md","_source":"content","_file":"unity/2019-09-01-addressable.md","_extension":"md","date":"2019-09-01"}