{"_path":"/tool/2019-08-10-powershell-command","_dir":"tool","_draft":false,"_partial":false,"_locale":"","title":"powershell 常用命令","description":"常用命令Get-PSDrive  Windows PowerShell 驱动器是一个数据存储位置，你可以像访问 Windows PowerShell 中的文件系统驱动器那样访问它。Get-Alias 和   ls Alias:(驱动器)     列出所有aliasls Env:(驱动器)    列出所有的环境变量ls Variable:(驱动器) 和 Get-Variable 列出所有的变量ls Function:(驱动器)  列出所有的函数get-command   查看命令信息 可以查看某个命令的path  get-command mysqldumpinvoke-item  向window","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"常用命令"},"children":[{"type":"text","value":"常用命令"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Get-PSDrive  Windows PowerShell 驱动器是一个数据存储位置，你可以像访问 Windows PowerShell 中的文件系统驱动器那样访问它。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Get-Alias 和   ls Alias:(驱动器)     列出所有alias"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ls Env:(驱动器)    列出所有的环境变量"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ls Variable:(驱动器) 和 Get-Variable 列出所有的变量"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ls Function:(驱动器)  列出所有的函数"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"get-command   查看命令信息 可以查看某个命令的path  get-command mysqldump"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"invoke-item  向windows桌面双击操作一样打开某个文件或者目录"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"$env -split \";\"  以列表形式列出所有path"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ls env:    列出env驱动器中的内容"}]},{"type":"element","tag":"li","props":{},"children":[]}]},{"type":"element","tag":"pre","props":{"code":"```powershell\n $path = [environment]::GetEnvironmentvariable(\"path\",\"user\")\n [environment]::SetEnvironmentvariable(\"Path\", $path+\";c:\\powershellscript\", \"User\")\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"```powershell\n $path = [environment]::GetEnvironmentvariable(\"path\",\"user\")\n [environment]::SetEnvironmentvariable(\"Path\", $path+\";c:\\powershellscript\", \"User\")\n"}]}]},{"type":"element","tag":"pre","props":{"code":"\n# Running PowerShell Scripts From C#\n\n使用`-Command`参数，传递简单的字符串。 可以使用`-File`参数,传递一个ps脚本。 如果需要传递复杂（或者可能是换行符）的脚本文本，可以使用`-EncodedCommand`参数，它接受Base64编码的内容。\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n# Running PowerShell Scripts From C#\n\n使用`-Command`参数，传递简单的字符串。 可以使用`-File`参数,传递一个ps脚本。 如果需要传递复杂（或者可能是换行符）的脚本文本，可以使用`-EncodedCommand`参数，它接受Base64编码的内容。\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"void NoError()\n{\nvar command = @\"pwd\";\nvar startInfo = new ProcessStartInfo()\n{\nFileName = \"powershell.exe\",\nArguments = $\"-NoProfile -ExecutionPolicy unrestricted -Command \"{command}\"\",\nUseShellExecute = false\n};\nProcess.Start(startInfo);\n}"}]},{"type":"element","tag":"pre","props":{"code":"\n执行一个ps文件:\n\n```csharp\nvoid NoError()\n{\n    var ps1File = @\"C:\\my script folder\\script.ps1\";\n    var startInfo = new ProcessStartInfo()\n    {\n        FileName = \"powershell.exe\",\n        Arguments = $\"-NoProfile -ExecutionPolicy unrestricted -file \\\"{ps1File}\\\"\",\n        UseShellExecute = false\n    };\n    Process.Start(startInfo);\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n执行一个ps文件:\n\n```csharp\nvoid NoError()\n{\n    var ps1File = @\"C:\\my script folder\\script.ps1\";\n    var startInfo = new ProcessStartInfo()\n    {\n        FileName = \"powershell.exe\",\n        Arguments = $\"-NoProfile -ExecutionPolicy unrestricted -file \\\"{ps1File}\\\"\",\n        UseShellExecute = false\n    };\n    Process.Start(startInfo);\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"先编码执行一个复杂的命令:"}]},{"type":"element","tag":"pre","props":{"code":"void Base64EncodedCommand()\n{\n    var psCommmand = @\"echo \"\"quoted value\"\" \n    echo \"\"Second Line\"\"\n    pause\";\n    var psCommandBytes = System.Text.Encoding.Unicode.GetBytes(psCommmand);\n    var psCommandBase64 = Convert.ToBase64String(psCommandBytes);\n\n    var startInfo = new ProcessStartInfo()\n    {\n        FileName = \"powershell.exe\",\n        Arguments = $\"-NoProfile -ExecutionPolicy unrestricted -EncodedCommand {psCommandBase64}\",\n        UseShellExecute = false\n    };\n    Process.Start(startInfo);\n}\n","language":"csharp","meta":"","className":["language-csharp"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void Base64EncodedCommand()\n{\n    var psCommmand = @\"echo \"\"quoted value\"\" \n    echo \"\"Second Line\"\"\n    pause\";\n    var psCommandBytes = System.Text.Encoding.Unicode.GetBytes(psCommmand);\n    var psCommandBase64 = Convert.ToBase64String(psCommandBytes);\n\n    var startInfo = new ProcessStartInfo()\n    {\n        FileName = \"powershell.exe\",\n        Arguments = $\"-NoProfile -ExecutionPolicy unrestricted -EncodedCommand {psCommandBase64}\",\n        UseShellExecute = false\n    };\n    Process.Start(startInfo);\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"使用c类调用powershell-命令"},"children":[{"type":"text","value":"使用c#类调用powershell 命令"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2019-08-10-powershell-command/image.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接著我們在 Program.cs 檔案引用兩個命名空間如下："}]},{"type":"element","tag":"pre","props":{"code":"using System.Management.Automation;\nusing System.Management.Automation.Runspaces;\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using System.Management.Automation;\nusing System.Management.Automation.Runspaces;\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"大功告成，現在你可以將 PowerShell 指令整合到你的 C# 應用程式中了！"}]},{"type":"element","tag":"pre","props":{"code":"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service | Where-Object { $_.Status -eq 'Stopped' }\");\n\n    foreach (PSObject result in powershell.Invoke())\n    {\n        Console.WriteLine(result.Members[\"Name\"].Value);\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service | Where-Object { $_.Status -eq 'Stopped' }\");\n\n    foreach (PSObject result in powershell.Invoke())\n    {\n        Console.WriteLine(result.Members[\"Name\"].Value);\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"返回字符窜:"}]},{"type":"element","tag":"pre","props":{"code":"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service | Out-String\");\n\n    foreach (string str in powershell.Invoke<string>())\n    {\n        Console.WriteLine(str);\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service | Out-String\");\n\n    foreach (string str in powershell.Invoke<string>())\n    {\n        Console.WriteLine(str);\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"捕捉错误:"}]},{"type":"element","tag":"pre","props":{"code":"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service99\");\n\n    foreach (PSObject result in powershell.Invoke())\n    {\n        Console.WriteLine(result.Members[\"Name\"].Value);\n    }\n\n    Console.WriteLine(\"執行過程中發生錯誤\\n\");\n    PSDataCollection<ErrorRecord> errors = powershell.Streams.Error;\n    if (errors != null && errors.Count > 0)\n    {\n        foreach (ErrorRecord err in errors)\n        {\n            System.Console.WriteLine(\"錯誤: {0}\", err.ToString());\n        }\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service99\");\n\n    foreach (PSObject result in powershell.Invoke())\n    {\n        Console.WriteLine(result.Members[\"Name\"].Value);\n    }\n\n    Console.WriteLine(\"執行過程中發生錯誤\\n\");\n    PSDataCollection<ErrorRecord> errors = powershell.Streams.Error;\n    if (errors != null && errors.Count > 0)\n    {\n        foreach (ErrorRecord err in errors)\n        {\n            System.Console.WriteLine(\"錯誤: {0}\", err.ToString());\n        }\n    }\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"常用命令","depth":3,"text":"常用命令"},{"id":"使用c类调用powershell-命令","depth":3,"text":"使用c#类调用powershell 命令"}]}},"_type":"markdown","_id":"content:tool:2019-08-10-powershell-command.md","_source":"content","_file":"tool/2019-08-10-powershell-command.md","_extension":"md","date":"2019-08-10"}