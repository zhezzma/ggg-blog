{"_path":"/tool/2021-12-02-vscode-plugins-big","_dir":"tool","_draft":false,"_partial":false,"_locale":"","title":"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","description":"前言最近在打包 VS Code 插件时，发现打包后的插件体积非常大，而且插件在 VS Code 中的启动速度非常慢，对用户的体验不太友好了。对此做了一些研究，并更改了打包策略，终于把插件的体积从 35M 减少到 3M，并提高了插件的启动速度。本文将带你分析插件体积过大和启动速度过慢的原因，并讲解如何通过使用 webpack 进行打包来减少插件体积。最后将讲解如何配置 externals 剥离一些依赖模块，减少 bundle 的体积，避免出现打包失败的问题。原始打包首先，我们会以 iceworks-page-builder VS Code 插件为例子进行分析，具体的代码可以点击此链接查看。其中，","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最近在打包 VS Code 插件时，发现打包后的插件体积非常大，而且插件在 VS Code 中的启动速度非常慢，对用户的体验不太友好了。对此做了一些研究，并更改了打包策略，终于把插件的体积从 35M 减少到 3M，并提高了插件的启动速度。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本文将带你分析插件体积过大和启动速度过慢的原因，并讲解如何通过使用 webpack 进行打包来减少插件体积。最后将讲解如何配置 externals 剥离一些依赖模块，减少 bundle 的体积，避免出现打包失败的问题。"}]},{"type":"element","tag":"h2","props":{"id":"原始打包"},"children":[{"type":"text","value":"原始打包"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先，我们会以 iceworks-page-builder VS Code 插件为例子进行分析，具体的代码可以点击"},{"type":"element","tag":"a","props":{"href":"https://link.zhihu.com/?target=https%3A//github.com/ice-lab/iceworks/tree/v0.1.6/extensions/iceworks-page-builder","rel":["nofollow"]},"children":[{"type":"text","value":"此链接"}]},{"type":"text","value":"查看。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其中，部分目录结构说明如下："}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-text\">├── .vscodeignore            # 插件打包时需要忽略的文件\n├── build                     # 构建产物目录\n├── node_modules\n├── package.json\n├── src                       # 插件相关的源代码\n|  ├── extension.ts\n|  ├── services\n|  └── types.d.ts\n├── tsconfig.json\n└── web                       # webview 相关代码 本质是一个 React 项目</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-text\">├── .vscodeignore            # 插件打包时需要忽略的文件\n├── build                     # 构建产物目录\n├── node_modules\n├── package.json\n├── src                       # 插件相关的源代码\n|  ├── extension.ts\n|  ├── services\n|  └── types.d.ts\n├── tsconfig.json\n└── web                       # webview 相关代码 本质是一个 React 项目</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"打包插件需要使用 "},{"type":"element","tag":"a","props":{"href":"https://link.zhihu.com/?target=https%3A//github.com/microsoft/vscode-vsce","rel":["nofollow"]},"children":[{"type":"text","value":"vsce"}]},{"type":"text","value":" 这个工具。 首先确认已安装 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vsce"}]},{"type":"text","value":" ；若未安装，则执行以下的命令安装 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vsce"}]},{"type":"text","value":" ："}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-text\">npm i vsce -g</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-text\">npm i vsce -g</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在项目的根目录下执行以下命令，即开始对插件进行打包："}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-text\">vsce package</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-text\">vsce package</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"它会先执行 scripts 中的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vscode:prepublish"}]},{"type":"text","value":" 命令。从上面可以看出，会先对 Webview 相关的代码进行构建（本质是 CLI 提供的构建能力），得到 js 、html 、css 代码，然后使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"tsc"}]},{"type":"text","value":" 对插件源代码（./src/**）进行编译。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"等待 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vscode:prepublish"}]},{"type":"text","value":" 执行完成后， "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vsce"}]},{"type":"text","value":" 将执行剩下的插件打包操作，最后会在项目根目录下出现一个 .vsix 文件，也就是我们成功打包出来的插件。现在，整个插件的体积是 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"35M"}]},{"type":"text","value":"，在 VS Code 中启动速度大概为 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"8s"}]},{"type":"text","value":"。插件启动效果图如下："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-fbf1b8f5b23a29b359d922f428152455_b.webp"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那我们有办法知道究竟是哪些文件导致这个 .vsix 文件这么大的吗？答案是有的。我们只需要把 .vsix 的后缀改成 .zip，然后把这个 zip 文件进行解压，即可看到整个插件是由哪些文件构成了。"}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-text\">workspace/ice/iceworks/extensions/iceworks-page-builder/iceworks-page-builder-0.1.7\n└── extension\n   ├── CHANGELOG.md\n   ├── README.en.md\n   ├── README.md\n   ├── assets\n   ├── build                     # 1.86M\n        ├── assets\n      ├── css\n        |   └── index.css\n      ├── extension.js\n      ├── favicon.png\n      ├── index.html\n      ├── js\n      |  └── index.js\n      └── services\n         └── index.js\n   ├── node_modules              # 69.6M\n   ├── package.json\n   ├── package.nls.json\n   └── package.nls.zh-cn.json</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-text\">workspace/ice/iceworks/extensions/iceworks-page-builder/iceworks-page-builder-0.1.7\n└── extension\n   ├── CHANGELOG.md\n   ├── README.en.md\n   ├── README.md\n   ├── assets\n   ├── build                     # 1.86M\n        ├── assets\n      ├── css\n        |   └── index.css\n      ├── extension.js\n      ├── favicon.png\n      ├── index.html\n      ├── js\n      |  └── index.js\n      └── services\n         └── index.js\n   ├── node_modules              # 69.6M\n   ├── package.json\n   ├── package.nls.json\n   └── package.nls.zh-cn.json</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以看出其中的 node_modules 目录的体积是最大的，这是导致插件体积过大的问题。另外，build 目录和node_modules 目录下有很多模块，正是如此，VS Code 在加载我们的插件的过程中，会加载很多小模块，这就是加载过慢的原因。"}]},{"type":"element","tag":"h2","props":{"id":"使用-webpack-进行打包"},"children":[{"type":"text","value":"使用 webpack 进行打包"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"相信大部分的前端开发者都知道，现在的模块化的前端开发范式非常流行，与此同时出现了很多模块构建工具，比如 Rollup、webpack 等。这些模块构建工具的出发点之一是，把多个模块打包成一个模块，解决加载多个模块速度过慢的问题。那我们能不能用这些构建工具，把多个小的源文件打包成单个入口文件，从而解决上述的问题呢？答案是肯定的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先我们需要安装一下 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack-cli"}]},{"type":"text","value":" ，其中， "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack"}]},{"type":"text","value":" 是 Webpack 的核心模块， "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack-cli"}]},{"type":"text","value":" 是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack"}]},{"type":"text","value":" 的 CLI 程序，用来在命令行中调用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack"}]},{"type":"text","value":" 。另外还需要安装 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ts-loader"}]},{"type":"text","value":" ，用于加载 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ts"}]},{"type":"text","value":" 代码并编译成 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"js"}]},{"type":"text","value":" 代码。"}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-text\">npm i --save-dev webpack webpack-cli ts-loader</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-text\">npm i --save-dev webpack webpack-cli ts-loader</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"安装完成以后，我们需要在根目录下新建一个 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack.config.js"}]},{"type":"text","value":" ，并增加以下的内容："}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-js\">const path = require('path');\n\nconst tsConfigPath = path.join(__dirname, 'tsconfig.json');\n\nconst config = {\n  target: 'node',\n  entry: './src/extension.ts',\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: 'extension.js',\n    libraryTarget: 'commonjs2',\n    devtoolModuleFilenameTemplate: '../[resource-path]',\n  },\n  externals: {\n    vscode: 'commonjs vscode'\n  },\n  resolve: {\n    extensions: ['.ts', '.js'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              configFile: tsConfigPath,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n\nmodule.exports = (env, argv) => {\n  if (argv.mode === 'development') {\n    config.devtool = 'source-map';\n  }\n\n  return config;\n};</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-js\">const path = require('path');\n\nconst tsConfigPath = path.join(__dirname, 'tsconfig.json');\n\nconst config = {\n  target: 'node',\n  entry: './src/extension.ts',\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: 'extension.js',\n    libraryTarget: 'commonjs2',\n    devtoolModuleFilenameTemplate: '../[resource-path]',\n  },\n  externals: {\n    vscode: 'commonjs vscode'\n  },\n  resolve: {\n    extensions: ['.ts', '.js'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              configFile: tsConfigPath,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n\nmodule.exports = (env, argv) => {\n  if (argv.mode === 'development') {\n    config.devtool = 'source-map';\n  }\n\n  return config;\n};</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"修改 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"package.json"}]},{"type":"text","value":" 中 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"scripts"}]},{"type":"text","value":" 的内容，以使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack"}]},{"type":"text","value":" 进行打包："}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-json\">{\n    \"scripts\": {\n    \"vscode:prepublish\": \"rm -rf build && npm run build:web && webpack --mode production\",\n    \"build:web\": \"cd web && npm run build\",\n    \"watch:web\": \"cd web && npm run start\",\n    \"webpack\": \"webpack --mode development\",\n    \"webpack-dev\": \"webpack --mode development --watch\"\n  },\n}</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-json\">{\n    \"scripts\": {\n    \"vscode:prepublish\": \"rm -rf build && npm run build:web && webpack --mode production\",\n    \"build:web\": \"cd web && npm run build\",\n    \"watch:web\": \"cd web && npm run start\",\n    \"webpack\": \"webpack --mode development\",\n    \"webpack-dev\": \"webpack --mode development --watch\"\n  },\n}</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由于经过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack"}]},{"type":"text","value":" 打包后， bundle 中都已经包括了需要的模块。我们可以修改 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".vscodeignore"}]},{"type":"text","value":" 的内容，把插件打包中不需要的文件忽略掉，当然我们的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node_modules"}]},{"type":"text","value":" 也可以忽略掉："}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-text\">.vscode\nnode_modules\nsrc/\nweb/\ntsconfig.json\nwebpack.config.js</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-text\">.vscode\nnode_modules\nsrc/\nweb/\ntsconfig.json\nwebpack.config.js</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以上的相关配置可以点击"},{"type":"element","tag":"a","props":{"href":"https://link.zhihu.com/?target=https%3A//github.com/ice-lab/iceworks/tree/v0.3.0/extensions/iceworks-page-builder","rel":["nofollow"]},"children":[{"type":"text","value":"此链接"}]},{"type":"text","value":"进行查看。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在官方文档中，有一个章节专门讲解了如何使用 webpack 对插件进行打包。更详细的步骤可以参考"},{"type":"element","tag":"a","props":{"href":"https://link.zhihu.com/?target=https%3A//code.visualstudio.com/api/working-with-extensions/bundling-extension","rel":["nofollow"]},"children":[{"type":"text","value":"文档"}]},{"type":"text","value":"。**"}]},{"type":"element","tag":"h2","props":{"id":"使用-externals-减少-bundle-体积"},"children":[{"type":"text","value":"使用 externals 减少 bundle 体积"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当配制好 webpack 相关配置，使用 webpack 打包构建插件时，出现以下的错误："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-0281fdef1bde4672c98eb45a0367ad36_1440w.jpg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"大概的问题是，使用 webpack 在生产环境下进行打包时，会使用 "},{"type":"element","tag":"a","props":{"href":"https://link.zhihu.com/?target=https%3A//github.com/terser/terser","rel":["nofollow"]},"children":[{"type":"text","value":"terser"}]},{"type":"text","value":" 对源码进行压缩。但是我们的 bundle 太大了（预计 bundle 的大小超过10M的时候），导致在压缩的过程中出现内存溢出的问题。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"webpack-bundle-analyzer"}]},{"type":"text","value":" 来分析 bundle 的组成。 bundle 的依赖模块组成具体如下图："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-1214a43d4854d3899346cd1f6a91b168_1440w.jpg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以看出我们项目依赖的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"prettier"}]},{"type":"text","value":" 占用了 bundle 中非常大的体积。那我们现在需要借助 webpack 中的 externals，不要把该依赖打包到 bundle 中，而是作为一个外部扩展，在运行时再去从外部获取依赖。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们可以先在 webpack.config.js 中配置 externals :"}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-js\">module.exports = {\n  externals: {\n    vscode: 'commonjs vscode',\n  + prettier: 'commonjs prettier'\n  },\n}</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-js\">module.exports = {\n  externals: {\n    vscode: 'commonjs vscode',\n  + prettier: 'commonjs prettier'\n  },\n}</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"确保插件在打包的时候，相关依赖也存在于插件中，需要在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".vscodeignore"}]},{"type":"text","value":" 文件中加入以下内容（这里真的踩了坑了）："}]},{"type":"element","tag":"pre","props":{"code":"<code class=\"language-text\">!node_modules/prettier</code>\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<code class=\"language-text\">!node_modules/prettier</code>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"配置完成后，再进行打包，最后打包的插件体积为 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"3.6M"}]},{"type":"text","value":"，在 VS Code 中启动速度降到了 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"1s"}]},{"type":"text","value":" ，效果图如下："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-7fa4f670dae3d7e42f8b8e62e041289d_b.jpg"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"总结"},"children":[{"type":"text","value":"总结"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果大家在打包 VS Code 插件时，如果打包出来的插件的体积过大，不妨可以考虑使用 webpack 对你的 VS Code 插件进行打包，会让你的插件有更小的体积，更快的启动速度，更好的用户体验。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"前言","depth":2,"text":"前言"},{"id":"原始打包","depth":2,"text":"原始打包"},{"id":"使用-webpack-进行打包","depth":2,"text":"使用 webpack 进行打包"},{"id":"使用-externals-减少-bundle-体积","depth":2,"text":"使用 externals 减少 bundle 体积"},{"id":"总结","depth":2,"text":"总结"}]}},"_type":"markdown","_id":"content:tool:2021-12-02-vscode-plugins-big.md","_source":"content","_file":"tool/2021-12-02-vscode-plugins-big.md","_extension":"md","date":"2021-12-02"}