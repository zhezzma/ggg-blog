{"_path":"/unity/2020-11-16-dotssample","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"ability","description":"首先ability总是和item或者character结合在一起的","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"ability"},"children":[{"type":"text","value":"ability"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先ability总是和item或者character结合在一起的"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以下Authoring 会为ability加上不同的组件"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AbilityAutoRifleAuthoring"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AbilityMovementAuthoring"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AbilitySprintAuthoring"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AbilityDeadAuthoring"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AbilitySelectSlotAuthoring"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AbilityMeleeAuthoring"}]}]},{"type":"element","tag":"pre","props":{"code":"EntityManager.CreateArchetype(\ntypeof(Ability.AbilityControl),  //控制器\ntypeof(Ability.AbilityTag), //技能tag( Melee,Movement,AutoRifle, SelectSlot,Dead,Sprint)\ntypeof(Ability.AbilityAction),  //技能动作(None,PrimaryFire,SecondaryFire,Reloading,Melee,NumActions)会通过Item关联具体值\ntypeof(settings),  // 技能的配置\ntypeof(state), // 技能状态  \ntypeof(PredictedState),  // 预测状态\ntypeof(InterpolatedState), // 插值状态\n);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"EntityManager.CreateArchetype(\ntypeof(Ability.AbilityControl),  //控制器\ntypeof(Ability.AbilityTag), //技能tag( Melee,Movement,AutoRifle, SelectSlot,Dead,Sprint)\ntypeof(Ability.AbilityAction),  //技能动作(None,PrimaryFire,SecondaryFire,Reloading,Melee,NumActions)会通过Item关联具体值\ntypeof(settings),  // 技能的配置\ntypeof(state), // 技能状态  \ntypeof(PredictedState),  // 预测状态\ntypeof(InterpolatedState), // 插值状态\n);\n"}]}]},{"type":"element","tag":"h2","props":{"id":"abilitycollection"},"children":[{"type":"text","value":"AbilityCollection"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"AbilityEntry"}]},{"type":"text","value":"是一个IBufferElementData.存储了多个ability"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"定义了技能类型,能和什么类型一起运行,会打断什么类型"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一个技能可能会有多个触发button,比如一把枪,会有开火键和装弹键"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"UpdateAbilityOwnership系统.. 填充character的OwnedCollection组件.分别为自己和item"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"再根据OwnedCollection填充ownedAbilities"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PrepareOwnerForAbilityUpdate系统"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"检查ability是否启用.未启用则删除"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"SelectActiveBehavior系统"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"选择激活一个ability"}]},{"type":"element","tag":"h1","props":{"id":"item"},"children":[{"type":"text","value":"Item"}]},{"type":"element","tag":"pre","props":{"code":"EntityManager.CreateArchetype(\ntypeof(Item.InputState),  //输入状态\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个item可能有多个技能\n);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"EntityManager.CreateArchetype(\ntypeof(Item.InputState),  //输入状态\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个item可能有多个技能\n);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Item.Initialize会查找所有拥有(Inventory.ItemEntry)的实体(就是character)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后将item添加到character的Inventory.ItemEntry组件的buff中."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"将item和character关联起来"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Inventory.update系统"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比较activeslot和lastactiveinventoryslot.来在item上添加和删除PartOwner.Visible组件"}]},{"type":"element","tag":"h1","props":{"id":"character"},"children":[{"type":"text","value":"Character"}]},{"type":"element","tag":"pre","props":{"code":"EntityManager.CreateArchetype(\ntypeof(Settings),  //角色设置\ntypeof(InterpolatedData), // 插值数据\ntypeof(PredictedData),//预测数据\ntypeof(ReplicatedData),// 角色类型\n\ntypeof(Player.OwnerPlayerId.Default),// 拥有者id\ntypeof(PlayerControlled.State),// 玩家控制器状态\ntypeof(HitColliderOwner.State),  //碰撞器状态\n\n//Inventory\ntypeof(Inventory.ItemEntry)   //一个item的buff\ntypeof(Inventory.State)   //状态..激活的是哪一个item\ntypeof(Inventory.InternalState)  //最后激活的item\n\n//生命和伤害\ntypeof(HealthStateData),\ntypeof(DamageEvent), //注意是个buff\ntypeof(DamageHistoryData),  \n\n//ability\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个角色可能有多个能力\ntypeof(AbilityOwner.State),//技能拥有者状态\ntypeof(AbilityOwner.OwnedCollection),//技能拥有者是个buff  拥有者有可能是角色也有可能是item\ntypeof(AbilityOwner.OwnedAbility),//拥有的所有技能,包括角色和item的\n\n\n\n\n\n//角色控制器数据\ntypeof(CharacterControllerComponentData),  // 一些角色控制器数据\ntypeof(CharacterControllerInitializationData),   //碰撞盒数据\ntypeof(CharacterControllerVelocity),\ntypeof(CharacterControllerMoveQuery),\ntypeof(CharacterControllerMoveResult),\ntypeof(CharacterControllerGroundSupportData),\n\n\n\n);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"EntityManager.CreateArchetype(\ntypeof(Settings),  //角色设置\ntypeof(InterpolatedData), // 插值数据\ntypeof(PredictedData),//预测数据\ntypeof(ReplicatedData),// 角色类型\n\ntypeof(Player.OwnerPlayerId.Default),// 拥有者id\ntypeof(PlayerControlled.State),// 玩家控制器状态\ntypeof(HitColliderOwner.State),  //碰撞器状态\n\n//Inventory\ntypeof(Inventory.ItemEntry)   //一个item的buff\ntypeof(Inventory.State)   //状态..激活的是哪一个item\ntypeof(Inventory.InternalState)  //最后激活的item\n\n//生命和伤害\ntypeof(HealthStateData),\ntypeof(DamageEvent), //注意是个buff\ntypeof(DamageHistoryData),  \n\n//ability\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个角色可能有多个能力\ntypeof(AbilityOwner.State),//技能拥有者状态\ntypeof(AbilityOwner.OwnedCollection),//技能拥有者是个buff  拥有者有可能是角色也有可能是item\ntypeof(AbilityOwner.OwnedAbility),//拥有的所有技能,包括角色和item的\n\n\n\n\n\n//角色控制器数据\ntypeof(CharacterControllerComponentData),  // 一些角色控制器数据\ntypeof(CharacterControllerInitializationData),   //碰撞盒数据\ntypeof(CharacterControllerVelocity),\ntypeof(CharacterControllerMoveQuery),\ntypeof(CharacterControllerMoveResult),\ntypeof(CharacterControllerGroundSupportData),\n\n\n\n);\n"}]}]},{"type":"element","tag":"h1","props":{"id":"part"},"children":[{"type":"text","value":"part"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Part 模块是抽象\"部分关系\"的一种存在, 不过具体到实现来说, 就是可以用来管理角色模型, 武器模型(以及其LOD), 以角色配置为例说明下述具体用法"}]},{"type":"element","tag":"pre","props":{"code":"EntityManager.CreateArchetype(\ntypeof(Part.Owner),  //部件拥有者\ntypeof(TerraformerWeaponPart.AutoringData)  //声音\ntypeof(TerraformerWeaponPart.AuthoringClass)  //材质,特效之类的\ntypeof(TerraformerWeaponPart.State)  //状态\n);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"EntityManager.CreateArchetype(\ntypeof(Part.Owner),  //部件拥有者\ntypeof(TerraformerWeaponPart.AutoringData)  //声音\ntypeof(TerraformerWeaponPart.AuthoringClass)  //材质,特效之类的\ntypeof(TerraformerWeaponPart.State)  //状态\n);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"同样的item和character都可以拥有part"}]},{"type":"element","tag":"h1","props":{"id":"local-player"},"children":[{"type":"text","value":"local player"}]},{"type":"element","tag":"pre","props":{"code":"EntityManager.CreateArchetype(\ntypeof(Player.State)  \ntypeof(UserCommand)    //是个buff\ntypeof(LocalPlayer)  \ntypeof(LocalPlayerCharacterControl.State)\n\ntypeof(AbilityUIElement)\ntypeof(PresentationElement)\ntypeof(PlayerCameraControl.State)\n);\n\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"EntityManager.CreateArchetype(\ntypeof(Player.State)  \ntypeof(UserCommand)    //是个buff\ntypeof(LocalPlayer)  \ntypeof(LocalPlayerCharacterControl.State)\n\ntypeof(AbilityUIElement)\ntypeof(PresentationElement)\ntypeof(PlayerCameraControl.State)\n);\n\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先看"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CharacterAuthoring"}]},{"type":"text","value":"然后我们就知道.一个character到底有哪些东东了"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"//Assets/Unity.Sample.Terraformer/Prefabs/Characters/Terraformer/Char_Terraformer.prefab"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"SpawnCharacter"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ItemAuthoring"}]},{"type":"element","tag":"h1","props":{"id":"palyer-实例化流程"},"children":[{"type":"text","value":"palyer 实例化流程"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端连接的时候,服务端PlayerModuleServer.CreatePlayerEntity 创建player实体"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"服务端根据GameMode,创建角色GameModeSystemServer.Update()"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端创建localplayer.并根据系统将localplayer和character和player进行绑定"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"abilitycollection","depth":2,"text":"AbilityCollection"}]}},"_type":"markdown","_id":"content:unity:2020-11-16-dotssample.md","_source":"content","_file":"unity/2020-11-16-dotssample.md","_extension":"md","date":"2020-11-16"}