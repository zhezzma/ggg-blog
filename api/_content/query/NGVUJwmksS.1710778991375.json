{"_path":"/dotnet/2020-02-10-icloneable","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"C# 深浅复制","description":"关于深浅复制大家可参考MSDN：https://msdn.microsoft.com/zh-cn/library/system.object.memberwiseclone.aspx","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"关于深浅复制大家可参考MSDN："},{"type":"element","tag":"a","props":{"href":"https://msdn.microsoft.com/zh-cn/library/system.object.memberwiseclone.aspx","rel":["nofollow"]},"children":[{"type":"text","value":"https://msdn.microsoft.com/zh-cn/library/system.object.memberwiseclone.aspx"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所谓深浅复制可解读为："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"浅复制：C#语言种的MemberwiseClone方法仅仅是再内存种创建一个新对象，然后将原有对象的所有字段直接复制过去，无论是值类型还是引用类型，是值类型的就复制值类型，是应用类型的就复制引用本身（而不会复制所引用的对象），因此，是浅拷贝。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"需要注意的是:  在利用MemberwiseClone()创建新对象的时候，不会像利用new的时候一样，也就是不会先执行字段的创建和构造方法条用的过程。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"深复制：如果字段是值类型的，则对字段执行逐位复制，如果字段是引用类型的，则把引用类型的对象指向"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"一个全新的对象！"}]}]},{"type":"element","tag":"h2","props":{"id":"icloneable接口"},"children":[{"type":"text","value":"ICloneable接口"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ICloneable接口包含一个Clone方法，可以用来创建当前对象的拷贝。"}]},{"type":"element","tag":"pre","props":{"code":"public interface ICloneable \n{ \n    object Clone(); \n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public interface ICloneable \n{ \n    object Clone(); \n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ICloneable的问题是Clone方法并不会显式地指定是执行浅拷贝或深拷贝，因此调用者将无法确定实际情况。因此，有一些关于把ICloneable从.NET框架中淘汰的讨论。MSDN文档似乎暗示Clone方法是进行的深拷贝，但是文档没有明确的说明："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ICloneable接口包含一个成员方法，Clone，意在支持超过MemberWiseClone所提供的功能... MemberWiseClone进行的是浅拷贝..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"类型安全的克隆"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ICloneable的另一个缺点是Clone方法返回的是一个对象，因此每次调用Clone都要进行一次强制类型转换。"}]},{"type":"element","tag":"pre","props":{"code":"Person joe = new Person(); \njoe.Name = \"Joe Smith\"; \nPerson joeClone = (Person)joe.Clone();\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Person joe = new Person(); \njoe.Name = \"Joe Smith\"; \nPerson joeClone = (Person)joe.Clone();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一种可以避免进行强制类型转换的方式是提供你自己的类型安全的Clone方法。注意，你依然要提供ICloneable.Clone方法的以满足iCloneable接口的要求。"}]},{"type":"element","tag":"pre","props":{"code":"public class Person : ICloneable \n{ \n    public string Name; \n    object ICloneable.Clone() \n    { \n        return this.Clone(); \n    } \n    public Person Clone() \n    { \n        return (Person)this.MemberwiseClone(); \n    } \n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Person : ICloneable \n{ \n    public string Name; \n    object ICloneable.Clone() \n    { \n        return this.Clone(); \n    } \n    public Person Clone() \n    { \n        return (Person)this.MemberwiseClone(); \n    } \n}\n"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"手工克隆"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一个能够保证对象完全按照你所想的那样进行克隆的方式是手工克隆对象的每一个域（field）。这种方式的缺点是麻烦而且容易出错：如果你在类中增 加了一个域，你很可能会忘记更新Clone方法。还要在克隆引用对象指向原始对象的时候，注意避免无限循环引用。下面是一个进行深拷贝的简单例子："}]},{"type":"element","tag":"pre","props":{"code":"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        Person p = new Person(); \n        p.Name = this.Name; \n        if (this.Spouse != null) \n            p.Spouse = (Person)this.Spouse.Clone(); \n        return p; \n    } \n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        Person p = new Person(); \n        p.Name = this.Name; \n        if (this.Spouse != null) \n            p.Spouse = (Person)this.Spouse.Clone(); \n        return p; \n    } \n}\n"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用MemberWiseClone方法"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MemberWiseClone是Object类的受保护方法，能够通过创建一个新对象，并把所有当前对象中的非静态域复制到新对象中，从而创建一 个浅拷贝。对于值类型的域，进行的是按位拷贝。对于引用类型的域，引用会被赋值而引用的对象则不会。因此，原始对象及其克隆都会引用同一个对象。注意，这 种方法对派生类都是有效的，也就是说，你只需在基类中定义一次Clone方法。下面是一个简单的例子："}]},{"type":"element","tag":"pre","props":{"code":"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        return this.MemberwiseClone(); \n    } \n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        return this.MemberwiseClone(); \n    } \n}\n"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"用反射进行克隆"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"用反射进行克隆是使用Activator.CreateInstance方法来创建一个相同类型的新对象，然后用反射对所有域进行浅拷贝。这种方法 的优点是它是全自动的，不需要在对象中添加或删除成员的时候修改克隆方法。另外它也能被写成提供深拷贝的方法。缺点是使用了反射，因此会比较慢，而且在部 分受信任的环境中是不可用的。示例代码"}]},{"type":"element","tag":"pre","props":{"code":"private static TOut TransReflection<TIn, TOut>(TIn tIn)\n        {\n            TOut tOut = Activator.CreateInstance<TOut>();\n            var tInType = tIn.GetType();\n            foreach (var itemOut in tOut.GetType().GetProperties())\n            {\n                var itemIn = tInType.GetProperty(itemOut.Name); ;\n                if (itemIn != null)\n                {\n                    itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n                }\n            }\n            return tOut;\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"private static TOut TransReflection<TIn, TOut>(TIn tIn)\n        {\n            TOut tOut = Activator.CreateInstance<TOut>();\n            var tInType = tIn.GetType();\n            foreach (var itemOut in tOut.GetType().GetProperties())\n            {\n                var itemIn = tInType.GetProperty(itemOut.Name); ;\n                if (itemIn != null)\n                {\n                    itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n                }\n            }\n            return tOut;\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"调用一百万次耗时：2464毫秒"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用序列化进行克隆"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"克隆一个对象的最简单的方法是将它序列化并立刻反序列化为一个新对象。和反射方法一样，序列化方法是自动的，无需在对对象成员进行增删的时候做出修 改。缺点是序列化比其他方法慢，甚至比用反射还慢，所有引用的对象都必须是可序列化的（Serializable）。另外，取决于你所使用的序列化的类型 （XML，SOAP，二进制）的不同，私有成员可能不能像期望的那样被克隆。示例代码在这里，这里和这里。"}]},{"type":"element","tag":"pre","props":{"code":"StudentSecond ss= JsonConvert.DeserializeObject<StudentSecond>(JsonConvert.SerializeObject(s));\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"StudentSecond ss= JsonConvert.DeserializeObject<StudentSecond>(JsonConvert.SerializeObject(s));\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"**调用一百万次耗时：**2984毫秒"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://wiki.unity3d.com/index.php/ObjectCopier","rel":["nofollow"]},"children":[{"type":"text","value":"http://wiki.unity3d.com/index.php/ObjectCopier"}]}]},{"type":"element","tag":"pre","props":{"code":"using System;\nusing System.Collections;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.IO;\n \n/// <summary>\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// \n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// </summary>\npublic static class ObjectCopier\n{\n    /// <summary>\n    /// Perform a deep Copy of the object.\n    /// </summary>\n    /// <typeparam name=\"T\">The type of object being copied.</typeparam>\n    /// <param name=\"source\">The object instance to copy.</param>\n    /// <returns>The copied object.</returns>\n    public static T Clone<T>(this T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\"The type must be serializable.\", \"source\");\n        }\n \n        // Don't serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n \n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n     }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using System;\nusing System.Collections;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.IO;\n \n/// <summary>\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// \n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// </summary>\npublic static class ObjectCopier\n{\n    /// <summary>\n    /// Perform a deep Copy of the object.\n    /// </summary>\n    /// <typeparam name=\"T\">The type of object being copied.</typeparam>\n    /// <param name=\"source\">The object instance to copy.</param>\n    /// <returns>The copied object.</returns>\n    public static T Clone<T>(this T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\"The type must be serializable.\", \"source\");\n        }\n \n        // Don't serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n \n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n     }\n}\n"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用IL进行克隆"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一种罕见的解决方案是使用IL（中间语言）来进行对象克隆。这种方式创建一个动态方法（DynamicMethod），获取中间语言生成器 （ILGenerator），向方法中注入代码，把它编译成一个委托，然后执行这个委托。委托会被缓存，因此中间语言只在初次克隆的时候才会生成，后续的 克隆都不会重新生成一遍。尽管这种方法比使用反射快，但是这种方法难以理解和维护。示例代码"}]},{"type":"element","tag":"pre","props":{"code":"　 public static class TransExpV2<TIn, TOut>\n    {\n\n        private static readonly Func<TIn, TOut> cache = GetFunc();\n        private static Func<TIn, TOut> GetFunc()\n        {\n            ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n            List<MemberBinding> memberBindingList = new List<MemberBinding>();\n\n            foreach (var item in typeof(TOut).GetProperties())\n            {\n　　　　　　　　　if (!item.CanWrite)\n　　　　　　　　　　    continue;\n\n                MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n                MemberBinding memberBinding = Expression.Bind(item, property);\n                memberBindingList.Add(memberBinding);\n            }\n\n            MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n            Expression<Func<TIn, TOut>> lambda = Expression.Lambda<Func<TIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n\n            return lambda.Compile();\n        }\n\n        public static TOut Trans(TIn tIn)\n        {\n            return cache(tIn);\n        }\n\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"　 public static class TransExpV2<TIn, TOut>\n    {\n\n        private static readonly Func<TIn, TOut> cache = GetFunc();\n        private static Func<TIn, TOut> GetFunc()\n        {\n            ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n            List<MemberBinding> memberBindingList = new List<MemberBinding>();\n\n            foreach (var item in typeof(TOut).GetProperties())\n            {\n　　　　　　　　　if (!item.CanWrite)\n　　　　　　　　　　    continue;\n\n                MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n                MemberBinding memberBinding = Expression.Bind(item, property);\n                memberBindingList.Add(memberBinding);\n            }\n\n            MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n            Expression<Func<TIn, TOut>> lambda = Expression.Lambda<Func<TIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n\n            return lambda.Compile();\n        }\n\n        public static TOut Trans(TIn tIn)\n        {\n            return cache(tIn);\n        }\n\n    }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"调用："},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"StudentSecond ss= TransExpV2.Trans(s);"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"*"},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"调用一百万次耗时：107毫秒*"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"使用扩展方法进行克隆"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Havard Stranden用扩展方法（extention method）创建了一个自定义的克隆框架。这个框架能够创建对象及其引用的对象的深拷贝，不管对象结构有多复杂。缺点是，这是一个不提供源代码的自定义 框架（更新：现在已经包括源代码了，参见本文评论），并且它不能在不使用无参数构造器的时候，拷贝由私有方法创建的对象。另一个问题，也是所有自动化的深 克隆方法共有的问题是，深拷贝通常需要灵活地处理不能进行简单自动化特殊情况（例如未受管理的资源）。"}]},{"type":"element","tag":"h3","props":{"id":"一个测试类"},"children":[{"type":"text","value":"一个测试类"}]},{"type":"element","tag":"pre","props":{"code":"\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\nnamespace dotnet_samples_test\n{\n\n    public class Person : ICloneable \n    {\n        public IdInfo IdInfo;\n        public int Age { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public List<string> Phones { get; set; } = new List<string>();\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public Person ShallowCopy()\n        {\n            return (Person)this.Clone();\n        }\n\n        public Person DeepCopy()\n        {\n            var result =  (Person)this.Clone();\n            result.IdInfo = result.IdInfo.DeepCopy();\n            result.Phones = result.Phones.ToList();\n            return result;\n        }\n    }\n\n\n    public class IdInfo\n    {\n        public int IdNumber;\n        public IdInfo(int IdNumber)\n        {\n            this.IdNumber = IdNumber;\n        }\n\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public IdInfo ShallowCopy()\n        {\n            return (IdInfo)this.Clone();\n        }\n\n        public IdInfo DeepCopy()\n        {\n            var result =  (IdInfo)this.Clone();\n\n            return result;\n        }\n\n    }\n\n\n\n\n\n    [TestClass]\n    public class CloneTest1\n    {\n        [TestMethod]\n        public void TestMethod1()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List<string> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.ShallowCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            person2.Name=\"冈本伊朗\";\n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n                      Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n\n        [TestMethod]\n        public void TestMethod2()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List<string> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.DeepCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            \n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n            Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\nnamespace dotnet_samples_test\n{\n\n    public class Person : ICloneable \n    {\n        public IdInfo IdInfo;\n        public int Age { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public List<string> Phones { get; set; } = new List<string>();\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public Person ShallowCopy()\n        {\n            return (Person)this.Clone();\n        }\n\n        public Person DeepCopy()\n        {\n            var result =  (Person)this.Clone();\n            result.IdInfo = result.IdInfo.DeepCopy();\n            result.Phones = result.Phones.ToList();\n            return result;\n        }\n    }\n\n\n    public class IdInfo\n    {\n        public int IdNumber;\n        public IdInfo(int IdNumber)\n        {\n            this.IdNumber = IdNumber;\n        }\n\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public IdInfo ShallowCopy()\n        {\n            return (IdInfo)this.Clone();\n        }\n\n        public IdInfo DeepCopy()\n        {\n            var result =  (IdInfo)this.Clone();\n\n            return result;\n        }\n\n    }\n\n\n\n\n\n    [TestClass]\n    public class CloneTest1\n    {\n        [TestMethod]\n        public void TestMethod1()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List<string> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.ShallowCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            person2.Name=\"冈本伊朗\";\n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n                      Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n\n        [TestMethod]\n        public void TestMethod2()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List<string> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.DeepCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            \n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n            Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n    }\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"icloneable接口","depth":2,"text":"ICloneable接口","children":[{"id":"一个测试类","depth":3,"text":"一个测试类"}]}]}},"_type":"markdown","_id":"content:dotnet:2020-02-10-Icloneable.md","_source":"content","_file":"dotnet/2020-02-10-Icloneable.md","_extension":"md","date":"2020-02-10"}