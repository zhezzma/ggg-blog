{"_path":"/dotnet/2020-11-24-flags","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"C＃枚举中使用Flags特性","description":"假如有类型 Show 的定义如下十進位表示法\n[Flags]\nenum Days\n{\n    None      = 0,  // 0000 0000\n    Sunday    = 1,  // 0000 0001\n    Monday    = 2,  // 0000 0010\n    Tuesday   = 4,  // 0000 0100\n    Wednesday = 8,  // 0000 1000\n    Thursday  = 16, // 0001 0000\n    Friday    = 32, // 0010 0000\n    Saturday  = 64  // 010","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"假如有类型 Show 的定义如下"}]},{"type":"element","tag":"pre","props":{"code":"十進位表示法\n[Flags]\nenum Days\n{\n    None      = 0,  // 0000 0000\n    Sunday    = 1,  // 0000 0001\n    Monday    = 2,  // 0000 0010\n    Tuesday   = 4,  // 0000 0100\n    Wednesday = 8,  // 0000 1000\n    Thursday  = 16, // 0001 0000\n    Friday    = 32, // 0010 0000\n    Saturday  = 64  // 0100 0000\n}\n位元移位表示法\n[Flags]\nenum Days\n{\n    None      = 0,      // 0000 0000\n    Sunday    = 1 << 0, // 0000 0001\n    Monday    = 1 << 1, // 0000 0010\n    Tuesday   = 1 << 2, // 0000 0100\n    Wednesday = 1 << 3, // 0000 1000\n    Thursday  = 1 << 4, // 0001 0000\n    Friday    = 1 << 5, // 0010 0000\n    Saturday  = 1 << 6  // 0100 0000\n}\n二進位表示法 (C# 7.2新增)\n[Flags]\nenum Days\n{\n    None      = 0b_0000_0000, // 0000 0000\n    Sunday    = 0b_0000_0001, // 0000 0001\n    Monday    = 0b_0000_0010, // 0000 0010\n    Tuesday   = 0b_0000_0100, // 0000 0100\n    Wednesday = 0b_0000_1000, // 0000 1000\n    Thursday  = 0b_0001_0000, // 0001 0000\n    Friday    = 0b_0010_0000, // 0010 0000\n    Saturday  = 0b_0100_0000  // 0100 0000\n}\n \n十六進位表示法\n[Flags]\nenum RenderType\n{\n   None = 0x0,\n   DataUri = 0x1,\n   GZip = 0x2,\n   ContentPage = 0x4,\n   ViewPage = 0x8,\n   HomePage = 0x10 // Next two values could be 0x20, 0x40\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"十進位表示法\n[Flags]\nenum Days\n{\n    None      = 0,  // 0000 0000\n    Sunday    = 1,  // 0000 0001\n    Monday    = 2,  // 0000 0010\n    Tuesday   = 4,  // 0000 0100\n    Wednesday = 8,  // 0000 1000\n    Thursday  = 16, // 0001 0000\n    Friday    = 32, // 0010 0000\n    Saturday  = 64  // 0100 0000\n}\n位元移位表示法\n[Flags]\nenum Days\n{\n    None      = 0,      // 0000 0000\n    Sunday    = 1 << 0, // 0000 0001\n    Monday    = 1 << 1, // 0000 0010\n    Tuesday   = 1 << 2, // 0000 0100\n    Wednesday = 1 << 3, // 0000 1000\n    Thursday  = 1 << 4, // 0001 0000\n    Friday    = 1 << 5, // 0010 0000\n    Saturday  = 1 << 6  // 0100 0000\n}\n二進位表示法 (C# 7.2新增)\n[Flags]\nenum Days\n{\n    None      = 0b_0000_0000, // 0000 0000\n    Sunday    = 0b_0000_0001, // 0000 0001\n    Monday    = 0b_0000_0010, // 0000 0010\n    Tuesday   = 0b_0000_0100, // 0000 0100\n    Wednesday = 0b_0000_1000, // 0000 1000\n    Thursday  = 0b_0001_0000, // 0001 0000\n    Friday    = 0b_0010_0000, // 0010 0000\n    Saturday  = 0b_0100_0000  // 0100 0000\n}\n \n十六進位表示法\n[Flags]\nenum RenderType\n{\n   None = 0x0,\n   DataUri = 0x1,\n   GZip = 0x2,\n   ContentPage = 0x4,\n   ViewPage = 0x8,\n   HomePage = 0x10 // Next two values could be 0x20, 0x40\n}\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"& 按位与"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"| 按位或"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"^ 按位异或"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"~取反"}]}]},{"type":"element","tag":"h2","props":{"id":"并集-添加"},"children":[{"type":"text","value":"并集 (添加)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"a|b: 并集(所有的和,相同部分只算一次);"}]},{"type":"element","tag":"pre","props":{"code":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A | B\n{'英语', '物理', '语文', '政治', '化学', '数学', '生物', '地理', '历史'}\n","language":"swift","meta":"","className":["language-swift"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A | B\n{'英语', '物理', '语文', '政治', '化学', '数学', '生物', '地理', '历史'}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image-20210404182659146","src":"/images/2020-11-24-flags/image-20210404182659146.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"差集-去除"},"children":[{"type":"text","value":"差集 (去除)"}]},{"type":"element","tag":"pre","props":{"code":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & (~B)\n{'物理', '生物', '化学'}\n>>> B & (~A)\n{'政治', '历史', '地理'}\n  \n","language":"swift","meta":"","className":["language-swift"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & (~B)\n{'物理', '生物', '化学'}\n>>> B & (~A)\n{'政治', '历史', '地理'}\n  \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image-20210404182718872","src":"/images/2020-11-24-flags/image-20210404182718872.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"补集对称差集"},"children":[{"type":"text","value":"补集(对称差集)"}]},{"type":"element","tag":"pre","props":{"code":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A ^ B\n{'物理', '生物', '化学', '政治', '历史', '地理'}\n","language":"swift","meta":"","className":["language-swift"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A ^ B\n{'物理', '生物', '化学', '政治', '历史', '地理'}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image-20210404182742701","src":"/images/2020-11-24-flags/image-20210404182742701.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image-20210404182802570","src":"/images/2020-11-24-flags/image-20210404182802570.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"交集-检查"},"children":[{"type":"text","value":"交集  (检查)"}]},{"type":"element","tag":"pre","props":{"code":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & B\n{'英语', '语文', '数学'}\n","language":"swift","meta":"","className":["language-swift"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & B\n{'英语', '语文', '数学'}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"或者"}]},{"type":"element","tag":"pre","props":{"code":"  Show show = Show.A | Show.B;\n  show.HasFlag(Show.A);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"  Show show = Show.A | Show.B;\n  show.HasFlag(Show.A);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从性能上看通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"&"}]},{"type":"text","value":" 的性能会比 HasFlag 高，但是从可读性上 HasFlag 更友好，如果你的代码没有性能问题推荐使用 HasFlag 方法"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image-20210404182612251","src":"/images/2020-11-24-flags/image-20210404182612251.png"},"children":[]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"并集-添加","depth":2,"text":"并集 (添加)"},{"id":"差集-去除","depth":2,"text":"差集 (去除)"},{"id":"补集对称差集","depth":2,"text":"补集(对称差集)"},{"id":"交集-检查","depth":2,"text":"交集  (检查)"}]}},"_type":"markdown","_id":"content:dotnet:2020-11-24-flags.md","_source":"content","_file":"dotnet/2020-11-24-flags.md","_extension":"md","date":"2020-11-24"}