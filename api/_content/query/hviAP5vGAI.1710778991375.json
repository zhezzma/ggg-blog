{"_path":"/unity/2020-11-17-unity-ecs-worldtime","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"unity world time system","description":"\n  [Preserve]\n    [UpdateInGroup(typeof(InitializationSystemGroup))]\n    public class UpdateWorldTimeSystem : ComponentSystem\n    {\n        private bool hasTickedOnce = false;\n\n        protected override void OnUpdate()\n        {\n            var currentElapsedTime = Time.ElapsedTime;\n            var","body":{"type":"root","children":[{"type":"element","tag":"pre","props":{"code":"\n  [Preserve]\n    [UpdateInGroup(typeof(InitializationSystemGroup))]\n    public class UpdateWorldTimeSystem : ComponentSystem\n    {\n        private bool hasTickedOnce = false;\n\n        protected override void OnUpdate()\n        {\n            var currentElapsedTime = Time.ElapsedTime;\n            var deltaTime = math.min(UnityEngine.Time.deltaTime, World.MaximumDeltaTime);\n            World.SetTime(new TimeData(\n                elapsedTime: hasTickedOnce ? (currentElapsedTime + deltaTime) : currentElapsedTime,\n                deltaTime: deltaTime\n            ));\n            hasTickedOnce = true;\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n  [Preserve]\n    [UpdateInGroup(typeof(InitializationSystemGroup))]\n    public class UpdateWorldTimeSystem : ComponentSystem\n    {\n        private bool hasTickedOnce = false;\n\n        protected override void OnUpdate()\n        {\n            var currentElapsedTime = Time.ElapsedTime;\n            var deltaTime = math.min(UnityEngine.Time.deltaTime, World.MaximumDeltaTime);\n            World.SetTime(new TimeData(\n                elapsedTime: hasTickedOnce ? (currentElapsedTime + deltaTime) : currentElapsedTime,\n                deltaTime: deltaTime\n            ));\n            hasTickedOnce = true;\n        }\n    }\n"}]}]},{"type":"element","tag":"pre","props":{"code":"    internal struct WorldTime : IComponentData\n    {\n        public TimeData Time;\n    }\n\n    internal struct WorldTimeQueue : IBufferElementData\n    {\n        public TimeData Time;\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    internal struct WorldTime : IComponentData\n    {\n        public TimeData Time;\n    }\n\n    internal struct WorldTimeQueue : IBufferElementData\n    {\n        public TimeData Time;\n    }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"World.cs"}]},{"type":"element","tag":"pre","props":{"code":"\n        protected Entity TimeSingleton\n        {\n            get\n            {\n                if (m_TimeSingletonQuery.IsEmptyIgnoreFilter)\n                {\n        #if UNITY_EDITOR\n                    var entity = EntityManager.CreateEntity(typeof(WorldTime), typeof(WorldTimeQueue));\n                    EntityManager.SetName(entity , \"WorldTime\");\n        #else\n                    EntityManager.CreateEntity(typeof(WorldTime), typeof(WorldTimeQueue));\n        #endif\n                }\n\n                return m_TimeSingletonQuery.GetSingletonEntity();\n            }\n        }\n\n        public void SetTime(TimeData newTimeData)\n        {\n            EntityManager.SetComponentData(TimeSingleton, new WorldTime() {Time = newTimeData});\n            this.Time = newTimeData;\n        }\n\n        public void PushTime(TimeData newTimeData)\n        {\n            var queue = EntityManager.GetBuffer<WorldTimeQueue>(TimeSingleton);\n            queue.Add(new WorldTimeQueue() { Time = this.Time });\n            SetTime(newTimeData);\n        }\n\n        public void PopTime()\n        {\n            var queue = EntityManager.GetBuffer<WorldTimeQueue>(TimeSingleton);\n\n            Assert.IsTrue(queue.Length > 0, \"PopTime without a matching PushTime\");\n\n            var prevTime = queue[queue.Length - 1];\n            queue.RemoveAt(queue.Length - 1);\n            SetTime(prevTime.Time);\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n        protected Entity TimeSingleton\n        {\n            get\n            {\n                if (m_TimeSingletonQuery.IsEmptyIgnoreFilter)\n                {\n        #if UNITY_EDITOR\n                    var entity = EntityManager.CreateEntity(typeof(WorldTime), typeof(WorldTimeQueue));\n                    EntityManager.SetName(entity , \"WorldTime\");\n        #else\n                    EntityManager.CreateEntity(typeof(WorldTime), typeof(WorldTimeQueue));\n        #endif\n                }\n\n                return m_TimeSingletonQuery.GetSingletonEntity();\n            }\n        }\n\n        public void SetTime(TimeData newTimeData)\n        {\n            EntityManager.SetComponentData(TimeSingleton, new WorldTime() {Time = newTimeData});\n            this.Time = newTimeData;\n        }\n\n        public void PushTime(TimeData newTimeData)\n        {\n            var queue = EntityManager.GetBuffer<WorldTimeQueue>(TimeSingleton);\n            queue.Add(new WorldTimeQueue() { Time = this.Time });\n            SetTime(newTimeData);\n        }\n\n        public void PopTime()\n        {\n            var queue = EntityManager.GetBuffer<WorldTimeQueue>(TimeSingleton);\n\n            Assert.IsTrue(queue.Length > 0, \"PopTime without a matching PushTime\");\n\n            var prevTime = queue[queue.Length - 1];\n            queue.RemoveAt(queue.Length - 1);\n            SetTime(prevTime.Time);\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ComponentSystemBase"}]},{"type":"element","tag":"pre","props":{"code":"        /// <summary>\n        /// The World in which this system exists.\n        /// </summary>\n        /// <value>The World of this system.</value>\n        public World World => m_StatePtr != null ? (World)m_StatePtr->m_World.Target : null;\n\n        /// <summary>\n        /// The current Time data for this system's world.\n        /// </summary>\n        public ref readonly TimeData Time => ref World.Time;\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        /// <summary>\n        /// The World in which this system exists.\n        /// </summary>\n        /// <value>The World of this system.</value>\n        public World World => m_StatePtr != null ? (World)m_StatePtr->m_World.Target : null;\n\n        /// <summary>\n        /// The current Time data for this system's world.\n        /// </summary>\n        public ref readonly TimeData Time => ref World.Time;\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:unity:2020-11-17-unity-ecs-worldtime.md","_source":"content","_file":"unity/2020-11-17-unity-ecs-worldtime.md","_extension":"md","date":"2020-11-17"}