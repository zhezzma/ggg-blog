{"_path":"/unity/2020-10-16-unity-job","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"UNITY JOB SYSTEM详解","description":"创建Job需要定义一个结构体，实现IJob接口。实现了IJob接口之后，就可以让这个Job和其他Job并行运行了。","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"创建job"},"children":[{"type":"text","value":"创建Job"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"创建Job需要定义一个结构体，实现"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":"接口。实现了"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":"接口之后，就可以让这个Job和其他Job并行运行了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"到这呢，就可以给Job一个真正的定义了：Job是一个统称，任何实现了"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":"接口的结构体，都可以成为一个Job。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"创建Job的步骤如下：\n1、创建一个实现"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"IJob"}]},{"type":"text","value":"接口的结构体\n2、给结构体添加所需的成员变量，可以使用blittable类型或者NativeContainer类型。\n3、在结构体中添加一个Execute方法，具体执行的任务在这个方法里实现。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当执行Job时，Execute方法会在一个内核上执行完毕。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"注意：设计job时，记住job操作的是数据的拷贝，除非使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"NativeContainer"}]},{"type":"text","value":"。所以，在主线程访问job数据的唯一方法就是写入"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"NativeContainer"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"实例代码如下："}]},{"type":"element","tag":"pre","props":{"className":["language-cpp"],"code":"// 这个Job的功能：将两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray<float> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 这个Job的功能：将两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray<float> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"调度job"},"children":[{"type":"text","value":"调度Job"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"创建Job后，如何执行一个Job呢？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这时候需要调度Job，调度Job的步骤如下：\n1、实例化Job\n2、构造Job的数据\n3、调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Schedule"}]},{"type":"text","value":"方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Schedule"}]},{"type":"text","value":"方法会将Job放到Job执行队列的适当位置。一旦安排了Job后，就不能再中断job执行了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"注意"}]},{"type":"text","value":"：只能在主线程中调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Schedule"}]},{"type":"text","value":"方法。"}]},{"type":"element","tag":"pre","props":{"className":["language-cpp"],"code":"// 创建一个长度为1的native array用来存储job执行后的结果\nNativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob);\n\n// 设置job的数据\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// Schedule\nJobHandle handle = jobData.Schedule();\n\n// 等待job执行完毕\nhandle.Complete();\n\n// 获取result中的数据\nfloat aPlusB = result[0];\n\n// 一定要释放native array申请的内存\nresult.Dispose();\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 创建一个长度为1的native array用来存储job执行后的结果\nNativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob);\n\n// 设置job的数据\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// Schedule\nJobHandle handle = jobData.Schedule();\n\n// 等待job执行完毕\nhandle.Complete();\n\n// 获取result中的数据\nfloat aPlusB = result[0];\n\n// 一定要释放native array申请的内存\nresult.Dispose();\n"}]}]},{"type":"element","tag":"h1","props":{"id":"job的依赖关系"},"children":[{"type":"text","value":"Job的依赖关系"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"很多时候，Job并不是独立运行的，需要依赖前一个Job的结果，这时候如何调度呢？"}]},{"type":"element","tag":"h2","props":{"id":"jobhandle"},"children":[{"type":"text","value":"JobHandle"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Schedule"}]},{"type":"text","value":"方法时，会返回一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobHandle"}]},{"type":"text","value":"。你可以使用这个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobHandle"}]},{"type":"text","value":"作为其他job的依赖项。具体方法就是将第一个job的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobHandle"}]},{"type":"text","value":"传给第二个job调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Schedule"}]},{"type":"text","value":"时的参数，例如："}]},{"type":"element","tag":"pre","props":{"className":["language-undefined"],"code":"JobHandle firstJobHandle = firstJob.Schedule();\nsecondJob.Schedule(firstJobHandle);\n","language":"undefined","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"JobHandle firstJobHandle = firstJob.Schedule();\nsecondJob.Schedule(firstJobHandle);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那如果一个job有多个依赖项怎么办呢？这时候可以用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobHandle.CombineDependencies"}]},{"type":"text","value":"方法合并他们。具体如下："}]},{"type":"element","tag":"pre","props":{"className":["language-cpp"],"code":"// 声明一个JobHandle的NativeArray数组\nNativeArray<JobHandle> handles = new NativeArray<JobHandle>(numJobs, Allocator.TempJob);\n\n// 将多个handles放到数组中\n\n// 将多个handles合并到一起\nJobHandle jh = JobHandle.CombineDependencies(handles);\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 声明一个JobHandle的NativeArray数组\nNativeArray<JobHandle> handles = new NativeArray<JobHandle>(numJobs, Allocator.TempJob);\n\n// 将多个handles放到数组中\n\n// 将多个handles合并到一起\nJobHandle jh = JobHandle.CombineDependencies(handles);\n"}]}]},{"type":"element","tag":"h1","props":{"id":"等待job执行完毕"},"children":[{"type":"text","value":"等待Job执行完毕"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在主线程中如何等待Job执行完毕呢？可以调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobHandle"}]},{"type":"text","value":"中的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Complete"}]},{"type":"text","value":"方法强制等待。"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Complete"}]},{"type":"text","value":"方法执行过后，你就可以在主线程中安全地访问job中使用的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"NativeContainer"}]},{"type":"text","value":"了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"注意"}]},{"type":"text","value":"\n当你调用job的Schedule方法后，job并不会立即开始执行。如果你在主线程中等待job执行完毕，并且你需要访问job使用的NativeContainer中的数据时，你可以调用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"JobHandle.Complete"}]},{"type":"text","value":"方法。这个方法会启动job的执行。调用JobHandle的Complete方法后，会将job的NativeContainer所有权还给主线程。所以只有调用过JobHandle上的Complete方法后，主线程才能安全的访问NativeContainer中的数据。同理，也可以调用依赖此job的JobHandle上的Complete方法。例如，你可以调用jobA的Complete方法，也可以调用依赖jobA的JobB的Complete方法。这两种情况下，主线程都可以安全访问jobA使用的NativeContainer。"}]},{"type":"element","tag":"h2","props":{"id":"实例代码"},"children":[{"type":"text","value":"实例代码"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Job代码："}]},{"type":"element","tag":"pre","props":{"className":["language-cpp"],"code":"// Job：两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray<float> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n\n// Job：给一个值加一\npublic struct AddOneJob : IJob\n{\n    public NativeArray<float> result;\n    \n    public void Execute()\n    {\n        result[0] = result[0] + 1;\n    }\n}\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Job：两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray<float> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n\n// Job：给一个值加一\npublic struct AddOneJob : IJob\n{\n    public NativeArray<float> result;\n    \n    public void Execute()\n    {\n        result[0] = result[0] + 1;\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"主线程代码："}]},{"type":"element","tag":"pre","props":{"className":["language-cpp"],"code":"// 创建存储结果的NativeArray\nNativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob);\n\n// 设置job #1\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// 调度job1\nJobHandle firstHandle = jobData.Schedule();\n\n// 设置job2\nAddOneJob incJobData = new AddOneJob();\nincJobData.result = result;\n\n// 调度 job2，依赖job1\nJobHandle secondHandle = incJobData.Schedule(firstHandle);\n\n// 等待job2执行完毕\nsecondHandle.Complete();\n\n// 访问结果\nfloat aPlusB = result[0];\n\n// 释放内存\nresult.Dispose();\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 创建存储结果的NativeArray\nNativeArray<float> result = new NativeArray<float>(1, Allocator.TempJob);\n\n// 设置job #1\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// 调度job1\nJobHandle firstHandle = jobData.Schedule();\n\n// 设置job2\nAddOneJob incJobData = new AddOneJob();\nincJobData.result = result;\n\n// 调度 job2，依赖job1\nJobHandle secondHandle = incJobData.Schedule(firstHandle);\n\n// 等待job2执行完毕\nsecondHandle.Complete();\n\n// 访问结果\nfloat aPlusB = result[0];\n\n// 释放内存\nresult.Dispose();\n"}]}]},{"type":"element","tag":"h1","props":{"id":"相关链接"},"children":[{"type":"text","value":"相关链接"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.unity3d.com/cn/2020.2/Manual/JobSystem.html","rel":["nofollow"]},"children":[{"type":"text","value":"C# 作业系统 - Unity 手册 (unity3d.com)"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://mp.weixin.qq.com/s/ZOVzDZQYBkfs6gAdrTMJUA","rel":["nofollow"]},"children":[{"type":"text","value":"Job System介绍"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247495224&idx=1&sn=6da0b515c54aee71ae64166369ae2320&chksm=fe1dda93c96a53851da09775d9c4a8947a26b26dfdc4aba2775685efee3451c026a8d353a851&mpshare=1&scene=23&srcid=1026M4Dnvzb65VokHexArRV2#rd","rel":["nofollow"]},"children":[{"type":"text","value":"深入解读Job System（1） "}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247495225&idx=1&sn=8c7212a747704da0b85d364529464509&chksm=fe1dda92c96a53848bca7cf95731ce8a9c853c80a4d3e7aa3f249c87d3a50620f30ce85254d6&mpshare=1&scene=23&srcid=1026HlBykd8qHTStfScE4ION#rd","rel":["nofollow"]},"children":[{"type":"text","value":"深入解读Job system（2）"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"jobhandle","depth":2,"text":"JobHandle"},{"id":"实例代码","depth":2,"text":"实例代码"}]}},"_type":"markdown","_id":"content:unity:2020-10-16-unity-job.md","_source":"content","_file":"unity/2020-10-16-unity-job.md","_extension":"md","date":"2020-10-16"}