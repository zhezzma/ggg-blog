{"_path":"/dotnet/2019-12-01-datetimeoffset","_dir":"dotnet","_draft":false,"_partial":false,"_locale":"","title":"DatetimeOffset和Datetime的区别","description":"  [Fact]\n        public void TestDatetimeoffset2()\n        {\n            var a = DateTimeOffset.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n上面的abc都是一个值    [Fact]\n        public void TestDatetimeoffset3()\n        {\n    ","body":{"type":"root","children":[{"type":"element","tag":"pre","props":{"code":"  [Fact]\n        public void TestDatetimeoffset2()\n        {\n            var a = DateTimeOffset.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"  [Fact]\n        public void TestDatetimeoffset2()\n        {\n            var a = DateTimeOffset.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上面的abc都是一个值"}]},{"type":"element","tag":"pre","props":{"code":"    [Fact]\n        public void TestDatetimeoffset3()\n        {\n            var a = DateTime.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    [Fact]\n        public void TestDatetimeoffset3()\n        {\n            var a = DateTime.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上面的值是不等的"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"datetimeoffset使用efcore存储到datetime字段都是0时区的...取出来后如果显示再web可以toLocalTime"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果是游戏中使用,除非是发送给用户显示..否则不需要toLocalTime.."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1，DateTime"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"表示时间上的一刻，通常以日期和当天时间来表示。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2， DateTimeOffset"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"表示一个时间点，通常以相对于协调世界时（UTC）的日期和时间来表示"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.microsoft.com/en-us/dotnet/standard/datetime/performing-arithmetic-operations","rel":["nofollow"]},"children":[{"type":"text","value":"https://docs.microsoft.com/en-us/dotnet/standard/datetime/performing-arithmetic-operations"}]}]},{"type":"element","tag":"pre","props":{"code":"\nusing System;\n\npublic enum TimeComparison\n{\n   EarlierThan = -1,\n   TheSameAs = 0,\n   LaterThan = 1\n}\n\npublic class DateManipulation\n{\n   public static void Main()\n   {\n      DateTime localTime = DateTime.Now;\n      DateTime utcTime = DateTime.UtcNow;\n      \n      Console.WriteLine(\"Difference between {0} and {1} time: {2}:{3} hours\", \n                        localTime.Kind.ToString(), \n                        utcTime.Kind.ToString(), \n                        (localTime - utcTime).Hours, \n                        (localTime - utcTime).Minutes);\n      Console.WriteLine(\"The {0} time is {1} the {2} time.\", \n                        localTime.Kind.ToString(), \n                        Enum.GetName(typeof(TimeComparison), localTime.CompareTo(utcTime)), \n                        utcTime.Kind.ToString());  \n   }\n}\n// If run in the U.S. Pacific Standard Time zone, the example displays \n// the following output to the console:\n//    Difference between Local and Utc time: -7:0 hours\n//    The Local time is EarlierThan the Utc time.      \n\n\npublic class DateTimeOffsetManipulation\n{\n   public static void Main()\n   {\n      DateTimeOffset localTime = DateTimeOffset.Now;\n      DateTimeOffset utcTime = DateTimeOffset.UtcNow;\n      \n      Console.WriteLine(\"Difference between local time and UTC: {0}:{1:D2} hours\", \n                        (localTime - utcTime).Hours, \n                        (localTime - utcTime).Minutes);\n      Console.WriteLine(\"The local time is {0} UTC.\", \n                        Enum.GetName(typeof(TimeComparison), localTime.CompareTo(utcTime)));  \n   }\n}\n// Regardless of the local time zone, the example displays \n// the following output to the console:\n//    Difference between local time and UTC: 0:00 hours.\n//    The local time is TheSameAs UTC.\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nusing System;\n\npublic enum TimeComparison\n{\n   EarlierThan = -1,\n   TheSameAs = 0,\n   LaterThan = 1\n}\n\npublic class DateManipulation\n{\n   public static void Main()\n   {\n      DateTime localTime = DateTime.Now;\n      DateTime utcTime = DateTime.UtcNow;\n      \n      Console.WriteLine(\"Difference between {0} and {1} time: {2}:{3} hours\", \n                        localTime.Kind.ToString(), \n                        utcTime.Kind.ToString(), \n                        (localTime - utcTime).Hours, \n                        (localTime - utcTime).Minutes);\n      Console.WriteLine(\"The {0} time is {1} the {2} time.\", \n                        localTime.Kind.ToString(), \n                        Enum.GetName(typeof(TimeComparison), localTime.CompareTo(utcTime)), \n                        utcTime.Kind.ToString());  \n   }\n}\n// If run in the U.S. Pacific Standard Time zone, the example displays \n// the following output to the console:\n//    Difference between Local and Utc time: -7:0 hours\n//    The Local time is EarlierThan the Utc time.      \n\n\npublic class DateTimeOffsetManipulation\n{\n   public static void Main()\n   {\n      DateTimeOffset localTime = DateTimeOffset.Now;\n      DateTimeOffset utcTime = DateTimeOffset.UtcNow;\n      \n      Console.WriteLine(\"Difference between local time and UTC: {0}:{1:D2} hours\", \n                        (localTime - utcTime).Hours, \n                        (localTime - utcTime).Minutes);\n      Console.WriteLine(\"The local time is {0} UTC.\", \n                        Enum.GetName(typeof(TimeComparison), localTime.CompareTo(utcTime)));  \n   }\n}\n// Regardless of the local time zone, the example displays \n// the following output to the console:\n//    Difference between local time and UTC: 0:00 hours.\n//    The local time is TheSameAs UTC.\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从实例中可以看出，DateTimeOffset是取相对于UTC的日期和时间来表示的，所以DateTimeOffset.Now和DateTimeOffset.UtcNow的值是一样的。而DateTime不同，是以日期和当前时间来显示的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"就是说..如果你用DateTime进行加减运算要么只用DateTime.Now..要么只用DateTime.UtcNow..混用会出现不可预期的错误"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而DateTimeOffset的无论是用now还是utcnow加减都一样,因为他代表的是一个时间点...如果是为了客户端显示使用可以转换成本地时间再tostring"}]},{"type":"element","tag":"h1","props":{"id":"还有就是不要混用不要将datetime当成datetimeoffset使用"},"children":[{"type":"text","value":"还有就是不要混用..不要将datetime当成datetimeoffset使用,"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当需要使用DateTimeOffset的Date等字段的时候,"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"要及时转成DateTimeOffset,需要使用new方法并设置时区转成datetimeoffset"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"直接赋值,会出现时区问题"}]}]},{"type":"element","tag":"pre","props":{"code":"var now = new DateTimeOffset(1977,1,1,14,0,0,TimeSpan.Zero);\nvar mt = now.AddDays(1).Date;\nDateTimeOffset d = mt; //这里直接赋值会有当前时区\nvar mto= new DateTimeOffset(mt,TimeSpan.Zero);\n\nConsole.WriteLine(now); //1/1/1977 2:00:00 PM +00:00\nConsole.WriteLine(mt); //1/2/1977 12:00:00 AM\nConsole.WriteLine(d);//1/2/1977 12:00:00 AM +08:00\nConsole.WriteLine(mto);//1/2/1977 12:00:00 AM +00:00\n\nConsole.WriteLine(mto == mt); //false\nConsole.WriteLine(d == mto); //false\n","language":"csharp","meta":"","className":["language-csharp"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var now = new DateTimeOffset(1977,1,1,14,0,0,TimeSpan.Zero);\nvar mt = now.AddDays(1).Date;\nDateTimeOffset d = mt; //这里直接赋值会有当前时区\nvar mto= new DateTimeOffset(mt,TimeSpan.Zero);\n\nConsole.WriteLine(now); //1/1/1977 2:00:00 PM +00:00\nConsole.WriteLine(mt); //1/2/1977 12:00:00 AM\nConsole.WriteLine(d);//1/2/1977 12:00:00 AM +08:00\nConsole.WriteLine(mto);//1/2/1977 12:00:00 AM +00:00\n\nConsole.WriteLine(mto == mt); //false\nConsole.WriteLine(d == mto); //false\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:dotnet:2019-12-01-datetimeoffset.md","_source":"content","_file":"dotnet/2019-12-01-datetimeoffset.md","_extension":"md","date":"2019-12-01"}