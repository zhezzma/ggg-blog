{"_path":"/unity/2020-11-18-netcode-sourcecode","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"netcode源代码解读","description":"NetworkStreamReceiveSystem客户端连接服务端  ,服务端创建NetworkIdComponent客户端添加NetworkStreamInGame组件,并通过rpc 发送GoInGameRequest请求服务端接收到请求后,实例化player为player添加GhostOwnerComponent初始化player添加一些其他不需要同步的组件为connection添加NetworkStreamInGame组件为connection设置CommandTargetComponent客户端根据player独有的组件特性,查找已经被ghost同步过来的实体比对NetworkIdC","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"networkstreamreceivesystem"},"children":[{"type":"text","value":"NetworkStreamReceiveSystem"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端连接服务端  ,服务端创建NetworkIdComponent"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端添加NetworkStreamInGame组件,并通过rpc 发送GoInGameRequest请求"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"服务端接收到请求后,实例化player"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"为player添加GhostOwnerComponent"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"初始化player添加一些其他不需要同步的组件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"为connection添加NetworkStreamInGame组件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"为connection设置CommandTargetComponent"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端根据player独有的组件特性,查找已经被ghost同步过来的实体"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"比对NetworkIdComponent和GhostOwnerComponent的id,判断是否是localPlayer"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对localplayer进行初始化"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"为connection设置CommandTargetComponent为localplayer"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端使用CommandTargetComponent的targetEntity进行command发送"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"客户端和服务端对传送的command同时使用PredictedGhostComponent进行预测????"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"预测不是发生在客户端的吗???貌似netcode服务端也做了预测"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"在服务器上，预测循环始终仅运行一次，并且不会更新TimeData结构，因为它已经正确。它仍然设置GhostPredictionSystemGroup.PredictingTick以确保可以在客户端和服务器上运行完全相同的代码。"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"插值 是针对其他玩家的本地显示...预测是针对自己操作的角色,最后从服务器校正"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"延迟补偿是服务器在做的一件事情.."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GhostReceiveSystem  接收快照"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GhostUpdateSystem  应用快照     设置了predictionStartTick和AppliedTick"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GhostPredictionSystemGroup   设置了 PredictingTick ,服务端永远为ServerSimulationSystemGroup.servertick"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"======================================================================="}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"客户端的servertick在不同的两帧之间可能是相同的"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image-20201206011918426","src":"/images/2020-11-18-netcode-sourcecode/image-20201206011918426.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"servertick    235"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    230"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    231"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    232"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    233"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    234"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    235"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"servertick    240  因为跑预测所以这里可能过了好几帧servertick这里不是236"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    240  //自己先跑一下"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"servertick    240 //又可能tick增长时间还没有过"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    238"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    239"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PredictingTick    240"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"实际上没多大复杂的事情..客户端发送命令给服务端,服务端处理后将tick和数据同步给客户端..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"客户端拿到数据..该预测的预测..该插值的插值..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后还需要处理这帧的自己的命令..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"客户端:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Ghost数据(服务端传送的同步)--预测---输入命令--发送命令给服务端---处理命令----覆盖同步数据(一般是覆盖自己的)--应用数据(位移,动画等)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"服务端:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"服务端接收到命令---处理命令----写入Ghost数据(同步)--应用数据(位移,动画等)"}]},{"type":"element","tag":"h2","props":{"id":"预测"},"children":[{"type":"text","value":"预测"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"输入的时候, 添加发送给服务器时的servertick ,"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"注意这个servertick和ServerSimulationSystemGroup.servertick没有多大关系."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"m_ClientSimulationSystemGroup.ServerTick标记发送给服务器的命令所在的tick,以及用来接收服务器快照后(快照会包含该tick),丢弃执行过的命令,以及预测未执行的命令使用"}]},{"type":"element","tag":"pre","props":{"code":"        var input = default(CubeInput);\n        input.Tick = m_ClientSimulationSystemGroup.ServerTick;\n        if (Input.GetKey(\"a\"))\n            input.horizontal -= 1;\n        if (Input.GetKey(\"d\"))\n            input.horizontal += 1;\n        if (Input.GetKey(\"s\"))\n            input.vertical -= 1;\n        if (Input.GetKey(\"w\"))\n            input.vertical += 1;\n        var inputBuffer = EntityManager.GetBuffer<CubeInput>(localInput);\n        inputBuffer.AddCommandData(input);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        var input = default(CubeInput);\n        input.Tick = m_ClientSimulationSystemGroup.ServerTick;\n        if (Input.GetKey(\"a\"))\n            input.horizontal -= 1;\n        if (Input.GetKey(\"d\"))\n            input.horizontal += 1;\n        if (Input.GetKey(\"s\"))\n            input.vertical -= 1;\n        if (Input.GetKey(\"w\"))\n            input.vertical += 1;\n        var inputBuffer = EntityManager.GetBuffer<CubeInput>(localInput);\n        inputBuffer.AddCommandData(input);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"客户端使用服务端的快照时,将更新PredictedGhostComponent,可以看到他有两个tick,一个是应用tick,一个是预测开始的tick"}]},{"type":"element","tag":"pre","props":{"code":"    public struct PredictedGhostComponent : IComponentData\n    {\n        public uint AppliedTick;\n        public uint PredictionStartTick;\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    public struct PredictedGhostComponent : IComponentData\n    {\n        public uint AppliedTick;\n        public uint PredictionStartTick;\n    }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"服务端PredictedGhostComponent其中AppliedTick和PredictionStartTick永远为0"}]},{"type":"element","tag":"pre","props":{"code":"[UpdateInGroup(typeof(GhostPredictionSystemGroup))]\npublic class MoveCubeSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        var group = World.GetExistingSystem<GhostPredictionSystemGroup>();\n        var tick = group.PredictingTick;\n        var deltaTime = Time.DeltaTime;\n        Entities.ForEach((DynamicBuffer<CubeInput> inputBuffer, ref Translation trans, ref PredictedGhostComponent prediction) =>\n        {\n            if (!GhostPredictionSystemGroup.ShouldPredict(tick, prediction))\n                return;\n            CubeInput input;\n            inputBuffer.GetDataAtTick(tick, out input);\n            if (input.horizontal > 0)\n                trans.Value.x += deltaTime;\n            if (input.horizontal < 0)\n                trans.Value.x -= deltaTime;\n            if (input.vertical > 0)\n                trans.Value.z += deltaTime;\n            if (input.vertical < 0)\n                trans.Value.z -= deltaTime;\n        });\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[UpdateInGroup(typeof(GhostPredictionSystemGroup))]\npublic class MoveCubeSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        var group = World.GetExistingSystem<GhostPredictionSystemGroup>();\n        var tick = group.PredictingTick;\n        var deltaTime = Time.DeltaTime;\n        Entities.ForEach((DynamicBuffer<CubeInput> inputBuffer, ref Translation trans, ref PredictedGhostComponent prediction) =>\n        {\n            if (!GhostPredictionSystemGroup.ShouldPredict(tick, prediction))\n                return;\n            CubeInput input;\n            inputBuffer.GetDataAtTick(tick, out input);\n            if (input.horizontal > 0)\n                trans.Value.x += deltaTime;\n            if (input.horizontal < 0)\n                trans.Value.x -= deltaTime;\n            if (input.vertical > 0)\n                trans.Value.z += deltaTime;\n            if (input.vertical < 0)\n                trans.Value.z -= deltaTime;\n        });\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"让我们看下GhostPredictionSystemGroup的源代码:"}]},{"type":"element","tag":"pre","props":{"code":"   protected override void OnUpdate()\n        {\n            // If client, go from oldest applied predicted tick to target tick, apply. Allow filtering on latest received tick somehow\n            if (isServer)\n            {\n                // If server, apply once\n                var simulationSystemGroup = World.GetExistingSystem<ServerSimulationSystemGroup>();\n                PredictingTick = simulationSystemGroup.ServerTick;\n                IsFinalPredictionTick = true;\n                base.OnUpdate();\n            }\n            else\n            {\n                if (predictedTickWriters.Length > 1)\n                {\n                    predictedTickWriters[0] = JobHandle.CombineDependencies(predictedTickWriters);\n                    predictedTickWriters.ResizeUninitialized(1);\n                }\n\n                if (predictedTickWriters.Length > 0)\n                    predictedTickWriters[0].Complete();\n                predictedTickWriters.Clear();\n                uint oldestAppliedTick = 0;\n                for (int i = 0; i < OldestPredictedTick.Length; ++i)\n                {\n                    if (OldestPredictedTick[i] != 0)\n                    {\n                        if (oldestAppliedTick == 0 ||\n                            SequenceHelpers.IsNewer(oldestAppliedTick, OldestPredictedTick[i]))\n                            oldestAppliedTick = OldestPredictedTick[i];\n                        OldestPredictedTick[i] = 0;\n                    }\n                }\n\n                var simulationSystemGroup = World.GetExistingSystem<ClientSimulationSystemGroup>();\n                var serverTick = simulationSystemGroup.ServerTick;\n                var targetTick = serverTick;\n\n                if (oldestAppliedTick == 0 ||\n                    !SequenceHelpers.IsNewer(targetTick, oldestAppliedTick))\n                    //oldestAppliedTick = targetTick - 1;\n                    return; // Nothing rolled back - nothing to predict\n                // Do not try to predict more frames than we can have input for\n                if (targetTick - oldestAppliedTick > CommandDataUtility.k_CommandDataMaxSize)\n                    oldestAppliedTick = targetTick - CommandDataUtility.k_CommandDataMaxSize;\n\n                var previousTime = Time;\n                var elapsedTime = previousTime.ElapsedTime;\n                if (simulationSystemGroup.ServerTickFraction < 1)\n                {\n                    --targetTick;\n                    elapsedTime -= simulationSystemGroup.ServerTickDeltaTime * simulationSystemGroup.ServerTickFraction;\n                }\n\n                for (uint i = oldestAppliedTick + 1; i != targetTick+1; ++i)\n                {\n                    uint tickAge = targetTick - i;\n                    World.SetTime(new TimeData(elapsedTime - simulationSystemGroup.ServerTickDeltaTime*tickAge, simulationSystemGroup.ServerTickDeltaTime));\n                    PredictingTick = i;\n                    IsFinalPredictionTick = (i == serverTick);\n                    base.OnUpdate();\n                }\n\n                if (simulationSystemGroup.ServerTickFraction < 1)\n                {\n                    PredictingTick = targetTick + 1;\n                    IsFinalPredictionTick = true;\n                    World.SetTime(new TimeData(previousTime.ElapsedTime, simulationSystemGroup.ServerTickDeltaTime *\n                                                                        simulationSystemGroup.ServerTickFraction));\n                    base.OnUpdate();\n                }\n                World.SetTime(previousTime);\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"   protected override void OnUpdate()\n        {\n            // If client, go from oldest applied predicted tick to target tick, apply. Allow filtering on latest received tick somehow\n            if (isServer)\n            {\n                // If server, apply once\n                var simulationSystemGroup = World.GetExistingSystem<ServerSimulationSystemGroup>();\n                PredictingTick = simulationSystemGroup.ServerTick;\n                IsFinalPredictionTick = true;\n                base.OnUpdate();\n            }\n            else\n            {\n                if (predictedTickWriters.Length > 1)\n                {\n                    predictedTickWriters[0] = JobHandle.CombineDependencies(predictedTickWriters);\n                    predictedTickWriters.ResizeUninitialized(1);\n                }\n\n                if (predictedTickWriters.Length > 0)\n                    predictedTickWriters[0].Complete();\n                predictedTickWriters.Clear();\n                uint oldestAppliedTick = 0;\n                for (int i = 0; i < OldestPredictedTick.Length; ++i)\n                {\n                    if (OldestPredictedTick[i] != 0)\n                    {\n                        if (oldestAppliedTick == 0 ||\n                            SequenceHelpers.IsNewer(oldestAppliedTick, OldestPredictedTick[i]))\n                            oldestAppliedTick = OldestPredictedTick[i];\n                        OldestPredictedTick[i] = 0;\n                    }\n                }\n\n                var simulationSystemGroup = World.GetExistingSystem<ClientSimulationSystemGroup>();\n                var serverTick = simulationSystemGroup.ServerTick;\n                var targetTick = serverTick;\n\n                if (oldestAppliedTick == 0 ||\n                    !SequenceHelpers.IsNewer(targetTick, oldestAppliedTick))\n                    //oldestAppliedTick = targetTick - 1;\n                    return; // Nothing rolled back - nothing to predict\n                // Do not try to predict more frames than we can have input for\n                if (targetTick - oldestAppliedTick > CommandDataUtility.k_CommandDataMaxSize)\n                    oldestAppliedTick = targetTick - CommandDataUtility.k_CommandDataMaxSize;\n\n                var previousTime = Time;\n                var elapsedTime = previousTime.ElapsedTime;\n                if (simulationSystemGroup.ServerTickFraction < 1)\n                {\n                    --targetTick;\n                    elapsedTime -= simulationSystemGroup.ServerTickDeltaTime * simulationSystemGroup.ServerTickFraction;\n                }\n\n                for (uint i = oldestAppliedTick + 1; i != targetTick+1; ++i)\n                {\n                    uint tickAge = targetTick - i;\n                    World.SetTime(new TimeData(elapsedTime - simulationSystemGroup.ServerTickDeltaTime*tickAge, simulationSystemGroup.ServerTickDeltaTime));\n                    PredictingTick = i;\n                    IsFinalPredictionTick = (i == serverTick);\n                    base.OnUpdate();\n                }\n\n                if (simulationSystemGroup.ServerTickFraction < 1)\n                {\n                    PredictingTick = targetTick + 1;\n                    IsFinalPredictionTick = true;\n                    World.SetTime(new TimeData(previousTime.ElapsedTime, simulationSystemGroup.ServerTickDeltaTime *\n                                                                        simulationSystemGroup.ServerTickFraction));\n                    base.OnUpdate();\n                }\n                World.SetTime(previousTime);\n            }\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以看到从开始值不断的改变PredictingTick进行预测,然后执行了base.OnUpdate()"}]},{"type":"element","tag":"h1","props":{"id":"插值"},"children":[{"type":"text","value":"插值"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"插值就是将网络玩家显示在过去的某个时刻"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"假设你在t=1000收到位置信息，你已经在t=900收到了一次位置信息，所以你知道玩家在t=900和t=1000的位置，所以在t=1000到t=1100之间，你只要显示玩家t=900到t=1000的位置。这种方法，你所显示的都是玩家的真实数据，只是有100ms的延迟。"}]},{"type":"element","tag":"h3","props":{"id":"translation和rotation的转换"},"children":[{"type":"text","value":"Translation和Rotation的转换"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unity.NetCode.Editor.GhostAuthoringComponentEditor"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"中添加了Translation和Rotation的转换,只有被转换的才会被传输..如果不想转换可以在code gen window中勾掉Unity.Transforms..auto compile也勾掉"}]},{"type":"element","tag":"pre","props":{"code":"    public static void InitDefaultOverrides()\n        {\n            GhostDefaultOverrides = new Dictionary<string, GhostComponent>();\n            AssembliesDefaultOverrides = new HashSet<string>(new []{\n                \"Unity.NetCode\",\n                \"Unity.Transforms\",\n            });\n\n            var comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Translation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 100, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n            comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Rotation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 1000, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    public static void InitDefaultOverrides()\n        {\n            GhostDefaultOverrides = new Dictionary<string, GhostComponent>();\n            AssembliesDefaultOverrides = new HashSet<string>(new []{\n                \"Unity.NetCode\",\n                \"Unity.Transforms\",\n            });\n\n            var comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Translation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 100, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n            comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Rotation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 1000, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们可以看到这里使用了GhostFiled并且将其设置为Interpolate..我们在看下他生成的code"}]},{"type":"element","tag":"pre","props":{"code":"        [BurstCompile]\n        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]\n        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)\n        {\n            for (int i = 0; i < count; ++i)\n            {\n                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);\n                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);\n                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);\n                float snapshotInterpolationFactor = snapshotInterpolationData.InterpolationFactor;\n                ref var component = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Translation>(componentData, componentStride*i);\n                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);\n                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;\n                component.Value = math.lerp(\n                    new float3(snapshotBefore.Value_x * 0.01f, snapshotBefore.Value_y * 0.01f, snapshotBefore.Value_z * 0.01f),\n                    new float3(snapshotAfter.Value_x * 0.01f, snapshotAfter.Value_y * 0.01f, snapshotAfter.Value_z * 0.01f),\n                    snapshotInterpolationFactor);\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        [BurstCompile]\n        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]\n        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)\n        {\n            for (int i = 0; i < count; ++i)\n            {\n                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);\n                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);\n                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);\n                float snapshotInterpolationFactor = snapshotInterpolationData.InterpolationFactor;\n                ref var component = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Translation>(componentData, componentStride*i);\n                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);\n                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;\n                component.Value = math.lerp(\n                    new float3(snapshotBefore.Value_x * 0.01f, snapshotBefore.Value_y * 0.01f, snapshotBefore.Value_z * 0.01f),\n                    new float3(snapshotAfter.Value_x * 0.01f, snapshotAfter.Value_y * 0.01f, snapshotAfter.Value_z * 0.01f),\n                    snapshotInterpolationFactor);\n            }\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们看到在读取快照的时候使用了snapshotInterpolationFactor进行插值,SnapshotData类中"}]},{"type":"element","tag":"pre","props":{"code":"\n  public unsafe bool GetDataAtTick(uint targetTick, float targetTickFraction, in DynamicBuffer<SnapshotDataBuffer> buffer, out DataAtTick data)\n        {\n            data = default;\n            if (buffer.Length == 0)\n                return false;\n            var numBuffers = buffer.Length / SnapshotSize;\n            int beforeIdx = 0;\n            uint beforeTick = 0;\n            int afterIdx = 0;\n            uint afterTick = 0;\n            // If last tick is fractional before should not include the tick we are targeting, it should instead be included in after\n            if (targetTickFraction < 1)\n                --targetTick;\n            byte* snapshotData;\n            // Loop from latest available to oldest available snapshot\n            for (int slot = 0; slot < numBuffers; ++slot)\n            {\n                var curIndex = (LatestIndex + GhostSystemConstants.SnapshotHistorySize - slot) % GhostSystemConstants.SnapshotHistorySize;\n                snapshotData = (byte*)buffer.GetUnsafePtr() + curIndex * SnapshotSize;\n                uint tick = *(uint*)snapshotData;\n                if (tick == 0)\n                    continue;\n                if (SequenceHelpers.IsNewer(tick, targetTick))\n                {\n                    afterTick = tick;\n                    afterIdx = curIndex;\n                }\n                else\n                {\n                    beforeTick = tick;\n                    beforeIdx = curIndex;\n                    break;\n                }\n            }\n\n            if (beforeTick == 0)\n            {\n                return false;\n            }\n\n            data.SnapshotBefore = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + beforeIdx * SnapshotSize);\n            data.Tick = beforeTick;\n            if (afterTick == 0)\n            {\n                data.SnapshotAfter = data.SnapshotBefore;\n                data.InterpolationFactor = 0;\n            }\n            else\n            {\n                data.SnapshotAfter = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + afterIdx * SnapshotSize);\n                data.InterpolationFactor = (float) (targetTick - beforeTick) / (float) (afterTick - beforeTick);\n                if (targetTickFraction < 1)\n                    data.InterpolationFactor += targetTickFraction / (float) (afterTick - beforeTick);\n            }\n\n            return true;\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n  public unsafe bool GetDataAtTick(uint targetTick, float targetTickFraction, in DynamicBuffer<SnapshotDataBuffer> buffer, out DataAtTick data)\n        {\n            data = default;\n            if (buffer.Length == 0)\n                return false;\n            var numBuffers = buffer.Length / SnapshotSize;\n            int beforeIdx = 0;\n            uint beforeTick = 0;\n            int afterIdx = 0;\n            uint afterTick = 0;\n            // If last tick is fractional before should not include the tick we are targeting, it should instead be included in after\n            if (targetTickFraction < 1)\n                --targetTick;\n            byte* snapshotData;\n            // Loop from latest available to oldest available snapshot\n            for (int slot = 0; slot < numBuffers; ++slot)\n            {\n                var curIndex = (LatestIndex + GhostSystemConstants.SnapshotHistorySize - slot) % GhostSystemConstants.SnapshotHistorySize;\n                snapshotData = (byte*)buffer.GetUnsafePtr() + curIndex * SnapshotSize;\n                uint tick = *(uint*)snapshotData;\n                if (tick == 0)\n                    continue;\n                if (SequenceHelpers.IsNewer(tick, targetTick))\n                {\n                    afterTick = tick;\n                    afterIdx = curIndex;\n                }\n                else\n                {\n                    beforeTick = tick;\n                    beforeIdx = curIndex;\n                    break;\n                }\n            }\n\n            if (beforeTick == 0)\n            {\n                return false;\n            }\n\n            data.SnapshotBefore = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + beforeIdx * SnapshotSize);\n            data.Tick = beforeTick;\n            if (afterTick == 0)\n            {\n                data.SnapshotAfter = data.SnapshotBefore;\n                data.InterpolationFactor = 0;\n            }\n            else\n            {\n                data.SnapshotAfter = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + afterIdx * SnapshotSize);\n                data.InterpolationFactor = (float) (targetTick - beforeTick) / (float) (afterTick - beforeTick);\n                if (targetTickFraction < 1)\n                    data.InterpolationFactor += targetTickFraction / (float) (afterTick - beforeTick);\n            }\n\n            return true;\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在其中计算了InterpolationFactor."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"无论是插值和预测都是先读取快照.我们看下GhostUpdateSystem"}]},{"type":"element","tag":"pre","props":{"code":" public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex, DynamicComponentTypeHandle* ghostChunkComponentTypesPtr, int ghostChunkComponentTypesLength)\n            {\n                bool predicted = chunk.Has(predictedGhostComponentType);\n                uint targetTick = predicted ? predictedTargetTick : interpolatedTargetTick;\n                float targetTickFraction = predicted ? 1.0f : interpolatedTargetTickFraction;\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex, DynamicComponentTypeHandle* ghostChunkComponentTypesPtr, int ghostChunkComponentTypesLength)\n            {\n                bool predicted = chunk.Has(predictedGhostComponentType);\n                uint targetTick = predicted ? predictedTargetTick : interpolatedTargetTick;\n                float targetTickFraction = predicted ? 1.0f : interpolatedTargetTickFraction;\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"预测使用的是predictedTargetTick,插值使用的是interpolatedTargetTick"}]},{"type":"element","tag":"pre","props":{"code":" interpolatedTargetTick = m_ClientSimulationSystemGroup.InterpolationTick,\n                interpolatedTargetTickFraction = m_ClientSimulationSystemGroup.InterpolationTickFraction,\n\n                predictedTargetTick = m_ClientSimulationSystemGroup.ServerTick,\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" interpolatedTargetTick = m_ClientSimulationSystemGroup.InterpolationTick,\n                interpolatedTargetTickFraction = m_ClientSimulationSystemGroup.InterpolationTickFraction,\n\n                predictedTargetTick = m_ClientSimulationSystemGroup.ServerTick,\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而他们又都来自m_ClientSimulationSystemGroup,m_ClientSimulationSystemGroup的tick又来自NetworkTimeSystem"}]},{"type":"element","tag":"h3","props":{"id":"clientservertickrate"},"children":[{"type":"text","value":"ClientServerTickRate"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"RpcSetNetworkId"}]},{"type":"element","tag":"pre","props":{"code":" [BurstCompile]\n        [AOT.MonoPInvokeCallback(typeof(RpcExecutor.ExecuteDelegate))]\n        private static void InvokeExecute(ref RpcExecutor.Parameters parameters)\n        {\n            var rpcData = default(RpcSetNetworkId);\n            var rpcSerializer = default(RpcSetNetworkId);\n            rpcSerializer.Deserialize(ref parameters.Reader, parameters.DeserializerState, ref rpcData);\n\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, parameters.Connection, new NetworkIdComponent {Value = rpcData.nid});\n            var ent = parameters.CommandBuffer.CreateEntity(parameters.JobIndex);\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, ent, new ClientServerTickRateRefreshRequest\n            {\n                MaxSimulationStepsPerFrame = rpcData.simMaxSteps,\n                NetworkTickRate = rpcData.netTickRate,\n                SimulationTickRate = rpcData.simTickRate\n            });\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" [BurstCompile]\n        [AOT.MonoPInvokeCallback(typeof(RpcExecutor.ExecuteDelegate))]\n        private static void InvokeExecute(ref RpcExecutor.Parameters parameters)\n        {\n            var rpcData = default(RpcSetNetworkId);\n            var rpcSerializer = default(RpcSetNetworkId);\n            rpcSerializer.Deserialize(ref parameters.Reader, parameters.DeserializerState, ref rpcData);\n\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, parameters.Connection, new NetworkIdComponent {Value = rpcData.nid});\n            var ent = parameters.CommandBuffer.CreateEntity(parameters.JobIndex);\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, ent, new ClientServerTickRateRefreshRequest\n            {\n                MaxSimulationStepsPerFrame = rpcData.simMaxSteps,\n                NetworkTickRate = rpcData.netTickRate,\n                SimulationTickRate = rpcData.simTickRate\n            });\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"服务端在同步networkid的时候会一起同步ClientServerTickRate"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"客户端会比服务端多一个NetworkTimeSystem根据往返时间和最近从服务器收到的快照来计算服务器时间的初始估计"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"来看下插值tick的计算..他首先是算出predictTargetTick然后减去一个插值"}]},{"type":"element","tag":"pre","props":{"code":"\n var idiff = (uint)currentInterpolationFrames;\n            interpolateTargetTick = predictTargetTick - idiff;\n            var subidiff = currentInterpolationFrames - idiff;\n            subidiff -= subInterpolateTargetTick+subPredictTargetTick;\n            if (subidiff < 0)\n            {\n                ++interpolateTargetTick;\n                subidiff = -subidiff;\n            }\n            else if (subidiff > 0)\n            {\n                idiff = (uint)subidiff;\n                subidiff -= idiff;\n                interpolateTargetTick -= idiff;\n                subidiff = 1f-subidiff;\n            }\n            subInterpolateTargetTick = subidiff;\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n var idiff = (uint)currentInterpolationFrames;\n            interpolateTargetTick = predictTargetTick - idiff;\n            var subidiff = currentInterpolationFrames - idiff;\n            subidiff -= subInterpolateTargetTick+subPredictTargetTick;\n            if (subidiff < 0)\n            {\n                ++interpolateTargetTick;\n                subidiff = -subidiff;\n            }\n            else if (subidiff > 0)\n            {\n                idiff = (uint)subidiff;\n                subidiff -= idiff;\n                interpolateTargetTick -= idiff;\n                subidiff = 1f-subidiff;\n            }\n            subInterpolateTargetTick = subidiff;\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"它是根据网络延迟算出一个tick,然后从快照中取出..."}]},{"type":"element","tag":"h1","props":{"id":"补偿"},"children":[{"type":"text","value":"补偿"}]},{"type":"element","tag":"h1","props":{"id":"ghostsendsystem"},"children":[{"type":"text","value":"GhostSendSystem"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以下皆为脑补:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"发送的时候根据ghost的设置,来判断发送给该用户的数据(ghosts),其中谁是插值,谁是预测..因为插值和预测的包应该是有区别的.."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接收的时候再根据是否预测,还是插值.进行PredictedGhostComponent的设置"}]},{"type":"element","tag":"h2","props":{"id":"ghost"},"children":[{"type":"text","value":"GHOST"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GhostAuthoringComponent验证的时候会生成prefabId"}]},{"type":"element","tag":"pre","props":{"code":"    if (gameObject.transform.parent == null)\n            {\n                // The common case is a root object in a prefab, in this case we always validate the guid to detect cloned files\n                var prefabStage = UnityEditor.Experimental.SceneManagement.PrefabStageUtility.GetPrefabStage(gameObject);\n                if (prefabStage != null)\n                {\n#if UNITY_2020_1_OR_NEWER\n                    var assetPath = prefabStage.assetPath;\n#else\n                    var assetPath = prefabStage.prefabAssetPath;\n#endif\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(assetPath);\n                }\n                else if (UnityEditor.PrefabUtility.GetPrefabAssetType(gameObject) != UnityEditor.PrefabAssetType.NotAPrefab)\n                {\n                    var path = UnityEditor.AssetDatabase.GetAssetPath(gameObject);\n                    if (String.IsNullOrEmpty(path))\n                        return;\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(path);\n                }\n            }\n            if (guid != prefabId)\n            {\n                UnityEditor.Undo.RecordObject(this, \"\");\n                prefabId = guid;\n            }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    if (gameObject.transform.parent == null)\n            {\n                // The common case is a root object in a prefab, in this case we always validate the guid to detect cloned files\n                var prefabStage = UnityEditor.Experimental.SceneManagement.PrefabStageUtility.GetPrefabStage(gameObject);\n                if (prefabStage != null)\n                {\n#if UNITY_2020_1_OR_NEWER\n                    var assetPath = prefabStage.assetPath;\n#else\n                    var assetPath = prefabStage.prefabAssetPath;\n#endif\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(assetPath);\n                }\n                else if (UnityEditor.PrefabUtility.GetPrefabAssetType(gameObject) != UnityEditor.PrefabAssetType.NotAPrefab)\n                {\n                    var path = UnityEditor.AssetDatabase.GetAssetPath(gameObject);\n                    if (String.IsNullOrEmpty(path))\n                        return;\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(path);\n                }\n            }\n            if (guid != prefabId)\n            {\n                UnityEditor.Undo.RecordObject(this, \"\");\n                prefabId = guid;\n            }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GhostAuthoringConversion,会为prefab根据client和server添加各种组件ghost, Snapshot"}]},{"type":"element","tag":"pre","props":{"code":"    var ghostType = new GhostTypeComponent();\n    ghostType.guid0 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(0, 8), 16);\n    ghostType.guid1 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(8, 8), 16);\n    ghostType.guid2 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(16, 8), 16);\n    ghostType.guid3 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(24, 8), 16);\n    DstEntityManager.AddComponentData(entity, ghostType);\n                    \n                    \n                    \n                    \n  DstEntityManager.AddComponentData(entity, new GhostComponent());\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    var ghostType = new GhostTypeComponent();\n    ghostType.guid0 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(0, 8), 16);\n    ghostType.guid1 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(8, 8), 16);\n    ghostType.guid2 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(16, 8), 16);\n    ghostType.guid3 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(24, 8), 16);\n    DstEntityManager.AddComponentData(entity, ghostType);\n                    \n                    \n                    \n                    \n  DstEntityManager.AddComponentData(entity, new GhostComponent());\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"默认一定会添加的组件:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"客户端会添加 snapshotData和snapshotDataBuffer"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"服务端会添加PredictedGhostComponent,GhostSystemStateComponent,sharedGhostTypeComponent"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"[GhostComponent(PrefabType=GhostPrefabType.Client)] 可以控制服务端和客户端是否添加该组件"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"他会同步ghost prefab..根据ghostid..然后客户端.根据ghostid实例化ghost"}]},{"type":"element","tag":"pre","props":{"code":"    public struct SpawnedGhost : IEquatable<SpawnedGhost>\n    {\n        public int ghostId;\n        public uint spawnTick;\n        public override int GetHashCode()\n        {\n            return ghostId;\n        }\n        public bool Equals(SpawnedGhost ghost)\n        {\n            return ghost.ghostId == ghostId && ghost.spawnTick == spawnTick;\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    public struct SpawnedGhost : IEquatable<SpawnedGhost>\n    {\n        public int ghostId;\n        public uint spawnTick;\n        public override int GetHashCode()\n        {\n            return ghostId;\n        }\n        public bool Equals(SpawnedGhost ghost)\n        {\n            return ghost.ghostId == ghostId && ghost.spawnTick == spawnTick;\n        }\n    }\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"预测","depth":2,"text":"预测","children":[{"id":"translation和rotation的转换","depth":3,"text":"Translation和Rotation的转换"},{"id":"clientservertickrate","depth":3,"text":"ClientServerTickRate"}]},{"id":"ghost","depth":2,"text":"GHOST"}]}},"_type":"markdown","_id":"content:unity:2020-11-18-netcode-sourcecode.md","_source":"content","_file":"unity/2020-11-18-netcode-sourcecode.md","_extension":"md","date":"2020-11-18"}