{"_path":"/unity/2020-02-17-character-states","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"角色状态设计","description":"https://www.cnblogs.com/Renyi-Fan/p/9569090.html","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.cnblogs.com/Renyi-Fan/p/9569090.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.cnblogs.com/Renyi-Fan/p/9569090.html"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.gameres.com/797311.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.gameres.com/797311.html"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"这里写图片描述","src":"/images/2020-02-17-character-states/20161103213426625"},"children":[]}]},{"type":"element","tag":"pre","props":{"code":"public abstract class Attribute\n        {\n            public int Hp { get; set; }\n            public int Mp { get; set; }\n            public int HpTotal { get; set; }\n            public int MpTotal { get; set; }\n\n            private Attribute m_Parent;\n            private string m_Name;\n            public Attribute(int hp, int mp)\n            {\n                this.Hp = hp;\n                this.Mp = mp;\n\n            }\n\n            public Attribute(int hp, int mp, string name) : this(hp, mp)\n            {\n                this.m_Name = name;\n            }\n\n            public abstract void Calc();\n            public abstract int ChildCount();\n            protected void SetParent(Attribute child)\n            {\n                child.m_Parent = this;\n            }\n\n            public Attribute GetParent()\n            {\n                return this.m_Parent;\n            }\n\n            public void Show()\n            {\n                Calc();\n                Console.WriteLine(string.Format(\"{0} 属性为： HP {1} MP {2}\",this.m_Name, this.HpTotal, this.MpTotal));\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public abstract class Attribute\n        {\n            public int Hp { get; set; }\n            public int Mp { get; set; }\n            public int HpTotal { get; set; }\n            public int MpTotal { get; set; }\n\n            private Attribute m_Parent;\n            private string m_Name;\n            public Attribute(int hp, int mp)\n            {\n                this.Hp = hp;\n                this.Mp = mp;\n\n            }\n\n            public Attribute(int hp, int mp, string name) : this(hp, mp)\n            {\n                this.m_Name = name;\n            }\n\n            public abstract void Calc();\n            public abstract int ChildCount();\n            protected void SetParent(Attribute child)\n            {\n                child.m_Parent = this;\n            }\n\n            public Attribute GetParent()\n            {\n                return this.m_Parent;\n            }\n\n            public void Show()\n            {\n                Calc();\n                Console.WriteLine(string.Format(\"{0} 属性为： HP {1} MP {2}\",this.m_Name, this.HpTotal, this.MpTotal));\n            }\n        }\n"}]}]},{"type":"element","tag":"pre","props":{"code":"public class AttributeComponent:Attribute\n        {\n            private List<Attribute> m_AttributeList = new List<Attribute>();\n\n            public AttributeComponent(int hp, int mp) : base(hp, mp)\n            {\n            }\n\n            public AttributeComponent(int hp, int mp, string name) : base(hp, mp, name) { }\n\n            public override void Calc()\n            {\n                this.HpTotal = this.Hp;\n                this.MpTotal = this.Mp;\n\n                foreach (Attribute item in m_AttributeList)\n                {\n                    //递归计算属性和\n                    if (item.ChildCount() > 0)\n                        item.Calc();\n\n                    this.HpTotal += item.HpTotal;\n                    this.MpTotal += item.MpTotal;\n                }\n            }\n\n            public override int ChildCount()\n            {\n                return m_AttributeList.Count;\n            }\n\n            public void AddAttribute(Attribute attribute)\n            {\n                SetParent(attribute);\n                this.m_AttributeList.Add(attribute);\n            }\n\n            public void RemoveAttribute(Attribute attribute)\n            {\n                m_AttributeList.Remove(attribute);\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class AttributeComponent:Attribute\n        {\n            private List<Attribute> m_AttributeList = new List<Attribute>();\n\n            public AttributeComponent(int hp, int mp) : base(hp, mp)\n            {\n            }\n\n            public AttributeComponent(int hp, int mp, string name) : base(hp, mp, name) { }\n\n            public override void Calc()\n            {\n                this.HpTotal = this.Hp;\n                this.MpTotal = this.Mp;\n\n                foreach (Attribute item in m_AttributeList)\n                {\n                    //递归计算属性和\n                    if (item.ChildCount() > 0)\n                        item.Calc();\n\n                    this.HpTotal += item.HpTotal;\n                    this.MpTotal += item.MpTotal;\n                }\n            }\n\n            public override int ChildCount()\n            {\n                return m_AttributeList.Count;\n            }\n\n            public void AddAttribute(Attribute attribute)\n            {\n                SetParent(attribute);\n                this.m_AttributeList.Add(attribute);\n            }\n\n            public void RemoveAttribute(Attribute attribute)\n            {\n                m_AttributeList.Remove(attribute);\n            }\n        }\n"}]}]},{"type":"element","tag":"pre","props":{"code":"\npublic void TestMethod1()\n        {\n            AttributeComponent basic = new AttributeComponent(50, 100, \"Ali\");\n            AttributeComponent lvUp = new AttributeComponent(50, 100, \"升级增加\");\n            AttributeComponent weapon = new AttributeComponent(10, 20, \"无级弓\");\n            AttributeComponent weaponEnchanting = new AttributeComponent(5, 5, \"附魔增加\");\n\n            basic.Show();\n            Console.WriteLine(\"升级啦\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            lvUp.Show();\n            basic.AddAttribute(lvUp);\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"装备了武器\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            weapon.Show();\n            basic.AddAttribute(weapon);\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"武器附魔\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            weaponEnchanting.Show();\n            weapon.AddAttribute(weaponEnchanting);\n            weapon.Show();\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"卸载装备\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            basic.RemoveAttribute(weapon);\n            basic.Show();\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\npublic void TestMethod1()\n        {\n            AttributeComponent basic = new AttributeComponent(50, 100, \"Ali\");\n            AttributeComponent lvUp = new AttributeComponent(50, 100, \"升级增加\");\n            AttributeComponent weapon = new AttributeComponent(10, 20, \"无级弓\");\n            AttributeComponent weaponEnchanting = new AttributeComponent(5, 5, \"附魔增加\");\n\n            basic.Show();\n            Console.WriteLine(\"升级啦\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            lvUp.Show();\n            basic.AddAttribute(lvUp);\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"装备了武器\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            weapon.Show();\n            basic.AddAttribute(weapon);\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"武器附魔\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            weaponEnchanting.Show();\n            weapon.AddAttribute(weaponEnchanting);\n            weapon.Show();\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"卸载装备\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            basic.RemoveAttribute(weapon);\n            basic.Show();\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/alistair_chow/article/details/53029909","rel":["nofollow"]},"children":[{"type":"text","value":"https://blog.csdn.net/alistair_chow/article/details/53029909"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://blog.csdn.net/alistair_chow/article/details/53026375","rel":["nofollow"]},"children":[{"type":"text","value":"https://blog.csdn.net/alistair_chow/article/details/53026375"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:unity:2020-02-17-character-states.md","_source":"content","_file":"unity/2020-02-17-character-states.md","_extension":"md","date":"2020-02-17"}