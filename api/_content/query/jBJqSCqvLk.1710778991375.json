{"_path":"/unity/2020-01-01-unity-entitas","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"一篇文章搞定Entitas","description":"Entitas執行流程​      也就是说整个ECS系统的内部数据维护(Group、Collector、EntityIndex)复杂度主要放在Entity的修改上了。\n​      在给一个Entity添加一个Component时，不仅仅是对Entity进行了修改，还会通过事件将这个添加传递给Context，Context遍历所有Group，找到满足这次修改条件的Group，对所有受到影响的Group进行修改。然后再通过Group将这次修改事件分发到Collector或其他监听该Group的模块中去。\n  这种方式带来的好处十分明显，那就是获取一种类型的Entity（也就是一个Group），","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"entitas執行流程"},"children":[{"type":"text","value":"Entitas執行流程"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/images/2020-01-01-unity-entitas/1362861-20190531225036556-1995562595%5B1%5D.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"​      也就是说整个ECS系统的内部数据维护(Group、Collector、EntityIndex)复杂度主要放在Entity的修改上了。\n​      在给一个Entity添加一个Component时，不仅仅是对Entity进行了修改，还会通过事件将这个添加传递给Context，Context遍历所有Group，找到满足这次修改条件的Group，对所有受到影响的Group进行修改。然后再通过Group将这次修改事件分发到Collector或其他监听该Group的模块中去。\n  这种方式带来的好处十分明显，那就是获取一种类型的Entity（也就是一个Group），只有第一次会遍历所有的Entity生成这个Group，之后再获取该类型Entity的复杂度就只有O(1)。\n  但是也有一定的隐患，当Group和Collector比较少时，这不是一个高消耗操作，但是Group、Collector很多，且在每一帧对Entity进行频繁修改的时候。这可能会成为一个高消耗操作。"}]},{"type":"element","tag":"h1","props":{"id":"tips"},"children":[{"type":"text","value":"Tips"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1. 在销毁一个Entity时，会移除Entity身上所有的Component，然后再进行回收。在移除Component时可能会通过Group把这个移除事件发送到监听Remove行为的Collector中，Collector会持有这个被销毁的Entity。所以在filter、或execute时不能直接依赖Collector的收集条件，还需要对Entity的Component做独立的判断。\n  其实任何时候filter都需要对Entity的Component做判断，因为Collector收集的Entity很可能在其他地方被改变。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2. Entity不应该被ECS系统外的模块持有，因为系统外对Entity的持有不会被自动引用计数（可以自己添加）。可能会导致一个Entity被销毁然后又从池子中重新取出来， 外部模块对这个Entity的引用没有改变，但已经可能不是自己持有的那个Entity了。\n  需要避免在外界持有Entity或通过持有uuid间接从context中持有这个Entity。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"3. 在replaceComponent时，发送了Remove、Add、Update三个事件，而不是只发送了Update事件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"4. 在代码生成时，对单Componet的Matcher进行了缓存，如游戏中常用的Postion和Name等Component，但是对组合Component的Matcher没有进行缓存。所在在两个不同的ReactiveSystem中使用Matcher相同的Collector时，如："}]},{"type":"element","tag":"pre","props":{"code":"//1,2代表Postion和Name的Index\n//在使用代码生成时会生成类似Matcher.Position、Matcher.Name的静态函数，方便开发者使用\ncontext.CreateCollector(Matcher.AllOf(1,2));\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//1,2代表Postion和Name的Index\n//在使用代码生成时会生成类似Matcher.Position、Matcher.Name的静态函数，方便开发者使用\ncontext.CreateCollector(Matcher.AllOf(1,2));\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样会生成两个Matcher相同的Group实例。\n如果在意这一点的话可以自己对Matcher进行缓存。"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在Entitas-CSharp中，我们不会真的删除或者添加一个Component。生成出来的代码会先向用户请求新的值，触发移除component的事件，设置一个新的值给这个component，然后触发一次增加component的事件。用这个方法，我们就避免了内存的分配以及模拟了一个在使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"不可修改"}]},{"type":"text","value":"（immutable）component的感觉。"}]}]},{"type":"element","tag":"h1","props":{"id":"group"},"children":[{"type":"text","value":"Group"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在Context中可以对Entity进行快速过滤，它能不断的更新以保持当前的组中的Entity是最新的。假设Context有上千个Entities，但只有两个Entities拥有PositionComponent，那只要向Context询问特定的组就能立刻获取到所有符合的Entity。"}]},{"type":"element","tag":"pre","props":{"code":"gameContext.GetGroup(GameMatcher.Position).GetEntities();\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"gameContext.GetGroup(GameMatcher.Position).GetEntities();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Group和Group所过滤到的entities会被缓存下来，所以即使多次调用GetGroup方法，也是非常高效的。"}]},{"type":"element","tag":"pre","props":{"code":"gameContext.GetEntities(GameMatcher.Movable)\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"gameContext.GetEntities(GameMatcher.Movable)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"内部也是通过Groups的方式来实现。Groups 拥有以下事件OnEntityAdded, OnEntityRemoved 和 OnEntityUpdated来直接响应Entity的变化。"}]},{"type":"element","tag":"h1","props":{"id":"collector"},"children":[{"type":"text","value":"Collector"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Collector是Group的一个观察者类,Collector提供了一种简单的方法来处理Group中Entity变化的反应。假设你需要收集和处理所有entities，他们的PositionComponent被添加或替换："}]},{"type":"element","tag":"pre","props":{"code":"var group = gameContext.GetGroup(GameMatcher.Position);\nvar collector = group.CreateCollector(GroupEvent.Added);\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var group = gameContext.GetGroup(GameMatcher.Position);\nvar collector = group.CreateCollector(GroupEvent.Added);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之后："}]},{"type":"element","tag":"pre","props":{"code":"foreach (var e in collector.collectedEntities) {\n    // do something with all the entities\n    // that have been collected to this point of time\n}\ncollector.ClearCollectedEntities();\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"foreach (var e in collector.collectedEntities) {\n    // do something with all the entities\n    // that have been collected to this point of time\n}\ncollector.ClearCollectedEntities();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们还可以注销这个Collector"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"collector.Deactivate();"}]},{"type":"element","tag":"h1","props":{"id":"reactivesystem"},"children":[{"type":"text","value":"ReactiveSystem"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"响应式的系统就像执行式系统一样，会每隔一段时间或是在每一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Update"}]},{"type":"text","value":"中被触发"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"响应式系统的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Execute(List entities)"}]},{"type":"text","value":" 方法只会在收集器距离上一次"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Execute"}]},{"type":"text","value":"收集到新的Entity才会被执行。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"gettrigger使用Collector根据event建立一个group的entity列表"}]}]},{"type":"element","tag":"pre","props":{"code":"        protected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n            return context.CreateCollector(GameMatcher.Destroyed);\n        }\n\n        protected override bool Filter(GameEntity entity) {\n            return entity.isDestroyed;\n        }\n       \n        public void Execute() {\n            if (_collector.count != 0) {\n                foreach (var e in _collector.collectedEntities) {\n                    if (Filter(e)) {\n                        e.Retain(this);\n                        _buffer.Add(e);\n                    }\n                }\n\n                _collector.ClearCollectedEntities();\n\n                if (_buffer.Count != 0) {\n                    try {\n                        Execute(_buffer);\n                    } finally {\n                        for (int i = 0; i < _buffer.Count; i++) {\n                            _buffer[i].Release(this);\n                        }\n                        _buffer.Clear();\n                    }\n                }\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"        protected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context) {\n            return context.CreateCollector(GameMatcher.Destroyed);\n        }\n\n        protected override bool Filter(GameEntity entity) {\n            return entity.isDestroyed;\n        }\n       \n        public void Execute() {\n            if (_collector.count != 0) {\n                foreach (var e in _collector.collectedEntities) {\n                    if (Filter(e)) {\n                        e.Retain(this);\n                        _buffer.Add(e);\n                    }\n                }\n\n                _collector.ClearCollectedEntities();\n\n                if (_buffer.Count != 0) {\n                    try {\n                        Execute(_buffer);\n                    } finally {\n                        for (int i = 0; i < _buffer.Count; i++) {\n                            _buffer[i].Release(this);\n                        }\n                        _buffer.Clear();\n                    }\n                }\n            }\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如上代码:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GetTrigger"}]},{"type":"text","value":"方法中返回了一个监测了"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Destroyed"}]},{"type":"text","value":"Entity的Collector。在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"context.CreateCollector(GameMatcher.Destroyed)"}]},{"type":"text","value":" 中，我们不需要指定当一个Entity何时应当被收集的事件，因为默认就是会收集在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Added"}]},{"type":"text","value":"情况下被通知到的Entity。所以当我们增加一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Destroyed"}]},{"type":"text","value":"组件到一个Entity上时，这个Entity会"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"添加"}]},{"type":"text","value":"到"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Destroyed"}]},{"type":"text","value":"的group里面，并因此被对应的collector收集到对应的reactive system里面。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如下面的代码,AddDebugMessage就会被DebugMessageSystem收集了..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行RemoveDebugMessage()但是DebugMessageSystem仍然收集着呢,但是该实体已经没有了组件DebugMessage.所以需要过滤下Filter(GameEntity entity)否则收集的数据会报错"}]},{"type":"element","tag":"pre","props":{"code":"using Entitas;\n\npublic class HelloWorldSystem : IInitializeSystem\n{\n    // always handy to keep a reference to the context \n    // we're going to be interacting with it\n    readonly GameContext _context;\n\n    public HelloWorldSystem(Contexts contexts)\n    {\n        // get the context from the constructor\n        _context = contexts.game;\n    }\n\n    public void Initialize()\n    {\n        // create an entity and give it a DebugMessageComponent with\n        // the text \"Hello World!\" as its data\n\n        var e = _context.CreateEntity();\n        e.AddDebugMessage(\"Hello World!\");\n        e.RemoveDebugMessage(); \n    }\n}\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using Entitas;\n\npublic class HelloWorldSystem : IInitializeSystem\n{\n    // always handy to keep a reference to the context \n    // we're going to be interacting with it\n    readonly GameContext _context;\n\n    public HelloWorldSystem(Contexts contexts)\n    {\n        // get the context from the constructor\n        _context = contexts.game;\n    }\n\n    public void Initialize()\n    {\n        // create an entity and give it a DebugMessageComponent with\n        // the text \"Hello World!\" as its data\n\n        var e = _context.CreateEntity();\n        e.AddDebugMessage(\"Hello World!\");\n        e.RemoveDebugMessage(); \n    }\n}\n\n"}]}]},{"type":"element","tag":"pre","props":{"code":"using System.Collections.Generic;\nusing Entitas;\nusing UnityEngine;\n\npublic class DebugMessageSystem : ReactiveSystem<GameEntity>\n{\n    public DebugMessageSystem(Contexts contexts) : base(contexts.game)\n    {\n    }\n\n    protected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context)\n    {\n        // we only care about entities with DebugMessageComponent \n        return context.CreateCollector(GameMatcher.DebugMessage);\n    }\n\n    protected override bool Filter(GameEntity entity)\n    {\n        // good practice to perform a final check in case \n        // the entity has been altered in a different system.\n        return entity.hasDebugMessage;\n    }\n\n    protected override void Execute(List<GameEntity> entities)\n    {\n        // this is the list of entities that meet our conditions\n        foreach (var e in entities)\n        {\n            // we can safely access their DebugMessage component\n            // then grab the string data and print it\n            Debug.Log(e.debugMessage.message);\n        }\n    }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using System.Collections.Generic;\nusing Entitas;\nusing UnityEngine;\n\npublic class DebugMessageSystem : ReactiveSystem<GameEntity>\n{\n    public DebugMessageSystem(Contexts contexts) : base(contexts.game)\n    {\n    }\n\n    protected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context)\n    {\n        // we only care about entities with DebugMessageComponent \n        return context.CreateCollector(GameMatcher.DebugMessage);\n    }\n\n    protected override bool Filter(GameEntity entity)\n    {\n        // good practice to perform a final check in case \n        // the entity has been altered in a different system.\n        return entity.hasDebugMessage;\n    }\n\n    protected override void Execute(List<GameEntity> entities)\n    {\n        // this is the list of entities that meet our conditions\n        foreach (var e in entities)\n        {\n            // we can safely access their DebugMessage component\n            // then grab the string data and print it\n            Debug.Log(e.debugMessage.message);\n        }\n    }\n}\n"}]}]},{"type":"element","tag":"h1","props":{"id":"事件"},"children":[{"type":"text","value":"事件"}]},{"type":"element","tag":"h3","props":{"id":"关于replace都干了什么"},"children":[{"type":"text","value":"关于replace都干了什么"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Group具有事件 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OnEntityAdded"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OnEntityRemoved"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OnEntityUpdated"}]},{"type":"text","value":" 可以直接对组的更改做出反应。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"看源码"}]},{"type":"element","tag":"pre","props":{"code":" public void UpdateEntity(TEntity entity, int index, IComponent previousComponent, IComponent newComponent) {\n            if (_entities.Contains(entity)) {\n                if (OnEntityRemoved != null) {\n                    OnEntityRemoved(this, entity, index, previousComponent);\n                }\n                if (OnEntityAdded != null) {\n                    OnEntityAdded(this, entity, index, newComponent);\n                }\n                if (OnEntityUpdated != null) {\n                    OnEntityUpdated(\n                        this, entity, index, previousComponent, newComponent\n                    );\n                }\n            }\n        }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" public void UpdateEntity(TEntity entity, int index, IComponent previousComponent, IComponent newComponent) {\n            if (_entities.Contains(entity)) {\n                if (OnEntityRemoved != null) {\n                    OnEntityRemoved(this, entity, index, previousComponent);\n                }\n                if (OnEntityAdded != null) {\n                    OnEntityAdded(this, entity, index, newComponent);\n                }\n                if (OnEntityUpdated != null) {\n                    OnEntityUpdated(\n                        this, entity, index, previousComponent, newComponent\n                    );\n                }\n            }\n        }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在Entitas-CSharp中，我们不会真的删除或者添加一个Component。生成出来的代码会先向用户请求新的值，触发移除component的事件，设置一个新的值给这个component，然后触发一次增加component的事件。用这个方法，我们就避免了内存的分配以及模拟了一个在使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"不可修改"}]},{"type":"text","value":"（immutable）component的感觉。"}]},{"type":"element","tag":"h3","props":{"id":"group和collect还有event应该在什么地方添加"},"children":[{"type":"text","value":"group和collect,还有event应该在什么地方添加."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在系统中的构造函数中"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在entitan的system初始化Initialize前"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因为初始化系统大多会有add,remove等动作.为了保持你的group,还有collect,还有event能够监听到."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以最好在Initialize前"}]},{"type":"element","tag":"h1","props":{"id":"jenny"},"children":[{"type":"text","value":"Jenny"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"jenny使用了roslyn, DataProviders需要更改下,否则会报错.."}]},{"type":"element","tag":"pre","props":{"code":"Jenny.SearchPaths = Assets\\Plugins\\DesperateDevs\\Editor\\Plugins, \\\n                    Assets\\Plugins\\Entitas\\Editor\\Plugins, \\\n                    Jenny\\Plugins\\Entitas.Roslyn\n\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\n\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\n\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\n\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\n\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\n\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Assembly-CSharp.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Unit, \\\n                                          Combat, \\\n                                          Config, \\\n                                          Input\n\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Scripts/World\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Jenny.SearchPaths = Assets\\Plugins\\DesperateDevs\\Editor\\Plugins, \\\n                    Assets\\Plugins\\Entitas\\Editor\\Plugins, \\\n                    Jenny\\Plugins\\Entitas.Roslyn\n\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\n\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\n\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\n\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\n\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\n\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Assembly-CSharp.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Unit, \\\n                                          Combat, \\\n                                          Config, \\\n                                          Input\n\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Scripts/World\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一般来说.先运行Jenny-Auto-Import.bat.再运行Jenny-Server.bat就可以了"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"查看所有命令:"}]},{"type":"element","tag":"pre","props":{"code":".\\Jenny\\Jenny.exe help \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":".\\Jenny\\Jenny.exe help \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以VStudio为例，创建一个外部工具："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2020-01-01-unity-entitas/v2-d49876b0ae0100844a372dfb16508b27_hd.jpg"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"再之后，想要生成代码只需要保持运行"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Jenny Server"}]},{"type":"text","value":" 然后在VS中运行"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"工具/Jenny"}]},{"type":"text","value":" 就可以了，这个方法可以让你专注于VS而无需切换回Unity。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"jenny.exe client gen"}]},{"type":"text","value":"需要服务器才能使用"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"jenny gen"}]},{"type":"text","value":" 不开服务器直接可以使用"}]},{"type":"element","tag":"h2","props":{"id":"相关链接"},"children":[{"type":"text","value":"相关链接"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.jianshu.com/c/e8e4c3f4280c","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.jianshu.com/c/e8e4c3f4280c"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/OneYoungMean/Entitas-CSharp-OYM/wiki","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/OneYoungMean/Entitas-CSharp-OYM/wiki"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/sschmid/Entitas-CSharp","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/sschmid/Entitas-CSharp"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"关于replace都干了什么","depth":3,"text":"关于replace都干了什么"},{"id":"group和collect还有event应该在什么地方添加","depth":3,"text":"group和collect,还有event应该在什么地方添加."},{"id":"相关链接","depth":2,"text":"相关链接"}]}},"_type":"markdown","_id":"content:unity:2020-01-01-unity-entitas.md","_source":"content","_file":"unity/2020-01-01-unity-entitas.md","_extension":"md","date":"2020-01-01"}