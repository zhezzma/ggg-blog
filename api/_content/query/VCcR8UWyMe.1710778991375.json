{"_path":"/unity/2021-04-11-render-texture","_dir":"unity","_draft":false,"_partial":false,"_locale":"","title":"Unity RenderTexture的应用","description":"1. UGUI上显示模型UGUI上显示模型.png创建拍摄用的摄像机创建RenderTexture并绑定到摄像机camera.targetTexture上RenderTexture绑定到rawImage.texture上（rawImage见上图）创建显示的模型，相机可见注意Destroy销毁 创建出来的RenderTexture 和相机注意模型上的粒子特效由于Alpha透明通道，显示会有一点问题，可以通过Shader Blend混合处理，挂载在rawImage上。public void CreateCamera(Vector3 pos, Vector3 rot, int width, int ","body":{"type":"root","children":[{"type":"element","tag":"h4","props":{"id":"_1-ugui上显示模型"},"children":[{"type":"text","value":"1. UGUI上显示模型"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/4276633-05b67353425f7248.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"UGUI上显示模型.png"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"创建拍摄用的摄像机"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"创建RenderTexture并绑定到摄像机camera.targetTexture上"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"RenderTexture绑定到rawImage.texture上（rawImage见上图）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"创建显示的模型，相机可见"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"注意Destroy销毁 创建出来的RenderTexture 和相机"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"注意模型上的粒子特效由于Alpha透明通道，显示会有一点问题，可以通过Shader Blend混合处理，挂载在rawImage上。"}]}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"public void CreateCamera(Vector3 pos, Vector3 rot, int width, int height, string layerName, float size)\n{\n    // 创建拍摄用的摄像机\n    GameObject go = new GameObject(\"ModelCamera\");\n    _camera = go.AddComponent<Camera>();\n    _camera.clearFlags = CameraClearFlags.SolidColor;\n    _camera.transform.position = pos;\n    _camera.transform.rotation = Quaternion.Euler(rot);\n    _camera.cullingMask = LayerMask.GetMask(layerName);\n    _camera.orthographic = true;\n    _camera.orthographicSize = size;\n    _camera.backgroundColor = new Color(0,0,0,0);\n\n    // 创建RenderTexture并绑定到摄像机上\n    _renderTexture = new RenderTexture(width, height, 8);\n    _camera.targetTexture = _renderTexture;\n\n    if (_rawImage != null)\n    {\n        _rawImage.texture = _renderTexture;\n    }\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public void CreateCamera(Vector3 pos, Vector3 rot, int width, int height, string layerName, float size)\n{\n    // 创建拍摄用的摄像机\n    GameObject go = new GameObject(\"ModelCamera\");\n    _camera = go.AddComponent<Camera>();\n    _camera.clearFlags = CameraClearFlags.SolidColor;\n    _camera.transform.position = pos;\n    _camera.transform.rotation = Quaternion.Euler(rot);\n    _camera.cullingMask = LayerMask.GetMask(layerName);\n    _camera.orthographic = true;\n    _camera.orthographicSize = size;\n    _camera.backgroundColor = new Color(0,0,0,0);\n\n    // 创建RenderTexture并绑定到摄像机上\n    _renderTexture = new RenderTexture(width, height, 8);\n    _camera.targetTexture = _renderTexture;\n\n    if (_rawImage != null)\n    {\n        _rawImage.texture = _renderTexture;\n    }\n}\n"}]}]},{"type":"element","tag":"h4","props":{"id":"_2-camera相机拍照分享保存为jpg"},"children":[{"type":"text","value":"2. Camera相机拍照分享，保存为jpg"}]},{"type":"element","tag":"pre","props":{"className":["language-csharp"],"code":"private IEnumerator CameraPhoto(Camera cam, Rect rect, string name) {\n    if (rt == null) {\n        rt = RenderTexture.GetTemporary(renderTextureDesc);\n    }\n    cam.targetTexture = rt;\n    cam.Render();\n\n    RenderTexture currentActiveRT = RenderTexture.active;\n    RenderTexture.active = rt;\n    Texture2D screenShot = new Texture2D((int)rect.width, (int)rect.height, TextureFormat.RGB24, false);\n    screenShot.ReadPixels(rect, 0, 0);\n    screenShot.Apply();\n    yield return new WaitForEndOfFrame();\n\n    cam.targetTexture = null;\n    RenderTexture.active = currentActiveRT;\n\n    byte[] bytes = screenShot.EncodeToJPG();\n    string file = Application.dataPath + \"/Texture/\" + name;\n    System.IO.File.WriteAllBytes(file, bytes);\n}\n","language":"csharp","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"private IEnumerator CameraPhoto(Camera cam, Rect rect, string name) {\n    if (rt == null) {\n        rt = RenderTexture.GetTemporary(renderTextureDesc);\n    }\n    cam.targetTexture = rt;\n    cam.Render();\n\n    RenderTexture currentActiveRT = RenderTexture.active;\n    RenderTexture.active = rt;\n    Texture2D screenShot = new Texture2D((int)rect.width, (int)rect.height, TextureFormat.RGB24, false);\n    screenShot.ReadPixels(rect, 0, 0);\n    screenShot.Apply();\n    yield return new WaitForEndOfFrame();\n\n    cam.targetTexture = null;\n    RenderTexture.active = currentActiveRT;\n\n    byte[] bytes = screenShot.EncodeToJPG();\n    string file = Application.dataPath + \"/Texture/\" + name;\n    System.IO.File.WriteAllBytes(file, bytes);\n}\n"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Rendertexture的分配和销毁上有一个地方需要注意：\n如果频繁的要new一个rt出来，那么不要直接new，而是使用RenderTexture提供的GetTemporary和ReleaseTemporary，它将在内部维护一个池，反复重用一些大小格式一样的rt资源，因为让GPU为你分配一个新的texture其实是要耗时间的。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"EncodeToJPG 生成的图片体积更小"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有的时候我们想人为的控制每一次渲染，你可以将这个摄像机disable掉，然后手动的调用一次render。"}]},{"type":"element","tag":"li","props":{},"children":[]}]},{"type":"element","tag":"h4","props":{"id":"_3-制作小地图"},"children":[{"type":"text","value":"3. 制作小地图"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/17266280-153a6a121210c7f7.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这里需要新建一个Layer。依次点击菜单项Edit -> Project Settings -> Tags and Layers新建Layer命名为Minimap。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/17266280-f96f6a1a4c01bae2.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后新建三个球体。一个设为蓝色代表Unity Chan。将该球体设为Unity Chan的子对象，并将其Layer设为Minimap。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/17266280-dfdc8f16823fbf32.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对两个机器人进行同样的操作，将球体改为红色。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/17266280-4b34ec3b3279e6aa.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"现在最关键的一步来了！选中Main Camera并确保其Culling Mask中不包括Minimap这一层。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/17266280-1eb8533ebe757f7d.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后选中Minimap Camera让其Culling Mask只包括Minimap这一层。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/17266280-e16613658b088db8.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"现在这个小地图看起来就比较完善了！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img","src":"/images/2021-04-11-render-texture/17266280-694ef4f538aae2e1.png"},"children":[]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:unity:2021-04-11-render-texture.md","_source":"content","_file":"unity/2021-04-11-render-texture.md","_extension":"md","date":"2021-04-11"}