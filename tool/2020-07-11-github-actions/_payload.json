[{"data":1,"prerenderedAt":1427},["Reactive",2],{"content-query-UAqu8TMxYO":3,"content-navigation-8C37fagqQL":845},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":839,"_id":840,"_source":841,"_file":842,"_extension":843,"date":844},"/tool/2020-07-11-github-actions","tool",false,"","github actions 简单使用","如果你是一个前端项目，可以使用 Node.js 的模板，点击 Set up this workflow",{"type":11,"children":12,"toc":836},"root",[13,21,42,51,64,75,104,109,130,157,165,174,217,341,359,365,391,396,431,460,481,532,545,553,558,750,755,763,769,778,786,792,800,805,813,818,827],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"快速开始",[19],{"type":20,"value":17},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25,27,34,36],{"type":20,"value":26},"如果你是一个前端项目，可以使用 ",{"type":14,"tag":28,"props":29,"children":31},"code",{"className":30},[],[32],{"type":20,"value":33},"Node.js",{"type":20,"value":35}," 的模板，点击 ",{"type":14,"tag":28,"props":37,"children":39},{"className":38},[],[40],{"type":20,"value":41},"Set up this workflow",{"type":14,"tag":22,"props":43,"children":44},{},[45],{"type":14,"tag":46,"props":47,"children":50},"img",{"alt":48,"src":49},"v2-93f521330d963d903561c0575d2d8fac_720w","/images/2020-07-11-github-actions/v2-93f521330d963d903561c0575d2d8fac_720w.jpg",[],{"type":14,"tag":22,"props":52,"children":53},{},[54,56,62],{"type":20,"value":55},"此时生成了一个文件 ",{"type":14,"tag":28,"props":57,"children":59},{"className":58},[],[60],{"type":20,"value":61},".github/workflows/nodejs.yaml",{"type":20,"value":63},"，修改内容如下",{"type":14,"tag":65,"props":66,"children":70},"pre",{"code":67,"language":20,"meta":7,"className":68},"name: Git Action Test\n# on: 用来指定启动触发的事件，push 则表示在监听到 git push 到指定分支时触发。如此之外还可以是 pull_request。\non: [push]   \n\n#jobs:一个 CI/CD 的工作流有许多 jobs 组成，比如最典型的 job 是 lint，test，build 或者 deploy。\n#所有的 job 都是并行的,如果想顺序执行，可以这样 build-job: needs: test-job。\njobs:         \n  build:\n    #runs-on用来指定执行系统环境，不仅有常用的 Linux 发行版，还可以是 macOS 或 Windows。\n    runs-on: ubuntu-latest  \n    # steps 表示每个 job 需要执行的步骤，比如这里我分成了四步：拉取分支 → 安装 Node 环境 → 构建项目 → 上传 COS。\n    steps:  \n    #Action 是组成工作流最核心最基础的元素。每个 Action 可以看作封装的独立脚本，有自己的操作逻辑，我们只需要 uses 并通过 with 传入参数即可。\n    - uses: actions/checkout@v1 \n    - name: Use Node.js 10.x\n      uses: actions/setup-node@v1\n      with:\n        node-version: 10.x\n    - name: npm install, build\n      run: |\n        npm install\n        npm run build --if-present\n      env:\n        CI: true\n",[69],"language-text",[71],{"type":14,"tag":28,"props":72,"children":73},{"__ignoreMap":7},[74],{"type":20,"value":67},{"type":14,"tag":22,"props":76,"children":77},{},[78,80,86,88,94,96,102],{"type":20,"value":79},"执行 ",{"type":14,"tag":28,"props":81,"children":83},{"className":82},[],[84],{"type":20,"value":85},"git push",{"type":20,"value":87}," 操作，此时可以在 ",{"type":14,"tag":28,"props":89,"children":91},{"className":90},[],[92],{"type":20,"value":93},"github",{"type":20,"value":95}," 的 ",{"type":14,"tag":28,"props":97,"children":99},{"className":98},[],[100],{"type":20,"value":101},"Actions",{"type":20,"value":103}," 标签页看到执行结果",{"type":14,"tag":15,"props":105,"children":107},{"id":106},"安全相关",[108],{"type":20,"value":106},{"type":14,"tag":22,"props":110,"children":111},{},[112,114,120,122,128],{"type":20,"value":113},"如何在 ",{"type":14,"tag":28,"props":115,"children":117},{"className":116},[],[118],{"type":20,"value":119},"github action",{"type":20,"value":121}," 上访问敏感数据？如使用 ",{"type":14,"tag":28,"props":123,"children":125},{"className":124},[],[126],{"type":20,"value":127},"ssh",{"type":20,"value":129}," 登录时如何维护密码。",{"type":14,"tag":22,"props":131,"children":132},{},[133,135,141,143,149,151],{"type":20,"value":134},"我们可以在 github repo 上依次点击 ",{"type":14,"tag":28,"props":136,"children":138},{"className":137},[],[139],{"type":20,"value":140},"Settings",{"type":20,"value":142}," -> ",{"type":14,"tag":28,"props":144,"children":146},{"className":145},[],[147],{"type":20,"value":148},"Secrets",{"type":20,"value":150}," 设置 ",{"type":14,"tag":28,"props":152,"children":154},{"className":153},[],[155],{"type":20,"value":156},"secret",{"type":14,"tag":22,"props":158,"children":159},{},[160],{"type":14,"tag":46,"props":161,"children":164},{"alt":162,"src":163},"v2-51c0ee11b4bc61312d8e1af14d906432_720w","/images/2020-07-11-github-actions/v2-51c0ee11b4bc61312d8e1af14d906432_720w.jpg",[],{"type":14,"tag":65,"props":166,"children":169},{"code":167,"language":20,"meta":7,"className":168},"- name: setup aliyun oss\n  uses: manyuanrong/setup-ossutil@master\n  with:\n    endpoint: oss-cn-beijing.aliyuncs.com\n    access-key-id: ${{ secrets.OSS_KEY_ID }}\n    access-key-secret: ${{ secrets.OSS_KEY_SECRET }}\n",[69],[170],{"type":14,"tag":28,"props":171,"children":172},{"__ignoreMap":7},[173],{"type":20,"value":167},{"type":14,"tag":22,"props":175,"children":176},{},[177,179,184,186,192,194,200,202,208,210,215],{"type":20,"value":178},"这里的 ",{"type":14,"tag":28,"props":180,"children":182},{"className":181},[],[183],{"type":20,"value":156},{"type":20,"value":185}," 就是一种 ",{"type":14,"tag":28,"props":187,"children":189},{"className":188},[],[190],{"type":20,"value":191},"context",{"type":20,"value":193},"，描述 CI/CD 一个 ",{"type":14,"tag":28,"props":195,"children":197},{"className":196},[],[198],{"type":20,"value":199},"workflow",{"type":20,"value":201}," 中的上下文信息，使用 ",{"type":14,"tag":28,"props":203,"children":205},{"className":204},[],[206],{"type":20,"value":207},"${{ expression }}",{"type":20,"value":209}," 语法表示。除了 ",{"type":14,"tag":28,"props":211,"children":213},{"className":212},[],[214],{"type":20,"value":156},{"type":20,"value":216},"，还有",{"type":14,"tag":218,"props":219,"children":220},"ul",{},[221,271,282,314],{"type":14,"tag":222,"props":223,"children":224},"li",{},[225,230,232,237,239,245,247,253,255,261,263,269],{"type":14,"tag":28,"props":226,"children":228},{"className":227},[],[229],{"type":20,"value":93},{"type":20,"value":231},": ",{"type":14,"tag":28,"props":233,"children":235},{"className":234},[],[236],{"type":20,"value":199},{"type":20,"value":238}," 的信息，如 ",{"type":14,"tag":28,"props":240,"children":242},{"className":241},[],[243],{"type":20,"value":244},"github.sha",{"type":20,"value":246}," 可以获取当前的 ",{"type":14,"tag":28,"props":248,"children":250},{"className":249},[],[251],{"type":20,"value":252},"commit SHA",{"type":20,"value":254},"，我们可以利用它为 ",{"type":14,"tag":28,"props":256,"children":258},{"className":257},[],[259],{"type":20,"value":260},"sentry",{"type":20,"value":262}," 或者 ",{"type":14,"tag":28,"props":264,"children":266},{"className":265},[],[267],{"type":20,"value":268},"docker image",{"type":20,"value":270}," 打入版本号",{"type":14,"tag":222,"props":272,"children":273},{},[274,280],{"type":14,"tag":28,"props":275,"children":277},{"className":276},[],[278],{"type":20,"value":279},"env",{"type":20,"value":281},": 环境变量",{"type":14,"tag":222,"props":283,"children":284},{},[285,291,293,298,299,305,307,312],{"type":14,"tag":28,"props":286,"children":288},{"className":287},[],[289],{"type":20,"value":290},"job",{"type":20,"value":292},": 当前执行 ",{"type":14,"tag":28,"props":294,"children":296},{"className":295},[],[297],{"type":20,"value":290},{"type":20,"value":238},{"type":14,"tag":28,"props":300,"children":302},{"className":301},[],[303],{"type":20,"value":304},"job.status",{"type":20,"value":306}," 表示当前 ",{"type":14,"tag":28,"props":308,"children":310},{"className":309},[],[311],{"type":20,"value":290},{"type":20,"value":313}," 的执行状态",{"type":14,"tag":222,"props":315,"children":316},{},[317,323,325,331,333,339],{"type":14,"tag":28,"props":318,"children":320},{"className":319},[],[321],{"type":20,"value":322},"matrix",{"type":20,"value":324},": 描述一些构建信息，如 ",{"type":14,"tag":28,"props":326,"children":328},{"className":327},[],[329],{"type":20,"value":330},"node",{"type":20,"value":332}," 以及 ",{"type":14,"tag":28,"props":334,"children":336},{"className":335},[],[337],{"type":20,"value":338},"os",{"type":20,"value":340}," 版本号",{"type":14,"tag":22,"props":342,"children":343},{},[344,346,351,353],{"type":20,"value":345},"更多 ",{"type":14,"tag":28,"props":347,"children":349},{"className":348},[],[350],{"type":20,"value":191},{"type":20,"value":352}," 信息可以参考官方文档 ",{"type":14,"tag":354,"props":355,"children":356},"strong",{},[357],{"type":20,"value":358},"Contexts and expression syntax for GitHub Actions[4]",{"type":14,"tag":15,"props":360,"children":362},{"id":361},"自动创建项目release",[363],{"type":20,"value":364},"自动创建项目Release",{"type":14,"tag":22,"props":366,"children":367},{},[368,370,376,378,384,386],{"type":20,"value":369},"有些项目在发布新版本时，一般都会创建一个",{"type":14,"tag":28,"props":371,"children":373},{"className":372},[],[374],{"type":20,"value":375},"Github Release",{"type":20,"value":377},"，并且把对应编译好之后的文件上传到",{"type":14,"tag":28,"props":379,"children":381},{"className":380},[],[382],{"type":20,"value":383},"Release",{"type":20,"value":385},"的资源列表中，例如：\n",{"type":14,"tag":46,"props":387,"children":390},{"alt":388,"src":389},"2659679572-62492fa02f19b6f9","/images/2020-07-11-github-actions/2659679572-62492fa02f19b6f9.png",[],{"type":14,"tag":22,"props":392,"children":393},{},[394],{"type":20,"value":395},"如果这个使用手动操作的话，不仅步骤重复又繁琐(每次都要编译出各个操作系统对应的发行包再进行上传)，而且最蛋疼的是对于国内的网络环境来说，上传文件速度简直不能忍，好不容易上传了一大半搞不好就因为网络原因又要重新上传，相信用过的人都深有体会。",{"type":14,"tag":22,"props":397,"children":398},{},[399,401,407,409,414,416,421,423,429],{"type":20,"value":400},"我就在想如果能用",{"type":14,"tag":28,"props":402,"children":404},{"className":403},[],[405],{"type":20,"value":406},"Github Actions",{"type":20,"value":408},"来创建",{"type":14,"tag":28,"props":410,"children":412},{"className":411},[],[413],{"type":20,"value":383},{"type":20,"value":415},",并且做对应的编译和上传，那上面的问题都可以迎刃而解了，于是在官方市场搜索了一下",{"type":14,"tag":28,"props":417,"children":419},{"className":418},[],[420],{"type":20,"value":383},{"type":20,"value":422},"关键字，果然已经有提供对应的",{"type":14,"tag":28,"props":424,"children":426},{"className":425},[],[427],{"type":20,"value":428},"actions",{"type":20,"value":430},"了：",{"type":14,"tag":218,"props":432,"children":433},{},[434,448],{"type":14,"tag":222,"props":435,"children":436},{},[437,446],{"type":14,"tag":438,"props":439,"children":443},"a",{"href":440,"rel":441},"https://github.com/actions/create-release",[442],"nofollow",[444],{"type":20,"value":445},"create-release",{"type":20,"value":447},": 用于创建 release",{"type":14,"tag":222,"props":449,"children":450},{},[451,458],{"type":14,"tag":438,"props":452,"children":455},{"href":453,"rel":454},"https://github.com/actions/upload-release-asset",[442],[456],{"type":20,"value":457},"upload-release-asset",{"type":20,"value":459},": 用于上传资源到对应的 release 中",{"type":14,"tag":22,"props":461,"children":462},{},[463,465,471,473,479],{"type":20,"value":464},"接着创建一个",{"type":14,"tag":28,"props":466,"children":468},{"className":467},[],[469],{"type":20,"value":470},"Github仓库",{"type":20,"value":472},"，我测试的仓库地址是",{"type":14,"tag":438,"props":474,"children":477},{"href":475,"rel":476},"https://github.com/monkeyWie/github-actions-demo",[442],[478],{"type":20,"value":475},{"type":20,"value":480},"，项目用 go 语言写的，代码非常简单就是两个 hello world 级别的代码，里面包含了普通的 go 程序和 cgo 程序。",{"type":14,"tag":22,"props":482,"children":483},{},[484,486,492,494,499,501,507,509,515,517,523,525,530],{"type":20,"value":485},"项目的构建流程是在项目",{"type":14,"tag":28,"props":487,"children":489},{"className":488},[],[490],{"type":20,"value":491},"git push --tags",{"type":20,"value":493},"的时候，触发 workflow，通过",{"type":14,"tag":28,"props":495,"children":497},{"className":496},[],[498],{"type":20,"value":406},{"type":20,"value":500},"编译出来",{"type":14,"tag":28,"props":502,"children":504},{"className":503},[],[505],{"type":20,"value":506},"Windows、Linux、macOS",{"type":20,"value":508},"三个操作系统对应的 64 位可执行文件，再根据",{"type":14,"tag":28,"props":510,"children":512},{"className":511},[],[513],{"type":20,"value":514},"tag name",{"type":20,"value":516},"和",{"type":14,"tag":28,"props":518,"children":520},{"className":519},[],[521],{"type":20,"value":522},"tag message",{"type":20,"value":524},"来创建对应的",{"type":14,"tag":28,"props":526,"children":528},{"className":527},[],[529],{"type":20,"value":375},{"type":20,"value":531},"，并将编译好的文件上传。",{"type":14,"tag":22,"props":533,"children":534},{},[535,537,543],{"type":20,"value":536},"同样的创建一个",{"type":14,"tag":28,"props":538,"children":540},{"className":539},[],[541],{"type":20,"value":542},".github/workflows/main.yml",{"type":20,"value":544},"文件，内容如下：",{"type":14,"tag":65,"props":546,"children":548},{"code":547},"name: CI\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - \"v*\" # Push events to matching v*, i.e. v1.0, v20.15.10\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n      - name: Use Golang\n        uses: actions/setup-go@v1\n        with:\n          go-version: \"1.13.x\"\n      - name: Build normal\n        run: |\n          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o normal-windows-x64.exe cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o normal-linux-x64 cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o normal-darwin-x64 cmd/normal/main.go\n          zip normal-windows-x64.zip normal-windows-x64.exe\n          zip normal-linux-x64.zip normal-linux-x64\n          zip normal-darwin-x64.zip normal-darwin-x64\n      - name: Build cgo\n        run: |\n          go get github.com/monkeyWie/xgo\n          ~/go/bin/xgo -targets=windows/amd64,linux/amd64,darwin/amd64 -ldflags=\"-w -s\" -pkg=cmd/cgo/main.go -out=cgo .\n          mv cgo-windows-* cgo-windows-x64.exe\n          mv cgo-linux-* cgo-linux-x64\n          mv cgo-darwin-* cgo-darwin-x64\n          zip cgo-windows-x64.zip cgo-windows-x64.exe\n          zip cgo-linux-x64.zip cgo-linux-x64\n          zip cgo-darwin-x64.zip cgo-darwin-x64\n      - name: Create Release\n        id: create_release\n        uses: monkeyWie/create-release@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release normal windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-windows-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-linux-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-darwin-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n\n      - name: Upload Release cgo windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-windows-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-linux-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-darwin-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n",[549],{"type":14,"tag":28,"props":550,"children":551},{"__ignoreMap":7},[552],{"type":20,"value":547},{"type":14,"tag":22,"props":554,"children":555},{},[556],{"type":20,"value":557},"构建流程如下：",{"type":14,"tag":559,"props":560,"children":561},"ol",{},[562,575,588,601,614,625,708],{"type":14,"tag":222,"props":563,"children":564},{},[565,567,573],{"type":20,"value":566},"监听 tag name 为",{"type":14,"tag":28,"props":568,"children":570},{"className":569},[],[571],{"type":20,"value":572},"v",{"type":20,"value":574},"开头的 push",{"type":14,"tag":222,"props":576,"children":577},{},[578,580,586],{"type":20,"value":579},"运行一个 job，在",{"type":14,"tag":28,"props":581,"children":583},{"className":582},[],[584],{"type":20,"value":585},"ubuntu",{"type":20,"value":587},"虚拟机环境下",{"type":14,"tag":222,"props":589,"children":590},{},[591,593,599],{"type":20,"value":592},"拉取源码，安装",{"type":14,"tag":28,"props":594,"children":596},{"className":595},[],[597],{"type":20,"value":598},"golang 1.13.x",{"type":20,"value":600},"环境",{"type":14,"tag":222,"props":602,"children":603},{},[604,606,612],{"type":20,"value":605},"使用",{"type":14,"tag":28,"props":607,"children":609},{"className":608},[],[610],{"type":20,"value":611},"go build",{"type":20,"value":613},"交叉编译出不同操作系统下 64 位可执行文件，并使用 zip 压缩",{"type":14,"tag":222,"props":615,"children":616},{},[617,618,624],{"type":20,"value":605},{"type":14,"tag":28,"props":619,"children":621},{"className":620},[],[622],{"type":20,"value":623},"xgo",{"type":20,"value":613},{"type":14,"tag":222,"props":626,"children":627},{},[628,629,635,637,643,645,650,652,659,661,667,669,675,677,683,685,690,691,698,700,706],{"type":20,"value":605},{"type":14,"tag":28,"props":630,"children":632},{"className":631},[],[633],{"type":20,"value":634},"monkeyWie/create-release@master",{"type":20,"value":636},"创建 Release，其中会用到",{"type":14,"tag":28,"props":638,"children":640},{"className":639},[],[641],{"type":20,"value":642},"${{ secrets.GITHUB_TOKEN }}",{"type":20,"value":644},"，这是",{"type":14,"tag":28,"props":646,"children":648},{"className":647},[],[649],{"type":20,"value":406},{"type":20,"value":651},"内置的一个",{"type":14,"tag":438,"props":653,"children":656},{"href":654,"rel":655},"https://help.github.com/en/github/automating-your-workflow-with-github-actions/virtual-environments-for-github-actions#github_token-secret",[442],[657],{"type":20,"value":658},"秘钥",{"type":20,"value":660},"，用于授权访问你自己的 github 存储库，原理就是使用这个",{"type":14,"tag":28,"props":662,"children":664},{"className":663},[],[665],{"type":20,"value":666},"TOKEN",{"type":20,"value":668},"调用",{"type":14,"tag":28,"props":670,"children":672},{"className":671},[],[673],{"type":20,"value":674},"Github API",{"type":20,"value":676},"来进行创建 release，还有一个",{"type":14,"tag":28,"props":678,"children":680},{"className":679},[],[681],{"type":20,"value":682},"${{ github.ref }}",{"type":20,"value":684},"也是",{"type":14,"tag":28,"props":686,"children":688},{"className":687},[],[689],{"type":20,"value":406},{"type":20,"value":651},{"type":14,"tag":438,"props":692,"children":695},{"href":693,"rel":694},"https://help.github.com/en/github/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#github-context",[442],[696],{"type":20,"value":697},"变量",{"type":20,"value":699},"，然后通过 action 的",{"type":14,"tag":28,"props":701,"children":703},{"className":702},[],[704],{"type":20,"value":705},"with",{"type":20,"value":707},"进行参数传递。",{"type":14,"tag":222,"props":709,"children":710},{},[711,712,718,720,726,727,733,735,741,743,748],{"type":20,"value":605},{"type":14,"tag":28,"props":713,"children":715},{"className":714},[],[716],{"type":20,"value":717},"actions/upload-release-asset@v1.0.1",{"type":20,"value":719},"上传文件，这里使用了两个表达式",{"type":14,"tag":28,"props":721,"children":723},{"className":722},[],[724],{"type":20,"value":725},"${{ steps.create_release.outputs.upload_url }}",{"type":20,"value":516},{"type":14,"tag":28,"props":728,"children":730},{"className":729},[],[731],{"type":20,"value":732},"${{ steps.create_release.outputs.tag }}",{"type":20,"value":734},"，可以获取到指定",{"type":14,"tag":28,"props":736,"children":738},{"className":737},[],[739],{"type":20,"value":740},"action",{"type":20,"value":742},"的输出，第一个是获取创建好的 release 对应的上传地址，第二个是获取对应的 tag(例如：v1.0.0)，这样就可以在把上传的文件带上版本号。因为这个",{"type":14,"tag":28,"props":744,"children":746},{"className":745},[],[747],{"type":20,"value":740},{"type":20,"value":749},"不支持多个文件上传，所以就写了多个 action 进行上传。",{"type":14,"tag":15,"props":751,"children":753},{"id":752},"ssh命令",[754],{"type":20,"value":752},{"type":14,"tag":65,"props":756,"children":758},{"code":757},"name: Publish\non: [push]\njobs:\n  build:\n    name: SSH command\n    runs-on: ubuntu-latest\n    steps:\n    - name: git fetch\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ secrets.SERVER_HOST }}\n        username: ${{ secrets.SERVER_USERNAME }}\n        password: ${{ secrets.SERVER_PASSWORD }}\n        command_timeout: 10m\n        script: |\n          git fetch --all\n          git reset --hard origin/master\n  build:\n    name: ...\n    runs-on: ...\n    ...\n",[759],{"type":14,"tag":28,"props":760,"children":761},{"__ignoreMap":7},[762],{"type":20,"value":757},{"type":14,"tag":15,"props":764,"children":766},{"id":765},"dotfx",[767],{"type":20,"value":768},"dotFx",{"type":14,"tag":22,"props":770,"children":771},{},[772],{"type":14,"tag":438,"props":773,"children":776},{"href":774,"rel":775},"https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html",[442],[777],{"type":20,"value":774},{"type":14,"tag":65,"props":779,"children":781},{"code":780},"name: docfx build\non:\n  push:\n    branches:\n      - dev\njobs:\n  build:\n    name: Build\n    runs-on: windows-latest\n    steps:\n      # Check out the branch that triggered this workflow to the 'source' subdirectory\n      - name: Checkout Code\n        uses: actions/checkout@v2\n        with:\n          ref: dev\n          path: source\n      - name: install DocFX\n        run: \"& choco install docfx -y\"\n      # Run a build\n      - name: Build docs\n        run: \"& docfx ./docfx.json\"\n        working-directory: ./source\n      # Check out gh-pages branch to the 'docs' subdirectory\n      - name: Checkout docs\n        uses: actions/checkout@v2\n        with:\n          ref: gh-pages\n          path: docs\n      # Sync the site\n      - name: Clear docs repo\n        run: Get-ChildItem -Force -Exclude .git | ForEach-Object { Remove-Item -Recurse -Verbose -Force $_ }\n        working-directory: ./docs\n      - name: Sync new content\n        run: Copy-Item -Recurse -Verbose -Force \"$env:GITHUB_WORKSPACE/source/_site/*\" \"$env:GITHUB_WORKSPACE/docs\"\n        working-directory: ./docs\n        # update docs\n      - name: Commit to gh-pages and push\n        run: |\n          $ErrorActionPreference = \"Continue\"\n          git add -A\n          git diff HEAD --exit-code\n          if ($LASTEXITCODE -eq 0) {\n            Write-Host \"No changes to commit!\"\n          } else {\n            git config --global user.name \"github-actions-docfx[bot]\"\n            git config --global user.email \"weihanli@outlook.com\"\n            git commit -m \"Updated docs from commit $env:GITHUB_SHA on $env:GITHUB_REF\"\n            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}\n            git push origin gh-pages\n          }\n        working-directory: ./docs\n",[782],{"type":14,"tag":28,"props":783,"children":784},{"__ignoreMap":7},[785],{"type":20,"value":780},{"type":14,"tag":15,"props":787,"children":789},{"id":788},"hexo",[790],{"type":20,"value":791},"Hexo",{"type":14,"tag":65,"props":793,"children":795},{"code":794},"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Hexo \n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装hexo\n      run : |\n        npm install -g hexo-cli\n  \n    - name: 生成博客\n      run : |\n        cd main\n        npm install\n        hexo clean\n        hexo generate\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/public/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n        \n",[796],{"type":14,"tag":28,"props":797,"children":798},{"__ignoreMap":7},[799],{"type":20,"value":794},{"type":14,"tag":15,"props":801,"children":803},{"id":802},"gitbook",[804],{"type":20,"value":802},{"type":14,"tag":65,"props":806,"children":808},{"code":807},"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: GitBook\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [12.18.2]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装gitbook\n      run : |\n        npm install -g gitbook-cli\n  \n    - name: 生成书籍\n      run : |\n        cd main/Docs\n        gitbook install\n        gitbook build\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/Docs/_book/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n",[809],{"type":14,"tag":28,"props":810,"children":811},{"__ignoreMap":7},[812],{"type":20,"value":807},{"type":14,"tag":15,"props":814,"children":816},{"id":815},"市场",[817],{"type":20,"value":815},{"type":14,"tag":22,"props":819,"children":820},{},[821],{"type":14,"tag":438,"props":822,"children":825},{"href":823,"rel":824},"https://github.com/marketplace",[442],[826],{"type":20,"value":823},{"type":14,"tag":22,"props":828,"children":829},{},[830],{"type":14,"tag":438,"props":831,"children":834},{"href":832,"rel":833},"https://docs.github.com/cn/actions/configuring-and-managing-workflows/using-environment-variables",[442],[835],{"type":20,"value":832},{"title":7,"searchDepth":837,"depth":837,"links":838},2,[],"markdown","content:tool:2020-07-11-github-actions.md","content","tool/2020-07-11-github-actions.md","md","2020-07-11",[846,856,983,1032,1084,1097,1207],{"title":847,"_path":848,"children":849},"Art","/art",[850,853],{"title":851,"_path":852},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":854,"_path":855},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":857,"_path":858,"children":859},"Dotnet","/dotnet",[860,863,866,869,872,875,878,881,884,887,890,893,896,899,902,905,908,911,914,917,920,923,926,929,932,935,938,941,944,947,950,953,956,959,962,965,968,971,974,977,980],{"title":861,"_path":862},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":864,"_path":865},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":867,"_path":868},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":870,"_path":871},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":873,"_path":874},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":876,"_path":877},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":879,"_path":880},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":882,"_path":883},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":885,"_path":886},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":888,"_path":889},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":891,"_path":892},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":894,"_path":895},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":897,"_path":898},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":900,"_path":901},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":903,"_path":904},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":906,"_path":907},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":909,"_path":910},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":912,"_path":913},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":915,"_path":916},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":918,"_path":919},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":921,"_path":922},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":924,"_path":925},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":927,"_path":928},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":930,"_path":931},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":933,"_path":934},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":936,"_path":937},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":939,"_path":940},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":942,"_path":943},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":945,"_path":946},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":948,"_path":949},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":951,"_path":952},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":954,"_path":955},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":957,"_path":958},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":960,"_path":961},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":963,"_path":964},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":966,"_path":967},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":969,"_path":970},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":972,"_path":973},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":975,"_path":976},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":978,"_path":979},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":981,"_path":982},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":984,"_path":985,"children":986},"Game","/game",[987,990,993,996,999,1002,1005,1008,1011,1014,1017,1020,1023,1026,1029],{"title":988,"_path":989},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":991,"_path":992},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":994,"_path":995},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":997,"_path":998},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":1000,"_path":1001},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":1003,"_path":1004},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":1006,"_path":1007},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":1009,"_path":1010},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":1012,"_path":1013},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":1015,"_path":1016},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":1018,"_path":1019},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":1021,"_path":1022},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":1024,"_path":1025},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":1027,"_path":1028},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":1030,"_path":1031},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":1033,"_path":1034,"children":1035},"Gyj","/gyj",[1036,1039,1042,1045,1048,1051,1054,1057,1060,1063,1066,1069,1072,1075,1078,1081],{"title":1037,"_path":1038},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":1040,"_path":1041},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":1043,"_path":1044},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":1046,"_path":1047},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1049,"_path":1050},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1052,"_path":1053},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1055,"_path":1056},"玩法","/gyj/2022-08-22-wanfa",{"title":1058,"_path":1059},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1061,"_path":1062},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1064,"_path":1065},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1067,"_path":1068},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1070,"_path":1071},"门派内容相关","/gyj/2022-11-17-sect",{"title":1073,"_path":1074},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1076,"_path":1077},"种植","/gyj/2022-12-01-zhongzhi",{"title":1079,"_path":1080},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1082,"_path":1083},"跑商","/gyj/2023-11-01-paoshang",{"title":1085,"_path":1086,"children":1087},"Js","/js",[1088,1091,1094],{"title":1089,"_path":1090},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1092,"_path":1093},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1095,"_path":1096},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1098,"_path":1099,"children":1100},"Tool","/tool",[1101,1104,1107,1110,1113,1116,1119,1122,1125,1128,1131,1134,1137,1140,1143,1146,1149,1152,1153,1156,1159,1162,1165,1168,1171,1174,1177,1180,1183,1186,1189,1192,1195,1198,1201,1204],{"title":1102,"_path":1103},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1105,"_path":1106},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1108,"_path":1109},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1111,"_path":1112},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1114,"_path":1115},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1117,"_path":1118},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1120,"_path":1121},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1123,"_path":1124},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1126,"_path":1127},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1129,"_path":1130},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1132,"_path":1133},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1135,"_path":1136},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1138,"_path":1139},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1141,"_path":1142},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1144,"_path":1145},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1147,"_path":1148},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1150,"_path":1151},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":8,"_path":4},{"title":1154,"_path":1155},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1157,"_path":1158},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1160,"_path":1161},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1163,"_path":1164},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1166,"_path":1167},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1169,"_path":1170},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1172,"_path":1173},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1175,"_path":1176},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1178,"_path":1179},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1181,"_path":1182},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1184,"_path":1185},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1187,"_path":1188},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1190,"_path":1191},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1193,"_path":1194},"rider的使用","/tool/2022-08-02-rider-use",{"title":1196,"_path":1197},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1199,"_path":1200},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1202,"_path":1203},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1205,"_path":1206},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1208,"_path":1209,"children":1210},"Unity","/unity",[1211,1214,1217,1220,1223,1226,1229,1232,1235,1238,1241,1244,1247,1250,1253,1256,1259,1262,1265,1268,1271,1274,1277,1280,1283,1286,1289,1292,1295,1298,1301,1304,1307,1310,1313,1316,1319,1322,1325,1328,1331,1334,1337,1340,1343,1346,1349,1352,1355,1358,1361,1364,1367,1370,1373,1376,1379,1382,1385,1388,1391,1394,1397,1400,1403,1406,1409,1412,1415,1418,1421,1424],{"title":1212,"_path":1213},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1215,"_path":1216},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1218,"_path":1219},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1221,"_path":1222},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1224,"_path":1225},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1227,"_path":1228},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1230,"_path":1231},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1233,"_path":1234},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1236,"_path":1237},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1239,"_path":1240},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":1242,"_path":1243},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":1245,"_path":1246},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1248,"_path":1249},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1251,"_path":1252},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1254,"_path":1255},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1257,"_path":1258},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1260,"_path":1261},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1263,"_path":1264},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1266,"_path":1267},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1269,"_path":1270},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1272,"_path":1273},"技能系统","/unity/2020-02-15-skill-system",{"title":1275,"_path":1276},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1278,"_path":1279},"角色状态设计","/unity/2020-02-17-character-states",{"title":1281,"_path":1282},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1284,"_path":1285},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1287,"_path":1288},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1290,"_path":1291},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1293,"_path":1294},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1296,"_path":1297},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1299,"_path":1300},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1302,"_path":1303},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1305,"_path":1306},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1308,"_path":1309},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1311,"_path":1312},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1314,"_path":1315},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1317,"_path":1318},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1320,"_path":1321},"unity的addressables","/unity/2020-09-12-addressables",{"title":1323,"_path":1324},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1326,"_path":1327},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1329,"_path":1330},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1332,"_path":1333},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1335,"_path":1336},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1338,"_path":1339},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1341,"_path":1342},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1344,"_path":1345},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1347,"_path":1348},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1350,"_path":1351},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1353,"_path":1354},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1356,"_path":1357},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1359,"_path":1360},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1362,"_path":1363},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1365,"_path":1366},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1368,"_path":1369},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1371,"_path":1372},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1374,"_path":1375},"ability","/unity/2020-11-16-dotssample",{"title":1377,"_path":1378},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1380,"_path":1381},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1383,"_path":1384},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1386,"_path":1387},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1389,"_path":1390},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1392,"_path":1393},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1395,"_path":1396},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1398,"_path":1399},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1401,"_path":1402},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1404,"_path":1405},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1407,"_path":1408},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1410,"_path":1411},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1413,"_path":1414},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1416,"_path":1417},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1419,"_path":1420},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1422,"_path":1423},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1425,"_path":1426},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040010]