[{"data":1,"prerenderedAt":3796},["Reactive",2],{"content-navigation-8C37fagqQL":3,"content-query-MASVvYnR3w":587},[4,14,141,190,242,255,367],{"title":5,"_path":6,"children":7},"Art","/art",[8,11],{"title":9,"_path":10},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":12,"_path":13},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":15,"_path":16,"children":17},"Dotnet","/dotnet",[18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138],{"title":19,"_path":20},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":22,"_path":23},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":25,"_path":26},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":28,"_path":29},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":31,"_path":32},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":34,"_path":35},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":37,"_path":38},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":40,"_path":41},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":43,"_path":44},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":46,"_path":47},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":49,"_path":50},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":52,"_path":53},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":55,"_path":56},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":58,"_path":59},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":61,"_path":62},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":64,"_path":65},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":67,"_path":68},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":70,"_path":71},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":73,"_path":74},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":76,"_path":77},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":79,"_path":80},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":82,"_path":83},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":85,"_path":86},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":88,"_path":89},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":91,"_path":92},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":94,"_path":95},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":97,"_path":98},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":100,"_path":101},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":103,"_path":104},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":106,"_path":107},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":109,"_path":110},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":112,"_path":113},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":115,"_path":116},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":118,"_path":119},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":121,"_path":122},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":124,"_path":125},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":127,"_path":128},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":130,"_path":131},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":133,"_path":134},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":136,"_path":137},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":139,"_path":140},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":142,"_path":143,"children":144},"Game","/game",[145,148,151,154,157,160,163,166,169,172,175,178,181,184,187],{"title":146,"_path":147},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":149,"_path":150},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":152,"_path":153},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":155,"_path":156},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":158,"_path":159},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":161,"_path":162},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":164,"_path":165},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":167,"_path":168},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":170,"_path":171},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":173,"_path":174},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":176,"_path":177},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":179,"_path":180},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":182,"_path":183},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":185,"_path":186},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":188,"_path":189},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":191,"_path":192,"children":193},"Gyj","/gyj",[194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239],{"title":195,"_path":196},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":198,"_path":199},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":201,"_path":202},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":204,"_path":205},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":207,"_path":208},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":210,"_path":211},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":213,"_path":214},"玩法","/gyj/2022-08-22-wanfa",{"title":216,"_path":217},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":219,"_path":220},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":222,"_path":223},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":225,"_path":226},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":228,"_path":229},"门派内容相关","/gyj/2022-11-17-sect",{"title":231,"_path":232},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":234,"_path":235},"种植","/gyj/2022-12-01-zhongzhi",{"title":237,"_path":238},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":240,"_path":241},"跑商","/gyj/2023-11-01-paoshang",{"title":243,"_path":244,"children":245},"Js","/js",[246,249,252],{"title":247,"_path":248},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":250,"_path":251},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":253,"_path":254},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":256,"_path":257,"children":258},"Tool","/tool",[259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364],{"title":260,"_path":261},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":263,"_path":264},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":266,"_path":267},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":269,"_path":270},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":272,"_path":273},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":275,"_path":276},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":278,"_path":279},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":281,"_path":282},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":284,"_path":285},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":287,"_path":288},"mac下brew 使用","/tool/2020-01-13-brew",{"title":290,"_path":291},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":293,"_path":294},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":296,"_path":297},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":299,"_path":300},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":302,"_path":303},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":305,"_path":306},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":308,"_path":309},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":311,"_path":312},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":314,"_path":315},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":317,"_path":318},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":320,"_path":321},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":323,"_path":324},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":326,"_path":327},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":329,"_path":330},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":332,"_path":333},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":335,"_path":336},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":338,"_path":339},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":341,"_path":342},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":344,"_path":345},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":347,"_path":348},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":350,"_path":351},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":353,"_path":354},"rider的使用","/tool/2022-08-02-rider-use",{"title":356,"_path":357},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":359,"_path":360},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":362,"_path":363},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":365,"_path":366},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":368,"_path":369,"children":370},"Unity","/unity",[371,374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584],{"title":372,"_path":373},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":375,"_path":376},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":378,"_path":379},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":381,"_path":382},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":384,"_path":385},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":387,"_path":388},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":390,"_path":391},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":393,"_path":394},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":396,"_path":397},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":399,"_path":400},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":402,"_path":403},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":405,"_path":406},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":408,"_path":409},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":411,"_path":412},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":414,"_path":415},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":417,"_path":418},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":420,"_path":421},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":423,"_path":424},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":426,"_path":427},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":429,"_path":430},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":432,"_path":433},"技能系统","/unity/2020-02-15-skill-system",{"title":435,"_path":436},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":438,"_path":439},"角色状态设计","/unity/2020-02-17-character-states",{"title":441,"_path":442},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":444,"_path":445},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":447,"_path":448},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":450,"_path":451},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":453,"_path":454},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":456,"_path":457},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":459,"_path":460},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":462,"_path":463},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":465,"_path":466},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":468,"_path":469},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":471,"_path":472},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":474,"_path":475},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":477,"_path":478},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":480,"_path":481},"unity的addressables","/unity/2020-09-12-addressables",{"title":483,"_path":484},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":486,"_path":487},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":489,"_path":490},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":492,"_path":493},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":495,"_path":496},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":498,"_path":499},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":501,"_path":502},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":504,"_path":505},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":507,"_path":508},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":510,"_path":511},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":513,"_path":514},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":516,"_path":517},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":519,"_path":520},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":522,"_path":523},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":525,"_path":526},"简单保存工具","/unity/2020-11-13-simple-save",{"title":528,"_path":529},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":531,"_path":532},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":534,"_path":535},"ability","/unity/2020-11-16-dotssample",{"title":537,"_path":538},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":540,"_path":541},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":543,"_path":544},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":546,"_path":547},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":549,"_path":550},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":552,"_path":553},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":555,"_path":556},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":558,"_path":559},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":561,"_path":562},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":564,"_path":565},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":567,"_path":568},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":570,"_path":571},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":573,"_path":574},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":576,"_path":577},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":579,"_path":580},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":582,"_path":583},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":585,"_path":586},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",[588,1133,1518,1874,1928,2160,2359,2449,2544,3078,3211,3295,3557,3653,3708],{"_path":366,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":365,"description":592,"body":593,"_type":1127,"_id":1128,"_source":1129,"_file":1130,"_extension":1131,"date":1132},"tool",false,"","在学习 Python Web 开发时候，可能会遇到诸如 uwsgi、wsgi 等名词，下面通过梳理总结，探究它们之间的关系。",{"type":594,"children":595,"toc":1110},"root",[596,603,610,615,620,625,630,635,640,648,653,658,667,672,679,684,692,699,704,709,715,720,725,730,735,740,752,757,762,769,774,780,785,790,798,803,808,813,818,824,834,839,846,851,856,861,866,871,876,882,887,892,897,902,917,923,928,946,953,958,966,971,976,983,988,1001,1006,1014,1019,1027,1032,1040,1045,1050,1068,1073,1079,1089,1094,1099,1105],{"type":597,"tag":598,"props":599,"children":600},"element","p",{},[601],{"type":602,"value":592},"text",{"type":597,"tag":604,"props":605,"children":607},"h3",{"id":606},"cgi",[608],{"type":602,"value":609},"CGI",{"type":597,"tag":598,"props":611,"children":612},{},[613],{"type":602,"value":614},"CGI（Common Gateway Interface）通用网关接口，是一个协议，是外部应用程序（CGI 程序）与 Web 服务器之间的接口标准，该协议定义了 Web 服务器调用外部应用程序的时候需要输入的参数，和给 Web 服务器的返回结果。",{"type":597,"tag":598,"props":616,"children":617},{},[618],{"type":602,"value":619},"通俗来说，它规定一个程序该如何与 Web 服务器程序之间通信，从而可以让这个程序跑在 Web 服务器上。",{"type":597,"tag":604,"props":621,"children":623},{"id":622},"起源",[624],{"type":602,"value":622},{"type":597,"tag":598,"props":626,"children":627},{},[628],{"type":602,"value":629},"最早的 Web 服务器简单地响应浏览器发来的 HTTP 请求，并将存储在服务器上的 HTML 文件返回给浏览器，也就是静态 HTML。这个场景下的服务器一般被称为 HTTP 服务器，常见的有 Apache 的 httpd 和 Nginx。",{"type":597,"tag":598,"props":631,"children":632},{},[633],{"type":602,"value":634},"事物总是不 断发展，网站也越来越复杂，所以出现动态技术。但是服务器并不能直接运行 php、asp这样的文件，自己不能做，外包给别人吧，但是要与第三做个约定，我给你什么，然后你给我什么，就是握把请求参数发送给你，然后我接收你的处 理结果给客户端。",{"type":597,"tag":598,"props":636,"children":637},{},[638],{"type":602,"value":639},"那这个约定就是 Common Gateway Interface，简称 CGI。这个协议可以用 VB、C、PHP、Python 来实现。CGI只是接口协议，根本不是什么语言。",{"type":597,"tag":598,"props":641,"children":642},{},[643],{"type":597,"tag":644,"props":645,"children":647},"img",{"alt":591,"src":646},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/c75c10385343fbf28d11e6289721428965388f60.png",[],{"type":597,"tag":598,"props":649,"children":650},{},[651],{"type":602,"value":652},"引入 CGI 以便客户端请求能够触发 Web 服务器运行另一个外部程序，客户端所输入的数据也会传给这个外部程序，该程序运行结束后会将生成的 HTML 和其他数据通过 Web 服务器再返回给客户端（即动态请求，比如基于 PHP、Python、Java 实现的应用）。利用 CGI 可以针对用户请求，动态返回给客户端各种各样动态变化的信息。",{"type":597,"tag":604,"props":654,"children":656},{"id":655},"工作原理",[657],{"type":602,"value":655},{"type":597,"tag":598,"props":659,"children":660},{},[661],{"type":597,"tag":662,"props":663,"children":664},"strong",{},[665],{"type":602,"value":666},"Web 服务器与 CGI 程序的交互",{"type":597,"tag":598,"props":668,"children":669},{},[670],{"type":602,"value":671},"Web 服务器将根据 CGI 程序的类型决定数据向 CGI 程序的传送方式，一般是通过标准输入/输出流和环境变量来与 CGI 程序间传递数据。如下图所示：",{"type":597,"tag":598,"props":673,"children":674},{},[675],{"type":597,"tag":644,"props":676,"children":678},{"alt":591,"src":677},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/6159252dd42a28343479a71f7cea41e314cebfab.jpeg",[],{"type":597,"tag":598,"props":680,"children":681},{},[682],{"type":602,"value":683},"CGI 程序通过标准输入（STDIN）和标准输出（STDOUT）来进行输入输出。此外 CGI 程序还通过环境变量来得到输入，操作系统提供了许多环境变量，它们定义了程序的执行环境，应用程序可以存取它们。Web 服务器和 CGI 接口又另外设置了一些环境变量，用来向 CGI 程序传递一些重要的参数。",{"type":597,"tag":598,"props":685,"children":686},{},[687],{"type":597,"tag":662,"props":688,"children":689},{},[690],{"type":602,"value":691},"常用 CGI 环境变量：",{"type":597,"tag":598,"props":693,"children":694},{},[695],{"type":597,"tag":644,"props":696,"children":698},{"alt":591,"src":697},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/b03533fa828ba61ef7e05521636b1f03304e591e.jpeg",[],{"type":597,"tag":598,"props":700,"children":701},{},[702],{"type":602,"value":703},"每当客户请求 CGI 的时候，WEB服务器就请求操作系统生成一个新的CGI解释器进程（如 php-cgi.exe），CGI 的一个进程则处理完一个请求后退出，下一个请求来时再创建新进程。",{"type":597,"tag":598,"props":705,"children":706},{},[707],{"type":602,"value":708},"当然，这样在访问量很少没有并发的情况也行。但当访问量增大，并发存在，这种方式就不适合了，于是就有了FastCGI",{"type":597,"tag":604,"props":710,"children":712},{"id":711},"fastcgi",[713],{"type":602,"value":714},"FastCGI",{"type":597,"tag":598,"props":716,"children":717},{},[718],{"type":602,"value":719},"FASTCGI 是 Web 服务器（ex:Nginx）和语言解释器（ex:uWsgi）两者底层的通信协议的规范，是对CGI的开放的扩展。",{"type":597,"tag":598,"props":721,"children":722},{},[723],{"type":602,"value":724},"CGI的一个扩展，像是一个常驻（long-live）型的CGI ，废除了 CGI fork-and-execute （来一个请求 fork 一个新进程处理，处理完再把进程 kill 掉）的工作方式，转而使用一种长生存期的方法，减少了进程消耗，提升了性能。",{"type":597,"tag":598,"props":726,"children":727},{},[728],{"type":602,"value":729},"而FastCGI 则会先 fork 一个 master 进程，解析配置文件，初始化执行环境，然后再 fork 多个 worker 进程（与 Nginx 有点像），当 HTTP 请求过来时，master 进程将其会传递给一个 worker 进程，然后立即可以接受下一个请求，这样就避免了重复的初始化操作，效率自然也就提高了。",{"type":597,"tag":598,"props":731,"children":732},{},[733],{"type":602,"value":734},"而且当 worker 进程不够用时，master 进程还可以根据配置预先启动几个 worker 进程等着；当空闲 worker 进程太多时，也会关掉一些，这样不仅提高了性能，还节约了系统资源",{"type":597,"tag":604,"props":736,"children":738},{"id":737},"php-fpm",[739],{"type":602,"value":737},{"type":597,"tag":598,"props":741,"children":742},{},[743,745,750],{"type":602,"value":744},"FastCGI 只是一个协议规范，需要每个语言具体去实现，",{"type":597,"tag":662,"props":746,"children":747},{},[748],{"type":602,"value":749},"PHP-FPM 就是 PHP 版本的 FastCGI 协议实现",{"type":602,"value":751},"，有了它，就是实现 PHP 脚本与 Web 服务器（通常是 Nginx）之间的通信，同时它也是一个 PHP SAPI，从而构建起 PHP 解释器与 Web 服务器之间的桥梁。",{"type":597,"tag":598,"props":753,"children":754},{},[755],{"type":602,"value":756},"Php-fpm全称是php fastcgi process manager即php fastcgi进程管理器，相比fastcgi静态的唤起cgi，fpm能根据访问的压力动态的唤起cgi进程和销毁以到达动态的调整cgi数量，这样可以有效的使用内存。",{"type":597,"tag":598,"props":758,"children":759},{},[760],{"type":602,"value":761},"除此之外还有其它的一些优点，比如，fpm还可以平滑的重载php配置；由于fpm是使用Unix-Socket来和服务器通讯，所以也不用再配置cgi端口；fpm有更好的状态输出和slowlog日志，502的时候能给出更多的错误细节。",{"type":597,"tag":598,"props":763,"children":764},{},[765],{"type":597,"tag":644,"props":766,"children":768},{"alt":591,"src":767},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/3812b31bb051f819133af1d2fdebc2e42f73e7f0.png",[],{"type":597,"tag":598,"props":770,"children":771},{},[772],{"type":602,"value":773},"PHP-FPM 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在 PHP-FPM 中，master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程进行处理，worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端。这就是 PHP-FPM 的基本工作原理",{"type":597,"tag":604,"props":775,"children":777},{"id":776},"wsgi-uwsgi-uwsgi",[778],{"type":602,"value":779},"WSGI / uwsgi / uWSGI",{"type":597,"tag":598,"props":781,"children":782},{},[783],{"type":602,"value":784},"在 Python Web 开发中，我们经常使用 Uwsgi 配合 Nginx 部署一个 Web 框架，如 Django 或 flask。同时我们又会说，框架和 Web 服务器之间要符合 WSGI 协议。",{"type":597,"tag":598,"props":786,"children":787},{},[788],{"type":602,"value":789},"那就来厘清一下这几个概念。",{"type":597,"tag":598,"props":791,"children":792},{},[793],{"type":597,"tag":662,"props":794,"children":795},{},[796],{"type":602,"value":797},"Web 服务器和 Web框架",{"type":597,"tag":598,"props":799,"children":800},{},[801],{"type":602,"value":802},"在讲 uWSGI 和 WSGI 之前，先要弄清楚 Web 开发的两大块，Web服务器和Web框架。",{"type":597,"tag":598,"props":804,"children":805},{},[806],{"type":602,"value":807},"Web服务器即用来接受客户端请求，建立连接，转发响应的程序。至于转发的内容是什么，交由Web框架来处理，即处理这些业务逻辑。如查询数据库、生成实时信息等。Nginx就是一个Web服务器，Django或flask就是Web框架。",{"type":597,"tag":598,"props":809,"children":810},{},[811],{"type":602,"value":812},"那么如何实现uWSGI和WSGI的配合呢？如何做到任意一个Web服务器，都能搭配任意一个框架呢？这就产生了WSGI协议。只要Web服务器和Web框架满足WSGI协议，它们就能相互搭配。所以WSGI只是一个协议，一个约定。而不是Python的模块、框架等具体的功能。",{"type":597,"tag":598,"props":814,"children":815},{},[816],{"type":602,"value":817},"而uWSGI，则是实现了WSGI协议的一个Web服务器。即用来接受客户端请求，转发响应的程序。实际上，一个uWSGI的Web服务器，再加上Django这样的Web框架，就已经可以实现网站的功能了。",{"type":597,"tag":604,"props":819,"children":821},{"id":820},"wsgi",[822],{"type":602,"value":823},"WSGI",{"type":597,"tag":598,"props":825,"children":826},{},[827,829],{"type":602,"value":828},"WSGI，（WEB SERVER GATEWAY INTERFACE），Web服务器网关接口，是一种Web服务器网关接口，它是一个Web服务器（如Nginx，uWSGI等服务器）与Web应用（如Flask框架写的程序）通信的一种规范。",{"type":597,"tag":662,"props":830,"children":831},{},[832],{"type":602,"value":833},"当前运行在WSGI协议之上的Web框架有Bottle，Flask，Django",{"type":597,"tag":598,"props":835,"children":836},{},[837],{"type":602,"value":838},"实现了Python Web程序与服务器之间交互的通用性。有了这个东西，web.py或者bottle或者django等等的Python Web开发框架，就可以轻松地部署在不同的Web server上了，不需要做任何特殊配置（也需要一些小小的配置调整）",{"type":597,"tag":598,"props":840,"children":841},{},[842],{"type":597,"tag":644,"props":843,"children":845},{"alt":591,"src":844},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/00e93901213fb80ea214ae5d158ea727bb3894d8.png",[],{"type":597,"tag":598,"props":847,"children":848},{},[849],{"type":602,"value":850},"WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的Web应用。",{"type":597,"tag":598,"props":852,"children":853},{},[854],{"type":602,"value":855},"例如 uWSGI和 Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的Web框架，可以根据项目实际情况搭配使用。",{"type":597,"tag":598,"props":857,"children":858},{},[859],{"type":602,"value":860},"像Django，Flask框架都有自己实现的简单的WSGI server，一般用于服务器调试，生产环境下建议用其他WSGI server，WSGI服务器的选择很多，包括uWSGI和gunicorn",{"type":597,"tag":604,"props":862,"children":864},{"id":863},"uwsgi",[865],{"type":602,"value":863},{"type":597,"tag":598,"props":867,"children":868},{},[869],{"type":602,"value":870},"同WSGI一样是一种通信协议",{"type":597,"tag":598,"props":872,"children":873},{},[874],{"type":602,"value":875},"uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。",{"type":597,"tag":604,"props":877,"children":879},{"id":878},"uwsgi-服务器",[880],{"type":602,"value":881},"uWSGI (服务器)",{"type":597,"tag":598,"props":883,"children":884},{},[885],{"type":602,"value":886},"它是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。用于接收前端服务器转发的动态请求并处理后发给 Web 应用程序。",{"type":597,"tag":598,"props":888,"children":889},{},[890],{"type":602,"value":891},"因为apache也好，Nginx也罢，它们自己都没有解析动态语言如php的功能，而是分派给其他模块来做，比如apache就可以说内置了php模块，支持的非常爽，让人感觉好像apache就支持php一样。uwsgi实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。",{"type":597,"tag":598,"props":893,"children":894},{},[895],{"type":602,"value":896},"uWSGI是使用C编写的，显示了自有的uwsgi协议的Web服务器。它自带丰富的组件，其中核心组件包含进程管理、监控、IPC等功能，实现应用服务器接口的请求插件支持多种语言和平台，比如WSGI、Rack、Lua WSAPI，网管组件实现了负载均衡、代理和理由功能",{"type":597,"tag":598,"props":898,"children":899},{},[900],{"type":602,"value":901},"uWSGI也可以当做中间件。",{"type":597,"tag":903,"props":904,"children":905},"ul",{},[906,912],{"type":597,"tag":907,"props":908,"children":909},"li",{},[910],{"type":602,"value":911},"如果是Nginx+uWSGI+App，那uWSGI就是一个中间件",{"type":597,"tag":907,"props":913,"children":914},{},[915],{"type":602,"value":916},"如果是uWSGI+App，那它就是服务器",{"type":597,"tag":604,"props":918,"children":920},{"id":919},"nginxuwgsi",[921],{"type":602,"value":922},"Nginx+uWGSI",{"type":597,"tag":598,"props":924,"children":925},{},[926],{"type":602,"value":927},"假设我们使用 Python 的 Django 框架写了一个网站，现在要将它挂在网上运行，我们一般需要：",{"type":597,"tag":903,"props":929,"children":930},{},[931,936,941],{"type":597,"tag":907,"props":932,"children":933},{},[934],{"type":602,"value":935},"Nginx 做为代理服务器：负责静态资源发送（js、css、图片等）、动态请求转发以及结果的回复。",{"type":597,"tag":907,"props":937,"children":938},{},[939],{"type":602,"value":940},"uWSGI 做为后端服务器：负责接收 Nginx 转发的请求并处理后发给 Django 应用以及接收 Django 应用返回信息转发给 Nginx。",{"type":597,"tag":907,"props":942,"children":943},{},[944],{"type":602,"value":945},"Django 应用收到请求后处理数据并渲染相应的返回页面给 uWSGI 服务器。",{"type":597,"tag":598,"props":947,"children":948},{},[949],{"type":597,"tag":644,"props":950,"children":952},{"alt":591,"src":951},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/35a85edf8db1cb1373f2b22aff0bde4793584bdc.jpeg",[],{"type":597,"tag":598,"props":954,"children":955},{},[956],{"type":602,"value":957},"一个Django应用，通过WSGI协议连接uWSGI服务器，uWSGI服务器实现WSGI、http等协议，通过uwsgi协议和Nginx服务器实现http的动态请求和转发以及结果",{"type":597,"tag":598,"props":959,"children":960},{},[961],{"type":597,"tag":662,"props":962,"children":963},{},[964],{"type":602,"value":965},"问题：有 uWGSI 了，Django 为什么还需要 Nginx？",{"type":597,"tag":598,"props":967,"children":968},{},[969],{"type":602,"value":970},"一个普通的个人网站，访问量不大的话，当然可以由 uWSGI 和 Django 构成。但是一旦访问量过大，客户端请求连接就要进行长时间的等待。这个时候就出来了分布式服务器，我们可以多来几台 Web 服务器，都能处理请求。",{"type":597,"tag":598,"props":972,"children":973},{},[974],{"type":602,"value":975},"但是谁来分配客户端的请求连接和 Web 服务器呢？Nginx 就是这样一个管家的存在，由它来分配。这也就是由 Nginx 实现反向代理，即代理服务器。",{"type":597,"tag":598,"props":977,"children":978},{},[979],{"type":597,"tag":644,"props":980,"children":982},{"alt":591,"src":981},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/f2deb48f8c5494ee428402900faa68f798257e79.jpeg",[],{"type":597,"tag":598,"props":984,"children":985},{},[986],{"type":602,"value":987},"Nginx 是一个 HTTP 和反向代理服务器",{"type":597,"tag":903,"props":989,"children":990},{},[991,996],{"type":597,"tag":907,"props":992,"children":993},{},[994],{"type":602,"value":995},"正向代理：正向的就是由浏览器主动的想代理服务器发出请求，经代理服务器做出处理后再转给目标服务器",{"type":597,"tag":907,"props":997,"children":998},{},[999],{"type":602,"value":1000},"反向代理：反向的就是不管浏览器同不同意，请求都会经过代理服务器处理再发给目标服务器",{"type":597,"tag":598,"props":1002,"children":1003},{},[1004],{"type":602,"value":1005},"使用Nginx作为反向代理服务器的好处：",{"type":597,"tag":903,"props":1007,"children":1008},{},[1009],{"type":597,"tag":907,"props":1010,"children":1011},{},[1012],{"type":602,"value":1013},"安全",{"type":597,"tag":598,"props":1015,"children":1016},{},[1017],{"type":602,"value":1018},"不管什么请求都要经过代理服务器，可以避免外部程序直接攻击Web服务器",{"type":597,"tag":903,"props":1020,"children":1021},{},[1022],{"type":597,"tag":907,"props":1023,"children":1024},{},[1025],{"type":602,"value":1026},"负载均衡",{"type":597,"tag":598,"props":1028,"children":1029},{},[1030],{"type":602,"value":1031},"根据请求情况和服务器负载情况，将请求分配给不同的Web服务器，保证服务器性能",{"type":597,"tag":903,"props":1033,"children":1034},{},[1035],{"type":597,"tag":907,"props":1036,"children":1037},{},[1038],{"type":602,"value":1039},"提高Web服务器的IO性能",{"type":597,"tag":598,"props":1041,"children":1042},{},[1043],{"type":602,"value":1044},"请求从客户端传到Web服务器是需要时间的，传递多长时间就会让这个进程阻塞多长时间，而通过反向代理，就可以由反向代理完整接受该请求，然后再传给Web服务器，从而保证服务器性能，而且有的一些简单的事情（比如静态文件）可以直接由反向代理处理，不经过Web服务器",{"type":597,"tag":604,"props":1046,"children":1048},{"id":1047},"总结",[1049],{"type":602,"value":1047},{"type":597,"tag":903,"props":1051,"children":1052},{},[1053,1058,1063],{"type":597,"tag":907,"props":1054,"children":1055},{},[1056],{"type":602,"value":1057},"WSGI是一种通信协议",{"type":597,"tag":907,"props":1059,"children":1060},{},[1061],{"type":602,"value":1062},"uwsgi是一种通信协议，常用于在uWSGI服务器与其他网络服务器的数据通信",{"type":597,"tag":907,"props":1064,"children":1065},{},[1066],{"type":602,"value":1067},"而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器",{"type":597,"tag":598,"props":1069,"children":1070},{},[1071],{"type":602,"value":1072},"百度百科上说uwsgi是一种线路协议而不是通信协议，个人更倾向于uwsgi是类似WSGI的通信协议的说法，uwsgi和WSGI都是基于CGI扩展出来的。",{"type":597,"tag":604,"props":1074,"children":1076},{"id":1075},"asgi",[1077],{"type":602,"value":1078},"ASGI",{"type":597,"tag":598,"props":1080,"children":1081},{},[1082,1087],{"type":597,"tag":662,"props":1083,"children":1084},{},[1085],{"type":602,"value":1086},"异步网关协议接口",{"type":602,"value":1088},"，一个介于网络协议服务和Python应用之间的标准接口，能够处理多种通用的协议类型，包括HTTP，HTTP2和WebSocket。",{"type":597,"tag":598,"props":1090,"children":1091},{},[1092],{"type":602,"value":1093},"然而目前的常用的WSGI主要是针对HTTP风格的请求响应模型做的设计，并且越来越多的不遵循这种模式的协议逐渐成为Web变成的标准之一，例如WebSocket。",{"type":597,"tag":598,"props":1095,"children":1096},{},[1097],{"type":602,"value":1098},"ASGI尝试保持在一个简单的应用接口的前提下，提供允许数据能够在任意的时候、被任意应用进程发送和接受的抽象。并且同样描述了一个新的，兼容HTTP请求响应以及WebSocket数据帧的序列格式。允许这些协议能通过网络或本地socket进行传输，以及让不同的协议被分配到不同的进程中。",{"type":597,"tag":604,"props":1100,"children":1102},{"id":1101},"wsgi和asgi的区别",[1103],{"type":602,"value":1104},"WSGI和ASGI的区别",{"type":597,"tag":598,"props":1106,"children":1107},{},[1108],{"type":602,"value":1109},"WSGI是基于HTTP协议模式的，不支持WebSocket，而ASGI的诞生则是为了解决Python常用的WSGI不支持当前Web开发中的一些新的协议标准。同时，ASGI对于WSGI原有的模式的支持和WebSocket的扩展，即ASGI是WSGI的扩展。",{"title":591,"searchDepth":1111,"depth":1111,"links":1112},2,[1113,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126],{"id":606,"depth":1114,"text":609},3,{"id":622,"depth":1114,"text":622},{"id":655,"depth":1114,"text":655},{"id":711,"depth":1114,"text":714},{"id":737,"depth":1114,"text":737},{"id":776,"depth":1114,"text":779},{"id":820,"depth":1114,"text":823},{"id":863,"depth":1114,"text":863},{"id":878,"depth":1114,"text":881},{"id":919,"depth":1114,"text":922},{"id":1047,"depth":1114,"text":1047},{"id":1075,"depth":1114,"text":1078},{"id":1101,"depth":1114,"text":1104},"markdown","content:tool:2023-02-15-cgi-fastcgi-wsgi-uswgi.md","content","tool/2023-02-15-cgi-fastcgi-wsgi-uswgi.md","md","2023-02-15",{"_path":363,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":362,"description":1134,"body":1135,"_type":1127,"_id":1515,"_source":1129,"_file":1516,"_extension":1131,"date":1517},"硬體需求根據 StableDiffusion 官網 所寫，只要有 6G 以上 RAM 的 NVidia 顯卡都可以跑。不過根據 jimmy 實測，4G 的 1050ti 就可以順利運行了。(在我們這次使用的網頁介面實作項目 AUTOMATIC1111/stable-diffusion-webui 裡提到，2G 也有成功運行的報告)安裝步驟1. 下載並安裝 github for windows這裡我們用 Windows 平台為範例來說明。\n首先到 https://gitforwindows.org 下載 git for windows，並安裝。 ( 安裝過程中可取消與 Windows Explo",{"type":594,"children":1136,"toc":1504},[1137,1143,1168,1173,1179,1199,1206,1211,1217,1243,1250,1264,1269,1278,1283,1292,1299,1305,1310,1318,1331,1340,1348,1353,1361,1366,1374,1380,1385,1390,1399,1404,1420,1429,1437,1444,1449,1477,1482,1491],{"type":597,"tag":1138,"props":1139,"children":1141},"h2",{"id":1140},"硬體需求",[1142],{"type":602,"value":1140},{"type":597,"tag":598,"props":1144,"children":1145},{},[1146,1148,1157,1159,1166],{"type":602,"value":1147},"根據 ",{"type":597,"tag":1149,"props":1150,"children":1154},"a",{"href":1151,"rel":1152},"https://stability.ai/faq",[1153],"nofollow",[1155],{"type":602,"value":1156},"StableDiffusion 官網",{"type":602,"value":1158}," 所寫，只要有 6G 以上 RAM 的 NVidia 顯卡都可以跑。不過根據 jimmy 實測，4G 的 1050ti 就可以順利運行了。(在我們這次使用的網頁介面實作項目 ",{"type":597,"tag":1149,"props":1160,"children":1163},{"href":1161,"rel":1162},"https://github.com/AUTOMATIC1111/stable-diffusion-webui",[1153],[1164],{"type":602,"value":1165},"AUTOMATIC1111/stable-diffusion-webui",{"type":602,"value":1167}," 裡提到，2G 也有成功運行的報告)",{"type":597,"tag":1138,"props":1169,"children":1171},{"id":1170},"安裝步驟",[1172],{"type":602,"value":1170},{"type":597,"tag":604,"props":1174,"children":1176},{"id":1175},"_1-下載並安裝-github-for-windows",[1177],{"type":602,"value":1178},"1. 下載並安裝 github for windows",{"type":597,"tag":598,"props":1180,"children":1181},{},[1182,1184,1188,1190,1197],{"type":602,"value":1183},"這裡我們用 Windows 平台為範例來說明。",{"type":597,"tag":1185,"props":1186,"children":1187},"br",{},[],{"type":602,"value":1189},"\n首先到 ",{"type":597,"tag":1149,"props":1191,"children":1194},{"href":1192,"rel":1193},"https://gitforwindows.org/",[1153],[1195],{"type":602,"value":1196},"https://gitforwindows.org",{"type":602,"value":1198}," 下載 git for windows，並安裝。 ( 安裝過程中可取消與 Windows Exploer 整合 )",{"type":597,"tag":598,"props":1200,"children":1201},{},[1202],{"type":597,"tag":644,"props":1203,"children":1205},{"alt":591,"src":1204},"/images/2023-01-20-stable-diffusion-install/gitInstall.jpg",[],{"type":597,"tag":598,"props":1207,"children":1208},{},[1209],{"type":602,"value":1210},"安裝前可以取消 Windows Explorer integration",{"type":597,"tag":604,"props":1212,"children":1214},{"id":1213},"_2-下載並安裝-python",[1215],{"type":602,"value":1216},"2. 下載並安裝 Python",{"type":597,"tag":598,"props":1218,"children":1219},{},[1220,1222,1228,1230,1233,1238,1241],{"type":602,"value":1221},"a. 到 ",{"type":597,"tag":1149,"props":1223,"children":1226},{"href":1224,"rel":1225},"https://www.python.org/downloads/release/python-3106",[1153],[1227],{"type":602,"value":1224},{"type":602,"value":1229}," 下載 Windows installer (64-bit) 版本",{"type":597,"tag":1185,"props":1231,"children":1232},{},[],{"type":597,"tag":662,"props":1234,"children":1235},{},[1236],{"type":602,"value":1237},"(這兩天 Python 的版本更新到了 3.11.0，但 AUTOMATIC1111 表示這個程式是基於 3.10.6 版開發的，除非你想給自己找麻煩，否則請不要使用其他版本 )",{"type":597,"tag":1185,"props":1239,"children":1240},{},[],{"type":602,"value":1242},"\nb. 安裝時記得勾選 Add Python.exe to PATH",{"type":597,"tag":598,"props":1244,"children":1245},{},[1246],{"type":597,"tag":644,"props":1247,"children":1249},{"alt":591,"src":1248},"/images/2023-01-20-stable-diffusion-install/pythonInstall.jpg",[],{"type":597,"tag":598,"props":1251,"children":1252},{},[1253,1255,1262],{"type":602,"value":1254},"記得要把 ",{"type":597,"tag":1256,"props":1257,"children":1259},"code",{"className":1258},[],[1260],{"type":602,"value":1261},"Add python.exe to PATH",{"type":602,"value":1263}," 打勾",{"type":597,"tag":598,"props":1265,"children":1266},{},[1267],{"type":602,"value":1268},"设置pip源（一定要设置清华大学的，阿里的有点问题）",{"type":597,"tag":598,"props":1270,"children":1271},{},[1272],{"type":597,"tag":1256,"props":1273,"children":1275},{"className":1274},[],[1276],{"type":602,"value":1277},"pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple",{"type":597,"tag":598,"props":1279,"children":1280},{},[1281],{"type":602,"value":1282},"更新pip",{"type":597,"tag":598,"props":1284,"children":1285},{},[1286],{"type":597,"tag":1256,"props":1287,"children":1289},{"className":1288},[],[1290],{"type":602,"value":1291},"python -m pip install --upgrade pip",{"type":597,"tag":598,"props":1293,"children":1294},{},[1295],{"type":597,"tag":644,"props":1296,"children":1298},{"alt":591,"src":1297},"/images/2023-01-20-stable-diffusion-install/1676391305000.png",[],{"type":597,"tag":604,"props":1300,"children":1302},{"id":1301},"_3-下载模型",[1303],{"type":602,"value":1304},"3. 下载模型",{"type":597,"tag":598,"props":1306,"children":1307},{},[1308],{"type":602,"value":1309},"经过测试目前sd2.0只有以下两种模型可以用 ，其他模型加载都会报错，github上看了issue上大家都有遇到这个问题",{"type":597,"tag":598,"props":1311,"children":1312},{},[1313],{"type":597,"tag":662,"props":1314,"children":1315},{},[1316],{"type":602,"value":1317},"768-v-ema.ckpt",{"type":597,"tag":598,"props":1319,"children":1320},{},[1321,1323,1329],{"type":602,"value":1322},"这个模型需要生成的图片在768",{"type":597,"tag":1324,"props":1325,"children":1326},"em",{},[1327],{"type":602,"value":1328},"768的时候效果比较好，如果是生成512",{"type":602,"value":1330},"512的，图片有点拉垮；",{"type":597,"tag":1332,"props":1333,"children":1335},"pre",{"code":1334},"# 768-v-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2/resolve/main/768-v-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2-1/resolve/main/v2-1_768-ema-pruned.ckpt\n# 配置文件（下载以后注意把文件名修改为768-v-ema.yaml）\nhttps://raw.githubusercontent.com/Stability-AI/stablediffusion/main/configs/stable-diffusion/v2-inference-v.yaml\n",[1336],{"type":597,"tag":1256,"props":1337,"children":1338},{"__ignoreMap":591},[1339],{"type":602,"value":1334},{"type":597,"tag":598,"props":1341,"children":1342},{},[1343],{"type":597,"tag":662,"props":1344,"children":1345},{},[1346],{"type":602,"value":1347},"512-base-ema.ckpt",{"type":597,"tag":598,"props":1349,"children":1350},{},[1351],{"type":602,"value":1352},"如果显存不够的，比较小的，可以使用这个模型；比较推荐768，效果比512的好；",{"type":597,"tag":1332,"props":1354,"children":1356},{"code":1355},"# 512-base-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2-base/resolve/main/512-base-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2-1-base/resolve/main/v2-1_512-ema-pruned.ckpt\n# 配置文件（下载以后注意把文件名修改为512-base-ema.yaml）\nhttps://raw.githubusercontent.com/Stability-AI/stablediffusion/main/configs/stable-diffusion/v2-inference.yaml\n",[1357],{"type":597,"tag":1256,"props":1358,"children":1359},{"__ignoreMap":591},[1360],{"type":602,"value":1355},{"type":597,"tag":598,"props":1362,"children":1363},{},[1364],{"type":602,"value":1365},"安装模型",{"type":597,"tag":1332,"props":1367,"children":1369},{"code":1368},"git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git\ncd stable-diffusion-webui\n./venv/Scripts/python.exe -m pip install --upgrade pip\ncd models/Stable-diffusion/\nInvoke-WebRequest -Uri https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/configs/stable-diffusion/v2-inference-v.yaml -OutFile ./v2-1_768-ema-pruned.yaml\nInvoke-WebRequest -Uri https://huggingface.co/stabilityai/stable-diffusion-2-1/resolve/main/v2-1_768-ema-pruned.ckpt -OutFile ./v2-1_768-ema-pruned.ckpt\n",[1370],{"type":597,"tag":1256,"props":1371,"children":1372},{"__ignoreMap":591},[1373],{"type":602,"value":1368},{"type":597,"tag":604,"props":1375,"children":1377},{"id":1376},"_4-正式安裝-stable-diffusion",[1378],{"type":602,"value":1379},"4. 正式安裝 Stable Diffusion",{"type":597,"tag":598,"props":1381,"children":1382},{},[1383],{"type":602,"value":1384},"在国外，安装Stable Diffusion比较简单，但是由于国内的网络环境，安装过程中可能会遇上不少麻烦。",{"type":597,"tag":598,"props":1386,"children":1387},{},[1388],{"type":602,"value":1389},"编辑“launch.py”（此处我是用的是Visual Studio Code，Linux则需要用到特定的文本编辑器）。",{"type":597,"tag":598,"props":1391,"children":1392},{},[1393],{"type":597,"tag":1256,"props":1394,"children":1396},{"className":1395},[],[1397],{"type":602,"value":1398},"code .\\launch.py",{"type":597,"tag":598,"props":1400,"children":1401},{},[1402],{"type":602,"value":1403},"替换前",{"type":597,"tag":598,"props":1405,"children":1406},{},[1407,1411,1413],{"type":597,"tag":644,"props":1408,"children":1410},{"alt":591,"src":1409},"/images/2023-01-20-stable-diffusion-install/1676396613000.png",[],{"type":602,"value":1412},"替换所有的“",{"type":597,"tag":1149,"props":1414,"children":1417},{"href":1415,"rel":1416},"https://github.com%E2%80%9D%E4%B8%BA%E2%80%9Chttps://ghproxy.com/https://github.com%E2%80%9D%E3%80%82%E8%BF%99%E9%87%8C%E4%B9%9F%E6%98%AF%E5%88%A9%E7%94%A8Ghproxy%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%90%86%EF%BC%8C%E5%8A%A0%E9%80%9F%E5%9B%BD%E5%86%85Git%E3%80%82",[1153],[1418],{"type":602,"value":1419},"https://github.com”为“https://ghproxy.com/https://github.com”。这里也是利用Ghproxy进行代理，加速国内Git。",{"type":597,"tag":598,"props":1421,"children":1422},{},[1423,1427],{"type":597,"tag":644,"props":1424,"children":1426},{"alt":591,"src":1425},"/images/2023-01-20-stable-diffusion-install/1676396580000.png",[],{"type":602,"value":1428},"替换完成后注意保存。",{"type":597,"tag":1332,"props":1430,"children":1432},{"code":1431},"cd ../../\n//修改webui-user.bat 设置启动参数,会自动安装 xformers\nset COMMANDLINE_ARGS=--share --xformers --enable-insecure-extension-access --api --precision full --no-half --medvram \n",[1433],{"type":597,"tag":1256,"props":1434,"children":1435},{"__ignoreMap":591},[1436],{"type":602,"value":1431},{"type":597,"tag":598,"props":1438,"children":1439},{},[1440],{"type":597,"tag":644,"props":1441,"children":1443},{"alt":591,"src":1442},"/images/2023-01-20-stable-diffusion-install/1676428686000.png",[],{"type":597,"tag":604,"props":1445,"children":1447},{"id":1446},"参数解释",[1448],{"type":602,"value":1446},{"type":597,"tag":903,"props":1450,"children":1451},{},[1452,1457,1462,1467,1472],{"type":597,"tag":907,"props":1453,"children":1454},{},[1455],{"type":602,"value":1456},"xformers：优化显存占用情况的插件",{"type":597,"tag":907,"props":1458,"children":1459},{},[1460],{"type":602,"value":1461},"precision full和no-half：完全精度和非半精度，也就是使用32位浮点运算而不是使用16位浮点运算，开启这两个参数会让显存占用增加，但图的质量会更好，但是cpu和16XX显卡必须开启，不然黑图或者绿图",{"type":597,"tag":907,"props":1463,"children":1464},{},[1465],{"type":602,"value":1466},"lowvram和medvram  低内存和中内存",{"type":597,"tag":907,"props":1468,"children":1469},{},[1470],{"type":602,"value":1471},"share 会生成一个供外部访问的链接",{"type":597,"tag":907,"props":1473,"children":1474},{},[1475],{"type":602,"value":1476},"api 启动api,主要是供插件使用",{"type":597,"tag":604,"props":1478,"children":1480},{"id":1479},"当前遇到的问题",[1481],{"type":602,"value":1479},{"type":597,"tag":1483,"props":1484,"children":1485},"blockquote",{},[1486],{"type":597,"tag":598,"props":1487,"children":1488},{},[1489],{"type":602,"value":1490},"modules.devices.NansException: A tensor with all NaNs was produced in Unet. This could be either because there's not enough precision to represent the picture, or because your video card does not support half type. Try setting the \"Upcast cross attention layer to float32\" option in Settings > Stable Diffusion or using the --no-half commandline argument to fix this. Use --disable-nan-check commandline argument to disable this check.",{"type":597,"tag":598,"props":1492,"children":1493},{},[1494,1496,1502],{"type":602,"value":1495},"if you plan to use SD 2.1 models, you go to Settings -> User Interface and set Quicksettings list to ",{"type":597,"tag":1256,"props":1497,"children":1499},{"className":1498},[],[1500],{"type":602,"value":1501},"sd_model_checkpoint, upcast_attn",{"type":602,"value":1503}," then click Apply settings and Reload UI. This adds a checkbox (Upcast cross attention layer to float32) next to the model dropdown that should be checked whenever using SD 2.1 models. Uncheck it after you load a model that is not SD 2.1 based.",{"title":591,"searchDepth":1111,"depth":1111,"links":1505},[1506,1507],{"id":1140,"depth":1111,"text":1140},{"id":1170,"depth":1111,"text":1170,"children":1508},[1509,1510,1511,1512,1513,1514],{"id":1175,"depth":1114,"text":1178},{"id":1213,"depth":1114,"text":1216},{"id":1301,"depth":1114,"text":1304},{"id":1376,"depth":1114,"text":1379},{"id":1446,"depth":1114,"text":1446},{"id":1479,"depth":1114,"text":1479},"content:tool:2023-01-20-stable-diffusion-install.md","tool/2023-01-20-stable-diffusion-install.md","2023-01-20",{"_path":360,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":359,"description":1519,"body":1520,"_type":1127,"_id":1871,"_source":1129,"_file":1872,"_extension":1131,"date":1873},"使用ja-netfilter激活IDEA 2022.2.1背景截止至2022年9月4日，最新的IDEA版本为2022.2.1，对于某些想体验最新版IDEA却暂时没法入正的开发者来说，不能体验新版非常遗憾。\n重置IDEA体验版的插件IDE Eval Resetter已经失效了，不过开发此插件的作者又开发出另一款工具ja-netfilter，但是文档中使用方法写的有些模糊，我就以我自己的使用经验分享给大家。此方法目前适用于IDEA 2022.2.1，更高的版本不保证适用，请注意时效。下载IDEA如果你已经安装了任意版本的IDEA，那么建议你先卸载并清除数据再安装，否则激活可能无效。官网下载IDEA",{"type":594,"children":1521,"toc":1856},[1522,1529,1534,1561,1568,1573,1579,1587,1597,1602,1612,1617,1627,1632,1644,1649,1656,1669,1676,1682,1693,1699,1708,1714,1727,1734,1745,1769,1774,1785,1791,1796,1809,1816,1821,1826,1832,1837,1843],{"type":597,"tag":1523,"props":1524,"children":1526},"h1",{"id":1525},"使用ja-netfilter激活idea-202221",[1527],{"type":602,"value":1528},"使用ja-netfilter激活IDEA 2022.2.1",{"type":597,"tag":1138,"props":1530,"children":1532},{"id":1531},"背景",[1533],{"type":602,"value":1531},{"type":597,"tag":598,"props":1535,"children":1536},{},[1537,1539,1542,1544,1550,1552,1559],{"type":602,"value":1538},"截止至2022年9月4日，最新的IDEA版本为2022.2.1，对于某些想体验最新版IDEA却暂时没法入正的开发者来说，不能体验新版非常遗憾。",{"type":597,"tag":1185,"props":1540,"children":1541},{},[],{"type":602,"value":1543},"\n重置IDEA体验版的插件",{"type":597,"tag":1256,"props":1545,"children":1547},{"className":1546},[],[1548],{"type":602,"value":1549},"IDE Eval Resetter",{"type":602,"value":1551},"已经失效了，不过开发此插件的作者又开发出另一款工具",{"type":597,"tag":1149,"props":1553,"children":1556},{"href":1554,"rel":1555},"https://gitee.com/ja-netfilter/ja-netfilter",[1153],[1557],{"type":602,"value":1558},"ja-netfilter",{"type":602,"value":1560},"，但是文档中使用方法写的有些模糊，我就以我自己的使用经验分享给大家。",{"type":597,"tag":598,"props":1562,"children":1563},{},[1564],{"type":597,"tag":644,"props":1565,"children":1567},{"alt":591,"src":1566},"/images/2022-11-19-rider-po-jie/2084018-20220904174243771-2143320926.png",[],{"type":597,"tag":598,"props":1569,"children":1570},{},[1571],{"type":602,"value":1572},"此方法目前适用于IDEA 2022.2.1，更高的版本不保证适用，请注意时效。",{"type":597,"tag":1138,"props":1574,"children":1576},{"id":1575},"下载idea",[1577],{"type":602,"value":1578},"下载IDEA",{"type":597,"tag":598,"props":1580,"children":1581},{},[1582],{"type":597,"tag":662,"props":1583,"children":1584},{},[1585],{"type":602,"value":1586},"如果你已经安装了任意版本的IDEA，那么建议你先卸载并清除数据再安装，否则激活可能无效。",{"type":597,"tag":598,"props":1588,"children":1589},{},[1590],{"type":597,"tag":1149,"props":1591,"children":1594},{"href":1592,"rel":1593},"https://www.jetbrains.com/zh-cn/idea/download/#section=windows",[1153],[1595],{"type":602,"value":1596},"官网下载IDEA 2022.2.1",{"type":597,"tag":1138,"props":1598,"children":1600},{"id":1599},"下载ja-netfilter",[1601],{"type":602,"value":1599},{"type":597,"tag":598,"props":1603,"children":1604},{},[1605],{"type":597,"tag":1149,"props":1606,"children":1609},{"href":1607,"rel":1608},"https://zhile.io/2021/11/29/ja-netfilter-javaagent-lib.html",[1153],[1610],{"type":602,"value":1611},"作者博客",{"type":597,"tag":598,"props":1613,"children":1614},{},[1615],{"type":602,"value":1616},"找最新版本的release下载即可",{"type":597,"tag":598,"props":1618,"children":1619},{},[1620],{"type":597,"tag":1149,"props":1621,"children":1624},{"href":1622,"rel":1623},"https://gitee.com/ja-netfilter/ja-netfilter/releases",[1153],[1625],{"type":602,"value":1626},"下载地址",{"type":597,"tag":1138,"props":1628,"children":1630},{"id":1629},"使用ja-netfilter",[1631],{"type":602,"value":1629},{"type":597,"tag":598,"props":1633,"children":1634},{},[1635,1637,1642],{"type":602,"value":1636},"将下载好的",{"type":597,"tag":1256,"props":1638,"children":1640},{"className":1639},[],[1641],{"type":602,"value":1558},{"type":602,"value":1643},"解压到磁盘，最好不要有空格，注意文件后期不能删除，所以请放在自己不会清理的位置。",{"type":597,"tag":598,"props":1645,"children":1646},{},[1647],{"type":602,"value":1648},"解压后是这样：",{"type":597,"tag":598,"props":1650,"children":1651},{},[1652],{"type":597,"tag":644,"props":1653,"children":1655},{"alt":591,"src":1654},"/images/2022-11-19-rider-po-jie/2084018-20220904174636805-1072454980.png",[],{"type":597,"tag":598,"props":1657,"children":1658},{},[1659,1661,1667],{"type":602,"value":1660},"解压后在ja-netfilter.jar同目录下应该会有一个",{"type":597,"tag":1256,"props":1662,"children":1664},{"className":1663},[],[1665],{"type":602,"value":1666},"config",{"type":602,"value":1668},"文件夹，找到里面的几个配置文件进行修改。",{"type":597,"tag":598,"props":1670,"children":1671},{},[1672],{"type":597,"tag":644,"props":1673,"children":1675},{"alt":591,"src":1674},"/images/2022-11-19-rider-po-jie/2084018-20220904230435240-2001741988.png",[],{"type":597,"tag":604,"props":1677,"children":1679},{"id":1678},"修改dnsconf",[1680],{"type":602,"value":1681},"修改dns.conf",{"type":597,"tag":1332,"props":1683,"children":1688},{"className":1684,"code":1686,"language":1687,"meta":591},[1685],"language-ini","[DNS]\nEQUAL,jetbrains.com\n","ini",[1689],{"type":597,"tag":1256,"props":1690,"children":1691},{"__ignoreMap":591},[1692],{"type":602,"value":1686},{"type":597,"tag":604,"props":1694,"children":1696},{"id":1695},"修改urlconf",[1697],{"type":602,"value":1698},"修改url.conf",{"type":597,"tag":1332,"props":1700,"children":1703},{"className":1701,"code":1702,"language":1687,"meta":591},[1685],"[URL]\nPREFIX,https://dbeaver.com/lmp/checkLicense\nPREFIX,https://store.smartgit.com/check\nPREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action\n",[1704],{"type":597,"tag":1256,"props":1705,"children":1706},{"__ignoreMap":591},[1707],{"type":602,"value":1702},{"type":597,"tag":1138,"props":1709,"children":1711},{"id":1710},"修改idea-vmoption文件",[1712],{"type":602,"value":1713},"修改IDEA VMOPTION文件",{"type":597,"tag":598,"props":1715,"children":1716},{},[1717,1719,1725],{"type":602,"value":1718},"找到IDEA安装目录,再进入bin目录，找到",{"type":597,"tag":1256,"props":1720,"children":1722},{"className":1721},[],[1723],{"type":602,"value":1724},"idea64.exe.vmoptions",{"type":602,"value":1726},"文件，在最后一行添加",{"type":597,"tag":598,"props":1728,"children":1729},{},[1730],{"type":597,"tag":644,"props":1731,"children":1733},{"alt":591,"src":1732},"/images/2022-11-19-rider-po-jie/2084018-20220904174024356-819045091.png",[],{"type":597,"tag":1332,"props":1735,"children":1740},{"className":1736,"code":1738,"language":1739,"meta":591},[1737],"language-x86asm","-javaagent:D:\\\\Tools\\\\ja-netfilter\\\\ja-netfilter.jar=jetbrains\n","x86asm",[1741],{"type":597,"tag":1256,"props":1742,"children":1743},{"__ignoreMap":591},[1744],{"type":602,"value":1738},{"type":597,"tag":1483,"props":1746,"children":1747},{},[1748],{"type":597,"tag":598,"props":1749,"children":1750},{},[1751,1753,1759,1761,1767],{"type":602,"value":1752},"此处需要根据你自己解压的路径去修改，路径中的斜杠使用",{"type":597,"tag":1256,"props":1754,"children":1756},{"className":1755},[],[1757],{"type":602,"value":1758},"\\\\",{"type":602,"value":1760},"或者",{"type":597,"tag":1256,"props":1762,"children":1764},{"className":1763},[],[1765],{"type":602,"value":1766},"/",{"type":602,"value":1768},"，建议路径中不要包含空格。",{"type":597,"tag":598,"props":1770,"children":1771},{},[1772],{"type":602,"value":1773},"完整的文件内容应该是这样的",{"type":597,"tag":1332,"props":1775,"children":1780},{"className":1776,"code":1778,"language":1779,"meta":591},[1777],"language-diff","-Xms128m\n-Xmx750m\n-XX:ReservedCodeCacheSize=512m\n-XX:+UseG1GC\n-XX:SoftRefLRUPolicyMSPerMB=50\n-XX:CICompilerCount=2\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:-OmitStackTraceInFastThrow\n-XX:+IgnoreUnrecognizedVMOptions\n-ea\n-Dsun.io.useCanonCaches=false\n-Dsun.java2d.metal=true\n-Djdk.http.auth.tunneling.disabledSchemes=\"\"\n-Djdk.attach.allowAttachSelf=true\n-Djdk.module.illegalAccess.silent=true\n-Dkotlinx.coroutines.debug=off\n-javaagent:D:\\\\Tools\\\\ja-netfilter\\\\ja-netfilter.jar=jetbrains\n","diff",[1781],{"type":597,"tag":1256,"props":1782,"children":1783},{"__ignoreMap":591},[1784],{"type":602,"value":1778},{"type":597,"tag":1138,"props":1786,"children":1788},{"id":1787},"激活idea",[1789],{"type":602,"value":1790},"激活IDEA",{"type":597,"tag":598,"props":1792,"children":1793},{},[1794],{"type":602,"value":1795},"打开IDEA，IDEA会提示你激活，选择输入激活码。",{"type":597,"tag":598,"props":1797,"children":1798},{},[1799,1801,1807],{"type":602,"value":1800},"打开这个网站 ",{"type":597,"tag":1149,"props":1802,"children":1805},{"href":1803,"rel":1804},"https://3.jetbra.in/",[1153],[1806],{"type":602,"value":1803},{"type":602,"value":1808}," 等待片刻，选择一个可以访问的网站，然后找到IDEA的卡片选择复制激活码。",{"type":597,"tag":598,"props":1810,"children":1811},{},[1812],{"type":597,"tag":644,"props":1813,"children":1815},{"alt":591,"src":1814},"/images/2022-11-19-rider-po-jie/2084018-20220904173657931-1850766616.png",[],{"type":597,"tag":598,"props":1817,"children":1818},{},[1819],{"type":602,"value":1820},"填入到IDEA中，点击激活就完成了，不需要关心激活到期时间。",{"type":597,"tag":1138,"props":1822,"children":1824},{"id":1823},"常见问题",[1825],{"type":602,"value":1823},{"type":597,"tag":604,"props":1827,"children":1829},{"id":1828},"idea提示激活码无效-invalid-key",[1830],{"type":602,"value":1831},"IDEA提示激活码无效 Invalid key",{"type":597,"tag":598,"props":1833,"children":1834},{},[1835],{"type":602,"value":1836},"如果有登录账号，可以先退出账号试试，再不行就重装IDEA，我就是这么做的。",{"type":597,"tag":604,"props":1838,"children":1840},{"id":1839},"idea无法启动-运行无反应",[1841],{"type":602,"value":1842},"IDEA无法启动 运行无反应",{"type":597,"tag":598,"props":1844,"children":1845},{},[1846,1848,1854],{"type":602,"value":1847},"看看任务管理器有没有",{"type":597,"tag":1256,"props":1849,"children":1851},{"className":1850},[],[1852],{"type":602,"value":1853},"idea64.exe",{"type":602,"value":1855},"这个进程，有就把它关了。",{"title":591,"searchDepth":1111,"depth":1111,"links":1857},[1858,1859,1860,1861,1865,1866,1867],{"id":1531,"depth":1111,"text":1531},{"id":1575,"depth":1111,"text":1578},{"id":1599,"depth":1111,"text":1599},{"id":1629,"depth":1111,"text":1629,"children":1862},[1863,1864],{"id":1678,"depth":1114,"text":1681},{"id":1695,"depth":1114,"text":1698},{"id":1710,"depth":1111,"text":1713},{"id":1787,"depth":1111,"text":1790},{"id":1823,"depth":1111,"text":1823,"children":1868},[1869,1870],{"id":1828,"depth":1114,"text":1831},{"id":1839,"depth":1114,"text":1842},"content:tool:2022-11-19-rider-po-jie.md","tool/2022-11-19-rider-po-jie.md","2022-11-19",{"_path":357,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":356,"description":1875,"body":1876,"_type":1127,"_id":1925,"_source":1129,"_file":1926,"_extension":1131,"date":1927},"title : \"amd 超频总结\"先超cpu再超内存..内存超频问题会影响cpu超频.内存超频的问题也会导致黑屏pbo中的温度墙以及负压,对于定频定压没有效果进入系统后立即黑屏.可以打开防掉压,或者继续加电压,电压过低也会导致黑屏定压定频的功率会高与pbo的功率定压定频,由于没有温度墙等限制..一定要注意温度..基本上黑屏重启都是cpu的温度造成的..cpu核心温度超过100就会黑屏所以如果定压定频的话,一定要确保你有一个好的散热风扇,因为多开应用或者持续高使用率,由于没有温度墙会升高温度,造成黑屏",{"type":594,"children":1877,"toc":1922},[1878,1882,1888],{"type":597,"tag":1879,"props":1880,"children":1881},"hr",{},[],{"type":597,"tag":1138,"props":1883,"children":1885},{"id":1884},"title-amd-超频总结",[1886],{"type":602,"value":1887},"title : \"amd 超频总结\"",{"type":597,"tag":1889,"props":1890,"children":1891},"ol",{},[1892,1897,1902,1907,1912,1917],{"type":597,"tag":907,"props":1893,"children":1894},{},[1895],{"type":602,"value":1896},"先超cpu再超内存..内存超频问题会影响cpu超频.内存超频的问题也会导致黑屏",{"type":597,"tag":907,"props":1898,"children":1899},{},[1900],{"type":602,"value":1901},"pbo中的温度墙以及负压,对于定频定压没有效果",{"type":597,"tag":907,"props":1903,"children":1904},{},[1905],{"type":602,"value":1906},"进入系统后立即黑屏.可以打开防掉压,或者继续加电压,电压过低也会导致黑屏",{"type":597,"tag":907,"props":1908,"children":1909},{},[1910],{"type":602,"value":1911},"定压定频的功率会高与pbo的功率",{"type":597,"tag":907,"props":1913,"children":1914},{},[1915],{"type":602,"value":1916},"定压定频,由于没有温度墙等限制..一定要注意温度..基本上黑屏重启都是cpu的温度造成的..cpu核心温度超过100就会黑屏",{"type":597,"tag":907,"props":1918,"children":1919},{},[1920],{"type":602,"value":1921},"所以如果定压定频的话,一定要确保你有一个好的散热风扇,因为多开应用或者持续高使用率,由于没有温度墙会升高温度,造成黑屏",{"title":591,"searchDepth":1111,"depth":1111,"links":1923},[1924],{"id":1884,"depth":1111,"text":1887},"content:tool:2022-08-09-amd-over.md","tool/2022-08-09-amd-over.md","2022-08-09",{"_path":354,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":353,"description":1929,"body":1930,"_type":1127,"_id":2157,"_source":1129,"_file":2158,"_extension":1131,"date":2159},"由于升级了dots,致使vs使用的时候总是很卡.所以临时使用了rider,记录下使用过程中遇到的问题",{"type":594,"children":1931,"toc":2155},[1932,1936],{"type":597,"tag":598,"props":1933,"children":1934},{},[1935],{"type":602,"value":1929},{"type":597,"tag":903,"props":1937,"children":1938},{},[1939,1951,1963,1975,1987,1999,2040,2066,2085,2097,2143],{"type":597,"tag":907,"props":1940,"children":1941},{},[1942,1944,1947],{"type":602,"value":1943},"禁用IntelliJ IDEA向Git自动添加、删除或更新文件的功能",{"type":597,"tag":1185,"props":1945,"children":1946},{},[],{"type":597,"tag":644,"props":1948,"children":1950},{"alt":591,"src":1949},"/images/2022-08-02-rider-use/1659421011000.png",[],{"type":597,"tag":907,"props":1952,"children":1953},{},[1954,1956,1959],{"type":602,"value":1955},"keymap设置键位：",{"type":597,"tag":1185,"props":1957,"children":1958},{},[],{"type":597,"tag":644,"props":1960,"children":1962},{"alt":591,"src":1961},"/images/2022-08-02-rider-use/6938c7b76587488faea649d26f43dbac.png",[],{"type":597,"tag":907,"props":1964,"children":1965},{},[1966,1968,1971],{"type":602,"value":1967},"设置主题：Editor=》 color scheme",{"type":597,"tag":1185,"props":1969,"children":1970},{},[],{"type":597,"tag":644,"props":1972,"children":1974},{"alt":591,"src":1973},"/images/2022-08-02-rider-use/2edb6d308f1a42a792826418bc903a6f.png",[],{"type":597,"tag":907,"props":1976,"children":1977},{},[1978,1980,1983],{"type":602,"value":1979},"设置编辑器字体大小",{"type":597,"tag":1185,"props":1981,"children":1982},{},[],{"type":597,"tag":644,"props":1984,"children":1986},{"alt":591,"src":1985},"/images/2022-08-02-rider-use/1659421547000.png",[],{"type":597,"tag":907,"props":1988,"children":1989},{},[1990,1992,1995],{"type":602,"value":1991},"设置c#命名规范,去除前缀以及设置驼峰",{"type":597,"tag":1185,"props":1993,"children":1994},{},[],{"type":597,"tag":644,"props":1996,"children":1998},{"alt":591,"src":1997},"/images/2022-08-02-rider-use/1659428204000.png",[],{"type":597,"tag":907,"props":2000,"children":2001},{},[2002,2004,2007,2009,2014,2016,2021,2023,2026,2028,2031,2035,2038],{"type":602,"value":2003},"去出波浪线警告",{"type":597,"tag":1185,"props":2005,"children":2006},{},[],{"type":602,"value":2008},"在 ",{"type":597,"tag":662,"props":2010,"children":2011},{},[2012],{"type":602,"value":2013},"Error and Warnings",{"type":602,"value":2015}," 里有很多选项，你可以",{"type":597,"tag":662,"props":2017,"children":2018},{},[2019],{"type":602,"value":2020},"选取任意一个，预览它的提示效果，并修改或者直接关闭它",{"type":602,"value":2022},"，",{"type":597,"tag":1185,"props":2024,"children":2025},{},[],{"type":602,"value":2027},"\n关闭后是不是觉得整个世界清爽了好多~",{"type":597,"tag":1185,"props":2029,"children":2030},{},[],{"type":597,"tag":644,"props":2032,"children":2034},{"alt":591,"src":2033},"/images/2022-08-02-rider-use/1659422704000.png",[],{"type":597,"tag":1185,"props":2036,"children":2037},{},[],{"type":602,"value":2039},"点击下面出现颜色 选择去除绿色和黄色标志",{"type":597,"tag":907,"props":2041,"children":2042},{},[2043,2045,2051,2053,2059,2062],{"type":602,"value":2044},"推荐这种去除波浪线,可以通过",{"type":597,"tag":1256,"props":2046,"children":2048},{"className":2047},[],[2049],{"type":602,"value":2050},"show Context Actions",{"type":602,"value":2052}," => ",{"type":597,"tag":1256,"props":2054,"children":2056},{"className":2055},[],[2057],{"type":602,"value":2058},"inspection:\"xxx\"",{"type":597,"tag":1185,"props":2060,"children":2061},{},[],{"type":597,"tag":644,"props":2063,"children":2065},{"alt":591,"src":2064},"/images/2022-08-02-rider-use/1659422560000.png",[],{"type":597,"tag":907,"props":2067,"children":2068},{},[2069,2071,2074,2078,2081],{"type":602,"value":2070},"有关脚本修改了的标志符，可以在下列设置中开启",{"type":597,"tag":1185,"props":2072,"children":2073},{},[],{"type":597,"tag":644,"props":2075,"children":2077},{"alt":591,"src":2076},"/images/2022-08-02-rider-use/20201203141714194.png",[],{"type":597,"tag":1185,"props":2079,"children":2080},{},[],{"type":597,"tag":644,"props":2082,"children":2084},{"alt":591,"src":2083},"/images/2022-08-02-rider-use/1659423520000.png",[],{"type":597,"tag":907,"props":2086,"children":2087},{},[2088,2090,2093],{"type":602,"value":2089},"工具栏的显示隐藏",{"type":597,"tag":1185,"props":2091,"children":2092},{},[],{"type":597,"tag":644,"props":2094,"children":2096},{"alt":591,"src":2095},"/images/2022-08-02-rider-use/1659423590000.png",[],{"type":597,"tag":907,"props":2098,"children":2099},{},[2100,2105,2108,2110,2113,2117,2120,2122,2128,2130,2136,2139],{"type":597,"tag":662,"props":2101,"children":2102},{},[2103],{"type":602,"value":2104},"脚本保存后，Unity后台是否自动刷新",{"type":597,"tag":1185,"props":2106,"children":2107},{},[],{"type":602,"value":2109},"有时候我们修改了脚本，刚保存，就会发现后台的Unity已经开始编译了，会造成一定的卡顿。如果期望只有在切到Unity时才开始编译，可以关闭以下设置：",{"type":597,"tag":1185,"props":2111,"children":2112},{},[],{"type":597,"tag":644,"props":2114,"children":2116},{"alt":591,"src":2115},"/images/2022-08-02-rider-use/1659423746000.png",[],{"type":597,"tag":1185,"props":2118,"children":2119},{},[],{"type":602,"value":2121},"当然unity得需要开启自动刷新才行,否则切换到unity需要按下",{"type":597,"tag":1256,"props":2123,"children":2125},{"className":2124},[],[2126],{"type":602,"value":2127},"ctrl",{"type":602,"value":2129},"+",{"type":597,"tag":1256,"props":2131,"children":2133},{"className":2132},[],[2134],{"type":602,"value":2135},"r",{"type":597,"tag":1185,"props":2137,"children":2138},{},[],{"type":597,"tag":644,"props":2140,"children":2142},{"alt":591,"src":2141},"/images/2022-08-02-rider-use/1659424615000.png",[],{"type":597,"tag":907,"props":2144,"children":2145},{},[2146,2148,2151],{"type":602,"value":2147},"去除灰色参数提示",{"type":597,"tag":1185,"props":2149,"children":2150},{},[],{"type":597,"tag":644,"props":2152,"children":2154},{"alt":591,"src":2153},"/images/2022-08-02-rider-use/1659429053000.png",[],{"title":591,"searchDepth":1111,"depth":1111,"links":2156},[],"content:tool:2022-08-02-rider-use.md","tool/2022-08-02-rider-use.md","2022-08-02",{"_path":351,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":350,"description":2161,"body":2162,"_type":1127,"_id":2356,"_source":1129,"_file":2357,"_extension":1131,"date":2358},"官方文档code-server v4.0.2 docs (coder.com)coder/code-server: VS Code in the browser (github.com)原理基础code-server是一款基于VScode的在线编辑器,主要用于在Linux服务器环境下,实现任何设备通过浏览器即可访问VScode, 进而实现在远程编程.安装linux标准安装方式mkdir -p ~/.local/lib ~/.local/bin\ncurl -fL https://github.com/cdr/code-server/releases/download/v$VERSION/code",{"type":594,"children":2163,"toc":2346},[2164,2172,2220,2228,2233,2241,2246,2254,2260,2268,2273,2278,2286,2291,2312,2320,2325,2333,2338],{"type":597,"tag":1138,"props":2165,"children":2167},{"id":2166},"官方文档",[2168],{"type":597,"tag":662,"props":2169,"children":2170},{},[2171],{"type":602,"value":2166},{"type":597,"tag":903,"props":2173,"children":2174},{},[2175,2198],{"type":597,"tag":907,"props":2176,"children":2177},{},[2178,2185,2192],{"type":597,"tag":1149,"props":2179,"children":2182},{"href":2180,"rel":2181},"https://coder.com/docs/code-server/latest",[1153],[2183],{"type":602,"value":2184},"code-server v4.0.2 docs (",{"type":597,"tag":1149,"props":2186,"children":2189},{"href":2187,"rel":2188},"http://coder.com",[1153],[2190],{"type":602,"value":2191},"coder.com",{"type":597,"tag":1149,"props":2193,"children":2195},{"href":2180,"rel":2194},[1153],[2196],{"type":602,"value":2197},")",{"type":597,"tag":907,"props":2199,"children":2200},{},[2201,2208,2215],{"type":597,"tag":1149,"props":2202,"children":2205},{"href":2203,"rel":2204},"https://github.com/coder/code-server",[1153],[2206],{"type":602,"value":2207},"coder/code-server: VS Code in the browser (",{"type":597,"tag":1149,"props":2209,"children":2212},{"href":2210,"rel":2211},"http://github.com",[1153],[2213],{"type":602,"value":2214},"github.com",{"type":597,"tag":1149,"props":2216,"children":2218},{"href":2203,"rel":2217},[1153],[2219],{"type":602,"value":2197},{"type":597,"tag":1138,"props":2221,"children":2223},{"id":2222},"原理基础",[2224],{"type":597,"tag":662,"props":2225,"children":2226},{},[2227],{"type":602,"value":2222},{"type":597,"tag":598,"props":2229,"children":2230},{},[2231],{"type":602,"value":2232},"code-server是一款基于VScode的在线编辑器,主要用于在Linux服务器环境下,实现任何设备通过浏览器即可访问VScode, 进而实现在远程编程.",{"type":597,"tag":1138,"props":2234,"children":2236},{"id":2235},"安装",[2237],{"type":597,"tag":662,"props":2238,"children":2239},{},[2240],{"type":602,"value":2235},{"type":597,"tag":604,"props":2242,"children":2244},{"id":2243},"linux标准安装方式",[2245],{"type":602,"value":2243},{"type":597,"tag":1332,"props":2247,"children":2249},{"code":2248},"mkdir -p ~/.local/lib ~/.local/bin\ncurl -fL https://github.com/cdr/code-server/releases/download/v$VERSION/code-server-$VERSION-linux-amd64.tar.gz \\\n  | tar -C ~/.local/lib -xz\nmv ~/.local/lib/code-server-$VERSION-linux-amd64 ~/.local/lib/code-server-$VERSION\nln -s ~/.local/lib/code-server-$VERSION/bin/code-server ~/.local/bin/code-server\nPATH=\"~/.local/bin:$PATH\"\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n",[2250],{"type":597,"tag":1256,"props":2251,"children":2252},{"__ignoreMap":591},[2253],{"type":602,"value":2248},{"type":597,"tag":604,"props":2255,"children":2257},{"id":2256},"fedora-centos-rhel-suse",[2258],{"type":602,"value":2259},"Fedora, CentOS, RHEL, SUSE",{"type":597,"tag":1332,"props":2261,"children":2263},{"code":2262},"curl -fOL https://github.com/cdr/code-server/releases/download/v$VERSION/code-server-$VERSION-amd64.rpm\nsudo rpm -i code-server-$VERSION-amd64.rpm\nsudo systemctl enable --now code-server@$USER\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n\nsystemctl start code-server@$USER\nsystemctl stop code-server@$USER\n",[2264],{"type":597,"tag":1256,"props":2265,"children":2266},{"__ignoreMap":591},[2267],{"type":602,"value":2262},{"type":597,"tag":604,"props":2269,"children":2271},{"id":2270},"windows",[2272],{"type":602,"value":2270},{"type":597,"tag":598,"props":2274,"children":2275},{},[2276],{"type":602,"value":2277},"推荐使用yarn或者npm进行安装",{"type":597,"tag":1332,"props":2279,"children":2281},{"code":2280},"yarn global add code-server\n# Or: npm install -g code-server\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n",[2282],{"type":597,"tag":1256,"props":2283,"children":2284},{"__ignoreMap":591},[2285],{"type":602,"value":2280},{"type":597,"tag":1138,"props":2287,"children":2289},{"id":2288},"配置",[2290],{"type":602,"value":2288},{"type":597,"tag":598,"props":2292,"children":2293},{},[2294,2296,2302,2304,2310],{"type":602,"value":2295},"配置文件一般在",{"type":597,"tag":1256,"props":2297,"children":2299},{"className":2298},[],[2300],{"type":602,"value":2301},"~/.config/code-server/config.yaml",{"type":602,"value":2303},",可以将ip配置成",{"type":597,"tag":1256,"props":2305,"children":2307},{"className":2306},[],[2308],{"type":602,"value":2309},"0.0.0.0",{"type":602,"value":2311},",然后将域名解析到该服务器",{"type":597,"tag":1332,"props":2313,"children":2315},{"code":2314},"bind-addr: 127.0.0.1:8080\nauth: password\npassword: *************\ncert: false\n",[2316],{"type":597,"tag":1256,"props":2317,"children":2318},{"__ignoreMap":591},[2319],{"type":602,"value":2314},{"type":597,"tag":598,"props":2321,"children":2322},{},[2323],{"type":602,"value":2324},"安装nginx,并且配置https,否则很多插件不能使用",{"type":597,"tag":1332,"props":2326,"children":2328},{"code":2327},"yum install  -y nginx certbot python3-certbot-nginx\nvim /etc/nginx/conf.d/dev.godgodgame.com.conf\n",[2329],{"type":597,"tag":1256,"props":2330,"children":2331},{"__ignoreMap":591},[2332],{"type":602,"value":2327},{"type":597,"tag":598,"props":2334,"children":2335},{},[2336],{"type":602,"value":2337},"nginx.配置文件",{"type":597,"tag":1332,"props":2339,"children":2341},{"code":2340},"server {\n    listen 443 ssl;\n    #填写绑定证书的域名\n    server_name dev.godgodgame.com;\n    #证书文件名称\n    ssl_certificate  /etc/nginx/certs/dev.godgodgame.com_bundle.crt;\n    #私钥文件名称\n    ssl_certificate_key /etc/nginx/certs/dev.godgodgame.com.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    location / {\n      proxy_pass http://127.0.0.1:8080/;\n      proxy_set_header Host $host;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection upgrade;\n      proxy_set_header Accept-Encoding gzip;\n    }\n}\nserver {\n    listen 80;\n    #填写绑定证书的域名\n    server_name cloud.tencent.com;\n    #把http的域名请求转成https\n    return 301 https://$host$request_uri;\n}\n\n# 先检查nginx配置是否有效/无有异常,如果有异常请按照异常提示修改；使用nginx -t进行nginx.conf的配置检测\n$ nginx -t;\n$ systemctl enable nginx\n",[2342],{"type":597,"tag":1256,"props":2343,"children":2344},{"__ignoreMap":591},[2345],{"type":602,"value":2340},{"title":591,"searchDepth":1111,"depth":1111,"links":2347},[2348,2349,2350,2355],{"id":2166,"depth":1111,"text":2166},{"id":2222,"depth":1111,"text":2222},{"id":2235,"depth":1111,"text":2235,"children":2351},[2352,2353,2354],{"id":2243,"depth":1114,"text":2243},{"id":2256,"depth":1114,"text":2259},{"id":2270,"depth":1114,"text":2270},{"id":2288,"depth":1111,"text":2288},"content:tool:2022-01-30-code-server.md","tool/2022-01-30-code-server.md","2022-01-30",{"_path":348,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":347,"description":2360,"body":2361,"_type":1127,"_id":2446,"_source":1129,"_file":2447,"_extension":1131,"date":2448},"复刻仓库On GitHub.com, navigate to the octocat/Spoon-Knife repository.在页面的右上角，单击 Fork（复刻）。$ git clone https://github.com/YOUR-USERNAME/Spoon-Knife\n> Cloning into `Spoon-Knife`...\n> remote: Counting objects: 10, done.\n> remote: Compressing objects: 100% (8/8), done.\n> remove: Total 10 (delta 1), reused 1",{"type":594,"children":2362,"toc":2442},[2363,2368,2397,2404,2412,2417,2425,2430],{"type":597,"tag":1138,"props":2364,"children":2366},{"id":2365},"复刻仓库",[2367],{"type":602,"value":2365},{"type":597,"tag":903,"props":2369,"children":2370},{},[2371,2385],{"type":597,"tag":907,"props":2372,"children":2373},{},[2374,2376,2383],{"type":602,"value":2375},"On GitHub.com, navigate to the ",{"type":597,"tag":1149,"props":2377,"children":2380},{"href":2378,"rel":2379},"https://github.com/octocat/Spoon-Knife",[1153],[2381],{"type":602,"value":2382},"octocat/Spoon-Knife",{"type":602,"value":2384}," repository.",{"type":597,"tag":907,"props":2386,"children":2387},{},[2388,2390,2395],{"type":602,"value":2389},"在页面的右上角，单击 ",{"type":597,"tag":662,"props":2391,"children":2392},{},[2393],{"type":602,"value":2394},"Fork（复刻）",{"type":602,"value":2396},"。",{"type":597,"tag":598,"props":2398,"children":2399},{},[2400],{"type":597,"tag":644,"props":2401,"children":2403},{"alt":591,"src":2402},"/images/2021-12-12-github-sync/2021-11-30-04-25-59.jpg",[],{"type":597,"tag":1332,"props":2405,"children":2407},{"code":2406},"$ git clone https://github.com/YOUR-USERNAME/Spoon-Knife\n> Cloning into `Spoon-Knife`...\n> remote: Counting objects: 10, done.\n> remote: Compressing objects: 100% (8/8), done.\n> remove: Total 10 (delta 1), reused 10 (delta 1)\n> Unpacking objects: 100% (10/10), done.\n",[2408],{"type":597,"tag":1256,"props":2409,"children":2410},{"__ignoreMap":591},[2411],{"type":602,"value":2406},{"type":597,"tag":1138,"props":2413,"children":2415},{"id":2414},"增加复刻的仓库作为上游远程仓库",[2416],{"type":602,"value":2414},{"type":597,"tag":1332,"props":2418,"children":2420},{"code":2419},"$ git remote add upstream https://github.com/octocat/Spoon-Knife.git\n\n\n$ git remote -v\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)\n> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)\n",[2421],{"type":597,"tag":1256,"props":2422,"children":2423},{"__ignoreMap":591},[2424],{"type":602,"value":2419},{"type":597,"tag":598,"props":2426,"children":2427},{},[2428],{"type":602,"value":2429},"后续就可以进行合并操作了",{"type":597,"tag":903,"props":2431,"children":2432},{},[2433],{"type":597,"tag":907,"props":2434,"children":2435},{},[2436],{"type":597,"tag":1149,"props":2437,"children":2440},{"href":2438,"rel":2439},"https://docs.github.com/cn/get-started/quickstart/fork-a-repo",[1153],[2441],{"type":602,"value":2438},{"title":591,"searchDepth":1111,"depth":1111,"links":2443},[2444,2445],{"id":2365,"depth":1111,"text":2365},{"id":2414,"depth":1111,"text":2414},"content:tool:2021-12-12-github-sync.md","tool/2021-12-12-github-sync.md","2021-12-12",{"_path":345,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":344,"description":2450,"body":2451,"_type":1127,"_id":2541,"_source":1129,"_file":2542,"_extension":1131,"date":2543},"构建设置构建命令# input your command here\ncnpm install -g hexo-cli\ncnpm install\nhexo clean\nhexo generate\n设置构建物\n部署设置下载路径设置部署脚本# 部署脚本会在部署组的每台机器上执行。\n# 一个典型脚本逻辑如下：先将制品包（在下载路径中配置的下载路径）解压缩到指定目录中，再执行启动脚本（通常在代码中维护，如示例中deploy.sh）。\n# 关于这个例子的详细解释见 https://help.aliyun.com/document_detail/153848.html \nmkdir /usr/local/s",{"type":594,"children":2452,"toc":2536},[2453,2458,2463,2471,2480,2485,2490,2497,2502,2510,2515,2528],{"type":597,"tag":1138,"props":2454,"children":2456},{"id":2455},"构建",[2457],{"type":602,"value":2455},{"type":597,"tag":598,"props":2459,"children":2460},{},[2461],{"type":602,"value":2462},"设置构建命令",{"type":597,"tag":1332,"props":2464,"children":2466},{"code":2465},"# input your command here\ncnpm install -g hexo-cli\ncnpm install\nhexo clean\nhexo generate\n",[2467],{"type":597,"tag":1256,"props":2468,"children":2469},{"__ignoreMap":591},[2470],{"type":602,"value":2465},{"type":597,"tag":598,"props":2472,"children":2473},{},[2474,2476],{"type":602,"value":2475},"设置构建物\n",{"type":597,"tag":644,"props":2477,"children":2479},{"alt":591,"src":2478},"/images/2021-12-11-yunxiao-liushuixian-hexo/2021-12-01-22-00-34uxj0h.png",[],{"type":597,"tag":1138,"props":2481,"children":2483},{"id":2482},"部署",[2484],{"type":602,"value":2482},{"type":597,"tag":598,"props":2486,"children":2487},{},[2488],{"type":602,"value":2489},"设置下载路径",{"type":597,"tag":598,"props":2491,"children":2492},{},[2493],{"type":597,"tag":644,"props":2494,"children":2496},{"alt":591,"src":2495},"/images/2021-12-11-yunxiao-liushuixian-hexo/2021-12-01-22-01-45guws3.png",[],{"type":597,"tag":598,"props":2498,"children":2499},{},[2500],{"type":602,"value":2501},"设置部署脚本",{"type":597,"tag":1332,"props":2503,"children":2505},{"code":2504},"# 部署脚本会在部署组的每台机器上执行。\n# 一个典型脚本逻辑如下：先将制品包（在下载路径中配置的下载路径）解压缩到指定目录中，再执行启动脚本（通常在代码中维护，如示例中deploy.sh）。\n# 关于这个例子的详细解释见 https://help.aliyun.com/document_detail/153848.html \nmkdir /usr/local/src/igiven\ntar -zxvf /usr/local/src/igiven.tgz -C /usr/local/src/igiven/\n\\cp -rf /usr/local/src/igiven/* /usr/share/nginx/html\nrm -rf /usr/local/src/igiven.tgz\nrm -rf /usr/local/src/igiven\n",[2506],{"type":597,"tag":1256,"props":2507,"children":2508},{"__ignoreMap":591},[2509],{"type":602,"value":2504},{"type":597,"tag":1138,"props":2511,"children":2513},{"id":2512},"注意点",[2514],{"type":602,"value":2512},{"type":597,"tag":903,"props":2516,"children":2517},{},[2518,2523],{"type":597,"tag":907,"props":2519,"children":2520},{},[2521],{"type":602,"value":2522},"仓库的名称不要例如igiven.github.io.不然部署时拉取仓库会失败",{"type":597,"tag":907,"props":2524,"children":2525},{},[2526],{"type":602,"value":2527},"添加主机时必须使用python2.7",{"type":597,"tag":1332,"props":2529,"children":2531},{"code":2530},"yum install -y nginx python2\nwhereis python\npython -v\nrm /usr/bin/python\nln -s /usr/bin/python2.7 /usr/bin/python\n# 执行过命令可以把python删除再link回去\n\nsystemctl enable nginx\nsystemctl start nginx\n",[2532],{"type":597,"tag":1256,"props":2533,"children":2534},{"__ignoreMap":591},[2535],{"type":602,"value":2530},{"title":591,"searchDepth":1111,"depth":1111,"links":2537},[2538,2539,2540],{"id":2455,"depth":1111,"text":2455},{"id":2482,"depth":1111,"text":2482},{"id":2512,"depth":1111,"text":2512},"content:tool:2021-12-11-yunxiao-liushuixian-hexo.md","tool/2021-12-11-yunxiao-liushuixian-hexo.md","2021-12-11",{"_path":342,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":341,"description":2545,"body":2546,"_type":1127,"_id":3075,"_source":1129,"_file":3076,"_extension":1131,"date":3077},"前言最近在打包 VS Code 插件时，发现打包后的插件体积非常大，而且插件在 VS Code 中的启动速度非常慢，对用户的体验不太友好了。对此做了一些研究，并更改了打包策略，终于把插件的体积从 35M 减少到 3M，并提高了插件的启动速度。本文将带你分析插件体积过大和启动速度过慢的原因，并讲解如何通过使用 webpack 进行打包来减少插件体积。最后将讲解如何配置 externals 剥离一些依赖模块，减少 bundle 的体积，避免出现打包失败的问题。原始打包首先，我们会以 iceworks-page-builder VS Code 插件为例子进行分析，具体的代码可以点击此链接查看。其中，",{"type":594,"children":2547,"toc":3068},[2548,2553,2558,2563,2568,2582,2587,2595,2623,2631,2636,2644,2665,2698,2705,2710,2718,2723,2729,2734,2807,2815,2828,2836,2864,2872,2900,2908,2921,2935,2941,2946,2953,2967,2980,2987,3000,3005,3013,3025,3033,3052,3059,3063],{"type":597,"tag":1138,"props":2549,"children":2551},{"id":2550},"前言",[2552],{"type":602,"value":2550},{"type":597,"tag":598,"props":2554,"children":2555},{},[2556],{"type":602,"value":2557},"最近在打包 VS Code 插件时，发现打包后的插件体积非常大，而且插件在 VS Code 中的启动速度非常慢，对用户的体验不太友好了。对此做了一些研究，并更改了打包策略，终于把插件的体积从 35M 减少到 3M，并提高了插件的启动速度。",{"type":597,"tag":598,"props":2559,"children":2560},{},[2561],{"type":602,"value":2562},"本文将带你分析插件体积过大和启动速度过慢的原因，并讲解如何通过使用 webpack 进行打包来减少插件体积。最后将讲解如何配置 externals 剥离一些依赖模块，减少 bundle 的体积，避免出现打包失败的问题。",{"type":597,"tag":1138,"props":2564,"children":2566},{"id":2565},"原始打包",[2567],{"type":602,"value":2565},{"type":597,"tag":598,"props":2569,"children":2570},{},[2571,2573,2580],{"type":602,"value":2572},"首先，我们会以 iceworks-page-builder VS Code 插件为例子进行分析，具体的代码可以点击",{"type":597,"tag":1149,"props":2574,"children":2577},{"href":2575,"rel":2576},"https://link.zhihu.com/?target=https%3A//github.com/ice-lab/iceworks/tree/v0.1.6/extensions/iceworks-page-builder",[1153],[2578],{"type":602,"value":2579},"此链接",{"type":602,"value":2581},"查看。",{"type":597,"tag":598,"props":2583,"children":2584},{},[2585],{"type":602,"value":2586},"其中，部分目录结构说明如下：",{"type":597,"tag":1332,"props":2588,"children":2590},{"code":2589},"\u003Ccode class=\"language-text\">├── .vscodeignore            # 插件打包时需要忽略的文件\n├── build                     # 构建产物目录\n├── node_modules\n├── package.json\n├── src                       # 插件相关的源代码\n|  ├── extension.ts\n|  ├── services\n|  └── types.d.ts\n├── tsconfig.json\n└── web                       # webview 相关代码 本质是一个 React 项目\u003C/code>\n",[2591],{"type":597,"tag":1256,"props":2592,"children":2593},{"__ignoreMap":591},[2594],{"type":602,"value":2589},{"type":597,"tag":598,"props":2596,"children":2597},{},[2598,2600,2607,2609,2614,2616,2621],{"type":602,"value":2599},"打包插件需要使用 ",{"type":597,"tag":1149,"props":2601,"children":2604},{"href":2602,"rel":2603},"https://link.zhihu.com/?target=https%3A//github.com/microsoft/vscode-vsce",[1153],[2605],{"type":602,"value":2606},"vsce",{"type":602,"value":2608}," 这个工具。 首先确认已安装 ",{"type":597,"tag":1256,"props":2610,"children":2612},{"className":2611},[],[2613],{"type":602,"value":2606},{"type":602,"value":2615}," ；若未安装，则执行以下的命令安装 ",{"type":597,"tag":1256,"props":2617,"children":2619},{"className":2618},[],[2620],{"type":602,"value":2606},{"type":602,"value":2622}," ：",{"type":597,"tag":1332,"props":2624,"children":2626},{"code":2625},"\u003Ccode class=\"language-text\">npm i vsce -g\u003C/code>\n",[2627],{"type":597,"tag":1256,"props":2628,"children":2629},{"__ignoreMap":591},[2630],{"type":602,"value":2625},{"type":597,"tag":598,"props":2632,"children":2633},{},[2634],{"type":602,"value":2635},"在项目的根目录下执行以下命令，即开始对插件进行打包：",{"type":597,"tag":1332,"props":2637,"children":2639},{"code":2638},"\u003Ccode class=\"language-text\">vsce package\u003C/code>\n",[2640],{"type":597,"tag":1256,"props":2641,"children":2642},{"__ignoreMap":591},[2643],{"type":602,"value":2638},{"type":597,"tag":598,"props":2645,"children":2646},{},[2647,2649,2655,2657,2663],{"type":602,"value":2648},"它会先执行 scripts 中的 ",{"type":597,"tag":1256,"props":2650,"children":2652},{"className":2651},[],[2653],{"type":602,"value":2654},"vscode:prepublish",{"type":602,"value":2656}," 命令。从上面可以看出，会先对 Webview 相关的代码进行构建（本质是 CLI 提供的构建能力），得到 js 、html 、css 代码，然后使用 ",{"type":597,"tag":1256,"props":2658,"children":2660},{"className":2659},[],[2661],{"type":602,"value":2662},"tsc",{"type":602,"value":2664}," 对插件源代码（./src/**）进行编译。",{"type":597,"tag":598,"props":2666,"children":2667},{},[2668,2670,2675,2677,2682,2684,2689,2691,2696],{"type":602,"value":2669},"等待 ",{"type":597,"tag":1256,"props":2671,"children":2673},{"className":2672},[],[2674],{"type":602,"value":2654},{"type":602,"value":2676}," 执行完成后， ",{"type":597,"tag":1256,"props":2678,"children":2680},{"className":2679},[],[2681],{"type":602,"value":2606},{"type":602,"value":2683}," 将执行剩下的插件打包操作，最后会在项目根目录下出现一个 .vsix 文件，也就是我们成功打包出来的插件。现在，整个插件的体积是 ",{"type":597,"tag":662,"props":2685,"children":2686},{},[2687],{"type":602,"value":2688},"35M",{"type":602,"value":2690},"，在 VS Code 中启动速度大概为 ",{"type":597,"tag":662,"props":2692,"children":2693},{},[2694],{"type":602,"value":2695},"8s",{"type":602,"value":2697},"。插件启动效果图如下：",{"type":597,"tag":598,"props":2699,"children":2700},{},[2701],{"type":597,"tag":644,"props":2702,"children":2704},{"alt":591,"src":2703},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-fbf1b8f5b23a29b359d922f428152455_b.webp",[],{"type":597,"tag":598,"props":2706,"children":2707},{},[2708],{"type":602,"value":2709},"那我们有办法知道究竟是哪些文件导致这个 .vsix 文件这么大的吗？答案是有的。我们只需要把 .vsix 的后缀改成 .zip，然后把这个 zip 文件进行解压，即可看到整个插件是由哪些文件构成了。",{"type":597,"tag":1332,"props":2711,"children":2713},{"code":2712},"\u003Ccode class=\"language-text\">workspace/ice/iceworks/extensions/iceworks-page-builder/iceworks-page-builder-0.1.7\n└── extension\n   ├── CHANGELOG.md\n   ├── README.en.md\n   ├── README.md\n   ├── assets\n   ├── build                     # 1.86M\n        ├── assets\n      ├── css\n        |   └── index.css\n      ├── extension.js\n      ├── favicon.png\n      ├── index.html\n      ├── js\n      |  └── index.js\n      └── services\n         └── index.js\n   ├── node_modules              # 69.6M\n   ├── package.json\n   ├── package.nls.json\n   └── package.nls.zh-cn.json\u003C/code>\n",[2714],{"type":597,"tag":1256,"props":2715,"children":2716},{"__ignoreMap":591},[2717],{"type":602,"value":2712},{"type":597,"tag":598,"props":2719,"children":2720},{},[2721],{"type":602,"value":2722},"可以看出其中的 node_modules 目录的体积是最大的，这是导致插件体积过大的问题。另外，build 目录和node_modules 目录下有很多模块，正是如此，VS Code 在加载我们的插件的过程中，会加载很多小模块，这就是加载过慢的原因。",{"type":597,"tag":1138,"props":2724,"children":2726},{"id":2725},"使用-webpack-进行打包",[2727],{"type":602,"value":2728},"使用 webpack 进行打包",{"type":597,"tag":598,"props":2730,"children":2731},{},[2732],{"type":602,"value":2733},"相信大部分的前端开发者都知道，现在的模块化的前端开发范式非常流行，与此同时出现了很多模块构建工具，比如 Rollup、webpack 等。这些模块构建工具的出发点之一是，把多个模块打包成一个模块，解决加载多个模块速度过慢的问题。那我们能不能用这些构建工具，把多个小的源文件打包成单个入口文件，从而解决上述的问题呢？答案是肯定的。",{"type":597,"tag":598,"props":2735,"children":2736},{},[2737,2739,2745,2747,2753,2755,2760,2762,2767,2769,2774,2776,2781,2783,2789,2791,2797,2799,2805],{"type":602,"value":2738},"首先我们需要安装一下 ",{"type":597,"tag":1256,"props":2740,"children":2742},{"className":2741},[],[2743],{"type":602,"value":2744},"webpack",{"type":602,"value":2746}," 和 ",{"type":597,"tag":1256,"props":2748,"children":2750},{"className":2749},[],[2751],{"type":602,"value":2752},"webpack-cli",{"type":602,"value":2754}," ，其中， ",{"type":597,"tag":1256,"props":2756,"children":2758},{"className":2757},[],[2759],{"type":602,"value":2744},{"type":602,"value":2761}," 是 Webpack 的核心模块， ",{"type":597,"tag":1256,"props":2763,"children":2765},{"className":2764},[],[2766],{"type":602,"value":2752},{"type":602,"value":2768}," 是 ",{"type":597,"tag":1256,"props":2770,"children":2772},{"className":2771},[],[2773],{"type":602,"value":2744},{"type":602,"value":2775}," 的 CLI 程序，用来在命令行中调用 ",{"type":597,"tag":1256,"props":2777,"children":2779},{"className":2778},[],[2780],{"type":602,"value":2744},{"type":602,"value":2782}," 。另外还需要安装 ",{"type":597,"tag":1256,"props":2784,"children":2786},{"className":2785},[],[2787],{"type":602,"value":2788},"ts-loader",{"type":602,"value":2790}," ，用于加载 ",{"type":597,"tag":1256,"props":2792,"children":2794},{"className":2793},[],[2795],{"type":602,"value":2796},"ts",{"type":602,"value":2798}," 代码并编译成 ",{"type":597,"tag":1256,"props":2800,"children":2802},{"className":2801},[],[2803],{"type":602,"value":2804},"js",{"type":602,"value":2806}," 代码。",{"type":597,"tag":1332,"props":2808,"children":2810},{"code":2809},"\u003Ccode class=\"language-text\">npm i --save-dev webpack webpack-cli ts-loader\u003C/code>\n",[2811],{"type":597,"tag":1256,"props":2812,"children":2813},{"__ignoreMap":591},[2814],{"type":602,"value":2809},{"type":597,"tag":598,"props":2816,"children":2817},{},[2818,2820,2826],{"type":602,"value":2819},"安装完成以后，我们需要在根目录下新建一个 ",{"type":597,"tag":1256,"props":2821,"children":2823},{"className":2822},[],[2824],{"type":602,"value":2825},"webpack.config.js",{"type":602,"value":2827}," ，并增加以下的内容：",{"type":597,"tag":1332,"props":2829,"children":2831},{"code":2830},"\u003Ccode class=\"language-js\">const path = require('path');\n\nconst tsConfigPath = path.join(__dirname, 'tsconfig.json');\n\nconst config = {\n  target: 'node',\n  entry: './src/extension.ts',\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: 'extension.js',\n    libraryTarget: 'commonjs2',\n    devtoolModuleFilenameTemplate: '../[resource-path]',\n  },\n  externals: {\n    vscode: 'commonjs vscode'\n  },\n  resolve: {\n    extensions: ['.ts', '.js'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              configFile: tsConfigPath,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n\nmodule.exports = (env, argv) => {\n  if (argv.mode === 'development') {\n    config.devtool = 'source-map';\n  }\n\n  return config;\n};\u003C/code>\n",[2832],{"type":597,"tag":1256,"props":2833,"children":2834},{"__ignoreMap":591},[2835],{"type":602,"value":2830},{"type":597,"tag":598,"props":2837,"children":2838},{},[2839,2841,2847,2849,2855,2857,2862],{"type":602,"value":2840},"修改 ",{"type":597,"tag":1256,"props":2842,"children":2844},{"className":2843},[],[2845],{"type":602,"value":2846},"package.json",{"type":602,"value":2848}," 中 ",{"type":597,"tag":1256,"props":2850,"children":2852},{"className":2851},[],[2853],{"type":602,"value":2854},"scripts",{"type":602,"value":2856}," 的内容，以使用 ",{"type":597,"tag":1256,"props":2858,"children":2860},{"className":2859},[],[2861],{"type":602,"value":2744},{"type":602,"value":2863}," 进行打包：",{"type":597,"tag":1332,"props":2865,"children":2867},{"code":2866},"\u003Ccode class=\"language-json\">{\n    \"scripts\": {\n    \"vscode:prepublish\": \"rm -rf build && npm run build:web && webpack --mode production\",\n    \"build:web\": \"cd web && npm run build\",\n    \"watch:web\": \"cd web && npm run start\",\n    \"webpack\": \"webpack --mode development\",\n    \"webpack-dev\": \"webpack --mode development --watch\"\n  },\n}\u003C/code>\n",[2868],{"type":597,"tag":1256,"props":2869,"children":2870},{"__ignoreMap":591},[2871],{"type":602,"value":2866},{"type":597,"tag":598,"props":2873,"children":2874},{},[2875,2877,2882,2884,2890,2892,2898],{"type":602,"value":2876},"由于经过 ",{"type":597,"tag":1256,"props":2878,"children":2880},{"className":2879},[],[2881],{"type":602,"value":2744},{"type":602,"value":2883}," 打包后， bundle 中都已经包括了需要的模块。我们可以修改 ",{"type":597,"tag":1256,"props":2885,"children":2887},{"className":2886},[],[2888],{"type":602,"value":2889},".vscodeignore",{"type":602,"value":2891}," 的内容，把插件打包中不需要的文件忽略掉，当然我们的 ",{"type":597,"tag":1256,"props":2893,"children":2895},{"className":2894},[],[2896],{"type":602,"value":2897},"node_modules",{"type":602,"value":2899}," 也可以忽略掉：",{"type":597,"tag":1332,"props":2901,"children":2903},{"code":2902},"\u003Ccode class=\"language-text\">.vscode\nnode_modules\nsrc/\nweb/\ntsconfig.json\nwebpack.config.js\u003C/code>\n",[2904],{"type":597,"tag":1256,"props":2905,"children":2906},{"__ignoreMap":591},[2907],{"type":602,"value":2902},{"type":597,"tag":598,"props":2909,"children":2910},{},[2911,2913,2919],{"type":602,"value":2912},"以上的相关配置可以点击",{"type":597,"tag":1149,"props":2914,"children":2917},{"href":2915,"rel":2916},"https://link.zhihu.com/?target=https%3A//github.com/ice-lab/iceworks/tree/v0.3.0/extensions/iceworks-page-builder",[1153],[2918],{"type":602,"value":2579},{"type":602,"value":2920},"进行查看。",{"type":597,"tag":598,"props":2922,"children":2923},{},[2924,2926,2933],{"type":602,"value":2925},"在官方文档中，有一个章节专门讲解了如何使用 webpack 对插件进行打包。更详细的步骤可以参考",{"type":597,"tag":1149,"props":2927,"children":2930},{"href":2928,"rel":2929},"https://link.zhihu.com/?target=https%3A//code.visualstudio.com/api/working-with-extensions/bundling-extension",[1153],[2931],{"type":602,"value":2932},"文档",{"type":602,"value":2934},"。**",{"type":597,"tag":1138,"props":2936,"children":2938},{"id":2937},"使用-externals-减少-bundle-体积",[2939],{"type":602,"value":2940},"使用 externals 减少 bundle 体积",{"type":597,"tag":598,"props":2942,"children":2943},{},[2944],{"type":602,"value":2945},"当配制好 webpack 相关配置，使用 webpack 打包构建插件时，出现以下的错误：",{"type":597,"tag":598,"props":2947,"children":2948},{},[2949],{"type":597,"tag":644,"props":2950,"children":2952},{"alt":591,"src":2951},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-0281fdef1bde4672c98eb45a0367ad36_1440w.jpg",[],{"type":597,"tag":598,"props":2954,"children":2955},{},[2956,2958,2965],{"type":602,"value":2957},"大概的问题是，使用 webpack 在生产环境下进行打包时，会使用 ",{"type":597,"tag":1149,"props":2959,"children":2962},{"href":2960,"rel":2961},"https://link.zhihu.com/?target=https%3A//github.com/terser/terser",[1153],[2963],{"type":602,"value":2964},"terser",{"type":602,"value":2966}," 对源码进行压缩。但是我们的 bundle 太大了（预计 bundle 的大小超过10M的时候），导致在压缩的过程中出现内存溢出的问题。",{"type":597,"tag":598,"props":2968,"children":2969},{},[2970,2972,2978],{"type":602,"value":2971},"我们使用 ",{"type":597,"tag":1256,"props":2973,"children":2975},{"className":2974},[],[2976],{"type":602,"value":2977},"webpack-bundle-analyzer",{"type":602,"value":2979}," 来分析 bundle 的组成。 bundle 的依赖模块组成具体如下图：",{"type":597,"tag":598,"props":2981,"children":2982},{},[2983],{"type":597,"tag":644,"props":2984,"children":2986},{"alt":591,"src":2985},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-1214a43d4854d3899346cd1f6a91b168_1440w.jpg",[],{"type":597,"tag":598,"props":2988,"children":2989},{},[2990,2992,2998],{"type":602,"value":2991},"可以看出我们项目依赖的 ",{"type":597,"tag":1256,"props":2993,"children":2995},{"className":2994},[],[2996],{"type":602,"value":2997},"prettier",{"type":602,"value":2999}," 占用了 bundle 中非常大的体积。那我们现在需要借助 webpack 中的 externals，不要把该依赖打包到 bundle 中，而是作为一个外部扩展，在运行时再去从外部获取依赖。",{"type":597,"tag":598,"props":3001,"children":3002},{},[3003],{"type":602,"value":3004},"我们可以先在 webpack.config.js 中配置 externals :",{"type":597,"tag":1332,"props":3006,"children":3008},{"code":3007},"\u003Ccode class=\"language-js\">module.exports = {\n  externals: {\n    vscode: 'commonjs vscode',\n  + prettier: 'commonjs prettier'\n  },\n}\u003C/code>\n",[3009],{"type":597,"tag":1256,"props":3010,"children":3011},{"__ignoreMap":591},[3012],{"type":602,"value":3007},{"type":597,"tag":598,"props":3014,"children":3015},{},[3016,3018,3023],{"type":602,"value":3017},"确保插件在打包的时候，相关依赖也存在于插件中，需要在 ",{"type":597,"tag":1256,"props":3019,"children":3021},{"className":3020},[],[3022],{"type":602,"value":2889},{"type":602,"value":3024}," 文件中加入以下内容（这里真的踩了坑了）：",{"type":597,"tag":1332,"props":3026,"children":3028},{"code":3027},"\u003Ccode class=\"language-text\">!node_modules/prettier\u003C/code>\n",[3029],{"type":597,"tag":1256,"props":3030,"children":3031},{"__ignoreMap":591},[3032],{"type":602,"value":3027},{"type":597,"tag":598,"props":3034,"children":3035},{},[3036,3038,3043,3045,3050],{"type":602,"value":3037},"配置完成后，再进行打包，最后打包的插件体积为 ",{"type":597,"tag":662,"props":3039,"children":3040},{},[3041],{"type":602,"value":3042},"3.6M",{"type":602,"value":3044},"，在 VS Code 中启动速度降到了 ",{"type":597,"tag":662,"props":3046,"children":3047},{},[3048],{"type":602,"value":3049},"1s",{"type":602,"value":3051}," ，效果图如下：",{"type":597,"tag":598,"props":3053,"children":3054},{},[3055],{"type":597,"tag":644,"props":3056,"children":3058},{"alt":591,"src":3057},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-7fa4f670dae3d7e42f8b8e62e041289d_b.jpg",[],{"type":597,"tag":1138,"props":3060,"children":3061},{"id":1047},[3062],{"type":602,"value":1047},{"type":597,"tag":598,"props":3064,"children":3065},{},[3066],{"type":602,"value":3067},"如果大家在打包 VS Code 插件时，如果打包出来的插件的体积过大，不妨可以考虑使用 webpack 对你的 VS Code 插件进行打包，会让你的插件有更小的体积，更快的启动速度，更好的用户体验。",{"title":591,"searchDepth":1111,"depth":1111,"links":3069},[3070,3071,3072,3073,3074],{"id":2550,"depth":1111,"text":2550},{"id":2565,"depth":1111,"text":2565},{"id":2725,"depth":1111,"text":2728},{"id":2937,"depth":1111,"text":2940},{"id":1047,"depth":1111,"text":1047},"content:tool:2021-12-02-vscode-plugins-big.md","tool/2021-12-02-vscode-plugins-big.md","2021-12-02",{"_path":339,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":338,"description":3079,"body":3080,"_type":1127,"_id":3208,"_source":1129,"_file":3209,"_extension":1131,"date":3210},"打开网址 https://store.rg-adguard.net/",{"type":594,"children":3081,"toc":3206},[3082,3093,3098,3103,3110,3114,3119,3126,3131,3139,3146,3151,3158,3163,3168,3173,3182,3191,3194],{"type":597,"tag":598,"props":3083,"children":3084},{},[3085,3087],{"type":602,"value":3086},"打开网址 ",{"type":597,"tag":1149,"props":3088,"children":3091},{"href":3089,"rel":3090},"https://store.rg-adguard.net/",[1153],[3092],{"type":602,"value":3089},{"type":597,"tag":598,"props":3094,"children":3095},{},[3096],{"type":602,"value":3097},"以 PackageFamilyName 方式搜索 Microsoft.WindowsStore_8wekyb3d8bbwe",{"type":597,"tag":598,"props":3099,"children":3100},{},[3101],{"type":602,"value":3102},"根据系统选择对应的包，每一种都要下载",{"type":597,"tag":598,"props":3104,"children":3105},{},[3106],{"type":597,"tag":644,"props":3107,"children":3109},{"alt":644,"src":3108},"/images/2021-11-15-install-WindowsStore/1595409-20190313101653224-1704280347.png",[],{"type":597,"tag":1523,"props":3111,"children":3112},{"id":2235},[3113],{"type":602,"value":2235},{"type":597,"tag":598,"props":3115,"children":3116},{},[3117],{"type":602,"value":3118},"在下载目录按住 shift 键，然后鼠标右键，打开 Powershell",{"type":597,"tag":598,"props":3120,"children":3121},{},[3122],{"type":597,"tag":644,"props":3123,"children":3125},{"alt":644,"src":3124},"/images/2021-11-15-install-WindowsStore/1595409-20190313103101576-1015756103.png",[],{"type":597,"tag":598,"props":3127,"children":3128},{},[3129],{"type":602,"value":3130},"执行安装命令，此处只安装了 64 位安装包，建议在安装时把 32 位也一并下载安装",{"type":597,"tag":1332,"props":3132,"children":3134},{"code":3133},"# 安装该路径下所有包\nAdd-AppxPackage *\n",[3135],{"type":597,"tag":1256,"props":3136,"children":3137},{"__ignoreMap":591},[3138],{"type":602,"value":3133},{"type":597,"tag":598,"props":3140,"children":3141},{},[3142],{"type":597,"tag":644,"props":3143,"children":3145},{"alt":644,"src":3144},"/images/2021-11-15-install-WindowsStore/1595409-20190313103229471-402846601.png",[],{"type":597,"tag":598,"props":3147,"children":3148},{},[3149],{"type":602,"value":3150},"此时点击开始菜单应该就能看到应用商店了",{"type":597,"tag":598,"props":3152,"children":3153},{},[3154],{"type":597,"tag":644,"props":3155,"children":3157},{"alt":644,"src":3156},"/images/2021-11-15-install-WindowsStore/1595409-20190313103450428-1760401185.png",[],{"type":597,"tag":598,"props":3159,"children":3160},{},[3161],{"type":602,"value":3162},"清空应用商店缓存 WSReset.exe",{"type":597,"tag":598,"props":3164,"children":3165},{},[3166],{"type":602,"value":3167},"应用商店 ID 为 9WZDNCRFJBMP",{"type":597,"tag":598,"props":3169,"children":3170},{},[3171],{"type":602,"value":3172},"应用安装器 ID 为 9NBLGGH4NNS1",{"type":597,"tag":598,"props":3174,"children":3175},{},[3176],{"type":597,"tag":1149,"props":3177,"children":3180},{"href":3178,"rel":3179},"https://github.com/dragonflylee/WimHelper",[1153],[3181],{"type":602,"value":3178},{"type":597,"tag":598,"props":3183,"children":3184},{},[3185],{"type":597,"tag":1149,"props":3186,"children":3189},{"href":3187,"rel":3188},"https://github.com/kkkgo/LTSB-Add-MicrosoftStore",[1153],[3190],{"type":602,"value":3187},{"type":597,"tag":1879,"props":3192,"children":3193},{},[],{"type":597,"tag":598,"props":3195,"children":3196},{},[3197],{"type":597,"tag":1149,"props":3198,"children":3201},{"href":3199,"rel":3200},"https://www.microsoft.com/zh-cn/store",[1153],[3202],{"type":597,"tag":662,"props":3203,"children":3204},{},[3205],{"type":602,"value":3199},{"title":591,"searchDepth":1111,"depth":1111,"links":3207},[],"content:tool:2021-11-15-install-WindowsStore.md","tool/2021-11-15-install-WindowsStore.md","2021-11-15",{"_path":336,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":335,"description":3212,"body":3213,"_type":1127,"_id":3292,"_source":1129,"_file":3293,"_extension":1131,"date":3294},"安装cockpit后，默认只能通过IP地址+端口号来访问。其实，还可以通过nginx代理来访问。",{"type":594,"children":3214,"toc":3287},[3215,3219,3225,3233,3239,3244,3252,3260,3265],{"type":597,"tag":598,"props":3216,"children":3217},{},[3218],{"type":602,"value":3212},{"type":597,"tag":1138,"props":3220,"children":3222},{"id":3221},"添加nginxconf配置",[3223],{"type":602,"value":3224},"添加Nginx.conf配置",{"type":597,"tag":1332,"props":3226,"children":3228},{"code":3227}," \n## 添加并修改\nvi /etc/nginx/conf.d/cockpit.godgodgame.com\n\n-------------------------------------------------------------------------------------\n\n#使用cockpt名称配置上游服务器\nupstream cockpit {\n    server 127.0.0.1:9090;\n}\n \n#将http重定向到https\nserver{\n    listen 80;\n    server_name cockpit.godgodgame.com;\n    return 301 https://$server_name$request_uri;\n}\n\n#使用https访问并配置ssl\nserver {\n    listen 443 ssl http2;\n    #填写绑定证书的域名\n    server_name cockpit.godgodgame.com;\n    \n    \n    #证书文件名称\n    ssl_certificate /etc/nginx/cert/1_godgodgame.com_bundle.crt;\n    #私钥文件名称\n    ssl_certificate_key /etc/nginx/cert/2_godgodgame.com.key;\n    ssl_session_timeout 5m;\n    #请按照以下协议配置\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; \n    #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n    ssl_prefer_server_ciphers on;\n \n    location / {\n        # Required to proxy the connection to Cockpit\n        proxy_pass https://cockpit;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Required for web sockets to function\n        proxy_http_version 1.1;\n        proxy_buffering off;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n\n        # Pass ETag header from Cockpit to clients.\n        # See: https://github.com/cockpit-project/cockpit/issues/5239\n        gzip off;\n    }\n}\n-------------------------------------------------------------------------------------\n# 先检查nginx配置是否有效/无有异常,如果有异常请按照异常提示修改；使用nginx -t进行nginx.conf的配置检测\n$ nginx -t;\n \n# 重启nginx\n$ nginx -s reload;\n",[3229],{"type":597,"tag":1256,"props":3230,"children":3231},{"__ignoreMap":591},[3232],{"type":602,"value":3227},{"type":597,"tag":1138,"props":3234,"children":3236},{"id":3235},"修改cockpit",[3237],{"type":602,"value":3238},"修改Cockpit",{"type":597,"tag":598,"props":3240,"children":3241},{},[3242],{"type":602,"value":3243},"这时输入域名，能看到登录页面，但登录后，显示不出内容，页面全白",{"type":597,"tag":1332,"props":3245,"children":3247},{"code":3246},"sudo vim /etc/cockpit/cockpit.conf\n\n参照如下配置修改，注意域名替换为your_domain_host：\n[WebService]\nOrigins = https://cockpit.godgodgame.com https://127.0.0.1:9090\nProtocolHeader = X-Forwarded-Proto\nAllowUnencrypted = true\n\nsystemctl restart cockpit\n",[3248],{"type":597,"tag":1256,"props":3249,"children":3250},{"__ignoreMap":591},[3251],{"type":602,"value":3246},{"type":597,"tag":1332,"props":3253,"children":3255},{"code":3254},"map $http_upgrade $connection_upgrade { default upgrade; '' close; }\n \nupstream websocket {\nserver 127.0.0.1:9090;\n}\n \nserver{\n    listen 80;\n    server_name cockpit.godgodgame.com;\n    return 301 https://$server_name$request_uri;\n}\n \nserver {\n    listen 443 ssl http2;\n    server_name cockpit.godgodgame.com;\n \n    #ssl on;\n    ssl_certificate /etc/nginx/cert/1_cockpit.godgodgame.com_bundle.crt;\n    ssl_certificate_key /etc/nginx/cert/2_cockpit.godgodgame.com.key;\n \n    location / {\n        root /;\n        index index.html;\n        proxy_redirect off;\n        proxy_pass http://websocket;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $http_host;\n    }\n}\n",[3256],{"type":597,"tag":1256,"props":3257,"children":3258},{"__ignoreMap":591},[3259],{"type":602,"value":3254},{"type":597,"tag":1138,"props":3261,"children":3263},{"id":3262},"参考链接",[3264],{"type":602,"value":3262},{"type":597,"tag":903,"props":3266,"children":3267},{},[3268,3278],{"type":597,"tag":907,"props":3269,"children":3270},{},[3271],{"type":597,"tag":1149,"props":3272,"children":3275},{"href":3273,"rel":3274},"https://github.com/cockpit-project/cockpit/wiki/Proxying-Cockpit-over-nginx",[1153],[3276],{"type":602,"value":3277},"Proxying Cockpit over nginx · cockpit-project/cockpit Wiki (github.com)",{"type":597,"tag":907,"props":3279,"children":3280},{},[3281],{"type":597,"tag":1149,"props":3282,"children":3285},{"href":3283,"rel":3284},"https://cloud.tencent.com/document/product/400/35244",[1153],[3286],{"type":602,"value":3283},{"title":591,"searchDepth":1111,"depth":1111,"links":3288},[3289,3290,3291],{"id":3221,"depth":1111,"text":3224},{"id":3235,"depth":1111,"text":3238},{"id":3262,"depth":1111,"text":3262},"content:tool:2021-11-07-cockpit-linux.md","tool/2021-11-07-cockpit-linux.md","2021-11-07",{"_path":333,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":332,"description":3296,"body":3297,"_type":1127,"_id":3554,"_source":1129,"_file":3555,"_extension":1131,"date":3556},"Pak解包和打包Pak文件就是UE4游戏生成的数据包文件，PC游戏一般放在游戏路径下的Content\\Paks，安卓则在obb解包后游戏路径下的Content\\Paks中，一般汉化所需的文本都放在pakchunk0-WindowsNoEditor.pak（PC端）或者pakchunk0-Android_ASTC.pak(移动端)中，如果不确定可以全部解包一下。目前主流的解包和打包工具有两种，一种是quickbms，另一种是UnrealPakSwitch。使用quickbms解包首先介绍一下quickbms(开发者论坛网站:https://zenhax.com/)的使用方法，quickbms并非",{"type":594,"children":3298,"toc":3552},[3299,3307,3312,3317,3325,3339,3346,3351,3358,3363,3370,3375,3382,3390,3395,3402,3407,3415,3437,3444,3449,3463,3471,3476,3483,3488,3495,3500,3505],{"type":597,"tag":598,"props":3300,"children":3301},{},[3302],{"type":597,"tag":662,"props":3303,"children":3304},{},[3305],{"type":602,"value":3306},"Pak解包和打包",{"type":597,"tag":598,"props":3308,"children":3309},{},[3310],{"type":602,"value":3311},"Pak文件就是UE4游戏生成的数据包文件，PC游戏一般放在游戏路径下的Content\\Paks，安卓则在obb解包后游戏路径下的Content\\Paks中，一般汉化所需的文本都放在pakchunk0-WindowsNoEditor.pak（PC端）或者pakchunk0-Android_ASTC.pak(移动端)中，如果不确定可以全部解包一下。",{"type":597,"tag":598,"props":3313,"children":3314},{},[3315],{"type":602,"value":3316},"目前主流的解包和打包工具有两种，一种是quickbms，另一种是UnrealPakSwitch。",{"type":597,"tag":598,"props":3318,"children":3319},{},[3320],{"type":597,"tag":662,"props":3321,"children":3322},{},[3323],{"type":602,"value":3324},"使用quickbms解包",{"type":597,"tag":598,"props":3326,"children":3327},{},[3328,3330,3337],{"type":602,"value":3329},"首先介绍一下quickbms(开发者论坛网站:",{"type":597,"tag":1149,"props":3331,"children":3334},{"href":3332,"rel":3333},"https://zenhax.com/",[1153],[3335],{"type":602,"value":3336},"https://zenhax.com/)的使用方法，quickbms并非UE4专用的解包打包工具，而是一个可以根据相应脚本插件来解包的工具，打开quickbms的目录，会看到这些文件，解包主要使用quickbms.exe和quickbms_4gb_files.exe，顾名思义quickbms_4gb_files.exe就是给超过4g的大文件解包使用的，没有超过的使用quickbms.exe解包即可。",{"type":602,"value":3338},"%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%8Cquickbms%E5%B9%B6%E9%9D%9EUE4%E4%B8%93%E7%94%A8%E7%9A%84%E8%A7%A3%E5%8C%85%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%80%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E7%9B%B8%E5%BA%94%E8%84%9A%E6%9C%AC%E6%8F%92%E4%BB%B6%E6%9D%A5%E8%A7%A3%E5%8C%85%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%8C%E6%89%93%E5%BC%80quickbms%E7%9A%84%E7%9B%AE%E5%BD%95%EF%BC%8C%E4%BC%9A%E7%9C%8B%E5%88%B0%E8%BF%99%E4%BA%9B%E6%96%87%E4%BB%B6%EF%BC%8C%E8%A7%A3%E5%8C%85%E4%B8%BB%E8%A6%81%E4%BD%BF%E7%94%A8quickbms.exe%E5%92%8Cquickbms_4gb_files.exe%EF%BC%8C%E9%A1%BE%E5%90%8D%E6%80%9D%E4%B9%89quickbms_4gb_files.exe%E5%B0%B1%E6%98%AF%E7%BB%99%E8%B6%85%E8%BF%874g%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8C%85%E4%BD%BF%E7%94%A8%E7%9A%84%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%B6%85%E8%BF%87%E7%9A%84%E4%BD%BF%E7%94%A8quickbms.exe%E8%A7%A3%E5%8C%85%E5%8D%B3%E5%8F%AF%E3%80%82)",{"type":597,"tag":598,"props":3340,"children":3341},{},[3342],{"type":597,"tag":644,"props":3343,"children":3345},{"alt":644,"src":3344},"/images/2021-11-06-ue4-view/1607844816-d70f13e360aab32.png",[],{"type":597,"tag":598,"props":3347,"children":3348},{},[3349],{"type":602,"value":3350},"使用过程很简单，打开quickbms.exe会提示选择选择解包脚本，我们选择unreal_tournament_4.bms这个脚本",{"type":597,"tag":598,"props":3352,"children":3353},{},[3354],{"type":597,"tag":644,"props":3355,"children":3357},{"alt":644,"src":3356},"/images/2021-11-06-ue4-view/1607844817-dba7c407119b5ba.png",[],{"type":597,"tag":598,"props":3359,"children":3360},{},[3361],{"type":602,"value":3362},"然后会再次提示选择pak，我们选择对应的pak包即可",{"type":597,"tag":598,"props":3364,"children":3365},{},[3366],{"type":597,"tag":644,"props":3367,"children":3369},{"alt":644,"src":3368},"/images/2021-11-06-ue4-view/1607844818-69c6a966ef586fc.png",[],{"type":597,"tag":598,"props":3371,"children":3372},{},[3373],{"type":602,"value":3374},"如果是没有加密的pak此时就会正常解包，如果是加密的pak，则需要输入密钥(密钥获取方式后面教程会提到)，后面就等待解包完成即可",{"type":597,"tag":598,"props":3376,"children":3377},{},[3378],{"type":597,"tag":644,"props":3379,"children":3381},{"alt":644,"src":3380},"/images/2021-11-06-ue4-view/1607844818-e6616f823a65b43.png",[],{"type":597,"tag":598,"props":3383,"children":3384},{},[3385],{"type":597,"tag":662,"props":3386,"children":3387},{},[3388],{"type":602,"value":3389},"使用quickbms打包",{"type":597,"tag":598,"props":3391,"children":3392},{},[3393],{"type":602,"value":3394},"quickbms打包实际上就是解包的反过程，这里不能再直接使用quickbms.exe打包，而是要用打包脚本，如下图的三个脚本，使用reimport.bat打包有个条件，修改后的文件不能比源文件大。reimport2.bat和reimport3.bat按作者说法已经解决了这个限制，但是在实际使用中仍有问题，所以如果修改后的文件变大了就不建议使用了；",{"type":597,"tag":598,"props":3396,"children":3397},{},[3398],{"type":597,"tag":644,"props":3399,"children":3401},{"alt":644,"src":3400},"/images/2021-11-06-ue4-view/1607844819-43d08de99d1ba79.png",[],{"type":597,"tag":598,"props":3403,"children":3404},{},[3405],{"type":602,"value":3406},"quickbms打包有一个优点，就是不需要提供全部的文件，只需要将修改后的文件按pak包中的目录放置好就行(注: 一定要是完整目录)，比如修改了Pak包中TWD\\Content\\Localization\\Game\\en中的Game.locres文件，那么就要建立TWD\\Content\\Localization\\Game\\en这个路径将修改的Game.locres文件放入其中，然后双击reimport.bat脚本，同样的选择unreal_tournament_4.bms这个脚本，选择pak包，最后选择刚刚修改文件的目录即可",{"type":597,"tag":598,"props":3408,"children":3409},{},[3410],{"type":597,"tag":662,"props":3411,"children":3412},{},[3413],{"type":602,"value":3414},"使用UnrealPakSwitch解包和打包",{"type":597,"tag":598,"props":3416,"children":3417},{},[3418,3420,3426,3428,3435],{"type":602,"value":3419},"UnrealPakSwitch工具(作者详细教程链接:",{"type":597,"tag":1149,"props":3421,"children":3424},{"href":3422,"rel":3423},"https://gbatemp.net/threads/how-to-unpack-and-repack-unreal-engine-4-files.531784/",[1153],[3425],{"type":602,"value":3422},{"type":602,"value":3427}," )实际使用的是虚幻4引擎中的UnrealPak.exe工具来进行解包和打包的，所以相对更加可靠，由于依赖的是u4pak.py脚本，所以需要先安装Python环境(可到官网下载，链接: ",{"type":597,"tag":1149,"props":3429,"children":3432},{"href":3430,"rel":3431},"https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe",[1153],[3433],{"type":602,"value":3434},"https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe)。安装过程不在赘述注意建立Path环境变量。安装好后，首先需要使用1.check这个脚本检测版本，将pak包放入UnrealPakSwitch工具目录下，然后拖动到1.check.cmd上即可弹出版本，Unreal",{"type":602,"value":3436},"%E3%80%82%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%8D%E5%9C%A8%E8%B5%98%E8%BF%B0%E6%B3%A8%E6%84%8F%E5%BB%BA%E7%AB%8BPath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E3%80%82%E5%AE%89%E8%A3%85%E5%A5%BD%E5%90%8E%EF%BC%8C%E9%A6%96%E5%85%88%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A81.check%E8%BF%99%E4%B8%AA%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E7%89%88%E6%9C%AC%EF%BC%8C%E5%B0%86pak%E5%8C%85%E6%94%BE%E5%85%A5UnrealPakSwitch%E5%B7%A5%E5%85%B7%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8B%96%E5%8A%A8%E5%88%B01.check.cmd%E4%B8%8A%E5%8D%B3%E5%8F%AF%E5%BC%B9%E5%87%BA%E7%89%88%E6%9C%AC%EF%BC%8CUnreal) Engine 4.19.2 (for v4 *.pak), Unreal Engine 4.20.3 (for v5 *.pak), Unreal Engine 4.21.2 (for v7 *.pak), Unreal Engine 4.22.3 (for v8 *.pak), Unreal Engine 4.24.1 (for v8.23 *.pak), Unreal Engine 4.25.4 (for v9 *.pak).，检测版本后根据对应的版本放入相应版本的UnrealPak.exe工具，作者教程中写的很详细，不在赘述。",{"type":597,"tag":598,"props":3438,"children":3439},{},[3440],{"type":597,"tag":644,"props":3441,"children":3443},{"alt":644,"src":3442},"/images/2021-11-06-ue4-view/1607844820-2b83cb865fd7122.png",[],{"type":597,"tag":598,"props":3445,"children":3446},{},[3447],{"type":602,"value":3448},"然后就是解包，过程很简单，将pak包拖动到相应版本的unpack-vxx.cmd上，如果是加密包则拖动到unpack-encrypted-vxx.cmd上，即可自动进行解包，解包后目录会输出在UnrealPakSwitch工具目录下。同时会生成一个lista.txt文件，这个文件包含pak包中所有文件信息，后面打包需要用到。",{"type":597,"tag":598,"props":3450,"children":3451},{},[3452,3454,3461],{"type":602,"value":3453},"当修改好后需要打包的时候，就要对lista.txt文件进行修改，详细修改方法见作者教程",{"type":597,"tag":1149,"props":3455,"children":3458},{"href":3456,"rel":3457},"https://gbatemp.net/threads/how-to-unpack-and-repack-unreal-engine-4-files.531784/%E4%B8%AD%E7%9A%84Pack",[1153],[3459],{"type":602,"value":3460},"https://gbatemp.net/threads/how-to-unpack-and-repack-unreal-engine-4-files.531784/中的Pack",{"type":602,"value":3462}," files部分，修改好后拖动到pack-vxx.cmd上即可。",{"type":597,"tag":598,"props":3464,"children":3465},{},[3466],{"type":597,"tag":662,"props":3467,"children":3468},{},[3469],{"type":602,"value":3470},"简单导出并汉化文本文件",{"type":597,"tag":598,"props":3472,"children":3473},{},[3474],{"type":602,"value":3475},"对于多语言的游戏，游戏文本基本都是放在Content\\Localization\\下的，如果目录下的文件是文本文件，那么直接用记事本打开修改即可，如果是locres文件，则需要使用工具来导出文本",{"type":597,"tag":598,"props":3477,"children":3478},{},[3479],{"type":597,"tag":644,"props":3480,"children":3482},{"alt":644,"src":3481},"/images/2021-11-06-ue4-view/1607844821-7744d389d53038c.png",[],{"type":597,"tag":598,"props":3484,"children":3485},{},[3486],{"type":602,"value":3487},"使用unreal_locres_export.exe是导出，unreal_locres_import.exe是导入，导出后的文本就是下面这样",{"type":597,"tag":598,"props":3489,"children":3490},{},[3491],{"type":597,"tag":644,"props":3492,"children":3494},{"alt":644,"src":3493},"/images/2021-11-06-ue4-view/1607844822-881c9b8a8029f4e.png",[],{"type":597,"tag":598,"props":3496,"children":3497},{},[3498],{"type":602,"value":3499},"将其修改成中文后(不要有任何换行动作，文件不要重命名)，使用导入工具生成locres文件即可。",{"type":597,"tag":598,"props":3501,"children":3502},{},[3503],{"type":602,"value":3504},"必备工具：",{"type":597,"tag":1889,"props":3506,"children":3507},{},[3508,3537,3542,3547],{"type":597,"tag":907,"props":3509,"children":3510},{},[3511,3513,3519,3521,3524,3526,3532,3535],{"type":602,"value":3512},"Umodel 下载网址：",{"type":597,"tag":1149,"props":3514,"children":3517},{"href":3515,"rel":3516},"http://www.gildor.org/en/projects/umodel",[1153],[3518],{"type":602,"value":3515},{"type":602,"value":3520},"   国外大神作品，英文网站，有点英语基础就行。",{"type":597,"tag":1185,"props":3522,"children":3523},{},[],{"type":602,"value":3525},"不想点开网站的下载链接：",{"type":597,"tag":1149,"props":3527,"children":3530},{"href":3528,"rel":3529},"http://www.gildor.org/down/43/umodel/umodel_win32.zip",[1153],[3531],{"type":602,"value":3528},{"type":597,"tag":1185,"props":3533,"children":3534},{},[],{"type":602,"value":3536},"之前只有32位系统可以用，现在更新后64位也可以用了（我的就是）",{"type":597,"tag":907,"props":3538,"children":3539},{},[3540],{"type":602,"value":3541},"ActorX Import 也是上个网站上的插件，用于3ds max导入pskx文件用。下载解压后把文件放到3ds max 安装路径里的stdplugs文件夹里面。",{"type":597,"tag":907,"props":3543,"children":3544},{},[3545],{"type":602,"value":3546},"3ds max 版本不限，但最好不要太低，我用的2019最新版，可以用。注意3ds max最好破解一下，不然30天用的不舒服。",{"type":597,"tag":907,"props":3548,"children":3549},{},[3550],{"type":602,"value":3551},"UE4",{"title":591,"searchDepth":1111,"depth":1111,"links":3553},[],"content:tool:2021-11-06-ue4-view.md","tool/2021-11-06-ue4-view.md","2021-11-06",{"_path":330,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":329,"description":3558,"body":3559,"_type":1127,"_id":3650,"_source":1129,"_file":3651,"_extension":1131,"date":3652},"微软DNS服务器——可以长期信赖的稳定服务器。主用：4.2.2.1备用：4.2.2.2如果你使用win10,且要经常登录微软账号.一定要设置一个国内公共DNS服务提供商：百度DNS服务器——延迟很小，毕竟是大品牌，响应速度也不错，口碑不错。​\t主用：180.76.76.76腾讯DNS服务器——延迟小，响应快，口碑不错。​\t主用：119.29.29.29​\t备用：182.254.116.116阿里DNS服务器——延迟小，响应快，口碑不错。​\t主用：223.5.5.5​\t备用：223.6.6.6CNNIC中国互联网络信息中心 DNS服务器——国家队产品，地址好记，经常用来做网络连通性测试的。​\t主",{"type":594,"children":3560,"toc":3646},[3561,3567,3572,3577,3582,3588],{"type":597,"tag":604,"props":3562,"children":3564},{"id":3563},"微软dns服务器可以长期信赖的稳定服务器",[3565],{"type":602,"value":3566},"微软DNS服务器——可以长期信赖的稳定服务器。",{"type":597,"tag":598,"props":3568,"children":3569},{},[3570],{"type":602,"value":3571},"主用：4.2.2.1",{"type":597,"tag":598,"props":3573,"children":3574},{},[3575],{"type":602,"value":3576},"备用：4.2.2.2",{"type":597,"tag":598,"props":3578,"children":3579},{},[3580],{"type":602,"value":3581},"如果你使用win10,且要经常登录微软账号.一定要设置一个",{"type":597,"tag":604,"props":3583,"children":3585},{"id":3584},"国内公共dns服务提供商",[3586],{"type":602,"value":3587},"国内公共DNS服务提供商：",{"type":597,"tag":903,"props":3589,"children":3590},{},[3591,3601,3616,3631],{"type":597,"tag":907,"props":3592,"children":3593},{},[3594,3596,3599],{"type":602,"value":3595},"百度DNS服务器——延迟很小，毕竟是大品牌，响应速度也不错，口碑不错。",{"type":597,"tag":1185,"props":3597,"children":3598},{},[],{"type":602,"value":3600},"​\t主用：180.76.76.76",{"type":597,"tag":907,"props":3602,"children":3603},{},[3604,3606,3609,3611,3614],{"type":602,"value":3605},"腾讯DNS服务器——延迟小，响应快，口碑不错。",{"type":597,"tag":1185,"props":3607,"children":3608},{},[],{"type":602,"value":3610},"​\t主用：119.29.29.29",{"type":597,"tag":1185,"props":3612,"children":3613},{},[],{"type":602,"value":3615},"​\t备用：182.254.116.116",{"type":597,"tag":907,"props":3617,"children":3618},{},[3619,3621,3624,3626,3629],{"type":602,"value":3620},"阿里DNS服务器——延迟小，响应快，口碑不错。",{"type":597,"tag":1185,"props":3622,"children":3623},{},[],{"type":602,"value":3625},"​\t主用：223.5.5.5",{"type":597,"tag":1185,"props":3627,"children":3628},{},[],{"type":602,"value":3630},"​\t备用：223.6.6.6",{"type":597,"tag":907,"props":3632,"children":3633},{},[3634,3636,3639,3641,3644],{"type":602,"value":3635},"CNNIC中国互联网络信息中心 DNS服务器——国家队产品，地址好记，经常用来做网络连通性测试的。",{"type":597,"tag":1185,"props":3637,"children":3638},{},[],{"type":602,"value":3640},"​\t主用：1.2.4.8",{"type":597,"tag":1185,"props":3642,"children":3643},{},[],{"type":602,"value":3645},"​\t备用：202.98.0.68",{"title":591,"searchDepth":1111,"depth":1111,"links":3647},[3648,3649],{"id":3563,"depth":1114,"text":3566},{"id":3584,"depth":1114,"text":3587},"content:tool:2021-05-06-dns.md","tool/2021-05-06-dns.md","2021-05-06",{"_path":327,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":326,"description":3654,"body":3655,"_type":1127,"_id":3705,"_source":1129,"_file":3706,"_extension":1131,"date":3707},"他是收费的..收费的..收费的..和腾讯云的相关产品https://console.cloud.tencent.com/sls  主要是部署的时候使用https://console.cloud.tencent.com/cdn  如果你使用了自己的域名...则会使用cdnhttps://console.cloud.tencent.com/cos5  你生产的网站实际上是放在这个里面的.",{"type":594,"children":3656,"toc":3703},[3657,3662,3667],{"type":597,"tag":598,"props":3658,"children":3659},{},[3660],{"type":602,"value":3661},"他是收费的..收费的..收费的..",{"type":597,"tag":598,"props":3663,"children":3664},{},[3665],{"type":602,"value":3666},"和腾讯云的相关产品",{"type":597,"tag":1889,"props":3668,"children":3669},{},[3670,3681,3692],{"type":597,"tag":907,"props":3671,"children":3672},{},[3673,3679],{"type":597,"tag":1149,"props":3674,"children":3677},{"href":3675,"rel":3676},"https://console.cloud.tencent.com/sls",[1153],[3678],{"type":602,"value":3675},{"type":602,"value":3680},"  主要是部署的时候使用",{"type":597,"tag":907,"props":3682,"children":3683},{},[3684,3690],{"type":597,"tag":1149,"props":3685,"children":3688},{"href":3686,"rel":3687},"https://console.cloud.tencent.com/cdn",[1153],[3689],{"type":602,"value":3686},{"type":602,"value":3691},"  如果你使用了自己的域名...则会使用cdn",{"type":597,"tag":907,"props":3693,"children":3694},{},[3695,3701],{"type":597,"tag":1149,"props":3696,"children":3699},{"href":3697,"rel":3698},"https://console.cloud.tencent.com/cos5",[1153],[3700],{"type":602,"value":3697},{"type":602,"value":3702},"  你生产的网站实际上是放在这个里面的.",{"title":591,"searchDepth":1111,"depth":1111,"links":3704},[],"content:tool:2020-11-16-coding-pages.md","tool/2020-11-16-coding-pages.md","2020-11-16",{"_path":324,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":323,"description":3709,"body":3710,"_type":1127,"_id":3793,"_source":1129,"_file":3794,"_extension":1131,"date":3795},"包缓存太大每次运行Unity都会发现自己的C盘空间在急剧缩小，查了一下发现是C:\\Users\\Username\\AppData\\Local\\Unity\\cache这个文件夹特别大，它主要是存储一些Unity常用的packages，默认都是存在C盘下。\n为了拯救C盘空间，可以通过设置环境变量的方式解决，具体请参考Global Cache，或Configure Unity Package Manager global cache location。添加环境变量[environment]::setEnvironmentVariable('UPM_CACHE_ROOT','D:\\Users\\zhepa",{"type":594,"children":3711,"toc":3789},[3712,3717,3739,3744,3752,3757,3762,3770,3779],{"type":597,"tag":1138,"props":3713,"children":3715},{"id":3714},"包缓存太大",[3716],{"type":602,"value":3714},{"type":597,"tag":598,"props":3718,"children":3719},{},[3720,3722,3729,3731,3738],{"type":602,"value":3721},"每次运行Unity都会发现自己的C盘空间在急剧缩小，查了一下发现是C:\\Users\\Username\\AppData\\Local\\Unity\\cache这个文件夹特别大，它主要是存储一些Unity常用的packages，默认都是存在C盘下。\n为了拯救C盘空间，可以通过设置环境变量的方式解决，具体请参考",{"type":597,"tag":1149,"props":3723,"children":3726},{"href":3724,"rel":3725},"https://docs.unity3d.com/Manual/upm-cache.html?_ga=2.102441737.940588655.1611571898-92384475.1591107641",[1153],[3727],{"type":602,"value":3728},"Global Cache",{"type":602,"value":3730},"，或",{"type":597,"tag":1149,"props":3732,"children":3735},{"href":3733,"rel":3734},"https://forum.unity.com/threads/configure-unity-package-manager-global-cache-location.650245/",[1153],[3736],{"type":602,"value":3737},"Configure Unity Package Manager global cache location",{"type":602,"value":2396},{"type":597,"tag":598,"props":3740,"children":3741},{},[3742],{"type":602,"value":3743},"添加环境变量",{"type":597,"tag":1332,"props":3745,"children":3747},{"code":3746},"[environment]::setEnvironmentVariable('UPM_CACHE_ROOT','D:\\Users\\zhepama\\AppData\\Unity\\Caches','User')\n",[3748],{"type":597,"tag":1256,"props":3749,"children":3750},{"__ignoreMap":591},[3751],{"type":602,"value":3746},{"type":597,"tag":1138,"props":3753,"children":3755},{"id":3754},"商店资源太大",[3756],{"type":602,"value":3754},{"type":597,"tag":598,"props":3758,"children":3759},{},[3760],{"type":602,"value":3761},"使用cmd,注意powershell是不支持mklink的",{"type":597,"tag":1332,"props":3763,"children":3765},{"code":3764}," mklink /J \"C:\\Users\\zhepama\\AppData\\Roaming\\Unity\\Asset Store-5.x\" \"E:\\Asset\\Asset Store-5.x\"\n",[3766],{"type":597,"tag":1256,"props":3767,"children":3768},{"__ignoreMap":591},[3769],{"type":602,"value":3764},{"type":597,"tag":598,"props":3771,"children":3772},{},[3773],{"type":597,"tag":1149,"props":3774,"children":3777},{"href":3775,"rel":3776},"https://forum.unity.com/threads/asset-store-download-folder.83620/page-2",[1153],[3778],{"type":602,"value":3775},{"type":597,"tag":598,"props":3780,"children":3781},{},[3782],{"type":597,"tag":1149,"props":3783,"children":3786},{"href":3784,"rel":3785},"https://docs.unity.cn/cn/2021.3/Manual/upm-config-cache.html",[1153],[3787],{"type":602,"value":3788},"Customizing the shared cache locations - Unity 手册",{"title":591,"searchDepth":1111,"depth":1111,"links":3790},[3791,3792],{"id":3714,"depth":1111,"text":3714},{"id":3754,"depth":1111,"text":3754},"content:tool:2020-11-15-unity-is-big.md","tool/2020-11-15-unity-is-big.md","2020-11-15",1710779035449]