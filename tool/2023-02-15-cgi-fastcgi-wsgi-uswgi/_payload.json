[{"data":1,"prerenderedAt":1132},["Reactive",2],{"content-query-55qhGgX4aD":3,"content-navigation-8C37fagqQL":550},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":544,"_id":545,"_source":546,"_file":547,"_extension":548,"date":549},"/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi","tool",false,"","CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","在学习 Python Web 开发时候，可能会遇到诸如 uwsgi、wsgi 等名词，下面通过梳理总结，探究它们之间的关系。",{"type":11,"children":12,"toc":527},"root",[13,20,27,32,37,42,47,52,57,65,70,75,84,89,96,101,109,116,121,126,132,137,142,147,152,157,169,174,179,186,191,197,202,207,215,220,225,230,235,241,251,256,263,268,273,278,283,288,293,299,304,309,314,319,334,340,345,363,370,375,383,388,393,400,405,418,423,431,436,444,449,457,462,467,485,490,496,506,511,516,522],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":21,"props":22,"children":24},"h3",{"id":23},"cgi",[25],{"type":19,"value":26},"CGI",{"type":14,"tag":15,"props":28,"children":29},{},[30],{"type":19,"value":31},"CGI（Common Gateway Interface）通用网关接口，是一个协议，是外部应用程序（CGI 程序）与 Web 服务器之间的接口标准，该协议定义了 Web 服务器调用外部应用程序的时候需要输入的参数，和给 Web 服务器的返回结果。",{"type":14,"tag":15,"props":33,"children":34},{},[35],{"type":19,"value":36},"通俗来说，它规定一个程序该如何与 Web 服务器程序之间通信，从而可以让这个程序跑在 Web 服务器上。",{"type":14,"tag":21,"props":38,"children":40},{"id":39},"起源",[41],{"type":19,"value":39},{"type":14,"tag":15,"props":43,"children":44},{},[45],{"type":19,"value":46},"最早的 Web 服务器简单地响应浏览器发来的 HTTP 请求，并将存储在服务器上的 HTML 文件返回给浏览器，也就是静态 HTML。这个场景下的服务器一般被称为 HTTP 服务器，常见的有 Apache 的 httpd 和 Nginx。",{"type":14,"tag":15,"props":48,"children":49},{},[50],{"type":19,"value":51},"事物总是不 断发展，网站也越来越复杂，所以出现动态技术。但是服务器并不能直接运行 php、asp这样的文件，自己不能做，外包给别人吧，但是要与第三做个约定，我给你什么，然后你给我什么，就是握把请求参数发送给你，然后我接收你的处 理结果给客户端。",{"type":14,"tag":15,"props":53,"children":54},{},[55],{"type":19,"value":56},"那这个约定就是 Common Gateway Interface，简称 CGI。这个协议可以用 VB、C、PHP、Python 来实现。CGI只是接口协议，根本不是什么语言。",{"type":14,"tag":15,"props":58,"children":59},{},[60],{"type":14,"tag":61,"props":62,"children":64},"img",{"alt":7,"src":63},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/c75c10385343fbf28d11e6289721428965388f60.png",[],{"type":14,"tag":15,"props":66,"children":67},{},[68],{"type":19,"value":69},"引入 CGI 以便客户端请求能够触发 Web 服务器运行另一个外部程序，客户端所输入的数据也会传给这个外部程序，该程序运行结束后会将生成的 HTML 和其他数据通过 Web 服务器再返回给客户端（即动态请求，比如基于 PHP、Python、Java 实现的应用）。利用 CGI 可以针对用户请求，动态返回给客户端各种各样动态变化的信息。",{"type":14,"tag":21,"props":71,"children":73},{"id":72},"工作原理",[74],{"type":19,"value":72},{"type":14,"tag":15,"props":76,"children":77},{},[78],{"type":14,"tag":79,"props":80,"children":81},"strong",{},[82],{"type":19,"value":83},"Web 服务器与 CGI 程序的交互",{"type":14,"tag":15,"props":85,"children":86},{},[87],{"type":19,"value":88},"Web 服务器将根据 CGI 程序的类型决定数据向 CGI 程序的传送方式，一般是通过标准输入/输出流和环境变量来与 CGI 程序间传递数据。如下图所示：",{"type":14,"tag":15,"props":90,"children":91},{},[92],{"type":14,"tag":61,"props":93,"children":95},{"alt":7,"src":94},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/6159252dd42a28343479a71f7cea41e314cebfab.jpeg",[],{"type":14,"tag":15,"props":97,"children":98},{},[99],{"type":19,"value":100},"CGI 程序通过标准输入（STDIN）和标准输出（STDOUT）来进行输入输出。此外 CGI 程序还通过环境变量来得到输入，操作系统提供了许多环境变量，它们定义了程序的执行环境，应用程序可以存取它们。Web 服务器和 CGI 接口又另外设置了一些环境变量，用来向 CGI 程序传递一些重要的参数。",{"type":14,"tag":15,"props":102,"children":103},{},[104],{"type":14,"tag":79,"props":105,"children":106},{},[107],{"type":19,"value":108},"常用 CGI 环境变量：",{"type":14,"tag":15,"props":110,"children":111},{},[112],{"type":14,"tag":61,"props":113,"children":115},{"alt":7,"src":114},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/b03533fa828ba61ef7e05521636b1f03304e591e.jpeg",[],{"type":14,"tag":15,"props":117,"children":118},{},[119],{"type":19,"value":120},"每当客户请求 CGI 的时候，WEB服务器就请求操作系统生成一个新的CGI解释器进程（如 php-cgi.exe），CGI 的一个进程则处理完一个请求后退出，下一个请求来时再创建新进程。",{"type":14,"tag":15,"props":122,"children":123},{},[124],{"type":19,"value":125},"当然，这样在访问量很少没有并发的情况也行。但当访问量增大，并发存在，这种方式就不适合了，于是就有了FastCGI",{"type":14,"tag":21,"props":127,"children":129},{"id":128},"fastcgi",[130],{"type":19,"value":131},"FastCGI",{"type":14,"tag":15,"props":133,"children":134},{},[135],{"type":19,"value":136},"FASTCGI 是 Web 服务器（ex:Nginx）和语言解释器（ex:uWsgi）两者底层的通信协议的规范，是对CGI的开放的扩展。",{"type":14,"tag":15,"props":138,"children":139},{},[140],{"type":19,"value":141},"CGI的一个扩展，像是一个常驻（long-live）型的CGI ，废除了 CGI fork-and-execute （来一个请求 fork 一个新进程处理，处理完再把进程 kill 掉）的工作方式，转而使用一种长生存期的方法，减少了进程消耗，提升了性能。",{"type":14,"tag":15,"props":143,"children":144},{},[145],{"type":19,"value":146},"而FastCGI 则会先 fork 一个 master 进程，解析配置文件，初始化执行环境，然后再 fork 多个 worker 进程（与 Nginx 有点像），当 HTTP 请求过来时，master 进程将其会传递给一个 worker 进程，然后立即可以接受下一个请求，这样就避免了重复的初始化操作，效率自然也就提高了。",{"type":14,"tag":15,"props":148,"children":149},{},[150],{"type":19,"value":151},"而且当 worker 进程不够用时，master 进程还可以根据配置预先启动几个 worker 进程等着；当空闲 worker 进程太多时，也会关掉一些，这样不仅提高了性能，还节约了系统资源",{"type":14,"tag":21,"props":153,"children":155},{"id":154},"php-fpm",[156],{"type":19,"value":154},{"type":14,"tag":15,"props":158,"children":159},{},[160,162,167],{"type":19,"value":161},"FastCGI 只是一个协议规范，需要每个语言具体去实现，",{"type":14,"tag":79,"props":163,"children":164},{},[165],{"type":19,"value":166},"PHP-FPM 就是 PHP 版本的 FastCGI 协议实现",{"type":19,"value":168},"，有了它，就是实现 PHP 脚本与 Web 服务器（通常是 Nginx）之间的通信，同时它也是一个 PHP SAPI，从而构建起 PHP 解释器与 Web 服务器之间的桥梁。",{"type":14,"tag":15,"props":170,"children":171},{},[172],{"type":19,"value":173},"Php-fpm全称是php fastcgi process manager即php fastcgi进程管理器，相比fastcgi静态的唤起cgi，fpm能根据访问的压力动态的唤起cgi进程和销毁以到达动态的调整cgi数量，这样可以有效的使用内存。",{"type":14,"tag":15,"props":175,"children":176},{},[177],{"type":19,"value":178},"除此之外还有其它的一些优点，比如，fpm还可以平滑的重载php配置；由于fpm是使用Unix-Socket来和服务器通讯，所以也不用再配置cgi端口；fpm有更好的状态输出和slowlog日志，502的时候能给出更多的错误细节。",{"type":14,"tag":15,"props":180,"children":181},{},[182],{"type":14,"tag":61,"props":183,"children":185},{"alt":7,"src":184},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/3812b31bb051f819133af1d2fdebc2e42f73e7f0.png",[],{"type":14,"tag":15,"props":187,"children":188},{},[189],{"type":19,"value":190},"PHP-FPM 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在 PHP-FPM 中，master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程进行处理，worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端。这就是 PHP-FPM 的基本工作原理",{"type":14,"tag":21,"props":192,"children":194},{"id":193},"wsgi-uwsgi-uwsgi",[195],{"type":19,"value":196},"WSGI / uwsgi / uWSGI",{"type":14,"tag":15,"props":198,"children":199},{},[200],{"type":19,"value":201},"在 Python Web 开发中，我们经常使用 Uwsgi 配合 Nginx 部署一个 Web 框架，如 Django 或 flask。同时我们又会说，框架和 Web 服务器之间要符合 WSGI 协议。",{"type":14,"tag":15,"props":203,"children":204},{},[205],{"type":19,"value":206},"那就来厘清一下这几个概念。",{"type":14,"tag":15,"props":208,"children":209},{},[210],{"type":14,"tag":79,"props":211,"children":212},{},[213],{"type":19,"value":214},"Web 服务器和 Web框架",{"type":14,"tag":15,"props":216,"children":217},{},[218],{"type":19,"value":219},"在讲 uWSGI 和 WSGI 之前，先要弄清楚 Web 开发的两大块，Web服务器和Web框架。",{"type":14,"tag":15,"props":221,"children":222},{},[223],{"type":19,"value":224},"Web服务器即用来接受客户端请求，建立连接，转发响应的程序。至于转发的内容是什么，交由Web框架来处理，即处理这些业务逻辑。如查询数据库、生成实时信息等。Nginx就是一个Web服务器，Django或flask就是Web框架。",{"type":14,"tag":15,"props":226,"children":227},{},[228],{"type":19,"value":229},"那么如何实现uWSGI和WSGI的配合呢？如何做到任意一个Web服务器，都能搭配任意一个框架呢？这就产生了WSGI协议。只要Web服务器和Web框架满足WSGI协议，它们就能相互搭配。所以WSGI只是一个协议，一个约定。而不是Python的模块、框架等具体的功能。",{"type":14,"tag":15,"props":231,"children":232},{},[233],{"type":19,"value":234},"而uWSGI，则是实现了WSGI协议的一个Web服务器。即用来接受客户端请求，转发响应的程序。实际上，一个uWSGI的Web服务器，再加上Django这样的Web框架，就已经可以实现网站的功能了。",{"type":14,"tag":21,"props":236,"children":238},{"id":237},"wsgi",[239],{"type":19,"value":240},"WSGI",{"type":14,"tag":15,"props":242,"children":243},{},[244,246],{"type":19,"value":245},"WSGI，（WEB SERVER GATEWAY INTERFACE），Web服务器网关接口，是一种Web服务器网关接口，它是一个Web服务器（如Nginx，uWSGI等服务器）与Web应用（如Flask框架写的程序）通信的一种规范。",{"type":14,"tag":79,"props":247,"children":248},{},[249],{"type":19,"value":250},"当前运行在WSGI协议之上的Web框架有Bottle，Flask，Django",{"type":14,"tag":15,"props":252,"children":253},{},[254],{"type":19,"value":255},"实现了Python Web程序与服务器之间交互的通用性。有了这个东西，web.py或者bottle或者django等等的Python Web开发框架，就可以轻松地部署在不同的Web server上了，不需要做任何特殊配置（也需要一些小小的配置调整）",{"type":14,"tag":15,"props":257,"children":258},{},[259],{"type":14,"tag":61,"props":260,"children":262},{"alt":7,"src":261},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/00e93901213fb80ea214ae5d158ea727bb3894d8.png",[],{"type":14,"tag":15,"props":264,"children":265},{},[266],{"type":19,"value":267},"WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的Web应用。",{"type":14,"tag":15,"props":269,"children":270},{},[271],{"type":19,"value":272},"例如 uWSGI和 Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的Web框架，可以根据项目实际情况搭配使用。",{"type":14,"tag":15,"props":274,"children":275},{},[276],{"type":19,"value":277},"像Django，Flask框架都有自己实现的简单的WSGI server，一般用于服务器调试，生产环境下建议用其他WSGI server，WSGI服务器的选择很多，包括uWSGI和gunicorn",{"type":14,"tag":21,"props":279,"children":281},{"id":280},"uwsgi",[282],{"type":19,"value":280},{"type":14,"tag":15,"props":284,"children":285},{},[286],{"type":19,"value":287},"同WSGI一样是一种通信协议",{"type":14,"tag":15,"props":289,"children":290},{},[291],{"type":19,"value":292},"uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。",{"type":14,"tag":21,"props":294,"children":296},{"id":295},"uwsgi-服务器",[297],{"type":19,"value":298},"uWSGI (服务器)",{"type":14,"tag":15,"props":300,"children":301},{},[302],{"type":19,"value":303},"它是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。用于接收前端服务器转发的动态请求并处理后发给 Web 应用程序。",{"type":14,"tag":15,"props":305,"children":306},{},[307],{"type":19,"value":308},"因为apache也好，Nginx也罢，它们自己都没有解析动态语言如php的功能，而是分派给其他模块来做，比如apache就可以说内置了php模块，支持的非常爽，让人感觉好像apache就支持php一样。uwsgi实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。",{"type":14,"tag":15,"props":310,"children":311},{},[312],{"type":19,"value":313},"uWSGI是使用C编写的，显示了自有的uwsgi协议的Web服务器。它自带丰富的组件，其中核心组件包含进程管理、监控、IPC等功能，实现应用服务器接口的请求插件支持多种语言和平台，比如WSGI、Rack、Lua WSAPI，网管组件实现了负载均衡、代理和理由功能",{"type":14,"tag":15,"props":315,"children":316},{},[317],{"type":19,"value":318},"uWSGI也可以当做中间件。",{"type":14,"tag":320,"props":321,"children":322},"ul",{},[323,329],{"type":14,"tag":324,"props":325,"children":326},"li",{},[327],{"type":19,"value":328},"如果是Nginx+uWSGI+App，那uWSGI就是一个中间件",{"type":14,"tag":324,"props":330,"children":331},{},[332],{"type":19,"value":333},"如果是uWSGI+App，那它就是服务器",{"type":14,"tag":21,"props":335,"children":337},{"id":336},"nginxuwgsi",[338],{"type":19,"value":339},"Nginx+uWGSI",{"type":14,"tag":15,"props":341,"children":342},{},[343],{"type":19,"value":344},"假设我们使用 Python 的 Django 框架写了一个网站，现在要将它挂在网上运行，我们一般需要：",{"type":14,"tag":320,"props":346,"children":347},{},[348,353,358],{"type":14,"tag":324,"props":349,"children":350},{},[351],{"type":19,"value":352},"Nginx 做为代理服务器：负责静态资源发送（js、css、图片等）、动态请求转发以及结果的回复。",{"type":14,"tag":324,"props":354,"children":355},{},[356],{"type":19,"value":357},"uWSGI 做为后端服务器：负责接收 Nginx 转发的请求并处理后发给 Django 应用以及接收 Django 应用返回信息转发给 Nginx。",{"type":14,"tag":324,"props":359,"children":360},{},[361],{"type":19,"value":362},"Django 应用收到请求后处理数据并渲染相应的返回页面给 uWSGI 服务器。",{"type":14,"tag":15,"props":364,"children":365},{},[366],{"type":14,"tag":61,"props":367,"children":369},{"alt":7,"src":368},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/35a85edf8db1cb1373f2b22aff0bde4793584bdc.jpeg",[],{"type":14,"tag":15,"props":371,"children":372},{},[373],{"type":19,"value":374},"一个Django应用，通过WSGI协议连接uWSGI服务器，uWSGI服务器实现WSGI、http等协议，通过uwsgi协议和Nginx服务器实现http的动态请求和转发以及结果",{"type":14,"tag":15,"props":376,"children":377},{},[378],{"type":14,"tag":79,"props":379,"children":380},{},[381],{"type":19,"value":382},"问题：有 uWGSI 了，Django 为什么还需要 Nginx？",{"type":14,"tag":15,"props":384,"children":385},{},[386],{"type":19,"value":387},"一个普通的个人网站，访问量不大的话，当然可以由 uWSGI 和 Django 构成。但是一旦访问量过大，客户端请求连接就要进行长时间的等待。这个时候就出来了分布式服务器，我们可以多来几台 Web 服务器，都能处理请求。",{"type":14,"tag":15,"props":389,"children":390},{},[391],{"type":19,"value":392},"但是谁来分配客户端的请求连接和 Web 服务器呢？Nginx 就是这样一个管家的存在，由它来分配。这也就是由 Nginx 实现反向代理，即代理服务器。",{"type":14,"tag":15,"props":394,"children":395},{},[396],{"type":14,"tag":61,"props":397,"children":399},{"alt":7,"src":398},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/f2deb48f8c5494ee428402900faa68f798257e79.jpeg",[],{"type":14,"tag":15,"props":401,"children":402},{},[403],{"type":19,"value":404},"Nginx 是一个 HTTP 和反向代理服务器",{"type":14,"tag":320,"props":406,"children":407},{},[408,413],{"type":14,"tag":324,"props":409,"children":410},{},[411],{"type":19,"value":412},"正向代理：正向的就是由浏览器主动的想代理服务器发出请求，经代理服务器做出处理后再转给目标服务器",{"type":14,"tag":324,"props":414,"children":415},{},[416],{"type":19,"value":417},"反向代理：反向的就是不管浏览器同不同意，请求都会经过代理服务器处理再发给目标服务器",{"type":14,"tag":15,"props":419,"children":420},{},[421],{"type":19,"value":422},"使用Nginx作为反向代理服务器的好处：",{"type":14,"tag":320,"props":424,"children":425},{},[426],{"type":14,"tag":324,"props":427,"children":428},{},[429],{"type":19,"value":430},"安全",{"type":14,"tag":15,"props":432,"children":433},{},[434],{"type":19,"value":435},"不管什么请求都要经过代理服务器，可以避免外部程序直接攻击Web服务器",{"type":14,"tag":320,"props":437,"children":438},{},[439],{"type":14,"tag":324,"props":440,"children":441},{},[442],{"type":19,"value":443},"负载均衡",{"type":14,"tag":15,"props":445,"children":446},{},[447],{"type":19,"value":448},"根据请求情况和服务器负载情况，将请求分配给不同的Web服务器，保证服务器性能",{"type":14,"tag":320,"props":450,"children":451},{},[452],{"type":14,"tag":324,"props":453,"children":454},{},[455],{"type":19,"value":456},"提高Web服务器的IO性能",{"type":14,"tag":15,"props":458,"children":459},{},[460],{"type":19,"value":461},"请求从客户端传到Web服务器是需要时间的，传递多长时间就会让这个进程阻塞多长时间，而通过反向代理，就可以由反向代理完整接受该请求，然后再传给Web服务器，从而保证服务器性能，而且有的一些简单的事情（比如静态文件）可以直接由反向代理处理，不经过Web服务器",{"type":14,"tag":21,"props":463,"children":465},{"id":464},"总结",[466],{"type":19,"value":464},{"type":14,"tag":320,"props":468,"children":469},{},[470,475,480],{"type":14,"tag":324,"props":471,"children":472},{},[473],{"type":19,"value":474},"WSGI是一种通信协议",{"type":14,"tag":324,"props":476,"children":477},{},[478],{"type":19,"value":479},"uwsgi是一种通信协议，常用于在uWSGI服务器与其他网络服务器的数据通信",{"type":14,"tag":324,"props":481,"children":482},{},[483],{"type":19,"value":484},"而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器",{"type":14,"tag":15,"props":486,"children":487},{},[488],{"type":19,"value":489},"百度百科上说uwsgi是一种线路协议而不是通信协议，个人更倾向于uwsgi是类似WSGI的通信协议的说法，uwsgi和WSGI都是基于CGI扩展出来的。",{"type":14,"tag":21,"props":491,"children":493},{"id":492},"asgi",[494],{"type":19,"value":495},"ASGI",{"type":14,"tag":15,"props":497,"children":498},{},[499,504],{"type":14,"tag":79,"props":500,"children":501},{},[502],{"type":19,"value":503},"异步网关协议接口",{"type":19,"value":505},"，一个介于网络协议服务和Python应用之间的标准接口，能够处理多种通用的协议类型，包括HTTP，HTTP2和WebSocket。",{"type":14,"tag":15,"props":507,"children":508},{},[509],{"type":19,"value":510},"然而目前的常用的WSGI主要是针对HTTP风格的请求响应模型做的设计，并且越来越多的不遵循这种模式的协议逐渐成为Web变成的标准之一，例如WebSocket。",{"type":14,"tag":15,"props":512,"children":513},{},[514],{"type":19,"value":515},"ASGI尝试保持在一个简单的应用接口的前提下，提供允许数据能够在任意的时候、被任意应用进程发送和接受的抽象。并且同样描述了一个新的，兼容HTTP请求响应以及WebSocket数据帧的序列格式。允许这些协议能通过网络或本地socket进行传输，以及让不同的协议被分配到不同的进程中。",{"type":14,"tag":21,"props":517,"children":519},{"id":518},"wsgi和asgi的区别",[520],{"type":19,"value":521},"WSGI和ASGI的区别",{"type":14,"tag":15,"props":523,"children":524},{},[525],{"type":19,"value":526},"WSGI是基于HTTP协议模式的，不支持WebSocket，而ASGI的诞生则是为了解决Python常用的WSGI不支持当前Web开发中的一些新的协议标准。同时，ASGI对于WSGI原有的模式的支持和WebSocket的扩展，即ASGI是WSGI的扩展。",{"title":7,"searchDepth":528,"depth":528,"links":529},2,[530,532,533,534,535,536,537,538,539,540,541,542,543],{"id":23,"depth":531,"text":26},3,{"id":39,"depth":531,"text":39},{"id":72,"depth":531,"text":72},{"id":128,"depth":531,"text":131},{"id":154,"depth":531,"text":154},{"id":193,"depth":531,"text":196},{"id":237,"depth":531,"text":240},{"id":280,"depth":531,"text":280},{"id":295,"depth":531,"text":298},{"id":336,"depth":531,"text":339},{"id":464,"depth":531,"text":464},{"id":492,"depth":531,"text":495},{"id":518,"depth":531,"text":521},"markdown","content:tool:2023-02-15-cgi-fastcgi-wsgi-uswgi.md","content","tool/2023-02-15-cgi-fastcgi-wsgi-uswgi.md","md","2023-02-15",[551,561,688,737,789,802,912],{"title":552,"_path":553,"children":554},"Art","/art",[555,558],{"title":556,"_path":557},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":559,"_path":560},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":562,"_path":563,"children":564},"Dotnet","/dotnet",[565,568,571,574,577,580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685],{"title":566,"_path":567},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":569,"_path":570},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":572,"_path":573},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":575,"_path":576},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":578,"_path":579},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":581,"_path":582},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":584,"_path":585},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":587,"_path":588},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":590,"_path":591},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":593,"_path":594},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":596,"_path":597},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":599,"_path":600},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":602,"_path":603},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":605,"_path":606},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":608,"_path":609},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":611,"_path":612},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":614,"_path":615},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":617,"_path":618},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":620,"_path":621},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":623,"_path":624},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":626,"_path":627},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":629,"_path":630},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":632,"_path":633},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":635,"_path":636},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":638,"_path":639},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":641,"_path":642},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":644,"_path":645},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":647,"_path":648},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":650,"_path":651},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":653,"_path":654},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":656,"_path":657},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":659,"_path":660},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":662,"_path":663},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":665,"_path":666},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":668,"_path":669},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":671,"_path":672},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":674,"_path":675},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":677,"_path":678},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":680,"_path":681},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":683,"_path":684},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":686,"_path":687},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":689,"_path":690,"children":691},"Game","/game",[692,695,698,701,704,707,710,713,716,719,722,725,728,731,734],{"title":693,"_path":694},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":696,"_path":697},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":699,"_path":700},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":702,"_path":703},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":705,"_path":706},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":708,"_path":709},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":711,"_path":712},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":714,"_path":715},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":717,"_path":718},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":720,"_path":721},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":723,"_path":724},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":726,"_path":727},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":729,"_path":730},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":732,"_path":733},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":735,"_path":736},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":738,"_path":739,"children":740},"Gyj","/gyj",[741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786],{"title":742,"_path":743},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":745,"_path":746},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":748,"_path":749},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":751,"_path":752},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":754,"_path":755},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":757,"_path":758},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":760,"_path":761},"玩法","/gyj/2022-08-22-wanfa",{"title":763,"_path":764},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":766,"_path":767},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":769,"_path":770},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":772,"_path":773},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":775,"_path":776},"门派内容相关","/gyj/2022-11-17-sect",{"title":778,"_path":779},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":781,"_path":782},"种植","/gyj/2022-12-01-zhongzhi",{"title":784,"_path":785},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":787,"_path":788},"跑商","/gyj/2023-11-01-paoshang",{"title":790,"_path":791,"children":792},"Js","/js",[793,796,799],{"title":794,"_path":795},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":797,"_path":798},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":800,"_path":801},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":803,"_path":804,"children":805},"Tool","/tool",[806,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,896,899,902,905,908,911],{"title":807,"_path":808},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":810,"_path":811},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":813,"_path":814},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":816,"_path":817},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":819,"_path":820},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":822,"_path":823},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":825,"_path":826},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":828,"_path":829},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":831,"_path":832},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":834,"_path":835},"mac下brew 使用","/tool/2020-01-13-brew",{"title":837,"_path":838},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":840,"_path":841},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":843,"_path":844},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":846,"_path":847},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":849,"_path":850},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":852,"_path":853},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":855,"_path":856},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":858,"_path":859},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":861,"_path":862},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":864,"_path":865},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":867,"_path":868},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":870,"_path":871},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":873,"_path":874},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":876,"_path":877},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":879,"_path":880},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":882,"_path":883},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":885,"_path":886},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":888,"_path":889},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":891,"_path":892},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":894,"_path":895},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":897,"_path":898},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":900,"_path":901},"rider的使用","/tool/2022-08-02-rider-use",{"title":903,"_path":904},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":906,"_path":907},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":909,"_path":910},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":8,"_path":4},{"title":913,"_path":914,"children":915},"Unity","/unity",[916,919,922,925,928,931,934,937,940,943,946,949,952,955,958,961,964,967,970,973,976,979,982,985,988,991,994,997,1000,1003,1006,1009,1012,1015,1018,1021,1024,1027,1030,1033,1036,1039,1042,1045,1048,1051,1054,1057,1060,1063,1066,1069,1072,1075,1078,1081,1084,1087,1090,1093,1096,1099,1102,1105,1108,1111,1114,1117,1120,1123,1126,1129],{"title":917,"_path":918},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":920,"_path":921},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":923,"_path":924},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":926,"_path":927},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":929,"_path":930},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":932,"_path":933},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":935,"_path":936},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":938,"_path":939},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":941,"_path":942},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":944,"_path":945},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":947,"_path":948},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":950,"_path":951},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":953,"_path":954},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":956,"_path":957},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":959,"_path":960},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":962,"_path":963},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":965,"_path":966},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":968,"_path":969},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":971,"_path":972},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":974,"_path":975},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":977,"_path":978},"技能系统","/unity/2020-02-15-skill-system",{"title":980,"_path":981},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":983,"_path":984},"角色状态设计","/unity/2020-02-17-character-states",{"title":986,"_path":987},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":989,"_path":990},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":992,"_path":993},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":995,"_path":996},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":998,"_path":999},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1001,"_path":1002},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1004,"_path":1005},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1007,"_path":1008},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1010,"_path":1011},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1013,"_path":1014},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1016,"_path":1017},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1019,"_path":1020},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1022,"_path":1023},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1025,"_path":1026},"unity的addressables","/unity/2020-09-12-addressables",{"title":1028,"_path":1029},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1031,"_path":1032},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1034,"_path":1035},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1037,"_path":1038},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1040,"_path":1041},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1043,"_path":1044},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1046,"_path":1047},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1049,"_path":1050},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1052,"_path":1053},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1055,"_path":1056},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1058,"_path":1059},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1061,"_path":1062},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1064,"_path":1065},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1067,"_path":1068},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1070,"_path":1071},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1073,"_path":1074},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1076,"_path":1077},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1079,"_path":1080},"ability","/unity/2020-11-16-dotssample",{"title":1082,"_path":1083},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1085,"_path":1086},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1088,"_path":1089},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1091,"_path":1092},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1094,"_path":1095},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1097,"_path":1098},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1100,"_path":1101},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1103,"_path":1104},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1106,"_path":1107},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1109,"_path":1110},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1112,"_path":1113},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1115,"_path":1116},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1118,"_path":1119},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1121,"_path":1122},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1124,"_path":1125},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1127,"_path":1128},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1130,"_path":1131},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779037390]