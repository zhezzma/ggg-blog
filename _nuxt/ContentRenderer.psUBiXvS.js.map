{"version":3,"file":"ContentRenderer.psUBiXvS.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentRenderer.vue"],"sourcesContent":["<script>\nimport { defineComponent, watch, h, useSlots } from \"vue\";\nimport ContentRendererMarkdown from \"./ContentRendererMarkdown.vue\";\nexport default defineComponent({\n  name: \"ContentRenderer\",\n  props: {\n    /**\n     * The document to render.\n     */\n    value: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  setup(props) {\n    watch(\n      () => props.excerpt,\n      (newExcerpt) => {\n        if (newExcerpt && !props.value?.excerpt) {\n          console.warn(`No excerpt found for document content/${props?.value?._path}.${props?.value?._extension}!`);\n          console.warn(\"Make sure to use <!--more--> in your content if you want to use excerpt feature.\");\n        }\n      },\n      {\n        immediate: true\n      }\n    );\n  },\n  /**\n   * Content empty fallback\n   * @slot empty\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const { value, excerpt, tag } = ctx;\n    const markdownAST = excerpt ? value?.excerpt : value?.body;\n    if (!markdownAST?.children?.length && slots?.empty) {\n      return slots.empty({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (slots?.default) {\n      return slots.default({ value, excerpt, tag, ...this.$attrs });\n    }\n    if (markdownAST?.type === \"root\" && markdownAST?.children?.length) {\n      return h(\n        ContentRendererMarkdown,\n        {\n          value,\n          excerpt,\n          tag,\n          ...this.$attrs\n        }\n      );\n    }\n    return h(\n      \"pre\",\n      null,\n      JSON.stringify({ message: \"You should use slots with <ContentRenderer>\", value, excerpt, tag }, null, 2)\n    );\n  }\n});\n</script>\n"],"names":["_sfc_main","defineComponent","props","watch","newExcerpt","_a","_b","_c","ctx","slots","useSlots","value","excerpt","tag","markdownAST","h","ContentRendererMarkdown"],"mappings":"wLAGA,MAAKA,EAAaC,EAAa,CAC7B,KAAM,kBACN,MAAO,CAIL,MAAO,CACL,KAAM,OACN,SAAU,GACV,QAAS,KAAO,CAAA,EACjB,EAKD,QAAS,CACP,KAAM,QACN,QAAS,EACV,EAKD,IAAK,CACH,KAAM,OACN,QAAS,KACX,CACD,EACD,MAAMC,EAAO,CACXC,EACE,IAAMD,EAAM,QACXE,GAAe,WACVA,GAAc,GAACC,EAAAH,EAAM,QAAN,MAAAG,EAAa,WAC9B,QAAQ,KAAK,0CAAyCC,EAAAJ,GAAA,YAAAA,EAAO,QAAP,YAAAI,EAAc,KAAK,KAAIC,EAAAL,GAAA,YAAAA,EAAO,QAAP,YAAAK,EAAc,UAAU,GAAG,EACxG,QAAQ,KAAK,kFAAkF,EAElG,EACD,CACE,UAAW,EACb,EAEH,EAKD,OAAOC,EAAK,SACV,MAAMC,EAAQC,IACR,CAAE,MAAAC,EAAO,QAAAC,EAAS,IAAAC,CAAE,EAAML,EAC1BM,EAAcF,EAAUD,GAAA,YAAAA,EAAO,QAAUA,GAAA,YAAAA,EAAO,KACtD,MAAI,GAACN,EAAAS,GAAA,YAAAA,EAAa,WAAb,MAAAT,EAAuB,UAAUI,GAAA,MAAAA,EAAO,OACpCA,EAAM,MAAM,CAAE,MAAAE,EAAO,QAAAC,EAAS,IAAAC,EAAK,GAAG,KAAK,MAAO,CAAC,EAExDJ,GAAA,MAAAA,EAAO,QACFA,EAAM,QAAQ,CAAE,MAAAE,EAAO,QAAAC,EAAS,IAAAC,EAAK,GAAG,KAAK,MAAO,CAAC,GAE1DC,GAAA,YAAAA,EAAa,QAAS,UAAUR,EAAAQ,GAAA,YAAAA,EAAa,WAAb,MAAAR,EAAuB,QAClDS,EACLC,EACA,CACE,MAAAL,EACA,QAAAC,EACA,IAAAC,EACA,GAAG,KAAK,MACV,GAGGE,EACL,MACA,KACA,KAAK,UAAU,CAAE,QAAS,8CAA+C,MAAAJ,EAAO,QAAAC,EAAS,IAAAC,CAAE,EAAK,KAAM,CAAC,EAE3G,CACF,CAAC","x_google_ignoreList":[0]}