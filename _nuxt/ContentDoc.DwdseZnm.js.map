{"version":3,"file":"ContentDoc.DwdseZnm.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/composables/head.js","../../../../node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue"],"sourcesContent":["import { hasProtocol, joinURL, withTrailingSlash, withoutTrailingSlash } from \"ufo\";\nimport { useRoute, nextTick, useHead, unref, watch, useRuntimeConfig } from \"#imports\";\nexport const useContentHead = (_content, to = useRoute()) => {\n  const content = unref(_content);\n  const config = useRuntimeConfig();\n  const refreshHead = (data = content) => {\n    if (!to.path || !data) {\n      return;\n    }\n    const head = Object.assign({}, data?.head || {});\n    head.meta = [...head.meta || []];\n    head.link = [...head.link || []];\n    const title = head.title || data?.title;\n    if (title) {\n      head.title = title;\n      if (process.server && !head.meta.some((m) => m.property === \"og:title\")) {\n        head.meta.push({\n          property: \"og:title\",\n          content: title\n        });\n      }\n    }\n    const host = config.public.content.host;\n    if (process.server && host) {\n      const _url = joinURL(host ?? \"/\", config.app.baseURL, to.fullPath);\n      const url = config.public.content.trailingSlash ? withTrailingSlash(_url) : withoutTrailingSlash(_url);\n      if (!head.meta.some((m) => m.property === \"og:url\")) {\n        head.meta.push({\n          property: \"og:url\",\n          content: url\n        });\n      }\n      if (!head.link.some((m) => m.rel === \"canonical\")) {\n        head.link.push({\n          rel: \"canonical\",\n          href: url\n        });\n      }\n    }\n    const description = head?.description || data?.description;\n    if (description && head.meta.filter((m) => m.name === \"description\").length === 0) {\n      head.meta.push({\n        name: \"description\",\n        content: description\n      });\n    }\n    if (process.server && description && !head.meta.some((m) => m.property === \"og:description\")) {\n      head.meta.push({\n        property: \"og:description\",\n        content: description\n      });\n    }\n    const image = head?.image || data?.image;\n    if (process.server && image && head.meta.filter((m) => m.property === \"og:image\").length === 0) {\n      if (typeof image === \"string\") {\n        head.meta.push({\n          property: \"og:image\",\n          // @ts-ignore - We expect `head.image` from Nuxt configurations...\n          content: host && !hasProtocol(image) ? new URL(joinURL(config.app.baseURL, image), host).href : image\n        });\n      }\n      if (typeof image === \"object\") {\n        const imageKeys = [\n          \"src\",\n          \"secure_url\",\n          \"type\",\n          \"width\",\n          \"height\",\n          \"alt\"\n        ];\n        for (const key of imageKeys) {\n          if (key === \"src\" && image.src) {\n            const isAbsoluteURL = hasProtocol(image.src);\n            const imageURL = isAbsoluteURL ? image.src : joinURL(config.app.baseURL, image.src ?? \"/\");\n            head.meta.push({\n              property: \"og:image\",\n              content: host && !isAbsoluteURL ? new URL(imageURL, host).href : imageURL\n            });\n          } else if (image[key]) {\n            head.meta.push({\n              property: `og:image:${key}`,\n              content: image[key]\n            });\n          }\n        }\n      }\n    }\n    if (process.client) {\n      nextTick(() => useHead(head));\n    } else {\n      useHead(head);\n    }\n  };\n  watch(() => unref(_content), refreshHead, { immediate: true });\n};\n","<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport ContentRenderer from \"./ContentRenderer.vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nimport { useRuntimeConfig, useRoute, useContentHead } from \"#imports\";\nconst ContentDoc = defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    /**\n     * Renderer props\n     */\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default useRoute().path\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Whether or not to map the document data to the `head` property.\n     */\n    head: {\n      type: Boolean,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Document empty fallback\n   * @slot empty\n   */\n  /**\n   * Document not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const { contentHead } = useRuntimeConfig().public.content;\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const shouldInjectContentHead = head === void 0 ? contentHead : head;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            // Forward local `empty` slots to ContentRenderer if it is used.\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        // Empty slot\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\nexport default ContentDoc;\n</script>\n"],"names":["useContentHead","_content","to","useRoute","content","unref","config","useRuntimeConfig","watch","data","head","title","description","m","nextTick","useHead","ContentDoc","defineComponent","ctx","contentHead","slots","useSlots","tag","excerpt","path","query","shouldInjectContentHead","contentQueryProps","withTrailingSlash","emptyNode","slot","h","ContentQuery","refresh","isPartial","_a","ContentRenderer","bindings"],"mappings":"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","x_google_ignoreList":[0,1]}