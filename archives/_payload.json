[{"data":1,"prerenderedAt":75752},["Reactive",2],{"content-navigation-8C37fagqQL":3,"content-query-FJl6eILetC":587},[4,14,141,190,242,255,367],{"title":5,"_path":6,"children":7},"Art","/art",[8,11],{"title":9,"_path":10},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":12,"_path":13},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":15,"_path":16,"children":17},"Dotnet","/dotnet",[18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138],{"title":19,"_path":20},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":22,"_path":23},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":25,"_path":26},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":28,"_path":29},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":31,"_path":32},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":34,"_path":35},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":37,"_path":38},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":40,"_path":41},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":43,"_path":44},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":46,"_path":47},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":49,"_path":50},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":52,"_path":53},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":55,"_path":56},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":58,"_path":59},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":61,"_path":62},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":64,"_path":65},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":67,"_path":68},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":70,"_path":71},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":73,"_path":74},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":76,"_path":77},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":79,"_path":80},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":82,"_path":83},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":85,"_path":86},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":88,"_path":89},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":91,"_path":92},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":94,"_path":95},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":97,"_path":98},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":100,"_path":101},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":103,"_path":104},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":106,"_path":107},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":109,"_path":110},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":112,"_path":113},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":115,"_path":116},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":118,"_path":119},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":121,"_path":122},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":124,"_path":125},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":127,"_path":128},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":130,"_path":131},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":133,"_path":134},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":136,"_path":137},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":139,"_path":140},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":142,"_path":143,"children":144},"Game","/game",[145,148,151,154,157,160,163,166,169,172,175,178,181,184,187],{"title":146,"_path":147},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":149,"_path":150},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":152,"_path":153},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":155,"_path":156},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":158,"_path":159},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":161,"_path":162},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":164,"_path":165},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":167,"_path":168},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":170,"_path":171},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":173,"_path":174},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":176,"_path":177},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":179,"_path":180},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":182,"_path":183},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":185,"_path":186},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":188,"_path":189},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":191,"_path":192,"children":193},"Gyj","/gyj",[194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239],{"title":195,"_path":196},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":198,"_path":199},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":201,"_path":202},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":204,"_path":205},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":207,"_path":208},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":210,"_path":211},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":213,"_path":214},"玩法","/gyj/2022-08-22-wanfa",{"title":216,"_path":217},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":219,"_path":220},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":222,"_path":223},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":225,"_path":226},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":228,"_path":229},"门派内容相关","/gyj/2022-11-17-sect",{"title":231,"_path":232},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":234,"_path":235},"种植","/gyj/2022-12-01-zhongzhi",{"title":237,"_path":238},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":240,"_path":241},"跑商","/gyj/2023-11-01-paoshang",{"title":243,"_path":244,"children":245},"Js","/js",[246,249,252],{"title":247,"_path":248},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":250,"_path":251},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":253,"_path":254},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":256,"_path":257,"children":258},"Tool","/tool",[259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364],{"title":260,"_path":261},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":263,"_path":264},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":266,"_path":267},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":269,"_path":270},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":272,"_path":273},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":275,"_path":276},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":278,"_path":279},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":281,"_path":282},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":284,"_path":285},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":287,"_path":288},"mac下brew 使用","/tool/2020-01-13-brew",{"title":290,"_path":291},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":293,"_path":294},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":296,"_path":297},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":299,"_path":300},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":302,"_path":303},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":305,"_path":306},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":308,"_path":309},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":311,"_path":312},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":314,"_path":315},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":317,"_path":318},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":320,"_path":321},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":323,"_path":324},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":326,"_path":327},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":329,"_path":330},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":332,"_path":333},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":335,"_path":336},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":338,"_path":339},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":341,"_path":342},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":344,"_path":345},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":347,"_path":348},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":350,"_path":351},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":353,"_path":354},"rider的使用","/tool/2022-08-02-rider-use",{"title":356,"_path":357},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":359,"_path":360},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":362,"_path":363},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":365,"_path":366},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":368,"_path":369,"children":370},"Unity","/unity",[371,374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584],{"title":372,"_path":373},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":375,"_path":376},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":378,"_path":379},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":381,"_path":382},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":384,"_path":385},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":387,"_path":388},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":390,"_path":391},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":393,"_path":394},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":396,"_path":397},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":399,"_path":400},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":402,"_path":403},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":405,"_path":406},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":408,"_path":409},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":411,"_path":412},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":414,"_path":415},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":417,"_path":418},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":420,"_path":421},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":423,"_path":424},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":426,"_path":427},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":429,"_path":430},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":432,"_path":433},"技能系统","/unity/2020-02-15-skill-system",{"title":435,"_path":436},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":438,"_path":439},"角色状态设计","/unity/2020-02-17-character-states",{"title":441,"_path":442},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":444,"_path":445},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":447,"_path":448},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":450,"_path":451},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":453,"_path":454},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":456,"_path":457},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":459,"_path":460},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":462,"_path":463},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":465,"_path":466},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":468,"_path":469},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":471,"_path":472},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":474,"_path":475},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":477,"_path":478},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":480,"_path":481},"unity的addressables","/unity/2020-09-12-addressables",{"title":483,"_path":484},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":486,"_path":487},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":489,"_path":490},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":492,"_path":493},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":495,"_path":496},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":498,"_path":499},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":501,"_path":502},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":504,"_path":505},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":507,"_path":508},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":510,"_path":511},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":513,"_path":514},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":516,"_path":517},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":519,"_path":520},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":522,"_path":523},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":525,"_path":526},"简单保存工具","/unity/2020-11-13-simple-save",{"title":528,"_path":529},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":531,"_path":532},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":534,"_path":535},"ability","/unity/2020-11-16-dotssample",{"title":537,"_path":538},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":540,"_path":541},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":543,"_path":544},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":546,"_path":547},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":549,"_path":550},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":552,"_path":553},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":555,"_path":556},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":558,"_path":559},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":561,"_path":562},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":564,"_path":565},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":567,"_path":568},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":570,"_path":571},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":573,"_path":574},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":576,"_path":577},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":579,"_path":580},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":582,"_path":583},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":585,"_path":586},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",[588,797,852,1013,1546,1925,2849,3072,3079,3434,3854,4408,4682,4870,4927,6094,6116,7225,7583,7744,8032,8399,8480,8532,9162,9249,9481,9625,11049,11083,11269,11558,11890,11905,12103,12211,12367,12962,13371,13460,13555,14088,14221,14304,14566,14652,15744,15847,15884,15921,16364,16419,16706,16777,16873,17807,17997,18086,18163,18514,19045,19486,19831,20719,20950,21122,21238,21419,21980,22035,22090,22352,22440,23079,23169,23415,23439,23733,24141,24196,24218,25102,25938,26091,26156,31353,32330,32455,32841,33856,33869,34054,35639,37052,37274,37399,37613,37713,37938,38165,38211,38872,39053,39075,39185,39572,39642,39700,40510,40701,41113,41467,41519,42129,42213,42811,43015,43072,43273,43438,43668,44088,44343,44400,44686,45880,45955,46196,47093,47779,48146,48665,48953,48988,49785,50094,50166,53742,53945,54360,54901,55149,55302,55575,55763,56079,56482,56700,57459,58073,59577,59650,59862,60345,60577,61100,61230,61273,62491,62598,63178,63298,63391,64236,64270,64432,64502,66092,67228,67880,68439,68587,69036,70379,70960,71868,72042,73034,73508,73922,74375,74634,74691,74847,75604],{"_path":254,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":253,"description":592,"body":593,"_type":791,"_id":792,"_source":793,"_file":794,"_extension":795,"date":796},"js",false,"","一、Flex 布局是什么？Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。\n.box{\n display: flex;\n}\n\n行内元素也可以使用 Flex 布局。\n.box{\n display: inline-flex;\n}\n\nWebkit 内核的浏览器，必须加上-webkit前缀。\n.box{\n display: -webkit-flex; /* Safari */\n display: flex;\n}\n\n注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将",{"type":594,"children":595,"toc":786},"root",[596,605,611,616,633,638,650,663,675,704,710,715,723,759,779],{"type":597,"tag":598,"props":599,"children":601},"element","h2",{"id":600},"一flex-布局是什么",[602],{"type":603,"value":604},"text","一、Flex 布局是什么？",{"type":597,"tag":606,"props":607,"children":608},"p",{},[609],{"type":603,"value":610},"Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。",{"type":597,"tag":606,"props":612,"children":613},{},[614],{"type":603,"value":615},"任何一个容器都可以指定为 Flex 布局。",{"type":597,"tag":617,"props":618,"children":619},"blockquote",{},[620],{"type":597,"tag":621,"props":622,"children":627},"pre",{"className":623,"code":625,"language":626,"meta":591},[624],"language-css","\n.box{\n display: flex;\n}\n\n","css",[628],{"type":597,"tag":629,"props":630,"children":631},"code",{"__ignoreMap":591},[632],{"type":603,"value":625},{"type":597,"tag":606,"props":634,"children":635},{},[636],{"type":603,"value":637},"行内元素也可以使用 Flex 布局。",{"type":597,"tag":617,"props":639,"children":640},{},[641],{"type":597,"tag":621,"props":642,"children":645},{"className":643,"code":644,"language":626,"meta":591},[624],"\n.box{\n display: inline-flex;\n}\n\n",[646],{"type":597,"tag":629,"props":647,"children":648},{"__ignoreMap":591},[649],{"type":603,"value":644},{"type":597,"tag":606,"props":651,"children":652},{},[653,655,661],{"type":603,"value":654},"Webkit 内核的浏览器，必须加上",{"type":597,"tag":629,"props":656,"children":658},{"className":657},[],[659],{"type":603,"value":660},"-webkit",{"type":603,"value":662},"前缀。",{"type":597,"tag":617,"props":664,"children":665},{},[666],{"type":597,"tag":621,"props":667,"children":670},{"className":668,"code":669,"language":626,"meta":591},[624],"\n.box{\n display: -webkit-flex; /* Safari */\n display: flex;\n}\n\n",[671],{"type":597,"tag":629,"props":672,"children":673},{"__ignoreMap":591},[674],{"type":603,"value":669},{"type":597,"tag":606,"props":676,"children":677},{},[678,680,686,688,694,696,702],{"type":603,"value":679},"注意，设为 Flex 布局以后，子元素的",{"type":597,"tag":629,"props":681,"children":683},{"className":682},[],[684],{"type":603,"value":685},"float",{"type":603,"value":687},"、",{"type":597,"tag":629,"props":689,"children":691},{"className":690},[],[692],{"type":603,"value":693},"clear",{"type":603,"value":695},"和",{"type":597,"tag":629,"props":697,"children":699},{"className":698},[],[700],{"type":603,"value":701},"vertical-align",{"type":603,"value":703},"属性将失效。",{"type":597,"tag":598,"props":705,"children":707},{"id":706},"二基本概念",[708],{"type":603,"value":709},"二、基本概念",{"type":597,"tag":606,"props":711,"children":712},{},[713],{"type":603,"value":714},"采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。",{"type":597,"tag":606,"props":716,"children":717},{},[718],{"type":597,"tag":719,"props":720,"children":722},"img",{"alt":591,"src":721},"/images/2024-03-17-flex-use/51PtxZl.png",[],{"type":597,"tag":606,"props":724,"children":725},{},[726,728,734,736,742,744,750,751,757],{"type":603,"value":727},"容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做",{"type":597,"tag":629,"props":729,"children":731},{"className":730},[],[732],{"type":603,"value":733},"main start",{"type":603,"value":735},"，结束位置叫做",{"type":597,"tag":629,"props":737,"children":739},{"className":738},[],[740],{"type":603,"value":741},"main end",{"type":603,"value":743},"；交叉轴的开始位置叫做",{"type":597,"tag":629,"props":745,"children":747},{"className":746},[],[748],{"type":603,"value":749},"cross start",{"type":603,"value":735},{"type":597,"tag":629,"props":752,"children":754},{"className":753},[],[755],{"type":603,"value":756},"cross end",{"type":603,"value":758},"。",{"type":597,"tag":606,"props":760,"children":761},{},[762,764,770,772,778],{"type":603,"value":763},"项目默认沿主轴排列。单个项目占据的主轴空间叫做",{"type":597,"tag":629,"props":765,"children":767},{"className":766},[],[768],{"type":603,"value":769},"main size",{"type":603,"value":771},"，占据的交叉轴空间叫做",{"type":597,"tag":629,"props":773,"children":775},{"className":774},[],[776],{"type":603,"value":777},"cross size",{"type":603,"value":758},{"type":597,"tag":606,"props":780,"children":781},{},[782],{"type":597,"tag":719,"props":783,"children":785},{"alt":591,"src":784},"/images/2024-03-17-flex-use/VFpkfNe.png",[],{"title":591,"searchDepth":787,"depth":787,"links":788},2,[789,790],{"id":600,"depth":787,"text":604},{"id":706,"depth":787,"text":709},"markdown","content:js:2024-03-17-flex-use.md","content","js/2024-03-17-flex-use.md","md","2024-03-17",{"_path":241,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":240,"description":799,"body":800,"_type":791,"_id":849,"_source":793,"_file":850,"_extension":795,"date":851},"gyj","物品有最低价,平均价,标准价,每个城市有盛产,盛产的物品购买价格低每个城市有需求,玩家种植或者生成的物品,每个城市售卖4-5种,盛产的物品不一定会存在..但是存在的话一定是低价格..所以玩家,只要看到这个城市的盛产物品就买就可以了普通商品的差价应小于,玩家种植,砍伐挖掘,和生成的物品,每天各地的商品定价会在基础价格上下浮动10%左右。每周更换商品..行走消耗日程,ps:解锁功能,赶路也能修行心法每周先随机该城市所有商品的价格(上下浮动10%)和数量,以及是否需求.然后如果是盛产商品.则降低商品价格.如果周围的城市盛产该商品,也降低价格,然后随机需求的物品,然后提高收购价格",{"type":594,"children":801,"toc":847},[802],{"type":597,"tag":803,"props":804,"children":805},"ol",{},[806,812,817,822,827,832,837,842],{"type":597,"tag":807,"props":808,"children":809},"li",{},[810],{"type":603,"value":811},"物品有最低价,平均价,标准价,",{"type":597,"tag":807,"props":813,"children":814},{},[815],{"type":603,"value":816},"每个城市有盛产,盛产的物品购买价格低",{"type":597,"tag":807,"props":818,"children":819},{},[820],{"type":603,"value":821},"每个城市有需求,玩家种植或者生成的物品,",{"type":597,"tag":807,"props":823,"children":824},{},[825],{"type":603,"value":826},"每个城市售卖4-5种,盛产的物品不一定会存在..但是存在的话一定是低价格..所以玩家,只要看到这个城市的盛产物品就买就可以了",{"type":597,"tag":807,"props":828,"children":829},{},[830],{"type":603,"value":831},"普通商品的差价应小于,玩家种植,砍伐挖掘,和生成的物品,",{"type":597,"tag":807,"props":833,"children":834},{},[835],{"type":603,"value":836},"每天各地的商品定价会在基础价格上下浮动10%左右。",{"type":597,"tag":807,"props":838,"children":839},{},[840],{"type":603,"value":841},"每周更换商品..行走消耗日程,ps:解锁功能,赶路也能修行心法",{"type":597,"tag":807,"props":843,"children":844},{},[845],{"type":603,"value":846},"每周先随机该城市所有商品的价格(上下浮动10%)和数量,以及是否需求.然后如果是盛产商品.则降低商品价格.如果周围的城市盛产该商品,也降低价格,然后随机需求的物品,然后提高收购价格",{"title":591,"searchDepth":787,"depth":787,"links":848},[],"content:gyj:2023-11-01-跑商.md","gyj/2023-11-01-跑商.md","2023-11-01",{"_path":251,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":250,"description":853,"body":854,"_type":791,"_id":1010,"_source":793,"_file":1011,"_extension":795,"date":1012},"执行npx nuxi init nuxt-app报错",{"type":594,"children":855,"toc":1008},[856,862,875,880,894,902,907,915,920,933,944,951,962,973,985,995,1000],{"type":597,"tag":857,"props":858,"children":860},"h1",{"id":859},"问题",[861],{"type":603,"value":859},{"type":597,"tag":606,"props":863,"children":864},{},[865,867,873],{"type":603,"value":866},"执行",{"type":597,"tag":629,"props":868,"children":870},{"className":869},[],[871],{"type":603,"value":872},"npx nuxi init nuxt-app",{"type":603,"value":874},"报错",{"type":597,"tag":857,"props":876,"children":878},{"id":877},"解决方案",[879],{"type":603,"value":877},{"type":597,"tag":606,"props":881,"children":882},{},[883,885],{"type":603,"value":884},"官方初始化链接：",{"type":597,"tag":886,"props":887,"children":891},"a",{"href":888,"rel":889},"https://link.juejin.cn/?target=https%3A%2F%2Fv3.nuxtjs.org%2Fgetting-started%2Finstallation",[890],"nofollow",[892],{"type":603,"value":893},"v3.nuxtjs.org/getting-sta…",{"type":597,"tag":606,"props":895,"children":896},{},[897],{"type":597,"tag":629,"props":898,"children":900},{"className":899},[],[901],{"type":603,"value":872},{"type":597,"tag":606,"props":903,"children":904},{},[905],{"type":603,"value":906},"执行后报错",{"type":597,"tag":621,"props":908,"children":910},{"code":909},"Failed to download template from registry: request to https://raw.githubusercontent.com/nuxt/starter/templates/templates/v3.json failed, reason: connect ECONNREFUSED 0.0.0.0:443\n\n  at /Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/chunks/init.mjs:13269:11\n  at processTicksAndRejections (node:internal/process/task_queues:96:5)\n  at async downloadTemplate (/Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/chunks/init.mjs:13268:20)\n  at async Object.invoke (/Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/chunks/init.mjs:13336:15)\n  at async _main (/Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/cli.mjs:50:20)\n",[911],{"type":597,"tag":629,"props":912,"children":913},{"__ignoreMap":591},[914],{"type":603,"value":909},{"type":597,"tag":606,"props":916,"children":917},{},[918],{"type":603,"value":919},"解决：",{"type":597,"tag":606,"props":921,"children":922},{},[923,925,931],{"type":603,"value":924},"先",{"type":597,"tag":629,"props":926,"children":928},{"className":927},[],[929],{"type":603,"value":930},"ping raw.githubusercontent.com",{"type":603,"value":932},"是否连通",{"type":597,"tag":606,"props":934,"children":935},{},[936,938],{"type":603,"value":937},"如果不通，访问",{"type":597,"tag":629,"props":939,"children":941},{"className":940},[],[942],{"type":603,"value":943},"https://ipaddress.com/website/raw.githubusercontent.com",{"type":597,"tag":606,"props":945,"children":946},{},[947],{"type":597,"tag":719,"props":948,"children":950},{"alt":591,"src":949},"/images/2023-05-16-nuxt3-init-fail/1684405553000.png",[],{"type":597,"tag":606,"props":952,"children":953},{},[954,956],{"type":603,"value":955},"然后添加host，mac下host配置路径：",{"type":597,"tag":629,"props":957,"children":959},{"className":958},[],[960],{"type":603,"value":961},"/etc/hosts",{"type":597,"tag":606,"props":963,"children":964},{},[965,967],{"type":603,"value":966},"新增一行， ",{"type":597,"tag":629,"props":968,"children":970},{"className":969},[],[971],{"type":603,"value":972},"185.199.108.133 raw.githubusercontent.com",{"type":597,"tag":606,"props":974,"children":975},{},[976,978,983],{"type":603,"value":977},"添加完host后，再ping一下 ",{"type":597,"tag":629,"props":979,"children":981},{"className":980},[],[982],{"type":603,"value":930},{"type":603,"value":984}," 是否连通",{"type":597,"tag":606,"props":986,"children":987},{},[988,990],{"type":603,"value":989},"ping通后，再重新执行",{"type":597,"tag":629,"props":991,"children":993},{"className":992},[],[994],{"type":603,"value":872},{"type":597,"tag":606,"props":996,"children":997},{},[998],{"type":603,"value":999},"成功显示：",{"type":597,"tag":621,"props":1001,"children":1003},{"code":1002}," Nuxt project is created with v3 template. Next steps:                                     12:07:07\n › cd nuxt-app                                                                               12:07:07\n › Install dependencies with npm install or yarn install or pnpm install --shamefully-hoist  12:07:07\n › Start development server with npm run dev or yarn dev or pnpm run dev\n",[1004],{"type":597,"tag":629,"props":1005,"children":1006},{"__ignoreMap":591},[1007],{"type":603,"value":1002},{"title":591,"searchDepth":787,"depth":787,"links":1009},[],"content:js:2023-05-16-nuxt3-init-fail.md","js/2023-05-16-nuxt3-init-fail.md","2023-05-16",{"_path":366,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":365,"description":1015,"body":1016,"_type":791,"_id":1543,"_source":793,"_file":1544,"_extension":795,"date":1545},"tool","在学习 Python Web 开发时候，可能会遇到诸如 uwsgi、wsgi 等名词，下面通过梳理总结，探究它们之间的关系。",{"type":594,"children":1017,"toc":1527},[1018,1022,1029,1034,1039,1044,1049,1054,1059,1066,1071,1076,1085,1090,1097,1102,1110,1117,1122,1127,1133,1138,1143,1148,1153,1158,1170,1175,1180,1187,1192,1198,1203,1208,1216,1221,1226,1231,1236,1242,1252,1257,1264,1269,1274,1279,1284,1289,1294,1300,1305,1310,1315,1320,1334,1340,1345,1363,1370,1375,1383,1388,1393,1400,1405,1418,1423,1431,1436,1444,1449,1457,1462,1467,1485,1490,1496,1506,1511,1516,1522],{"type":597,"tag":606,"props":1019,"children":1020},{},[1021],{"type":603,"value":1015},{"type":597,"tag":1023,"props":1024,"children":1026},"h3",{"id":1025},"cgi",[1027],{"type":603,"value":1028},"CGI",{"type":597,"tag":606,"props":1030,"children":1031},{},[1032],{"type":603,"value":1033},"CGI（Common Gateway Interface）通用网关接口，是一个协议，是外部应用程序（CGI 程序）与 Web 服务器之间的接口标准，该协议定义了 Web 服务器调用外部应用程序的时候需要输入的参数，和给 Web 服务器的返回结果。",{"type":597,"tag":606,"props":1035,"children":1036},{},[1037],{"type":603,"value":1038},"通俗来说，它规定一个程序该如何与 Web 服务器程序之间通信，从而可以让这个程序跑在 Web 服务器上。",{"type":597,"tag":1023,"props":1040,"children":1042},{"id":1041},"起源",[1043],{"type":603,"value":1041},{"type":597,"tag":606,"props":1045,"children":1046},{},[1047],{"type":603,"value":1048},"最早的 Web 服务器简单地响应浏览器发来的 HTTP 请求，并将存储在服务器上的 HTML 文件返回给浏览器，也就是静态 HTML。这个场景下的服务器一般被称为 HTTP 服务器，常见的有 Apache 的 httpd 和 Nginx。",{"type":597,"tag":606,"props":1050,"children":1051},{},[1052],{"type":603,"value":1053},"事物总是不 断发展，网站也越来越复杂，所以出现动态技术。但是服务器并不能直接运行 php、asp这样的文件，自己不能做，外包给别人吧，但是要与第三做个约定，我给你什么，然后你给我什么，就是握把请求参数发送给你，然后我接收你的处 理结果给客户端。",{"type":597,"tag":606,"props":1055,"children":1056},{},[1057],{"type":603,"value":1058},"那这个约定就是 Common Gateway Interface，简称 CGI。这个协议可以用 VB、C、PHP、Python 来实现。CGI只是接口协议，根本不是什么语言。",{"type":597,"tag":606,"props":1060,"children":1061},{},[1062],{"type":597,"tag":719,"props":1063,"children":1065},{"alt":591,"src":1064},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/c75c10385343fbf28d11e6289721428965388f60.png",[],{"type":597,"tag":606,"props":1067,"children":1068},{},[1069],{"type":603,"value":1070},"引入 CGI 以便客户端请求能够触发 Web 服务器运行另一个外部程序，客户端所输入的数据也会传给这个外部程序，该程序运行结束后会将生成的 HTML 和其他数据通过 Web 服务器再返回给客户端（即动态请求，比如基于 PHP、Python、Java 实现的应用）。利用 CGI 可以针对用户请求，动态返回给客户端各种各样动态变化的信息。",{"type":597,"tag":1023,"props":1072,"children":1074},{"id":1073},"工作原理",[1075],{"type":603,"value":1073},{"type":597,"tag":606,"props":1077,"children":1078},{},[1079],{"type":597,"tag":1080,"props":1081,"children":1082},"strong",{},[1083],{"type":603,"value":1084},"Web 服务器与 CGI 程序的交互",{"type":597,"tag":606,"props":1086,"children":1087},{},[1088],{"type":603,"value":1089},"Web 服务器将根据 CGI 程序的类型决定数据向 CGI 程序的传送方式，一般是通过标准输入/输出流和环境变量来与 CGI 程序间传递数据。如下图所示：",{"type":597,"tag":606,"props":1091,"children":1092},{},[1093],{"type":597,"tag":719,"props":1094,"children":1096},{"alt":591,"src":1095},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/6159252dd42a28343479a71f7cea41e314cebfab.jpeg",[],{"type":597,"tag":606,"props":1098,"children":1099},{},[1100],{"type":603,"value":1101},"CGI 程序通过标准输入（STDIN）和标准输出（STDOUT）来进行输入输出。此外 CGI 程序还通过环境变量来得到输入，操作系统提供了许多环境变量，它们定义了程序的执行环境，应用程序可以存取它们。Web 服务器和 CGI 接口又另外设置了一些环境变量，用来向 CGI 程序传递一些重要的参数。",{"type":597,"tag":606,"props":1103,"children":1104},{},[1105],{"type":597,"tag":1080,"props":1106,"children":1107},{},[1108],{"type":603,"value":1109},"常用 CGI 环境变量：",{"type":597,"tag":606,"props":1111,"children":1112},{},[1113],{"type":597,"tag":719,"props":1114,"children":1116},{"alt":591,"src":1115},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/b03533fa828ba61ef7e05521636b1f03304e591e.jpeg",[],{"type":597,"tag":606,"props":1118,"children":1119},{},[1120],{"type":603,"value":1121},"每当客户请求 CGI 的时候，WEB服务器就请求操作系统生成一个新的CGI解释器进程（如 php-cgi.exe），CGI 的一个进程则处理完一个请求后退出，下一个请求来时再创建新进程。",{"type":597,"tag":606,"props":1123,"children":1124},{},[1125],{"type":603,"value":1126},"当然，这样在访问量很少没有并发的情况也行。但当访问量增大，并发存在，这种方式就不适合了，于是就有了FastCGI",{"type":597,"tag":1023,"props":1128,"children":1130},{"id":1129},"fastcgi",[1131],{"type":603,"value":1132},"FastCGI",{"type":597,"tag":606,"props":1134,"children":1135},{},[1136],{"type":603,"value":1137},"FASTCGI 是 Web 服务器（ex:Nginx）和语言解释器（ex:uWsgi）两者底层的通信协议的规范，是对CGI的开放的扩展。",{"type":597,"tag":606,"props":1139,"children":1140},{},[1141],{"type":603,"value":1142},"CGI的一个扩展，像是一个常驻（long-live）型的CGI ，废除了 CGI fork-and-execute （来一个请求 fork 一个新进程处理，处理完再把进程 kill 掉）的工作方式，转而使用一种长生存期的方法，减少了进程消耗，提升了性能。",{"type":597,"tag":606,"props":1144,"children":1145},{},[1146],{"type":603,"value":1147},"而FastCGI 则会先 fork 一个 master 进程，解析配置文件，初始化执行环境，然后再 fork 多个 worker 进程（与 Nginx 有点像），当 HTTP 请求过来时，master 进程将其会传递给一个 worker 进程，然后立即可以接受下一个请求，这样就避免了重复的初始化操作，效率自然也就提高了。",{"type":597,"tag":606,"props":1149,"children":1150},{},[1151],{"type":603,"value":1152},"而且当 worker 进程不够用时，master 进程还可以根据配置预先启动几个 worker 进程等着；当空闲 worker 进程太多时，也会关掉一些，这样不仅提高了性能，还节约了系统资源",{"type":597,"tag":1023,"props":1154,"children":1156},{"id":1155},"php-fpm",[1157],{"type":603,"value":1155},{"type":597,"tag":606,"props":1159,"children":1160},{},[1161,1163,1168],{"type":603,"value":1162},"FastCGI 只是一个协议规范，需要每个语言具体去实现，",{"type":597,"tag":1080,"props":1164,"children":1165},{},[1166],{"type":603,"value":1167},"PHP-FPM 就是 PHP 版本的 FastCGI 协议实现",{"type":603,"value":1169},"，有了它，就是实现 PHP 脚本与 Web 服务器（通常是 Nginx）之间的通信，同时它也是一个 PHP SAPI，从而构建起 PHP 解释器与 Web 服务器之间的桥梁。",{"type":597,"tag":606,"props":1171,"children":1172},{},[1173],{"type":603,"value":1174},"Php-fpm全称是php fastcgi process manager即php fastcgi进程管理器，相比fastcgi静态的唤起cgi，fpm能根据访问的压力动态的唤起cgi进程和销毁以到达动态的调整cgi数量，这样可以有效的使用内存。",{"type":597,"tag":606,"props":1176,"children":1177},{},[1178],{"type":603,"value":1179},"除此之外还有其它的一些优点，比如，fpm还可以平滑的重载php配置；由于fpm是使用Unix-Socket来和服务器通讯，所以也不用再配置cgi端口；fpm有更好的状态输出和slowlog日志，502的时候能给出更多的错误细节。",{"type":597,"tag":606,"props":1181,"children":1182},{},[1183],{"type":597,"tag":719,"props":1184,"children":1186},{"alt":591,"src":1185},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/3812b31bb051f819133af1d2fdebc2e42f73e7f0.png",[],{"type":597,"tag":606,"props":1188,"children":1189},{},[1190],{"type":603,"value":1191},"PHP-FPM 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在 PHP-FPM 中，master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程进行处理，worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端。这就是 PHP-FPM 的基本工作原理",{"type":597,"tag":1023,"props":1193,"children":1195},{"id":1194},"wsgi-uwsgi-uwsgi",[1196],{"type":603,"value":1197},"WSGI / uwsgi / uWSGI",{"type":597,"tag":606,"props":1199,"children":1200},{},[1201],{"type":603,"value":1202},"在 Python Web 开发中，我们经常使用 Uwsgi 配合 Nginx 部署一个 Web 框架，如 Django 或 flask。同时我们又会说，框架和 Web 服务器之间要符合 WSGI 协议。",{"type":597,"tag":606,"props":1204,"children":1205},{},[1206],{"type":603,"value":1207},"那就来厘清一下这几个概念。",{"type":597,"tag":606,"props":1209,"children":1210},{},[1211],{"type":597,"tag":1080,"props":1212,"children":1213},{},[1214],{"type":603,"value":1215},"Web 服务器和 Web框架",{"type":597,"tag":606,"props":1217,"children":1218},{},[1219],{"type":603,"value":1220},"在讲 uWSGI 和 WSGI 之前，先要弄清楚 Web 开发的两大块，Web服务器和Web框架。",{"type":597,"tag":606,"props":1222,"children":1223},{},[1224],{"type":603,"value":1225},"Web服务器即用来接受客户端请求，建立连接，转发响应的程序。至于转发的内容是什么，交由Web框架来处理，即处理这些业务逻辑。如查询数据库、生成实时信息等。Nginx就是一个Web服务器，Django或flask就是Web框架。",{"type":597,"tag":606,"props":1227,"children":1228},{},[1229],{"type":603,"value":1230},"那么如何实现uWSGI和WSGI的配合呢？如何做到任意一个Web服务器，都能搭配任意一个框架呢？这就产生了WSGI协议。只要Web服务器和Web框架满足WSGI协议，它们就能相互搭配。所以WSGI只是一个协议，一个约定。而不是Python的模块、框架等具体的功能。",{"type":597,"tag":606,"props":1232,"children":1233},{},[1234],{"type":603,"value":1235},"而uWSGI，则是实现了WSGI协议的一个Web服务器。即用来接受客户端请求，转发响应的程序。实际上，一个uWSGI的Web服务器，再加上Django这样的Web框架，就已经可以实现网站的功能了。",{"type":597,"tag":1023,"props":1237,"children":1239},{"id":1238},"wsgi",[1240],{"type":603,"value":1241},"WSGI",{"type":597,"tag":606,"props":1243,"children":1244},{},[1245,1247],{"type":603,"value":1246},"WSGI，（WEB SERVER GATEWAY INTERFACE），Web服务器网关接口，是一种Web服务器网关接口，它是一个Web服务器（如Nginx，uWSGI等服务器）与Web应用（如Flask框架写的程序）通信的一种规范。",{"type":597,"tag":1080,"props":1248,"children":1249},{},[1250],{"type":603,"value":1251},"当前运行在WSGI协议之上的Web框架有Bottle，Flask，Django",{"type":597,"tag":606,"props":1253,"children":1254},{},[1255],{"type":603,"value":1256},"实现了Python Web程序与服务器之间交互的通用性。有了这个东西，web.py或者bottle或者django等等的Python Web开发框架，就可以轻松地部署在不同的Web server上了，不需要做任何特殊配置（也需要一些小小的配置调整）",{"type":597,"tag":606,"props":1258,"children":1259},{},[1260],{"type":597,"tag":719,"props":1261,"children":1263},{"alt":591,"src":1262},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/00e93901213fb80ea214ae5d158ea727bb3894d8.png",[],{"type":597,"tag":606,"props":1265,"children":1266},{},[1267],{"type":603,"value":1268},"WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的Web应用。",{"type":597,"tag":606,"props":1270,"children":1271},{},[1272],{"type":603,"value":1273},"例如 uWSGI和 Gunicorn都是实现了WSGI server协议的服务器，Django，Flask是实现了WSGI application协议的Web框架，可以根据项目实际情况搭配使用。",{"type":597,"tag":606,"props":1275,"children":1276},{},[1277],{"type":603,"value":1278},"像Django，Flask框架都有自己实现的简单的WSGI server，一般用于服务器调试，生产环境下建议用其他WSGI server，WSGI服务器的选择很多，包括uWSGI和gunicorn",{"type":597,"tag":1023,"props":1280,"children":1282},{"id":1281},"uwsgi",[1283],{"type":603,"value":1281},{"type":597,"tag":606,"props":1285,"children":1286},{},[1287],{"type":603,"value":1288},"同WSGI一样是一种通信协议",{"type":597,"tag":606,"props":1290,"children":1291},{},[1292],{"type":603,"value":1293},"uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。",{"type":597,"tag":1023,"props":1295,"children":1297},{"id":1296},"uwsgi-服务器",[1298],{"type":603,"value":1299},"uWSGI (服务器)",{"type":597,"tag":606,"props":1301,"children":1302},{},[1303],{"type":603,"value":1304},"它是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。用于接收前端服务器转发的动态请求并处理后发给 Web 应用程序。",{"type":597,"tag":606,"props":1306,"children":1307},{},[1308],{"type":603,"value":1309},"因为apache也好，Nginx也罢，它们自己都没有解析动态语言如php的功能，而是分派给其他模块来做，比如apache就可以说内置了php模块，支持的非常爽，让人感觉好像apache就支持php一样。uwsgi实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。",{"type":597,"tag":606,"props":1311,"children":1312},{},[1313],{"type":603,"value":1314},"uWSGI是使用C编写的，显示了自有的uwsgi协议的Web服务器。它自带丰富的组件，其中核心组件包含进程管理、监控、IPC等功能，实现应用服务器接口的请求插件支持多种语言和平台，比如WSGI、Rack、Lua WSAPI，网管组件实现了负载均衡、代理和理由功能",{"type":597,"tag":606,"props":1316,"children":1317},{},[1318],{"type":603,"value":1319},"uWSGI也可以当做中间件。",{"type":597,"tag":1321,"props":1322,"children":1323},"ul",{},[1324,1329],{"type":597,"tag":807,"props":1325,"children":1326},{},[1327],{"type":603,"value":1328},"如果是Nginx+uWSGI+App，那uWSGI就是一个中间件",{"type":597,"tag":807,"props":1330,"children":1331},{},[1332],{"type":603,"value":1333},"如果是uWSGI+App，那它就是服务器",{"type":597,"tag":1023,"props":1335,"children":1337},{"id":1336},"nginxuwgsi",[1338],{"type":603,"value":1339},"Nginx+uWGSI",{"type":597,"tag":606,"props":1341,"children":1342},{},[1343],{"type":603,"value":1344},"假设我们使用 Python 的 Django 框架写了一个网站，现在要将它挂在网上运行，我们一般需要：",{"type":597,"tag":1321,"props":1346,"children":1347},{},[1348,1353,1358],{"type":597,"tag":807,"props":1349,"children":1350},{},[1351],{"type":603,"value":1352},"Nginx 做为代理服务器：负责静态资源发送（js、css、图片等）、动态请求转发以及结果的回复。",{"type":597,"tag":807,"props":1354,"children":1355},{},[1356],{"type":603,"value":1357},"uWSGI 做为后端服务器：负责接收 Nginx 转发的请求并处理后发给 Django 应用以及接收 Django 应用返回信息转发给 Nginx。",{"type":597,"tag":807,"props":1359,"children":1360},{},[1361],{"type":603,"value":1362},"Django 应用收到请求后处理数据并渲染相应的返回页面给 uWSGI 服务器。",{"type":597,"tag":606,"props":1364,"children":1365},{},[1366],{"type":597,"tag":719,"props":1367,"children":1369},{"alt":591,"src":1368},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/35a85edf8db1cb1373f2b22aff0bde4793584bdc.jpeg",[],{"type":597,"tag":606,"props":1371,"children":1372},{},[1373],{"type":603,"value":1374},"一个Django应用，通过WSGI协议连接uWSGI服务器，uWSGI服务器实现WSGI、http等协议，通过uwsgi协议和Nginx服务器实现http的动态请求和转发以及结果",{"type":597,"tag":606,"props":1376,"children":1377},{},[1378],{"type":597,"tag":1080,"props":1379,"children":1380},{},[1381],{"type":603,"value":1382},"问题：有 uWGSI 了，Django 为什么还需要 Nginx？",{"type":597,"tag":606,"props":1384,"children":1385},{},[1386],{"type":603,"value":1387},"一个普通的个人网站，访问量不大的话，当然可以由 uWSGI 和 Django 构成。但是一旦访问量过大，客户端请求连接就要进行长时间的等待。这个时候就出来了分布式服务器，我们可以多来几台 Web 服务器，都能处理请求。",{"type":597,"tag":606,"props":1389,"children":1390},{},[1391],{"type":603,"value":1392},"但是谁来分配客户端的请求连接和 Web 服务器呢？Nginx 就是这样一个管家的存在，由它来分配。这也就是由 Nginx 实现反向代理，即代理服务器。",{"type":597,"tag":606,"props":1394,"children":1395},{},[1396],{"type":597,"tag":719,"props":1397,"children":1399},{"alt":591,"src":1398},"/images/2023-02-15-cgi-fastcgi-wsgi-uswgi/f2deb48f8c5494ee428402900faa68f798257e79.jpeg",[],{"type":597,"tag":606,"props":1401,"children":1402},{},[1403],{"type":603,"value":1404},"Nginx 是一个 HTTP 和反向代理服务器",{"type":597,"tag":1321,"props":1406,"children":1407},{},[1408,1413],{"type":597,"tag":807,"props":1409,"children":1410},{},[1411],{"type":603,"value":1412},"正向代理：正向的就是由浏览器主动的想代理服务器发出请求，经代理服务器做出处理后再转给目标服务器",{"type":597,"tag":807,"props":1414,"children":1415},{},[1416],{"type":603,"value":1417},"反向代理：反向的就是不管浏览器同不同意，请求都会经过代理服务器处理再发给目标服务器",{"type":597,"tag":606,"props":1419,"children":1420},{},[1421],{"type":603,"value":1422},"使用Nginx作为反向代理服务器的好处：",{"type":597,"tag":1321,"props":1424,"children":1425},{},[1426],{"type":597,"tag":807,"props":1427,"children":1428},{},[1429],{"type":603,"value":1430},"安全",{"type":597,"tag":606,"props":1432,"children":1433},{},[1434],{"type":603,"value":1435},"不管什么请求都要经过代理服务器，可以避免外部程序直接攻击Web服务器",{"type":597,"tag":1321,"props":1437,"children":1438},{},[1439],{"type":597,"tag":807,"props":1440,"children":1441},{},[1442],{"type":603,"value":1443},"负载均衡",{"type":597,"tag":606,"props":1445,"children":1446},{},[1447],{"type":603,"value":1448},"根据请求情况和服务器负载情况，将请求分配给不同的Web服务器，保证服务器性能",{"type":597,"tag":1321,"props":1450,"children":1451},{},[1452],{"type":597,"tag":807,"props":1453,"children":1454},{},[1455],{"type":603,"value":1456},"提高Web服务器的IO性能",{"type":597,"tag":606,"props":1458,"children":1459},{},[1460],{"type":603,"value":1461},"请求从客户端传到Web服务器是需要时间的，传递多长时间就会让这个进程阻塞多长时间，而通过反向代理，就可以由反向代理完整接受该请求，然后再传给Web服务器，从而保证服务器性能，而且有的一些简单的事情（比如静态文件）可以直接由反向代理处理，不经过Web服务器",{"type":597,"tag":1023,"props":1463,"children":1465},{"id":1464},"总结",[1466],{"type":603,"value":1464},{"type":597,"tag":1321,"props":1468,"children":1469},{},[1470,1475,1480],{"type":597,"tag":807,"props":1471,"children":1472},{},[1473],{"type":603,"value":1474},"WSGI是一种通信协议",{"type":597,"tag":807,"props":1476,"children":1477},{},[1478],{"type":603,"value":1479},"uwsgi是一种通信协议，常用于在uWSGI服务器与其他网络服务器的数据通信",{"type":597,"tag":807,"props":1481,"children":1482},{},[1483],{"type":603,"value":1484},"而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器",{"type":597,"tag":606,"props":1486,"children":1487},{},[1488],{"type":603,"value":1489},"百度百科上说uwsgi是一种线路协议而不是通信协议，个人更倾向于uwsgi是类似WSGI的通信协议的说法，uwsgi和WSGI都是基于CGI扩展出来的。",{"type":597,"tag":1023,"props":1491,"children":1493},{"id":1492},"asgi",[1494],{"type":603,"value":1495},"ASGI",{"type":597,"tag":606,"props":1497,"children":1498},{},[1499,1504],{"type":597,"tag":1080,"props":1500,"children":1501},{},[1502],{"type":603,"value":1503},"异步网关协议接口",{"type":603,"value":1505},"，一个介于网络协议服务和Python应用之间的标准接口，能够处理多种通用的协议类型，包括HTTP，HTTP2和WebSocket。",{"type":597,"tag":606,"props":1507,"children":1508},{},[1509],{"type":603,"value":1510},"然而目前的常用的WSGI主要是针对HTTP风格的请求响应模型做的设计，并且越来越多的不遵循这种模式的协议逐渐成为Web变成的标准之一，例如WebSocket。",{"type":597,"tag":606,"props":1512,"children":1513},{},[1514],{"type":603,"value":1515},"ASGI尝试保持在一个简单的应用接口的前提下，提供允许数据能够在任意的时候、被任意应用进程发送和接受的抽象。并且同样描述了一个新的，兼容HTTP请求响应以及WebSocket数据帧的序列格式。允许这些协议能通过网络或本地socket进行传输，以及让不同的协议被分配到不同的进程中。",{"type":597,"tag":1023,"props":1517,"children":1519},{"id":1518},"wsgi和asgi的区别",[1520],{"type":603,"value":1521},"WSGI和ASGI的区别",{"type":597,"tag":606,"props":1523,"children":1524},{},[1525],{"type":603,"value":1526},"WSGI是基于HTTP协议模式的，不支持WebSocket，而ASGI的诞生则是为了解决Python常用的WSGI不支持当前Web开发中的一些新的协议标准。同时，ASGI对于WSGI原有的模式的支持和WebSocket的扩展，即ASGI是WSGI的扩展。",{"title":591,"searchDepth":787,"depth":787,"links":1528},[1529,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542],{"id":1025,"depth":1530,"text":1028},3,{"id":1041,"depth":1530,"text":1041},{"id":1073,"depth":1530,"text":1073},{"id":1129,"depth":1530,"text":1132},{"id":1155,"depth":1530,"text":1155},{"id":1194,"depth":1530,"text":1197},{"id":1238,"depth":1530,"text":1241},{"id":1281,"depth":1530,"text":1281},{"id":1296,"depth":1530,"text":1299},{"id":1336,"depth":1530,"text":1339},{"id":1464,"depth":1530,"text":1464},{"id":1492,"depth":1530,"text":1495},{"id":1518,"depth":1530,"text":1521},"content:tool:2023-02-15-cgi-fastcgi-wsgi-uswgi.md","tool/2023-02-15-cgi-fastcgi-wsgi-uswgi.md","2023-02-15",{"_path":363,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":362,"description":1547,"body":1548,"_type":791,"_id":1922,"_source":793,"_file":1923,"_extension":795,"date":1924},"硬體需求根據 StableDiffusion 官網 所寫，只要有 6G 以上 RAM 的 NVidia 顯卡都可以跑。不過根據 jimmy 實測，4G 的 1050ti 就可以順利運行了。(在我們這次使用的網頁介面實作項目 AUTOMATIC1111/stable-diffusion-webui 裡提到，2G 也有成功運行的報告)安裝步驟1. 下載並安裝 github for windows這裡我們用 Windows 平台為範例來說明。\n首先到 https://gitforwindows.org 下載 git for windows，並安裝。 ( 安裝過程中可取消與 Windows Explo",{"type":594,"children":1549,"toc":1911},[1550,1555,1578,1583,1589,1609,1616,1621,1627,1653,1660,1673,1678,1687,1692,1701,1708,1714,1719,1727,1740,1748,1756,1761,1769,1774,1782,1788,1793,1798,1807,1812,1828,1837,1845,1852,1857,1885,1890,1898],{"type":597,"tag":598,"props":1551,"children":1553},{"id":1552},"硬體需求",[1554],{"type":603,"value":1552},{"type":597,"tag":606,"props":1556,"children":1557},{},[1558,1560,1567,1569,1576],{"type":603,"value":1559},"根據 ",{"type":597,"tag":886,"props":1561,"children":1564},{"href":1562,"rel":1563},"https://stability.ai/faq",[890],[1565],{"type":603,"value":1566},"StableDiffusion 官網",{"type":603,"value":1568}," 所寫，只要有 6G 以上 RAM 的 NVidia 顯卡都可以跑。不過根據 jimmy 實測，4G 的 1050ti 就可以順利運行了。(在我們這次使用的網頁介面實作項目 ",{"type":597,"tag":886,"props":1570,"children":1573},{"href":1571,"rel":1572},"https://github.com/AUTOMATIC1111/stable-diffusion-webui",[890],[1574],{"type":603,"value":1575},"AUTOMATIC1111/stable-diffusion-webui",{"type":603,"value":1577}," 裡提到，2G 也有成功運行的報告)",{"type":597,"tag":598,"props":1579,"children":1581},{"id":1580},"安裝步驟",[1582],{"type":603,"value":1580},{"type":597,"tag":1023,"props":1584,"children":1586},{"id":1585},"_1-下載並安裝-github-for-windows",[1587],{"type":603,"value":1588},"1. 下載並安裝 github for windows",{"type":597,"tag":606,"props":1590,"children":1591},{},[1592,1594,1598,1600,1607],{"type":603,"value":1593},"這裡我們用 Windows 平台為範例來說明。",{"type":597,"tag":1595,"props":1596,"children":1597},"br",{},[],{"type":603,"value":1599},"\n首先到 ",{"type":597,"tag":886,"props":1601,"children":1604},{"href":1602,"rel":1603},"https://gitforwindows.org/",[890],[1605],{"type":603,"value":1606},"https://gitforwindows.org",{"type":603,"value":1608}," 下載 git for windows，並安裝。 ( 安裝過程中可取消與 Windows Exploer 整合 )",{"type":597,"tag":606,"props":1610,"children":1611},{},[1612],{"type":597,"tag":719,"props":1613,"children":1615},{"alt":591,"src":1614},"/images/2023-01-20-stable-diffusion-install/gitInstall.jpg",[],{"type":597,"tag":606,"props":1617,"children":1618},{},[1619],{"type":603,"value":1620},"安裝前可以取消 Windows Explorer integration",{"type":597,"tag":1023,"props":1622,"children":1624},{"id":1623},"_2-下載並安裝-python",[1625],{"type":603,"value":1626},"2. 下載並安裝 Python",{"type":597,"tag":606,"props":1628,"children":1629},{},[1630,1632,1638,1640,1643,1648,1651],{"type":603,"value":1631},"a. 到 ",{"type":597,"tag":886,"props":1633,"children":1636},{"href":1634,"rel":1635},"https://www.python.org/downloads/release/python-3106",[890],[1637],{"type":603,"value":1634},{"type":603,"value":1639}," 下載 Windows installer (64-bit) 版本",{"type":597,"tag":1595,"props":1641,"children":1642},{},[],{"type":597,"tag":1080,"props":1644,"children":1645},{},[1646],{"type":603,"value":1647},"(這兩天 Python 的版本更新到了 3.11.0，但 AUTOMATIC1111 表示這個程式是基於 3.10.6 版開發的，除非你想給自己找麻煩，否則請不要使用其他版本 )",{"type":597,"tag":1595,"props":1649,"children":1650},{},[],{"type":603,"value":1652},"\nb. 安裝時記得勾選 Add Python.exe to PATH",{"type":597,"tag":606,"props":1654,"children":1655},{},[1656],{"type":597,"tag":719,"props":1657,"children":1659},{"alt":591,"src":1658},"/images/2023-01-20-stable-diffusion-install/pythonInstall.jpg",[],{"type":597,"tag":606,"props":1661,"children":1662},{},[1663,1665,1671],{"type":603,"value":1664},"記得要把 ",{"type":597,"tag":629,"props":1666,"children":1668},{"className":1667},[],[1669],{"type":603,"value":1670},"Add python.exe to PATH",{"type":603,"value":1672}," 打勾",{"type":597,"tag":606,"props":1674,"children":1675},{},[1676],{"type":603,"value":1677},"设置pip源（一定要设置清华大学的，阿里的有点问题）",{"type":597,"tag":606,"props":1679,"children":1680},{},[1681],{"type":597,"tag":629,"props":1682,"children":1684},{"className":1683},[],[1685],{"type":603,"value":1686},"pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple",{"type":597,"tag":606,"props":1688,"children":1689},{},[1690],{"type":603,"value":1691},"更新pip",{"type":597,"tag":606,"props":1693,"children":1694},{},[1695],{"type":597,"tag":629,"props":1696,"children":1698},{"className":1697},[],[1699],{"type":603,"value":1700},"python -m pip install --upgrade pip",{"type":597,"tag":606,"props":1702,"children":1703},{},[1704],{"type":597,"tag":719,"props":1705,"children":1707},{"alt":591,"src":1706},"/images/2023-01-20-stable-diffusion-install/1676391305000.png",[],{"type":597,"tag":1023,"props":1709,"children":1711},{"id":1710},"_3-下载模型",[1712],{"type":603,"value":1713},"3. 下载模型",{"type":597,"tag":606,"props":1715,"children":1716},{},[1717],{"type":603,"value":1718},"经过测试目前sd2.0只有以下两种模型可以用 ，其他模型加载都会报错，github上看了issue上大家都有遇到这个问题",{"type":597,"tag":606,"props":1720,"children":1721},{},[1722],{"type":597,"tag":1080,"props":1723,"children":1724},{},[1725],{"type":603,"value":1726},"768-v-ema.ckpt",{"type":597,"tag":606,"props":1728,"children":1729},{},[1730,1732,1738],{"type":603,"value":1731},"这个模型需要生成的图片在768",{"type":597,"tag":1733,"props":1734,"children":1735},"em",{},[1736],{"type":603,"value":1737},"768的时候效果比较好，如果是生成512",{"type":603,"value":1739},"512的，图片有点拉垮；",{"type":597,"tag":621,"props":1741,"children":1743},{"code":1742},"# 768-v-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2/resolve/main/768-v-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2-1/resolve/main/v2-1_768-ema-pruned.ckpt\n# 配置文件（下载以后注意把文件名修改为768-v-ema.yaml）\nhttps://raw.githubusercontent.com/Stability-AI/stablediffusion/main/configs/stable-diffusion/v2-inference-v.yaml\n",[1744],{"type":597,"tag":629,"props":1745,"children":1746},{"__ignoreMap":591},[1747],{"type":603,"value":1742},{"type":597,"tag":606,"props":1749,"children":1750},{},[1751],{"type":597,"tag":1080,"props":1752,"children":1753},{},[1754],{"type":603,"value":1755},"512-base-ema.ckpt",{"type":597,"tag":606,"props":1757,"children":1758},{},[1759],{"type":603,"value":1760},"如果显存不够的，比较小的，可以使用这个模型；比较推荐768，效果比512的好；",{"type":597,"tag":621,"props":1762,"children":1764},{"code":1763},"# 512-base-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2-base/resolve/main/512-base-ema.ckpt\nhttps://huggingface.co/stabilityai/stable-diffusion-2-1-base/resolve/main/v2-1_512-ema-pruned.ckpt\n# 配置文件（下载以后注意把文件名修改为512-base-ema.yaml）\nhttps://raw.githubusercontent.com/Stability-AI/stablediffusion/main/configs/stable-diffusion/v2-inference.yaml\n",[1765],{"type":597,"tag":629,"props":1766,"children":1767},{"__ignoreMap":591},[1768],{"type":603,"value":1763},{"type":597,"tag":606,"props":1770,"children":1771},{},[1772],{"type":603,"value":1773},"安装模型",{"type":597,"tag":621,"props":1775,"children":1777},{"code":1776},"git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git\ncd stable-diffusion-webui\n./venv/Scripts/python.exe -m pip install --upgrade pip\ncd models/Stable-diffusion/\nInvoke-WebRequest -Uri https://raw.githubusercontent.com/Stability-AI/stablediffusion/main/configs/stable-diffusion/v2-inference-v.yaml -OutFile ./v2-1_768-ema-pruned.yaml\nInvoke-WebRequest -Uri https://huggingface.co/stabilityai/stable-diffusion-2-1/resolve/main/v2-1_768-ema-pruned.ckpt -OutFile ./v2-1_768-ema-pruned.ckpt\n",[1778],{"type":597,"tag":629,"props":1779,"children":1780},{"__ignoreMap":591},[1781],{"type":603,"value":1776},{"type":597,"tag":1023,"props":1783,"children":1785},{"id":1784},"_4-正式安裝-stable-diffusion",[1786],{"type":603,"value":1787},"4. 正式安裝 Stable Diffusion",{"type":597,"tag":606,"props":1789,"children":1790},{},[1791],{"type":603,"value":1792},"在国外，安装Stable Diffusion比较简单，但是由于国内的网络环境，安装过程中可能会遇上不少麻烦。",{"type":597,"tag":606,"props":1794,"children":1795},{},[1796],{"type":603,"value":1797},"编辑“launch.py”（此处我是用的是Visual Studio Code，Linux则需要用到特定的文本编辑器）。",{"type":597,"tag":606,"props":1799,"children":1800},{},[1801],{"type":597,"tag":629,"props":1802,"children":1804},{"className":1803},[],[1805],{"type":603,"value":1806},"code .\\launch.py",{"type":597,"tag":606,"props":1808,"children":1809},{},[1810],{"type":603,"value":1811},"替换前",{"type":597,"tag":606,"props":1813,"children":1814},{},[1815,1819,1821],{"type":597,"tag":719,"props":1816,"children":1818},{"alt":591,"src":1817},"/images/2023-01-20-stable-diffusion-install/1676396613000.png",[],{"type":603,"value":1820},"替换所有的“",{"type":597,"tag":886,"props":1822,"children":1825},{"href":1823,"rel":1824},"https://github.com%E2%80%9D%E4%B8%BA%E2%80%9Chttps://ghproxy.com/https://github.com%E2%80%9D%E3%80%82%E8%BF%99%E9%87%8C%E4%B9%9F%E6%98%AF%E5%88%A9%E7%94%A8Ghproxy%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%90%86%EF%BC%8C%E5%8A%A0%E9%80%9F%E5%9B%BD%E5%86%85Git%E3%80%82",[890],[1826],{"type":603,"value":1827},"https://github.com”为“https://ghproxy.com/https://github.com”。这里也是利用Ghproxy进行代理，加速国内Git。",{"type":597,"tag":606,"props":1829,"children":1830},{},[1831,1835],{"type":597,"tag":719,"props":1832,"children":1834},{"alt":591,"src":1833},"/images/2023-01-20-stable-diffusion-install/1676396580000.png",[],{"type":603,"value":1836},"替换完成后注意保存。",{"type":597,"tag":621,"props":1838,"children":1840},{"code":1839},"cd ../../\n//修改webui-user.bat 设置启动参数,会自动安装 xformers\nset COMMANDLINE_ARGS=--share --xformers --enable-insecure-extension-access --api --precision full --no-half --medvram \n",[1841],{"type":597,"tag":629,"props":1842,"children":1843},{"__ignoreMap":591},[1844],{"type":603,"value":1839},{"type":597,"tag":606,"props":1846,"children":1847},{},[1848],{"type":597,"tag":719,"props":1849,"children":1851},{"alt":591,"src":1850},"/images/2023-01-20-stable-diffusion-install/1676428686000.png",[],{"type":597,"tag":1023,"props":1853,"children":1855},{"id":1854},"参数解释",[1856],{"type":603,"value":1854},{"type":597,"tag":1321,"props":1858,"children":1859},{},[1860,1865,1870,1875,1880],{"type":597,"tag":807,"props":1861,"children":1862},{},[1863],{"type":603,"value":1864},"xformers：优化显存占用情况的插件",{"type":597,"tag":807,"props":1866,"children":1867},{},[1868],{"type":603,"value":1869},"precision full和no-half：完全精度和非半精度，也就是使用32位浮点运算而不是使用16位浮点运算，开启这两个参数会让显存占用增加，但图的质量会更好，但是cpu和16XX显卡必须开启，不然黑图或者绿图",{"type":597,"tag":807,"props":1871,"children":1872},{},[1873],{"type":603,"value":1874},"lowvram和medvram  低内存和中内存",{"type":597,"tag":807,"props":1876,"children":1877},{},[1878],{"type":603,"value":1879},"share 会生成一个供外部访问的链接",{"type":597,"tag":807,"props":1881,"children":1882},{},[1883],{"type":603,"value":1884},"api 启动api,主要是供插件使用",{"type":597,"tag":1023,"props":1886,"children":1888},{"id":1887},"当前遇到的问题",[1889],{"type":603,"value":1887},{"type":597,"tag":617,"props":1891,"children":1892},{},[1893],{"type":597,"tag":606,"props":1894,"children":1895},{},[1896],{"type":603,"value":1897},"modules.devices.NansException: A tensor with all NaNs was produced in Unet. This could be either because there's not enough precision to represent the picture, or because your video card does not support half type. Try setting the \"Upcast cross attention layer to float32\" option in Settings > Stable Diffusion or using the --no-half commandline argument to fix this. Use --disable-nan-check commandline argument to disable this check.",{"type":597,"tag":606,"props":1899,"children":1900},{},[1901,1903,1909],{"type":603,"value":1902},"if you plan to use SD 2.1 models, you go to Settings -> User Interface and set Quicksettings list to ",{"type":597,"tag":629,"props":1904,"children":1906},{"className":1905},[],[1907],{"type":603,"value":1908},"sd_model_checkpoint, upcast_attn",{"type":603,"value":1910}," then click Apply settings and Reload UI. This adds a checkbox (Upcast cross attention layer to float32) next to the model dropdown that should be checked whenever using SD 2.1 models. Uncheck it after you load a model that is not SD 2.1 based.",{"title":591,"searchDepth":787,"depth":787,"links":1912},[1913,1914],{"id":1552,"depth":787,"text":1552},{"id":1580,"depth":787,"text":1580,"children":1915},[1916,1917,1918,1919,1920,1921],{"id":1585,"depth":1530,"text":1588},{"id":1623,"depth":1530,"text":1626},{"id":1710,"depth":1530,"text":1713},{"id":1784,"depth":1530,"text":1787},{"id":1854,"depth":1530,"text":1854},{"id":1887,"depth":1530,"text":1887},"content:tool:2023-01-20-stable-diffusion-install.md","tool/2023-01-20-stable-diffusion-install.md","2023-01-20",{"_path":238,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":237,"description":1926,"body":1927,"_type":791,"_id":2846,"_source":793,"_file":2847,"_extension":795,"date":2848},"初始属性\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n属性说明元气,身法,力道初始自由分配点60最大生命值64内力值32体力100心情100命中值2暴击几率5%爆击伤害50%魔力回复速度每秒1.75%格挡率15%气质才情\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n属性说明悟性习武的时候提高的领悟力用来升级技能魅力影响他人的好感，在游戏中需要魅力高的内门弟子去各大门派攻破长老心防；需要魅力高的外门去代理点当主持机缘影响角色幸运。同时很多地图事件对机缘有要求，历练时获得物品的",{"type":594,"children":1928,"toc":2836},[1929,1934,1936,2138,2143,2145,2271,2276,2277,2400,2405,2407,2636,2641,2646,2674,2679,2681,2784,2789,2791],{"type":597,"tag":598,"props":1930,"children":1932},{"id":1931},"初始属性",[1933],{"type":603,"value":1931},{"type":603,"value":1935},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":1938,"children":1939},"table",{},[1940,1962],{"type":597,"tag":1941,"props":1942,"children":1943},"thead",{},[1944],{"type":597,"tag":1945,"props":1946,"children":1947},"tr",{},[1948,1954,1959],{"type":597,"tag":1949,"props":1950,"children":1951},"th",{},[1952],{"type":603,"value":1953},"属性",{"type":597,"tag":1949,"props":1955,"children":1956},{},[1957],{"type":603,"value":1958},"说明",{"type":597,"tag":1949,"props":1960,"children":1961},{},[],{"type":597,"tag":1963,"props":1964,"children":1965},"tbody",{},[1966,1983,1999,2015,2031,2046,2058,2074,2090,2106,2122],{"type":597,"tag":1945,"props":1967,"children":1968},{},[1969,1975,1980],{"type":597,"tag":1970,"props":1971,"children":1972},"td",{},[1973],{"type":603,"value":1974},"元气,身法,力道",{"type":597,"tag":1970,"props":1976,"children":1977},{},[1978],{"type":603,"value":1979},"初始自由分配点60",{"type":597,"tag":1970,"props":1981,"children":1982},{},[],{"type":597,"tag":1945,"props":1984,"children":1985},{},[1986,1991,1996],{"type":597,"tag":1970,"props":1987,"children":1988},{},[1989],{"type":603,"value":1990},"最大生命值",{"type":597,"tag":1970,"props":1992,"children":1993},{},[1994],{"type":603,"value":1995},"64",{"type":597,"tag":1970,"props":1997,"children":1998},{},[],{"type":597,"tag":1945,"props":2000,"children":2001},{},[2002,2007,2012],{"type":597,"tag":1970,"props":2003,"children":2004},{},[2005],{"type":603,"value":2006},"内力值",{"type":597,"tag":1970,"props":2008,"children":2009},{},[2010],{"type":603,"value":2011},"32",{"type":597,"tag":1970,"props":2013,"children":2014},{},[],{"type":597,"tag":1945,"props":2016,"children":2017},{},[2018,2023,2028],{"type":597,"tag":1970,"props":2019,"children":2020},{},[2021],{"type":603,"value":2022},"体力",{"type":597,"tag":1970,"props":2024,"children":2025},{},[2026],{"type":603,"value":2027},"100",{"type":597,"tag":1970,"props":2029,"children":2030},{},[],{"type":597,"tag":1945,"props":2032,"children":2033},{},[2034,2039,2043],{"type":597,"tag":1970,"props":2035,"children":2036},{},[2037],{"type":603,"value":2038},"心情",{"type":597,"tag":1970,"props":2040,"children":2041},{},[2042],{"type":603,"value":2027},{"type":597,"tag":1970,"props":2044,"children":2045},{},[],{"type":597,"tag":1945,"props":2047,"children":2048},{},[2049,2052,2055],{"type":597,"tag":1970,"props":2050,"children":2051},{},[],{"type":597,"tag":1970,"props":2053,"children":2054},{},[],{"type":597,"tag":1970,"props":2056,"children":2057},{},[],{"type":597,"tag":1945,"props":2059,"children":2060},{},[2061,2066,2071],{"type":597,"tag":1970,"props":2062,"children":2063},{},[2064],{"type":603,"value":2065},"命中值",{"type":597,"tag":1970,"props":2067,"children":2068},{},[2069],{"type":603,"value":2070},"2",{"type":597,"tag":1970,"props":2072,"children":2073},{},[],{"type":597,"tag":1945,"props":2075,"children":2076},{},[2077,2082,2085],{"type":597,"tag":1970,"props":2078,"children":2079},{},[2080],{"type":603,"value":2081},"暴击几率",{"type":597,"tag":1970,"props":2083,"children":2084},{},[],{"type":597,"tag":1970,"props":2086,"children":2087},{},[2088],{"type":603,"value":2089},"5%",{"type":597,"tag":1945,"props":2091,"children":2092},{},[2093,2098,2101],{"type":597,"tag":1970,"props":2094,"children":2095},{},[2096],{"type":603,"value":2097},"爆击伤害",{"type":597,"tag":1970,"props":2099,"children":2100},{},[],{"type":597,"tag":1970,"props":2102,"children":2103},{},[2104],{"type":603,"value":2105},"50%",{"type":597,"tag":1945,"props":2107,"children":2108},{},[2109,2114,2117],{"type":597,"tag":1970,"props":2110,"children":2111},{},[2112],{"type":603,"value":2113},"魔力回复速度",{"type":597,"tag":1970,"props":2115,"children":2116},{},[],{"type":597,"tag":1970,"props":2118,"children":2119},{},[2120],{"type":603,"value":2121},"每秒1.75%",{"type":597,"tag":1945,"props":2123,"children":2124},{},[2125,2130,2133],{"type":597,"tag":1970,"props":2126,"children":2127},{},[2128],{"type":603,"value":2129},"格挡率",{"type":597,"tag":1970,"props":2131,"children":2132},{},[],{"type":597,"tag":1970,"props":2134,"children":2135},{},[2136],{"type":603,"value":2137},"15%",{"type":597,"tag":598,"props":2139,"children":2141},{"id":2140},"气质才情",[2142],{"type":603,"value":2140},{"type":603,"value":2144},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":2146,"children":2147},{},[2148,2165],{"type":597,"tag":1941,"props":2149,"children":2150},{},[2151],{"type":597,"tag":1945,"props":2152,"children":2153},{},[2154,2158,2162],{"type":597,"tag":1949,"props":2155,"children":2156},{},[2157],{"type":603,"value":1953},{"type":597,"tag":1949,"props":2159,"children":2160},{},[2161],{"type":603,"value":1958},{"type":597,"tag":1949,"props":2163,"children":2164},{},[],{"type":597,"tag":1963,"props":2166,"children":2167},{},[2168,2186,2202,2218,2243,2257],{"type":597,"tag":1945,"props":2169,"children":2170},{},[2171,2176,2181],{"type":597,"tag":1970,"props":2172,"children":2173},{},[2174],{"type":603,"value":2175},"悟性",{"type":597,"tag":1970,"props":2177,"children":2178},{},[2179],{"type":603,"value":2180},"习武的时候提高的领悟力",{"type":597,"tag":1970,"props":2182,"children":2183},{},[2184],{"type":603,"value":2185},"用来升级技能",{"type":597,"tag":1945,"props":2187,"children":2188},{},[2189,2194,2199],{"type":597,"tag":1970,"props":2190,"children":2191},{},[2192],{"type":603,"value":2193},"魅力",{"type":597,"tag":1970,"props":2195,"children":2196},{},[2197],{"type":603,"value":2198},"影响他人的好感，在游戏中需要魅力高的内门弟子去各大门派攻破长老心防；需要魅力高的外门去代理点当主持",{"type":597,"tag":1970,"props":2200,"children":2201},{},[],{"type":597,"tag":1945,"props":2203,"children":2204},{},[2205,2210,2215],{"type":597,"tag":1970,"props":2206,"children":2207},{},[2208],{"type":603,"value":2209},"机缘",{"type":597,"tag":1970,"props":2211,"children":2212},{},[2213],{"type":603,"value":2214},"影响角色幸运。同时很多地图事件对机缘有要求，历练时获得物品的概率也和机缘有关。",{"type":597,"tag":1970,"props":2216,"children":2217},{},[],{"type":597,"tag":1945,"props":2219,"children":2220},{},[2221,2226,2238],{"type":597,"tag":1970,"props":2222,"children":2223},{},[2224],{"type":603,"value":2225},"童趣",{"type":597,"tag":1970,"props":2227,"children":2228},{},[2229,2231,2236],{"type":603,"value":2230},"当角色",{"type":597,"tag":1080,"props":2232,"children":2233},{},[2234],{"type":603,"value":2235},"情绪过低",{"type":603,"value":2237},"，会引发一系列的问题：①外门怠工，外门弟子心情低于50，会导致怠工，自动不受控制的闲逛，得到休息后可恢复。②内门心魔，内门弟子长期心情过差（低于100），会导致修炼严重受挫，产生心魔，难以寸进。③弟子叛逃，长期遭受虐待而得不到改善时，弟子会选择叛逃。",{"type":597,"tag":1970,"props":2239,"children":2240},{},[2241],{"type":603,"value":2242},"角色的情绪稳定标准：最低限度为50，上限为200",{"type":597,"tag":1945,"props":2244,"children":2245},{},[2246,2251,2254],{"type":597,"tag":1970,"props":2247,"children":2248},{},[2249],{"type":603,"value":2250},"正义",{"type":597,"tag":1970,"props":2252,"children":2253},{},[],{"type":597,"tag":1970,"props":2255,"children":2256},{},[],{"type":597,"tag":1945,"props":2258,"children":2259},{},[2260,2265,2268],{"type":597,"tag":1970,"props":2261,"children":2262},{},[2263],{"type":603,"value":2264},"邪恶",{"type":597,"tag":1970,"props":2266,"children":2267},{},[],{"type":597,"tag":1970,"props":2269,"children":2270},{},[],{"type":597,"tag":598,"props":2272,"children":2274},{"id":2273},"境界属性",[2275],{"type":603,"value":2273},{"type":603,"value":2144},{"type":597,"tag":1937,"props":2278,"children":2279},{},[2280,2298],{"type":597,"tag":1941,"props":2281,"children":2282},{},[2283],{"type":597,"tag":1945,"props":2284,"children":2285},{},[2286,2290,2294],{"type":597,"tag":1949,"props":2287,"children":2288},{},[2289],{"type":603,"value":1953},{"type":597,"tag":1949,"props":2291,"children":2292},{},[2293],{"type":603,"value":1958},{"type":597,"tag":1949,"props":2295,"children":2296},{},[2297],{"type":603,"value":1958},{"type":597,"tag":1963,"props":2299,"children":2300},{},[2301,2319,2337,2353,2369,2384],{"type":597,"tag":1945,"props":2302,"children":2303},{},[2304,2309,2314],{"type":597,"tag":1970,"props":2305,"children":2306},{},[2307],{"type":603,"value":2308},"武道",{"type":597,"tag":1970,"props":2310,"children":2311},{},[2312],{"type":603,"value":2313},"用来提高武道境界",{"type":597,"tag":1970,"props":2315,"children":2316},{},[2317],{"type":603,"value":2318},"每次升级力道+10,最大生命值+12,最大魔力+6,命中值+2,闪避值+3,+1天赋点",{"type":597,"tag":1945,"props":2320,"children":2321},{},[2322,2327,2332],{"type":597,"tag":1970,"props":2323,"children":2324},{},[2325],{"type":603,"value":2326},"佛法",{"type":597,"tag":1970,"props":2328,"children":2329},{},[2330],{"type":603,"value":2331},"用来提高佛法境界",{"type":597,"tag":1970,"props":2333,"children":2334},{},[2335],{"type":603,"value":2336},"每次升级力道身法+5,力道+5,最大生命值+12,最大魔力+6,命中值+2,闪避值+3,+1天赋点",{"type":597,"tag":1945,"props":2338,"children":2339},{},[2340,2345,2348],{"type":597,"tag":1970,"props":2341,"children":2342},{},[2343],{"type":603,"value":2344},"道法",{"type":597,"tag":1970,"props":2346,"children":2347},{},[],{"type":597,"tag":1970,"props":2349,"children":2350},{},[2351],{"type":603,"value":2352},"每次升级元气+5,身法+5,最大生命值+12,最大魔力+6,命中值+2,闪避值+3,+1天赋点",{"type":597,"tag":1945,"props":2354,"children":2355},{},[2356,2361,2364],{"type":597,"tag":1970,"props":2357,"children":2358},{},[2359],{"type":603,"value":2360},"儒学",{"type":597,"tag":1970,"props":2362,"children":2363},{},[],{"type":597,"tag":1970,"props":2365,"children":2366},{},[2367],{"type":603,"value":2368},"每次升级元气+10,最大生命值+12,最大魔力+6,命中值+2,闪避值+3,+1天赋点",{"type":597,"tag":1945,"props":2370,"children":2371},{},[2372,2377,2380],{"type":597,"tag":1970,"props":2373,"children":2374},{},[2375],{"type":603,"value":2376},"巫术",{"type":597,"tag":1970,"props":2378,"children":2379},{},[],{"type":597,"tag":1970,"props":2381,"children":2382},{},[2383],{"type":603,"value":2368},{"type":597,"tag":1945,"props":2385,"children":2386},{},[2387,2392,2395],{"type":597,"tag":1970,"props":2388,"children":2389},{},[2390],{"type":603,"value":2391},"墨家",{"type":597,"tag":1970,"props":2393,"children":2394},{},[],{"type":597,"tag":1970,"props":2396,"children":2397},{},[2398],{"type":603,"value":2399},"每次升级身法+10,最大生命值+12,最大魔力+6,命中值+2,闪避值+3,+1天赋点",{"type":597,"tag":598,"props":2401,"children":2403},{"id":2402},"生活属性",[2404],{"type":603,"value":2402},{"type":603,"value":2406},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":2408,"children":2409},{},[2410,2428],{"type":597,"tag":1941,"props":2411,"children":2412},{},[2413],{"type":597,"tag":1945,"props":2414,"children":2415},{},[2416,2420,2423],{"type":597,"tag":1949,"props":2417,"children":2418},{},[2419],{"type":603,"value":1953},{"type":597,"tag":1949,"props":2421,"children":2422},{},[],{"type":597,"tag":1949,"props":2424,"children":2425},{},[2426],{"type":603,"value":2427},"最大值",{"type":597,"tag":1963,"props":2429,"children":2430},{},[2431,2449,2466,2483,2500,2517,2534,2551,2568,2585,2602,2619],{"type":597,"tag":1945,"props":2432,"children":2433},{},[2434,2439,2444],{"type":597,"tag":1970,"props":2435,"children":2436},{},[2437],{"type":603,"value":2438},"开山",{"type":597,"tag":1970,"props":2440,"children":2441},{},[2442],{"type":603,"value":2443},"采集矿物",{"type":597,"tag":1970,"props":2445,"children":2446},{},[2447],{"type":603,"value":2448},"20",{"type":597,"tag":1945,"props":2450,"children":2451},{},[2452,2457,2462],{"type":597,"tag":1970,"props":2453,"children":2454},{},[2455],{"type":603,"value":2456},"扶农",{"type":597,"tag":1970,"props":2458,"children":2459},{},[2460],{"type":603,"value":2461},"收集粮食",{"type":597,"tag":1970,"props":2463,"children":2464},{},[2465],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2467,"children":2468},{},[2469,2474,2479],{"type":597,"tag":1970,"props":2470,"children":2471},{},[2472],{"type":603,"value":2473},"本草",{"type":597,"tag":1970,"props":2475,"children":2476},{},[2477],{"type":603,"value":2478},"采集药品",{"type":597,"tag":1970,"props":2480,"children":2481},{},[2482],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2484,"children":2485},{},[2486,2491,2496],{"type":597,"tag":1970,"props":2487,"children":2488},{},[2489],{"type":603,"value":2490},"斫木",{"type":597,"tag":1970,"props":2492,"children":2493},{},[2494],{"type":603,"value":2495},"砍伐木材",{"type":597,"tag":1970,"props":2497,"children":2498},{},[2499],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2501,"children":2502},{},[2503,2508,2513],{"type":597,"tag":1970,"props":2504,"children":2505},{},[2506],{"type":603,"value":2507},"悬壶",{"type":597,"tag":1970,"props":2509,"children":2510},{},[2511],{"type":603,"value":2512},"炼制丹药",{"type":597,"tag":1970,"props":2514,"children":2515},{},[2516],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2518,"children":2519},{},[2520,2525,2530],{"type":597,"tag":1970,"props":2521,"children":2522},{},[2523],{"type":603,"value":2524},"生财",{"type":597,"tag":1970,"props":2526,"children":2527},{},[2528],{"type":603,"value":2529},"贩卖商品",{"type":597,"tag":1970,"props":2531,"children":2532},{},[2533],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2535,"children":2536},{},[2537,2542,2547],{"type":597,"tag":1970,"props":2538,"children":2539},{},[2540],{"type":603,"value":2541},"铸造",{"type":597,"tag":1970,"props":2543,"children":2544},{},[2545],{"type":603,"value":2546},"锻造装备",{"type":597,"tag":1970,"props":2548,"children":2549},{},[2550],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2552,"children":2553},{},[2554,2559,2564],{"type":597,"tag":1970,"props":2555,"children":2556},{},[2557],{"type":603,"value":2558},"巧匠",{"type":597,"tag":1970,"props":2560,"children":2561},{},[2562],{"type":603,"value":2563},"制作工艺品",{"type":597,"tag":1970,"props":2565,"children":2566},{},[2567],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2569,"children":2570},{},[2571,2576,2581],{"type":597,"tag":1970,"props":2572,"children":2573},{},[2574],{"type":603,"value":2575},"威望",{"type":597,"tag":1970,"props":2577,"children":2578},{},[2579],{"type":603,"value":2580},"可以当门派帮主之类的有额外加成",{"type":597,"tag":1970,"props":2582,"children":2583},{},[2584],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2586,"children":2587},{},[2588,2593,2598],{"type":597,"tag":1970,"props":2589,"children":2590},{},[2591],{"type":603,"value":2592},"谋略",{"type":597,"tag":1970,"props":2594,"children":2595},{},[2596],{"type":603,"value":2597},"策略府",{"type":597,"tag":1970,"props":2599,"children":2600},{},[2601],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2603,"children":2604},{},[2605,2610,2615],{"type":597,"tag":1970,"props":2606,"children":2607},{},[2608],{"type":603,"value":2609},"处世",{"type":597,"tag":1970,"props":2611,"children":2612},{},[2613],{"type":603,"value":2614},"处理任务",{"type":597,"tag":1970,"props":2616,"children":2617},{},[2618],{"type":603,"value":2448},{"type":597,"tag":1945,"props":2620,"children":2621},{},[2622,2627,2632],{"type":597,"tag":1970,"props":2623,"children":2624},{},[2625],{"type":603,"value":2626},"学识",{"type":597,"tag":1970,"props":2628,"children":2629},{},[2630],{"type":603,"value":2631},"书写秘籍",{"type":597,"tag":1970,"props":2633,"children":2634},{},[2635],{"type":603,"value":2448},{"type":597,"tag":598,"props":2637,"children":2639},{"id":2638},"战斗属性",[2640],{"type":603,"value":2638},{"type":597,"tag":606,"props":2642,"children":2643},{},[2644],{"type":603,"value":2645},"技能标签 :",{"type":597,"tag":803,"props":2647,"children":2648},{},[2649,2654,2659,2664,2669],{"type":597,"tag":807,"props":2650,"children":2651},{},[2652],{"type":603,"value":2653},"力道 身法 元气  (力量 敏捷 智力)",{"type":597,"tag":807,"props":2655,"children":2656},{},[2657],{"type":603,"value":2658},"火焰 冰冷 闪电 混沌  物理  (伤害类型)",{"type":597,"tag":807,"props":2660,"children":2661},{},[2662],{"type":603,"value":2663},"攻击加成  近战加成    元素加成   投射物加成 范围效果",{"type":597,"tag":807,"props":2665,"children":2666},{},[2667],{"type":603,"value":2668},"光环   诅咒",{"type":597,"tag":807,"props":2670,"children":2671},{},[2672],{"type":603,"value":2673},"持续时间",{"type":597,"tag":1023,"props":2675,"children":2677},{"id":2676},"一级属性",[2678],{"type":603,"value":2676},{"type":603,"value":2680},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":2682,"children":2683},{},[2684,2701],{"type":597,"tag":1941,"props":2685,"children":2686},{},[2687],{"type":597,"tag":1945,"props":2688,"children":2689},{},[2690,2694,2697],{"type":597,"tag":1949,"props":2691,"children":2692},{},[2693],{"type":603,"value":1953},{"type":597,"tag":1949,"props":2695,"children":2696},{},[],{"type":597,"tag":1949,"props":2698,"children":2699},{},[2700],{"type":603,"value":1958},{"type":597,"tag":1963,"props":2702,"children":2703},{},[2704,2720,2736,2752,2768],{"type":597,"tag":1945,"props":2705,"children":2706},{},[2707,2712,2715],{"type":597,"tag":1970,"props":2708,"children":2709},{},[2710],{"type":603,"value":2711},"元气",{"type":597,"tag":1970,"props":2713,"children":2714},{},[],{"type":597,"tag":1970,"props":2716,"children":2717},{},[2718],{"type":603,"value":2719},"增加元气伤害的1%   增加1点护甲",{"type":597,"tag":1945,"props":2721,"children":2722},{},[2723,2728,2731],{"type":597,"tag":1970,"props":2724,"children":2725},{},[2726],{"type":603,"value":2727},"力道",{"type":597,"tag":1970,"props":2729,"children":2730},{},[],{"type":597,"tag":1970,"props":2732,"children":2733},{},[2734],{"type":603,"value":2735},"增加力道伤害的1%   增加1点护甲",{"type":597,"tag":1945,"props":2737,"children":2738},{},[2739,2744,2747],{"type":597,"tag":1970,"props":2740,"children":2741},{},[2742],{"type":603,"value":2743},"身法",{"type":597,"tag":1970,"props":2745,"children":2746},{},[],{"type":597,"tag":1970,"props":2748,"children":2749},{},[2750],{"type":603,"value":2751},"增加身法伤害的1%   增加0.1全抗",{"type":597,"tag":1945,"props":2753,"children":2754},{},[2755,2760,2763],{"type":597,"tag":1970,"props":2756,"children":2757},{},[2758],{"type":603,"value":2759},"体质",{"type":597,"tag":1970,"props":2761,"children":2762},{},[],{"type":597,"tag":1970,"props":2764,"children":2765},{},[2766],{"type":603,"value":2767},"10点气血值",{"type":597,"tag":1945,"props":2769,"children":2770},{},[2771,2776,2779],{"type":597,"tag":1970,"props":2772,"children":2773},{},[2774],{"type":603,"value":2775},"根骨",{"type":597,"tag":1970,"props":2777,"children":2778},{},[],{"type":597,"tag":1970,"props":2780,"children":2781},{},[2782],{"type":603,"value":2783},"5点内力值",{"type":597,"tag":1023,"props":2785,"children":2787},{"id":2786},"二级属性",[2788],{"type":603,"value":2786},{"type":603,"value":2790},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":2792,"children":2793},{},[2794,2809],{"type":597,"tag":1941,"props":2795,"children":2796},{},[2797],{"type":597,"tag":1945,"props":2798,"children":2799},{},[2800,2803,2806],{"type":597,"tag":1949,"props":2801,"children":2802},{},[],{"type":597,"tag":1949,"props":2804,"children":2805},{},[],{"type":597,"tag":1949,"props":2807,"children":2808},{},[],{"type":597,"tag":1963,"props":2810,"children":2811},{},[2812,2824],{"type":597,"tag":1945,"props":2813,"children":2814},{},[2815,2818,2821],{"type":597,"tag":1970,"props":2816,"children":2817},{},[],{"type":597,"tag":1970,"props":2819,"children":2820},{},[],{"type":597,"tag":1970,"props":2822,"children":2823},{},[],{"type":597,"tag":1945,"props":2825,"children":2826},{},[2827,2830,2833],{"type":597,"tag":1970,"props":2828,"children":2829},{},[],{"type":597,"tag":1970,"props":2831,"children":2832},{},[],{"type":597,"tag":1970,"props":2834,"children":2835},{},[],{"title":591,"searchDepth":787,"depth":787,"links":2837},[2838,2839,2840,2841,2842],{"id":1931,"depth":787,"text":1931},{"id":2140,"depth":787,"text":2140},{"id":2273,"depth":787,"text":2273},{"id":2402,"depth":787,"text":2402},{"id":2638,"depth":787,"text":2638,"children":2843},[2844,2845],{"id":2676,"depth":1530,"text":2676},{"id":2786,"depth":1530,"text":2786},"content:gyj:2022-12-15-人物属性.md","gyj/2022-12-15-人物属性.md","2022-12-15",{"_path":232,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":231,"description":2850,"body":2851,"_type":791,"_id":3069,"_source":793,"_file":3070,"_extension":795,"date":3071},"养殖动物\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n动物名称副产品猪猪尾巴牛牛奶鸡鸡蛋羊羊毛兔子兔脚鸭子鸭蛋建筑\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n建筑名称低级食槽中级食槽高级食槽",{"type":594,"children":2852,"toc":3067},[2853],{"type":597,"tag":803,"props":2854,"children":2855},{},[2856,2983],{"type":597,"tag":807,"props":2857,"children":2858},{},[2859,2861,2862],{"type":603,"value":2860},"养殖动物",{"type":603,"value":2144},{"type":597,"tag":1937,"props":2863,"children":2864},{},[2865,2884],{"type":597,"tag":1941,"props":2866,"children":2867},{},[2868],{"type":597,"tag":1945,"props":2869,"children":2870},{},[2871,2876,2881],{"type":597,"tag":1949,"props":2872,"children":2873},{},[2874],{"type":603,"value":2875},"动物名称",{"type":597,"tag":1949,"props":2877,"children":2878},{},[2879],{"type":603,"value":2880},"副产品",{"type":597,"tag":1949,"props":2882,"children":2883},{},[],{"type":597,"tag":1963,"props":2885,"children":2886},{},[2887,2903,2919,2935,2951,2967],{"type":597,"tag":1945,"props":2888,"children":2889},{},[2890,2895,2900],{"type":597,"tag":1970,"props":2891,"children":2892},{},[2893],{"type":603,"value":2894},"猪",{"type":597,"tag":1970,"props":2896,"children":2897},{},[2898],{"type":603,"value":2899},"猪尾巴",{"type":597,"tag":1970,"props":2901,"children":2902},{},[],{"type":597,"tag":1945,"props":2904,"children":2905},{},[2906,2911,2916],{"type":597,"tag":1970,"props":2907,"children":2908},{},[2909],{"type":603,"value":2910},"牛",{"type":597,"tag":1970,"props":2912,"children":2913},{},[2914],{"type":603,"value":2915},"牛奶",{"type":597,"tag":1970,"props":2917,"children":2918},{},[],{"type":597,"tag":1945,"props":2920,"children":2921},{},[2922,2927,2932],{"type":597,"tag":1970,"props":2923,"children":2924},{},[2925],{"type":603,"value":2926},"鸡",{"type":597,"tag":1970,"props":2928,"children":2929},{},[2930],{"type":603,"value":2931},"鸡蛋",{"type":597,"tag":1970,"props":2933,"children":2934},{},[],{"type":597,"tag":1945,"props":2936,"children":2937},{},[2938,2943,2948],{"type":597,"tag":1970,"props":2939,"children":2940},{},[2941],{"type":603,"value":2942},"羊",{"type":597,"tag":1970,"props":2944,"children":2945},{},[2946],{"type":603,"value":2947},"羊毛",{"type":597,"tag":1970,"props":2949,"children":2950},{},[],{"type":597,"tag":1945,"props":2952,"children":2953},{},[2954,2959,2964],{"type":597,"tag":1970,"props":2955,"children":2956},{},[2957],{"type":603,"value":2958},"兔子",{"type":597,"tag":1970,"props":2960,"children":2961},{},[2962],{"type":603,"value":2963},"兔脚",{"type":597,"tag":1970,"props":2965,"children":2966},{},[],{"type":597,"tag":1945,"props":2968,"children":2969},{},[2970,2975,2980],{"type":597,"tag":1970,"props":2971,"children":2972},{},[2973],{"type":603,"value":2974},"鸭子",{"type":597,"tag":1970,"props":2976,"children":2977},{},[2978],{"type":603,"value":2979},"鸭蛋",{"type":597,"tag":1970,"props":2981,"children":2982},{},[],{"type":597,"tag":807,"props":2984,"children":2985},{},[2986,2988,2990],{"type":603,"value":2987},"建筑",{"type":603,"value":2989},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":2991,"children":2992},{},[2993,3010],{"type":597,"tag":1941,"props":2994,"children":2995},{},[2996],{"type":597,"tag":1945,"props":2997,"children":2998},{},[2999,3004,3007],{"type":597,"tag":1949,"props":3000,"children":3001},{},[3002],{"type":603,"value":3003},"建筑名称",{"type":597,"tag":1949,"props":3005,"children":3006},{},[],{"type":597,"tag":1949,"props":3008,"children":3009},{},[],{"type":597,"tag":1963,"props":3011,"children":3012},{},[3013,3027,3041,3055],{"type":597,"tag":1945,"props":3014,"children":3015},{},[3016,3021,3024],{"type":597,"tag":1970,"props":3017,"children":3018},{},[3019],{"type":603,"value":3020},"低级食槽",{"type":597,"tag":1970,"props":3022,"children":3023},{},[],{"type":597,"tag":1970,"props":3025,"children":3026},{},[],{"type":597,"tag":1945,"props":3028,"children":3029},{},[3030,3035,3038],{"type":597,"tag":1970,"props":3031,"children":3032},{},[3033],{"type":603,"value":3034},"中级食槽",{"type":597,"tag":1970,"props":3036,"children":3037},{},[],{"type":597,"tag":1970,"props":3039,"children":3040},{},[],{"type":597,"tag":1945,"props":3042,"children":3043},{},[3044,3049,3052],{"type":597,"tag":1970,"props":3045,"children":3046},{},[3047],{"type":603,"value":3048},"高级食槽",{"type":597,"tag":1970,"props":3050,"children":3051},{},[],{"type":597,"tag":1970,"props":3053,"children":3054},{},[],{"type":597,"tag":1945,"props":3056,"children":3057},{},[3058,3061,3064],{"type":597,"tag":1970,"props":3059,"children":3060},{},[],{"type":597,"tag":1970,"props":3062,"children":3063},{},[],{"type":597,"tag":1970,"props":3065,"children":3066},{},[],{"title":591,"searchDepth":787,"depth":787,"links":3068},[],"content:gyj:2022-12-01-养殖.md","gyj/2022-12-01-养殖.md","2022-12-01",{"_path":235,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":234,"description":591,"body":3073,"_type":791,"_id":3077,"_source":793,"_file":3078,"_extension":795,"date":3071},{"type":594,"children":3074,"toc":3075},[],{"title":591,"searchDepth":787,"depth":787,"links":3076},[],"content:gyj:2022-12-01-种植.md","gyj/2022-12-01-种植.md",{"_path":360,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":359,"description":3080,"body":3081,"_type":791,"_id":3431,"_source":793,"_file":3432,"_extension":795,"date":3433},"使用ja-netfilter激活IDEA 2022.2.1背景截止至2022年9月4日，最新的IDEA版本为2022.2.1，对于某些想体验最新版IDEA却暂时没法入正的开发者来说，不能体验新版非常遗憾。\n重置IDEA体验版的插件IDE Eval Resetter已经失效了，不过开发此插件的作者又开发出另一款工具ja-netfilter，但是文档中使用方法写的有些模糊，我就以我自己的使用经验分享给大家。此方法目前适用于IDEA 2022.2.1，更高的版本不保证适用，请注意时效。下载IDEA如果你已经安装了任意版本的IDEA，那么建议你先卸载并清除数据再安装，否则激活可能无效。官网下载IDEA",{"type":594,"children":3082,"toc":3416},[3083,3089,3094,3121,3128,3133,3139,3147,3157,3162,3172,3177,3187,3192,3204,3209,3216,3229,3236,3242,3253,3259,3268,3274,3287,3294,3305,3329,3334,3345,3351,3356,3369,3376,3381,3386,3392,3397,3403],{"type":597,"tag":857,"props":3084,"children":3086},{"id":3085},"使用ja-netfilter激活idea-202221",[3087],{"type":603,"value":3088},"使用ja-netfilter激活IDEA 2022.2.1",{"type":597,"tag":598,"props":3090,"children":3092},{"id":3091},"背景",[3093],{"type":603,"value":3091},{"type":597,"tag":606,"props":3095,"children":3096},{},[3097,3099,3102,3104,3110,3112,3119],{"type":603,"value":3098},"截止至2022年9月4日，最新的IDEA版本为2022.2.1，对于某些想体验最新版IDEA却暂时没法入正的开发者来说，不能体验新版非常遗憾。",{"type":597,"tag":1595,"props":3100,"children":3101},{},[],{"type":603,"value":3103},"\n重置IDEA体验版的插件",{"type":597,"tag":629,"props":3105,"children":3107},{"className":3106},[],[3108],{"type":603,"value":3109},"IDE Eval Resetter",{"type":603,"value":3111},"已经失效了，不过开发此插件的作者又开发出另一款工具",{"type":597,"tag":886,"props":3113,"children":3116},{"href":3114,"rel":3115},"https://gitee.com/ja-netfilter/ja-netfilter",[890],[3117],{"type":603,"value":3118},"ja-netfilter",{"type":603,"value":3120},"，但是文档中使用方法写的有些模糊，我就以我自己的使用经验分享给大家。",{"type":597,"tag":606,"props":3122,"children":3123},{},[3124],{"type":597,"tag":719,"props":3125,"children":3127},{"alt":591,"src":3126},"/images/2022-11-19-rider-po-jie/2084018-20220904174243771-2143320926.png",[],{"type":597,"tag":606,"props":3129,"children":3130},{},[3131],{"type":603,"value":3132},"此方法目前适用于IDEA 2022.2.1，更高的版本不保证适用，请注意时效。",{"type":597,"tag":598,"props":3134,"children":3136},{"id":3135},"下载idea",[3137],{"type":603,"value":3138},"下载IDEA",{"type":597,"tag":606,"props":3140,"children":3141},{},[3142],{"type":597,"tag":1080,"props":3143,"children":3144},{},[3145],{"type":603,"value":3146},"如果你已经安装了任意版本的IDEA，那么建议你先卸载并清除数据再安装，否则激活可能无效。",{"type":597,"tag":606,"props":3148,"children":3149},{},[3150],{"type":597,"tag":886,"props":3151,"children":3154},{"href":3152,"rel":3153},"https://www.jetbrains.com/zh-cn/idea/download/#section=windows",[890],[3155],{"type":603,"value":3156},"官网下载IDEA 2022.2.1",{"type":597,"tag":598,"props":3158,"children":3160},{"id":3159},"下载ja-netfilter",[3161],{"type":603,"value":3159},{"type":597,"tag":606,"props":3163,"children":3164},{},[3165],{"type":597,"tag":886,"props":3166,"children":3169},{"href":3167,"rel":3168},"https://zhile.io/2021/11/29/ja-netfilter-javaagent-lib.html",[890],[3170],{"type":603,"value":3171},"作者博客",{"type":597,"tag":606,"props":3173,"children":3174},{},[3175],{"type":603,"value":3176},"找最新版本的release下载即可",{"type":597,"tag":606,"props":3178,"children":3179},{},[3180],{"type":597,"tag":886,"props":3181,"children":3184},{"href":3182,"rel":3183},"https://gitee.com/ja-netfilter/ja-netfilter/releases",[890],[3185],{"type":603,"value":3186},"下载地址",{"type":597,"tag":598,"props":3188,"children":3190},{"id":3189},"使用ja-netfilter",[3191],{"type":603,"value":3189},{"type":597,"tag":606,"props":3193,"children":3194},{},[3195,3197,3202],{"type":603,"value":3196},"将下载好的",{"type":597,"tag":629,"props":3198,"children":3200},{"className":3199},[],[3201],{"type":603,"value":3118},{"type":603,"value":3203},"解压到磁盘，最好不要有空格，注意文件后期不能删除，所以请放在自己不会清理的位置。",{"type":597,"tag":606,"props":3205,"children":3206},{},[3207],{"type":603,"value":3208},"解压后是这样：",{"type":597,"tag":606,"props":3210,"children":3211},{},[3212],{"type":597,"tag":719,"props":3213,"children":3215},{"alt":591,"src":3214},"/images/2022-11-19-rider-po-jie/2084018-20220904174636805-1072454980.png",[],{"type":597,"tag":606,"props":3217,"children":3218},{},[3219,3221,3227],{"type":603,"value":3220},"解压后在ja-netfilter.jar同目录下应该会有一个",{"type":597,"tag":629,"props":3222,"children":3224},{"className":3223},[],[3225],{"type":603,"value":3226},"config",{"type":603,"value":3228},"文件夹，找到里面的几个配置文件进行修改。",{"type":597,"tag":606,"props":3230,"children":3231},{},[3232],{"type":597,"tag":719,"props":3233,"children":3235},{"alt":591,"src":3234},"/images/2022-11-19-rider-po-jie/2084018-20220904230435240-2001741988.png",[],{"type":597,"tag":1023,"props":3237,"children":3239},{"id":3238},"修改dnsconf",[3240],{"type":603,"value":3241},"修改dns.conf",{"type":597,"tag":621,"props":3243,"children":3248},{"className":3244,"code":3246,"language":3247,"meta":591},[3245],"language-ini","[DNS]\nEQUAL,jetbrains.com\n","ini",[3249],{"type":597,"tag":629,"props":3250,"children":3251},{"__ignoreMap":591},[3252],{"type":603,"value":3246},{"type":597,"tag":1023,"props":3254,"children":3256},{"id":3255},"修改urlconf",[3257],{"type":603,"value":3258},"修改url.conf",{"type":597,"tag":621,"props":3260,"children":3263},{"className":3261,"code":3262,"language":3247,"meta":591},[3245],"[URL]\nPREFIX,https://dbeaver.com/lmp/checkLicense\nPREFIX,https://store.smartgit.com/check\nPREFIX,https://account.jetbrains.com/lservice/rpc/validateKey.action\n",[3264],{"type":597,"tag":629,"props":3265,"children":3266},{"__ignoreMap":591},[3267],{"type":603,"value":3262},{"type":597,"tag":598,"props":3269,"children":3271},{"id":3270},"修改idea-vmoption文件",[3272],{"type":603,"value":3273},"修改IDEA VMOPTION文件",{"type":597,"tag":606,"props":3275,"children":3276},{},[3277,3279,3285],{"type":603,"value":3278},"找到IDEA安装目录,再进入bin目录，找到",{"type":597,"tag":629,"props":3280,"children":3282},{"className":3281},[],[3283],{"type":603,"value":3284},"idea64.exe.vmoptions",{"type":603,"value":3286},"文件，在最后一行添加",{"type":597,"tag":606,"props":3288,"children":3289},{},[3290],{"type":597,"tag":719,"props":3291,"children":3293},{"alt":591,"src":3292},"/images/2022-11-19-rider-po-jie/2084018-20220904174024356-819045091.png",[],{"type":597,"tag":621,"props":3295,"children":3300},{"className":3296,"code":3298,"language":3299,"meta":591},[3297],"language-x86asm","-javaagent:D:\\\\Tools\\\\ja-netfilter\\\\ja-netfilter.jar=jetbrains\n","x86asm",[3301],{"type":597,"tag":629,"props":3302,"children":3303},{"__ignoreMap":591},[3304],{"type":603,"value":3298},{"type":597,"tag":617,"props":3306,"children":3307},{},[3308],{"type":597,"tag":606,"props":3309,"children":3310},{},[3311,3313,3319,3321,3327],{"type":603,"value":3312},"此处需要根据你自己解压的路径去修改，路径中的斜杠使用",{"type":597,"tag":629,"props":3314,"children":3316},{"className":3315},[],[3317],{"type":603,"value":3318},"\\\\",{"type":603,"value":3320},"或者",{"type":597,"tag":629,"props":3322,"children":3324},{"className":3323},[],[3325],{"type":603,"value":3326},"/",{"type":603,"value":3328},"，建议路径中不要包含空格。",{"type":597,"tag":606,"props":3330,"children":3331},{},[3332],{"type":603,"value":3333},"完整的文件内容应该是这样的",{"type":597,"tag":621,"props":3335,"children":3340},{"className":3336,"code":3338,"language":3339,"meta":591},[3337],"language-diff","-Xms128m\n-Xmx750m\n-XX:ReservedCodeCacheSize=512m\n-XX:+UseG1GC\n-XX:SoftRefLRUPolicyMSPerMB=50\n-XX:CICompilerCount=2\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:-OmitStackTraceInFastThrow\n-XX:+IgnoreUnrecognizedVMOptions\n-ea\n-Dsun.io.useCanonCaches=false\n-Dsun.java2d.metal=true\n-Djdk.http.auth.tunneling.disabledSchemes=\"\"\n-Djdk.attach.allowAttachSelf=true\n-Djdk.module.illegalAccess.silent=true\n-Dkotlinx.coroutines.debug=off\n-javaagent:D:\\\\Tools\\\\ja-netfilter\\\\ja-netfilter.jar=jetbrains\n","diff",[3341],{"type":597,"tag":629,"props":3342,"children":3343},{"__ignoreMap":591},[3344],{"type":603,"value":3338},{"type":597,"tag":598,"props":3346,"children":3348},{"id":3347},"激活idea",[3349],{"type":603,"value":3350},"激活IDEA",{"type":597,"tag":606,"props":3352,"children":3353},{},[3354],{"type":603,"value":3355},"打开IDEA，IDEA会提示你激活，选择输入激活码。",{"type":597,"tag":606,"props":3357,"children":3358},{},[3359,3361,3367],{"type":603,"value":3360},"打开这个网站 ",{"type":597,"tag":886,"props":3362,"children":3365},{"href":3363,"rel":3364},"https://3.jetbra.in/",[890],[3366],{"type":603,"value":3363},{"type":603,"value":3368}," 等待片刻，选择一个可以访问的网站，然后找到IDEA的卡片选择复制激活码。",{"type":597,"tag":606,"props":3370,"children":3371},{},[3372],{"type":597,"tag":719,"props":3373,"children":3375},{"alt":591,"src":3374},"/images/2022-11-19-rider-po-jie/2084018-20220904173657931-1850766616.png",[],{"type":597,"tag":606,"props":3377,"children":3378},{},[3379],{"type":603,"value":3380},"填入到IDEA中，点击激活就完成了，不需要关心激活到期时间。",{"type":597,"tag":598,"props":3382,"children":3384},{"id":3383},"常见问题",[3385],{"type":603,"value":3383},{"type":597,"tag":1023,"props":3387,"children":3389},{"id":3388},"idea提示激活码无效-invalid-key",[3390],{"type":603,"value":3391},"IDEA提示激活码无效 Invalid key",{"type":597,"tag":606,"props":3393,"children":3394},{},[3395],{"type":603,"value":3396},"如果有登录账号，可以先退出账号试试，再不行就重装IDEA，我就是这么做的。",{"type":597,"tag":1023,"props":3398,"children":3400},{"id":3399},"idea无法启动-运行无反应",[3401],{"type":603,"value":3402},"IDEA无法启动 运行无反应",{"type":597,"tag":606,"props":3404,"children":3405},{},[3406,3408,3414],{"type":603,"value":3407},"看看任务管理器有没有",{"type":597,"tag":629,"props":3409,"children":3411},{"className":3410},[],[3412],{"type":603,"value":3413},"idea64.exe",{"type":603,"value":3415},"这个进程，有就把它关了。",{"title":591,"searchDepth":787,"depth":787,"links":3417},[3418,3419,3420,3421,3425,3426,3427],{"id":3091,"depth":787,"text":3091},{"id":3135,"depth":787,"text":3138},{"id":3159,"depth":787,"text":3159},{"id":3189,"depth":787,"text":3189,"children":3422},[3423,3424],{"id":3238,"depth":1530,"text":3241},{"id":3255,"depth":1530,"text":3258},{"id":3270,"depth":787,"text":3273},{"id":3347,"depth":787,"text":3350},{"id":3383,"depth":787,"text":3383,"children":3428},[3429,3430],{"id":3388,"depth":1530,"text":3391},{"id":3399,"depth":1530,"text":3402},"content:tool:2022-11-19-rider-po-jie.md","tool/2022-11-19-rider-po-jie.md","2022-11-19",{"_path":226,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":225,"description":3435,"body":3436,"_type":791,"_id":3851,"_source":793,"_file":3852,"_extension":795,"date":3853},"属性流放之路中，升级你能得到什么？所有人物升级所获得的都是一样的A每级+12最大生命B每级+2命中值C每级+3闪避值D每级+6最大魔力E每级+1天赋点人物有三大基础属性：力量，敏捷，智慧每10力量=5生命每5力量=1%近战攻击伤害每10敏捷=1%闪避值每1敏捷=2命中值每5智力=1%增加最大能量护盾每2智力=1魔力a)基本属性i.每秒1.75%最大魔力上限回复速度ii.每秒20%最大能量护盾的充能速度iii.拥有基础的53闪避值iv.基础爆击伤害：150%b)双持（双持的定义在于同时持有2把单手武器，仅限于单手剑，细剑，单手锤，单手斧，匕首，爪，魔杖。其中魔杖属于远程武器，无法跟其他武器同时持",{"type":594,"children":3437,"toc":3847},[3438,3442,3450,3455,3460,3465,3470,3475,3480,3488,3493,3498,3503,3508,3513,3518,3523,3528,3533,3538,3543,3548,3553,3558,3563,3568,3575,3580,3585,3590,3595,3600,3605,3610,3615,3620,3625,3630,3635,3640,3645,3650,3655,3660,3665,3670,3675,3680,3685,3692,3697,3702,3709,3714,3719,3723],{"type":597,"tag":1023,"props":3439,"children":3440},{"id":1953},[3441],{"type":603,"value":1953},{"type":597,"tag":606,"props":3443,"children":3444},{},[3445],{"type":597,"tag":1080,"props":3446,"children":3447},{},[3448],{"type":603,"value":3449},"流放之路中，升级你能得到什么？",{"type":597,"tag":606,"props":3451,"children":3452},{},[3453],{"type":603,"value":3454},"所有人物升级所获得的都是一样的",{"type":597,"tag":606,"props":3456,"children":3457},{},[3458],{"type":603,"value":3459},"A每级+12最大生命",{"type":597,"tag":606,"props":3461,"children":3462},{},[3463],{"type":603,"value":3464},"B每级+2命中值",{"type":597,"tag":606,"props":3466,"children":3467},{},[3468],{"type":603,"value":3469},"C每级+3闪避值",{"type":597,"tag":606,"props":3471,"children":3472},{},[3473],{"type":603,"value":3474},"D每级+6最大魔力",{"type":597,"tag":606,"props":3476,"children":3477},{},[3478],{"type":603,"value":3479},"E每级+1天赋点",{"type":597,"tag":606,"props":3481,"children":3482},{},[3483],{"type":597,"tag":1080,"props":3484,"children":3485},{},[3486],{"type":603,"value":3487},"人物有三大基础属性：力量，敏捷，智慧",{"type":597,"tag":606,"props":3489,"children":3490},{},[3491],{"type":603,"value":3492},"每10力量=5生命",{"type":597,"tag":606,"props":3494,"children":3495},{},[3496],{"type":603,"value":3497},"每5力量=1%近战攻击伤害",{"type":597,"tag":606,"props":3499,"children":3500},{},[3501],{"type":603,"value":3502},"每10敏捷=1%闪避值",{"type":597,"tag":606,"props":3504,"children":3505},{},[3506],{"type":603,"value":3507},"每1敏捷=2命中值",{"type":597,"tag":606,"props":3509,"children":3510},{},[3511],{"type":603,"value":3512},"每5智力=1%增加最大能量护盾",{"type":597,"tag":606,"props":3514,"children":3515},{},[3516],{"type":603,"value":3517},"每2智力=1魔力",{"type":597,"tag":606,"props":3519,"children":3520},{},[3521],{"type":603,"value":3522},"a)基本属性",{"type":597,"tag":606,"props":3524,"children":3525},{},[3526],{"type":603,"value":3527},"i.每秒1.75%最大魔力上限回复速度",{"type":597,"tag":606,"props":3529,"children":3530},{},[3531],{"type":603,"value":3532},"ii.每秒20%最大能量护盾的充能速度",{"type":597,"tag":606,"props":3534,"children":3535},{},[3536],{"type":603,"value":3537},"iii.拥有基础的53闪避值",{"type":597,"tag":606,"props":3539,"children":3540},{},[3541],{"type":603,"value":3542},"iv.基础爆击伤害：150%",{"type":597,"tag":606,"props":3544,"children":3545},{},[3546],{"type":603,"value":3547},"b)双持（双持的定义在于同时持有2把单手武器，仅限于单手剑，细剑，单手锤，单手斧，匕首，爪，魔杖。其中魔杖属于远程武器，无法跟其他武器同时持有）",{"type":597,"tag":606,"props":3549,"children":3550},{},[3551],{"type":603,"value":3552},"i.10%更多攻击速度",{"type":597,"tag":606,"props":3554,"children":3555},{},[3556],{"type":603,"value":3557},"ii.15%格挡",{"type":597,"tag":606,"props":3559,"children":3560},{},[3561],{"type":603,"value":3562},"iii.20%更多物理攻击伤害",{"type":597,"tag":606,"props":3564,"children":3565},{},[3566],{"type":603,"value":3567},"c)能量球（看图）",{"type":597,"tag":606,"props":3569,"children":3570},{},[3571],{"type":597,"tag":719,"props":3572,"children":3574},{"alt":591,"src":3573},"/images/2022-11-17-liufangzhilu/image002_S.jpg",[],{"type":597,"tag":606,"props":3576,"children":3577},{},[3578],{"type":603,"value":3579},"d)基础最大值（以下数值都可能被一些暗金装备，天赋，进阶所改变）",{"type":597,"tag":606,"props":3581,"children":3582},{},[3583],{"type":603,"value":3584},"i.每秒20%最大生命偷取速率",{"type":597,"tag":606,"props":3586,"children":3587},{},[3588],{"type":603,"value":3589},"ii.每秒20%最大魔力偷取速率",{"type":597,"tag":606,"props":3591,"children":3592},{},[3593],{"type":603,"value":3594},"iii.75%最大格挡值",{"type":597,"tag":606,"props":3596,"children":3597},{},[3598],{"type":603,"value":3599},"iv.75%最大混沌抗性上限",{"type":597,"tag":606,"props":3601,"children":3602},{},[3603],{"type":603,"value":3604},"v.75%最大冰霜抗性上限",{"type":597,"tag":606,"props":3606,"children":3607},{},[3608],{"type":603,"value":3609},"vi.75%最大火焰抗性上限",{"type":597,"tag":606,"props":3611,"children":3612},{},[3613],{"type":603,"value":3614},"vii.75%最大闪电抗性上限",{"type":597,"tag":606,"props":3616,"children":3617},{},[3618],{"type":603,"value":3619},"viii.最多叠加20层腐化之血状态",{"type":597,"tag":606,"props":3621,"children":3622},{},[3623],{"type":603,"value":3624},"ix.最多5层爆炸箭矢",{"type":597,"tag":606,"props":3626,"children":3627},{},[3628],{"type":603,"value":3629},"x.最多75%攻击躲避几率",{"type":597,"tag":606,"props":3631,"children":3632},{},[3633],{"type":603,"value":3634},"xi.最多75%法术躲避几率",{"type":597,"tag":606,"props":3636,"children":3637},{},[3638],{"type":603,"value":3639},"xii.闪避几率不会低于5%，也不会高于95%（闪避不同于躲避）",{"type":597,"tag":606,"props":3641,"children":3642},{},[3643],{"type":603,"value":3644},"xiii.最大90%物理伤害减免",{"type":597,"tag":606,"props":3646,"children":3647},{},[3648],{"type":603,"value":3649},"xiv.可拥有3个陷阱",{"type":597,"tag":606,"props":3651,"children":3652},{},[3653],{"type":603,"value":3654},"xv.可拥有5个地雷",{"type":597,"tag":606,"props":3656,"children":3657},{},[3658],{"type":603,"value":3659},"xvi.可召唤1个图腾",{"type":597,"tag":1023,"props":3661,"children":3663},{"id":3662},"伤害公式",[3664],{"type":603,"value":3662},{"type":597,"tag":606,"props":3666,"children":3667},{},[3668],{"type":603,"value":3669},"闪避是角色在受到攻击前的第一层防御形式，闪避会增加角色完全避免受到攻击的几率。与护甲和能量护盾一样，闪避是流放之路的三大基本防御形式之一。",{"type":597,"tag":606,"props":3671,"children":3672},{},[3673],{"type":603,"value":3674},"所有人物的基础闪避将以53点为开始，每级额外获得3点闪避。人物在一级时，将具有56点闪避，在100级时有353点闪避的基础值。",{"type":597,"tag":606,"props":3676,"children":3677},{},[3678],{"type":603,"value":3679},"敏捷也能够提供闪避奖励。每增加5点敏捷，闪避将提高1%。5的非整数将四舍五入到最接近的5的整数。",{"type":597,"tag":606,"props":3681,"children":3682},{},[3683],{"type":603,"value":3684},"闪避除了可以规避伤害，也可以规避其他有害影响，比如异常状态和眩晕。但是只能闪避近战和远程攻击，而法术则会自动命中。而闪避攻击的几率是根据防御者的闪避与攻击者的命中相比得出的。",{"type":597,"tag":606,"props":3686,"children":3687},{},[3688],{"type":597,"tag":719,"props":3689,"children":3691},{"alt":591,"src":3690},"/images/2022-11-17-liufangzhilu/1668611975000.png",[],{"type":597,"tag":606,"props":3693,"children":3694},{},[3695],{"type":603,"value":3696},"机制公式：命中率的范围：5%—95%。法术没有命中的机制，不受命中的影响，因为闪避不是对应法术对应的防御措施，也因为不会对法术产生影响，所以法术是默认必中的。（但也有办法: 躲避法术。请注意躲避和闪避的区别！）",{"type":597,"tag":606,"props":3698,"children":3699},{},[3700],{"type":603,"value":3701},"公式一：",{"type":597,"tag":606,"props":3703,"children":3704},{},[3705],{"type":597,"tag":719,"props":3706,"children":3708},{"alt":591,"src":3707},"/images/2022-11-17-liufangzhilu/c041a4e6555bb73579e6ba5db93b72d8.png",[],{"type":597,"tag":606,"props":3710,"children":3711},{},[3712],{"type":603,"value":3713},"公式二：",{"type":597,"tag":606,"props":3715,"children":3716},{},[3717],{"type":603,"value":3718},"实际命中率 = min{ max( 理论命中率 , 0.05) , 1 }。",{"type":597,"tag":3720,"props":3721,"children":3722},"hr",{},[],{"type":597,"tag":1321,"props":3724,"children":3725},{},[3726,3749,3771,3793,3815,3825],{"type":597,"tag":807,"props":3727,"children":3728},{},[3729,3736,3743],{"type":597,"tag":886,"props":3730,"children":3733},{"href":3731,"rel":3732},"https://www.thisisdb.com/wd/172751.html",[890],[3734],{"type":603,"value":3735},"流放之路伤害机制介绍 伤害怎么计算-《流放之路》s13新的诅咒机制有什么 s13新诅咒机制介绍 - DB游戏网 (",{"type":597,"tag":886,"props":3737,"children":3740},{"href":3738,"rel":3739},"http://thisisdb.com",[890],[3741],{"type":603,"value":3742},"thisisdb.com",{"type":597,"tag":886,"props":3744,"children":3746},{"href":3731,"rel":3745},[890],[3747],{"type":603,"value":3748},")",{"type":597,"tag":807,"props":3750,"children":3751},{},[3752,3759,3766],{"type":597,"tag":886,"props":3753,"children":3756},{"href":3754,"rel":3755},"https://gl.ali213.net/html/2017-8/187449.html",[890],[3757],{"type":603,"value":3758},"流放之路技能伤害计算公式一览 流放之路技能伤害怎么计算 法术类-游侠网 (",{"type":597,"tag":886,"props":3760,"children":3763},{"href":3761,"rel":3762},"http://ali213.net",[890],[3764],{"type":603,"value":3765},"ali213.net",{"type":597,"tag":886,"props":3767,"children":3769},{"href":3754,"rel":3768},[890],[3770],{"type":603,"value":3748},{"type":597,"tag":807,"props":3772,"children":3773},{},[3774,3781,3788],{"type":597,"tag":886,"props":3775,"children":3778},{"href":3776,"rel":3777},"https://www.bilibili.com/read/cv14058447/",[890],[3779],{"type":603,"value":3780},"《流放之路》暴击和暴击伤害解析 - 哔哩哔哩 (",{"type":597,"tag":886,"props":3782,"children":3785},{"href":3783,"rel":3784},"http://bilibili.com",[890],[3786],{"type":603,"value":3787},"bilibili.com",{"type":597,"tag":886,"props":3789,"children":3791},{"href":3776,"rel":3790},[890],[3792],{"type":603,"value":3748},{"type":597,"tag":807,"props":3794,"children":3795},{},[3796,3803,3810],{"type":597,"tag":886,"props":3797,"children":3800},{"href":3798,"rel":3799},"https://view.inews.qq.com/a/20220104A064SX00",[890],[3801],{"type":603,"value":3802},"流放之路POE丨各类防御机制，浅谈各类防御机制的作用 (",{"type":597,"tag":886,"props":3804,"children":3807},{"href":3805,"rel":3806},"http://qq.com",[890],[3808],{"type":603,"value":3809},"qq.com",{"type":597,"tag":886,"props":3811,"children":3813},{"href":3798,"rel":3812},[890],[3814],{"type":603,"value":3748},{"type":597,"tag":807,"props":3816,"children":3817},{},[3818],{"type":597,"tag":886,"props":3819,"children":3822},{"href":3820,"rel":3821},"https://www.18183.com/zqnews/201909/2391993.html",[890],[3823],{"type":603,"value":3824},"流放之路伤害机制介绍_18183.com",{"type":597,"tag":807,"props":3826,"children":3827},{},[3828,3835,3842],{"type":597,"tag":886,"props":3829,"children":3832},{"href":3830,"rel":3831},"https://www.ahjmgzs.com/yxgl/692583.html",[890],[3833],{"type":603,"value":3834},"流放之路攻击伤害和物理伤害(流放之路伤害类型)-金芒果软件网 (",{"type":597,"tag":886,"props":3836,"children":3839},{"href":3837,"rel":3838},"http://ahjmgzs.com",[890],[3840],{"type":603,"value":3841},"ahjmgzs.com",{"type":597,"tag":886,"props":3843,"children":3845},{"href":3830,"rel":3844},[890],[3846],{"type":603,"value":3748},{"title":591,"searchDepth":787,"depth":787,"links":3848},[3849,3850],{"id":1953,"depth":1530,"text":1953},{"id":3662,"depth":1530,"text":3662},"content:gyj:2022-11-17-liufangzhilu.md","gyj/2022-11-17-liufangzhilu.md","2022-11-17",{"_path":229,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":228,"description":3855,"body":3856,"_type":791,"_id":4406,"_source":793,"_file":4407,"_extension":795,"date":3853},"正派门派声望很高,可以顶替门派掌门..反派门派可以欺师灭祖,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n必要建筑功用说明任务大厅接取任务,如果是帮主,可以查看委托委托(),接取修炼室修炼心法的地方门派商店就是门派卖东西的地方策略府研究门派策略的地方,代替建筑升级加成研究藏经阁玩家可以写秘籍,和学习秘籍演武场升级技能等级的地方角色属性\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n任务\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n任务类型内容效果押镖送货增加声望,增加金钱战斗增加声望,装备材料求助索要物资增加声望弟子培养差事\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":594,"children":3857,"toc":4404},[3858,3863,3868,3869,3994,4000,4001,4046,4051,4053,4130,4135,4136,4206,4211,4212],{"type":597,"tag":606,"props":3859,"children":3860},{},[3861],{"type":603,"value":3862},"正派门派声望很高,可以顶替门派掌门..",{"type":597,"tag":606,"props":3864,"children":3865},{},[3866],{"type":603,"value":3867},"反派门派可以欺师灭祖,",{"type":603,"value":2144},{"type":597,"tag":1937,"props":3870,"children":3871},{},[3872,3892],{"type":597,"tag":1941,"props":3873,"children":3874},{},[3875],{"type":597,"tag":1945,"props":3876,"children":3877},{},[3878,3883,3888],{"type":597,"tag":1949,"props":3879,"children":3880},{},[3881],{"type":603,"value":3882},"必要建筑",{"type":597,"tag":1949,"props":3884,"children":3885},{},[3886],{"type":603,"value":3887},"功用",{"type":597,"tag":1949,"props":3889,"children":3890},{},[3891],{"type":603,"value":1958},{"type":597,"tag":1963,"props":3893,"children":3894},{},[3895,3913,3929,3945,3962,3978],{"type":597,"tag":1945,"props":3896,"children":3897},{},[3898,3903,3908],{"type":597,"tag":1970,"props":3899,"children":3900},{},[3901],{"type":603,"value":3902},"任务大厅",{"type":597,"tag":1970,"props":3904,"children":3905},{},[3906],{"type":603,"value":3907},"接取任务,如果是帮主,可以查看委托",{"type":597,"tag":1970,"props":3909,"children":3910},{},[3911],{"type":603,"value":3912},"委托(),接取",{"type":597,"tag":1945,"props":3914,"children":3915},{},[3916,3921,3926],{"type":597,"tag":1970,"props":3917,"children":3918},{},[3919],{"type":603,"value":3920},"修炼室",{"type":597,"tag":1970,"props":3922,"children":3923},{},[3924],{"type":603,"value":3925},"修炼心法的地方",{"type":597,"tag":1970,"props":3927,"children":3928},{},[],{"type":597,"tag":1945,"props":3930,"children":3931},{},[3932,3937,3942],{"type":597,"tag":1970,"props":3933,"children":3934},{},[3935],{"type":603,"value":3936},"门派商店",{"type":597,"tag":1970,"props":3938,"children":3939},{},[3940],{"type":603,"value":3941},"就是门派卖东西的地方",{"type":597,"tag":1970,"props":3943,"children":3944},{},[],{"type":597,"tag":1945,"props":3946,"children":3947},{},[3948,3952,3957],{"type":597,"tag":1970,"props":3949,"children":3950},{},[3951],{"type":603,"value":2597},{"type":597,"tag":1970,"props":3953,"children":3954},{},[3955],{"type":603,"value":3956},"研究门派策略的地方,代替建筑升级加成",{"type":597,"tag":1970,"props":3958,"children":3959},{},[3960],{"type":603,"value":3961},"研究",{"type":597,"tag":1945,"props":3963,"children":3964},{},[3965,3970,3975],{"type":597,"tag":1970,"props":3966,"children":3967},{},[3968],{"type":603,"value":3969},"藏经阁",{"type":597,"tag":1970,"props":3971,"children":3972},{},[3973],{"type":603,"value":3974},"玩家可以写秘籍,和学习秘籍",{"type":597,"tag":1970,"props":3976,"children":3977},{},[],{"type":597,"tag":1945,"props":3979,"children":3980},{},[3981,3986,3991],{"type":597,"tag":1970,"props":3982,"children":3983},{},[3984],{"type":603,"value":3985},"演武场",{"type":597,"tag":1970,"props":3987,"children":3988},{},[3989],{"type":603,"value":3990},"升级技能等级的地方",{"type":597,"tag":1970,"props":3992,"children":3993},{},[],{"type":597,"tag":3995,"props":3996,"children":3998},"h4",{"id":3997},"角色属性",[3999],{"type":603,"value":3997},{"type":603,"value":2790},{"type":597,"tag":1937,"props":4002,"children":4003},{},[4004,4019],{"type":597,"tag":1941,"props":4005,"children":4006},{},[4007],{"type":597,"tag":1945,"props":4008,"children":4009},{},[4010,4013,4016],{"type":597,"tag":1949,"props":4011,"children":4012},{},[],{"type":597,"tag":1949,"props":4014,"children":4015},{},[],{"type":597,"tag":1949,"props":4017,"children":4018},{},[],{"type":597,"tag":1963,"props":4020,"children":4021},{},[4022,4034],{"type":597,"tag":1945,"props":4023,"children":4024},{},[4025,4028,4031],{"type":597,"tag":1970,"props":4026,"children":4027},{},[],{"type":597,"tag":1970,"props":4029,"children":4030},{},[],{"type":597,"tag":1970,"props":4032,"children":4033},{},[],{"type":597,"tag":1945,"props":4035,"children":4036},{},[4037,4040,4043],{"type":597,"tag":1970,"props":4038,"children":4039},{},[],{"type":597,"tag":1970,"props":4041,"children":4042},{},[],{"type":597,"tag":1970,"props":4044,"children":4045},{},[],{"type":597,"tag":3995,"props":4047,"children":4049},{"id":4048},"任务",[4050],{"type":603,"value":4048},{"type":603,"value":4052},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":4054,"children":4055},{},[4056,4077],{"type":597,"tag":1941,"props":4057,"children":4058},{},[4059],{"type":597,"tag":1945,"props":4060,"children":4061},{},[4062,4067,4072],{"type":597,"tag":1949,"props":4063,"children":4064},{},[4065],{"type":603,"value":4066},"任务类型",{"type":597,"tag":1949,"props":4068,"children":4069},{},[4070],{"type":603,"value":4071},"内容",{"type":597,"tag":1949,"props":4073,"children":4074},{},[4075],{"type":603,"value":4076},"效果",{"type":597,"tag":1963,"props":4078,"children":4079},{},[4080,4096,4112],{"type":597,"tag":1945,"props":4081,"children":4082},{},[4083,4088,4091],{"type":597,"tag":1970,"props":4084,"children":4085},{},[4086],{"type":603,"value":4087},"押镖送货",{"type":597,"tag":1970,"props":4089,"children":4090},{},[],{"type":597,"tag":1970,"props":4092,"children":4093},{},[4094],{"type":603,"value":4095},"增加声望,增加金钱",{"type":597,"tag":1945,"props":4097,"children":4098},{},[4099,4104,4107],{"type":597,"tag":1970,"props":4100,"children":4101},{},[4102],{"type":603,"value":4103},"战斗",{"type":597,"tag":1970,"props":4105,"children":4106},{},[],{"type":597,"tag":1970,"props":4108,"children":4109},{},[4110],{"type":603,"value":4111},"增加声望,装备材料",{"type":597,"tag":1945,"props":4113,"children":4114},{},[4115,4120,4125],{"type":597,"tag":1970,"props":4116,"children":4117},{},[4118],{"type":603,"value":4119},"求助",{"type":597,"tag":1970,"props":4121,"children":4122},{},[4123],{"type":603,"value":4124},"索要物资",{"type":597,"tag":1970,"props":4126,"children":4127},{},[4128],{"type":603,"value":4129},"增加声望",{"type":597,"tag":3995,"props":4131,"children":4133},{"id":4132},"弟子培养差事",[4134],{"type":603,"value":4132},{"type":603,"value":4052},{"type":597,"tag":1937,"props":4137,"children":4138},{},[4139,4159],{"type":597,"tag":1941,"props":4140,"children":4141},{},[4142],{"type":597,"tag":1945,"props":4143,"children":4144},{},[4145,4150,4155],{"type":597,"tag":1949,"props":4146,"children":4147},{},[4148],{"type":603,"value":4149},"任务名称",{"type":597,"tag":1949,"props":4151,"children":4152},{},[4153],{"type":603,"value":4154},"花费时间",{"type":597,"tag":1949,"props":4156,"children":4157},{},[4158],{"type":603,"value":4076},{"type":597,"tag":1963,"props":4160,"children":4161},{},[4162,4178,4192],{"type":597,"tag":1945,"props":4163,"children":4164},{},[4165,4170,4173],{"type":597,"tag":1970,"props":4166,"children":4167},{},[4168],{"type":603,"value":4169},"促进思辨",{"type":597,"tag":1970,"props":4171,"children":4172},{},[],{"type":597,"tag":1970,"props":4174,"children":4175},{},[4176],{"type":603,"value":4177},"人物经验+5%",{"type":597,"tag":1945,"props":4179,"children":4180},{},[4181,4184,4187],{"type":597,"tag":1970,"props":4182,"children":4183},{},[],{"type":597,"tag":1970,"props":4185,"children":4186},{},[],{"type":597,"tag":1970,"props":4188,"children":4189},{},[4190],{"type":603,"value":4191},"学习新技能",{"type":597,"tag":1945,"props":4193,"children":4194},{},[4195,4198,4201],{"type":597,"tag":1970,"props":4196,"children":4197},{},[],{"type":597,"tag":1970,"props":4199,"children":4200},{},[],{"type":597,"tag":1970,"props":4202,"children":4203},{},[4204],{"type":603,"value":4205},"技能经验+5%",{"type":597,"tag":3995,"props":4207,"children":4209},{"id":4208},"门派内差事",[4210],{"type":603,"value":4208},{"type":603,"value":1935},{"type":597,"tag":1937,"props":4213,"children":4214},{},[4215,4233],{"type":597,"tag":1941,"props":4216,"children":4217},{},[4218],{"type":597,"tag":1945,"props":4219,"children":4220},{},[4221,4225,4229],{"type":597,"tag":1949,"props":4222,"children":4223},{},[4224],{"type":603,"value":4149},{"type":597,"tag":1949,"props":4226,"children":4227},{},[4228],{"type":603,"value":4154},{"type":597,"tag":1949,"props":4230,"children":4231},{},[4232],{"type":603,"value":4076},{"type":597,"tag":1963,"props":4234,"children":4235},{},[4236,4250,4266,4282,4298,4312,4326,4340,4356,4372,4388],{"type":597,"tag":1945,"props":4237,"children":4238},{},[4239,4244,4247],{"type":597,"tag":1970,"props":4240,"children":4241},{},[4242],{"type":603,"value":4243},"招募",{"type":597,"tag":1970,"props":4245,"children":4246},{},[],{"type":597,"tag":1970,"props":4248,"children":4249},{},[],{"type":597,"tag":1945,"props":4251,"children":4252},{},[4253,4258,4261],{"type":597,"tag":1970,"props":4254,"children":4255},{},[4256],{"type":603,"value":4257},"助工",{"type":597,"tag":1970,"props":4259,"children":4260},{},[],{"type":597,"tag":1970,"props":4262,"children":4263},{},[4264],{"type":603,"value":4265},"工坊产值+30%",{"type":597,"tag":1945,"props":4267,"children":4268},{},[4269,4274,4277],{"type":597,"tag":1970,"props":4270,"children":4271},{},[4272],{"type":603,"value":4273},"助医",{"type":597,"tag":1970,"props":4275,"children":4276},{},[],{"type":597,"tag":1970,"props":4278,"children":4279},{},[4280],{"type":603,"value":4281},"炼丹产值+30%",{"type":597,"tag":1945,"props":4283,"children":4284},{},[4285,4290,4293],{"type":597,"tag":1970,"props":4286,"children":4287},{},[4288],{"type":603,"value":4289},"助农",{"type":597,"tag":1970,"props":4291,"children":4292},{},[],{"type":597,"tag":1970,"props":4294,"children":4295},{},[4296],{"type":603,"value":4297},"粮食产值+30%",{"type":597,"tag":1945,"props":4299,"children":4300},{},[4301,4304,4307],{"type":597,"tag":1970,"props":4302,"children":4303},{},[],{"type":597,"tag":1970,"props":4305,"children":4306},{},[],{"type":597,"tag":1970,"props":4308,"children":4309},{},[4310],{"type":603,"value":4311},"采集药材+10%",{"type":597,"tag":1945,"props":4313,"children":4314},{},[4315,4318,4321],{"type":597,"tag":1970,"props":4316,"children":4317},{},[],{"type":597,"tag":1970,"props":4319,"children":4320},{},[],{"type":597,"tag":1970,"props":4322,"children":4323},{},[4324],{"type":603,"value":4325},"采集木材+10%",{"type":597,"tag":1945,"props":4327,"children":4328},{},[4329,4332,4335],{"type":597,"tag":1970,"props":4330,"children":4331},{},[],{"type":597,"tag":1970,"props":4333,"children":4334},{},[],{"type":597,"tag":1970,"props":4336,"children":4337},{},[4338],{"type":603,"value":4339},"采集矿产+10%",{"type":597,"tag":1945,"props":4341,"children":4342},{},[4343,4348,4351],{"type":597,"tag":1970,"props":4344,"children":4345},{},[4346],{"type":603,"value":4347},"开发黑市",{"type":597,"tag":1970,"props":4349,"children":4350},{},[],{"type":597,"tag":1970,"props":4352,"children":4353},{},[4354],{"type":603,"value":4355},"贸易影响+50%",{"type":597,"tag":1945,"props":4357,"children":4358},{},[4359,4364,4367],{"type":597,"tag":1970,"props":4360,"children":4361},{},[4362],{"type":603,"value":4363},"街市繁荣",{"type":597,"tag":1970,"props":4365,"children":4366},{},[],{"type":597,"tag":1970,"props":4368,"children":4369},{},[4370],{"type":603,"value":4371},"售卖收入+50%",{"type":597,"tag":1945,"props":4373,"children":4374},{},[4375,4380,4383],{"type":597,"tag":1970,"props":4376,"children":4377},{},[4378],{"type":603,"value":4379},"举孝廉",{"type":597,"tag":1970,"props":4381,"children":4382},{},[],{"type":597,"tag":1970,"props":4384,"children":4385},{},[4386],{"type":603,"value":4387},"满意度+10",{"type":597,"tag":1945,"props":4389,"children":4390},{},[4391,4396,4399],{"type":597,"tag":1970,"props":4392,"children":4393},{},[4394],{"type":603,"value":4395},"运权",{"type":597,"tag":1970,"props":4397,"children":4398},{},[],{"type":597,"tag":1970,"props":4400,"children":4401},{},[4402],{"type":603,"value":4403},"公共秩序+8",{"title":591,"searchDepth":787,"depth":787,"links":4405},[],"content:gyj:2022-11-17-sect.md","gyj/2022-11-17-sect.md",{"_path":223,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":222,"description":4409,"body":4410,"_type":791,"_id":4679,"_source":793,"_file":4680,"_extension":795,"date":4681},"天下霸图2时间观念一个月分4天，1日、10日、20日、30日，并不是天30，一个月份结算薪资4次，例如你的门派介面设定支薪10，总支薪是310元的 话，一个月的支出就是支薪1240元，也就是你必须在48个时辰内凑到1240元来维持支出。薪资门派的薪资调整其实是在设定弟子心情的基准底限，建议以原本设定支薪10就好，因为移动到别的地方的时候各定的基本设定都 是10，也不用调来调去，以5张脸来说，10只是中间普通的而已，这关系到什麼呢？关系到练武经验的最大上限，基准调越高，弟子能在武场练 的经验值能撑越高，但是投资比率太不敷出，所以还是建议10就好，学习力（後面会解说）3支蜡烛大约最高经验值上限可以",{"type":594,"children":4411,"toc":4675},[4412,4417,4422,4427,4432,4442,4447,4457,4462,4472,4477,4487,4492,4502,4506,4516,4521,4526,4531,4536,4541,4546,4551,4556,4561,4566,4571,4576,4581,4586,4591,4596,4601,4606,4611,4616,4621,4626,4631,4636,4641,4646,4665,4670],{"type":597,"tag":1023,"props":4413,"children":4415},{"id":4414},"天下霸图2",[4416],{"type":603,"value":4414},{"type":597,"tag":3995,"props":4418,"children":4420},{"id":4419},"时间观念",[4421],{"type":603,"value":4419},{"type":597,"tag":606,"props":4423,"children":4424},{},[4425],{"type":603,"value":4426},"一个月分4天，1日、10日、20日、30日，并不是天30，一个月份结算薪资4次，例如你的门派介面设定支薪10，总支薪是310元的 话，一个月的支出就是支薪1240元，也就是你必须在48个时辰内凑到1240元来维持支出。",{"type":597,"tag":3995,"props":4428,"children":4430},{"id":4429},"薪资",[4431],{"type":603,"value":4429},{"type":597,"tag":606,"props":4433,"children":4434},{},[4435,4437,4440],{"type":603,"value":4436},"门派的薪资调整其实是在设定弟子心情的基准底限，建议以原本设定支薪10就好，因为移动到别的地方的时候各定的基本设定都 是10，也不用调来调去，以5张脸来说，10只是中间普通的而已，这关系到什麼呢？关系到练武经验的最大上限，基准调越高，弟子能在武场练 的经验值能撑越高，但是投资比率太不敷出，所以还是建议10就好，学习力（後面会解说）3支蜡烛大约最高经验值上限可以学到7000才会喊不 爽，但是6000就开始变脸了，如果收学费制的话，这适用在快攻，因为没打算让原本的弟子打通关，後面新加入的弟子资质几乎都比原本的人 好，六力很快就能超过原本的人物，因为他们一出来只有长拳1XX多经验，等到他长拳练到3XXX经验值时臂力应该破400其他都破200，轻功要另 外练，收学费2块钱的话大约最高练武上限能到4000而已，想当然必须比较快换下一招练，六力提升比较正常，但是会有弟子一喊不爽就马上跑 掉的问题，比较之下，支薪10块钱一开始即使你没排练武行程给他他都不会不高兴，你调再高的薪资给他也都只是普通心情，心情在於练武成 效，最高效率就是领悟，只要给他领悟後，经验值从0到最高上限都是普通心情，超过最高上限他就会不爽，而你绝对有时间帮他换秘笈；好处 在於不怕讨伐受伤休息太久而不高兴，不怕没练到武不高兴，不怕有分舵後忘记调薪资而管理不方便，支薪10元练武所需成效最低底限50。 ",{"type":597,"tag":1595,"props":4438,"children":4439},{},[],{"type":603,"value":4441},"\n重点：10元起手，再借不难；先学会支薪10元，玩熟了之後再去研究调整薪资。",{"type":597,"tag":3995,"props":4443,"children":4445},{"id":4444},"弟子心情",[4446],{"type":603,"value":4444},{"type":597,"tag":606,"props":4448,"children":4449},{},[4450,4452,4455],{"type":603,"value":4451},"门派介面的脸和弟子个别人物情报的脸是不一样的，门派介面的脸是代表弟子基准心情底限及平均变化量（以月份为单位），弟 子心情代表其个人的该日心情（已日为单位），算是较细部的观察；主要是门派介面的基准底限不要太低的话，弟子不爽的缓冲时间就比较充 足，如果很在意想让弟子每天绿脸的话，不是加高他的练武成效（效果不好），而是加多他的领悟时间，在领悟室里所得练武经验值非常高， 但是领悟期间所得经验值没加六力，所以不要让他领悟出来，他快领悟出来的时候就帮他换掉，不要小看拿秘笈领悟，时间很短，可是那短短 几个时辰加的六力是最高的；弟子最快乐的绿脸时期大多是在刚拿到秘笈至领悟出来这短短的期间，因为很容易让该日练武成效破千，之後就 很难了，如果用收学费的，要让每日练武成效破2千甚至3千以上，就几乎都浸在练舞场和领悟室了，收入就要靠其他弟子来分担，所以就要另 外开个分舵了。 ",{"type":597,"tag":1595,"props":4453,"children":4454},{},[],{"type":603,"value":4456},"\n重点：心情不是看脸色的；常利用门派的情报介面看各人物的工作成效，是否保持练武成效50以上，如果没有，看蓝色条，如果都是蓝的就表 示他练武有成，想换别的秘笈了（10元很好起手，这之前他就会开始提示了）。",{"type":597,"tag":3995,"props":4458,"children":4460},{"id":4459},"学习力",[4461],{"type":603,"value":4459},{"type":597,"tag":606,"props":4463,"children":4464},{},[4465,4467,4470],{"type":603,"value":4466},"收人的时候除了看属性和特技，还要看他的学习力，他这是以六力为表示，臂力和腰力高的就表示拳法学习力高，不过这只是大 概，最准确的就是看他写秘笈有几根蜡烛（不是真的叫他去写秘笈），越少根表示所花时间越少，该项学习力越高，同理也可用领悟的方式查 看；其实这关系到基础武学和六力，基础武学越扎稳该项六力（如拳法要臂力和腰力）越高他的学习力就会越高，所以此代的学习力是可以成 长的。 ",{"type":597,"tag":1595,"props":4468,"children":4469},{},[],{"type":603,"value":4471},"\n重点：基础武学要扎稳啊；扎稳了自然该项所需六力就会相对提高，就方便练下一阶武功，也可提高下一阶武功的最高上限经验值；腿法最重 要，没铁矿产的第2要先著手掌法，因为没铁矿或许也没卖武器的民房，所以都只练腿掌法，等到有分舵才在分舵主攻兵器场，徒手武功在兵器场和兵器武功在徒手武场，所得练武经验值及练武意愿（最高练武经验上限）都会只剩1/4。",{"type":597,"tag":3995,"props":4473,"children":4475},{"id":4474},"工作时辰编排",[4476],{"type":603,"value":4474},{"type":597,"tag":606,"props":4478,"children":4479},{},[4480,4482,4485],{"type":603,"value":4481},"起初都是每个人各项设施一点，大约武场有3个的时候（只有6个人的话）才特别编排武场2点，等到有5个武场的时候才4练武3种 田3工作补强六力，或是练武3领悟2种田3工作2，尽量不要让弟子发呆就是了，先看哪些设施会卡人先补足；其实我觉得这地方最有学问，要靠 自己慢慢摸索才能领悟...... ",{"type":597,"tag":1595,"props":4483,"children":4484},{},[],{"type":603,"value":4486},"\n重点：每日情报资料更新後都要看弟子工作效率，白色色条表示发呆，空白色条表示行走，腿力过低的就增加他的行程点数比例以减少他的行走时间或是只让他在主殿附近工作。 \\",{"type":597,"tag":3995,"props":4488,"children":4490},{"id":4489},"设施",[4491],{"type":603,"value":4489},{"type":597,"tag":606,"props":4493,"children":4494},{},[4495,4497,4500],{"type":603,"value":4496},"一开场绝对要各项生产设施都建设（农田至少2，其他牧场、药园都要有，然後原料店要盖出来），不要急著建设武场，这边的重点 主要在原料店，每个产物每样工作都1点的话会比较平均，原料店要设定下一个预见设施的储存量，例如我下一个设施想盖武场需要500肉和200 药，那就要设定卖的储存量肉3000药3000,这样他会保留1000肉和1000药，如果是分舵主殿要12000肉8000木，那就设定肉15000木11000，其实 到了要开分舵的时候不只要这些啦，最少要4万现金和各2万资源再过去比较好；只有自己产地没有生产的才不打开设定，其他都要打开并且设 定好，我当初就是没看中这个，才都玩不起来，对了，一次交易量是1000，物资尽量平均卖，自己特产什麼该样物资就可以减少人手去挖，主 要是卖米肉药，其他贵重材料慢慢卖或是不卖，有需要再去开采，不过最好还是慢慢卖。 ",{"type":597,"tag":1595,"props":4498,"children":4499},{},[],{"type":603,"value":4501},"\n重点：原料店很重要，一定要尽早盖起来并且设定好，装备生产设施（冶锻场、织造房）等稳定後才开始盖并且才派人员工作。",{"type":597,"tag":3995,"props":4503,"children":4504},{"id":4103},[4505],{"type":603,"value":4103},{"type":597,"tag":606,"props":4507,"children":4508},{},[4509,4511,4514],{"type":603,"value":4510},"基础腿法长拳掌招防御（要练防3盘并且闪躲率高的）轻功都要练完才出战，掌门的左右护法要一个专练呐喊和防守自补血方针开 保护，一个帮补专掌法腿法消耗对方敏捷的方针开补血，掌门就让他变态攻击型吧，因为掌门大多是专武的特技，保护的那个要全身封印装 备......，不然即使是胖子一样备摸两下就趴，如果有练防3盘防守招（主要减免3盘伤害，只有两盘的话封印会有一盘没效用，就是致命破绽 了），全身穿封印，即使是瘦子也可挡，甚至不会失血......不知道是不是BUG，胖子跟瘦子好像是看损血比率，被打到一样都只剩两成血；为 什麼要基础武功都会了才出战？因为一开始低等盗匪不值得花时间去打，那等於偶而救济一下浪费时间（采集时间）毫无作用，等到都练好了 再开打声望要一下子满很简单，不管怎样最後还是会武功迟滞，回来练功导致声望降回还要重新打声望的。 ",{"type":597,"tag":1595,"props":4512,"children":4513},{},[],{"type":603,"value":4515},"\n重点：等到可以开打的时候，等累积3个同样任务（运标、救济、劫标那些都不用看，只看红剑图示），然後在白天看一下任务内容，等到晚上 再一次连续接，最後一场战斗如果有人失血过多的话要退一下补血，保持完好状态收场才不用花费休息时间。",{"type":597,"tag":3995,"props":4517,"children":4519},{"id":4518},"职位",[4520],{"type":603,"value":4518},{"type":597,"tag":606,"props":4522,"children":4523},{},[4524],{"type":603,"value":4525},"舵主的忠诚度和智慧影响该分舵(以下⼀样)弟⼦的忠诚度,健康和智慧影响⽣产,智慧和四⼤武功属性(攻击,防御,青⼯,暗器)影响练功,智慧和四⼒(内,臂,腰,腿)影响采集",{"type":597,"tag":606,"props":4527,"children":4528},{},[4529],{"type":603,"value":4530},"左堂主的智慧和四⼤武功属性(攻击,防御,青⼯,暗器)影响练功",{"type":597,"tag":606,"props":4532,"children":4533},{},[4534],{"type":603,"value":4535},"右堂主的智慧和四⼒(内,臂,腰,腿)影响采集",{"type":597,"tag":606,"props":4537,"children":4538},{},[4539],{"type":603,"value":4540},"被选为舵主忠诚+20左右堂主+10,取消则减之.",{"type":597,"tag":606,"props":4542,"children":4543},{},[4544],{"type":603,"value":4545},"|                       天下霸图2弟子特性一览表|\n|生产类特性|\n|深耕|产粮食腿力计算*3|\n|肥田|农田跟药铺等级+1(计算时)|\n|剥皮|皮革产能*2|\n|耐力|精力减少除以2|\n|工艺|铸造时内力计算*3|\n|快逢|织造时指力属性*3|\n|炼金|丹药产量*2|\n|辩矿|金矿、铁矿、木材产量*2|\n|探勘|金矿、铁矿、木材资源等级+1|\n|铁臂|挖金矿铁矿时计算臂力属性*3|\n|铁人|在厢房精力回覆加倍|\n|识药|计算药草时腰力属性*3|\n|活力|每天早上所有精力回复|\n|神笔|悟招跟写秘籍速度*200%|\n|聚财|有他在该分舵所有物品买价-20%卖价+50%|\n|战斗类特性|\n|狂奔|轻功受地形影响减少|延命|生命低于5%时恢复到最大生命的60%|\n|慧根|练武经验增加*2|色诱|都受到异性攻击时伤害力减少25%|\n|寻路|队伍移动+100|惩戒|当重击对手时下一招伤害*2|\n|养生|战斗中将康回复率*4|热血|受到伤害可以累加增加出招速度|\n|体健|战斗中六力回复率*2|金身|对所有负面状态免疫|\n|开窍|战斗的道的经验成以1.5|虐杀|击中对手时有30%机会瞬间减少对手25%健康|\n|刀敏|以更快的速度施展刀法|焚身|击中对手时有20%机会烧掉对手的6力|\n|剑灵|以更快的速度施展剑法|忍术|施展轻功无视高度影响|\n|棍通|以更快的速度施展棍法|羽化|施展轻功无须任何消耗|\n|快腿|以更快速度施展腿法|毒胆|对所有中毒免疫|\n|速拳|以更快的速度施展拳法|毒杀|当对手楚于异常状态时武功攻击力*1.5|\n|劲掌|以更快的速度施展掌法|自暴|当生命低于150时销号生命100点事下一招攻击+300|\n|武痴|所有武功重击率*2|魔身|除非发生重击否则不会受到任何伤害|\n|坚毅|对所有恐惧免疫|神打|除非受到大于最大健康10%的伤害否则不会受到任何伤害|\n|意志|对昏迷效果免疫| | |\n|反击|当被对手重击石会快速发出下一招武功| | |\n|求生|当生命低于20%时生命会以最大生命的5%回复持续6秒| | |\n|复仇|当生命小于30%时武功招是攻击力*3| | |\n|备注：红字为稀有特性或特有特性，游戏前期一般情况下很难招收到，特有特性是特殊人物才有的特性，比如聚财是特殊人物钱广进的特性，其他人还没发现有过，特殊人物的特性有些是鸡肋但是特殊人物学习力也是一般弟子望尘莫及的。|",{"type":597,"tag":1023,"props":4547,"children":4549},{"id":4548},"天下霸图",[4550],{"type":603,"value":4548},{"type":597,"tag":3995,"props":4552,"children":4554},{"id":4553},"设施建造",[4555],{"type":603,"value":4553},{"type":597,"tag":606,"props":4557,"children":4558},{},[4559],{"type":603,"value":4560},"在江湖上开帮立派，少不了规划一番，这可不是随随便便找几个人胡乱演练一下就能成功。趁着现下各大门派防守松懈之机，还是让我们一同来偷师一下，看看成立一个门派需要配置些怎样的家什。",{"type":597,"tag":606,"props":4562,"children":4563},{},[4564],{"type":603,"value":4565},"总舵（开帮立派）：总舵是门派中的门主所在地，一旦总舵被人攻占，而门主恰恰在总舵中，那么整个门派都将随着门主的死去而马上灭亡。因此挑选总舵时最好找那些地图够大，建造面积够宽、资源丰富的地点，这样不仅发展潜力很大，而且在早期就可迅速完成门派核心设施的建设。",{"type":597,"tag":606,"props":4567,"children":4568},{},[4569],{"type":603,"value":4570},"分舵（控制当地）：当攻下对手门派的地盘或到了一个尚未被人控制的地点，都可将它变为自己的分舵。分舵可在当地招收门徒并进行与主舵内容完全一致的各类练习和工作。分舵被人占领，不会影响门派的存亡，唯一要提醒各位的是，和总舵一样，每个分舵都必须最少任命一位舵主，假如需要还可以任命左右堂主。",{"type":597,"tag":606,"props":4572,"children":4573},{},[4574],{"type":603,"value":4575},"正殿（门派标志）：正殿是门派内一切设施建造的前提，其代表了门派的存在，在这里可进行人事方面的任免，同时安排门徒在此听训，可以增加他们对门派的忠诚度。",{"type":597,"tag":606,"props":4577,"children":4578},{},[4579],{"type":603,"value":4580},"看板（招募弟子）：只要找好地点，开帮立派建好正殿之后，看板就会自动开始使用，天天看板上都会登出本门本派拉人入伙的公告。假如你的门派声望够高，就会有应征者前来此处报道。点选看板之后就可查看到应征者的资料，假如感觉满足，即可批准入门，让应征者正式成为门派一员，门派的声望越高，前来应征的人属性也就越强。但要提醒一下的是，天天最多只会有一名应征者前来应征，因此当需要很多弟子加入时，不妨多设一些分舵来扩大招人数量。",{"type":597,"tag":606,"props":4582,"children":4583},{},[4584],{"type":603,"value":4585},"厢房（提供门徒弟子休息）：每一位门徒弟子感到疲惫时，都需要到厢房进行休息，否则将无法恢复体力和精神，并会因过度劳累而病到。由于一间厢房只能让一位门徒弟子休息，所以要想在总舵或分舵中招收更多的门徒弟子，就必须建造相应数量的厢房供他们休息。需要注重的是，在有空厢房时，招收进入的弟子会自动获得房间分配，但假如你进行过厢房拆除或房主指定等改变，那就必须手动为门徒弟子安排房间。",{"type":597,"tag":606,"props":4587,"children":4588},{},[4589],{"type":603,"value":4590},"徒手武场（练习各种拳脚功夫）：当门徒弟子安排有徒手方面的武功练习时，将会前往徒手武场进行练习。同一徒手武场在同一时刻只能安排一位门徒弟子进行练习，因此假如想同时练习很多徒手武功的弟子，就必须建造多个徒手武场才能满足需要。徒手武场是门派中最基本的练武之地，必不可缺，一般以5个为宜。",{"type":597,"tag":606,"props":4592,"children":4593},{},[4594],{"type":603,"value":4595},"兵器武场（练习各类兵器刀棍暗器）：和徒手武场一样，同一兵器武场在同一时刻只能安排一位门徒弟子进行练习，因此假如需要练习的门徒弟子很多，就必须建造多个兵器武场才能满足需要。兵器武场也是门派中最基本的练武之地，一般以3个为宜。",{"type":597,"tag":606,"props":4597,"children":4598},{},[4599],{"type":603,"value":4600},"修炼室（闭关修炼武功）：武功是靠悟出来的，当门徒弟子的某项武功经验值较高时，安排他到修炼室闭关修炼将有可能悟出更加厉害的新武功来，或是撰写出武功秘籍。前者可让门徒弟子学会新的武功，并以此为下一次悟出更强的武功作为基础；后者则是可将武功秘籍交由其他同门师兄弟阅读，以迅速提升阅读者该武功的经验值。修炼室也是门派中最基本的练武之地，一般建2座就够了。",{"type":597,"tag":606,"props":4602,"children":4603},{},[4604],{"type":603,"value":4605},"药圃（采集药材之地）：当总舵或分舵建造在有药材资源的地点时，就可以建造药圃进行采药。当地土壤的好坏会影响到药材的数量与品质，可依据炼丹所需药材进行建造。",{"type":597,"tag":606,"props":4607,"children":4608},{},[4609],{"type":603,"value":4610},"铸造房（打造武器暗器之地）：游戏中的大部分武器、暗器都需要自己生产才能获得，而铸造房正是为此而设，根据采集资源的不同生产出来的武器、暗器种类也不尽相同。铸造房有等级的设定，一共7级，每升1级，能够生产的物品等级也就越高，产品的价值也越高。所以要想获得强力的高等级武器，就需要不断进行铸造，以提高铸造房的等级。",{"type":597,"tag":606,"props":4612,"children":4613},{},[4614],{"type":603,"value":4615},"织造房（生产服饰之地）：可以生产衣服、鞋子、饰品等物品，但必须有足够的原料资源。和铸造房一样，织造房也有7个等级的设定，随着等级的提高，能够生产的物品等级也会越来越高，产品价值也就越高。",{"type":597,"tag":606,"props":4617,"children":4618},{},[4619],{"type":603,"value":4620},"炼丹房（炼丹制药之地）：负责进行丹药的生产炼制。同样有着7个等级的设定，等级越高，所能炼制的丹药效果越好，因此也是游戏中必须建造的设施之一。",{"type":597,"tag":3995,"props":4622,"children":4624},{"id":4623},"座次排定",[4625],{"type":603,"value":4623},{"type":597,"tag":606,"props":4627,"children":4628},{},[4629],{"type":603,"value":4630},"江湖有江湖自己的规则，而这个规则之一就是座次的排定。虽说职位的选择相对少了很多，但不同的职位对门派的发展却有着不小的影响，因此绝对不能轻视。",{"type":597,"tag":606,"props":4632,"children":4633},{},[4634],{"type":603,"value":4635},"门派掌门人就是总舵的舵主，而分舵的就需要自己来指定了。舵主的忠诚、聪明、健康会影响分舵弟子的生产效率，聪明和四大武功属性（攻击、防御、轻功、暗器）将影响弟子的练功效率，聪明和四力会影响弟子的采集效率；左堂主的聪明和四大武功属性会影响弟子的练功效率；右堂主的聪明和四大武功属性影响弟子的采集效率。",{"type":597,"tag":606,"props":4637,"children":4638},{},[4639],{"type":603,"value":4640},"在3种职位中，舵主必须指定，左、右堂主则可根据需要选择是否指定。但要提醒大家的是，职位的变更会影响到弟子的忠诚，被选为舵主的弟子可以增加20的忠诚度，选为左、右堂主的弟子则可增加10的忠诚度。",{"type":597,"tag":3995,"props":4642,"children":4644},{"id":4643},"行程安排",[4645],{"type":603,"value":4643},{"type":597,"tag":606,"props":4647,"children":4648},{},[4649,4651,4656,4658,4663],{"type":603,"value":4650},"身为门派掌门人，在风光的背后天天进行着怎样的工作呢？原来每位门人弟子都有12个小铜人，每个小铜人代表1个时辰，在进行行程安排时，在不同的任务栏内放入对应数量的小铜人，就代表这位门人弟子所需要进行这项工作的时间要求。和现实中的人一样，门人弟子在工作之后精力会下降，为了保证他们的状态，必须先留出4个小铜人（4个时辰）作为休息睡眠之用。这样可进行分配的小铜人还有8个，8个小铜人可根据苦力弟子、练功弟子等不同的修行需要放入对应栏目。但非凡要注重，受到任务场地空间的限制（门派设施同一时间内只答应一位弟子进入工作或练习），因而当弟子被安排了某项任务，却因场地没有空间而无法进入时，",{"type":597,"tag":1080,"props":4652,"children":4653},{},[4654],{"type":603,"value":4655},"门人弟子就会在一旁发呆",{"type":603,"value":4657},"（头上有问号），",{"type":597,"tag":1080,"props":4659,"children":4660},{},[4661],{"type":603,"value":4662},"发呆同样会损耗精力，但对忠诚没有影响",{"type":603,"value":4664},"。但考虑到生产或练功的需要，当可以进行分舵扩张时，应根据功用的不同，把不同的分舵分为练功分舵、制造分舵或是采集分舵，这样才能在方便治理的同时，最大限度提高门派发展的效率。",{"type":597,"tag":3995,"props":4666,"children":4668},{"id":4667},"对外交涉",[4669],{"type":603,"value":4667},{"type":597,"tag":606,"props":4671,"children":4672},{},[4673],{"type":603,"value":4674},"与人为善本是处事之道，面对不同势力把持形成的江湖，怎样在发展中求生存？除去刀劈剑砍之外，广结善缘也不失为一种求存之道。在大多数时间里（第7式除外），江湖上其他门派的发展速度都要远超我们。面对来势汹汹的对手，假如你没有完全把握应对，那么不妨找一名聪明较高的门人弟子，带着金钱或原料资源前去交涉疏通，只要能让双方的友好度保持在40以上，那么得了好处的他也就不会再时刻想着前来对你展开武力行动了。虽然江湖中的十二大门派可分为正邪两道，但实际上无论是正是邪，彼此之间都不存在任何友谊，少林寺同样可能在一夜之间发动对武当山的偷袭，魔教也说不准转眼就杀进了洞庭帮的总舵。正是因此，不要幻想名门正派就一定会光明正大，广撒银钱，自求多福方是活命之选。",{"title":591,"searchDepth":787,"depth":787,"links":4676},[4677,4678],{"id":4414,"depth":1530,"text":4414},{"id":4548,"depth":1530,"text":4548},"content:gyj:2022-11-01-天下霸图.md","gyj/2022-11-01-天下霸图.md","2022-11-01",{"_path":586,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":585,"description":4684,"body":4685,"_type":791,"_id":4867,"_source":793,"_file":4868,"_extension":795,"date":4869},"unity","关于parent和LinkedEntityGroupparent 涉及到localtoworld, 以及一些物理和其他的转换规则parent和位置有关系..所以父实体需要添加Translation和LocalToWorld.否则会删除该parent和LocalToParent组件添加了parent组件且添加了Translation,LocalToWorld,LocalToParent组件,会自动给父实体添加child组件,四个组件缺一不可如果使用了LocalToParent,这个时候Translation代表的是相对于父对象的坐标..相当于传统的localTranslation\n这个时候如果获",{"type":594,"children":4686,"toc":4863},[4687,4693,4747,4752,4757,4764,4769],{"type":597,"tag":598,"props":4688,"children":4690},{"id":4689},"关于parent和linkedentitygroup",[4691],{"type":603,"value":4692},"关于parent和LinkedEntityGroup",{"type":597,"tag":1321,"props":4694,"children":4695},{},[4696,4719],{"type":597,"tag":807,"props":4697,"children":4698},{},[4699,4701],{"type":603,"value":4700},"parent 涉及到localtoworld, 以及一些物理和其他的转换规则",{"type":597,"tag":1321,"props":4702,"children":4703},{},[4704,4709,4714],{"type":597,"tag":807,"props":4705,"children":4706},{},[4707],{"type":603,"value":4708},"parent和位置有关系..所以父实体需要添加Translation和LocalToWorld.否则会删除该parent和LocalToParent组件",{"type":597,"tag":807,"props":4710,"children":4711},{},[4712],{"type":603,"value":4713},"添加了parent组件且添加了Translation,LocalToWorld,LocalToParent组件,会自动给父实体添加child组件,四个组件缺一不可",{"type":597,"tag":807,"props":4715,"children":4716},{},[4717],{"type":603,"value":4718},"如果使用了LocalToParent,这个时候Translation代表的是相对于父对象的坐标..相当于传统的localTranslation\n这个时候如果获取世界坐标..可以使用LocalToWorld.pos",{"type":597,"tag":807,"props":4720,"children":4721},{},[4722,4724,4730,4732,4738,4739,4745],{"type":603,"value":4723},"linkedEntityGroup 和 ",{"type":597,"tag":629,"props":4725,"children":4727},{"className":4726},[],[4728],{"type":603,"value":4729},"Instantiate",{"type":603,"value":4731}," ",{"type":597,"tag":629,"props":4733,"children":4735},{"className":4734},[],[4736],{"type":603,"value":4737},"SetEnabled",{"type":603,"value":4731},{"type":597,"tag":629,"props":4740,"children":4742},{"className":4741},[],[4743],{"type":603,"value":4744},"DestroyEntity",{"type":603,"value":4746}," 有关",{"type":597,"tag":598,"props":4748,"children":4750},{"id":4749},"关于转换",[4751],{"type":603,"value":4749},{"type":597,"tag":606,"props":4753,"children":4754},{},[4755],{"type":603,"value":4756},"在Conversion World中，仅仅是复制生成了来自Classic World的、保留原有Hierarchy关系的GameObject Entity，这些Entity拥有的组件仍然是我们熟知的传统Unity组件，例如Transform、MeshFilter。接下来，将调用DOTS预置的或我们自定义的Convert接口，完成向IComponentData组件的转换。自然而然的，可能没有实现对某Component Object的转换接口，那么在转换过程中将被丢弃，所以该转换不一定是“一对一”，所以Unity称呼其为\"Primary Entity\"。下图呈现了转换全过程。",{"type":597,"tag":606,"props":4758,"children":4759},{},[4760],{"type":597,"tag":719,"props":4761,"children":4763},{"alt":591,"src":4762},"/images/2022-09-10-ecs-beiwang/v2-332760451f516eb225e95ea7683945e5_720w.jpg",[],{"type":597,"tag":606,"props":4765,"children":4766},{},[4767],{"type":603,"value":4768},"转换过程都是在Conversion World中完成的,DOTS在内部为转换过程创建了一个World。作为独立World，它拥有自己的EntityManager和ComponentSystem，进而拥有并管理自己的Entity和ComponentData。",{"type":597,"tag":803,"props":4770,"children":4771},{},[4772,4790,4803],{"type":597,"tag":807,"props":4773,"children":4774},{},[4775,4777,4783,4786],{"type":603,"value":4776},"使用ConvertToEntity组件,添加IConvertGameObjectToEntity接口,或者在组件上添加",{"type":597,"tag":629,"props":4778,"children":4780},{"className":4779},[],[4781],{"type":603,"value":4782},"[GenerateAuthoringComponent]",{"type":597,"tag":1595,"props":4784,"children":4785},{},[],{"type":597,"tag":719,"props":4787,"children":4789},{"alt":591,"src":4788},"/images/2022-09-10-ecs-beiwang/1662571573000.png",[],{"type":597,"tag":807,"props":4791,"children":4792},{},[4793,4795],{"type":603,"value":4794},"同一,但是使用代码控制转换的时机,继承ConvertToSingleEntity,并覆盖awake,然后在手动调用.",{"type":597,"tag":621,"props":4796,"children":4798},{"code":4797},"public class ConvertToSingleEntity : ConvertToEntity\n{\n    void Awake()\n    {\n    }\n}\n\n//实际上就是ConvertToEntity中的代码\npublic static void ConvertGameObejct(World dstWorld, GameObject gameObject)\n{\n    var system = World.DefaultGameObjectInjectionWorld.GetOrCreateSystem\u003CConvertToEntitySystem>();\n\n    var convert = gameObject.GetComponent\u003CConvertToEntity>();\n\n    if (convert == null)\n    {\n        return ;\n    }\n    system.AddToBeConverted(dstWorld, convert);\n}\n",[4799],{"type":597,"tag":629,"props":4800,"children":4801},{"__ignoreMap":591},[4802],{"type":603,"value":4797},{"type":597,"tag":807,"props":4804,"children":4805},{},[4806,4808,4811,4813,4821,4824,4826,4834,4837,4839,4845,4847,4853,4855],{"type":603,"value":4807},"使用IDeclareReferencedPrefabs.声明实体的prefab,然后进行存储,以便进行之后的实例化",{"type":597,"tag":1595,"props":4809,"children":4810},{},[],{"type":603,"value":4812},"对于转换世界中的每个游戏对象，在任何转换系统运行之前，都会在目标世界中自动创建一个主要实体。随后可以通过 GameObjectConversionSystem.GetPrimaryEntity 访问与 GameObject 关联的实体。",{"type":597,"tag":621,"props":4814,"children":4816},{"code":4815},"  /*\n     *    \n     *    \n         if (m_Prefab == Entity.Null)\n               {\n                   var prefabEntity = GetSingletonEntity\u003CGamePrefabCollectionComponent>();\n                   var prefabs = GetBuffer\u003CGamePrefabBuffer>(prefabEntity);\n                   for (int i = 0; i \u003C prefabs.Length; ++i)\n                   {\n                       if (HasComponent\u003CPlayer.State>(prefabs[i].Value))\n                           m_Prefab = prefabs[i].Value;\n                   }\n               }\n     * \n     * \n     * 添加进来的prefab不需要添加convert to entity\n     * 可以用单例获取GamePrefabCollectionComponent,然后获取想要的entity\n     * \n     */\n    public class GameDeclareReferencedPrefabs : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs\n    {\n   \n        public List\u003CGameObject> Prefabs = new List\u003CGameObject>();\n\n        public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n        {\n            dstManager.AddComponentData(entity, default(GamePrefabCollectionComponent));\n            var prefabs = dstManager.AddBuffer\u003CGamePrefabBuffer>(entity);\n\n            foreach (var prefab in Prefabs)\n            { \n                var prefabEnt = conversionSystem.GetPrimaryEntity(prefab);\n                if (dstManager.Exists(prefabEnt))\n                    prefabs.Add(new GamePrefabBuffer { Value = prefabEnt });\n                else\n                    Debug.LogError($\"The prefab {prefab.name} in the ghost collection was no converted to an entity, skipping it\");\n            }\n        }\n\n        public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n        {\n            foreach (var prefab in Prefabs)\n            {\n                if(prefab == null)\n                {\n                    continue;\n                }\n                referencedPrefabs.Add(prefab);\n            }\n        }\n    }\n",[4817],{"type":597,"tag":629,"props":4818,"children":4819},{"__ignoreMap":591},[4820],{"type":603,"value":4815},{"type":597,"tag":1595,"props":4822,"children":4823},{},[],{"type":603,"value":4825},"4.从转换系统中根据component获取实体,和上面类似..因为转换子物体的时候,转换系统中会生成实体,这个时候可以使用组件从conversionSystem中获取,",{"type":597,"tag":621,"props":4827,"children":4829},{"code":4828},"     public static void AddAbilityComponents(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem, AbilityAuthoring[] abilities)\n        {\n            dstManager.AddComponentData(entity, new AbilityCollection.State());\n\n            // Create ability entities\n            var abilityEntities = new List\u003CEntity>(abilities.Length);\n            for (int i = 0; i \u003C abilities.Length; i++)\n            {\n                var e = conversionSystem.GetEntities(abilities[i]);\n                e.MoveNext();\n                var abilityEntity = e.Current;\n\n                if (abilityEntities.Contains(abilityEntity))\n                {\n                    GameDebug.LogError(\"Ability \" + abilities[i] + \" registered multiple times in abilities list\");\n                }\n\n                abilityEntities.Add(abilityEntity);\n            }\n\n            // Add abilities to ability buffer\n            dstManager.AddBuffer\u003CAbilityCollection.AbilityEntry>(entity);\n            var abilityBuffer = dstManager.GetBuffer\u003CAbilityCollection.AbilityEntry>(entity);\n            for (int i = 0; i \u003C abilities.Length; i++)\n            {\n                abilityBuffer.Add(new AbilityCollection.AbilityEntry\n                {\n                    entity = abilityEntities[i],\n                    abilityType = abilities[i].abilityTypeFlags,\n                    canRunWith = abilities[i].canRunWithFlags,\n                    canInterrupt = abilities[i].canInterruptFlags,\n                });\n            }\n        }\n",[4830],{"type":597,"tag":629,"props":4831,"children":4832},{"__ignoreMap":591},[4833],{"type":603,"value":4828},{"type":597,"tag":1595,"props":4835,"children":4836},{},[],{"type":603,"value":4838},"5.手动转换gameobject,他的代码和",{"type":597,"tag":629,"props":4840,"children":4842},{"className":4841},[],[4843],{"type":603,"value":4844},"ConvertToEntitySystem",{"type":603,"value":4846},"的代码差不多.会创建一个ConversionWorld,然后进行转换,都是使用了",{"type":597,"tag":629,"props":4848,"children":4850},{"className":4849},[],[4851],{"type":603,"value":4852},"GameObjectConversionUtility.Convert",{"type":603,"value":4854},"工作",{"type":597,"tag":621,"props":4856,"children":4858},{"code":4857},"        public static Entity ConvertGameObjectPrefab(GameObject go,World dstWorld,out BlobAssetStore blob)\n        {\n            Entity returnEntity = Entity.Null;\n        \n            blob = new BlobAssetStore();\n\n            returnEntity =\n                GameObjectConversionUtility.ConvertGameObjectHierarchy(go,GameObjectConversionSettings.FromWorld(dstWorld, blob));\n\n            return returnEntity;\n        }\n",[4859],{"type":597,"tag":629,"props":4860,"children":4861},{"__ignoreMap":591},[4862],{"type":603,"value":4857},{"title":591,"searchDepth":787,"depth":787,"links":4864},[4865,4866],{"id":4689,"depth":787,"text":4692},{"id":4749,"depth":787,"text":4749},"content:unity:2022-09-10-ecs-beiwang.md","unity/2022-09-10-ecs-beiwang.md","2022-09-10",{"_path":202,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":201,"description":4871,"body":4872,"_type":791,"_id":4924,"_source":793,"_file":4925,"_extension":795,"date":4926},"怪物在地图种的类型地牢有很多种美术不同的地图:地牢的地图种类.决定了这个地图里是生成什么类型的怪物生成什么类型的怪物,和城市地块以及城市等级没有关系...怪物在地图中的等级由游戏难度和地图难度决定地图难度越高..怪物等级越高游戏难度决定..比如普通...四级装备就能过九级地牢...而噩梦..九级装备才能过九级地牢",{"type":594,"children":4873,"toc":4920},[4874,4879,4897,4902],{"type":597,"tag":598,"props":4875,"children":4877},{"id":4876},"怪物在地图种的类型",[4878],{"type":603,"value":4876},{"type":597,"tag":803,"props":4880,"children":4881},{},[4882,4887,4892],{"type":597,"tag":807,"props":4883,"children":4884},{},[4885],{"type":603,"value":4886},"地牢有很多种美术不同的地图:",{"type":597,"tag":807,"props":4888,"children":4889},{},[4890],{"type":603,"value":4891},"地牢的地图种类.决定了这个地图里是生成什么类型的怪物",{"type":597,"tag":807,"props":4893,"children":4894},{},[4895],{"type":603,"value":4896},"生成什么类型的怪物,和城市地块以及城市等级没有关系...",{"type":597,"tag":598,"props":4898,"children":4900},{"id":4899},"怪物在地图中的等级",[4901],{"type":603,"value":4899},{"type":597,"tag":803,"props":4903,"children":4904},{},[4905,4910,4915],{"type":597,"tag":807,"props":4906,"children":4907},{},[4908],{"type":603,"value":4909},"由游戏难度和地图难度决定",{"type":597,"tag":807,"props":4911,"children":4912},{},[4913],{"type":603,"value":4914},"地图难度越高..怪物等级越高",{"type":597,"tag":807,"props":4916,"children":4917},{},[4918],{"type":603,"value":4919},"游戏难度决定..比如普通...四级装备就能过九级地牢...而噩梦..九级装备才能过九级地牢",{"title":591,"searchDepth":787,"depth":787,"links":4921},[4922,4923],{"id":4876,"depth":787,"text":4876},{"id":4899,"depth":787,"text":4899},"content:gyj:2022-08-22-地图房间的种类.md","gyj/2022-08-22-地图房间的种类.md","2022-08-22",{"_path":205,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":204,"description":4928,"body":4929,"_type":791,"_id":6092,"_source":793,"_file":6093,"_extension":795,"date":4926},"关于奖惩100次负面效果会有一次极大的正面效果修仙式人生1、前辈拜访：避而不见-少量道德、传功-修为、打架-大量道德2、灵石矿脉：表面挖增加修为、在深处挖一无所得3、仇敌：教训一番声明大涨、好言相劝-战力4、生死搏斗：帮助获得宠物5、锻造师：同意-体魄+战力6、应邀做客：运功调息躲过一劫、怀疑好友-大量心态7、跛足乞丐：治疗腿溃→给他酒+随机属性8、论道大会：旁听论道+悟性、参加论道+名气9、炼妖塔：放出宠物+宠物战斗力10、道侣：与其同游+修为11、天仙下凡：假扮渔贩施舍得丹药12、灵石市场：平平无奇的石料+修为、古怪的石料看人品±修为(大概率-修为)13、白衣公子：详细解答+悟性、高谈阔论",{"type":594,"children":4930,"toc":6087},[4931,4936,4941,4949,4954,4959,4964,4969,4974,4979,4984,4989,4994,4999,5004,5009,5014,5019,5024,5029,5034,5039,5044,5049,5054,5059,5064,5069,5074,5079,5084,5089,5094,5099,5104,5109,5114,5119,5127,5132,5137,5142,5147,5152,5157,5162,5167,5172,5177,5182,5187,5192,5197,5202,5207,5212,5217,5222,5227,5232,5237,5242,5247,5252,5257,5262,5267,5272,5277,5284,5289,5294,5299,5304,5309,5314,5319,5324,5329,5334,5339,5344,5349,5354,5359,5364,5369,5374,5379,5384,5389,5394,5399,5404,5409,5414,5419,5424,5429,5434,5439,5444,5449,5454,5459,5464,5469,5474,5479,5484,5489,5494,5499,5504,5509,5514,5519,5524,5529,5534,5563,5571,5573],{"type":597,"tag":1023,"props":4932,"children":4934},{"id":4933},"关于奖惩",[4935],{"type":603,"value":4933},{"type":597,"tag":606,"props":4937,"children":4938},{},[4939],{"type":603,"value":4940},"100次负面效果会有一次极大的正面效果",{"type":597,"tag":857,"props":4942,"children":4944},{"id":4943},"修仙式人生",[4945],{"type":597,"tag":1080,"props":4946,"children":4947},{},[4948],{"type":603,"value":4943},{"type":597,"tag":606,"props":4950,"children":4951},{},[4952],{"type":603,"value":4953},"1、前辈拜访：避而不见-少量道德、传功-修为、打架-大量道德",{"type":597,"tag":606,"props":4955,"children":4956},{},[4957],{"type":603,"value":4958},"2、灵石矿脉：表面挖增加修为、在深处挖一无所得",{"type":597,"tag":606,"props":4960,"children":4961},{},[4962],{"type":603,"value":4963},"3、仇敌：教训一番声明大涨、好言相劝-战力",{"type":597,"tag":606,"props":4965,"children":4966},{},[4967],{"type":603,"value":4968},"4、生死搏斗：帮助获得宠物",{"type":597,"tag":606,"props":4970,"children":4971},{},[4972],{"type":603,"value":4973},"5、锻造师：同意-体魄+战力",{"type":597,"tag":606,"props":4975,"children":4976},{},[4977],{"type":603,"value":4978},"6、应邀做客：运功调息躲过一劫、怀疑好友-大量心态",{"type":597,"tag":606,"props":4980,"children":4981},{},[4982],{"type":603,"value":4983},"7、跛足乞丐：治疗腿溃→给他酒+随机属性",{"type":597,"tag":606,"props":4985,"children":4986},{},[4987],{"type":603,"value":4988},"8、论道大会：旁听论道+悟性、参加论道+名气",{"type":597,"tag":606,"props":4990,"children":4991},{},[4992],{"type":603,"value":4993},"9、炼妖塔：放出宠物+宠物战斗力",{"type":597,"tag":606,"props":4995,"children":4996},{},[4997],{"type":603,"value":4998},"10、道侣：与其同游+修为",{"type":597,"tag":606,"props":5000,"children":5001},{},[5002],{"type":603,"value":5003},"11、天仙下凡：假扮渔贩施舍得丹药",{"type":597,"tag":606,"props":5005,"children":5006},{},[5007],{"type":603,"value":5008},"12、灵石市场：平平无奇的石料+修为、古怪的石料看人品±修为(大概率-修为)",{"type":597,"tag":606,"props":5010,"children":5011},{},[5012],{"type":603,"value":5013},"13、白衣公子：详细解答+悟性、高谈阔论-名气",{"type":597,"tag":606,"props":5015,"children":5016},{},[5017],{"type":603,"value":5018},"14、门派大比：下场比武+名气、场外观战+战力",{"type":597,"tag":606,"props":5020,"children":5021},{},[5022],{"type":603,"value":5023},"15、山下来妖：放入炼妖塔",{"type":597,"tag":606,"props":5025,"children":5026},{},[5027],{"type":603,"value":5028},"16、遗迹：勇闯遗迹→制造临时分身-修为+战力",{"type":597,"tag":606,"props":5030,"children":5031},{},[5032],{"type":603,"value":5033},"17、追债：帮助书生抵债-修为+随机的物品，继续追债则会扣道德",{"type":597,"tag":606,"props":5035,"children":5036},{},[5037],{"type":603,"value":5038},"18、落难母子：帮被偷东西、拒绝啥都不扣",{"type":597,"tag":606,"props":5040,"children":5041},{},[5042],{"type":603,"value":5043},"19、子嗣传功：无视不扣属性",{"type":597,"tag":606,"props":5045,"children":5046},{},[5047],{"type":603,"value":5048},"20、仙岛：进入深处被打伤-体魄、",{"type":597,"tag":606,"props":5050,"children":5051},{},[5052],{"type":603,"value":5053},"21、府库失火：继续盘点大概率啥都没有(小概率被烧几件东西)、",{"type":597,"tag":606,"props":5055,"children":5056},{},[5057],{"type":603,"value":5058},"救火有可能库存被清空",{"type":597,"tag":606,"props":5060,"children":5061},{},[5062],{"type":603,"value":5063},"22、碧水寒潭：潜到潭底概率±修为(加的比减得多)",{"type":597,"tag":606,"props":5065,"children":5066},{},[5067],{"type":603,"value":5068},"23、判官雕像：据为己有+修为-道德",{"type":597,"tag":606,"props":5070,"children":5071},{},[5072],{"type":603,"value":5073},"24、灵宝殿：选半价拍卖得随机的半价东西或者灵兽",{"type":597,"tag":606,"props":5075,"children":5076},{},[5077],{"type":603,"value":5078},"25、无名仙岛：进入深处看人品+修为或者-体魄",{"type":597,"tag":606,"props":5080,"children":5081},{},[5082],{"type":603,"value":5083},"26、宝藏：邀请好友→假装不敌-道德+修为、联手反击-名气-修为",{"type":597,"tag":606,"props":5085,"children":5086},{},[5087],{"type":603,"value":5088},"27、天梯：登上天梯得功法",{"type":597,"tag":606,"props":5090,"children":5091},{},[5092],{"type":603,"value":5093},"28、恶人：前往助拳+名气+道德",{"type":597,"tag":606,"props":5095,"children":5096},{},[5097],{"type":603,"value":5098},"29、寻仇：选安抚失去一个功法",{"type":597,"tag":606,"props":5100,"children":5101},{},[5102],{"type":603,"value":5103},"30、求丹：给他丹药+道德、不给-道德-修为",{"type":597,"tag":606,"props":5105,"children":5106},{},[5107],{"type":603,"value":5108},"31、帮助店主：教训流氓得随机物品",{"type":597,"tag":606,"props":5110,"children":5111},{},[5112],{"type":603,"value":5113},"32、拍卖：选择不要的功法和丹药换修为",{"type":597,"tag":606,"props":5115,"children":5116},{},[5117],{"type":603,"value":5118},"33、魔修者：寻求救援-心态+名气、袭击魔修者+道德-体魄",{"type":597,"tag":606,"props":5120,"children":5121},{},[5122],{"type":597,"tag":1080,"props":5123,"children":5124},{},[5125],{"type":603,"value":5126},"合体期事件",{"type":597,"tag":606,"props":5128,"children":5129},{},[5130],{"type":603,"value":5131},"1、仙树吸引妖兽：用妖兽错过神兽大会、用阵法成长时间加十年",{"type":597,"tag":606,"props":5133,"children":5134},{},[5135],{"type":603,"value":5136},"2、仙树叶子枯黄：得浇水",{"type":597,"tag":606,"props":5138,"children":5139},{},[5140],{"type":603,"value":5141},"3、仙树叶子发蔫：得施肥",{"type":597,"tag":606,"props":5143,"children":5144},{},[5145],{"type":603,"value":5146},"4、蟠桃大会：参加固定+100万修为和20名气",{"type":597,"tag":1023,"props":5148,"children":5150},{"id":5149},"阴阳师",[5151],{"type":603,"value":5149},{"type":597,"tag":606,"props":5153,"children":5154},{},[5155],{"type":603,"value":5156},"1、路上遇到了形迹可疑的路人，跟上去看看。",{"type":597,"tag":606,"props":5158,"children":5159},{},[5160],{"type":603,"value":5161},"选项A -像是非常渴，一直在不停喝水的男子。",{"type":597,"tag":606,"props":5163,"children":5164},{},[5165],{"type":603,"value":5166},"结局A -饮水水过量的男子晕倒了，送男子就医，来到了另一条街道。",{"type":597,"tag":606,"props":5168,"children":5169},{},[5170],{"type":603,"value":5171},"选项B -踏过的地面会留下红色印记的女子。",{"type":597,"tag":606,"props":5173,"children":5174},{},[5175],{"type":603,"value":5176},"结局B -好奇地现祭红色印记，弄脏了鞋子，购买一双新鞋穿着很舒服。",{"type":597,"tag":606,"props":5178,"children":5179},{},[5180],{"type":603,"value":5181},"2、木偶商人有新的剧目了，椐说根椐真事改编。",{"type":597,"tag":606,"props":5183,"children":5184},{},[5185],{"type":603,"value":5186},"选项A -听奇鬼王怒杀恶兽扩疆域。",{"type":597,"tag":606,"props":5188,"children":5189},{},[5190],{"type":603,"value":5191},"结局A -剧情精彩老套无聊不小心睡着了，恢复了一些体力。",{"type":597,"tag":606,"props":5193,"children":5194},{},[5195],{"type":603,"value":5196},"选项B -听俏人鱼力斩冰海收珍宝。",{"type":597,"tag":606,"props":5198,"children":5199},{},[5200],{"type":603,"value":5201},"结局B -剧本新颖，前所未闻，很多观众都打赏了勾玉。",{"type":597,"tag":606,"props":5203,"children":5204},{},[5205],{"type":603,"value":5206},"3、京都热闹非凡，弥助的身影也出现在銜上。",{"type":597,"tag":606,"props":5208,"children":5209},{},[5210],{"type":603,"value":5211},"选项A -邀他一同游玩京都吧。",{"type":597,"tag":606,"props":5213,"children":5214},{},[5215],{"type":603,"value":5216},"结局A -弥助灵感迸发，当场作画，得到弥助大作太鼓。",{"type":597,"tag":606,"props":5218,"children":5219},{},[5220],{"type":603,"value":5221},"选项B -劝他回去安心作画吧。",{"type":597,"tag":606,"props":5223,"children":5224},{},[5225],{"type":603,"value":5226},"结局B -弥助闷闷不乐，回去画画，弥助不知道画了一张什么玩意。",{"type":597,"tag":606,"props":5228,"children":5229},{},[5230],{"type":603,"value":5231},"4、街边店铺门口出现了一道熟悉的身影。",{"type":597,"tag":606,"props":5233,"children":5234},{},[5235],{"type":603,"value":5236},"选项A -是一只壮硕的橘色大猫。",{"type":597,"tag":606,"props":5238,"children":5239},{},[5240],{"type":603,"value":5241},"结局A -花费了一个时辰陪猫玩耍，最后猫的主送你了一些礼物。",{"type":597,"tag":606,"props":5243,"children":5244},{},[5245],{"type":603,"value":5246},"选项B -是一只灵活的白色小狗。",{"type":597,"tag":606,"props":5248,"children":5249},{},[5250],{"type":603,"value":5251},"结局B -迫狗玩耍，不料反被狗追，不小心闯入了其他街区。",{"type":597,"tag":606,"props":5253,"children":5254},{},[5255],{"type":603,"value":5256},"5、店铺老板正在向过往行人兜售锦鲤。",{"type":597,"tag":606,"props":5258,"children":5259},{},[5260],{"type":603,"value":5261},"选项A -更想要红白配色的锦鲤。",{"type":597,"tag":606,"props":5263,"children":5264},{},[5265],{"type":603,"value":5266},"结局A -获得一只红白配色的锦鲤，但是运气并没有变好。",{"type":597,"tag":606,"props":5268,"children":5269},{},[5270],{"type":603,"value":5271},"选项B -更想要紫白配色的锦鲤。",{"type":597,"tag":606,"props":5273,"children":5274},{},[5275],{"type":603,"value":5276},"结局B -获得一只紫白配色的锦鲤，但是运气并没有变好。",{"type":597,"tag":606,"props":5278,"children":5279},{},[5280],{"type":597,"tag":719,"props":5281,"children":5283},{"alt":591,"src":5282},"/images/%E5%A5%87%E9%81%87%E4%BA%8B%E4%BB%B6/0b6c004abfaf7da7007893271fb71e9c.jpg@!18183",[],{"type":597,"tag":606,"props":5285,"children":5286},{},[5287],{"type":603,"value":5288},"6、在路边检到了勾玉袋和一盆丸子串，突然罕见地遇到了镰鼬三兄弟之一。",{"type":597,"tag":606,"props":5290,"children":5291},{},[5292],{"type":603,"value":5293},"选项A -是任性妄为的一太郎。",{"type":597,"tag":606,"props":5295,"children":5296},{},[5297],{"type":603,"value":5298},"结局A - —太郎抢走了你裝勾玉的钱袋，但丸子真好吃。",{"type":597,"tag":606,"props":5300,"children":5301},{},[5302],{"type":603,"value":5303},"选项B -是不想再呆在最下面的三太郎。",{"type":597,"tag":606,"props":5305,"children":5306},{},[5307],{"type":603,"value":5308},"结局B -三太郎抡走了你的丸子串，但是留下了勾玉袋。",{"type":597,"tag":606,"props":5310,"children":5311},{},[5312],{"type":603,"value":5313},"7、偶然捡到一只小猫。",{"type":597,"tag":606,"props":5315,"children":5316},{},[5317],{"type":603,"value":5318},"选项A -猫掌柜似乎正在找着什么。",{"type":597,"tag":606,"props":5320,"children":5321},{},[5322],{"type":603,"value":5323},"结局A -问猫掌柜丟了什么，小猫安全回家了。",{"type":597,"tag":606,"props":5325,"children":5326},{},[5327],{"type":603,"value":5328},"选项B -小猫贪吃的模样神似伊吹。",{"type":597,"tag":606,"props":5330,"children":5331},{},[5332],{"type":603,"value":5333},"结局B - 习惯性喂了小猫几串小鱼干，居然真的收到了礼物。",{"type":597,"tag":606,"props":5335,"children":5336},{},[5337],{"type":603,"value":5338},"8、街边店铺在卖各或各样的面具。",{"type":597,"tag":606,"props":5340,"children":5341},{},[5342],{"type":603,"value":5343},"选项A -买个般若面具戴。",{"type":597,"tag":606,"props":5345,"children":5346},{},[5347],{"type":603,"value":5348},"结局A -戴上后变得十分可爱，被神秘男子搭讪了。",{"type":597,"tag":606,"props":5350,"children":5351},{},[5352],{"type":603,"value":5353},"选项B -买个天狗面具戴。",{"type":597,"tag":606,"props":5355,"children":5356},{},[5357],{"type":603,"value":5358},"结局B -戴上后身体变得轻盈了，被当成了大义的追求者。",{"type":597,"tag":606,"props":5360,"children":5361},{},[5362],{"type":603,"value":5363},"9、宫廷周围闪烁着忽明忽暗的蓝绿色灯火，隐约传来不祥的气息。",{"type":597,"tag":606,"props":5365,"children":5366},{},[5367],{"type":603,"value":5368},"选项A -走近用火暖暖手。",{"type":597,"tag":606,"props":5370,"children":5371},{},[5372],{"type":603,"value":5373},"结局A -火焰突然变旺了，不得不修补被烧坏的衣服。",{"type":597,"tag":606,"props":5375,"children":5376},{},[5377],{"type":603,"value":5378},"选项B -在附近设下结界。",{"type":597,"tag":606,"props":5380,"children":5381},{},[5382],{"type":603,"value":5383},"结局B -结界阻拦了宫廷附近的跃怪，皇室送来了一些珠宝作为谢礼。",{"type":597,"tag":606,"props":5385,"children":5386},{},[5387],{"type":603,"value":5388},"10、京都郊外突然盛开了大片的红色曼珠沙华。",{"type":597,"tag":606,"props":5390,"children":5391},{},[5392],{"type":603,"value":5393},"选项A -带一株回到庭院里种。",{"type":597,"tag":606,"props":5395,"children":5396},{},[5397],{"type":603,"value":5398},"结局A -曼珠沙华水土不服，第二天就枯萎了，伤心了一个早晨，上集市购买了一束纸花。",{"type":597,"tag":606,"props":5400,"children":5401},{},[5402],{"type":603,"value":5403},"选项B -不必在意。",{"type":597,"tag":606,"props":5405,"children":5406},{},[5407],{"type":603,"value":5408},"结居洛-京都居民结伴赏花，一时间曼珠沙华成为潮流，曼曼珠沙华价格暴涨，为了跟上潮流上集市高价购买了一株。",{"type":597,"tag":606,"props":5410,"children":5411},{},[5412],{"type":603,"value":5413},"11、竹林里传来悠杨的笛声，令人十分愉悦。",{"type":597,"tag":606,"props":5415,"children":5416},{},[5417],{"type":603,"value":5418},"选项A -跟着笛声在庭院里跳一支舞。",{"type":597,"tag":606,"props":5420,"children":5421},{},[5422],{"type":603,"value":5423},"结局A -被路过的博雅看见了，顺势邀请博雅喝酒，将他灌醉。",{"type":597,"tag":606,"props":5425,"children":5426},{},[5427],{"type":603,"value":5428},"选项B -在庭院廊下安静听完。",{"type":597,"tag":606,"props":5430,"children":5431},{},[5432],{"type":603,"value":5433},"结局B -和着笛声沉沉睡去，不幸着凉感冒。",{"type":597,"tag":606,"props":5435,"children":5436},{},[5437],{"type":603,"value":5438},"12、突然刮起了狂风，庭院门前被人提前贴了风符，幸亏风符保护才安然无事。",{"type":597,"tag":606,"props":5440,"children":5441},{},[5442],{"type":603,"value":5443},"选项A -揭下风符并妥善保管。",{"type":597,"tag":606,"props":5445,"children":5446},{},[5447],{"type":603,"value":5448},"结局A -第二天风符消失了，大天狗飞过庭院，吹坏了庭院的大门。",{"type":597,"tag":606,"props":5450,"children":5451},{},[5452],{"type":603,"value":5453},"选项B -派小纸人去风神神社回一份小礼。",{"type":597,"tag":606,"props":5455,"children":5456},{},[5457],{"type":603,"value":5458},"结局B -风神接受了礼物，获得了一张新的风符。",{"type":597,"tag":606,"props":5460,"children":5461},{},[5462],{"type":603,"value":5463},"13、看到一只有灵力的纸鹤在到处飞舞。",{"type":597,"tag":606,"props":5465,"children":5466},{},[5467],{"type":603,"value":5468},"选项A -击落一只看看。",{"type":597,"tag":606,"props":5470,"children":5471},{},[5472],{"type":603,"value":5473},"结局A -击落失败，被突然出现的一群纸鹤追着跑了两条銜。",{"type":597,"tag":606,"props":5475,"children":5476},{},[5477],{"type":603,"value":5478},"选项B -派出小纸人跟踪它们。",{"type":597,"tag":606,"props":5480,"children":5481},{},[5482],{"type":603,"value":5483},"结局B -纸鹤飞到了小纸人看不见的高度，跟丟了纸鹤，什么收获也没有。",{"type":597,"tag":606,"props":5485,"children":5486},{},[5487],{"type":603,"value":5488},"14、退治妖物后收集到了一些金色的鱗片。",{"type":597,"tag":606,"props":5490,"children":5491},{},[5492],{"type":603,"value":5493},"选项A -塞进嘴里咬一下，看看是不是真的。",{"type":597,"tag":606,"props":5495,"children":5496},{},[5497],{"type":603,"value":5498},"结局A -崩坏了门牙，不得不学着使用阴阳术来补牙。",{"type":597,"tag":606,"props":5500,"children":5501},{},[5502],{"type":603,"value":5503},"选项B -妥善保管。",{"type":597,"tag":606,"props":5505,"children":5506},{},[5507],{"type":603,"value":5508},"结居B -鱗片的妖力引来了奇怪的妖怪在附近徘徊，妖怪退治持续了整整一周。",{"type":597,"tag":606,"props":5510,"children":5511},{},[5512],{"type":603,"value":5513},"15、—个柔弱的小女孩扛着一只巨大的蒲公英。",{"type":597,"tag":606,"props":5515,"children":5516},{},[5517],{"type":603,"value":5518},"选项A -主动帮她一起扛。",{"type":597,"tag":606,"props":5520,"children":5521},{},[5522],{"type":603,"value":5523},"结局A -完全搬不幼，被小女孩无情嘲笑了。",{"type":597,"tag":606,"props":5525,"children":5526},{},[5527],{"type":603,"value":5528},"选项B -笑着鼓励她要继续加油。",{"type":597,"tag":606,"props":5530,"children":5531},{},[5532],{"type":603,"value":5533},"结局B -小女孩冲你露出一个可爱的笑容，收获了一整天的好心情。",{"type":597,"tag":606,"props":5535,"children":5536},{},[5537,5551,5558],{"type":597,"tag":886,"props":5538,"children":5541},{"href":5539,"rel":5540},"https://www.3dmgame.com/gl/3828383.html",[890],[5542,5544,5549],{"type":603,"value":5543},"鬼谷八荒全奇遇任务攻略 ",{"type":597,"tag":1733,"props":5545,"children":5546},{},[5547],{"type":603,"value":5548},"全奇遇事件选择及奖励",{"type":603,"value":5550},"3DM单机 (",{"type":597,"tag":886,"props":5552,"children":5555},{"href":5553,"rel":5554},"http://3dmgame.com",[890],[5556],{"type":603,"value":5557},"3dmgame.com",{"type":597,"tag":886,"props":5559,"children":5561},{"href":5539,"rel":5560},[890],[5562],{"type":603,"value":3748},{"type":597,"tag":1023,"props":5564,"children":5566},{"id":5565},"外道巢穴",[5567],{"type":597,"tag":1080,"props":5568,"children":5569},{},[5570],{"type":603,"value":5565},{"type":603,"value":5572},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":5574,"children":5575},{},[5576,5609],{"type":597,"tag":1941,"props":5577,"children":5578},{},[5579],{"type":597,"tag":1945,"props":5580,"children":5581},{},[5582,5587,5592,5604],{"type":597,"tag":1949,"props":5583,"children":5584},{},[5585],{"type":603,"value":5586},"名称",{"type":597,"tag":1949,"props":5588,"children":5589},{},[5590],{"type":603,"value":5591},"难度",{"type":597,"tag":1949,"props":5593,"children":5594},{},[5595,5597],{"type":603,"value":5596},"转盘检定",{"type":597,"tag":886,"props":5598,"children":5601},{"href":5599,"rel":5600},"https://taiwu.huijiwiki.com/wiki/%E5%A4%96%E9%81%93%E5%B7%A2%E7%A9%B4#cite_note-1",[890],[5602],{"type":603,"value":5603},"^[1]^",{"type":597,"tag":1949,"props":5605,"children":5606},{},[5607],{"type":603,"value":5608},"区域",{"type":597,"tag":1963,"props":5610,"children":5611},{},[5612,5635,5652,5674,5691,5714,5731,5754,5771,5794,5811,5833,5850,5873,5890,5913,5930,5953,5970,5992,6009,6032,6049,6070],{"type":597,"tag":1945,"props":5613,"children":5614},{},[5615,5620,5625,5630],{"type":597,"tag":1970,"props":5616,"children":5617},{},[5618],{"type":603,"value":5619},"恶丐窝",{"type":597,"tag":1970,"props":5621,"children":5622},{},[5623],{"type":603,"value":5624},"1-1",{"type":597,"tag":1970,"props":5626,"children":5627},{},[5628],{"type":603,"value":5629},"毒术 杂学（10、20、30、40、50）",{"type":597,"tag":1970,"props":5631,"children":5632},{},[5633],{"type":603,"value":5634},"乡村1 废墟2",{"type":597,"tag":1945,"props":5636,"children":5637},{},[5638,5643,5646,5649],{"type":597,"tag":1970,"props":5639,"children":5640},{},[5641],{"type":603,"value":5642},"一伙恶丐群聚于此地，他们不仅时常骚扰附近的百姓与旅人，还向周边散播着恶毒与疾病……",{"type":597,"tag":1970,"props":5644,"children":5645},{},[],{"type":597,"tag":1970,"props":5647,"children":5648},{},[],{"type":597,"tag":1970,"props":5650,"children":5651},{},[],{"type":597,"tag":1945,"props":5653,"children":5654},{},[5655,5660,5664,5669],{"type":597,"tag":1970,"props":5656,"children":5657},{},[5658],{"type":603,"value":5659},"贼人营寨",{"type":597,"tag":1970,"props":5661,"children":5662},{},[5663],{"type":603,"value":5624},{"type":597,"tag":1970,"props":5665,"children":5666},{},[5667],{"type":603,"value":5668},"巧匠 杂学（10、20、30、40、50）",{"type":597,"tag":1970,"props":5670,"children":5671},{},[5672],{"type":603,"value":5673},"营寨1 洞穴2",{"type":597,"tag":1945,"props":5675,"children":5676},{},[5677,5682,5685,5688],{"type":597,"tag":1970,"props":5678,"children":5679},{},[5680],{"type":603,"value":5681},"一伙狡猾的贼人隐匿于此地，他们总在夜间行动，专门窃夺无辜百姓的财物……",{"type":597,"tag":1970,"props":5683,"children":5684},{},[],{"type":597,"tag":1970,"props":5686,"children":5687},{},[],{"type":597,"tag":1970,"props":5689,"children":5690},{},[],{"type":597,"tag":1945,"props":5692,"children":5693},{},[5694,5699,5704,5709],{"type":597,"tag":1970,"props":5695,"children":5696},{},[5697],{"type":603,"value":5698},"悍匪砦",{"type":597,"tag":1970,"props":5700,"children":5701},{},[5702],{"type":603,"value":5703},"2-2",{"type":597,"tag":1970,"props":5705,"children":5706},{},[5707],{"type":603,"value":5708},"锻造 杂学（20、40、60、80、100）",{"type":597,"tag":1970,"props":5710,"children":5711},{},[5712],{"type":603,"value":5713},"沙漠2 营寨3",{"type":597,"tag":1945,"props":5715,"children":5716},{},[5717,5722,5725,5728],{"type":597,"tag":1970,"props":5718,"children":5719},{},[5720],{"type":603,"value":5721},"大批气焰嚣张的匪类于此地占路夺桥，拉帮结派，方圆数百里内，受其欺凌者不计其数……",{"type":597,"tag":1970,"props":5723,"children":5724},{},[],{"type":597,"tag":1970,"props":5726,"children":5727},{},[],{"type":597,"tag":1970,"props":5729,"children":5730},{},[],{"type":597,"tag":1945,"props":5732,"children":5733},{},[5734,5739,5744,5749],{"type":597,"tag":1970,"props":5735,"children":5736},{},[5737],{"type":603,"value":5738},"叛徒结伙",{"type":597,"tag":1970,"props":5740,"children":5741},{},[5742],{"type":603,"value":5743},"3-3",{"type":597,"tag":1970,"props":5745,"children":5746},{},[5747],{"type":603,"value":5748},"制木 杂学（30、60、90、120、150）",{"type":597,"tag":1970,"props":5750,"children":5751},{},[5752],{"type":603,"value":5753},"乡村2 树林3",{"type":597,"tag":1945,"props":5755,"children":5756},{},[5757,5762,5765,5768],{"type":597,"tag":1970,"props":5758,"children":5759},{},[5760],{"type":603,"value":5761},"此地聚集了许多来自不同门派的弃徒，他们或为复仇，或为奸恶目的，最终结成一伙，为害江湖……",{"type":597,"tag":1970,"props":5763,"children":5764},{},[],{"type":597,"tag":1970,"props":5766,"children":5767},{},[],{"type":597,"tag":1970,"props":5769,"children":5770},{},[],{"type":597,"tag":1945,"props":5772,"children":5773},{},[5774,5779,5784,5789],{"type":597,"tag":1970,"props":5775,"children":5776},{},[5777],{"type":603,"value":5778},"恶人谷",{"type":597,"tag":1970,"props":5780,"children":5781},{},[5782],{"type":603,"value":5783},"4-4",{"type":597,"tag":1970,"props":5785,"children":5786},{},[5787],{"type":603,"value":5788},"术数 杂学（40、80、120、160、200）",{"type":597,"tag":1970,"props":5790,"children":5791},{},[5792],{"type":603,"value":5793},"山岭2 营寨2 峡谷3",{"type":597,"tag":1945,"props":5795,"children":5796},{},[5797,5802,5805,5808],{"type":597,"tag":1970,"props":5798,"children":5799},{},[5800],{"type":603,"value":5801},"许多同时身负正邪两道数笔血债的亡命之徒盘踞于此地，因为过着刀口舔血、朝不保夕的日子，故而异常的凶恶……",{"type":597,"tag":1970,"props":5803,"children":5804},{},[],{"type":597,"tag":1970,"props":5806,"children":5807},{},[],{"type":597,"tag":1970,"props":5809,"children":5810},{},[],{"type":597,"tag":1945,"props":5812,"children":5813},{},[5814,5819,5823,5828],{"type":597,"tag":1970,"props":5815,"children":5816},{},[5817],{"type":603,"value":5818},"迷香阵",{"type":597,"tag":1970,"props":5820,"children":5821},{},[5822],{"type":603,"value":5783},{"type":597,"tag":1970,"props":5824,"children":5825},{},[5826],{"type":603,"value":5827},"织锦 音律（40、80、120、160、200）",{"type":597,"tag":1970,"props":5829,"children":5830},{},[5831],{"type":603,"value":5832},"洞穴2 树林2 花海3",{"type":597,"tag":1945,"props":5834,"children":5835},{},[5836,5841,5844,5847],{"type":597,"tag":1970,"props":5837,"children":5838},{},[5839],{"type":603,"value":5840},"迷香阵笼罩在一片红雾之内，伴随着其中的细细笑语和靡靡乐音，阵阵异香不断地飘送出来……",{"type":597,"tag":1970,"props":5842,"children":5843},{},[],{"type":597,"tag":1970,"props":5845,"children":5846},{},[],{"type":597,"tag":1970,"props":5848,"children":5849},{},[],{"type":597,"tag":1945,"props":5851,"children":5852},{},[5853,5858,5863,5868],{"type":597,"tag":1970,"props":5854,"children":5855},{},[5856],{"type":603,"value":5857},"乱葬岗",{"type":597,"tag":1970,"props":5859,"children":5860},{},[5861],{"type":603,"value":5862},"5-5",{"type":597,"tag":1970,"props":5864,"children":5865},{},[5866],{"type":603,"value":5867},"医术 毒术（50、100、150、200、250）",{"type":597,"tag":1970,"props":5869,"children":5870},{},[5871],{"type":603,"value":5872},"庙宇2 废墟3 古墓3",{"type":597,"tag":1945,"props":5874,"children":5875},{},[5876,5881,5884,5887],{"type":597,"tag":1970,"props":5877,"children":5878},{},[5879],{"type":603,"value":5880},"弃置着众多枉死者尸身的不祥之地，随着一些江湖上的诡怪术士在此地频繁出入，更为此地蒙上了一层可怖的阴影……",{"type":597,"tag":1970,"props":5882,"children":5883},{},[],{"type":597,"tag":1970,"props":5885,"children":5886},{},[],{"type":597,"tag":1970,"props":5888,"children":5889},{},[],{"type":597,"tag":1945,"props":5891,"children":5892},{},[5893,5898,5903,5908],{"type":597,"tag":1970,"props":5894,"children":5895},{},[5896],{"type":603,"value":5897},"异士居",{"type":597,"tag":1970,"props":5899,"children":5900},{},[5901],{"type":603,"value":5902},"6-6",{"type":597,"tag":1970,"props":5904,"children":5905},{},[5906],{"type":603,"value":5907},"音律 弈棋 诗书 绘画 品鉴（60、120、180、240、300）",{"type":597,"tag":1970,"props":5909,"children":5910},{},[5911],{"type":603,"value":5912},"湖泊2 茅庐3 古迹3",{"type":597,"tag":1945,"props":5914,"children":5915},{},[5916,5921,5924,5927],{"type":597,"tag":1970,"props":5917,"children":5918},{},[5919],{"type":603,"value":5920},"一些左道异士结庐居于此地，这些异士虽身怀绝技，但性情乖戾，善恶不分，行事只凭一时之兴……",{"type":597,"tag":1970,"props":5922,"children":5923},{},[],{"type":597,"tag":1970,"props":5925,"children":5926},{},[],{"type":597,"tag":1970,"props":5928,"children":5929},{},[],{"type":597,"tag":1945,"props":5931,"children":5932},{},[5933,5938,5943,5948],{"type":597,"tag":1970,"props":5934,"children":5935},{},[5936],{"type":603,"value":5937},"邪人死地",{"type":597,"tag":1970,"props":5939,"children":5940},{},[5941],{"type":603,"value":5942},"7-7",{"type":597,"tag":1970,"props":5944,"children":5945},{},[5946],{"type":603,"value":5947},"道法（70、140、210、280、350）",{"type":597,"tag":1970,"props":5949,"children":5950},{},[5951],{"type":603,"value":5952},"洞穴2 潭泽2 林野3 古迹3",{"type":597,"tag":1945,"props":5954,"children":5955},{},[5956,5961,5964,5967],{"type":597,"tag":1970,"props":5957,"children":5958},{},[5959],{"type":603,"value":5960},"大批异疆邪教中人群聚于此，他们设坛祭鬼，施烟布瘴，每日杀人取乐，闻者无不色变……",{"type":597,"tag":1970,"props":5962,"children":5963},{},[],{"type":597,"tag":1970,"props":5965,"children":5966},{},[],{"type":597,"tag":1970,"props":5968,"children":5969},{},[],{"type":597,"tag":1945,"props":5971,"children":5972},{},[5973,5978,5982,5987],{"type":597,"tag":1970,"props":5974,"children":5975},{},[5976],{"type":603,"value":5977},"修罗场",{"type":597,"tag":1970,"props":5979,"children":5980},{},[5981],{"type":603,"value":5942},{"type":597,"tag":1970,"props":5983,"children":5984},{},[5985],{"type":603,"value":5986},"医术 杂学（70、140、210、280、350）",{"type":597,"tag":1970,"props":5988,"children":5989},{},[5990],{"type":603,"value":5991},"荒野2 沙漠2 营寨3 废墟3",{"type":597,"tag":1945,"props":5993,"children":5994},{},[5995,6000,6003,6006],{"type":597,"tag":1970,"props":5996,"children":5997},{},[5998],{"type":603,"value":5999},"发生过极多可怕杀戮的凶恶之地，许多曾在杀戮中失却心智的疯子与狂人受到炼心师的操弄，仍不断游荡在此地附近……",{"type":597,"tag":1970,"props":6001,"children":6002},{},[],{"type":597,"tag":1970,"props":6004,"children":6005},{},[],{"type":597,"tag":1970,"props":6007,"children":6008},{},[],{"type":597,"tag":1945,"props":6010,"children":6011},{},[6012,6017,6022,6027],{"type":597,"tag":1970,"props":6013,"children":6014},{},[6015],{"type":603,"value":6016},"群魔乱舞",{"type":597,"tag":1970,"props":6018,"children":6019},{},[6020],{"type":603,"value":6021},"8-8",{"type":597,"tag":1970,"props":6023,"children":6024},{},[6025],{"type":603,"value":6026},"佛学（80、160、240、320、400）",{"type":597,"tag":1970,"props":6028,"children":6029},{},[6030],{"type":603,"value":6031},"洞穴3 庙宇3 废墟3 古墓3",{"type":597,"tag":1945,"props":6033,"children":6034},{},[6035,6040,6043,6046],{"type":597,"tag":1970,"props":6036,"children":6037},{},[6038],{"type":603,"value":6039},"一支无名魔教的教众占据着此地，他们为了壮大自身的声势，不断以骇人的手段残害着武林正道的人士……",{"type":597,"tag":1970,"props":6041,"children":6042},{},[],{"type":597,"tag":1970,"props":6044,"children":6045},{},[],{"type":597,"tag":1970,"props":6047,"children":6048},{},[],{"type":597,"tag":1945,"props":6050,"children":6051},{},[6052,6057,6062,6067],{"type":597,"tag":1970,"props":6053,"children":6054},{},[6055],{"type":603,"value":6056},"弃世绝境",{"type":597,"tag":1970,"props":6058,"children":6059},{},[6060],{"type":603,"value":6061},"9-9",{"type":597,"tag":1970,"props":6063,"children":6064},{},[6065],{"type":603,"value":6066},"术数 佛学 道法（90、180、270、360、450）",{"type":597,"tag":1970,"props":6068,"children":6069},{},[],{"type":597,"tag":1945,"props":6071,"children":6072},{},[6073,6078,6081,6084],{"type":597,"tag":1970,"props":6074,"children":6075},{},[6076],{"type":603,"value":6077},"此地曾是某处世外绝境的屏障，直到无休止的江湖纷争蔓延至此，那些原本隐居于绝境中的人满怀着仇恨被迫重返尘世…",{"type":597,"tag":1970,"props":6079,"children":6080},{},[],{"type":597,"tag":1970,"props":6082,"children":6083},{},[],{"type":597,"tag":1970,"props":6085,"children":6086},{},[],{"title":591,"searchDepth":787,"depth":787,"links":6088},[6089,6090,6091],{"id":4933,"depth":1530,"text":4933},{"id":5149,"depth":1530,"text":5149},{"id":5565,"depth":1530,"text":5565},"content:gyj:2022-08-22-奇遇事件.md","gyj/2022-08-22-奇遇事件.md",{"_path":208,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":207,"description":6095,"body":6096,"_type":791,"_id":6114,"_source":793,"_file":6115,"_extension":795,"date":4926},"我来到了这个世界，发现身上仅有4000块钱，四周转了转，由于和城镇关系不足，很多地方都去不了，而提升关系度的唯一办法就是去城镇接取任务。每天晚上我都得去附近的旅馆进行歇息，这会花费我好多银子，我得第一个目标将变为盖一所不大的房子。我努力的将钱挣够了5000，在官府那里买下了我第一块地。我从杂货商人那里买了个设计卓开始了我的第一个房子的设计。简简单单的一个房子盒子就出来了。选了个绝佳的位置，填充材料，建造。随着房子的建立完成，每天醒来或者晚上回家，偶尔会有邻居来到我家门口拜托我帮一些小忙，随着日子的过去，我和村里人的关系越来越好。能在城镇里去的地方也越来越多，我喜欢去那些没有去过的地方，因为有时可能会发现一些小惊喜，比如一个未打开的宝箱，一些珍贵的资源，和有趣的人。随着房子的建成，需要的家具和武器越来越多，消耗的资源也越来越多，而城镇的资源是有限的，我开始像城镇周围的其他城市开始探索。",{"type":594,"children":6097,"toc":6112},[6098,6102,6107],{"type":597,"tag":606,"props":6099,"children":6100},{},[6101],{"type":603,"value":6095},{"type":597,"tag":606,"props":6103,"children":6104},{},[6105],{"type":603,"value":6106},"城镇里偶尔会有一些山贼的出现，在我采集资源的时候经常会碰到，他们常常杀人如麻，当然我也不是好惹的，城镇里的人说当杀掉一百个山贼的时候，这个城镇将会有山贼王的降临。山贼王出现的时候，城市里商人不会出现，官府也不会有人，每个人都会躲在家里，连城镇也出不去，直到消灭掉他。",{"type":597,"tag":606,"props":6108,"children":6109},{},[6110],{"type":603,"value":6111},"开始跑商，跑商随着游戏的进行，被门派压榨，越来越难，有一天，我突然想改变这个世界，我开始建立门派。招收人员",{"title":591,"searchDepth":787,"depth":787,"links":6113},[],"content:gyj:2022-08-22-游戏流程.md","gyj/2022-08-22-游戏流程.md",{"_path":211,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":210,"description":6117,"body":6118,"_type":791,"_id":7223,"_source":793,"_file":7224,"_extension":795,"date":4926},"物品产出表野外食物产出作物 浆果 甜菜 出现少，加体力少树木掉落 蜂蜜，松果。。水果动物掉落 肉。不掉落皮毛，因为要养殖鱼产出种类树木制作家具和装备作物制作食物,增加体力和非战斗相关的buff卖钱药材制作药品,增加血和蓝,以及战斗相关的buff动物皮毛用来制造衣服肉用来制作食物鱼类用来制作食物矿石可以用来进行武器的制造和升级宝石宝石可以用来制作物品通常是最爱的礼物或喜欢的礼物。偶尔会出现宝石洞固定日期会产出持续三到五天翡翠价格非常昂贵,除了卖钱别无他用翡翠原石鉴定而得城市产出说明一些城市有特殊产出,固定的除特殊产出,其他的都随机分布地块应该有一些标记,标记这个地方是否可以生成矿,是否可以有药材",{"type":594,"children":6119,"toc":7210},[6120,6124,6129,6134,6139,6144,6149,6154,6291,6296,6339,6343,6351,6352,6569,6573,6591,6593,6637,6641,6649,6651,6770,6774,6777,6778,6821,6825,6828,6829,6872,6876,6879,6881,7107,7111,7114,7115,7158,7163,7166,7167],{"type":597,"tag":857,"props":6121,"children":6122},{"id":210},[6123],{"type":603,"value":210},{"type":597,"tag":1023,"props":6125,"children":6127},{"id":6126},"野外食物产出",[6128],{"type":603,"value":6126},{"type":597,"tag":606,"props":6130,"children":6131},{},[6132],{"type":603,"value":6133},"作物 浆果 甜菜 出现少，加体力少",{"type":597,"tag":606,"props":6135,"children":6136},{},[6137],{"type":603,"value":6138},"树木掉落 蜂蜜，松果。。水果",{"type":597,"tag":606,"props":6140,"children":6141},{},[6142],{"type":603,"value":6143},"动物掉落 肉。不掉落皮毛，因为要养殖",{"type":597,"tag":606,"props":6145,"children":6146},{},[6147],{"type":603,"value":6148},"鱼",{"type":597,"tag":598,"props":6150,"children":6152},{"id":6151},"产出种类",[6153],{"type":603,"value":6151},{"type":597,"tag":1321,"props":6155,"children":6156},{},[6157,6170,6188,6201,6219,6232,6245,6273],{"type":597,"tag":807,"props":6158,"children":6159},{},[6160,6162],{"type":603,"value":6161},"树木",{"type":597,"tag":1321,"props":6163,"children":6164},{},[6165],{"type":597,"tag":807,"props":6166,"children":6167},{},[6168],{"type":603,"value":6169},"制作家具和装备",{"type":597,"tag":807,"props":6171,"children":6172},{},[6173,6175],{"type":603,"value":6174},"作物",{"type":597,"tag":1321,"props":6176,"children":6177},{},[6178,6183],{"type":597,"tag":807,"props":6179,"children":6180},{},[6181],{"type":603,"value":6182},"制作食物,增加体力和非战斗相关的buff",{"type":597,"tag":807,"props":6184,"children":6185},{},[6186],{"type":603,"value":6187},"卖钱",{"type":597,"tag":807,"props":6189,"children":6190},{},[6191,6193],{"type":603,"value":6192},"药材",{"type":597,"tag":1321,"props":6194,"children":6195},{},[6196],{"type":597,"tag":807,"props":6197,"children":6198},{},[6199],{"type":603,"value":6200},"制作药品,增加血和蓝,以及战斗相关的buff",{"type":597,"tag":807,"props":6202,"children":6203},{},[6204,6206],{"type":603,"value":6205},"动物",{"type":597,"tag":1321,"props":6207,"children":6208},{},[6209,6214],{"type":597,"tag":807,"props":6210,"children":6211},{},[6212],{"type":603,"value":6213},"皮毛用来制造衣服",{"type":597,"tag":807,"props":6215,"children":6216},{},[6217],{"type":603,"value":6218},"肉用来制作食物",{"type":597,"tag":807,"props":6220,"children":6221},{},[6222,6224],{"type":603,"value":6223},"鱼类",{"type":597,"tag":1321,"props":6225,"children":6226},{},[6227],{"type":597,"tag":807,"props":6228,"children":6229},{},[6230],{"type":603,"value":6231},"用来制作食物",{"type":597,"tag":807,"props":6233,"children":6234},{},[6235,6237],{"type":603,"value":6236},"矿石",{"type":597,"tag":1321,"props":6238,"children":6239},{},[6240],{"type":597,"tag":807,"props":6241,"children":6242},{},[6243],{"type":603,"value":6244},"可以用来进行武器的制造和升级",{"type":597,"tag":807,"props":6246,"children":6247},{},[6248,6250],{"type":603,"value":6249},"宝石",{"type":597,"tag":1321,"props":6251,"children":6252},{},[6253,6258,6263,6268],{"type":597,"tag":807,"props":6254,"children":6255},{},[6256],{"type":603,"value":6257},"宝石可以用来制作物品",{"type":597,"tag":807,"props":6259,"children":6260},{},[6261],{"type":603,"value":6262},"通常是最爱的礼物或喜欢的礼物。",{"type":597,"tag":807,"props":6264,"children":6265},{},[6266],{"type":603,"value":6267},"偶尔会出现宝石洞",{"type":597,"tag":807,"props":6269,"children":6270},{},[6271],{"type":603,"value":6272},"固定日期会产出持续三到五天",{"type":597,"tag":807,"props":6274,"children":6275},{},[6276,6278],{"type":603,"value":6277},"翡翠",{"type":597,"tag":1321,"props":6279,"children":6280},{},[6281,6286],{"type":597,"tag":807,"props":6282,"children":6283},{},[6284],{"type":603,"value":6285},"价格非常昂贵,除了卖钱别无他用",{"type":597,"tag":807,"props":6287,"children":6288},{},[6289],{"type":603,"value":6290},"翡翠原石鉴定而得",{"type":597,"tag":598,"props":6292,"children":6294},{"id":6293},"城市产出说明",[6295],{"type":603,"value":6293},{"type":597,"tag":1321,"props":6297,"children":6298},{},[6299,6304,6309,6314,6319,6324,6329,6334],{"type":597,"tag":807,"props":6300,"children":6301},{},[6302],{"type":603,"value":6303},"一些城市有特殊产出,固定的",{"type":597,"tag":807,"props":6305,"children":6306},{},[6307],{"type":603,"value":6308},"除特殊产出,其他的都随机分布",{"type":597,"tag":807,"props":6310,"children":6311},{},[6312],{"type":603,"value":6313},"地块应该有一些标记,标记这个地方是否可以生成矿,是否可以有药材,是否可以有食材,是否可以有木头",{"type":597,"tag":807,"props":6315,"children":6316},{},[6317],{"type":603,"value":6318},"玩家出生地的产物,一定是低级的产物,不然没法进行初级制作",{"type":597,"tag":807,"props":6320,"children":6321},{},[6322],{"type":603,"value":6323},"物依稀为贵,产量越少,等级越高",{"type":597,"tag":807,"props":6325,"children":6326},{},[6327],{"type":603,"value":6328},"食物可以补充体力,晚上睡觉可以补充体力",{"type":597,"tag":807,"props":6330,"children":6331},{},[6332],{"type":603,"value":6333},"晚上十点到早上六点,每小时额外扣除体力,以及心情",{"type":597,"tag":807,"props":6335,"children":6336},{},[6337],{"type":603,"value":6338},"送礼好感度=====获取的难度,衡量产出时间,以及掉落概率",{"type":597,"tag":598,"props":6340,"children":6341},{"id":6161},[6342],{"type":603,"value":6161},{"type":597,"tag":617,"props":6344,"children":6345},{},[6346],{"type":597,"tag":606,"props":6347,"children":6348},{},[6349],{"type":603,"value":6350},"售价和稀有度有关,稀有度越高,价格越高",{"type":603,"value":1935},{"type":597,"tag":1937,"props":6353,"children":6354},{},[6355,6380],{"type":597,"tag":1941,"props":6356,"children":6357},{},[6358],{"type":597,"tag":1945,"props":6359,"children":6360},{},[6361,6365,6370,6375],{"type":597,"tag":1949,"props":6362,"children":6363},{},[6364],{"type":603,"value":6161},{"type":597,"tag":1949,"props":6366,"children":6367},{},[6368],{"type":603,"value":6369},"掉落",{"type":597,"tag":1949,"props":6371,"children":6372},{},[6373],{"type":603,"value":6374},"等级",{"type":597,"tag":1949,"props":6376,"children":6377},{},[6378],{"type":603,"value":6379},"售价",{"type":597,"tag":1963,"props":6381,"children":6382},{},[6383,6404,6425,6445,6466,6487,6508,6529,6550],{"type":597,"tag":1945,"props":6384,"children":6385},{},[6386,6391,6396,6401],{"type":597,"tag":1970,"props":6387,"children":6388},{},[6389],{"type":603,"value":6390},"砂树",{"type":597,"tag":1970,"props":6392,"children":6393},{},[6394],{"type":603,"value":6395},"木头",{"type":597,"tag":1970,"props":6397,"children":6398},{},[6399],{"type":603,"value":6400},"0",{"type":597,"tag":1970,"props":6402,"children":6403},{},[],{"type":597,"tag":1945,"props":6405,"children":6406},{},[6407,6412,6417,6422],{"type":597,"tag":1970,"props":6408,"children":6409},{},[6410],{"type":603,"value":6411},"松树",{"type":597,"tag":1970,"props":6413,"children":6414},{},[6415],{"type":603,"value":6416},"木头,松木",{"type":597,"tag":1970,"props":6418,"children":6419},{},[6420],{"type":603,"value":6421},"1",{"type":597,"tag":1970,"props":6423,"children":6424},{},[],{"type":597,"tag":1945,"props":6426,"children":6427},{},[6428,6433,6438,6442],{"type":597,"tag":1970,"props":6429,"children":6430},{},[6431],{"type":603,"value":6432},"冷杉",{"type":597,"tag":1970,"props":6434,"children":6435},{},[6436],{"type":603,"value":6437},"木头,铁力木",{"type":597,"tag":1970,"props":6439,"children":6440},{},[6441],{"type":603,"value":2070},{"type":597,"tag":1970,"props":6443,"children":6444},{},[],{"type":597,"tag":1945,"props":6446,"children":6447},{},[6448,6453,6458,6463],{"type":597,"tag":1970,"props":6449,"children":6450},{},[6451],{"type":603,"value":6452},"柏树",{"type":597,"tag":1970,"props":6454,"children":6455},{},[6456],{"type":603,"value":6457},"木头,乌木",{"type":597,"tag":1970,"props":6459,"children":6460},{},[6461],{"type":603,"value":6462},"3",{"type":597,"tag":1970,"props":6464,"children":6465},{},[],{"type":597,"tag":1945,"props":6467,"children":6468},{},[6469,6474,6479,6484],{"type":597,"tag":1970,"props":6470,"children":6471},{},[6472],{"type":603,"value":6473},"杨树",{"type":597,"tag":1970,"props":6475,"children":6476},{},[6477],{"type":603,"value":6478},"木头,黄杨木",{"type":597,"tag":1970,"props":6480,"children":6481},{},[6482],{"type":603,"value":6483},"4",{"type":597,"tag":1970,"props":6485,"children":6486},{},[],{"type":597,"tag":1945,"props":6488,"children":6489},{},[6490,6495,6500,6505],{"type":597,"tag":1970,"props":6491,"children":6492},{},[6493],{"type":603,"value":6494},"榉树",{"type":597,"tag":1970,"props":6496,"children":6497},{},[6498],{"type":603,"value":6499},"木头,榉木",{"type":597,"tag":1970,"props":6501,"children":6502},{},[6503],{"type":603,"value":6504},"5",{"type":597,"tag":1970,"props":6506,"children":6507},{},[],{"type":597,"tag":1945,"props":6509,"children":6510},{},[6511,6516,6521,6526],{"type":597,"tag":1970,"props":6512,"children":6513},{},[6514],{"type":603,"value":6515},"楠树",{"type":597,"tag":1970,"props":6517,"children":6518},{},[6519],{"type":603,"value":6520},"木头,楠木",{"type":597,"tag":1970,"props":6522,"children":6523},{},[6524],{"type":603,"value":6525},"6",{"type":597,"tag":1970,"props":6527,"children":6528},{},[],{"type":597,"tag":1945,"props":6530,"children":6531},{},[6532,6537,6542,6547],{"type":597,"tag":1970,"props":6533,"children":6534},{},[6535],{"type":603,"value":6536},"白桦",{"type":597,"tag":1970,"props":6538,"children":6539},{},[6540],{"type":603,"value":6541},"木头,桦木",{"type":597,"tag":1970,"props":6543,"children":6544},{},[6545],{"type":603,"value":6546},"7",{"type":597,"tag":1970,"props":6548,"children":6549},{},[],{"type":597,"tag":1945,"props":6551,"children":6552},{},[6553,6558,6561,6566],{"type":597,"tag":1970,"props":6554,"children":6555},{},[6556],{"type":603,"value":6557},"望天树",{"type":597,"tag":1970,"props":6559,"children":6560},{},[],{"type":597,"tag":1970,"props":6562,"children":6563},{},[6564],{"type":603,"value":6565},"8",{"type":597,"tag":1970,"props":6567,"children":6568},{},[],{"type":597,"tag":598,"props":6570,"children":6571},{"id":6174},[6572],{"type":603,"value":6174},{"type":597,"tag":617,"props":6574,"children":6575},{},[6576,6581,6586],{"type":597,"tag":606,"props":6577,"children":6578},{},[6579],{"type":603,"value":6580},"根据素材决定会有哪些作物",{"type":597,"tag":606,"props":6582,"children":6583},{},[6584],{"type":603,"value":6585},"一般的计算公式为 [( 最多收获次数 x 单位售价 ) - 种子购买价格 ] / 生产周期",{"type":597,"tag":606,"props":6587,"children":6588},{},[6589],{"type":603,"value":6590},"生产周期 = 成熟所需天数 +（最多收获次数 - 1）x 重新生长天数",{"type":603,"value":6592},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":6594,"children":6595},{},[6596,6619],{"type":597,"tag":1941,"props":6597,"children":6598},{},[6599],{"type":597,"tag":1945,"props":6600,"children":6601},{},[6602,6606,6610,6614],{"type":597,"tag":1949,"props":6603,"children":6604},{},[6605],{"type":603,"value":6174},{"type":597,"tag":1949,"props":6607,"children":6608},{},[6609],{"type":603,"value":6369},{"type":597,"tag":1949,"props":6611,"children":6612},{},[6613],{"type":603,"value":6374},{"type":597,"tag":1949,"props":6615,"children":6616},{},[6617],{"type":603,"value":6618},"环境",{"type":597,"tag":1963,"props":6620,"children":6621},{},[6622],{"type":597,"tag":1945,"props":6623,"children":6624},{},[6625,6628,6631,6634],{"type":597,"tag":1970,"props":6626,"children":6627},{},[],{"type":597,"tag":1970,"props":6629,"children":6630},{},[],{"type":597,"tag":1970,"props":6632,"children":6633},{},[],{"type":597,"tag":1970,"props":6635,"children":6636},{},[],{"type":597,"tag":598,"props":6638,"children":6639},{"id":6192},[6640],{"type":603,"value":6192},{"type":597,"tag":617,"props":6642,"children":6643},{},[6644],{"type":597,"tag":606,"props":6645,"children":6646},{},[6647],{"type":603,"value":6648},"药材的素材只有一种,分等级.然后产出",{"type":603,"value":6650},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":6652,"children":6653},{},[6654,6676],{"type":597,"tag":1941,"props":6655,"children":6656},{},[6657],{"type":597,"tag":1945,"props":6658,"children":6659},{},[6660,6664,6668,6672],{"type":597,"tag":1949,"props":6661,"children":6662},{},[6663],{"type":603,"value":6192},{"type":597,"tag":1949,"props":6665,"children":6666},{},[6667],{"type":603,"value":6369},{"type":597,"tag":1949,"props":6669,"children":6670},{},[6671],{"type":603,"value":6374},{"type":597,"tag":1949,"props":6673,"children":6674},{},[6675],{"type":603,"value":6618},{"type":597,"tag":1963,"props":6677,"children":6678},{},[6679,6697,6714,6731,6748],{"type":597,"tag":1945,"props":6680,"children":6681},{},[6682,6687,6690,6694],{"type":597,"tag":1970,"props":6683,"children":6684},{},[6685],{"type":603,"value":6686},"草药",{"type":597,"tag":1970,"props":6688,"children":6689},{},[],{"type":597,"tag":1970,"props":6691,"children":6692},{},[6693],{"type":603,"value":6421},{"type":597,"tag":1970,"props":6695,"children":6696},{},[],{"type":597,"tag":1945,"props":6698,"children":6699},{},[6700,6704,6707,6711],{"type":597,"tag":1970,"props":6701,"children":6702},{},[6703],{"type":603,"value":6686},{"type":597,"tag":1970,"props":6705,"children":6706},{},[],{"type":597,"tag":1970,"props":6708,"children":6709},{},[6710],{"type":603,"value":2070},{"type":597,"tag":1970,"props":6712,"children":6713},{},[],{"type":597,"tag":1945,"props":6715,"children":6716},{},[6717,6721,6724,6728],{"type":597,"tag":1970,"props":6718,"children":6719},{},[6720],{"type":603,"value":6686},{"type":597,"tag":1970,"props":6722,"children":6723},{},[],{"type":597,"tag":1970,"props":6725,"children":6726},{},[6727],{"type":603,"value":6462},{"type":597,"tag":1970,"props":6729,"children":6730},{},[],{"type":597,"tag":1945,"props":6732,"children":6733},{},[6734,6738,6741,6745],{"type":597,"tag":1970,"props":6735,"children":6736},{},[6737],{"type":603,"value":6686},{"type":597,"tag":1970,"props":6739,"children":6740},{},[],{"type":597,"tag":1970,"props":6742,"children":6743},{},[6744],{"type":603,"value":6483},{"type":597,"tag":1970,"props":6746,"children":6747},{},[],{"type":597,"tag":1945,"props":6749,"children":6750},{},[6751,6755,6763,6767],{"type":597,"tag":1970,"props":6752,"children":6753},{},[6754],{"type":603,"value":6686},{"type":597,"tag":1970,"props":6756,"children":6757},{},[6758],{"type":597,"tag":1080,"props":6759,"children":6760},{},[6761],{"type":603,"value":6762},"天麻,藏红花,雪莲花,冬虫夏草,人参,天冬,贝母,肉苁蓉",{"type":597,"tag":1970,"props":6764,"children":6765},{},[6766],{"type":603,"value":6504},{"type":597,"tag":1970,"props":6768,"children":6769},{},[],{"type":597,"tag":598,"props":6771,"children":6772},{"id":6205},[6773],{"type":603,"value":6205},{"type":597,"tag":617,"props":6775,"children":6776},{},[],{"type":603,"value":6592},{"type":597,"tag":1937,"props":6779,"children":6780},{},[6781,6803],{"type":597,"tag":1941,"props":6782,"children":6783},{},[6784],{"type":597,"tag":1945,"props":6785,"children":6786},{},[6787,6791,6795,6799],{"type":597,"tag":1949,"props":6788,"children":6789},{},[6790],{"type":603,"value":6205},{"type":597,"tag":1949,"props":6792,"children":6793},{},[6794],{"type":603,"value":6369},{"type":597,"tag":1949,"props":6796,"children":6797},{},[6798],{"type":603,"value":6374},{"type":597,"tag":1949,"props":6800,"children":6801},{},[6802],{"type":603,"value":6618},{"type":597,"tag":1963,"props":6804,"children":6805},{},[6806],{"type":597,"tag":1945,"props":6807,"children":6808},{},[6809,6812,6815,6818],{"type":597,"tag":1970,"props":6810,"children":6811},{},[],{"type":597,"tag":1970,"props":6813,"children":6814},{},[],{"type":597,"tag":1970,"props":6816,"children":6817},{},[],{"type":597,"tag":1970,"props":6819,"children":6820},{},[],{"type":597,"tag":598,"props":6822,"children":6823},{"id":6223},[6824],{"type":603,"value":6223},{"type":597,"tag":617,"props":6826,"children":6827},{},[],{"type":603,"value":6592},{"type":597,"tag":1937,"props":6830,"children":6831},{},[6832,6854],{"type":597,"tag":1941,"props":6833,"children":6834},{},[6835],{"type":597,"tag":1945,"props":6836,"children":6837},{},[6838,6842,6846,6850],{"type":597,"tag":1949,"props":6839,"children":6840},{},[6841],{"type":603,"value":6223},{"type":597,"tag":1949,"props":6843,"children":6844},{},[6845],{"type":603,"value":6369},{"type":597,"tag":1949,"props":6847,"children":6848},{},[6849],{"type":603,"value":6374},{"type":597,"tag":1949,"props":6851,"children":6852},{},[6853],{"type":603,"value":6618},{"type":597,"tag":1963,"props":6855,"children":6856},{},[6857],{"type":597,"tag":1945,"props":6858,"children":6859},{},[6860,6863,6866,6869],{"type":597,"tag":1970,"props":6861,"children":6862},{},[],{"type":597,"tag":1970,"props":6864,"children":6865},{},[],{"type":597,"tag":1970,"props":6867,"children":6868},{},[],{"type":597,"tag":1970,"props":6870,"children":6871},{},[],{"type":597,"tag":598,"props":6873,"children":6874},{"id":6236},[6875],{"type":603,"value":6236},{"type":597,"tag":617,"props":6877,"children":6878},{},[],{"type":603,"value":6880},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":6882,"children":6883},{},[6884,6906],{"type":597,"tag":1941,"props":6885,"children":6886},{},[6887],{"type":597,"tag":1945,"props":6888,"children":6889},{},[6890,6894,6898,6902],{"type":597,"tag":1949,"props":6891,"children":6892},{},[6893],{"type":603,"value":6236},{"type":597,"tag":1949,"props":6895,"children":6896},{},[6897],{"type":603,"value":6369},{"type":597,"tag":1949,"props":6899,"children":6900},{},[6901],{"type":603,"value":6374},{"type":597,"tag":1949,"props":6903,"children":6904},{},[6905],{"type":603,"value":6618},{"type":597,"tag":1963,"props":6907,"children":6908},{},[6909,6926,6943,6960,6977,6994,7011,7028,7045,7062,7077,7092],{"type":597,"tag":1945,"props":6910,"children":6911},{},[6912,6917,6920,6923],{"type":597,"tag":1970,"props":6913,"children":6914},{},[6915],{"type":603,"value":6916},"石头",{"type":597,"tag":1970,"props":6918,"children":6919},{},[],{"type":597,"tag":1970,"props":6921,"children":6922},{},[],{"type":597,"tag":1970,"props":6924,"children":6925},{},[],{"type":597,"tag":1945,"props":6927,"children":6928},{},[6929,6934,6937,6940],{"type":597,"tag":1970,"props":6930,"children":6931},{},[6932],{"type":603,"value":6933},"铜矿",{"type":597,"tag":1970,"props":6935,"children":6936},{},[],{"type":597,"tag":1970,"props":6938,"children":6939},{},[],{"type":597,"tag":1970,"props":6941,"children":6942},{},[],{"type":597,"tag":1945,"props":6944,"children":6945},{},[6946,6951,6954,6957],{"type":597,"tag":1970,"props":6947,"children":6948},{},[6949],{"type":603,"value":6950},"锡矿",{"type":597,"tag":1970,"props":6952,"children":6953},{},[],{"type":597,"tag":1970,"props":6955,"children":6956},{},[],{"type":597,"tag":1970,"props":6958,"children":6959},{},[],{"type":597,"tag":1945,"props":6961,"children":6962},{},[6963,6968,6971,6974],{"type":597,"tag":1970,"props":6964,"children":6965},{},[6966],{"type":603,"value":6967},"铁矿",{"type":597,"tag":1970,"props":6969,"children":6970},{},[],{"type":597,"tag":1970,"props":6972,"children":6973},{},[],{"type":597,"tag":1970,"props":6975,"children":6976},{},[],{"type":597,"tag":1945,"props":6978,"children":6979},{},[6980,6985,6988,6991],{"type":597,"tag":1970,"props":6981,"children":6982},{},[6983],{"type":603,"value":6984},"铅矿",{"type":597,"tag":1970,"props":6986,"children":6987},{},[],{"type":597,"tag":1970,"props":6989,"children":6990},{},[],{"type":597,"tag":1970,"props":6992,"children":6993},{},[],{"type":597,"tag":1945,"props":6995,"children":6996},{},[6997,7002,7005,7008],{"type":597,"tag":1970,"props":6998,"children":6999},{},[7000],{"type":603,"value":7001},"银矿",{"type":597,"tag":1970,"props":7003,"children":7004},{},[],{"type":597,"tag":1970,"props":7006,"children":7007},{},[],{"type":597,"tag":1970,"props":7009,"children":7010},{},[],{"type":597,"tag":1945,"props":7012,"children":7013},{},[7014,7019,7022,7025],{"type":597,"tag":1970,"props":7015,"children":7016},{},[7017],{"type":603,"value":7018},"钨矿",{"type":597,"tag":1970,"props":7020,"children":7021},{},[],{"type":597,"tag":1970,"props":7023,"children":7024},{},[],{"type":597,"tag":1970,"props":7026,"children":7027},{},[],{"type":597,"tag":1945,"props":7029,"children":7030},{},[7031,7036,7039,7042],{"type":597,"tag":1970,"props":7032,"children":7033},{},[7034],{"type":603,"value":7035},"金矿",{"type":597,"tag":1970,"props":7037,"children":7038},{},[],{"type":597,"tag":1970,"props":7040,"children":7041},{},[],{"type":597,"tag":1970,"props":7043,"children":7044},{},[],{"type":597,"tag":1945,"props":7046,"children":7047},{},[7048,7053,7056,7059],{"type":597,"tag":1970,"props":7049,"children":7050},{},[7051],{"type":603,"value":7052},"铂金矿",{"type":597,"tag":1970,"props":7054,"children":7055},{},[],{"type":597,"tag":1970,"props":7057,"children":7058},{},[],{"type":597,"tag":1970,"props":7060,"children":7061},{},[],{"type":597,"tag":1945,"props":7063,"children":7064},{},[7065,7068,7071,7074],{"type":597,"tag":1970,"props":7066,"children":7067},{},[],{"type":597,"tag":1970,"props":7069,"children":7070},{},[],{"type":597,"tag":1970,"props":7072,"children":7073},{},[],{"type":597,"tag":1970,"props":7075,"children":7076},{},[],{"type":597,"tag":1945,"props":7078,"children":7079},{},[7080,7083,7086,7089],{"type":597,"tag":1970,"props":7081,"children":7082},{},[],{"type":597,"tag":1970,"props":7084,"children":7085},{},[],{"type":597,"tag":1970,"props":7087,"children":7088},{},[],{"type":597,"tag":1970,"props":7090,"children":7091},{},[],{"type":597,"tag":1945,"props":7093,"children":7094},{},[7095,7098,7101,7104],{"type":597,"tag":1970,"props":7096,"children":7097},{},[],{"type":597,"tag":1970,"props":7099,"children":7100},{},[],{"type":597,"tag":1970,"props":7102,"children":7103},{},[],{"type":597,"tag":1970,"props":7105,"children":7106},{},[],{"type":597,"tag":598,"props":7108,"children":7109},{"id":6249},[7110],{"type":603,"value":6249},{"type":597,"tag":617,"props":7112,"children":7113},{},[],{"type":603,"value":6592},{"type":597,"tag":1937,"props":7116,"children":7117},{},[7118,7140],{"type":597,"tag":1941,"props":7119,"children":7120},{},[7121],{"type":597,"tag":1945,"props":7122,"children":7123},{},[7124,7128,7132,7136],{"type":597,"tag":1949,"props":7125,"children":7126},{},[7127],{"type":603,"value":6249},{"type":597,"tag":1949,"props":7129,"children":7130},{},[7131],{"type":603,"value":6369},{"type":597,"tag":1949,"props":7133,"children":7134},{},[7135],{"type":603,"value":6374},{"type":597,"tag":1949,"props":7137,"children":7138},{},[7139],{"type":603,"value":6618},{"type":597,"tag":1963,"props":7141,"children":7142},{},[7143],{"type":597,"tag":1945,"props":7144,"children":7145},{},[7146,7149,7152,7155],{"type":597,"tag":1970,"props":7147,"children":7148},{},[],{"type":597,"tag":1970,"props":7150,"children":7151},{},[],{"type":597,"tag":1970,"props":7153,"children":7154},{},[],{"type":597,"tag":1970,"props":7156,"children":7157},{},[],{"type":597,"tag":598,"props":7159,"children":7161},{"id":7160},"晶石",[7162],{"type":603,"value":7160},{"type":597,"tag":617,"props":7164,"children":7165},{},[],{"type":603,"value":6592},{"type":597,"tag":1937,"props":7168,"children":7169},{},[7170,7192],{"type":597,"tag":1941,"props":7171,"children":7172},{},[7173],{"type":597,"tag":1945,"props":7174,"children":7175},{},[7176,7180,7184,7188],{"type":597,"tag":1949,"props":7177,"children":7178},{},[7179],{"type":603,"value":7160},{"type":597,"tag":1949,"props":7181,"children":7182},{},[7183],{"type":603,"value":6369},{"type":597,"tag":1949,"props":7185,"children":7186},{},[7187],{"type":603,"value":6374},{"type":597,"tag":1949,"props":7189,"children":7190},{},[7191],{"type":603,"value":6618},{"type":597,"tag":1963,"props":7193,"children":7194},{},[7195],{"type":597,"tag":1945,"props":7196,"children":7197},{},[7198,7201,7204,7207],{"type":597,"tag":1970,"props":7199,"children":7200},{},[],{"type":597,"tag":1970,"props":7202,"children":7203},{},[],{"type":597,"tag":1970,"props":7205,"children":7206},{},[],{"type":597,"tag":1970,"props":7208,"children":7209},{},[],{"title":591,"searchDepth":787,"depth":787,"links":7211},[7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222],{"id":6126,"depth":1530,"text":6126},{"id":6151,"depth":787,"text":6151},{"id":6293,"depth":787,"text":6293},{"id":6161,"depth":787,"text":6161},{"id":6174,"depth":787,"text":6174},{"id":6192,"depth":787,"text":6192},{"id":6205,"depth":787,"text":6205},{"id":6223,"depth":787,"text":6223},{"id":6236,"depth":787,"text":6236},{"id":6249,"depth":787,"text":6249},{"id":7160,"depth":787,"text":7160},"content:gyj:2022-08-22-物品产出表.md","gyj/2022-08-22-物品产出表.md",{"_path":214,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":213,"description":7226,"body":7227,"_type":791,"_id":7581,"_source":793,"_file":7582,"_extension":795,"date":4926},"玩法收集收集九块令牌收集不同的植物收集不同的矿物收集不同的鱼类收集不同的草药收集古董帮派经济门派副本秘境蛙岛大逃杀Roguelike爬塔节日端午划龙舟比武大会元宵节猜灯谜入侵模式强盗王杀了150个强盗白莲教魔教谋反蛇人入侵僵尸王天人入侵四大圣兽入侵妖族入侵入侵模式.不能售卖东西..不能大地图移动门客护卫跑商种植养殖寻宝探索去不同的城市资源有限,会被采光宝箱利用关系解锁地块人物宝箱故事剧情奖励好看的场景???隐藏地图武学npc互动和小游戏打牌三消24点猜谜切磋",{"type":594,"children":7228,"toc":7521},[7229,7233,7238,7243,7248,7253,7258,7263,7268,7273,7278,7283,7288,7293,7298,7303,7309,7314,7319,7324,7329,7334,7339,7344,7349,7354,7359,7364,7369,7374,7379,7384,7389,7394,7400,7405,7410,7414,7418,7423,7428,7433,7438,7444,7449,7454,7459,7464,7469,7474,7480,7485,7490,7495,7500,7505,7511,7516],{"type":597,"tag":857,"props":7230,"children":7231},{"id":213},[7232],{"type":603,"value":213},{"type":597,"tag":598,"props":7234,"children":7236},{"id":7235},"收集",[7237],{"type":603,"value":7235},{"type":597,"tag":1023,"props":7239,"children":7241},{"id":7240},"收集九块令牌",[7242],{"type":603,"value":7240},{"type":597,"tag":1023,"props":7244,"children":7246},{"id":7245},"收集不同的植物",[7247],{"type":603,"value":7245},{"type":597,"tag":1023,"props":7249,"children":7251},{"id":7250},"收集不同的矿物",[7252],{"type":603,"value":7250},{"type":597,"tag":1023,"props":7254,"children":7256},{"id":7255},"收集不同的鱼类",[7257],{"type":603,"value":7255},{"type":597,"tag":1023,"props":7259,"children":7261},{"id":7260},"收集不同的草药",[7262],{"type":603,"value":7260},{"type":597,"tag":1023,"props":7264,"children":7266},{"id":7265},"收集古董",[7267],{"type":603,"value":7265},{"type":597,"tag":598,"props":7269,"children":7271},{"id":7270},"帮派",[7272],{"type":603,"value":7270},{"type":597,"tag":1023,"props":7274,"children":7276},{"id":7275},"经济",[7277],{"type":603,"value":7275},{"type":597,"tag":1023,"props":7279,"children":7281},{"id":7280},"门派",[7282],{"type":603,"value":7280},{"type":597,"tag":598,"props":7284,"children":7286},{"id":7285},"副本",[7287],{"type":603,"value":7285},{"type":597,"tag":1023,"props":7289,"children":7291},{"id":7290},"秘境",[7292],{"type":603,"value":7290},{"type":597,"tag":1023,"props":7294,"children":7296},{"id":7295},"蛙岛",[7297],{"type":603,"value":7295},{"type":597,"tag":1023,"props":7299,"children":7301},{"id":7300},"大逃杀",[7302],{"type":603,"value":7300},{"type":597,"tag":1023,"props":7304,"children":7306},{"id":7305},"roguelike",[7307],{"type":603,"value":7308},"Roguelike",{"type":597,"tag":1023,"props":7310,"children":7312},{"id":7311},"爬塔",[7313],{"type":603,"value":7311},{"type":597,"tag":598,"props":7315,"children":7317},{"id":7316},"节日",[7318],{"type":603,"value":7316},{"type":597,"tag":1023,"props":7320,"children":7322},{"id":7321},"端午划龙舟",[7323],{"type":603,"value":7321},{"type":597,"tag":1023,"props":7325,"children":7327},{"id":7326},"比武大会",[7328],{"type":603,"value":7326},{"type":597,"tag":1023,"props":7330,"children":7332},{"id":7331},"元宵节",[7333],{"type":603,"value":7331},{"type":597,"tag":3995,"props":7335,"children":7337},{"id":7336},"猜灯谜",[7338],{"type":603,"value":7336},{"type":597,"tag":598,"props":7340,"children":7342},{"id":7341},"入侵模式",[7343],{"type":603,"value":7341},{"type":597,"tag":1023,"props":7345,"children":7347},{"id":7346},"强盗王",[7348],{"type":603,"value":7346},{"type":597,"tag":3995,"props":7350,"children":7352},{"id":7351},"杀了150个强盗",[7353],{"type":603,"value":7351},{"type":597,"tag":1023,"props":7355,"children":7357},{"id":7356},"白莲教",[7358],{"type":603,"value":7356},{"type":597,"tag":1023,"props":7360,"children":7362},{"id":7361},"魔教",[7363],{"type":603,"value":7361},{"type":597,"tag":1023,"props":7365,"children":7367},{"id":7366},"谋反",[7368],{"type":603,"value":7366},{"type":597,"tag":1023,"props":7370,"children":7372},{"id":7371},"蛇人入侵",[7373],{"type":603,"value":7371},{"type":597,"tag":1023,"props":7375,"children":7377},{"id":7376},"僵尸王",[7378],{"type":603,"value":7376},{"type":597,"tag":1023,"props":7380,"children":7382},{"id":7381},"天人入侵",[7383],{"type":603,"value":7381},{"type":597,"tag":1023,"props":7385,"children":7387},{"id":7386},"四大圣兽入侵",[7388],{"type":603,"value":7386},{"type":597,"tag":1023,"props":7390,"children":7392},{"id":7391},"妖族入侵",[7393],{"type":603,"value":7391},{"type":597,"tag":1023,"props":7395,"children":7397},{"id":7396},"入侵模式不能售卖东西不能大地图移动",[7398],{"type":603,"value":7399},"入侵模式.不能售卖东西..不能大地图移动",{"type":597,"tag":598,"props":7401,"children":7403},{"id":7402},"门客",[7404],{"type":603,"value":7402},{"type":597,"tag":1023,"props":7406,"children":7408},{"id":7407},"护卫",[7409],{"type":603,"value":7407},{"type":597,"tag":1023,"props":7411,"children":7412},{"id":240},[7413],{"type":603,"value":240},{"type":597,"tag":1023,"props":7415,"children":7416},{"id":234},[7417],{"type":603,"value":234},{"type":597,"tag":1023,"props":7419,"children":7421},{"id":7420},"养殖",[7422],{"type":603,"value":7420},{"type":597,"tag":1023,"props":7424,"children":7426},{"id":7425},"寻宝",[7427],{"type":603,"value":7425},{"type":597,"tag":598,"props":7429,"children":7431},{"id":7430},"探索",[7432],{"type":603,"value":7430},{"type":597,"tag":1023,"props":7434,"children":7436},{"id":7435},"去不同的城市",[7437],{"type":603,"value":7435},{"type":597,"tag":3995,"props":7439,"children":7441},{"id":7440},"资源有限会被采光",[7442],{"type":603,"value":7443},"资源有限,会被采光",{"type":597,"tag":3995,"props":7445,"children":7447},{"id":7446},"宝箱",[7448],{"type":603,"value":7446},{"type":597,"tag":1023,"props":7450,"children":7452},{"id":7451},"利用关系解锁地块",[7453],{"type":603,"value":7451},{"type":597,"tag":3995,"props":7455,"children":7457},{"id":7456},"人物",[7458],{"type":603,"value":7456},{"type":597,"tag":3995,"props":7460,"children":7462},{"id":7461},"宝箱-1",[7463],{"type":603,"value":7446},{"type":597,"tag":1023,"props":7465,"children":7467},{"id":7466},"故事剧情",[7468],{"type":603,"value":7466},{"type":597,"tag":3995,"props":7470,"children":7472},{"id":7471},"奖励",[7473],{"type":603,"value":7471},{"type":597,"tag":1023,"props":7475,"children":7477},{"id":7476},"好看的场景",[7478],{"type":603,"value":7479},"好看的场景???",{"type":597,"tag":1023,"props":7481,"children":7483},{"id":7482},"隐藏地图",[7484],{"type":603,"value":7482},{"type":597,"tag":598,"props":7486,"children":7488},{"id":7487},"武学",[7489],{"type":603,"value":7487},{"type":597,"tag":598,"props":7491,"children":7493},{"id":7492},"npc互动和小游戏",[7494],{"type":603,"value":7492},{"type":597,"tag":1023,"props":7496,"children":7498},{"id":7497},"打牌",[7499],{"type":603,"value":7497},{"type":597,"tag":1023,"props":7501,"children":7503},{"id":7502},"三消",[7504],{"type":603,"value":7502},{"type":597,"tag":1023,"props":7506,"children":7508},{"id":7507},"_24点",[7509],{"type":603,"value":7510},"24点",{"type":597,"tag":1023,"props":7512,"children":7514},{"id":7513},"猜谜",[7515],{"type":603,"value":7513},{"type":597,"tag":1023,"props":7517,"children":7519},{"id":7518},"切磋",[7520],{"type":603,"value":7518},{"title":591,"searchDepth":787,"depth":787,"links":7522},[7523,7531,7535,7542,7547,7559,7566,7573,7574],{"id":7235,"depth":787,"text":7235,"children":7524},[7525,7526,7527,7528,7529,7530],{"id":7240,"depth":1530,"text":7240},{"id":7245,"depth":1530,"text":7245},{"id":7250,"depth":1530,"text":7250},{"id":7255,"depth":1530,"text":7255},{"id":7260,"depth":1530,"text":7260},{"id":7265,"depth":1530,"text":7265},{"id":7270,"depth":787,"text":7270,"children":7532},[7533,7534],{"id":7275,"depth":1530,"text":7275},{"id":7280,"depth":1530,"text":7280},{"id":7285,"depth":787,"text":7285,"children":7536},[7537,7538,7539,7540,7541],{"id":7290,"depth":1530,"text":7290},{"id":7295,"depth":1530,"text":7295},{"id":7300,"depth":1530,"text":7300},{"id":7305,"depth":1530,"text":7308},{"id":7311,"depth":1530,"text":7311},{"id":7316,"depth":787,"text":7316,"children":7543},[7544,7545,7546],{"id":7321,"depth":1530,"text":7321},{"id":7326,"depth":1530,"text":7326},{"id":7331,"depth":1530,"text":7331},{"id":7341,"depth":787,"text":7341,"children":7548},[7549,7550,7551,7552,7553,7554,7555,7556,7557,7558],{"id":7346,"depth":1530,"text":7346},{"id":7356,"depth":1530,"text":7356},{"id":7361,"depth":1530,"text":7361},{"id":7366,"depth":1530,"text":7366},{"id":7371,"depth":1530,"text":7371},{"id":7376,"depth":1530,"text":7376},{"id":7381,"depth":1530,"text":7381},{"id":7386,"depth":1530,"text":7386},{"id":7391,"depth":1530,"text":7391},{"id":7396,"depth":1530,"text":7399},{"id":7402,"depth":787,"text":7402,"children":7560},[7561,7562,7563,7564,7565],{"id":7407,"depth":1530,"text":7407},{"id":240,"depth":1530,"text":240},{"id":234,"depth":1530,"text":234},{"id":7420,"depth":1530,"text":7420},{"id":7425,"depth":1530,"text":7425},{"id":7430,"depth":787,"text":7430,"children":7567},[7568,7569,7570,7571,7572],{"id":7435,"depth":1530,"text":7435},{"id":7451,"depth":1530,"text":7451},{"id":7466,"depth":1530,"text":7466},{"id":7476,"depth":1530,"text":7479},{"id":7482,"depth":1530,"text":7482},{"id":7487,"depth":787,"text":7487},{"id":7492,"depth":787,"text":7492,"children":7575},[7576,7577,7578,7579,7580],{"id":7497,"depth":1530,"text":7497},{"id":7502,"depth":1530,"text":7502},{"id":7507,"depth":1530,"text":7510},{"id":7513,"depth":1530,"text":7513},{"id":7518,"depth":1530,"text":7518},"content:gyj:2022-08-22-玩法.md","gyj/2022-08-22-玩法.md",{"_path":217,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":216,"description":7584,"body":7585,"_type":791,"_id":7742,"_source":793,"_file":7743,"_extension":795,"date":4926},"你正在路上疯狂的逃跑,后面跟着几个追赶你的匪徒",{"type":594,"children":7586,"toc":7740},[7587,7591,7596,7601,7606,7611,7616,7621,7626,7631,7636,7641,7646,7651,7656,7669,7674,7679,7684,7687,7692,7697,7705,7710,7715,7720,7725,7730,7735],{"type":597,"tag":606,"props":7588,"children":7589},{},[7590],{"type":603,"value":7584},{"type":597,"tag":606,"props":7592,"children":7593},{},[7594],{"type":603,"value":7595},"这时你暗骂一声,他娘的,这回真的跑不了了.",{"type":597,"tag":606,"props":7597,"children":7598},{},[7599],{"type":603,"value":7600},"只见这时一人闪出挡在你的身前,喊道肖小毛贼,赶快住手.",{"type":597,"tag":606,"props":7602,"children":7603},{},[7604],{"type":603,"value":7605},"你心中一喜,难道自己这就是传说中的主角命,性命攸关之时,必有大侠相救",{"type":597,"tag":606,"props":7607,"children":7608},{},[7609],{"type":603,"value":7610},"只听那人再次说道:光天化日之下,竟敢强抢民男,不知廉耻,只要你们退去,我今日可饶过你们.",{"type":597,"tag":606,"props":7612,"children":7613},{},[7614],{"type":603,"value":7615},"什么强抢名男,这个大侠似乎有点不靠谱(ps:如果玩家选的是女角色,这个段落需要去除)",{"type":597,"tag":606,"props":7617,"children":7618},{},[7619],{"type":603,"value":7620},"匪徒们见你们只有两人,也没多说废话,直接动手.",{"type":597,"tag":606,"props":7622,"children":7623},{},[7624],{"type":603,"value":7625},"无奈你们只好迎战,费了九牛二虎之力,总算击杀了二人",{"type":597,"tag":606,"props":7627,"children":7628},{},[7629],{"type":603,"value":7630},"战后,你面向那位大侠说到",{"type":597,"tag":606,"props":7632,"children":7633},{},[7634],{"type":603,"value":7635},"\"多谢兄弟出手搭救,在下xxx,不知兄弟姓名,日后必定报答\"",{"type":597,"tag":606,"props":7637,"children":7638},{},[7639],{"type":603,"value":7640},"\"客气,我叫李二,路见不平拔刀相助,是我等江湖儿女应做之事.兄弟为何会被这窝歹徒追赶啊\"",{"type":597,"tag":606,"props":7642,"children":7643},{},[7644],{"type":603,"value":7645},"\"家乡遭难,我是来逃荒至此,没想到路经此地却被这伙匪徒盯上,哎,落难至此,也实在没地方可去.\"",{"type":597,"tag":606,"props":7647,"children":7648},{},[7649],{"type":603,"value":7650},"\"这样啊,兄弟,我家住旁边的龙隐村,吾今日离家去外地闯荡,家中无人,不嫌弃的话,可以去我家先住一段时间,以后再做打算\"",{"type":597,"tag":606,"props":7652,"children":7653},{},[7654],{"type":603,"value":7655},"你思考片刻,决定是否要感谢对方,将身上的银两进行相赠,",{"type":597,"tag":617,"props":7657,"children":7658},{},[7659,7664],{"type":597,"tag":606,"props":7660,"children":7661},{},[7662],{"type":603,"value":7663},"赠送纹银200两,以示感谢",{"type":597,"tag":606,"props":7665,"children":7666},{},[7667],{"type":603,"value":7668},"不赠送,口头表示感谢",{"type":597,"tag":606,"props":7670,"children":7671},{},[7672],{"type":603,"value":7673},"\"多谢兄弟,我既遇兄弟相救,又得你收留,为表心意,这点银两请务必收下\"",{"type":597,"tag":606,"props":7675,"children":7676},{},[7677],{"type":603,"value":7678},"\"兄弟客气,你沿着这条路往前走,会看到一个路牌,前往东山小路,然后就能找到我家了,\"",{"type":597,"tag":606,"props":7680,"children":7681},{},[7682],{"type":603,"value":7683},"\"青山不改,绿水长流,兄弟,他日我们江湖再见\"",{"type":597,"tag":3720,"props":7685,"children":7686},{},[],{"type":597,"tag":606,"props":7688,"children":7689},{},[7690],{"type":603,"value":7691},"你往前走前往到了李二的家,",{"type":597,"tag":606,"props":7693,"children":7694},{},[7695],{"type":603,"value":7696},"\"这该时李二的家了吧,天已渐黑,还是早些休息,明日再想着日后打算\"",{"type":597,"tag":617,"props":7698,"children":7699},{},[7700],{"type":597,"tag":606,"props":7701,"children":7702},{},[7703],{"type":603,"value":7704},"点击床进行睡觉,",{"type":597,"tag":606,"props":7706,"children":7707},{},[7708],{"type":603,"value":7709},"出门遇到村长",{"type":597,"tag":606,"props":7711,"children":7712},{},[7713],{"type":603,"value":7714},"村长:\"你是何人,怎么住在李二的房子\"",{"type":597,"tag":606,"props":7716,"children":7717},{},[7718],{"type":603,"value":7719},"你:\"昨日在山间落难,幸得李兄搭救,他说出去闯荡,所以房子就先给我暂住\"",{"type":597,"tag":606,"props":7721,"children":7722},{},[7723],{"type":603,"value":7724},"村长:\"哎,如今征战连年,四处都有匪盗,既然如此就就先在此住着\"",{"type":597,"tag":606,"props":7726,"children":7727},{},[7728],{"type":603,"value":7729},"村长:\"生活不易,正逢春季,我这有些种子送给你,你快些播下,能够有些好的收成,维持口粮\"",{"type":597,"tag":606,"props":7731,"children":7732},{},[7733],{"type":603,"value":7734},"你:\"多谢村长\"",{"type":597,"tag":606,"props":7736,"children":7737},{},[7738],{"type":603,"value":7739},"村长:\"种地需要些工具,在西山小路的杂货商中会卖些基本的工具你可以买些回来\"",{"title":591,"searchDepth":787,"depth":787,"links":7741},[],"content:gyj:2022-08-22-第一章.md","gyj/2022-08-22-第一章.md",{"_path":220,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":219,"description":7745,"body":7746,"_type":791,"_id":8030,"_source":793,"_file":8031,"_extension":795,"date":4926},"职业采集采集的时候增加经验扶农.每提升一点则减少消耗体力0.1点农夫砍伐砍树增加经验斫(zhuo)木每提升一点则减少消耗体力0.1点樵夫养殖收获农产品增加经验庖丁,.每提升一点则减少消耗体力0.1点屠夫采矿采矿增加经验开山 每提升一点则减少消耗体力0.1点矿工钓鱼钓鱼增加经验渔获每提升一点则减少消耗体力0.1点渔夫制作制作家具和武器增加经验机巧减少制作时间,制作时消耗的燃料???铁匠----制作订单牌..接受订单医术制药和行医的时候增加经验悬壶--每提升一点则减少消耗体力0.1点药师烹饪做饭和招呼客人的时候增加经验食肆--每提升一点则减少消耗体力0.1点掌柜经商???购买物品的时候生财--交易",{"type":594,"children":7747,"toc":8026},[7748,7753,7962,7967],{"type":597,"tag":598,"props":7749,"children":7751},{"id":7750},"职业",[7752],{"type":603,"value":7750},{"type":597,"tag":803,"props":7754,"children":7755},{},[7756,7779,7802,7824,7847,7870,7893,7916,7939],{"type":597,"tag":807,"props":7757,"children":7758},{},[7759,7761],{"type":603,"value":7760},"采集",{"type":597,"tag":803,"props":7762,"children":7763},{},[7764,7769,7774],{"type":597,"tag":807,"props":7765,"children":7766},{},[7767],{"type":603,"value":7768},"采集的时候增加经验",{"type":597,"tag":807,"props":7770,"children":7771},{},[7772],{"type":603,"value":7773},"扶农.每提升一点则减少消耗体力0.1点",{"type":597,"tag":807,"props":7775,"children":7776},{},[7777],{"type":603,"value":7778},"农夫",{"type":597,"tag":807,"props":7780,"children":7781},{},[7782,7784],{"type":603,"value":7783},"砍伐",{"type":597,"tag":803,"props":7785,"children":7786},{},[7787,7792,7797],{"type":597,"tag":807,"props":7788,"children":7789},{},[7790],{"type":603,"value":7791},"砍树增加经验",{"type":597,"tag":807,"props":7793,"children":7794},{},[7795],{"type":603,"value":7796},"斫(zhuo)木每提升一点则减少消耗体力0.1点",{"type":597,"tag":807,"props":7798,"children":7799},{},[7800],{"type":603,"value":7801},"樵夫",{"type":597,"tag":807,"props":7803,"children":7804},{},[7805,7806],{"type":603,"value":7420},{"type":597,"tag":803,"props":7807,"children":7808},{},[7809,7814,7819],{"type":597,"tag":807,"props":7810,"children":7811},{},[7812],{"type":603,"value":7813},"收获农产品增加经验",{"type":597,"tag":807,"props":7815,"children":7816},{},[7817],{"type":603,"value":7818},"庖丁,.每提升一点则减少消耗体力0.1点",{"type":597,"tag":807,"props":7820,"children":7821},{},[7822],{"type":603,"value":7823},"屠夫",{"type":597,"tag":807,"props":7825,"children":7826},{},[7827,7829],{"type":603,"value":7828},"采矿",{"type":597,"tag":803,"props":7830,"children":7831},{},[7832,7837,7842],{"type":597,"tag":807,"props":7833,"children":7834},{},[7835],{"type":603,"value":7836},"采矿增加经验",{"type":597,"tag":807,"props":7838,"children":7839},{},[7840],{"type":603,"value":7841},"开山 每提升一点则减少消耗体力0.1点",{"type":597,"tag":807,"props":7843,"children":7844},{},[7845],{"type":603,"value":7846},"矿工",{"type":597,"tag":807,"props":7848,"children":7849},{},[7850,7852],{"type":603,"value":7851},"钓鱼",{"type":597,"tag":803,"props":7853,"children":7854},{},[7855,7860,7865],{"type":597,"tag":807,"props":7856,"children":7857},{},[7858],{"type":603,"value":7859},"钓鱼增加经验",{"type":597,"tag":807,"props":7861,"children":7862},{},[7863],{"type":603,"value":7864},"渔获每提升一点则减少消耗体力0.1点",{"type":597,"tag":807,"props":7866,"children":7867},{},[7868],{"type":603,"value":7869},"渔夫",{"type":597,"tag":807,"props":7871,"children":7872},{},[7873,7875],{"type":603,"value":7874},"制作",{"type":597,"tag":803,"props":7876,"children":7877},{},[7878,7883,7888],{"type":597,"tag":807,"props":7879,"children":7880},{},[7881],{"type":603,"value":7882},"制作家具和武器增加经验",{"type":597,"tag":807,"props":7884,"children":7885},{},[7886],{"type":603,"value":7887},"机巧减少制作时间,制作时消耗的燃料???",{"type":597,"tag":807,"props":7889,"children":7890},{},[7891],{"type":603,"value":7892},"铁匠----制作订单牌..接受订单",{"type":597,"tag":807,"props":7894,"children":7895},{},[7896,7898],{"type":603,"value":7897},"医术",{"type":597,"tag":803,"props":7899,"children":7900},{},[7901,7906,7911],{"type":597,"tag":807,"props":7902,"children":7903},{},[7904],{"type":603,"value":7905},"制药和行医的时候增加经验",{"type":597,"tag":807,"props":7907,"children":7908},{},[7909],{"type":603,"value":7910},"悬壶--每提升一点则减少消耗体力0.1点",{"type":597,"tag":807,"props":7912,"children":7913},{},[7914],{"type":603,"value":7915},"药师",{"type":597,"tag":807,"props":7917,"children":7918},{},[7919,7921],{"type":603,"value":7920},"烹饪",{"type":597,"tag":803,"props":7922,"children":7923},{},[7924,7929,7934],{"type":597,"tag":807,"props":7925,"children":7926},{},[7927],{"type":603,"value":7928},"做饭和招呼客人的时候增加经验",{"type":597,"tag":807,"props":7930,"children":7931},{},[7932],{"type":603,"value":7933},"食肆--每提升一点则减少消耗体力0.1点",{"type":597,"tag":807,"props":7935,"children":7936},{},[7937],{"type":603,"value":7938},"掌柜",{"type":597,"tag":807,"props":7940,"children":7941},{},[7942,7944],{"type":603,"value":7943},"经商???",{"type":597,"tag":803,"props":7945,"children":7946},{},[7947,7952,7957],{"type":597,"tag":807,"props":7948,"children":7949},{},[7950],{"type":603,"value":7951},"购买物品的时候",{"type":597,"tag":807,"props":7953,"children":7954},{},[7955],{"type":603,"value":7956},"生财--交易时获得的金钱???",{"type":597,"tag":807,"props":7958,"children":7959},{},[7960],{"type":603,"value":7961},"商人",{"type":597,"tag":598,"props":7963,"children":7965},{"id":7964},"如何开酒楼和医院",[7966],{"type":603,"value":7964},{"type":597,"tag":803,"props":7968,"children":7969},{},[7970,7975,7980,7985,8003],{"type":597,"tag":807,"props":7971,"children":7972},{},[7973],{"type":603,"value":7974},"购买许可证",{"type":597,"tag":807,"props":7976,"children":7977},{},[7978],{"type":603,"value":7979},"悬挂在屋内,(只准悬挂一种许可证)",{"type":597,"tag":807,"props":7981,"children":7982},{},[7983],{"type":603,"value":7984},"许可证有个按钮..营业或者行医,,点击提示消耗一天",{"type":597,"tag":807,"props":7986,"children":7987},{},[7988,7990],{"type":603,"value":7989},"经营",{"type":597,"tag":803,"props":7991,"children":7992},{},[7993,7998],{"type":597,"tag":807,"props":7994,"children":7995},{},[7996],{"type":603,"value":7997},"酒馆   需要柜台,和桌子,柜台可以让npc有个等候区,如果等候区满了...npc没有在固定时间接待,则会走出房屋",{"type":597,"tag":807,"props":7999,"children":8000},{},[8001],{"type":603,"value":8002},"医院  需要床,如果没有床npc固定时间没有接待则走人.诊断失败扣除经验",{"type":597,"tag":807,"props":8004,"children":8005},{},[8006,8008],{"type":603,"value":8007},"npc的AI",{"type":597,"tag":803,"props":8009,"children":8010},{},[8011,8016,8021],{"type":597,"tag":807,"props":8012,"children":8013},{},[8014],{"type":603,"value":8015},"每隔一段时间生成客人",{"type":597,"tag":807,"props":8017,"children":8018},{},[8019],{"type":603,"value":8020},"客人走进屋子内,检查是否有等候区..如果等候时间到了,则离开..",{"type":597,"tag":807,"props":8022,"children":8023},{},[8024],{"type":603,"value":8025},"npc会说话",{"title":591,"searchDepth":787,"depth":787,"links":8027},[8028,8029],{"id":7750,"depth":787,"text":7750},{"id":7964,"depth":787,"text":7964},"content:gyj:2022-08-22-职业与工作.md","gyj/2022-08-22-职业与工作.md",{"_path":189,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":188,"description":8034,"body":8035,"_type":791,"_id":8396,"_source":793,"_file":8397,"_extension":795,"date":8398},"game","行为树的构建首先行为树会有个根节点TaskRoot ,当构建行为树的时候,会将节点添加到该root下行为树的构建如下://获取当前父节点..默认则为TaskRoot\nprivate ITaskParent PointerCurrent {\n    get {\n        if (_pointers.Count == 0) return null;\n        return _pointers[_pointers.Count - 1];\n    }\n}\n//增加节点到当前父节点\npublic BehaviorTreeBuilder AddNode (ITask node) {\n    _",{"type":594,"children":8036,"toc":8383},[8037,8042,8055,8060,8068,8073,8102,8113,8118,8155,8192,8197,8208,8213,8218,8223,8228,8233,8251,8256,8261,8270,8275,8280,8287,8292,8301,8306,8315,8320,8325,8330,8335,8353,8358,8363,8368,8373,8378],{"type":597,"tag":598,"props":8038,"children":8040},{"id":8039},"行为树的构建",[8041],{"type":603,"value":8039},{"type":597,"tag":606,"props":8043,"children":8044},{},[8045,8047,8053],{"type":603,"value":8046},"首先行为树会有个根节点",{"type":597,"tag":629,"props":8048,"children":8050},{"className":8049},[],[8051],{"type":603,"value":8052},"TaskRoot",{"type":603,"value":8054}," ,当构建行为树的时候,会将节点添加到该root下",{"type":597,"tag":606,"props":8056,"children":8057},{},[8058],{"type":603,"value":8059},"行为树的构建如下:",{"type":597,"tag":621,"props":8061,"children":8063},{"code":8062},"//获取当前父节点..默认则为TaskRoot\nprivate ITaskParent PointerCurrent {\n    get {\n        if (_pointers.Count == 0) return null;\n        return _pointers[_pointers.Count - 1];\n    }\n}\n//增加节点到当前父节点\npublic BehaviorTreeBuilder AddNode (ITask node) {\n    _tree.AddNode(PointerCurrent, node);\n    return this;\n}\n//增加节点,并将该节点设置为当前父节点\npublic BehaviorTreeBuilder AddNodeWithPointer (ITaskParent task) {\n    AddNode(task);\n    _pointers.Add(task);\n    \n    return this;\n}\n//退出当前父节点\npublic BehaviorTreeBuilder End () {\n    _pointers.RemoveAt(_pointers.Count - 1);\n    \n    return this;\n}\n",[8064],{"type":597,"tag":629,"props":8065,"children":8066},{"__ignoreMap":591},[8067],{"type":603,"value":8062},{"type":597,"tag":598,"props":8069,"children":8071},{"id":8070},"行为树的运行",[8072],{"type":603,"value":8070},{"type":597,"tag":1321,"props":8074,"children":8075},{},[8076,8089],{"type":597,"tag":807,"props":8077,"children":8078},{},[8079,8081,8087],{"type":603,"value":8080},"每一帧都执行update(),且如果根节点返回的是成功或者失败,则清空所有任务并",{"type":597,"tag":629,"props":8082,"children":8084},{"className":8083},[],[8085],{"type":603,"value":8086},"End()",{"type":603,"value":8088},",累计tick(所有子节点都会执行Reset())",{"type":597,"tag":807,"props":8090,"children":8091},{},[8092,8094,8100],{"type":603,"value":8093},"如果子节点中有",{"type":597,"tag":629,"props":8095,"children":8097},{"className":8096},[],[8098],{"type":603,"value":8099},"持续",{"type":603,"value":8101},"的任务时,则该任务会被认为时激活的.添加到行为树中",{"type":597,"tag":621,"props":8103,"children":8108},{"code":8104,"language":8105,"meta":591,"className":8106},"public TaskStatus Tick () {\n    var status = Root.Update();\n    if (status != TaskStatus.Continue) {\n        Reset();\n    }\n\n    return status;\n}\n\npublic void Reset () {\n    foreach (var task in _tasks) {\n        task.End();\n    }\n\n    _tasks.Clear();\n    TickCount++;\n}\n","csharp",[8107],"language-csharp",[8109],{"type":597,"tag":629,"props":8110,"children":8111},{"__ignoreMap":591},[8112],{"type":603,"value":8104},{"type":597,"tag":606,"props":8114,"children":8115},{},[8116],{"type":603,"value":8117},"让我们看看任务的子类有哪些:",{"type":597,"tag":1321,"props":8119,"children":8120},{},[8121,8131],{"type":597,"tag":807,"props":8122,"children":8123},{},[8124,8129],{"type":597,"tag":629,"props":8125,"children":8127},{"className":8126},[],[8128],{"type":603,"value":8052},{"type":603,"value":8130}," 一般来说只有一个子节点",{"type":597,"tag":807,"props":8132,"children":8133},{},[8134,8140,8142,8148,8150],{"type":597,"tag":629,"props":8135,"children":8137},{"className":8136},[],[8138],{"type":603,"value":8139},"TaskParentBase",{"type":603,"value":8141}," ,会在每一次循环中同步tick,如果tick和行为树不一样,则会",{"type":597,"tag":629,"props":8143,"children":8145},{"className":8144},[],[8146],{"type":603,"value":8147},"Reset",{"type":603,"value":8149},",如果onUpdate()返回的时成功或者失败,也会",{"type":597,"tag":629,"props":8151,"children":8153},{"className":8152},[],[8154],{"type":603,"value":8147},{"type":597,"tag":1321,"props":8156,"children":8157},{},[8158],{"type":597,"tag":807,"props":8159,"children":8160},{},[8161,8167,8169,8174,8176,8182,8184,8190],{"type":597,"tag":629,"props":8162,"children":8164},{"className":8163},[],[8165],{"type":603,"value":8166},"TaskBase",{"type":603,"value":8168}," 会在每一次循环中同步tick,如果tick和行为树不一样,则会",{"type":597,"tag":629,"props":8170,"children":8172},{"className":8171},[],[8173],{"type":603,"value":8147},{"type":603,"value":8175},",如果GetUpdate()返回的时成功或者失败,则会",{"type":597,"tag":629,"props":8177,"children":8179},{"className":8178},[],[8180],{"type":603,"value":8181},"Exit",{"type":603,"value":8183}," (Exit时会Reset)且如果自己的状态曾经为",{"type":597,"tag":629,"props":8185,"children":8187},{"className":8186},[],[8188],{"type":603,"value":8189},"Continue",{"type":603,"value":8191},"会从行为树的激活任务中移除,否则会将自身添加到行为树的激活任务中.",{"type":597,"tag":1023,"props":8193,"children":8195},{"id":8194},"持续的任务是怎么运行的",[8196],{"type":603,"value":8194},{"type":597,"tag":621,"props":8198,"children":8203},{"code":8199,"language":8200,"meta":591,"className":8201},"graph TD;\nRoot --> Sequence;\nSequence-->TaskA;\nSequence-->TaskB;\nSequence-->TaskC;\n","mermaid",[8202],"language-mermaid",[8204],{"type":597,"tag":629,"props":8205,"children":8206},{"__ignoreMap":591},[8207],{"type":603,"value":8199},{"type":597,"tag":606,"props":8209,"children":8210},{},[8211],{"type":603,"value":8212},"Sequence会记录自己循环过哪些task. 当taskb持续状态时,则会进入下一个循环,但不会进入下一tick,走到Sequence后,他不会执行已经执行过的任务,所以进入Sequence后会直接执行TaskB;",{"type":597,"tag":606,"props":8214,"children":8215},{},[8216],{"type":603,"value":8217},"只有当有任务失败或者成功,才会执行下一个tick,下一个tick所有task都会reset",{"type":597,"tag":598,"props":8219,"children":8221},{"id":8220},"使用",[8222],{"type":603,"value":8220},{"type":597,"tag":1023,"props":8224,"children":8226},{"id":8225},"并行",[8227],{"type":603,"value":8225},{"type":597,"tag":606,"props":8229,"children":8230},{},[8231],{"type":603,"value":8232},"如果使用.,注意子节点,要么是持续的,要么是成功的..如果有任何失败了将会reset",{"type":597,"tag":1321,"props":8234,"children":8235},{},[8236,8241,8246],{"type":597,"tag":807,"props":8237,"children":8238},{},[8239],{"type":603,"value":8240},"并行需要等待子节点全部完成,再根据子节点的返回状态判断该并行节点的状态",{"type":597,"tag":807,"props":8242,"children":8243},{},[8244],{"type":603,"value":8245},"并不是说并行,就是两个不想干的node不断的执行",{"type":597,"tag":807,"props":8247,"children":8248},{},[8249],{"type":603,"value":8250},"同时执行下面所有子节点的start(),然后等待所有子节点的反馈是成功还是失败",{"type":597,"tag":1023,"props":8252,"children":8254},{"id":8253},"序列",[8255],{"type":603,"value":8253},{"type":597,"tag":606,"props":8257,"children":8258},{},[8259],{"type":603,"value":8260},"一般把Sequence-->Condition  当作if  就可以",{"type":597,"tag":621,"props":8262,"children":8265},{"code":8263,"language":8200,"meta":591,"className":8264},"graph TD;Sequence --> Condition;Sequence --> AC\n",[8202],[8266],{"type":597,"tag":629,"props":8267,"children":8268},{"__ignoreMap":591},[8269],{"type":603,"value":8263},{"type":597,"tag":1023,"props":8271,"children":8273},{"id":8272},"选择",[8274],{"type":603,"value":8272},{"type":597,"tag":606,"props":8276,"children":8277},{},[8278],{"type":603,"value":8279},"由下图可以看出..Selector --> Sequence--> Condition  相当于if else",{"type":597,"tag":606,"props":8281,"children":8282},{},[8283],{"type":597,"tag":719,"props":8284,"children":8286},{"alt":591,"src":8285},"/images/2022-08-21-behavior-tree-source-code/1660118886000.png",[],{"type":597,"tag":606,"props":8288,"children":8289},{},[8290],{"type":603,"value":8291},"把select,当成 if not来看",{"type":597,"tag":621,"props":8293,"children":8296},{"code":8294,"language":8200,"meta":591,"className":8295},"graph TD;\nSelect -->Condition; Select-->action\n",[8202],[8297],{"type":597,"tag":629,"props":8298,"children":8299},{"__ignoreMap":591},[8300],{"type":603,"value":8294},{"type":597,"tag":606,"props":8302,"children":8303},{},[8304],{"type":603,"value":8305},"select-->Inverter -->Condition  可以当作if来看..",{"type":597,"tag":621,"props":8307,"children":8310},{"code":8308,"language":8200,"meta":591,"className":8309},"graph TD;select --> inverter-->conditions;select-->action\n",[8202],[8311],{"type":597,"tag":629,"props":8312,"children":8313},{"__ignoreMap":591},[8314],{"type":603,"value":8308},{"type":597,"tag":606,"props":8316,"children":8317},{},[8318],{"type":603,"value":8319},"和Sequence的区别就是,select在执行b前返回的是true.",{"type":597,"tag":1023,"props":8321,"children":8323},{"id":8322},"观察者模式",[8324],{"type":603,"value":8322},{"type":597,"tag":606,"props":8326,"children":8327},{},[8328],{"type":603,"value":8329},"观察者装饰器...就是观察某个变量..然后决定低优先级节点,自身节点,的执行(重启等)方式",{"type":597,"tag":606,"props":8331,"children":8332},{},[8333],{"type":603,"value":8334},"分为两种状况\n1.在当前节点未激活的时候,观察某个变量 生效的方式:Stops.LOWER_PRIORITY,Stops.BOTH,Stops.LOWER_PRIORITY_IMMEDIATE_RESTART,Stops.IMMEDIATE_RESTART\n2.在当前节点激活的时候,观察某个变量Stops.SELF Stops.BOTH Stops.IMMEDIATE_RESTART\n所以会有三种节点出现",{"type":597,"tag":803,"props":8336,"children":8337},{},[8338,8343,8348],{"type":597,"tag":807,"props":8339,"children":8340},{},[8341],{"type":603,"value":8342},"IsConditionMet()永远返回true,子节点永远返回false,保证该装饰器节点是inactive状态",{"type":597,"tag":807,"props":8344,"children":8345},{},[8346],{"type":603,"value":8347},"IsConditionMet()永远返回false,子节点永远返回true,保证该装饰器节点是active状态",{"type":597,"tag":807,"props":8349,"children":8350},{},[8351],{"type":603,"value":8352},"IsConditionMet()根据情况返回true和false,比如如果玩家在附近,则执行该装饰器下代码.如果玩家不在附近则stop,执行低优先级代码",{"type":597,"tag":606,"props":8354,"children":8355},{},[8356],{"type":603,"value":8357},"Stops.NONE：装饰器只会在启动时检查一次它的状态，并且永远不会停止任何正在运行的节点。\nStops.SELF：装饰器将在启动时检查一次它的条件状态，如果满足，它将继续观察黑板的变化。一旦不再满足该条件，它将终止自身，并让父组合继续处理它的下一个节点。\nStops.LOWER_PRIORITY：装饰器将在启动时检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停止比此结点优先级较低的节点，允许父组合继续处理下一个节点\nStops.BOTH：装饰器将同时停止:self和优先级较低的节点。\nStops.LOWER_PRIORITY_IMMEDIATE_RESTART：一旦启动，装饰器将检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停止优先级较低的节点，并命令父组合立即重启此装饰器。\nStops.IMMEDIATE_RESTART：一旦启动，装饰器将检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停止优先级较低的节点，并命令父组合立即重启装饰器。正如在这两种情况下，一旦不再满足条件，它也将停止自己。",{"type":597,"tag":606,"props":8359,"children":8360},{},[8361],{"type":603,"value":8362},"说人话..就是\n在当前节点未激活的时候,观察某个变量\nStops.LOWER_PRIORITY_IMMEDIATE_RESTART和Stops.IMMEDIATE_RESTART这个会停止低优先级(就是该节点后面的)的节点,然后会立即重新开始当前节点\nStops.LOWER_PRIORITY和Stops.BOTH 会先停止优先级较低的节点,然后再停止父节点",{"type":597,"tag":606,"props":8364,"children":8365},{},[8366],{"type":603,"value":8367},"在当前节点激活的时候,观察某个变量\nStops.SELF Stops.BOTH Stops.IMMEDIATE_RESTART 这三个,都会先停止子节点.然后停止自身,最后会影响到停止父节点",{"type":597,"tag":1023,"props":8369,"children":8371},{"id":8370},"条件和装饰器",[8372],{"type":603,"value":8370},{"type":597,"tag":606,"props":8374,"children":8375},{},[8376],{"type":603,"value":8377},"RepeatUntilSuccess --> ConditionBase 可以构成一个新动作",{"type":597,"tag":606,"props":8379,"children":8380},{},[8381],{"type":603,"value":8382},"ConditionBase 在返回失败的时候被RepeatUntilSuccess 转换为持续",{"title":591,"searchDepth":787,"depth":787,"links":8384},[8385,8386,8389],{"id":8039,"depth":787,"text":8039},{"id":8070,"depth":787,"text":8070,"children":8387},[8388],{"id":8194,"depth":1530,"text":8194},{"id":8220,"depth":787,"text":8220,"children":8390},[8391,8392,8393,8394,8395],{"id":8225,"depth":1530,"text":8225},{"id":8253,"depth":1530,"text":8253},{"id":8272,"depth":1530,"text":8272},{"id":8322,"depth":1530,"text":8322},{"id":8370,"depth":1530,"text":8370},"content:game:2022-08-21-behavior-tree-source-code.md","game/2022-08-21-behavior-tree-source-code.md","2022-08-21",{"_path":140,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":139,"description":8401,"body":8402,"_type":791,"_id":8477,"_source":793,"_file":8478,"_extension":795,"date":8479},"dotnet","先看一个不负责任的写法//先看一个不负责任的写法\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\n \n \nnamespace nothing\n{\n    class MyMethod\n    {\n        //用a值代替Hash值\n        public int a { get; set; }\n         public override int GetHashCode()\n        {\n            return a;\n  ",{"type":594,"children":8403,"toc":8475},[8404,8409,8417,8422,8430,8435,8440,8445,8450,8455,8460,8465,8470],{"type":597,"tag":606,"props":8405,"children":8406},{},[8407],{"type":603,"value":8408},"先看一个不负责任的写法",{"type":597,"tag":621,"props":8410,"children":8412},{"code":8411},"//先看一个不负责任的写法\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\n \n \nnamespace nothing\n{\n    class MyMethod\n    {\n        //用a值代替Hash值\n        public int a { get; set; }\n         public override int GetHashCode()\n        {\n            return a;\n        }\n        public override bool Equals(object obj)\n        {\n            return true;\n        }\n \n    }\n    class Program\n    {\n            \n        static void Sum\u003CT>() where T : MyMethod, new()\n        {\n            T t1 = new T();\n            T t2 = new T();\n             \n            t1.a = 3; t2.a = 4;//不会报错           \n             //t1.a=3;t2.a=3;报错，字典中已经存在相同键\n             Dictionary\u003CMyMethod, int> d = new Dictionary\u003CMyMethod, int>();\n            d.Add(t1, 1);\n            d.Add(t2, 2);\n            \n            \n        }\n        static void Main(string[] args)\n        {\n            \n            Sum\u003CMyMethod>();\n            Console.Read();\n \n        }\n       \n    }\n \n}\n \n",[8413],{"type":597,"tag":629,"props":8414,"children":8415},{"__ignoreMap":591},[8416],{"type":603,"value":8411},{"type":597,"tag":606,"props":8418,"children":8419},{},[8420],{"type":603,"value":8421},"再说Dictionary的Add的具体实现,ILSpy反编译中C#Dictionary的Add方法源码：",{"type":597,"tag":621,"props":8423,"children":8425},{"code":8424},"public void Add(TKey key, TValue value)\n{\n    this.Insert(key, value, true);\n}\n \n \nprivate void Insert(TKey key, TValue value, bool add)\n{\n    if (key == null)\n    {\n        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.key);\n    }\n    if (this.buckets == null)\n    {\n        this.Initialize(0);\n    }\n    \n    int num = this.comparer.GetHashCode(key) & 2147483647;\n    int num2 = num % this.buckets.Length;\n    int num3 = 0;\n    for (int i = this.buckets[num2]; i >= 0; i = this.entries[i].next)\n    {\n        //如果hash值和字典中某个值的hash值相等 且 两个值的Equals返回值为True Trow 异常：已添加了具有相同键的项。\n        if (this.entries[i].hashCode == num && this.comparer.Equals(this.entries[i].key, key))\n        {\n            if (add)\n            {\n                ThrowHelper.ThrowArgumentException(ExceptionResource.Argument_AddingDuplicate);\n            }\n            this.entries[i].value = value;\n            this.version++;\n            return;\n        }\n        num3++;\n    }\n    int num4;\n    if (this.freeCount > 0)\n    {\n        num4 = this.freeList;\n        this.freeList = this.entries[num4].next;\n        this.freeCount--;\n    }\n    else\n    {\n        if (this.count == this.entries.Length)\n        {\n            this.Resize();\n            num2 = num % this.buckets.Length;\n        }\n        num4 = this.count;\n        this.count++;\n    }\n    this.entries[num4].hashCode = num;\n    this.entries[num4].next = this.buckets[num2];\n    this.entries[num4].key = key;\n    this.entries[num4].value = value;\n    this.buckets[num2] = num4;\n    this.version++;\n    if (num3 > 100 && HashHelpers.IsWellKnownEqualityComparer(this.comparer))\n    {\n        this.comparer = (IEqualityComparer\u003CTKey>)HashHelpers.GetRandomizedEqualityComparer(this.comparer);\n        this.Resize(this.entries.Length, true);\n    }\n}\n",[8426],{"type":597,"tag":629,"props":8427,"children":8428},{"__ignoreMap":591},[8429],{"type":603,"value":8424},{"type":597,"tag":606,"props":8431,"children":8432},{},[8433],{"type":603,"value":8434},"当每次调用Dictionary的Add方法时，参数都将与Dictionary中的值进行Equals，大家都知道DIctionary是用Hash值进行存储的，而hash值的计算方法是通过Object.GetHashCode实现的，如果这2个方法不一致，那么很容易就出现问题，特别是Dictionary中的Add方法这种情况。",{"type":597,"tag":606,"props":8436,"children":8437},{},[8438],{"type":603,"value":8439},"个人理解Dictionary的Add方法的实现：",{"type":597,"tag":606,"props":8441,"children":8442},{},[8443],{"type":603,"value":8444},"Add()->GetHashCode(),Equals()->判断2个hashcode是否相等 和Equals返回值是否为True->若同时成立，抛异常。",{"type":597,"tag":606,"props":8446,"children":8447},{},[8448],{"type":603,"value":8449},"GetHashCode的目的不是为一个对象生成唯一的标识符，而是为了实现基于哈希表的数据结构，如Dictionary\u003CK, V>或HashSet。 哈希函数需要确保如果x == ==y，那么x.GetHashCode()==  y.GetHashCode()，但反过来就不对了：两个不同的对象可以有相同的哈希代码。这种情况被称为哈希碰撞。 如果存在碰撞，哈希表结构仍然可以工作，但它们的运行速度较慢，因为你的程序必须花时间来分辨你要搜索的是哪个碰撞对象。因此，一个好的散列函数将努力使碰撞最小化。(注意，如果一个类有232个以上的可能值，要完全避免碰撞在数学上是不可能的，因为有鸽子笼原则）。",{"type":597,"tag":606,"props":8451,"children":8452},{},[8453],{"type":603,"value":8454},"那么，你如何为你的类写一个好的GetHashCode实现呢？",{"type":597,"tag":606,"props":8456,"children":8457},{},[8458],{"type":603,"value":8459},"做一些复杂的数学运算，将你的类的每一个字段转换为int，然后通过剖析来确定其中的系数的最佳值？",{"type":597,"tag":606,"props":8461,"children":8462},{},[8463],{"type":603,"value":8464},"根据Troelsen的说法，不需要。",{"type":597,"tag":606,"props":8466,"children":8467},{},[8468],{"type":603,"value":8469},"只要在你的 \"最独特 \"的字符串字段上调用GetHashCode()就可以了。",{"type":597,"tag":606,"props":8471,"children":8472},{},[8473],{"type":603,"value":8474},"写System.String.GetHashCode的开发者知道他们在做什么，所以只要使用它，你就会自动利用他们的 \"坚实的哈希码算法\"。",{"title":591,"searchDepth":787,"depth":787,"links":8476},[],"content:dotnet:2022-08-15-equal-hashcode.md","dotnet/2022-08-15-equal-hashcode.md","2022-08-15",{"_path":357,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":356,"description":8481,"body":8482,"_type":791,"_id":8529,"_source":793,"_file":8530,"_extension":795,"date":8531},"title : \"amd 超频总结\"先超cpu再超内存..内存超频问题会影响cpu超频.内存超频的问题也会导致黑屏pbo中的温度墙以及负压,对于定频定压没有效果进入系统后立即黑屏.可以打开防掉压,或者继续加电压,电压过低也会导致黑屏定压定频的功率会高与pbo的功率定压定频,由于没有温度墙等限制..一定要注意温度..基本上黑屏重启都是cpu的温度造成的..cpu核心温度超过100就会黑屏所以如果定压定频的话,一定要确保你有一个好的散热风扇,因为多开应用或者持续高使用率,由于没有温度墙会升高温度,造成黑屏",{"type":594,"children":8483,"toc":8526},[8484,8487,8493],{"type":597,"tag":3720,"props":8485,"children":8486},{},[],{"type":597,"tag":598,"props":8488,"children":8490},{"id":8489},"title-amd-超频总结",[8491],{"type":603,"value":8492},"title : \"amd 超频总结\"",{"type":597,"tag":803,"props":8494,"children":8495},{},[8496,8501,8506,8511,8516,8521],{"type":597,"tag":807,"props":8497,"children":8498},{},[8499],{"type":603,"value":8500},"先超cpu再超内存..内存超频问题会影响cpu超频.内存超频的问题也会导致黑屏",{"type":597,"tag":807,"props":8502,"children":8503},{},[8504],{"type":603,"value":8505},"pbo中的温度墙以及负压,对于定频定压没有效果",{"type":597,"tag":807,"props":8507,"children":8508},{},[8509],{"type":603,"value":8510},"进入系统后立即黑屏.可以打开防掉压,或者继续加电压,电压过低也会导致黑屏",{"type":597,"tag":807,"props":8512,"children":8513},{},[8514],{"type":603,"value":8515},"定压定频的功率会高与pbo的功率",{"type":597,"tag":807,"props":8517,"children":8518},{},[8519],{"type":603,"value":8520},"定压定频,由于没有温度墙等限制..一定要注意温度..基本上黑屏重启都是cpu的温度造成的..cpu核心温度超过100就会黑屏",{"type":597,"tag":807,"props":8522,"children":8523},{},[8524],{"type":603,"value":8525},"所以如果定压定频的话,一定要确保你有一个好的散热风扇,因为多开应用或者持续高使用率,由于没有温度墙会升高温度,造成黑屏",{"title":591,"searchDepth":787,"depth":787,"links":8527},[8528],{"id":8489,"depth":787,"text":8492},"content:tool:2022-08-09-amd-over.md","tool/2022-08-09-amd-over.md","2022-08-09",{"_path":186,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":185,"description":8533,"body":8534,"_type":791,"_id":9159,"_source":793,"_file":9160,"_extension":795,"date":9161},"怪物等级在普通难度上，怪物的等级由怪物的种类决定，不受场景等级的制约。在噩梦和地狱的难度中，怪物的等级由场景等级决定。普通怪物的等级为场景等级，场景的蓝色精英怪物等级为场景等级加2，金色怪物等级为场景等级加3.例如:85级的场景中会出现普通怪物85级、boss怪物87级、精英金怪兽88级3种等级的怪物关底boss等级固定，与场景等级无太大关系。怪物的分类要研究暗黑2的物品掉落系统，首先要了解暗黑世界中的怪物。暗黑中怪物分为如下几个种类等级：\n1.（eBoss）：中文中我们一般称之为.【关底BOSS】，如安达里尔、督瑞尔、墨菲斯托等\n2.（Boss）：即【普通BOSS】，这些怪物有且仅有6个：\n",{"type":594,"children":8535,"toc":9145},[8536,8541,8592,8597,8637,8642,8647,8652,8657,8662,8667,8702,8707,8720,8725,8733,8741,8748,8753,8860,8868,8875,8880,8888,8895,8900,8908,8915,8920,8928,8933,8945,8950,8958,8963,8971,8976,8989,8994,8999,9004,9011,9016,9023,9028,9036,9041,9049,9054,9062,9067,9072,9105,9115,9120,9125,9130,9135,9140],{"type":597,"tag":598,"props":8537,"children":8539},{"id":8538},"怪物等级",[8540],{"type":603,"value":8538},{"type":597,"tag":1321,"props":8542,"children":8543},{},[8544,8549,8554],{"type":597,"tag":807,"props":8545,"children":8546},{},[8547],{"type":603,"value":8548},"在普通难度上，怪物的等级由怪物的种类决定，不受场景等级的制约。",{"type":597,"tag":807,"props":8550,"children":8551},{},[8552],{"type":603,"value":8553},"在噩梦和地狱的难度中，怪物的等级由场景等级决定。普通怪物的等级为场景等级，场景的蓝色精英怪物等级为场景等级加2，金色怪物等级为场景等级加3.例如:85级的场景中会出现普通怪物85级、boss怪物87级、精英金怪兽88级3种等级的怪物",{"type":597,"tag":807,"props":8555,"children":8556},{},[8557,8562,8564,8567,8571,8574,8578,8581,8585,8588],{"type":597,"tag":1080,"props":8558,"children":8559},{},[8560],{"type":603,"value":8561},"关底boss等级固定",{"type":603,"value":8563},"，与场景等级无太大关系。",{"type":597,"tag":1595,"props":8565,"children":8566},{},[],{"type":597,"tag":719,"props":8568,"children":8570},{"alt":591,"src":8569},"/images/2022-08-05-dia2/1659765901000.png",[],{"type":597,"tag":1595,"props":8572,"children":8573},{},[],{"type":597,"tag":719,"props":8575,"children":8577},{"alt":591,"src":8576},"/images/2022-08-05-dia2/1659765913000.png",[],{"type":597,"tag":1595,"props":8579,"children":8580},{},[],{"type":597,"tag":719,"props":8582,"children":8584},{"alt":591,"src":8583},"/images/2022-08-05-dia2/1659765924000.png",[],{"type":597,"tag":1595,"props":8586,"children":8587},{},[],{"type":597,"tag":719,"props":8589,"children":8591},{"alt":591,"src":8590},"/images/2022-08-05-dia2/1659765933000.png",[],{"type":597,"tag":1023,"props":8593,"children":8595},{"id":8594},"怪物的分类",[8596],{"type":603,"value":8594},{"type":597,"tag":606,"props":8598,"children":8599},{},[8600,8602,8605,8607,8610,8612,8615,8617,8620,8622,8625,8627,8630,8632,8635],{"type":603,"value":8601},"要研究暗黑2的物品掉落系统，首先要了解暗黑世界中的怪物。暗黑中怪物分为如下几个种类等级：",{"type":597,"tag":1595,"props":8603,"children":8604},{},[],{"type":603,"value":8606},"\n1.（eBoss）：中文中我们一般称之为.【关底BOSS】，如安达里尔、督瑞尔、墨菲斯托等",{"type":597,"tag":1595,"props":8608,"children":8609},{},[],{"type":603,"value":8611},"\n2.（Boss）：即【普通BOSS】，这些怪物有且仅有6个：",{"type":597,"tag":1595,"props":8613,"children":8614},{},[],{"type":603,"value":8616},"\n☆血乌 格里斯瓦得 罗达门特 召唤者 衣卒尔 尼拉塞克",{"type":597,"tag":1595,"props":8618,"children":8619},{},[],{"type":603,"value":8621},"\n3.（Unique）：中文中我们一般称之为【精英怪】，游戏中表现为其名字为暗金色。分为固定精英怪（Super Unique）和随机精英怪（Random Unique）。固定精英怪拥有固定的名字和固定的出现地点，拥有固定属性以及可能出现的随机属性。如“毕须博须”、“暴躁外皮”等。随机精英怪则是在游戏中随机出现，名字由词缀“XXX之XXX的”的随机构成，并随机获得一些特殊属性。",{"type":597,"tag":1595,"props":8623,"children":8624},{},[],{"type":603,"value":8626},"\n4.（Minion）：中文中我们称之为【随从】，即精英怪身边的与其同类的喽啰怪物。在游戏中外观和普通怪一样，但隐藏有带领它的精英怪的部分特殊属性。",{"type":597,"tag":1595,"props":8628,"children":8629},{},[],{"type":603,"value":8631},"\n5.（Champion）：中文中我们称之为【头目】。游戏中表现为其名字为蓝色。有时候它们能从其名字的前缀（如果有的话）中获得特殊属性。",{"type":597,"tag":1595,"props":8633,"children":8634},{},[],{"type":603,"value":8636},"\n6.（Normal）：普通小怪。游戏中表现为其名字为白色。",{"type":597,"tag":1023,"props":8638,"children":8640},{"id":8639},"财宝阶层",[8641],{"type":603,"value":8639},{"type":597,"tag":606,"props":8643,"children":8644},{},[8645],{"type":603,"value":8646},"TC是一个包含了众多物品清单的多层目录，一个大TC目录中可能包含有多个子TC目录。 怪物死亡后掉落的物品就是从其TC目录的物品清单中按照一定规则随机取出物品。\n但我们玩家在日常口头交流时，常常只讨论武器和防具的掉落，并将TC目录简化为一个数字等级，简称为怪物的TC。比如我们常说的墨菲斯托的TC=78，暴躁外皮的TC=87等等。",{"type":597,"tag":606,"props":8648,"children":8649},{},[8650],{"type":603,"value":8651},"☆TC由3到87，按3递增（3、6、9…81、84、87），共有29个递增的TC阶层。",{"type":597,"tag":598,"props":8653,"children":8655},{"id":8654},"掉落规则",[8656],{"type":603,"value":8654},{"type":597,"tag":1023,"props":8658,"children":8660},{"id":8659},"物品等级",[8661],{"type":603,"value":8659},{"type":597,"tag":606,"props":8663,"children":8664},{},[8665],{"type":603,"value":8666},"物品等级常用术语为ilvl，注意这个等级不是使用装备需要的等级，而是一个内在的等级数据，一定程度上决定了装备可能的质量。",{"type":597,"tag":803,"props":8668,"children":8669},{},[8670,8678,8686,8694],{"type":597,"tag":807,"props":8671,"children":8672},{},[8673],{"type":597,"tag":1080,"props":8674,"children":8675},{},[8676],{"type":603,"value":8677},"打怪掉落  打怪刷到的装备等级=掉装备怪物的等级",{"type":597,"tag":807,"props":8679,"children":8680},{},[8681],{"type":597,"tag":1080,"props":8682,"children":8683},{},[8684],{"type":603,"value":8685},"翻箱子掉落 开箱子掉落的装备等级=场景等级",{"type":597,"tag":807,"props":8687,"children":8688},{},[8689],{"type":597,"tag":1080,"props":8690,"children":8691},{},[8692],{"type":603,"value":8693},"在NPC那里买到 商店买的装备等级=人物等级+5",{"type":597,"tag":807,"props":8695,"children":8696},{},[8697],{"type":597,"tag":1080,"props":8698,"children":8699},{},[8700],{"type":603,"value":8701},"在NPC那里通过赌博得到  赌博得的装备等级=人物等级+4或-5",{"type":597,"tag":606,"props":8703,"children":8704},{},[8705],{"type":603,"value":8706},"**物品等级最大99。**物品等级最大的作用有两个：",{"type":597,"tag":803,"props":8708,"children":8709},{},[8710,8715],{"type":597,"tag":807,"props":8711,"children":8712},{},[8713],{"type":603,"value":8714},"决定了该物品的最大出孔数,比如，同样是灰幕寿衣，如果是25级以下怪物掉落的，它的物品等级就是25以下，它最大的打孔数就是3孔；如果是高于25级怪物掉落的，它的物品等级也就高于25，这件衣服最大孔数就是4孔。",{"type":597,"tag":807,"props":8716,"children":8717},{},[8718],{"type":603,"value":8719},"物品等级决定了装备的词缀，物品等级越高，可能出现的词缀就越好。",{"type":597,"tag":1023,"props":8721,"children":8723},{"id":8722},"词缀等级",[8724],{"type":603,"value":8722},{"type":597,"tag":606,"props":8726,"children":8727},{},[8728],{"type":597,"tag":1080,"props":8729,"children":8730},{},[8731],{"type":603,"value":8732},"物品的属性来源于物品所具有的词缀。游戏中每一种词缀都代表了某一种特定的属性，一旦物品拥有了某个词缀，那么就一定具有这个词缀所代表的属性。",{"type":597,"tag":606,"props":8734,"children":8735},{},[8736,8739],{"type":597,"tag":1595,"props":8737,"children":8738},{},[],{"type":603,"value":8740},"\n所有的词缀总共分为2类：前缀和后缀。前缀和后缀又分别按照所代表属性的不同分成组。",{"type":597,"tag":606,"props":8742,"children":8743},{},[8744],{"type":597,"tag":719,"props":8745,"children":8747},{"alt":591,"src":8746},"/images/2022-08-05-dia2/1659767663000.png",[],{"type":597,"tag":606,"props":8749,"children":8750},{},[8751],{"type":603,"value":8752},"比如图中的绿框内是前缀，红框内是后缀，它们对应下面蓝色字体的“属性”，珠宝匠对应4孔，偏向对应格档速度和格档机率。",{"type":597,"tag":606,"props":8754,"children":8755},{},[8756,8758,8763,8766,8769,8771,8774,8776,8779,8781,8784,8786,8789,8791,8794,8796,8799,8801,8804,8807,8809,8812,8814,8817,8819,8822,8824,8827,8829,8832,8834,8837,8839,8842,8844,8847,8849,8852,8855],{"type":603,"value":8757},"词缀种类非常多，蓝色装备最多可以从词缀中选择不同的两个，黄色最多选择6个。而不同词缀又是有不同等级的，",{"type":597,"tag":1080,"props":8759,"children":8760},{},[8761],{"type":603,"value":8762},"高等级词缀当然只能出现在物品等级和品质等级更高的装备上。",{"type":597,"tag":1595,"props":8764,"children":8765},{},[],{"type":597,"tag":1595,"props":8767,"children":8768},{},[],{"type":603,"value":8770},"\n前缀共分为三个系26个小组：",{"type":597,"tag":1595,"props":8772,"children":8773},{},[],{"type":603,"value":8775},"\n第一系是进攻型前缀共计14小组：",{"type":597,"tag":1595,"props":8777,"children":8778},{},[],{"type":603,"value":8780},"\n编号110组加准确率；编号105组增强伤害；编号111组同时加准确和伤害 或者 按等级加准确；编号123组加对恶魔的准确和伤害；编号142组加对不死的准确和伤害；编号137组加冰伤害；编号138组加火伤害；编号139组加电伤害；编号140组加毒伤害；编号113组吓跑怪物；编号121组杀死敌人加法力；编号107组所受伤害转为法力；编号114组加mf；编号112组加照亮范围",{"type":597,"tag":1595,"props":8782,"children":8783},{},[],{"type":603,"value":8785},"\n第二系是防御型前缀共计11小组：",{"type":597,"tag":1595,"props":8787,"children":8788},{},[],{"type":603,"value":8790},"\n编号117组加抗冰；编号118组加抗火；编号119组加抗电；编号120组加抗毒；编号116组加全抗；编号115组加法力；编号101组加防御；编号108组加耐力；编号109组按百分比加耐力；编号122组增加凹槽；编号141组增加投掷物数量；",{"type":597,"tag":1595,"props":8792,"children":8793},{},[],{"type":603,"value":8795},"\n第三系是技能前缀有1个小组：",{"type":597,"tag":1595,"props":8797,"children":8798},{},[],{"type":603,"value":8800},"\n编号125小组：加人物技能；加亚马逊单系技能；加野蛮人单系技能；加圣骑士单系技能；加死灵法师单系技能；加法师单系技能；加德鲁伊单系技能；加刺客单系技能；",{"type":597,"tag":1595,"props":8802,"children":8803},{},[],{"type":597,"tag":1595,"props":8805,"children":8806},{},[],{"type":603,"value":8808},"\n后缀共分为四个系35个小组：",{"type":597,"tag":1595,"props":8810,"children":8811},{},[],{"type":603,"value":8813},"\n第一系是进攻型后缀共计16小组：",{"type":597,"tag":1595,"props":8815,"children":8816},{},[],{"type":603,"value":8818},"\n编号15组加最小伤害值；编号14组加最大伤害值；编号10组加冰伤害；编号12组加火伤害；编号13组加电伤害；编号16组加毒伤害；编号27组偷取生命；编号28组偷取法力；编号24组；编号20组阻止怪物；编号4组忽略目标防御；编号7组加攻击速度；编号9组加施法速度；编号21组加额外金币；编号22组加mf；编号25组同时加照亮范围和准确；",{"type":597,"tag":1595,"props":8820,"children":8821},{},[],{"type":603,"value":8823},"\n第二系是防御型后缀共计11小组：",{"type":597,"tag":1595,"props":8825,"children":8826},{},[],{"type":603,"value":8828},"\n编号1组物理伤害减少；编号2组魔法伤害减少；编号29组减少中毒时间；编号11组冰冻时间减半；编号35组加快速奔跑；编号18组加快速打击恢复；编号8组加格挡；编号6组反弹伤害；编号39组投掷物恢复数量；编号37组装备自动修复；编号39组永不磨损",{"type":597,"tag":1595,"props":8830,"children":8831},{},[],{"type":603,"value":8833},"\n第三系是技能后缀有1个小组：",{"type":597,"tag":1595,"props":8835,"children":8836},{},[],{"type":603,"value":8838},"\n编号44组：加亚马逊单个技能(包括聚气)；加野蛮人单个技能(包括聚气)；加德鲁伊单个技能(包括聚气)；加死灵法师单个技能(包括聚气)；加圣骑士单个技能(包括聚气)；加法师单个技能(包括聚气)；",{"type":597,"tag":1595,"props":8840,"children":8841},{},[],{"type":603,"value":8843},"\n第四系是属性后缀共计7个小组：",{"type":597,"tag":1595,"props":8845,"children":8846},{},[],{"type":603,"value":8848},"\n编号31组加力量；编号17组加敏捷；编号23组加能量；编号41组按等级加法力、按等级加生命或按等级同时加法力和生命(仅限蓝色装备)；编号26组加生命；编号19组自动恢复生命；编号30组减需求；",{"type":597,"tag":1595,"props":8850,"children":8851},{},[],{"type":597,"tag":1595,"props":8853,"children":8854},{},[],{"type":597,"tag":1080,"props":8856,"children":8857},{},[8858],{"type":603,"value":8859},"当装备从怪物身上掉落时，或是当人物离开城镇导致商店里的商品更新时，或是当人物把物品从商人那里买下来时，或是当你用赫拉迪克方块合成新的物品时，物品的属性就在那一瞬间随机生成了。生成时系统将会随机挑选一些词缀安排给这个物品，于是物品就有了变化莫测的属性",{"type":597,"tag":803,"props":8861,"children":8862},{},[8863],{"type":597,"tag":807,"props":8864,"children":8865},{},[8866],{"type":603,"value":8867},"取最高 qlvl or ilvl 为X 当｛ X \u003C (99-Q/2) ｝时，则该物品是低等物品,词缀等级（A）按照  { A = X - Q/2 } 计算词缀等级。",{"type":597,"tag":606,"props":8869,"children":8870},{},[8871],{"type":597,"tag":719,"props":8872,"children":8874},{"alt":591,"src":8873},"/images/2022-08-05-dia2/1659767006000.png",[],{"type":597,"tag":606,"props":8876,"children":8877},{},[8878],{"type":603,"value":8879},"举个栗子：我有一件地狱A1冰冷之原掉的装备，由于它是68场景等级（M），所以怪物是68-71级之间，掉落的装备就是68级-71级物等。比如按最低的68白怪掉的一个战帽，他的品质等级（Q）是34级，那么，带入公式 68 \u003C [ (99-34/2) = 82 ]，满足公式一。词缀等级按照 {A= 68 - 34/2 = 51}计算，他的词缀就是51级。",{"type":597,"tag":803,"props":8881,"children":8882},{},[8883],{"type":597,"tag":807,"props":8884,"children":8885},{},[8886],{"type":603,"value":8887},"当｛ X > (99-Q/2) ｝时则是高等物品 按照 {A=2*X-99} 计算词缀等级。",{"type":597,"tag":606,"props":8889,"children":8890},{},[8891],{"type":597,"tag":719,"props":8892,"children":8894},{"alt":591,"src":8893},"/images/2022-08-05-dia2/1659767121000.png",[],{"type":597,"tag":606,"props":8896,"children":8897},{},[8898],{"type":603,"value":8899},"举个栗子：超市金怪出了一个君主盾（统盾），85+3，物等（I）88级，大于品质（Q）72级，带入公式 { A=2*88-99 } = 77级词缀等级（A）",{"type":597,"tag":803,"props":8901,"children":8902},{},[8903],{"type":597,"tag":807,"props":8904,"children":8905},{},[8906],{"type":603,"value":8907},"以上情况之外，还有一种特殊情况，游戏内有7种自带 “魔法等级” （ML）的物品，按照 A= X + ML 计算",{"type":597,"tag":606,"props":8909,"children":8910},{},[8911],{"type":597,"tag":719,"props":8912,"children":8914},{"alt":591,"src":8913},"/images/2022-08-05-dia2/1659767156000.png",[],{"type":597,"tag":606,"props":8916,"children":8917},{},[8918],{"type":603,"value":8919},"举个栗子：3c瘸子掉了一个头环，他的最低物等（I）至少是82级。他的魔法等级是3，那么公式计算，他的词缀等级应该是 A = 82 + 3，85级。那么问题来了，他会鉴定出+2职业技能么？答案是，不能。 因为+2全技能的词缀是90级的。",{"type":597,"tag":621,"props":8921,"children":8923},{"code":8922},"var x = math.max(qlvl,ilvl);\nfloat result;\n\nif(mlvl == 0)\n{\n    if( x > 99-(qlvl/2))\n    {\n        result = 2*x - 99; \n    }\n    else\n    {\n        result = x - qlvl/2\n    }\n}\nelse\n{\n    result = x +i.mlvl;\n}\n",[8924],{"type":597,"tag":629,"props":8925,"children":8926},{"__ignoreMap":591},[8927],{"type":603,"value":8922},{"type":597,"tag":1023,"props":8929,"children":8931},{"id":8930},"品质等级",[8932],{"type":603,"value":8930},{"type":597,"tag":606,"props":8934,"children":8935},{},[8936,8938,8943],{"type":603,"value":8937},"品质等级（qlvl）：",{"type":597,"tag":1080,"props":8939,"children":8940},{},[8941],{"type":603,"value":8942},"每个装备固有的一个品质等级",{"type":603,"value":8944},"，对于非绿色非暗金装备，qlvl和其底材一样，比如一件执政官铠甲，无论是蓝色还是黄色，其qlvl都是84。",{"type":597,"tag":606,"props":8946,"children":8947},{},[8948],{"type":603,"value":8949},"品质等级是玩家无法左右的，但是需要了解。因为它会与财宝等级（TC）一起决定掉落的。",{"type":597,"tag":606,"props":8951,"children":8952},{},[8953],{"type":597,"tag":1080,"props":8954,"children":8955},{},[8956],{"type":603,"value":8957},"品质等级决定具体是哪件装备（是镰刀还是执政官甲）；",{"type":597,"tag":1023,"props":8959,"children":8961},{"id":8960},"财富等级",[8962],{"type":603,"value":8960},{"type":597,"tag":606,"props":8964,"children":8965},{},[8966],{"type":597,"tag":1080,"props":8967,"children":8968},{},[8969],{"type":603,"value":8970},"财宝等级决定物品的品质等级",{"type":597,"tag":606,"props":8972,"children":8973},{},[8974],{"type":603,"value":8975},"怪物是否能掉落对应装备必须满足两个条件：",{"type":597,"tag":1321,"props":8977,"children":8978},{},[8979,8984],{"type":597,"tag":807,"props":8980,"children":8981},{},[8982],{"type":603,"value":8983},"怪物的“财宝等级”（TC）大于或等于装备所在的“财宝等级”（TC），",{"type":597,"tag":807,"props":8985,"children":8986},{},[8987],{"type":603,"value":8988},"同时怪物自身的等级要大于或等于装备自身的“品质等级”（qlvl）。",{"type":597,"tag":1023,"props":8990,"children":8992},{"id":8991},"底材",[8993],{"type":603,"value":8991},{"type":597,"tag":606,"props":8995,"children":8996},{},[8997],{"type":603,"value":8998},"首先我们要提前介绍“底材”这个概念。其实在之前的内容已经提到过很多次“底材”，不过基本上都局限于制作符文之语的白色物品。但严格地说，“底材”实际上是所有魔法装备的衍生基础。你可以简单地理解为，一件白色的“军帽”经过“上色”变成了带有1-2条额外属性的蓝色“军帽”，或者经过另一种“上色”就变成了暗金物品“谐角之冠”，但他们的底材都是“军帽”。",{"type":597,"tag":606,"props":9000,"children":9001},{},[9002],{"type":603,"value":9003},"而底材也分为了普通级、扩展级和精英级三类，三类底材拥有同样的模型，后一级比前一级的基础属性更高，“军帽”就属于“精英级”底材：",{"type":597,"tag":606,"props":9005,"children":9006},{},[9007],{"type":597,"tag":719,"props":9008,"children":9010},{"alt":591,"src":9009},"/images/2022-08-05-dia2/1635230129413.png",[],{"type":597,"tag":606,"props":9012,"children":9013},{},[9014],{"type":603,"value":9015},"同一底材的暗金/绿色物品还会有自己的专属qlvl，一般叫做“成品qlvl”，如果我们打到了一个白色“军帽”，那它的qlvl显然就是58，而暗金军帽“谐角之冠”还会有自己专属的成品qlvl：69(见上上图的左下角)。",{"type":597,"tag":606,"props":9017,"children":9018},{},[9019],{"type":597,"tag":719,"props":9020,"children":9022},{"alt":591,"src":9021},"/images/2022-08-05-dia2/1659770992000.png",[],{"type":597,"tag":1023,"props":9024,"children":9026},{"id":9025},"掉落机制",[9027],{"type":603,"value":9025},{"type":597,"tag":606,"props":9029,"children":9030},{},[9031],{"type":597,"tag":1080,"props":9032,"children":9033},{},[9034],{"type":603,"value":9035},"怪物会掉落特定的物品么?",{"type":597,"tag":606,"props":9037,"children":9038},{},[9039],{"type":603,"value":9040},"不,不过金色怪物和头目会有更高的概率掉落魔法物品,头目会掉落魔法物品或更多的黄金.不过,怪物的种类与掉落的物品没有关系.",{"type":597,"tag":606,"props":9042,"children":9043},{},[9044],{"type":597,"tag":1080,"props":9045,"children":9046},{},[9047],{"type":603,"value":9048},"人物的等级与掉落的物品有关么?",{"type":597,"tag":606,"props":9050,"children":9051},{},[9052],{"type":603,"value":9053},"不,掉落的物品只与怪物等级与场景等级有关.",{"type":597,"tag":606,"props":9055,"children":9056},{},[9057],{"type":597,"tag":1080,"props":9058,"children":9059},{},[9060],{"type":603,"value":9061},"锁住的箱子会掉更好的东西么?",{"type":597,"tag":606,"props":9063,"children":9064},{},[9065],{"type":603,"value":9066},"不,但它会掉出更多的东西,一般来说是没上锁的两倍.",{"type":597,"tag":3995,"props":9068,"children":9070},{"id":9069},"掉落过程",[9071],{"type":603,"value":9069},{"type":597,"tag":803,"props":9073,"children":9074},{},[9075,9090],{"type":597,"tag":807,"props":9076,"children":9077},{},[9078,9080,9083,9085,9088],{"type":603,"value":9079},"底材判定过程（TC判定过程）",{"type":597,"tag":1595,"props":9081,"children":9082},{},[],{"type":603,"value":9084},"\n怪物的TC值代表了怪物能掉落的物品底材的最高Qlvl。",{"type":597,"tag":1595,"props":9086,"children":9087},{},[],{"type":603,"value":9089},"\n☆也就是说，当怪物TC ≥ 物品底材Qlvl时，则怪物能掉落该物品底材。",{"type":597,"tag":807,"props":9091,"children":9092},{},[9093,9095,9098,9100,9103],{"type":603,"value":9094},"成色判定过程（Mlvl判定过程）",{"type":597,"tag":1595,"props":9096,"children":9097},{},[],{"type":603,"value":9099},"\n确定了物品的底材后，系统将按照暗金 - 绿色 - 黄色 - 蓝色 - 白色的顺序来判定成色。当判定为暗金或者绿色时，系统会检查怪物等级是否满足物品的成品Qlvl。",{"type":597,"tag":1595,"props":9101,"children":9102},{},[],{"type":603,"value":9104},"\n如果物品成色被判定为暗金，而怪物等级Mlvl不足以掉落该物品的暗金形态或者该物品暗金形态不存在，则会掉落该物品的黄色形态并拥有3倍的耐久度；如果物品成色被判定为绿色，而怪物等级Mlvl不足以掉落该物品的绿色形态或者该物品绿色形态不存在，则会掉落该物品的蓝色形态并拥有2倍的耐久度。",{"type":597,"tag":606,"props":9106,"children":9107},{},[9108,9110,9113],{"type":603,"value":9109},"☆ 也就是说，当怪物等级Qlvl≥物品成品Qlvl时，怪物才能掉落该物品的暗金/绿色形态。",{"type":597,"tag":1595,"props":9111,"children":9112},{},[],{"type":603,"value":9114},"\n☆ MF值会分别增加暗金、绿色、黄色、蓝色判定的几率，但不影响超强、普通、劣质的判定。",{"type":597,"tag":606,"props":9116,"children":9117},{},[9118],{"type":603,"value":9119},"现在我们回过头来看看“谐角之冠”的掉落过程：",{"type":597,"tag":606,"props":9121,"children":9122},{},[9123],{"type":603,"value":9124},"1、击杀怪物A，假设它的财宝等级(TC)为59，怪物等级(mlvl)为65，那么就可以掉落qlvl为58的底材“军帽”(因为此时TC>底材qlvl)",{"type":597,"tag":606,"props":9126,"children":9127},{},[9128],{"type":603,"value":9129},"2、MF值开始介入(在这之前TC表还有一系列的pick过程，较为复杂，暂不介绍)，游戏进入“暗金 - 绿色 - 黄色 - 蓝色 - 白色”的掉落判定顺序，假设此时可以掉落该底材的暗金品质装备“谐角之冠”，但是由于怪物等级mlvl 65\u003C“谐角之冠”的成品qlvl 69，则无法掉落，改为掉落黄色品质的“军帽”，且具有3倍耐久度。",{"type":597,"tag":606,"props":9131,"children":9132},{},[9133],{"type":603,"value":9134},"3、如果怪物B的TC为57，那么根本不会掉落底材“军帽”，后续的“上色”流程无从谈起。",{"type":597,"tag":606,"props":9136,"children":9137},{},[9138],{"type":603,"value":9139},"4、如果怪物C的TC为67，mlvl为70，其余流程与前面一致，那么可以成功掉落“谐角之冠”。(因为TC>底材qlvl，可以进入掉落判定阶段，当判定为“谐角之冠”时，检查怪物mlvl>“谐角之冠”的成品qlvl，符合要求)",{"type":597,"tag":606,"props":9141,"children":9142},{},[9143],{"type":603,"value":9144},"前面已经提到过，MF只和“上色”有关，无法影响装备的品质等级qlvl，所以就算是把MF堆到10000，你在普通难度下也无法获得“统治者大盾”。",{"title":591,"searchDepth":787,"depth":787,"links":9146},[9147,9151],{"id":8538,"depth":787,"text":8538,"children":9148},[9149,9150],{"id":8594,"depth":1530,"text":8594},{"id":8639,"depth":1530,"text":8639},{"id":8654,"depth":787,"text":8654,"children":9152},[9153,9154,9155,9156,9157,9158],{"id":8659,"depth":1530,"text":8659},{"id":8722,"depth":1530,"text":8722},{"id":8930,"depth":1530,"text":8930},{"id":8960,"depth":1530,"text":8960},{"id":8991,"depth":1530,"text":8991},{"id":9025,"depth":1530,"text":9025},"content:game:2022-08-05-dia2.md","game/2022-08-05-dia2.md","2022-08-05",{"_path":183,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":182,"description":9163,"body":9164,"_type":791,"_id":9246,"_source":793,"_file":9247,"_extension":795,"date":9248},"代码中创建实体,然后绑定view在link的时候,创建相关实体SpaceWaterList.cs中,这种注意创建的实体和parent没有关系..如果是在land中,需要在销毁land的时候,同时销毁该实体.则不能使用该方法..public void Link(World world, Entity entity, params object[] list)\n{\n    for (int i = 0; i \u003C this.Spawners.Count; i++)\n    {\n        var waterEntity = world.EntityManager.CreateEntity();\n",{"type":594,"children":9165,"toc":9242},[9166,9172,9178,9186,9194,9234],{"type":597,"tag":598,"props":9167,"children":9169},{"id":9168},"代码中创建实体然后绑定view",[9170],{"type":603,"value":9171},"代码中创建实体,然后绑定view",{"type":597,"tag":598,"props":9173,"children":9175},{"id":9174},"在link的时候创建相关实体",[9176],{"type":603,"value":9177},"在link的时候,创建相关实体",{"type":597,"tag":1321,"props":9179,"children":9180},{},[9181],{"type":597,"tag":807,"props":9182,"children":9183},{},[9184],{"type":603,"value":9185},"SpaceWaterList.cs中,这种注意创建的实体和parent没有关系..如果是在land中,需要在销毁land的时候,同时销毁该实体.则不能使用该方法..",{"type":597,"tag":621,"props":9187,"children":9189},{"code":9188},"public void Link(World world, Entity entity, params object[] list)\n{\n    for (int i = 0; i \u003C this.Spawners.Count; i++)\n    {\n        var waterEntity = world.EntityManager.CreateEntity();\n\n        world.EntityManager.AddComponentObject(waterEntity,this.Spawners[i]); \n\n        this.Spawners[i].gameObject.Link(world, waterEntity, entity);\n    }\n}\n",[9190],{"type":597,"tag":629,"props":9191,"children":9192},{"__ignoreMap":591},[9193],{"type":603,"value":9188},{"type":597,"tag":1321,"props":9195,"children":9196},{},[9197],{"type":597,"tag":807,"props":9198,"children":9199},{},[9200,9202,9208,9210,9216,9218,9224,9226,9232],{"type":603,"value":9201},"SpaceNPCList.cs中,通过ConverEntitys.ConvertGameObejct对游戏对象进行转换..注意其上的",{"type":597,"tag":629,"props":9203,"children":9205},{"className":9204},[],[9206],{"type":603,"value":9207},"ConvertToEntity",{"type":603,"value":9209},"组件转换目标设置为",{"type":597,"tag":629,"props":9211,"children":9213},{"className":9212},[],[9214],{"type":603,"value":9215},"none",{"type":603,"value":9217}," ,在这里",{"type":597,"tag":629,"props":9219,"children":9221},{"className":9220},[],[9222],{"type":603,"value":9223},"SpawnerAuthoring",{"type":603,"value":9225}," 可以继承",{"type":597,"tag":629,"props":9227,"children":9229},{"className":9228},[],[9230],{"type":603,"value":9231},"DeclareParentBehaviour",{"type":603,"value":9233}," 就可以设置parent.",{"type":597,"tag":621,"props":9235,"children":9237},{"code":9236},"    public List\u003CSpawnerAuthoring> Spawners = new List\u003CSpawnerAuthoring>();\n    \n    public void Link(World world, Entity entity, params object[] list)\n    {\n        foreach (var item in this.Spawners)\n        {\n            ConverEntitys.ConvertGameObejct(world, item.gameObject, entity);\n        }\n    }\n",[9238],{"type":597,"tag":629,"props":9239,"children":9240},{"__ignoreMap":591},[9241],{"type":603,"value":9236},{"title":591,"searchDepth":787,"depth":787,"links":9243},[9244,9245],{"id":9168,"depth":787,"text":9171},{"id":9174,"depth":787,"text":9177},"content:game:2022-08-03-ecs.md","game/2022-08-03-ecs.md","2022-08-03",{"_path":354,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":353,"description":9250,"body":9251,"_type":791,"_id":9478,"_source":793,"_file":9479,"_extension":795,"date":9480},"由于升级了dots,致使vs使用的时候总是很卡.所以临时使用了rider,记录下使用过程中遇到的问题",{"type":594,"children":9252,"toc":9476},[9253,9257],{"type":597,"tag":606,"props":9254,"children":9255},{},[9256],{"type":603,"value":9250},{"type":597,"tag":1321,"props":9258,"children":9259},{},[9260,9272,9284,9296,9308,9320,9361,9387,9406,9418,9464],{"type":597,"tag":807,"props":9261,"children":9262},{},[9263,9265,9268],{"type":603,"value":9264},"禁用IntelliJ IDEA向Git自动添加、删除或更新文件的功能",{"type":597,"tag":1595,"props":9266,"children":9267},{},[],{"type":597,"tag":719,"props":9269,"children":9271},{"alt":591,"src":9270},"/images/2022-08-02-rider-use/1659421011000.png",[],{"type":597,"tag":807,"props":9273,"children":9274},{},[9275,9277,9280],{"type":603,"value":9276},"keymap设置键位：",{"type":597,"tag":1595,"props":9278,"children":9279},{},[],{"type":597,"tag":719,"props":9281,"children":9283},{"alt":591,"src":9282},"/images/2022-08-02-rider-use/6938c7b76587488faea649d26f43dbac.png",[],{"type":597,"tag":807,"props":9285,"children":9286},{},[9287,9289,9292],{"type":603,"value":9288},"设置主题：Editor=》 color scheme",{"type":597,"tag":1595,"props":9290,"children":9291},{},[],{"type":597,"tag":719,"props":9293,"children":9295},{"alt":591,"src":9294},"/images/2022-08-02-rider-use/2edb6d308f1a42a792826418bc903a6f.png",[],{"type":597,"tag":807,"props":9297,"children":9298},{},[9299,9301,9304],{"type":603,"value":9300},"设置编辑器字体大小",{"type":597,"tag":1595,"props":9302,"children":9303},{},[],{"type":597,"tag":719,"props":9305,"children":9307},{"alt":591,"src":9306},"/images/2022-08-02-rider-use/1659421547000.png",[],{"type":597,"tag":807,"props":9309,"children":9310},{},[9311,9313,9316],{"type":603,"value":9312},"设置c#命名规范,去除前缀以及设置驼峰",{"type":597,"tag":1595,"props":9314,"children":9315},{},[],{"type":597,"tag":719,"props":9317,"children":9319},{"alt":591,"src":9318},"/images/2022-08-02-rider-use/1659428204000.png",[],{"type":597,"tag":807,"props":9321,"children":9322},{},[9323,9325,9328,9330,9335,9337,9342,9344,9347,9349,9352,9356,9359],{"type":603,"value":9324},"去出波浪线警告",{"type":597,"tag":1595,"props":9326,"children":9327},{},[],{"type":603,"value":9329},"在 ",{"type":597,"tag":1080,"props":9331,"children":9332},{},[9333],{"type":603,"value":9334},"Error and Warnings",{"type":603,"value":9336}," 里有很多选项，你可以",{"type":597,"tag":1080,"props":9338,"children":9339},{},[9340],{"type":603,"value":9341},"选取任意一个，预览它的提示效果，并修改或者直接关闭它",{"type":603,"value":9343},"，",{"type":597,"tag":1595,"props":9345,"children":9346},{},[],{"type":603,"value":9348},"\n关闭后是不是觉得整个世界清爽了好多~",{"type":597,"tag":1595,"props":9350,"children":9351},{},[],{"type":597,"tag":719,"props":9353,"children":9355},{"alt":591,"src":9354},"/images/2022-08-02-rider-use/1659422704000.png",[],{"type":597,"tag":1595,"props":9357,"children":9358},{},[],{"type":603,"value":9360},"点击下面出现颜色 选择去除绿色和黄色标志",{"type":597,"tag":807,"props":9362,"children":9363},{},[9364,9366,9372,9374,9380,9383],{"type":603,"value":9365},"推荐这种去除波浪线,可以通过",{"type":597,"tag":629,"props":9367,"children":9369},{"className":9368},[],[9370],{"type":603,"value":9371},"show Context Actions",{"type":603,"value":9373}," => ",{"type":597,"tag":629,"props":9375,"children":9377},{"className":9376},[],[9378],{"type":603,"value":9379},"inspection:\"xxx\"",{"type":597,"tag":1595,"props":9381,"children":9382},{},[],{"type":597,"tag":719,"props":9384,"children":9386},{"alt":591,"src":9385},"/images/2022-08-02-rider-use/1659422560000.png",[],{"type":597,"tag":807,"props":9388,"children":9389},{},[9390,9392,9395,9399,9402],{"type":603,"value":9391},"有关脚本修改了的标志符，可以在下列设置中开启",{"type":597,"tag":1595,"props":9393,"children":9394},{},[],{"type":597,"tag":719,"props":9396,"children":9398},{"alt":591,"src":9397},"/images/2022-08-02-rider-use/20201203141714194.png",[],{"type":597,"tag":1595,"props":9400,"children":9401},{},[],{"type":597,"tag":719,"props":9403,"children":9405},{"alt":591,"src":9404},"/images/2022-08-02-rider-use/1659423520000.png",[],{"type":597,"tag":807,"props":9407,"children":9408},{},[9409,9411,9414],{"type":603,"value":9410},"工具栏的显示隐藏",{"type":597,"tag":1595,"props":9412,"children":9413},{},[],{"type":597,"tag":719,"props":9415,"children":9417},{"alt":591,"src":9416},"/images/2022-08-02-rider-use/1659423590000.png",[],{"type":597,"tag":807,"props":9419,"children":9420},{},[9421,9426,9429,9431,9434,9438,9441,9443,9449,9451,9457,9460],{"type":597,"tag":1080,"props":9422,"children":9423},{},[9424],{"type":603,"value":9425},"脚本保存后，Unity后台是否自动刷新",{"type":597,"tag":1595,"props":9427,"children":9428},{},[],{"type":603,"value":9430},"有时候我们修改了脚本，刚保存，就会发现后台的Unity已经开始编译了，会造成一定的卡顿。如果期望只有在切到Unity时才开始编译，可以关闭以下设置：",{"type":597,"tag":1595,"props":9432,"children":9433},{},[],{"type":597,"tag":719,"props":9435,"children":9437},{"alt":591,"src":9436},"/images/2022-08-02-rider-use/1659423746000.png",[],{"type":597,"tag":1595,"props":9439,"children":9440},{},[],{"type":603,"value":9442},"当然unity得需要开启自动刷新才行,否则切换到unity需要按下",{"type":597,"tag":629,"props":9444,"children":9446},{"className":9445},[],[9447],{"type":603,"value":9448},"ctrl",{"type":603,"value":9450},"+",{"type":597,"tag":629,"props":9452,"children":9454},{"className":9453},[],[9455],{"type":603,"value":9456},"r",{"type":597,"tag":1595,"props":9458,"children":9459},{},[],{"type":597,"tag":719,"props":9461,"children":9463},{"alt":591,"src":9462},"/images/2022-08-02-rider-use/1659424615000.png",[],{"type":597,"tag":807,"props":9465,"children":9466},{},[9467,9469,9472],{"type":603,"value":9468},"去除灰色参数提示",{"type":597,"tag":1595,"props":9470,"children":9471},{},[],{"type":597,"tag":719,"props":9473,"children":9475},{"alt":591,"src":9474},"/images/2022-08-02-rider-use/1659429053000.png",[],{"title":591,"searchDepth":787,"depth":787,"links":9477},[],"content:tool:2022-08-02-rider-use.md","tool/2022-08-02-rider-use.md","2022-08-02",{"_path":199,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":198,"description":9482,"body":9483,"_type":791,"_id":9622,"_source":793,"_file":9623,"_extension":795,"date":9624},"1. 游戏名称苟与剑我有一块地存档每天晚上睡觉会自动存档体力的回复体力会随着使用道具和工具等减少,体力为0后不能继续工作\n雨雪天气再室外使用道具:每次使用+1\n下午10:00-12:00使用道具:每次使用+2\n晚上0:00-6:00 使用道具:每次使用+4\n6:00 未入睡,第二天增加buff,每次使用+3主要回复方法:睡觉 回复30点+睡眠事件*每小时7点,睡的越多回复的越多吃东西 回复量因物品而异泡温泉 每分钟回复体力1点再旅馆吃饭装备女神的秘宝 每分钟回复体力1点增加体力总值:体力果实:增加15点耕地有1.2%几率出现一次向女神献上贡品10次.将物品扔进女神之泉即可春季或秋季赛马获胜采矿",{"type":594,"children":9484,"toc":9616},[9485,9491,9504,9509,9514,9519,9524,9532,9560,9568,9573,9606,9611],{"type":597,"tag":598,"props":9486,"children":9488},{"id":9487},"_1-游戏名称",[9489],{"type":603,"value":9490},"1. 游戏名称",{"type":597,"tag":1321,"props":9492,"children":9493},{},[9494,9499],{"type":597,"tag":807,"props":9495,"children":9496},{},[9497],{"type":603,"value":9498},"苟与剑",{"type":597,"tag":807,"props":9500,"children":9501},{},[9502],{"type":603,"value":9503},"我有一块地",{"type":597,"tag":598,"props":9505,"children":9507},{"id":9506},"存档",[9508],{"type":603,"value":9506},{"type":597,"tag":606,"props":9510,"children":9511},{},[9512],{"type":603,"value":9513},"每天晚上睡觉会自动存档",{"type":597,"tag":598,"props":9515,"children":9517},{"id":9516},"体力的回复",[9518],{"type":603,"value":9516},{"type":597,"tag":606,"props":9520,"children":9521},{},[9522],{"type":603,"value":9523},"体力会随着使用道具和工具等减少,体力为0后不能继续工作\n雨雪天气再室外使用道具:每次使用+1\n下午10:00-12:00使用道具:每次使用+2\n晚上0:00-6:00 使用道具:每次使用+4\n6:00 未入睡,第二天增加buff,每次使用+3",{"type":597,"tag":606,"props":9525,"children":9526},{},[9527],{"type":597,"tag":1080,"props":9528,"children":9529},{},[9530],{"type":603,"value":9531},"主要回复方法:",{"type":597,"tag":1321,"props":9533,"children":9534},{},[9535,9540,9545,9550,9555],{"type":597,"tag":807,"props":9536,"children":9537},{},[9538],{"type":603,"value":9539},"睡觉 回复30点+睡眠事件*每小时7点,睡的越多回复的越多",{"type":597,"tag":807,"props":9541,"children":9542},{},[9543],{"type":603,"value":9544},"吃东西 回复量因物品而异",{"type":597,"tag":807,"props":9546,"children":9547},{},[9548],{"type":603,"value":9549},"泡温泉 每分钟回复体力1点",{"type":597,"tag":807,"props":9551,"children":9552},{},[9553],{"type":603,"value":9554},"再旅馆吃饭",{"type":597,"tag":807,"props":9556,"children":9557},{},[9558],{"type":603,"value":9559},"装备女神的秘宝 每分钟回复体力1点",{"type":597,"tag":606,"props":9561,"children":9562},{},[9563],{"type":597,"tag":1080,"props":9564,"children":9565},{},[9566],{"type":603,"value":9567},"增加体力总值:",{"type":597,"tag":606,"props":9569,"children":9570},{},[9571],{"type":603,"value":9572},"体力果实:增加15点",{"type":597,"tag":803,"props":9574,"children":9575},{},[9576,9581,9586,9591,9596,9601],{"type":597,"tag":807,"props":9577,"children":9578},{},[9579],{"type":603,"value":9580},"耕地有1.2%几率出现一次",{"type":597,"tag":807,"props":9582,"children":9583},{},[9584],{"type":603,"value":9585},"向女神献上贡品10次.将物品扔进女神之泉即可",{"type":597,"tag":807,"props":9587,"children":9588},{},[9589],{"type":603,"value":9590},"春季或秋季赛马获胜",{"type":597,"tag":807,"props":9592,"children":9593},{},[9594],{"type":603,"value":9595},"采矿场100层锄地,有19.5%概率出现",{"type":597,"tag":807,"props":9597,"children":9598},{},[9599],{"type":603,"value":9600},"杂货店花费10000g购买",{"type":597,"tag":807,"props":9602,"children":9603},{},[9604],{"type":603,"value":9605},"冬天,在海边钓鱼1%概率获取",{"type":597,"tag":598,"props":9607,"children":9609},{"id":9608},"时间与日期",[9610],{"type":603,"value":9608},{"type":597,"tag":606,"props":9612,"children":9613},{},[9614],{"type":603,"value":9615},"主角在AM6:00~AM5:59期间可以活动.\n每天6点会触发新的一天的事件",{"title":591,"searchDepth":787,"depth":787,"links":9617},[9618,9619,9620,9621],{"id":9487,"depth":787,"text":9490},{"id":9506,"depth":787,"text":9506},{"id":9516,"depth":787,"text":9516},{"id":9608,"depth":787,"text":9608},"content:gyj:2022-06-12-基础知识.md","gyj/2022-06-12-基础知识.md","2022-06-12",{"_path":196,"_dir":798,"_draft":590,"_partial":590,"_locale":591,"title":195,"description":9626,"body":9627,"_type":791,"_id":11046,"_source":793,"_file":11047,"_extension":795,"date":11048},"稿件主要是游戏场景,游戏类型是横版种田的江湖类游戏.",{"type":594,"children":9628,"toc":11041},[9629,9633,9638,9643,9648,9714,9721,9724,9733,9738,9741,9746,9796,9799,9804,9809,9827,9832,9839,9846,9853,9860,9867,9874,9881,9891,10328,10331,10412,10415,10420,10423],{"type":597,"tag":606,"props":9630,"children":9631},{},[9632],{"type":603,"value":9626},{"type":597,"tag":606,"props":9634,"children":9635},{},[9636],{"type":603,"value":9637},"由于本人程序出身.对于美术不太了解,以下要求有不当之处,尽请谅解.",{"type":597,"tag":606,"props":9639,"children":9640},{},[9641],{"type":603,"value":9642},"由于制作内容非那种单张画稿,具体价格计费,双方可再商议.",{"type":597,"tag":1023,"props":9644,"children":9646},{"id":9645},"服装",[9647],{"type":603,"value":9645},{"type":597,"tag":606,"props":9649,"children":9650},{},[9651,9653,9659,9660,9666,9667,9673,9675,9680,9682,9687,9689,9694,9695,9700,9701,9706,9707,9712],{"type":603,"value":9652},"先看下一套衣服是如何组成的,分为",{"type":597,"tag":629,"props":9654,"children":9656},{"className":9655},[],[9657],{"type":603,"value":9658},"上衣",{"type":603,"value":9450},{"type":597,"tag":629,"props":9661,"children":9663},{"className":9662},[],[9664],{"type":603,"value":9665},"裤子",{"type":603,"value":9450},{"type":597,"tag":629,"props":9668,"children":9670},{"className":9669},[],[9671],{"type":603,"value":9672},"裙子",{"type":603,"value":9674},".",{"type":597,"tag":629,"props":9676,"children":9678},{"className":9677},[],[9679],{"type":603,"value":9658},{"type":603,"value":9681},"能盖住",{"type":597,"tag":629,"props":9683,"children":9685},{"className":9684},[],[9686],{"type":603,"value":9672},{"type":603,"value":9688},",",{"type":597,"tag":629,"props":9690,"children":9692},{"className":9691},[],[9693],{"type":603,"value":9672},{"type":603,"value":9681},{"type":597,"tag":629,"props":9696,"children":9698},{"className":9697},[],[9699],{"type":603,"value":9665},{"type":603,"value":9688},{"type":597,"tag":629,"props":9702,"children":9704},{"className":9703},[],[9705],{"type":603,"value":9672},{"type":603,"value":695},{"type":597,"tag":629,"props":9708,"children":9710},{"className":9709},[],[9711],{"type":603,"value":9665},{"type":603,"value":9713},"可以同时存在,也可以单独存在",{"type":597,"tag":606,"props":9715,"children":9716},{},[9717],{"type":597,"tag":719,"props":9718,"children":9720},{"alt":591,"src":9719},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/2222.png",[],{"type":597,"tag":3720,"props":9722,"children":9723},{},[],{"type":597,"tag":606,"props":9725,"children":9726},{},[9727],{"type":597,"tag":886,"props":9728,"children":9730},{"href":9729},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E8%A1%A3%E6%9C%8D%E5%88%B6%E4%BD%9C%E6%A8%A1%E6%9D%BF%E5%9B%BE.psd",[9731],{"type":603,"value":9732},"点我下载服装制作模板",{"type":597,"tag":606,"props":9734,"children":9735},{},[9736],{"type":603,"value":9737},"衣服到时候我们一个一个商讨着画",{"type":597,"tag":3720,"props":9739,"children":9740},{},[],{"type":597,"tag":598,"props":9742,"children":9744},{"id":9743},"修改",[9745],{"type":603,"value":9743},{"type":597,"tag":606,"props":9747,"children":9748},{},[9749,9751,9756,9757,9763,9765,9771,9772,9778,9780,9786,9788,9794],{"type":603,"value":9750},"所画",{"type":597,"tag":629,"props":9752,"children":9754},{"className":9753},[],[9755],{"type":603,"value":6161},{"type":603,"value":9688},{"type":597,"tag":629,"props":9758,"children":9760},{"className":9759},[],[9761],{"type":603,"value":9762},"大小",{"type":603,"value":9764},"请参考之前所画的",{"type":597,"tag":629,"props":9766,"children":9768},{"className":9767},[],[9769],{"type":603,"value":9770},"果树",{"type":603,"value":9688},{"type":597,"tag":629,"props":9773,"children":9775},{"className":9774},[],[9776],{"type":603,"value":9777},"树根",{"type":603,"value":9779},"或者说",{"type":597,"tag":629,"props":9781,"children":9783},{"className":9782},[],[9784],{"type":603,"value":9785},"底部",{"type":603,"value":9787},",需要",{"type":597,"tag":629,"props":9789,"children":9791},{"className":9790},[],[9792],{"type":603,"value":9793},"加粗",{"type":603,"value":9795},".占近似一个格子",{"type":597,"tag":3720,"props":9797,"children":9798},{},[],{"type":597,"tag":598,"props":9800,"children":9802},{"id":9801},"场景制作说明",[9803],{"type":603,"value":9801},{"type":597,"tag":606,"props":9805,"children":9806},{},[9807],{"type":603,"value":9808},"总结,横版常用背景大概有三种:   [点我下载 (/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/demo.zip)",{"type":597,"tag":1321,"props":9810,"children":9811},{},[9812,9817,9822],{"type":597,"tag":807,"props":9813,"children":9814},{},[9815],{"type":603,"value":9816},"多层组合,每层的图片宽高480*96 或者 480*128 (/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E8%83%8C%E6%99%AF%E6%BC%94%E7%A4%BA1.psd)",{"type":597,"tag":807,"props":9818,"children":9819},{},[9820],{"type":603,"value":9821},"单背景   图片宽高 864*192 (/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E8%83%8C%E6%99%AF%E6%BC%94%E7%A4%BA3.psd)",{"type":597,"tag":807,"props":9823,"children":9824},{},[9825],{"type":603,"value":9826},"多层和单背景混合   [点我下载 (/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E8%83%8C%E6%99%AF%E6%BC%94%E7%A4%BA2.psd)",{"type":597,"tag":606,"props":9828,"children":9829},{},[9830],{"type":603,"value":9831},"关于地形,一般画地形的时候都会像下面几种方式设计,仅供参考,不需要一定向下面这样:",{"type":597,"tag":606,"props":9833,"children":9834},{},[9835],{"type":597,"tag":719,"props":9836,"children":9838},{"alt":591,"src":9837},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675258902000.png",[],{"type":597,"tag":606,"props":9840,"children":9841},{},[9842],{"type":597,"tag":719,"props":9843,"children":9845},{"alt":591,"src":9844},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675264313000.png",[],{"type":597,"tag":606,"props":9847,"children":9848},{},[9849],{"type":597,"tag":719,"props":9850,"children":9852},{"alt":591,"src":9851},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675264565000.png",[],{"type":597,"tag":606,"props":9854,"children":9855},{},[9856],{"type":597,"tag":719,"props":9857,"children":9859},{"alt":591,"src":9858},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675265268000.png",[],{"type":597,"tag":606,"props":9861,"children":9862},{},[9863],{"type":597,"tag":719,"props":9864,"children":9866},{"alt":591,"src":9865},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/main_lev_build.png",[],{"type":597,"tag":606,"props":9868,"children":9869},{},[9870],{"type":597,"tag":719,"props":9871,"children":9873},{"alt":591,"src":9872},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675298801000.png",[],{"type":597,"tag":606,"props":9875,"children":9876},{},[9877],{"type":597,"tag":719,"props":9878,"children":9880},{"alt":591,"src":9879},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675298817000.png",[],{"type":597,"tag":606,"props":9882,"children":9883},{},[9884,9889],{"type":597,"tag":1080,"props":9885,"children":9886},{},[9887],{"type":603,"value":9888},"QQ三国",{"type":603,"value":9890},"和彩虹岛的地图都可以参考....................以下的参考图只是表达概念................下面的图都是西方游戏的设计..............画风都不符合国内游戏的感觉........仅作参考",{"type":597,"tag":803,"props":9892,"children":9893},{},[9894,9961,10014,10040,10066,10078,10116,10128,10161,10182,10194,10213,10232,10258,10277,10303],{"type":597,"tag":807,"props":9895,"children":9896},{},[9897,9899,9905,9906,9912,9913,9919,9920,9926,9927,9933,9934,9940,9943,9947,9950,9954,9957],{"type":603,"value":9898},"矿洞场景   可能包括的其他物品",{"type":597,"tag":629,"props":9900,"children":9902},{"className":9901},[],[9903],{"type":603,"value":9904},"地面",{"type":603,"value":9688},{"type":597,"tag":629,"props":9907,"children":9909},{"className":9908},[],[9910],{"type":603,"value":9911},"矿车",{"type":603,"value":9688},{"type":597,"tag":629,"props":9914,"children":9916},{"className":9915},[],[9917],{"type":603,"value":9918},"矿井架",{"type":603,"value":9688},{"type":597,"tag":629,"props":9921,"children":9923},{"className":9922},[],[9924],{"type":603,"value":9925},"轨道",{"type":603,"value":9688},{"type":597,"tag":629,"props":9928,"children":9930},{"className":9929},[],[9931],{"type":603,"value":9932},"发光的植物",{"type":603,"value":9688},{"type":597,"tag":629,"props":9935,"children":9937},{"className":9936},[],[9938],{"type":603,"value":9939},"矿洞的灯",{"type":597,"tag":1595,"props":9941,"children":9942},{},[],{"type":597,"tag":719,"props":9944,"children":9946},{"alt":591,"src":9945},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1656415110000.png",[],{"type":597,"tag":1595,"props":9948,"children":9949},{},[],{"type":597,"tag":719,"props":9951,"children":9953},{"alt":591,"src":9952},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675263527000.png",[],{"type":597,"tag":1595,"props":9955,"children":9956},{},[],{"type":597,"tag":719,"props":9958,"children":9960},{"alt":591,"src":9959},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675263652000.png",[],{"type":597,"tag":807,"props":9962,"children":9963},{},[9964,9966,9971,9972,9978,9980,9986,9987,9993,9994,10000,10003,10007,10010],{"type":603,"value":9965},"树林场景 可能包括的其他物品",{"type":597,"tag":629,"props":9967,"children":9969},{"className":9968},[],[9970],{"type":603,"value":9904},{"type":603,"value":9688},{"type":597,"tag":629,"props":9973,"children":9975},{"className":9974},[],[9976],{"type":603,"value":9977},"灌木丛",{"type":603,"value":9979}," ,",{"type":597,"tag":629,"props":9981,"children":9983},{"className":9982},[],[9984],{"type":603,"value":9985},"普通的石头",{"type":603,"value":9979},{"type":597,"tag":629,"props":9988,"children":9990},{"className":9989},[],[9991],{"type":603,"value":9992},"树叶做的绳索(上下)",{"type":603,"value":9688},{"type":597,"tag":629,"props":9995,"children":9997},{"className":9996},[],[9998],{"type":603,"value":9999},"普通的小花",{"type":597,"tag":1595,"props":10001,"children":10002},{},[],{"type":597,"tag":719,"props":10004,"children":10006},{"alt":591,"src":10005},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1656413417000.png",[],{"type":597,"tag":1595,"props":10008,"children":10009},{},[],{"type":597,"tag":719,"props":10011,"children":10013},{"alt":591,"src":10012},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675261053000.png",[],{"type":597,"tag":807,"props":10015,"children":10016},{},[10017,10019,10022,10026,10029,10033,10036],{"type":603,"value":10018},"海滩场景   有大海,",{"type":597,"tag":1595,"props":10020,"children":10021},{},[],{"type":597,"tag":719,"props":10023,"children":10025},{"alt":591,"src":10024},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675260355000.png",[],{"type":597,"tag":1595,"props":10027,"children":10028},{},[],{"type":597,"tag":719,"props":10030,"children":10032},{"alt":591,"src":10031},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675268015000.png",[],{"type":597,"tag":1595,"props":10034,"children":10035},{},[],{"type":597,"tag":719,"props":10037,"children":10039},{"alt":591,"src":10038},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675264871000.png",[],{"type":597,"tag":807,"props":10041,"children":10042},{},[10043,10045,10048,10052,10055,10059,10062],{"type":603,"value":10044},"江湖场景 ---- 或者有瀑布,或者底部有水,或者背景有水",{"type":597,"tag":1595,"props":10046,"children":10047},{},[],{"type":597,"tag":719,"props":10049,"children":10051},{"alt":591,"src":10050},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1672466507000.png",[],{"type":597,"tag":1595,"props":10053,"children":10054},{},[],{"type":597,"tag":719,"props":10056,"children":10058},{"alt":591,"src":10057},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675261783000.png",[],{"type":597,"tag":1595,"props":10060,"children":10061},{},[],{"type":597,"tag":719,"props":10063,"children":10065},{"alt":591,"src":10064},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1672396153000.png",[],{"type":597,"tag":807,"props":10067,"children":10068},{},[10069,10071,10074],{"type":603,"value":10070},"山谷场景  ---背景类似这种崖壁或者之类的东西..",{"type":597,"tag":1595,"props":10072,"children":10073},{},[],{"type":597,"tag":719,"props":10075,"children":10077},{"alt":591,"src":10076},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675259941000.png",[],{"type":597,"tag":807,"props":10079,"children":10080},{},[10081,10083,10086,10090,10093,10097,10100,10104,10107,10111,10114],{"type":603,"value":10082},"丛林场景  --- 茂密高大的森林背景",{"type":597,"tag":1595,"props":10084,"children":10085},{},[],{"type":597,"tag":719,"props":10087,"children":10089},{"alt":591,"src":10088},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675261301000.png",[],{"type":597,"tag":1595,"props":10091,"children":10092},{},[],{"type":597,"tag":719,"props":10094,"children":10096},{"alt":591,"src":10095},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675262911000.png",[],{"type":597,"tag":1595,"props":10098,"children":10099},{},[],{"type":597,"tag":719,"props":10101,"children":10103},{"alt":591,"src":10102},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675263449000.png",[],{"type":597,"tag":1595,"props":10105,"children":10106},{},[],{"type":597,"tag":719,"props":10108,"children":10110},{"alt":591,"src":10109},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675264082000.png",[],{"type":597,"tag":1595,"props":10112,"children":10113},{},[],{"type":603,"value":10115},"背景为连绵不觉的山,山林中既有矿石,也有树木,也有草药",{"type":597,"tag":807,"props":10117,"children":10118},{},[10119,10121,10124],{"type":603,"value":10120},"竹林场景--茂密高大的竹林背景",{"type":597,"tag":1595,"props":10122,"children":10123},{},[],{"type":597,"tag":719,"props":10125,"children":10127},{"alt":591,"src":10126},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675264778000.png",[],{"type":597,"tag":807,"props":10129,"children":10130},{},[10131,10133,10136,10140,10143,10147,10150,10154,10157],{"type":603,"value":10132},"家园场景",{"type":597,"tag":1595,"props":10134,"children":10135},{},[],{"type":597,"tag":719,"props":10137,"children":10139},{"alt":591,"src":10138},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675261436000.png",[],{"type":597,"tag":1595,"props":10141,"children":10142},{},[],{"type":597,"tag":719,"props":10144,"children":10146},{"alt":591,"src":10145},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675266818000.png",[],{"type":597,"tag":1595,"props":10148,"children":10149},{},[],{"type":597,"tag":719,"props":10151,"children":10153},{"alt":591,"src":10152},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1672396107000.png",[],{"type":597,"tag":1595,"props":10155,"children":10156},{},[],{"type":597,"tag":719,"props":10158,"children":10160},{"alt":591,"src":10159},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1672396142000.png",[],{"type":597,"tag":807,"props":10162,"children":10163},{},[10164,10166,10169,10173,10175,10178],{"type":603,"value":10165},"门派场景 --- 背景浮空岛或者是遥远的建筑..或者可以自己想象..没特别的想法.",{"type":597,"tag":1595,"props":10167,"children":10168},{},[],{"type":597,"tag":719,"props":10170,"children":10172},{"alt":591,"src":10171},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675260446000.png",[],{"type":603,"value":10174},"背景是一些远的建筑之类的",{"type":597,"tag":1595,"props":10176,"children":10177},{},[],{"type":597,"tag":719,"props":10179,"children":10181},{"alt":591,"src":10180},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675268984000.png",[],{"type":597,"tag":807,"props":10183,"children":10184},{},[10185,10187,10190],{"type":603,"value":10186},"城市场景---房屋和树的结合..可以拿之前的房屋和树进行组合",{"type":597,"tag":1595,"props":10188,"children":10189},{},[],{"type":597,"tag":719,"props":10191,"children":10193},{"alt":591,"src":10192},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1672396859000.png",[],{"type":597,"tag":807,"props":10195,"children":10196},{},[10197,10199,10202,10206,10209],{"type":603,"value":10198},"村庄背景---有田地,有山,有村庄",{"type":597,"tag":1595,"props":10200,"children":10201},{},[],{"type":597,"tag":719,"props":10203,"children":10205},{"alt":591,"src":10204},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675266050000.png",[],{"type":597,"tag":1595,"props":10207,"children":10208},{},[],{"type":597,"tag":719,"props":10210,"children":10212},{"alt":591,"src":10211},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675260730000.png",[],{"type":597,"tag":807,"props":10214,"children":10215},{},[10216,10218,10221,10225,10228],{"type":603,"value":10217},"遗迹(废墟)    这个有点西式..不知道中式的遗迹啥样的",{"type":597,"tag":1595,"props":10219,"children":10220},{},[],{"type":597,"tag":719,"props":10222,"children":10224},{"alt":591,"src":10223},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675258767000.png",[],{"type":597,"tag":1595,"props":10226,"children":10227},{},[],{"type":597,"tag":719,"props":10229,"children":10231},{"alt":591,"src":10230},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675266980000.png",[],{"type":597,"tag":807,"props":10233,"children":10234},{},[10235,10237,10240,10244,10247,10251,10254],{"type":603,"value":10236},"沙漠场景--- 注意植物可能是仙人掌,之类的",{"type":597,"tag":1595,"props":10238,"children":10239},{},[],{"type":597,"tag":719,"props":10241,"children":10243},{"alt":591,"src":10242},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675263893000.png",[],{"type":597,"tag":1595,"props":10245,"children":10246},{},[],{"type":597,"tag":719,"props":10248,"children":10250},{"alt":591,"src":10249},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675265178000.png",[],{"type":597,"tag":1595,"props":10252,"children":10253},{},[],{"type":597,"tag":719,"props":10255,"children":10257},{"alt":591,"src":10256},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675267461000.png",[],{"type":597,"tag":807,"props":10259,"children":10260},{},[10261,10263,10266,10270,10273],{"type":603,"value":10262},"冰雪场景  注意背景植物可能是松树或者这种桦树",{"type":597,"tag":1595,"props":10264,"children":10265},{},[],{"type":597,"tag":719,"props":10267,"children":10269},{"alt":591,"src":10268},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675263929000.png",[],{"type":597,"tag":1595,"props":10271,"children":10272},{},[],{"type":597,"tag":719,"props":10274,"children":10276},{"alt":591,"src":10275},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675265191000.png",[],{"type":597,"tag":807,"props":10278,"children":10279},{},[10280,10282,10285,10289,10292,10296,10299],{"type":603,"value":10281},"地牢(副本)",{"type":597,"tag":1595,"props":10283,"children":10284},{},[],{"type":597,"tag":719,"props":10286,"children":10288},{"alt":591,"src":10287},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675266629000.png",[],{"type":597,"tag":1595,"props":10290,"children":10291},{},[],{"type":597,"tag":719,"props":10293,"children":10295},{"alt":591,"src":10294},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675266691000.png",[],{"type":597,"tag":1595,"props":10297,"children":10298},{},[],{"type":597,"tag":719,"props":10300,"children":10302},{"alt":591,"src":10301},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1675267321000.png",[],{"type":597,"tag":807,"props":10304,"children":10305},{},[10306,10308],{"type":603,"value":10307},"旅途(奇遇)场景",{"type":597,"tag":803,"props":10309,"children":10310},{},[10311,10323],{"type":597,"tag":807,"props":10312,"children":10313},{},[10314,10316],{"type":603,"value":10315},"当我从一个城市到另一个城市时,会进入该场景,人物会在该场景移动,然后触发一个个事件. 为了便于理解,参看视频 (直接跳到15:20)  ",{"type":597,"tag":886,"props":10317,"children":10320},{"href":10318,"rel":10319},"https://www.bilibili.com/video/BV1gA411u7ig?p=1",[890],[10321],{"type":603,"value":10322},"归家异途2.  ",{"type":597,"tag":807,"props":10324,"children":10325},{},[10326],{"type":603,"value":10327},"旅途的场景,地图的两边是各自的城门,然后中间就是道路和风景",{"type":597,"tag":3720,"props":10329,"children":10330},{},[],{"type":597,"tag":803,"props":10332,"children":10333},{},[10334],{"type":597,"tag":807,"props":10335,"children":10336},{},[10337,10339,10340],{"type":603,"value":10338},"一些道具图标以及工具, 服装  (待定)",{"type":603,"value":4052},{"type":597,"tag":1937,"props":10341,"children":10342},{},[10343,10359],{"type":597,"tag":1941,"props":10344,"children":10345},{},[10346],{"type":597,"tag":1945,"props":10347,"children":10348},{},[10349,10353,10356],{"type":597,"tag":1949,"props":10350,"children":10351},{},[10352],{"type":603,"value":4071},{"type":597,"tag":1949,"props":10354,"children":10355},{},[],{"type":597,"tag":1949,"props":10357,"children":10358},{},[],{"type":597,"tag":1963,"props":10360,"children":10361},{},[10362,10380,10396],{"type":597,"tag":1945,"props":10363,"children":10364},{},[10365,10370,10375],{"type":597,"tag":1970,"props":10366,"children":10367},{},[10368],{"type":603,"value":10369},"工具",{"type":597,"tag":1970,"props":10371,"children":10372},{},[10373],{"type":603,"value":10374},"锄头,水壶,镰刀,斧头,矿锄,鱼竿,剪刀,锤子",{"type":597,"tag":1970,"props":10376,"children":10377},{},[10378],{"type":603,"value":10379},"各个等级的",{"type":597,"tag":1945,"props":10381,"children":10382},{},[10383,10388,10393],{"type":597,"tag":1970,"props":10384,"children":10385},{},[10386],{"type":603,"value":10387},"种子(图标)",{"type":597,"tag":1970,"props":10389,"children":10390},{},[10391],{"type":603,"value":10392},"袋装的种子",{"type":597,"tag":1970,"props":10394,"children":10395},{},[],{"type":597,"tag":1945,"props":10397,"children":10398},{},[10399,10404,10409],{"type":597,"tag":1970,"props":10400,"children":10401},{},[10402],{"type":603,"value":10403},"果实(图标)",{"type":597,"tag":1970,"props":10405,"children":10406},{},[10407],{"type":603,"value":10408},"包含变异品",{"type":597,"tag":1970,"props":10410,"children":10411},{},[],{"type":597,"tag":3720,"props":10413,"children":10414},{},[],{"type":597,"tag":606,"props":10416,"children":10417},{},[10418],{"type":603,"value":10419},"下面等游戏一测做完再做吧.",{"type":597,"tag":3720,"props":10421,"children":10422},{},[],{"type":597,"tag":803,"props":10424,"children":10425},{},[10426,10572,10663],{"type":597,"tag":807,"props":10427,"children":10428},{},[10429,10431,10434,10436,10442,10443,10449,10450,10456,10457,10463,10464,10470,10471,10558,10561,10565,10568],{"type":603,"value":10430},"洞窟",{"type":597,"tag":1595,"props":10432,"children":10433},{},[],{"type":603,"value":10435},"地形:暗色的砖石,其他物品.可能包括",{"type":597,"tag":629,"props":10437,"children":10439},{"className":10438},[],[10440],{"type":603,"value":10441},"烛台",{"type":603,"value":9688},{"type":597,"tag":629,"props":10444,"children":10446},{"className":10445},[],[10447],{"type":603,"value":10448},"各种箱子",{"type":603,"value":9688},{"type":597,"tag":629,"props":10451,"children":10453},{"className":10452},[],[10454],{"type":603,"value":10455},"武器架",{"type":603,"value":9688},{"type":597,"tag":629,"props":10458,"children":10460},{"className":10459},[],[10461],{"type":603,"value":10462},"打开的宝箱未打开的宝箱",{"type":603,"value":9688},{"type":597,"tag":629,"props":10465,"children":10467},{"className":10466},[],[10468],{"type":603,"value":10469},"散落在地的兵刃",{"type":603,"value":2989},{"type":597,"tag":1937,"props":10472,"children":10473},{},[10474,10493],{"type":597,"tag":1941,"props":10475,"children":10476},{},[10477],{"type":597,"tag":1945,"props":10478,"children":10479},{},[10480,10485,10489],{"type":597,"tag":1949,"props":10481,"children":10482},{},[10483],{"type":603,"value":10484},"必要物品",{"type":597,"tag":1949,"props":10486,"children":10487},{},[10488],{"type":603,"value":3887},{"type":597,"tag":1949,"props":10490,"children":10491},{},[10492],{"type":603,"value":1958},{"type":597,"tag":1963,"props":10494,"children":10495},{},[10496,10512,10528,10542],{"type":597,"tag":1945,"props":10497,"children":10498},{},[10499,10504,10509],{"type":597,"tag":1970,"props":10500,"children":10501},{},[10502],{"type":603,"value":10503},"绳索",{"type":597,"tag":1970,"props":10505,"children":10506},{},[10507],{"type":603,"value":10508},"上下爬动",{"type":597,"tag":1970,"props":10510,"children":10511},{},[],{"type":597,"tag":1945,"props":10513,"children":10514},{},[10515,10520,10525],{"type":597,"tag":1970,"props":10516,"children":10517},{},[10518],{"type":603,"value":10519},"桥",{"type":597,"tag":1970,"props":10521,"children":10522},{},[10523],{"type":603,"value":10524},"玩家可以从上面跳下去,或者作为连续跳的点",{"type":597,"tag":1970,"props":10526,"children":10527},{},[],{"type":597,"tag":1945,"props":10529,"children":10530},{},[10531,10536,10539],{"type":597,"tag":1970,"props":10532,"children":10533},{},[10534],{"type":603,"value":10535},"门",{"type":597,"tag":1970,"props":10537,"children":10538},{},[],{"type":597,"tag":1970,"props":10540,"children":10541},{},[],{"type":597,"tag":1945,"props":10543,"children":10544},{},[10545,10550,10553],{"type":597,"tag":1970,"props":10546,"children":10547},{},[10548],{"type":603,"value":10549},"机关",{"type":597,"tag":1970,"props":10551,"children":10552},{},[],{"type":597,"tag":1970,"props":10554,"children":10555},{},[10556],{"type":603,"value":10557},"突起在地面上玩家可以搬箱子放置触发.或者是一个能左右扳动的开关",{"type":597,"tag":1595,"props":10559,"children":10560},{},[],{"type":597,"tag":719,"props":10562,"children":10564},{"alt":591,"src":10563},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1656411611000.png",[],{"type":597,"tag":1595,"props":10566,"children":10567},{},[],{"type":597,"tag":719,"props":10569,"children":10571},{"alt":591,"src":10570},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1656412167000.png",[],{"type":597,"tag":807,"props":10573,"children":10574},{},[10575,10577],{"type":603,"value":10576},"不同的城市该如何进行区分,不然移动到另一个城市,感觉没啥变化",{"type":597,"tag":1321,"props":10578,"children":10579},{},[10580,10626,10631,10636,10641,10646],{"type":597,"tag":807,"props":10581,"children":10582},{},[10583,10585,10591,10592,10598,10599,10605,10606,10612,10613,10619,10620],{"type":603,"value":10584},"背景的不同    ",{"type":597,"tag":629,"props":10586,"children":10588},{"className":10587},[],[10589],{"type":603,"value":10590},"桂林山水",{"type":603,"value":9688},{"type":597,"tag":629,"props":10593,"children":10595},{"className":10594},[],[10596],{"type":603,"value":10597},"大漠孤烟",{"type":603,"value":9688},{"type":597,"tag":629,"props":10600,"children":10602},{"className":10601},[],[10603],{"type":603,"value":10604},"江南水乡",{"type":603,"value":9688},{"type":597,"tag":629,"props":10607,"children":10609},{"className":10608},[],[10610],{"type":603,"value":10611},"雪山之下",{"type":603,"value":9688},{"type":597,"tag":629,"props":10614,"children":10616},{"className":10615},[],[10617],{"type":603,"value":10618},"长城守望",{"type":603,"value":9688},{"type":597,"tag":629,"props":10621,"children":10623},{"className":10622},[],[10624],{"type":603,"value":10625},"不同建筑的城市背景组合",{"type":597,"tag":807,"props":10627,"children":10628},{},[10629],{"type":603,"value":10630},"地面砖块的不同",{"type":597,"tag":807,"props":10632,"children":10633},{},[10634],{"type":603,"value":10635},"已画建筑的简单变形?????   比如屋顶瓦片的颜色...",{"type":597,"tag":807,"props":10637,"children":10638},{},[10639],{"type":603,"value":10640},"不同城市的装饰树木不同  ?????",{"type":597,"tag":807,"props":10642,"children":10643},{},[10644],{"type":603,"value":10645},"还有其他?????",{"type":597,"tag":807,"props":10647,"children":10648},{},[10649,10651,10654,10656,10659],{"type":603,"value":10650},"总共20个城市,需要8-10套,有难度吗",{"type":597,"tag":1595,"props":10652,"children":10653},{},[],{"type":603,"value":10655},"\n参考图,有看到能用的我再补上:",{"type":597,"tag":1595,"props":10657,"children":10658},{},[],{"type":597,"tag":719,"props":10660,"children":10662},{"alt":591,"src":10661},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/1656809454000.png",[],{"type":597,"tag":807,"props":10664,"children":10665},{},[10666,10668,10670,10987,10990,10992,10995,10999,11002,11006,11009,11013,11016,11020,11023,11027,11030,11034,11037],{"type":603,"value":10667},"房屋内部  是否要做??",{"type":603,"value":10669},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":10671,"children":10672},{},[10673,10691],{"type":597,"tag":1941,"props":10674,"children":10675},{},[10676],{"type":597,"tag":1945,"props":10677,"children":10678},{},[10679,10683,10687],{"type":597,"tag":1949,"props":10680,"children":10681},{},[10682],{"type":603,"value":3882},{"type":597,"tag":1949,"props":10684,"children":10685},{},[10686],{"type":603,"value":3887},{"type":597,"tag":1949,"props":10688,"children":10689},{},[10690],{"type":603,"value":1958},{"type":597,"tag":1963,"props":10692,"children":10693},{},[10694,10732,10774,10807,10822,10837,10852,10867,10882,10897,10912,10927,10942,10957,10972],{"type":597,"tag":1945,"props":10695,"children":10696},{},[10697,10722,10727],{"type":597,"tag":1970,"props":10698,"children":10699},{},[10700,10702,10708,10709,10715,10716],{"type":603,"value":10701},"药店室内:",{"type":597,"tag":629,"props":10703,"children":10705},{"className":10704},[],[10706],{"type":603,"value":10707},"药店柜台",{"type":603,"value":9688},{"type":597,"tag":629,"props":10710,"children":10712},{"className":10711},[],[10713],{"type":603,"value":10714},"药店柜子",{"type":603,"value":9688},{"type":597,"tag":629,"props":10717,"children":10719},{"className":10718},[],[10720],{"type":603,"value":10721},"病床",{"type":597,"tag":1970,"props":10723,"children":10724},{},[10725],{"type":603,"value":10726},"随意画点东西吧,画不出也没关系",{"type":597,"tag":1970,"props":10728,"children":10729},{},[10730],{"type":603,"value":10731},"以下随意画.画不出也没关系,本来不打算房间能进的,主要是为了丰富游戏多样性",{"type":597,"tag":1945,"props":10733,"children":10734},{},[10735,10767,10771],{"type":597,"tag":1970,"props":10736,"children":10737},{},[10738,10740,10746,10747,10753,10754,10760,10761],{"type":603,"value":10739},"酒店室内:",{"type":597,"tag":629,"props":10741,"children":10743},{"className":10742},[],[10744],{"type":603,"value":10745},"酒店柜台",{"type":603,"value":9688},{"type":597,"tag":629,"props":10748,"children":10750},{"className":10749},[],[10751],{"type":603,"value":10752},"桌子",{"type":603,"value":9688},{"type":597,"tag":629,"props":10755,"children":10757},{"className":10756},[],[10758],{"type":603,"value":10759},"凳子",{"type":603,"value":9688},{"type":597,"tag":629,"props":10762,"children":10764},{"className":10763},[],[10765],{"type":603,"value":10766},"其他装饰品",{"type":597,"tag":1970,"props":10768,"children":10769},{},[10770],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10772,"children":10773},{},[],{"type":597,"tag":1945,"props":10775,"children":10776},{},[10777,10800,10804],{"type":597,"tag":1970,"props":10778,"children":10779},{},[10780,10782,10788,10789,10794,10795],{"type":603,"value":10781},"客栈室内: ",{"type":597,"tag":629,"props":10783,"children":10785},{"className":10784},[],[10786],{"type":603,"value":10787},"床",{"type":603,"value":9674},{"type":597,"tag":629,"props":10790,"children":10792},{"className":10791},[],[10793],{"type":603,"value":10752},{"type":603,"value":9688},{"type":597,"tag":629,"props":10796,"children":10798},{"className":10797},[],[10799],{"type":603,"value":10759},{"type":597,"tag":1970,"props":10801,"children":10802},{},[10803],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10805,"children":10806},{},[],{"type":597,"tag":1945,"props":10808,"children":10809},{},[10810,10815,10819],{"type":597,"tag":1970,"props":10811,"children":10812},{},[10813],{"type":603,"value":10814},"杂货店内:",{"type":597,"tag":1970,"props":10816,"children":10817},{},[10818],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10820,"children":10821},{},[],{"type":597,"tag":1945,"props":10823,"children":10824},{},[10825,10830,10834],{"type":597,"tag":1970,"props":10826,"children":10827},{},[10828],{"type":603,"value":10829},"礼品店",{"type":597,"tag":1970,"props":10831,"children":10832},{},[10833],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10835,"children":10836},{},[],{"type":597,"tag":1945,"props":10838,"children":10839},{},[10840,10845,10849],{"type":597,"tag":1970,"props":10841,"children":10842},{},[10843],{"type":603,"value":10844},"养殖店",{"type":597,"tag":1970,"props":10846,"children":10847},{},[10848],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10850,"children":10851},{},[],{"type":597,"tag":1945,"props":10853,"children":10854},{},[10855,10860,10864],{"type":597,"tag":1970,"props":10856,"children":10857},{},[10858],{"type":603,"value":10859},"种植店",{"type":597,"tag":1970,"props":10861,"children":10862},{},[10863],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10865,"children":10866},{},[],{"type":597,"tag":1945,"props":10868,"children":10869},{},[10870,10875,10879],{"type":597,"tag":1970,"props":10871,"children":10872},{},[10873],{"type":603,"value":10874},"商行",{"type":597,"tag":1970,"props":10876,"children":10877},{},[10878],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10880,"children":10881},{},[],{"type":597,"tag":1945,"props":10883,"children":10884},{},[10885,10890,10894],{"type":597,"tag":1970,"props":10886,"children":10887},{},[10888],{"type":603,"value":10889},"镖局",{"type":597,"tag":1970,"props":10891,"children":10892},{},[10893],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10895,"children":10896},{},[],{"type":597,"tag":1945,"props":10898,"children":10899},{},[10900,10905,10909],{"type":597,"tag":1970,"props":10901,"children":10902},{},[10903],{"type":603,"value":10904},"铁匠铺",{"type":597,"tag":1970,"props":10906,"children":10907},{},[10908],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10910,"children":10911},{},[],{"type":597,"tag":1945,"props":10913,"children":10914},{},[10915,10920,10924],{"type":597,"tag":1970,"props":10916,"children":10917},{},[10918],{"type":603,"value":10919},"书院",{"type":597,"tag":1970,"props":10921,"children":10922},{},[10923],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10925,"children":10926},{},[],{"type":597,"tag":1945,"props":10928,"children":10929},{},[10930,10935,10939],{"type":597,"tag":1970,"props":10931,"children":10932},{},[10933],{"type":603,"value":10934},"赌场",{"type":597,"tag":1970,"props":10936,"children":10937},{},[10938],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10940,"children":10941},{},[],{"type":597,"tag":1945,"props":10943,"children":10944},{},[10945,10950,10954],{"type":597,"tag":1970,"props":10946,"children":10947},{},[10948],{"type":603,"value":10949},"衙门",{"type":597,"tag":1970,"props":10951,"children":10952},{},[10953],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10955,"children":10956},{},[],{"type":597,"tag":1945,"props":10958,"children":10959},{},[10960,10965,10969],{"type":597,"tag":1970,"props":10961,"children":10962},{},[10963],{"type":603,"value":10964},"大牢",{"type":597,"tag":1970,"props":10966,"children":10967},{},[10968],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10970,"children":10971},{},[],{"type":597,"tag":1945,"props":10973,"children":10974},{},[10975,10980,10984],{"type":597,"tag":1970,"props":10976,"children":10977},{},[10978],{"type":603,"value":10979},"普通民居",{"type":597,"tag":1970,"props":10981,"children":10982},{},[10983],{"type":603,"value":10726},{"type":597,"tag":1970,"props":10985,"children":10986},{},[],{"type":597,"tag":1595,"props":10988,"children":10989},{},[],{"type":603,"value":10991},"一些室内参考图:",{"type":597,"tag":1595,"props":10993,"children":10994},{},[],{"type":597,"tag":719,"props":10996,"children":10998},{"alt":591,"src":10997},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E5%9B%BE%E5%83%8F%20001.png",[],{"type":597,"tag":1595,"props":11000,"children":11001},{},[],{"type":597,"tag":719,"props":11003,"children":11005},{"alt":591,"src":11004},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E5%9B%BE%E5%83%8F%20003.png",[],{"type":597,"tag":1595,"props":11007,"children":11008},{},[],{"type":597,"tag":719,"props":11010,"children":11012},{"alt":591,"src":11011},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E5%9B%BE%E5%83%8F%20007.png",[],{"type":597,"tag":1595,"props":11014,"children":11015},{},[],{"type":597,"tag":719,"props":11017,"children":11019},{"alt":591,"src":11018},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E5%9B%BE%E5%83%8F%20006.png",[],{"type":597,"tag":1595,"props":11021,"children":11022},{},[],{"type":597,"tag":719,"props":11024,"children":11026},{"alt":591,"src":11025},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E5%9B%BE%E5%83%8F%20005.png",[],{"type":597,"tag":1595,"props":11028,"children":11029},{},[],{"type":597,"tag":719,"props":11031,"children":11033},{"alt":591,"src":11032},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E5%9B%BE%E5%83%8F%20004.png",[],{"type":597,"tag":1595,"props":11035,"children":11036},{},[],{"type":597,"tag":719,"props":11038,"children":11040},{"alt":591,"src":11039},"/images/2022-06-11-%E7%BE%8E%E6%9C%AF%E8%A6%81%E6%B1%82/%E5%9B%BE%E5%83%8F%20002.png",[],{"title":591,"searchDepth":787,"depth":787,"links":11042},[11043,11044,11045],{"id":9645,"depth":1530,"text":9645},{"id":9743,"depth":787,"text":9743},{"id":9801,"depth":787,"text":9801},"content:gyj:2022-06-11-美术要求.md","gyj/2022-06-11-美术要求.md","2022-06-11",{"_path":583,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":582,"description":11050,"body":11051,"_type":791,"_id":11080,"_source":793,"_file":11081,"_extension":795,"date":11082},"从以上可以看出CircleCastAll是投射了一个⚪的运动轨迹",{"type":594,"children":11052,"toc":11078},[11053,11061,11066],{"type":597,"tag":606,"props":11054,"children":11055},{},[11056,11060],{"type":597,"tag":719,"props":11057,"children":11059},{"alt":591,"src":11058},"/images/2022-04-02-CircleCast-Overlapple-diff/1648876953000.png",[],{"type":603,"value":11050},{"type":597,"tag":606,"props":11062,"children":11063},{},[11064],{"type":603,"value":11065},"而OverlapCircleAll只是检查了一个⚪内的范围",{"type":597,"tag":606,"props":11067,"children":11068},{},[11069,11071,11076],{"type":603,"value":11070},"当然如果CircleCastAll的参数",{"type":597,"tag":1080,"props":11072,"children":11073},{},[11074],{"type":603,"value":11075},"distance设置为0,它的功能和",{"type":603,"value":11077},"OverlapCircleAll就类似了",{"title":591,"searchDepth":787,"depth":787,"links":11079},[],"content:unity:2022-04-02-CircleCast-Overlapple-diff.md","unity/2022-04-02-CircleCast-Overlapple-diff.md","2022-04-02",{"_path":180,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":179,"description":11084,"body":11085,"_type":791,"_id":11266,"_source":793,"_file":11267,"_extension":795,"date":11268},"npc生成方式默认的npc会存储必要数据,比如状态,位置等MapNPCSystem中从npcproxy加载数据,位置一般是固定的,从land中读取运行时的npc会存储MapNPCSystem中从npcproxy加载数据,根据land或者house,随机位置怪物不存储加载land后,则会转换SpawnerAuthoring进行转换生成的点,然后进行生成只运行AI的npcNPCProxy初始化的时候加载,影响局势的(君主,帮派)和与角色由关系的npc处理ai事件.如果进入地图.则实例化场景资源会存储SurvivalStorageSystem创建的时候,则会根据地图id从map_id.bin中加载数",{"type":594,"children":11086,"toc":11256},[11087,11092,11097,11124,11129,11153,11158,11178,11184,11203,11208,11234,11239],{"type":597,"tag":598,"props":11088,"children":11090},{"id":11089},"npc生成方式",[11091],{"type":603,"value":11089},{"type":597,"tag":1023,"props":11093,"children":11095},{"id":11094},"默认的npc",[11096],{"type":603,"value":11094},{"type":597,"tag":1321,"props":11098,"children":11099},{},[11100,11105],{"type":597,"tag":807,"props":11101,"children":11102},{},[11103],{"type":603,"value":11104},"会存储必要数据,比如状态,位置等",{"type":597,"tag":807,"props":11106,"children":11107},{},[11108,11114,11116,11122],{"type":597,"tag":629,"props":11109,"children":11111},{"className":11110},[],[11112],{"type":603,"value":11113},"MapNPCSystem",{"type":603,"value":11115},"中从",{"type":597,"tag":629,"props":11117,"children":11119},{"className":11118},[],[11120],{"type":603,"value":11121},"npcproxy",{"type":603,"value":11123},"加载数据,位置一般是固定的,从land中读取",{"type":597,"tag":1023,"props":11125,"children":11127},{"id":11126},"运行时的npc",[11128],{"type":603,"value":11126},{"type":597,"tag":1321,"props":11130,"children":11131},{},[11132,11137],{"type":597,"tag":807,"props":11133,"children":11134},{},[11135],{"type":603,"value":11136},"会存储",{"type":597,"tag":807,"props":11138,"children":11139},{},[11140,11145,11146,11151],{"type":597,"tag":629,"props":11141,"children":11143},{"className":11142},[],[11144],{"type":603,"value":11113},{"type":603,"value":11115},{"type":597,"tag":629,"props":11147,"children":11149},{"className":11148},[],[11150],{"type":603,"value":11121},{"type":603,"value":11152},"加载数据,根据land或者house,随机位置",{"type":597,"tag":1023,"props":11154,"children":11156},{"id":11155},"怪物",[11157],{"type":603,"value":11155},{"type":597,"tag":1321,"props":11159,"children":11160},{},[11161,11166],{"type":597,"tag":807,"props":11162,"children":11163},{},[11164],{"type":603,"value":11165},"不存储",{"type":597,"tag":807,"props":11167,"children":11168},{},[11169,11171,11176],{"type":603,"value":11170},"加载land后,则会转换",{"type":597,"tag":629,"props":11172,"children":11174},{"className":11173},[],[11175],{"type":603,"value":9223},{"type":603,"value":11177},"进行转换生成的点,然后进行生成",{"type":597,"tag":1023,"props":11179,"children":11181},{"id":11180},"只运行ai的npc",[11182],{"type":603,"value":11183},"只运行AI的npc",{"type":597,"tag":1321,"props":11185,"children":11186},{},[11187,11198],{"type":597,"tag":807,"props":11188,"children":11189},{},[11190,11196],{"type":597,"tag":629,"props":11191,"children":11193},{"className":11192},[],[11194],{"type":603,"value":11195},"NPCProxy",{"type":603,"value":11197},"初始化的时候加载,影响局势的(君主,帮派)和与角色由关系的npc",{"type":597,"tag":807,"props":11199,"children":11200},{},[11201],{"type":603,"value":11202},"处理ai事件.如果进入地图.则实例化",{"type":597,"tag":598,"props":11204,"children":11206},{"id":11205},"场景资源",[11207],{"type":603,"value":11205},{"type":597,"tag":1321,"props":11209,"children":11210},{},[11211,11215],{"type":597,"tag":807,"props":11212,"children":11213},{},[11214],{"type":603,"value":11136},{"type":597,"tag":807,"props":11216,"children":11217},{},[11218,11224,11226,11232],{"type":597,"tag":629,"props":11219,"children":11221},{"className":11220},[],[11222],{"type":603,"value":11223},"SurvivalStorageSystem",{"type":603,"value":11225},"创建的时候,则会根据地图id从",{"type":597,"tag":629,"props":11227,"children":11229},{"className":11228},[],[11230],{"type":603,"value":11231},"map_id.bin",{"type":603,"value":11233},"中加载数据",{"type":597,"tag":598,"props":11235,"children":11237},{"id":11236},"用户物品",[11238],{"type":603,"value":11236},{"type":597,"tag":1321,"props":11240,"children":11241},{},[11242,11246],{"type":597,"tag":807,"props":11243,"children":11244},{},[11245],{"type":603,"value":11136},{"type":597,"tag":807,"props":11247,"children":11248},{},[11249,11254],{"type":597,"tag":629,"props":11250,"children":11252},{"className":11251},[],[11253],{"type":603,"value":11223},{"type":603,"value":11255},"创建的时候,则会根据地图id从CharacterSpaceProxy中加载用户数据",{"title":591,"searchDepth":787,"depth":787,"links":11257},[11258,11264,11265],{"id":11089,"depth":787,"text":11089,"children":11259},[11260,11261,11262,11263],{"id":11094,"depth":1530,"text":11094},{"id":11126,"depth":1530,"text":11126},{"id":11155,"depth":1530,"text":11155},{"id":11180,"depth":1530,"text":11183},{"id":11205,"depth":787,"text":11205},{"id":11236,"depth":787,"text":11236},"content:game:2022-03-16-gyj-map.md","game/2022-03-16-gyj-map.md","2022-03-16",{"_path":177,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":176,"description":11270,"body":11271,"_type":791,"_id":11555,"_source":793,"_file":11556,"_extension":795,"date":11557},"autostart  自动开始信息offer 发放任务时显示的信息states   任务开始时,结束时等各种状态时显示的信息..设置状态时执行其中的actionlist ,nodes  会有各个节点,他也会有各种显示的信息,会同states中的信息一起显示到各个位置Counter  定义计数的方式和存储计数的值,  但是不定义任务的目标值,目标值在节点中定义npc任务指示的显示?进入地图后.拉取该地图所有npc的任务然后实例化任务则进行开始检查是否自动开始?如果条件满足直接触发任务,添加到玩家任务列表,或者发送邮件提示之类的是否有接取条件,如果有的话检查是否变成可接状态QuestIndicat",{"type":594,"children":11272,"toc":11550},[11273,11301,11307,11338,11343,11348,11361,11366,11371,11514,11519],{"type":597,"tag":1321,"props":11274,"children":11275},{},[11276,11281,11286,11291,11296],{"type":597,"tag":807,"props":11277,"children":11278},{},[11279],{"type":603,"value":11280},"autostart  自动开始信息",{"type":597,"tag":807,"props":11282,"children":11283},{},[11284],{"type":603,"value":11285},"offer 发放任务时显示的信息",{"type":597,"tag":807,"props":11287,"children":11288},{},[11289],{"type":603,"value":11290},"states   任务开始时,结束时等各种状态时显示的信息..设置状态时执行其中的actionlist ,",{"type":597,"tag":807,"props":11292,"children":11293},{},[11294],{"type":603,"value":11295},"nodes  会有各个节点,他也会有各种显示的信息,会同states中的信息一起显示到各个位置",{"type":597,"tag":807,"props":11297,"children":11298},{},[11299],{"type":603,"value":11300},"Counter  定义计数的方式和存储计数的值,  但是不定义任务的目标值,目标值在节点中定义",{"type":597,"tag":3995,"props":11302,"children":11304},{"id":11303},"npc任务指示的显示",[11305],{"type":603,"value":11306},"npc任务指示的显示?",{"type":597,"tag":803,"props":11308,"children":11309},{},[11310,11315,11320],{"type":597,"tag":807,"props":11311,"children":11312},{},[11313],{"type":603,"value":11314},"进入地图后.拉取该地图所有npc的任务",{"type":597,"tag":807,"props":11316,"children":11317},{},[11318],{"type":603,"value":11319},"然后实例化任务",{"type":597,"tag":807,"props":11321,"children":11322},{},[11323,11325],{"type":603,"value":11324},"则进行开始检查",{"type":597,"tag":803,"props":11326,"children":11327},{},[11328,11333],{"type":597,"tag":807,"props":11329,"children":11330},{},[11331],{"type":603,"value":11332},"是否自动开始?如果条件满足直接触发任务,添加到玩家任务列表,或者发送邮件提示之类的",{"type":597,"tag":807,"props":11334,"children":11335},{},[11336],{"type":603,"value":11337},"是否有接取条件,如果有的话检查是否变成可接状态",{"type":597,"tag":606,"props":11339,"children":11340},{},[11341],{"type":603,"value":11342},"QuestIndicatorManager不是单例相当于控制器.每个npc身上都有,主要是控制npc的指示显示",{"type":597,"tag":598,"props":11344,"children":11346},{"id":11345},"任务接受流程",[11347],{"type":603,"value":11345},{"type":597,"tag":1321,"props":11349,"children":11350},{},[11351,11356],{"type":597,"tag":807,"props":11352,"children":11353},{},[11354],{"type":603,"value":11355},"组件Targetable中执行Interact(),会触发QuestGiver.StartDialogueWithPlayer",{"type":597,"tag":807,"props":11357,"children":11358},{},[11359],{"type":603,"value":11360},"打开对话框",{"type":597,"tag":606,"props":11362,"children":11363},{},[11364],{"type":603,"value":11365},"QuestGiver.GiveQuestToQuester",{"type":597,"tag":598,"props":11367,"children":11369},{"id":11368},"任务分类",[11370],{"type":603,"value":11368},{"type":597,"tag":1321,"props":11372,"children":11373},{},[11374,11395,11441,11466,11482,11490,11506],{"type":597,"tag":807,"props":11375,"children":11376},{},[11377,11382],{"type":597,"tag":1080,"props":11378,"children":11379},{},[11380],{"type":603,"value":11381},"MoveTo型任务（移动）",{"type":597,"tag":1321,"props":11383,"children":11384},{},[11385,11390],{"type":597,"tag":807,"props":11386,"children":11387},{},[11388],{"type":603,"value":11389},"触发剧情",{"type":597,"tag":807,"props":11391,"children":11392},{},[11393],{"type":603,"value":11394},"新功能开放",{"type":597,"tag":807,"props":11396,"children":11397},{},[11398,11403],{"type":597,"tag":1080,"props":11399,"children":11400},{},[11401],{"type":603,"value":11402},"Farm型任务（重复）",{"type":597,"tag":1321,"props":11404,"children":11405},{},[11406,11411,11416,11421,11426,11431,11436],{"type":597,"tag":807,"props":11407,"children":11408},{},[11409],{"type":603,"value":11410},"杀狼,动物",{"type":597,"tag":807,"props":11412,"children":11413},{},[11414],{"type":603,"value":11415},"搜集特殊物品,怪物掉落或者采集物品的时候偶尔采集到",{"type":597,"tag":807,"props":11417,"children":11418},{},[11419],{"type":603,"value":11420},"木材采集,钓鱼,制作料理",{"type":597,"tag":807,"props":11422,"children":11423},{},[11424],{"type":603,"value":11425},"地图内找寻物品,地图内传话,送礼物,酒",{"type":597,"tag":807,"props":11427,"children":11428},{},[11429],{"type":603,"value":11430},"追杀人物(地图内,地图外)",{"type":597,"tag":807,"props":11432,"children":11433},{},[11434],{"type":603,"value":11435},"杀人(地图内,地图外)",{"type":597,"tag":807,"props":11437,"children":11438},{},[11439],{"type":603,"value":11440},"镖局任务,跨地图送货,送信",{"type":597,"tag":807,"props":11442,"children":11443},{},[11444,11449],{"type":597,"tag":1080,"props":11445,"children":11446},{},[11447],{"type":603,"value":11448},"Collect型任务（收集）",{"type":597,"tag":1321,"props":11450,"children":11451},{},[11452,11457,11462],{"type":597,"tag":807,"props":11453,"children":11454},{},[11455],{"type":603,"value":11456},"收集包(星露谷)",{"type":597,"tag":807,"props":11458,"children":11459},{},[11460],{"type":603,"value":11461},"图书馆(星露谷)",{"type":597,"tag":807,"props":11463,"children":11464},{},[11465],{"type":603,"value":3969},{"type":597,"tag":807,"props":11467,"children":11468},{},[11469,11474],{"type":597,"tag":1080,"props":11470,"children":11471},{},[11472],{"type":603,"value":11473},"Hunt型任务（狩猎）",{"type":597,"tag":1321,"props":11475,"children":11476},{},[11477],{"type":597,"tag":807,"props":11478,"children":11479},{},[11480],{"type":603,"value":11481},"Boss",{"type":597,"tag":807,"props":11483,"children":11484},{},[11485],{"type":597,"tag":1080,"props":11486,"children":11487},{},[11488],{"type":603,"value":11489},"Puzzle型任务（解谜）",{"type":597,"tag":807,"props":11491,"children":11492},{},[11493,11498],{"type":597,"tag":1080,"props":11494,"children":11495},{},[11496],{"type":603,"value":11497},"Challenge型任务（挑战）",{"type":597,"tag":1321,"props":11499,"children":11500},{},[11501],{"type":597,"tag":807,"props":11502,"children":11503},{},[11504],{"type":603,"value":11505},"暗黑3 大秘境 xxx层",{"type":597,"tag":807,"props":11507,"children":11508},{},[11509],{"type":597,"tag":1080,"props":11510,"children":11511},{},[11512],{"type":603,"value":11513},"附加类：Storytelling型任务（叙事）",{"type":597,"tag":598,"props":11515,"children":11517},{"id":11516},"显示",[11518],{"type":603,"value":11516},{"type":597,"tag":1321,"props":11520,"children":11521},{},[11522,11545],{"type":597,"tag":807,"props":11523,"children":11524},{},[11525,11527],{"type":603,"value":11526},"对话",{"type":597,"tag":1321,"props":11528,"children":11529},{},[11530,11535,11540],{"type":597,"tag":807,"props":11531,"children":11532},{},[11533],{"type":603,"value":11534},"一条随机话语",{"type":597,"tag":807,"props":11536,"children":11537},{},[11538],{"type":603,"value":11539},"如果有任务,任务按钮",{"type":597,"tag":807,"props":11541,"children":11542},{},[11543],{"type":603,"value":11544},"如果有对话,显示对话按钮",{"type":597,"tag":807,"props":11546,"children":11547},{},[11548],{"type":603,"value":11549},"更多",{"title":591,"searchDepth":787,"depth":787,"links":11551},[11552,11553,11554],{"id":11345,"depth":787,"text":11345},{"id":11368,"depth":787,"text":11368},{"id":11516,"depth":787,"text":11516},"content:game:2022-02-19-quest-machine.md","game/2022-02-19-quest-machine.md","2022-02-19",{"_path":248,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":247,"description":11559,"body":11560,"_type":791,"_id":11887,"_source":793,"_file":11888,"_extension":795,"date":11889},"使用流程首先要清楚类库是什么类型，不同的类库有不同的使用方式寻找声明文件JS类库一般有三类：全局类库、模块类库、UMD库。例如，jQuery是一种UMD库，既可以通过全局方式来引用，也可以模块化引用。声明文件当我们要使用一个类库时，需要ts声明文件，对外暴露API，有时候声明文件在源码中，大部分是单独提供额外安装。比如jQuery需要额外安装类型声明包。幸运的是，大部分的类库，TS社区都有声明文件。名称为@types/类库名，需要去这个网站搜一下http://microsoft.github.io/TypeSearch/如果没有，需要自己去写一个，这也是为社区贡献的好机会。http://def",{"type":594,"children":11561,"toc":11878},[11562,11570,11583,11588,11596,11601,11620,11633,11638,11646,11654,11672,11677,11682,11690,11695,11703,11711,11724,11729,11737,11742,11750,11759,11764,11777,11782,11787,11795,11800,11808,11813,11818,11826,11831,11839,11847,11852,11857,11865,11870],{"type":597,"tag":598,"props":11563,"children":11565},{"id":11564},"使用流程",[11566],{"type":597,"tag":1080,"props":11567,"children":11568},{},[11569],{"type":603,"value":11564},{"type":597,"tag":803,"props":11571,"children":11572},{},[11573,11578],{"type":597,"tag":807,"props":11574,"children":11575},{},[11576],{"type":603,"value":11577},"首先要清楚类库是什么类型，不同的类库有不同的使用方式",{"type":597,"tag":807,"props":11579,"children":11580},{},[11581],{"type":603,"value":11582},"寻找声明文件",{"type":597,"tag":606,"props":11584,"children":11585},{},[11586],{"type":603,"value":11587},"JS类库一般有三类：全局类库、模块类库、UMD库。例如，jQuery是一种UMD库，既可以通过全局方式来引用，也可以模块化引用。",{"type":597,"tag":1023,"props":11589,"children":11591},{"id":11590},"声明文件",[11592],{"type":597,"tag":1080,"props":11593,"children":11594},{},[11595],{"type":603,"value":11590},{"type":597,"tag":606,"props":11597,"children":11598},{},[11599],{"type":603,"value":11600},"当我们要使用一个类库时，需要ts声明文件，对外暴露API，有时候声明文件在源码中，大部分是单独提供额外安装。比如jQuery需要额外安装类型声明包。",{"type":597,"tag":606,"props":11602,"children":11603},{},[11604,11606,11613],{"type":603,"value":11605},"幸运的是，大部分的类库，TS社区都有声明文件。名称为@types/类库名，需要去这个网站搜一下",{"type":597,"tag":886,"props":11607,"children":11610},{"href":11608,"rel":11609},"https://microsoft.github.io/TypeSearch/",[890],[11611],{"type":603,"value":11612},"http://",{"type":597,"tag":886,"props":11614,"children":11617},{"href":11615,"rel":11616},"http://microsoft.github.io/TypeSearch/",[890],[11618],{"type":603,"value":11619},"microsoft.github.io/TypeSearch/",{"type":597,"tag":606,"props":11621,"children":11622},{},[11623,11625,11631],{"type":603,"value":11624},"如果没有，需要自己去写一个，这也是为社区贡献的好机会。",{"type":597,"tag":886,"props":11626,"children":11629},{"href":11627,"rel":11628},"http://definitelytyped.org/guides/contributing.html",[890],[11630],{"type":603,"value":11627},{"type":603,"value":11632},"这里提供了一些写声明文件的方法。在写ts声明文件的时候，暂时用不到的API可以可以不写。>",{"type":597,"tag":606,"props":11634,"children":11635},{},[11636],{"type":603,"value":11637},"下面我将演示，如何在ts文件中使用三种类库。首先准备三个js文件，分别表示全局类库、模块类库、UMD库。",{"type":597,"tag":621,"props":11639,"children":11641},{"code":11640},"// 全局类库  global-lib.js\nfunction globalLib(options) {\n   console.log(options);\n}\nglobalLib.version = \"1.0.0\";\nglobalLib.doSomething = function () {\n   console.log('globalLib do something');\n};\n\n// 模块类库  module-lib.js\nconst version = \"1.0.0\";\nfunction doSomething() {\n   console.log('moduleLib do something');\n}\nfunction moduleLib(options) {\n   console.log(options);\n}\nmoduleLib.version = version;\nmoduleLib.doSomething = doSomething;\nmodule.exports = moduleLib;\n\n// UMD库  umd-lib.js\n(function (root, factory) {\n   if(typeof define === \"function\" && define.amd)\n   {\n      define(factory);\n   }else if(typeof module === \"object\" && module.exports)\n   {\n      module.exports = factory();\n   }else\n   {\n      root.umdLib = factory();\n   }\n})(this, function () {\n   return {\n      version: \"1.0.2\",\n      doSomething() {\n         console.log('umdLib do something');\n      }\n   }\n});\n",[11642],{"type":597,"tag":629,"props":11643,"children":11644},{"__ignoreMap":591},[11645],{"type":603,"value":11640},{"type":597,"tag":598,"props":11647,"children":11649},{"id":11648},"全局类库",[11650],{"type":597,"tag":1080,"props":11651,"children":11652},{},[11653],{"type":603,"value":11648},{"type":597,"tag":803,"props":11655,"children":11656},{},[11657,11662,11667],{"type":597,"tag":807,"props":11658,"children":11659},{},[11660],{"type":603,"value":11661},"在HTML文件标签中引入该库",{"type":597,"tag":807,"props":11663,"children":11664},{},[11665],{"type":603,"value":11666},"将写好的声明文件与js库放在同一文件夹下，命名相同，后缀名为.d.ts",{"type":597,"tag":807,"props":11668,"children":11669},{},[11670],{"type":603,"value":11671},"此时可以在ts文件中使用全局API",{"type":597,"tag":606,"props":11673,"children":11674},{},[11675],{"type":603,"value":11676},"如果此时编译器未报错，而浏览器报错not defined，可能是html中引入的路径是相对路径，改成绝对路径即可（以项目目录为根目录）。",{"type":597,"tag":606,"props":11678,"children":11679},{},[11680],{"type":603,"value":11681},"声明文件global-lib.d.ts",{"type":597,"tag":621,"props":11683,"children":11685},{"code":11684},"declare function globalLib(options: globalLib.Options): void;\ndeclare namespace globalLib{\n   const version: string;\n   function doSomething(): void;\n   interface Options {\n      [key: string]: any,\n   }\n}\n",[11686],{"type":597,"tag":629,"props":11687,"children":11688},{"__ignoreMap":591},[11689],{"type":603,"value":11684},{"type":597,"tag":606,"props":11691,"children":11692},{},[11693],{"type":603,"value":11694},"在ts文件中使用该库：",{"type":597,"tag":621,"props":11696,"children":11698},{"code":11697},"globalLib({x:1});\nglobalLib.doSomething();\n",[11699],{"type":597,"tag":629,"props":11700,"children":11701},{"__ignoreMap":591},[11702],{"type":603,"value":11697},{"type":597,"tag":598,"props":11704,"children":11706},{"id":11705},"模块类库",[11707],{"type":597,"tag":1080,"props":11708,"children":11709},{},[11710],{"type":603,"value":11705},{"type":597,"tag":803,"props":11712,"children":11713},{},[11714,11719],{"type":597,"tag":807,"props":11715,"children":11716},{},[11717],{"type":603,"value":11718},"将声明文件放在相同的目录下",{"type":597,"tag":807,"props":11720,"children":11721},{},[11722],{"type":603,"value":11723},"在ts中引入",{"type":597,"tag":606,"props":11725,"children":11726},{},[11727],{"type":603,"value":11728},"声明文件 module-lib.d.ts",{"type":597,"tag":621,"props":11730,"children":11732},{"code":11731},"declare function moduleLib(options: Options): void;\ninterface Options {\n   [key: string]: any,\n}\ndeclare namespace moduleLib{\n   const version: string;\n   function doSomething(): void;\n}\nexport = moduleLib; // 这样写兼容性更好\n",[11733],{"type":597,"tag":629,"props":11734,"children":11735},{"__ignoreMap":591},[11736],{"type":603,"value":11731},{"type":597,"tag":606,"props":11738,"children":11739},{},[11740],{"type":603,"value":11741},"ts中使用类库",{"type":597,"tag":621,"props":11743,"children":11745},{"code":11744},"import moduleLib from './Libs/module-lib.js';\nmoduleLib.doSomething();\n",[11746],{"type":597,"tag":629,"props":11747,"children":11748},{"__ignoreMap":591},[11749],{"type":603,"value":11744},{"type":597,"tag":598,"props":11751,"children":11753},{"id":11752},"umd类库",[11754],{"type":597,"tag":1080,"props":11755,"children":11756},{},[11757],{"type":603,"value":11758},"UMD类库",{"type":597,"tag":606,"props":11760,"children":11761},{},[11762],{"type":603,"value":11763},"UMD库有两种使用方式：",{"type":597,"tag":1321,"props":11765,"children":11766},{},[11767,11772],{"type":597,"tag":807,"props":11768,"children":11769},{},[11770],{"type":603,"value":11771},"引入全局类库的方式",{"type":597,"tag":807,"props":11773,"children":11774},{},[11775],{"type":603,"value":11776},"模块类库引入的方式",{"type":597,"tag":606,"props":11778,"children":11779},{},[11780],{"type":603,"value":11781},"其中，在使用全局类库的引入方式时，编译器会提示，不建议这样做，需要在tsconfig.json中打开allUmdGlobalAccess配置项可以消除提示。",{"type":597,"tag":606,"props":11783,"children":11784},{},[11785],{"type":603,"value":11786},"声明文件 umd-lib.d.ts",{"type":597,"tag":621,"props":11788,"children":11790},{"code":11789},"declare namespace umdLib {\n   const version: string;\n   function doSomething(): void;\n}\nexport as namespace umdLib // 专门为umd库准备的语句，不可缺少\nexport = umdLib\n",[11791],{"type":597,"tag":629,"props":11792,"children":11793},{"__ignoreMap":591},[11794],{"type":603,"value":11789},{"type":597,"tag":606,"props":11796,"children":11797},{},[11798],{"type":603,"value":11799},"ts中使用UMD库（不再演示全局使用方式）",{"type":597,"tag":621,"props":11801,"children":11803},{"code":11802},"import umdLib from './Libs/umd-lib'\numdLib.doSomething();\nconsole.log(umdLib.version);\n",[11804],{"type":597,"tag":629,"props":11805,"children":11806},{"__ignoreMap":591},[11807],{"type":603,"value":11802},{"type":597,"tag":606,"props":11809,"children":11810},{},[11811],{"type":603,"value":11812},"例：在ts中使用jQuery（不演示全局引入方式）",{"type":597,"tag":606,"props":11814,"children":11815},{},[11816],{"type":603,"value":11817},"先安装jquery及其声明文件",{"type":597,"tag":621,"props":11819,"children":11821},{"code":11820},"npm install -D jquery @types/jquery\n",[11822],{"type":597,"tag":629,"props":11823,"children":11824},{"__ignoreMap":591},[11825],{"type":603,"value":11820},{"type":597,"tag":606,"props":11827,"children":11828},{},[11829],{"type":603,"value":11830},"使用：",{"type":597,"tag":621,"props":11832,"children":11834},{"code":11833},"import $ from 'jquery';\n$(\".app\").css(\"color\",\"red\");\n",[11835],{"type":597,"tag":629,"props":11836,"children":11837},{"__ignoreMap":591},[11838],{"type":603,"value":11833},{"type":597,"tag":598,"props":11840,"children":11842},{"id":11841},"为类库添加插件",[11843],{"type":597,"tag":1080,"props":11844,"children":11845},{},[11846],{"type":603,"value":11841},{"type":597,"tag":606,"props":11848,"children":11849},{},[11850],{"type":603,"value":11851},"即为类库添加自定义的方法",{"type":597,"tag":606,"props":11853,"children":11854},{},[11855],{"type":603,"value":11856},"其中UMD库和模块类库的添加插件方法一致。",{"type":597,"tag":621,"props":11858,"children":11860},{"code":11859},"// 为全局类库增添自定义方法\ndeclare global {\n   namespace globalLib {\n      function myFunction(): void\n   }\n}\nglobalLib.myFunction = () =>{console.log(\"global插件\")};\n\n// 为模块类库添加自定义方法\ndeclare module \"./Libs/module-lib.js\"{\n   export function myFunction(): void;\n} // 为module-lib类库声明myFunction方法\nmoduleLib.myFunction = () => {console.log(\"module插件\")}; // 定义自定义方法\n\n// 为UMD库添加自定义方法\ndeclare module \"./Libs/umd-lib.js\"{\n   export function myFunction(): void;\n} // 为umd-lib类库声明myFunction方法\numdLib.myFunction = () => {console.log(\"umd插件\")}; // 定义自定义方法\n\nglobalLib.myFunction();\nmoduleLib.myFunction();\numdLib.myFunction();\n",[11861],{"type":597,"tag":629,"props":11862,"children":11863},{"__ignoreMap":591},[11864],{"type":603,"value":11859},{"type":597,"tag":606,"props":11866,"children":11867},{},[11868],{"type":603,"value":11869},"例如，为类库moment增添自定义方法（jQuery不可以，需要使用官方提供的API）",{"type":597,"tag":621,"props":11871,"children":11873},{"code":11872},"npm install -D moment @types/moment\n\nimport m from 'moment';\ndeclare module 'moment'{\n   export function myFunction(): void;\n}\nm.myFunction = () => {console.log(\"moment插件\")};\n\nm.myFunction();\n",[11874],{"type":597,"tag":629,"props":11875,"children":11876},{"__ignoreMap":591},[11877],{"type":603,"value":11872},{"title":591,"searchDepth":787,"depth":787,"links":11879},[11880,11883,11884,11885,11886],{"id":11564,"depth":787,"text":11564,"children":11881},[11882],{"id":11590,"depth":1530,"text":11590},{"id":11648,"depth":787,"text":11648},{"id":11705,"depth":787,"text":11705},{"id":11752,"depth":787,"text":11758},{"id":11841,"depth":787,"text":11841},"content:js:2022-02-12-TypeScript-use-Js.md","js/2022-02-12-TypeScript-use-Js.md","2022-02-12",{"_path":13,"_dir":11891,"_draft":590,"_partial":590,"_locale":591,"title":12,"description":11892,"layout":11893,"body":11894,"_type":791,"_id":11902,"_source":793,"_file":11903,"_extension":795,"date":11904},"art","sdfa","page",{"type":594,"children":11895,"toc":11900},[11896],{"type":597,"tag":606,"props":11897,"children":11898},{},[11899],{"type":603,"value":11892},{"title":591,"searchDepth":787,"depth":787,"links":11901},[],"content:art:2022-02-02-像素画入门.md","art/2022-02-02-像素画入门.md","2022-02-02",{"_path":351,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":350,"description":11906,"body":11907,"_type":791,"_id":12100,"_source":793,"_file":12101,"_extension":795,"date":12102},"官方文档code-server v4.0.2 docs (coder.com)coder/code-server: VS Code in the browser (github.com)原理基础code-server是一款基于VScode的在线编辑器,主要用于在Linux服务器环境下,实现任何设备通过浏览器即可访问VScode, 进而实现在远程编程.安装linux标准安装方式mkdir -p ~/.local/lib ~/.local/bin\ncurl -fL https://github.com/cdr/code-server/releases/download/v$VERSION/code",{"type":594,"children":11908,"toc":12090},[11909,11917,11964,11972,11977,11985,11990,11998,12004,12012,12017,12022,12030,12035,12056,12064,12069,12077,12082],{"type":597,"tag":598,"props":11910,"children":11912},{"id":11911},"官方文档",[11913],{"type":597,"tag":1080,"props":11914,"children":11915},{},[11916],{"type":603,"value":11911},{"type":597,"tag":1321,"props":11918,"children":11919},{},[11920,11942],{"type":597,"tag":807,"props":11921,"children":11922},{},[11923,11930,11937],{"type":597,"tag":886,"props":11924,"children":11927},{"href":11925,"rel":11926},"https://coder.com/docs/code-server/latest",[890],[11928],{"type":603,"value":11929},"code-server v4.0.2 docs (",{"type":597,"tag":886,"props":11931,"children":11934},{"href":11932,"rel":11933},"http://coder.com",[890],[11935],{"type":603,"value":11936},"coder.com",{"type":597,"tag":886,"props":11938,"children":11940},{"href":11925,"rel":11939},[890],[11941],{"type":603,"value":3748},{"type":597,"tag":807,"props":11943,"children":11944},{},[11945,11952,11959],{"type":597,"tag":886,"props":11946,"children":11949},{"href":11947,"rel":11948},"https://github.com/coder/code-server",[890],[11950],{"type":603,"value":11951},"coder/code-server: VS Code in the browser (",{"type":597,"tag":886,"props":11953,"children":11956},{"href":11954,"rel":11955},"http://github.com",[890],[11957],{"type":603,"value":11958},"github.com",{"type":597,"tag":886,"props":11960,"children":11962},{"href":11947,"rel":11961},[890],[11963],{"type":603,"value":3748},{"type":597,"tag":598,"props":11965,"children":11967},{"id":11966},"原理基础",[11968],{"type":597,"tag":1080,"props":11969,"children":11970},{},[11971],{"type":603,"value":11966},{"type":597,"tag":606,"props":11973,"children":11974},{},[11975],{"type":603,"value":11976},"code-server是一款基于VScode的在线编辑器,主要用于在Linux服务器环境下,实现任何设备通过浏览器即可访问VScode, 进而实现在远程编程.",{"type":597,"tag":598,"props":11978,"children":11980},{"id":11979},"安装",[11981],{"type":597,"tag":1080,"props":11982,"children":11983},{},[11984],{"type":603,"value":11979},{"type":597,"tag":1023,"props":11986,"children":11988},{"id":11987},"linux标准安装方式",[11989],{"type":603,"value":11987},{"type":597,"tag":621,"props":11991,"children":11993},{"code":11992},"mkdir -p ~/.local/lib ~/.local/bin\ncurl -fL https://github.com/cdr/code-server/releases/download/v$VERSION/code-server-$VERSION-linux-amd64.tar.gz \\\n  | tar -C ~/.local/lib -xz\nmv ~/.local/lib/code-server-$VERSION-linux-amd64 ~/.local/lib/code-server-$VERSION\nln -s ~/.local/lib/code-server-$VERSION/bin/code-server ~/.local/bin/code-server\nPATH=\"~/.local/bin:$PATH\"\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n",[11994],{"type":597,"tag":629,"props":11995,"children":11996},{"__ignoreMap":591},[11997],{"type":603,"value":11992},{"type":597,"tag":1023,"props":11999,"children":12001},{"id":12000},"fedora-centos-rhel-suse",[12002],{"type":603,"value":12003},"Fedora, CentOS, RHEL, SUSE",{"type":597,"tag":621,"props":12005,"children":12007},{"code":12006},"curl -fOL https://github.com/cdr/code-server/releases/download/v$VERSION/code-server-$VERSION-amd64.rpm\nsudo rpm -i code-server-$VERSION-amd64.rpm\nsudo systemctl enable --now code-server@$USER\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n\nsystemctl start code-server@$USER\nsystemctl stop code-server@$USER\n",[12008],{"type":597,"tag":629,"props":12009,"children":12010},{"__ignoreMap":591},[12011],{"type":603,"value":12006},{"type":597,"tag":1023,"props":12013,"children":12015},{"id":12014},"windows",[12016],{"type":603,"value":12014},{"type":597,"tag":606,"props":12018,"children":12019},{},[12020],{"type":603,"value":12021},"推荐使用yarn或者npm进行安装",{"type":597,"tag":621,"props":12023,"children":12025},{"code":12024},"yarn global add code-server\n# Or: npm install -g code-server\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n",[12026],{"type":597,"tag":629,"props":12027,"children":12028},{"__ignoreMap":591},[12029],{"type":603,"value":12024},{"type":597,"tag":598,"props":12031,"children":12033},{"id":12032},"配置",[12034],{"type":603,"value":12032},{"type":597,"tag":606,"props":12036,"children":12037},{},[12038,12040,12046,12048,12054],{"type":603,"value":12039},"配置文件一般在",{"type":597,"tag":629,"props":12041,"children":12043},{"className":12042},[],[12044],{"type":603,"value":12045},"~/.config/code-server/config.yaml",{"type":603,"value":12047},",可以将ip配置成",{"type":597,"tag":629,"props":12049,"children":12051},{"className":12050},[],[12052],{"type":603,"value":12053},"0.0.0.0",{"type":603,"value":12055},",然后将域名解析到该服务器",{"type":597,"tag":621,"props":12057,"children":12059},{"code":12058},"bind-addr: 127.0.0.1:8080\nauth: password\npassword: *************\ncert: false\n",[12060],{"type":597,"tag":629,"props":12061,"children":12062},{"__ignoreMap":591},[12063],{"type":603,"value":12058},{"type":597,"tag":606,"props":12065,"children":12066},{},[12067],{"type":603,"value":12068},"安装nginx,并且配置https,否则很多插件不能使用",{"type":597,"tag":621,"props":12070,"children":12072},{"code":12071},"yum install  -y nginx certbot python3-certbot-nginx\nvim /etc/nginx/conf.d/dev.godgodgame.com.conf\n",[12073],{"type":597,"tag":629,"props":12074,"children":12075},{"__ignoreMap":591},[12076],{"type":603,"value":12071},{"type":597,"tag":606,"props":12078,"children":12079},{},[12080],{"type":603,"value":12081},"nginx.配置文件",{"type":597,"tag":621,"props":12083,"children":12085},{"code":12084},"server {\n    listen 443 ssl;\n    #填写绑定证书的域名\n    server_name dev.godgodgame.com;\n    #证书文件名称\n    ssl_certificate  /etc/nginx/certs/dev.godgodgame.com_bundle.crt;\n    #私钥文件名称\n    ssl_certificate_key /etc/nginx/certs/dev.godgodgame.com.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    location / {\n      proxy_pass http://127.0.0.1:8080/;\n      proxy_set_header Host $host;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection upgrade;\n      proxy_set_header Accept-Encoding gzip;\n    }\n}\nserver {\n    listen 80;\n    #填写绑定证书的域名\n    server_name cloud.tencent.com;\n    #把http的域名请求转成https\n    return 301 https://$host$request_uri;\n}\n\n# 先检查nginx配置是否有效/无有异常,如果有异常请按照异常提示修改；使用nginx -t进行nginx.conf的配置检测\n$ nginx -t;\n$ systemctl enable nginx\n",[12086],{"type":597,"tag":629,"props":12087,"children":12088},{"__ignoreMap":591},[12089],{"type":603,"value":12084},{"title":591,"searchDepth":787,"depth":787,"links":12091},[12092,12093,12094,12099],{"id":11911,"depth":787,"text":11911},{"id":11966,"depth":787,"text":11966},{"id":11979,"depth":787,"text":11979,"children":12095},[12096,12097,12098],{"id":11987,"depth":1530,"text":11987},{"id":12000,"depth":1530,"text":12003},{"id":12014,"depth":1530,"text":12014},{"id":12032,"depth":787,"text":12032},"content:tool:2022-01-30-code-server.md","tool/2022-01-30-code-server.md","2022-01-30",{"_path":580,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":579,"description":12104,"body":12105,"_type":791,"_id":12208,"_source":793,"_file":12209,"_extension":795,"date":12210},"一些记录关闭netcode的代码生成Multiplayer->Code Generation Windown 关闭burst的编译,命令行添加参数--burst-disable-compilation ,查看Plugins\\TranslucentImage\\Script\\Editor\\ScenceGizmoAutoDisable.cs 删除特性UnityEditor.Callbacks.DidReloadScriptsUnity 重新生成 TypeCache。这大约需要 4000毫秒，具体取决于程序集中的类型数量。所以避免使用过多无用的插件.减少类型数量参考链接Fast Domain Relo",{"type":594,"children":12106,"toc":12204},[12107,12112,12176,12181],{"type":597,"tag":598,"props":12108,"children":12110},{"id":12109},"一些记录",[12111],{"type":603,"value":12109},{"type":597,"tag":1321,"props":12113,"children":12114},{},[12115,12126,12145,12162],{"type":597,"tag":807,"props":12116,"children":12117},{},[12118,12120],{"type":603,"value":12119},"关闭netcode的代码生成",{"type":597,"tag":629,"props":12121,"children":12123},{"className":12122},[],[12124],{"type":603,"value":12125},"Multiplayer->Code Generation Windown ",{"type":597,"tag":807,"props":12127,"children":12128},{},[12129,12131,12137,12138],{"type":603,"value":12130},"关闭burst的编译,命令行添加参数",{"type":597,"tag":629,"props":12132,"children":12134},{"className":12133},[],[12135],{"type":603,"value":12136},"--burst-disable-compilation",{"type":603,"value":9979},{"type":597,"tag":886,"props":12139,"children":12142},{"href":12140,"rel":12141},"https://docs.unity3d.com/Packages/com.unity.burst@1.6/manual/docs/QuickStart.html",[890],[12143],{"type":603,"value":12144},"查看",{"type":597,"tag":807,"props":12146,"children":12147},{},[12148,12154,12156],{"type":597,"tag":629,"props":12149,"children":12151},{"className":12150},[],[12152],{"type":603,"value":12153},"Plugins\\TranslucentImage\\Script\\Editor\\ScenceGizmoAutoDisable.cs",{"type":603,"value":12155}," 删除特性",{"type":597,"tag":629,"props":12157,"children":12159},{"className":12158},[],[12160],{"type":603,"value":12161},"UnityEditor.Callbacks.DidReloadScripts",{"type":597,"tag":807,"props":12163,"children":12164},{},[12165,12167,12174],{"type":603,"value":12166},"Unity 重新生成 ",{"type":597,"tag":886,"props":12168,"children":12171},{"href":12169,"rel":12170},"https://docs.unity3d.com/ScriptReference/TypeCache.html",[890],[12172],{"type":603,"value":12173},"TypeCache",{"type":603,"value":12175},"。这大约需要 4000毫秒，具体取决于程序集中的类型数量。所以避免使用过多无用的插件.减少类型数量",{"type":597,"tag":598,"props":12177,"children":12179},{"id":12178},"参考链接",[12180],{"type":603,"value":12178},{"type":597,"tag":1321,"props":12182,"children":12183},{},[12184,12194],{"type":597,"tag":807,"props":12185,"children":12186},{},[12187],{"type":597,"tag":886,"props":12188,"children":12191},{"href":12189,"rel":12190},"https://johnaustin.io/articles/2020/domain-reloads-in-unity",[890],[12192],{"type":603,"value":12193},"Fast Domain Reloads in Unity — John Austin",{"type":597,"tag":807,"props":12195,"children":12196},{},[12197],{"type":597,"tag":886,"props":12198,"children":12201},{"href":12199,"rel":12200},"https://forum.unity.com/threads/improving-iteration-time-on-c-script-changes.1184446/",[890],[12202],{"type":603,"value":12203},"Unity - Improving iteration time on C# script changes - Unity Forum",{"title":591,"searchDepth":787,"depth":787,"links":12205},[12206,12207],{"id":12109,"depth":787,"text":12109},{"id":12178,"depth":787,"text":12178},"content:unity:2022-01-28-unity-Editor-Iteration-Profiler.md","unity/2022-01-28-unity-Editor-Iteration-Profiler.md","2022-01-28",{"_path":577,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":576,"description":12212,"body":12213,"_type":791,"_id":12364,"_source":793,"_file":12365,"_extension":795,"date":12366},"Roslyn C# - Runtime Compiler通过FileSystemWatcher监控目录检查改变的文件unity的FileSystemWatcher有点问题,子目录下文件返回的路径是错的.所以需要先存储下cs文件进行索引public RealtimeScriptWatcher(ScriptDomain domain, string folderPath)\n{\n    this.domain = domain;\n    Files = new Dictionary\u003Cstring, string>();\n    string[] fileEntries = Directory.Get",{"type":594,"children":12214,"toc":12356},[12215,12221,12227,12232,12241,12246,12255,12260,12269,12274,12279,12285,12314,12319,12328,12333,12342,12347],{"type":597,"tag":598,"props":12216,"children":12218},{"id":12217},"roslyn-c-runtime-compiler",[12219],{"type":603,"value":12220},"Roslyn C# - Runtime Compiler",{"type":597,"tag":1023,"props":12222,"children":12224},{"id":12223},"通过filesystemwatcher监控目录检查改变的文件",[12225],{"type":603,"value":12226},"通过FileSystemWatcher监控目录检查改变的文件",{"type":597,"tag":606,"props":12228,"children":12229},{},[12230],{"type":603,"value":12231},"unity的FileSystemWatcher有点问题,子目录下文件返回的路径是错的.所以需要先存储下cs文件进行索引",{"type":597,"tag":621,"props":12233,"children":12236},{"className":12234,"code":12235,"language":8105,"meta":591},[8107],"public RealtimeScriptWatcher(ScriptDomain domain, string folderPath)\n{\n    this.domain = domain;\n    Files = new Dictionary\u003Cstring, string>();\n    string[] fileEntries = Directory.GetFiles(folderPath,\"*.cs\", SearchOption.AllDirectories);\n    foreach (var item in fileEntries)\n    {\n        var key = Path.GetFileName(item);\n        if (Files.TryGetValue(key,out var f) == false)\n        {\n            Files.Add(key, item);\n        }\n        else\n        {\n            Debug.LogError($\"{f}和{item}的文件名相同\");\n        }\n    }\n",[12237],{"type":597,"tag":629,"props":12238,"children":12239},{"__ignoreMap":591},[12240],{"type":603,"value":12235},{"type":597,"tag":1023,"props":12242,"children":12244},{"id":12243},"编译修改的文件并重新加载",[12245],{"type":603,"value":12243},{"type":597,"tag":621,"props":12247,"children":12250},{"className":12248,"code":12249,"language":8105,"meta":591},[8107],"  // Recompile the script\n    ScriptAssembly asm = domain.CompileAndLoadFile(path, securityMode);\n    \n    // Check for success\n    if(asm == null)\n    {\n        domain.LogCompilerOutputToConsole();\n        return;\n    }\n    \n    // Find the type for the changed source file\n    Type mainMonoType = GetMainMonoTypeForSourceFile(path);\n    \n    // Find type with matching full name\n    ScriptType reloadType = asm.FindType(mainMonoType);\n",[12251],{"type":597,"tag":629,"props":12252,"children":12253},{"__ignoreMap":591},[12254],{"type":603,"value":12249},{"type":597,"tag":1023,"props":12256,"children":12258},{"id":12257},"替换场景中的monobehavior",[12259],{"type":603,"value":12257},{"type":597,"tag":621,"props":12261,"children":12264},{"className":12262,"code":12263,"language":8105,"meta":591},[8107],"public static bool ReplaceScriptsForScene(Scene targetScene, ScriptType scriptType, out ModScriptReplacerReport report, ScriptReplacerOptions options = ScriptReplacerOptions.Default)\n{\n    bool failed = false;\n    report = new ModScriptReplacerReport();\n\n    bool includeInactive = (options & ScriptReplacerOptions.ReplaceDisabledScripts) != 0;\n\n    foreach (GameObject gameObject in targetScene.GetRootGameObjects())\n    {\n        foreach (MonoBehaviour behaviour in gameObject.GetComponentsInChildren\u003CMonoBehaviour>(includeInactive))\n        {\n            if (ReplaceScriptBehaviourImpl(behaviour, scriptType, ref report, options) == false)\n                failed = true;\n        }\n    }\n    return failed == false;\n}\n",[12265],{"type":597,"tag":629,"props":12266,"children":12267},{"__ignoreMap":591},[12268],{"type":603,"value":12263},{"type":597,"tag":606,"props":12270,"children":12271},{},[12272],{"type":603,"value":12273},"通过以上可以看到明显的缺点只支持monobehavior",{"type":597,"tag":606,"props":12275,"children":12276},{},[12277],{"type":603,"value":12278},"若想支持非monobehavior可能需要自己进行处理",{"type":597,"tag":598,"props":12280,"children":12282},{"id":12281},"et的热重载",[12283],{"type":603,"value":12284},"ET的热重载",{"type":597,"tag":1321,"props":12286,"children":12287},{},[12288,12293,12304,12309],{"type":597,"tag":807,"props":12289,"children":12290},{},[12291],{"type":603,"value":12292},"分离项目到不同的dll中",{"type":597,"tag":807,"props":12294,"children":12295},{},[12296,12298],{"type":603,"value":12297},"通过代码加载dll",{"type":597,"tag":629,"props":12299,"children":12301},{"className":12300},[],[12302],{"type":603,"value":12303},"System.Reflection.Assembly.Load(assBytes, pdbBytes)",{"type":597,"tag":807,"props":12305,"children":12306},{},[12307],{"type":603,"value":12308},"首先进行编译dll",{"type":597,"tag":807,"props":12310,"children":12311},{},[12312],{"type":603,"value":12313},"按R热加载后,通过反射,对现有的对象进行销毁,然后重新创建",{"type":597,"tag":606,"props":12315,"children":12316},{},[12317],{"type":603,"value":12318},"关键代码:",{"type":597,"tag":621,"props":12320,"children":12323},{"className":12321,"code":12322,"language":8105,"meta":591},[8107],"\npublic class CodeLoader: IDisposable\n{\n    public static CodeLoader Instance = new CodeLoader();\n\n    public Action Update;\n    public Action LateUpdate;\n    public Action OnApplicationQuit;\n\n    private Assembly assembly;\n\n    private ILRuntime.Runtime.Enviorment.AppDomain appDomain;\n    \n    private Type[] allTypes;\n    \n    public CodeMode CodeMode { get; set; }\n\n    private CodeLoader()\n    {\n    }\n\n    public void Dispose()\n    {\n        this.appDomain?.Dispose();\n    }\n    \n    public void Start()\n    {\n        switch (this.CodeMode)\n        {\n            case CodeMode.Mono:\n            {\n                Dictionary\u003Cstring, UnityEngine.Object> dictionary = AssetsBundleHelper.LoadBundle(\"code.unity3d\");\n                byte[] assBytes = ((TextAsset)dictionary[\"Code.dll\"]).bytes;\n                byte[] pdbBytes = ((TextAsset)dictionary[\"Code.pdb\"]).bytes;\n                \n                assembly = Assembly.Load(assBytes, pdbBytes);\n                this.allTypes = assembly.GetTypes();\n                IStaticMethod start = new MonoStaticMethod(assembly, \"ET.Entry\", \"Start\");\n                start.Run();\n                break;\n            }\n            case CodeMode.ILRuntime:\n            {\n                Dictionary\u003Cstring, UnityEngine.Object> dictionary = AssetsBundleHelper.LoadBundle(\"code.unity3d\");\n                byte[] assBytes = ((TextAsset)dictionary[\"Code.dll\"]).bytes;\n                byte[] pdbBytes = ((TextAsset)dictionary[\"Code.pdb\"]).bytes;\n                \n                //byte[] assBytes = File.ReadAllBytes(Path.Combine(\"../Unity/\", Define.BuildOutputDir, \"Code.dll\"));\n                //byte[] pdbBytes = File.ReadAllBytes(Path.Combine(\"../Unity/\", Define.BuildOutputDir, \"Code.pdb\"));\n            \n                appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n                MemoryStream assStream = new MemoryStream(assBytes);\n                MemoryStream pdbStream = new MemoryStream(pdbBytes);\n                appDomain.LoadAssembly(assStream, pdbStream, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n\n                ILHelper.InitILRuntime(appDomain);\n\n                this.allTypes = appDomain.LoadedTypes.Values.Select(x => x.ReflectionType).ToArray();\n                IStaticMethod start = new ILStaticMethod(appDomain, \"ET.Entry\", \"Start\", 0);\n                start.Run();\n                break;\n            }\n            case CodeMode.Reload:\n            {\n                byte[] assBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, \"Data.dll\"));\n                byte[] pdbBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, \"Data.pdb\"));\n                \n                assembly = Assembly.Load(assBytes, pdbBytes);\n                this.LoadLogic();\n                IStaticMethod start = new MonoStaticMethod(assembly, \"ET.Entry\", \"Start\");\n                start.Run();\n                break;\n            }\n        }\n    }\n\n    // 热重载调用下面三个方法\n    // CodeLoader.Instance.LoadLogic();\n    // Game.EventSystem.Add(CodeLoader.Instance.GetTypes());\n    // Game.EventSystem.Load();\n    public void LoadLogic()\n    {\n        if (this.CodeMode != CodeMode.Reload)\n        {\n            throw new Exception(\"CodeMode != Reload!\");\n        }\n        \n        // 傻屌Unity在这里搞了个傻逼优化，认为同一个路径的dll，返回的程序集就一样。所以这里每次编译都要随机名字\n        string[] logicFiles = Directory.GetFiles(Define.BuildOutputDir, \"Logic_*.dll\");\n        if (logicFiles.Length != 1)\n        {\n            throw new Exception(\"Logic dll count != 1\");\n        }\n\n        string logicName = Path.GetFileNameWithoutExtension(logicFiles[0]);\n        byte[] assBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, $\"{logicName}.dll\"));\n        byte[] pdbBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, $\"{logicName}.pdb\"));\n\n        Assembly hotfixAssembly = Assembly.Load(assBytes, pdbBytes);\n        \n        List\u003CType> listType = new List\u003CType>();\n        listType.AddRange(this.assembly.GetTypes());\n        listType.AddRange(hotfixAssembly.GetTypes());\n        this.allTypes = listType.ToArray();\n    }\n\n    public Type[] GetTypes()\n    {\n        return this.allTypes;\n    }\n}\n",[12324],{"type":597,"tag":629,"props":12325,"children":12326},{"__ignoreMap":591},[12327],{"type":603,"value":12322},{"type":597,"tag":606,"props":12329,"children":12330},{},[12331],{"type":603,"value":12332},"按下f8编译dll",{"type":597,"tag":621,"props":12334,"children":12337},{"className":12335,"code":12336,"language":8105,"meta":591},[8107],"public static class BuildAssemblieEditor\n{\n        [MenuItem(\"Tools/BuildLogic _F8\")]\n        public static void BuildLogic()\n        {\n            string[] logicFiles = Directory.GetFiles(Define.BuildOutputDir, \"Logic_*\");\n            foreach (string file in logicFiles)\n            {\n                File.Delete(file);\n            }\n            \n            int random = RandomHelper.RandomNumber(100000000, 999999999);\n            string logicFile = $\"Logic_{random}\";\n            \n            BuildAssemblieEditor.BuildMuteAssembly(logicFile, new []\n            {\n                \"Codes/Hotfix/\",\n                \"Codes/HotfixView/\",\n            }, new[]{Path.Combine(Define.BuildOutputDir, \"Data.dll\")}, CodeOptimization.Debug);\n        }\n\n\n    private static void BuildMuteAssembly(string assemblyName, string[] CodeDirectorys, string[] additionalReferences, CodeOptimization codeOptimization)\n        {\n            List\u003Cstring> scripts = new List\u003Cstring>();\n            for (int i = 0; i \u003C CodeDirectorys.Length; i++)\n            {\n                DirectoryInfo dti = new DirectoryInfo(CodeDirectorys[i]);\n                FileInfo[] fileInfos = dti.GetFiles(\"*.cs\", System.IO.SearchOption.AllDirectories);\n                for (int j = 0; j \u003C fileInfos.Length; j++)\n                {\n                    scripts.Add(fileInfos[j].FullName);\n                }\n            }\n\n            string dllPath = Path.Combine(Define.BuildOutputDir, $\"{assemblyName}.dll\");\n            string pdbPath = Path.Combine(Define.BuildOutputDir, $\"{assemblyName}.pdb\");\n            File.Delete(dllPath);\n            File.Delete(pdbPath);\n\n            Directory.CreateDirectory(Define.BuildOutputDir);\n\n            AssemblyBuilder assemblyBuilder = new AssemblyBuilder(dllPath, scripts.ToArray());\n            \n            //启用UnSafe\n            //assemblyBuilder.compilerOptions.AllowUnsafeCode = true;\n\n            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget);\n\n            assemblyBuilder.compilerOptions.CodeOptimization = codeOptimization;\n            assemblyBuilder.compilerOptions.ApiCompatibilityLevel = PlayerSettings.GetApiCompatibilityLevel(buildTargetGroup);\n            // assemblyBuilder.compilerOptions.ApiCompatibilityLevel = ApiCompatibilityLevel.NET_4_6;\n\n            assemblyBuilder.additionalReferences = additionalReferences;\n            \n            assemblyBuilder.flags = AssemblyBuilderFlags.None;\n            //AssemblyBuilderFlags.None                 正常发布\n            //AssemblyBuilderFlags.DevelopmentBuild     开发模式打包\n            //AssemblyBuilderFlags.EditorAssembly       编辑器状态\n            assemblyBuilder.referencesOptions = ReferencesOptions.UseEngineModules;\n\n            assemblyBuilder.buildTarget = EditorUserBuildSettings.activeBuildTarget;\n\n            assemblyBuilder.buildTargetGroup = buildTargetGroup;\n\n            assemblyBuilder.buildStarted += delegate(string assemblyPath) { Debug.LogFormat(\"build start：\" + assemblyPath); };\n\n            assemblyBuilder.buildFinished += delegate(string assemblyPath, CompilerMessage[] compilerMessages)\n            {\n                int errorCount = compilerMessages.Count(m => m.type == CompilerMessageType.Error);\n                int warningCount = compilerMessages.Count(m => m.type == CompilerMessageType.Warning);\n\n                Debug.LogFormat(\"Warnings: {0} - Errors: {1}\", warningCount, errorCount);\n\n                if (warningCount > 0)\n                {\n                    Debug.LogFormat(\"有{0}个Warning!!!\", warningCount);\n                }\n\n                if (errorCount > 0)\n                {\n                    for (int i = 0; i \u003C compilerMessages.Length; i++)\n                    {\n                        if (compilerMessages[i].type == CompilerMessageType.Error)\n                        {\n                            Debug.LogError(compilerMessages[i].message);\n                        }\n                    }\n                }\n            };\n            \n            //开始构建\n            if (!assemblyBuilder.Build())\n            {\n                Debug.LogErrorFormat(\"build fail：\" + assemblyBuilder.assemblyPath);\n                return;\n            }\n        }\n",[12338],{"type":597,"tag":629,"props":12339,"children":12340},{"__ignoreMap":591},[12341],{"type":603,"value":12336},{"type":597,"tag":606,"props":12343,"children":12344},{},[12345],{"type":603,"value":12346},"按下R重载",{"type":597,"tag":621,"props":12348,"children":12351},{"className":12349,"code":12350,"language":8105,"meta":591},[8107],"    \npublic static class OperaComponentSystem\n{\n    public static void Update()\n    { \n        if (Input.GetKeyDown(KeyCode.R))\n        {\n            CodeLoader.Instance.LoadLogic();\n            Game.EventSystem.Add(CodeLoader.Instance.GetTypes());\n            Game.EventSystem.Load();\n            Log.Debug(\"hot reload success!\");\n        }\n    }\n}\n",[12352],{"type":597,"tag":629,"props":12353,"children":12354},{"__ignoreMap":591},[12355],{"type":603,"value":12350},{"title":591,"searchDepth":787,"depth":787,"links":12357},[12358,12363],{"id":12217,"depth":787,"text":12220,"children":12359},[12360,12361,12362],{"id":12223,"depth":1530,"text":12226},{"id":12243,"depth":1530,"text":12243},{"id":12257,"depth":1530,"text":12257},{"id":12281,"depth":787,"text":12284},"content:unity:2022-01-02-unity-hot-reload.md","unity/2022-01-02-unity-hot-reload.md","2022-01-02",{"_path":174,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":173,"description":12368,"body":12369,"_type":791,"_id":12959,"_source":793,"_file":12960,"_extension":795,"date":12961},"释放前检查Tag常用tag写死,比如眩晕等自定义tag,通过判断AscHasAllTags 和AscHasNoneTags 技能是否能够执行检查释放消耗检查冷却时间检查其他自定义条件是否装备指定武器是否变身是否隐身释放后激活阶段animalAction(角色动画)waitAction(等待动作)释放阶段触发释放特效前摇执行阶段释放project其他爆炸物的释放完成阶段后摇角色动画攻击动作投射物子弹弹幕攻击特效其他动作角色动作等待时间\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n技能说明动作跳跃攻击跳跃离开危险或跳入战斗之中跳跃动画,并且使用抛物线落到指定点的一个特殊动作旋风旋转的死亡之舞",{"type":594,"children":12370,"toc":12944},[12371,12376,12446,12451,12521,12526,12549,12554,12567,12568,12648,12652,12683,12688,12732,12737,12738,12858,12864,12869,12875,12880,12885,12890,12896,12909,12914,12927,12932,12937],{"type":597,"tag":598,"props":12372,"children":12374},{"id":12373},"释放前",[12375],{"type":603,"value":12373},{"type":597,"tag":1321,"props":12377,"children":12378},{},[12379,12413,12418,12423],{"type":597,"tag":807,"props":12380,"children":12381},{},[12382,12384],{"type":603,"value":12383},"检查Tag",{"type":597,"tag":1321,"props":12385,"children":12386},{},[12387,12392],{"type":597,"tag":807,"props":12388,"children":12389},{},[12390],{"type":603,"value":12391},"常用tag写死,比如眩晕等",{"type":597,"tag":807,"props":12393,"children":12394},{},[12395,12397,12403,12405,12411],{"type":603,"value":12396},"自定义tag,通过判断",{"type":597,"tag":629,"props":12398,"children":12400},{"className":12399},[],[12401],{"type":603,"value":12402},"AscHasAllTags",{"type":603,"value":12404}," 和",{"type":597,"tag":629,"props":12406,"children":12408},{"className":12407},[],[12409],{"type":603,"value":12410},"AscHasNoneTags",{"type":603,"value":12412}," 技能是否能够执行",{"type":597,"tag":807,"props":12414,"children":12415},{},[12416],{"type":603,"value":12417},"检查释放消耗",{"type":597,"tag":807,"props":12419,"children":12420},{},[12421],{"type":603,"value":12422},"检查冷却时间",{"type":597,"tag":807,"props":12424,"children":12425},{},[12426,12428],{"type":603,"value":12427},"检查其他自定义条件",{"type":597,"tag":1321,"props":12429,"children":12430},{},[12431,12436,12441],{"type":597,"tag":807,"props":12432,"children":12433},{},[12434],{"type":603,"value":12435},"是否装备指定武器",{"type":597,"tag":807,"props":12437,"children":12438},{},[12439],{"type":603,"value":12440},"是否变身",{"type":597,"tag":807,"props":12442,"children":12443},{},[12444],{"type":603,"value":12445},"是否隐身",{"type":597,"tag":598,"props":12447,"children":12449},{"id":12448},"释放后",[12450],{"type":603,"value":12448},{"type":597,"tag":1321,"props":12452,"children":12453},{},[12454,12472,12490,12508],{"type":597,"tag":807,"props":12455,"children":12456},{},[12457,12459],{"type":603,"value":12458},"激活阶段",{"type":597,"tag":1321,"props":12460,"children":12461},{},[12462,12467],{"type":597,"tag":807,"props":12463,"children":12464},{},[12465],{"type":603,"value":12466},"animalAction(角色动画)",{"type":597,"tag":807,"props":12468,"children":12469},{},[12470],{"type":603,"value":12471},"waitAction(等待动作)",{"type":597,"tag":807,"props":12473,"children":12474},{},[12475,12477],{"type":603,"value":12476},"释放阶段",{"type":597,"tag":1321,"props":12478,"children":12479},{},[12480,12485],{"type":597,"tag":807,"props":12481,"children":12482},{},[12483],{"type":603,"value":12484},"触发释放特效",{"type":597,"tag":807,"props":12486,"children":12487},{},[12488],{"type":603,"value":12489},"前摇",{"type":597,"tag":807,"props":12491,"children":12492},{},[12493,12495],{"type":603,"value":12494},"执行阶段",{"type":597,"tag":1321,"props":12496,"children":12497},{},[12498,12503],{"type":597,"tag":807,"props":12499,"children":12500},{},[12501],{"type":603,"value":12502},"释放project",{"type":597,"tag":807,"props":12504,"children":12505},{},[12506],{"type":603,"value":12507},"其他爆炸物的释放",{"type":597,"tag":807,"props":12509,"children":12510},{},[12511,12513],{"type":603,"value":12512},"完成阶段",{"type":597,"tag":1321,"props":12514,"children":12515},{},[12516],{"type":597,"tag":807,"props":12517,"children":12518},{},[12519],{"type":603,"value":12520},"后摇角色动画",{"type":597,"tag":1023,"props":12522,"children":12524},{"id":12523},"攻击动作",[12525],{"type":603,"value":12523},{"type":597,"tag":1321,"props":12527,"children":12528},{},[12529,12534,12539,12544],{"type":597,"tag":807,"props":12530,"children":12531},{},[12532],{"type":603,"value":12533},"投射物",{"type":597,"tag":807,"props":12535,"children":12536},{},[12537],{"type":603,"value":12538},"子弹",{"type":597,"tag":807,"props":12540,"children":12541},{},[12542],{"type":603,"value":12543},"弹幕攻击",{"type":597,"tag":807,"props":12545,"children":12546},{},[12547],{"type":603,"value":12548},"特效",{"type":597,"tag":1023,"props":12550,"children":12552},{"id":12551},"其他动作",[12553],{"type":603,"value":12551},{"type":597,"tag":1321,"props":12555,"children":12556},{},[12557,12562],{"type":597,"tag":807,"props":12558,"children":12559},{},[12560],{"type":603,"value":12561},"角色动作",{"type":597,"tag":807,"props":12563,"children":12564},{},[12565],{"type":603,"value":12566},"等待时间",{"type":603,"value":4052},{"type":597,"tag":1937,"props":12569,"children":12570},{},[12571,12591],{"type":597,"tag":1941,"props":12572,"children":12573},{},[12574],{"type":597,"tag":1945,"props":12575,"children":12576},{},[12577,12582,12586],{"type":597,"tag":1949,"props":12578,"children":12579},{},[12580],{"type":603,"value":12581},"技能",{"type":597,"tag":1949,"props":12583,"children":12584},{},[12585],{"type":603,"value":1958},{"type":597,"tag":1949,"props":12587,"children":12588},{},[12589],{"type":603,"value":12590},"动作",{"type":597,"tag":1963,"props":12592,"children":12593},{},[12594,12612,12630],{"type":597,"tag":1945,"props":12595,"children":12596},{},[12597,12602,12607],{"type":597,"tag":1970,"props":12598,"children":12599},{},[12600],{"type":603,"value":12601},"跳跃攻击",{"type":597,"tag":1970,"props":12603,"children":12604},{},[12605],{"type":603,"value":12606},"跳跃离开危险或跳入战斗之中",{"type":597,"tag":1970,"props":12608,"children":12609},{},[12610],{"type":603,"value":12611},"跳跃动画,并且使用抛物线落到指定点的一个特殊动作",{"type":597,"tag":1945,"props":12613,"children":12614},{},[12615,12620,12625],{"type":597,"tag":1970,"props":12616,"children":12617},{},[12618],{"type":603,"value":12619},"旋风",{"type":597,"tag":1970,"props":12621,"children":12622},{},[12623],{"type":603,"value":12624},"旋转的死亡之舞挥砍所有在旋转路径上的敌人",{"type":597,"tag":1970,"props":12626,"children":12627},{},[12628],{"type":603,"value":12629},"旋转动画并且移动的一个特殊动作",{"type":597,"tag":1945,"props":12631,"children":12632},{},[12633,12638,12643],{"type":597,"tag":1970,"props":12634,"children":12635},{},[12636],{"type":603,"value":12637},"双手挥击",{"type":597,"tag":1970,"props":12639,"children":12640},{},[12641],{"type":603,"value":12642},"当装备两把武器时可在一次攻击中击中两个敌人或者攻击一个敌人两次",{"type":597,"tag":1970,"props":12644,"children":12645},{},[12646],{"type":603,"value":12647},"检查附近敌人是否多个,是多个则击中两个,不然击中一个两次.特殊动作",{"type":597,"tag":598,"props":12649,"children":12650},{"id":12548},[12651],{"type":603,"value":12548},{"type":597,"tag":1321,"props":12653,"children":12654},{},[12655,12673,12678],{"type":597,"tag":807,"props":12656,"children":12657},{},[12658,12660],{"type":603,"value":12659},"释放特效(不需要碰撞触发的特效)",{"type":597,"tag":1321,"props":12661,"children":12662},{},[12663,12668],{"type":597,"tag":807,"props":12664,"children":12665},{},[12666],{"type":603,"value":12667},"全体加血",{"type":597,"tag":807,"props":12669,"children":12670},{},[12671],{"type":603,"value":12672},"召唤怪物",{"type":597,"tag":807,"props":12674,"children":12675},{},[12676],{"type":603,"value":12677},"击中特效",{"type":597,"tag":807,"props":12679,"children":12680},{},[12681],{"type":603,"value":12682},"击杀特效",{"type":597,"tag":1023,"props":12684,"children":12686},{"id":12685},"特效动作",[12687],{"type":603,"value":12685},{"type":597,"tag":1321,"props":12689,"children":12690},{},[12691,12714],{"type":597,"tag":807,"props":12692,"children":12693},{},[12694,12696],{"type":603,"value":12695},"伤害",{"type":597,"tag":1321,"props":12697,"children":12698},{},[12699,12704,12709],{"type":597,"tag":807,"props":12700,"children":12701},{},[12702],{"type":603,"value":12703},"伤害类型 毒,冰冻,火焰",{"type":597,"tag":807,"props":12705,"children":12706},{},[12707],{"type":603,"value":12708},"自己附加状态 附加属性(力量,智力),附加伤害,附加伤害百分比,附加暴击等",{"type":597,"tag":807,"props":12710,"children":12711},{},[12712],{"type":603,"value":12713},"敌人附加状态 扣除属性等",{"type":597,"tag":807,"props":12715,"children":12716},{},[12717,12719],{"type":603,"value":12718},"召唤",{"type":597,"tag":1321,"props":12720,"children":12721},{},[12722,12727],{"type":597,"tag":807,"props":12723,"children":12724},{},[12725],{"type":603,"value":12726},"召唤object",{"type":597,"tag":807,"props":12728,"children":12729},{},[12730],{"type":603,"value":12731},"召唤物的属性",{"type":597,"tag":1023,"props":12733,"children":12735},{"id":12734},"案例",[12736],{"type":603,"value":12734},{"type":603,"value":2680},{"type":597,"tag":1937,"props":12739,"children":12740},{},[12741,12765],{"type":597,"tag":1941,"props":12742,"children":12743},{},[12744],{"type":597,"tag":1945,"props":12745,"children":12746},{},[12747,12751,12755,12760],{"type":597,"tag":1949,"props":12748,"children":12749},{},[12750],{"type":603,"value":12581},{"type":597,"tag":1949,"props":12752,"children":12753},{},[12754],{"type":603,"value":1958},{"type":597,"tag":1949,"props":12756,"children":12757},{},[12758],{"type":603,"value":12759},"特效1",{"type":597,"tag":1949,"props":12761,"children":12762},{},[12763],{"type":603,"value":12764},"特效2",{"type":597,"tag":1963,"props":12766,"children":12767},{},[12768,12791,12814,12837],{"type":597,"tag":1945,"props":12769,"children":12770},{},[12771,12776,12781,12786],{"type":597,"tag":1970,"props":12772,"children":12773},{},[12774],{"type":603,"value":12775},"重击",{"type":597,"tag":1970,"props":12777,"children":12778},{},[12779],{"type":603,"value":12780},"强力打击增加造成的伤害并震退敌人",{"type":597,"tag":1970,"props":12782,"children":12783},{},[12784],{"type":603,"value":12785},"伤害特效(附加伤害,附加伤害百分比)",{"type":597,"tag":1970,"props":12787,"children":12788},{},[12789],{"type":603,"value":12790},"击退特效",{"type":597,"tag":1945,"props":12792,"children":12793},{},[12794,12799,12804,12809],{"type":597,"tag":1970,"props":12795,"children":12796},{},[12797],{"type":603,"value":12798},"击晕",{"type":597,"tag":1970,"props":12800,"children":12801},{},[12802],{"type":603,"value":12803},"成功的攻击将使敌人晕眩并提高你的命中率",{"type":597,"tag":1970,"props":12805,"children":12806},{},[12807],{"type":603,"value":12808},"普通伤害",{"type":597,"tag":1970,"props":12810,"children":12811},{},[12812],{"type":603,"value":12813},"击晕特效,有一定的时间",{"type":597,"tag":1945,"props":12815,"children":12816},{},[12817,12822,12827,12832],{"type":597,"tag":1970,"props":12818,"children":12819},{},[12820],{"type":603,"value":12821},"狂暴",{"type":597,"tag":1970,"props":12823,"children":12824},{},[12825],{"type":603,"value":12826},"威力强大但不计后果的攻击可以增加伤害和命中率但忽视防御",{"type":597,"tag":1970,"props":12828,"children":12829},{},[12830],{"type":603,"value":12831},"伤害特效(提高属性)",{"type":597,"tag":1970,"props":12833,"children":12834},{},[12835],{"type":603,"value":12836},"降低自身防御为0有一定的时间",{"type":597,"tag":1945,"props":12838,"children":12839},{},[12840,12845,12850,12855],{"type":597,"tag":1970,"props":12841,"children":12842},{},[12843],{"type":603,"value":12844},"大叫",{"type":597,"tag":1970,"props":12846,"children":12847},{},[12848],{"type":603,"value":12849},"警告队友迫近的危险并提升他们的防御力",{"type":597,"tag":1970,"props":12851,"children":12852},{},[12853],{"type":603,"value":12854},"增加防御 有一定的时间",{"type":597,"tag":1970,"props":12856,"children":12857},{},[],{"type":597,"tag":1023,"props":12859,"children":12861},{"id":12860},"技能词条skillterm",[12862],{"type":603,"value":12863},"技能词条(skillterm)",{"type":597,"tag":606,"props":12865,"children":12866},{},[12867],{"type":603,"value":12868},"技能根据等级分为入门,小成,大成,巅峰,圆满,每个等级可以解锁额外的词条",{"type":597,"tag":598,"props":12870,"children":12872},{"id":12871},"tag",[12873],{"type":603,"value":12874},"TAG",{"type":597,"tag":606,"props":12876,"children":12877},{},[12878],{"type":603,"value":12879},"每个特效可以授予角色tag",{"type":597,"tag":598,"props":12881,"children":12883},{"id":12882},"武器技能",[12884],{"type":603,"value":12882},{"type":597,"tag":606,"props":12886,"children":12887},{},[12888],{"type":603,"value":12889},"为了解决攻击使用什么技能,且装备的打造问题..武器可有技能\n武器决定了有哪些技能,比如火系弓箭技能..\n武器没有等级概念???",{"type":597,"tag":598,"props":12891,"children":12893},{"id":12892},"如果不同的职业技能都能升级到20级那就没有职业差异化了儒家也可用20级道家的技能这样是不对的",[12894],{"type":603,"value":12895},"如果不同的职业技能都能升级到20级.那就没有职业差异化了,儒家,也可用20级道家的技能.这样是不对的",{"type":597,"tag":803,"props":12897,"children":12898},{},[12899,12904],{"type":597,"tag":807,"props":12900,"children":12901},{},[12902],{"type":603,"value":12903},"方法一,等级提升添加境界限制..",{"type":597,"tag":807,"props":12905,"children":12906},{},[12907],{"type":603,"value":12908},"方法二, 技能书分为初级,中级,上级,顶级..然后境界限制学习的条件..书的等级限制能炼到的等级  ...略麻烦",{"type":597,"tag":606,"props":12910,"children":12911},{},[12912],{"type":603,"value":12913},"升级可以解锁",{"type":597,"tag":1321,"props":12915,"children":12916},{},[12917,12922],{"type":597,"tag":807,"props":12918,"children":12919},{},[12920],{"type":603,"value":12921},"一条额外属性...",{"type":597,"tag":807,"props":12923,"children":12924},{},[12925],{"type":603,"value":12926},"一个招式",{"type":597,"tag":606,"props":12928,"children":12929},{},[12930],{"type":603,"value":12931},"洗练可以修改额外属性.以及招式",{"type":597,"tag":606,"props":12933,"children":12934},{},[12935],{"type":603,"value":12936},"将qe的提示改成左右键,并去除????",{"type":597,"tag":606,"props":12938,"children":12939},{},[12940],{"type":597,"tag":719,"props":12941,"children":12943},{"alt":591,"src":12942},"/images/2021-12-21-gyj-skill/2021-12-23-19-03-23%E6%89%93%E5%88%86%E6%89%93%E6%9B%B4%E4%BA%BA%E5%93%81%E7%BA%A7.jpg",[],{"title":591,"searchDepth":787,"depth":787,"links":12945},[12946,12947,12951,12956,12957,12958],{"id":12373,"depth":787,"text":12373},{"id":12448,"depth":787,"text":12448,"children":12948},[12949,12950],{"id":12523,"depth":1530,"text":12523},{"id":12551,"depth":1530,"text":12551},{"id":12548,"depth":787,"text":12548,"children":12952},[12953,12954,12955],{"id":12685,"depth":1530,"text":12685},{"id":12734,"depth":1530,"text":12734},{"id":12860,"depth":1530,"text":12863},{"id":12871,"depth":787,"text":12874},{"id":12882,"depth":787,"text":12882},{"id":12892,"depth":787,"text":12895},"content:game:2021-12-21-gyj-skill.md","game/2021-12-21-gyj-skill.md","2021-12-21",{"_path":171,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":170,"description":12963,"body":12964,"_type":791,"_id":13368,"_source":793,"_file":13369,"_extension":795,"date":13370},"github仓库 : https://github.com/sjai013/unity-gameplay-ability-system",{"type":594,"children":12965,"toc":13355},[12966,12977,12982,13005,13009,13014,13027,13032,13053,13058,13067,13072,13081,13094,13126,13135,13143,13152,13156,13161,13179,13184,13193,13198,13203,13221,13230,13235,13248,13257,13262,13267,13272,13302,13311,13317,13346],{"type":597,"tag":606,"props":12967,"children":12968},{},[12969,12971],{"type":603,"value":12970},"github仓库 : ",{"type":597,"tag":886,"props":12972,"children":12975},{"href":12973,"rel":12974},"https://github.com/sjai013/unity-gameplay-ability-system",[890],[12976],{"type":603,"value":12973},{"type":597,"tag":606,"props":12978,"children":12979},{},[12980],{"type":603,"value":12981},"这是一个开源系统主要包含了以下内容",{"type":597,"tag":1321,"props":12983,"children":12984},{},[12985,12990,12995,13000],{"type":597,"tag":807,"props":12986,"children":12987},{},[12988],{"type":603,"value":12989},"Attribute System  属性系统.",{"type":597,"tag":807,"props":12991,"children":12992},{},[12993],{"type":603,"value":12994},"Gameplay Tags  tag用来判断技能是否能够释放,以及检查effect是否能够添加",{"type":597,"tag":807,"props":12996,"children":12997},{},[12998],{"type":603,"value":12999},"Gameplay Effects  技能特效",{"type":597,"tag":807,"props":13001,"children":13002},{},[13003],{"type":603,"value":13004},"Ability 技能",{"type":597,"tag":598,"props":13006,"children":13007},{"id":12548},[13008],{"type":603,"value":12548},{"type":597,"tag":606,"props":13010,"children":13011},{},[13012],{"type":603,"value":13013},"GameplayEffectSpec 是特效的runtime",{"type":597,"tag":1321,"props":13015,"children":13016},{},[13017,13022],{"type":597,"tag":807,"props":13018,"children":13019},{},[13020],{"type":603,"value":13021},"包含了特效的双方和target",{"type":597,"tag":807,"props":13023,"children":13024},{},[13025],{"type":603,"value":13026},"包含了其他数据等级,持续时间等",{"type":597,"tag":606,"props":13028,"children":13029},{},[13030],{"type":603,"value":13031},"创建方法",{"type":597,"tag":1321,"props":13033,"children":13034},{},[13035,13044],{"type":597,"tag":807,"props":13036,"children":13037},{},[13038],{"type":597,"tag":629,"props":13039,"children":13041},{"className":13040},[],[13042],{"type":603,"value":13043},"AbilitySystemCharacter.MakeOutgoingSpec",{"type":597,"tag":807,"props":13045,"children":13046},{},[13047],{"type":597,"tag":629,"props":13048,"children":13050},{"className":13049},[],[13051],{"type":603,"value":13052},"GameplayEffectSpec.CreateNew",{"type":597,"tag":1023,"props":13054,"children":13056},{"id":13055},"添加特效到角色",[13057],{"type":603,"value":13055},{"type":597,"tag":621,"props":13059,"children":13062},{"className":13060,"code":13061,"language":8105,"meta":591},[8107],"public bool ApplyGameplayEffectSpecToSelf(GameplayEffectSpec geSpec)\n{\n        if (geSpec == null) return true;\n        //检查特效是否能被应用到角色身上,比如如果是无敌状态则不能添加\n        bool tagRequirementsOK = CheckTagRequirementsMet(geSpec);\n\n        if (tagRequirementsOK == false) return false;\n\n\n        switch (geSpec.GameplayEffect.gameplayEffect.DurationPolicy)\n        {\n            case EDurationPolicy.HasDuration:\n            case EDurationPolicy.Infinite:\n                    //周期性的特效\n                    ApplyDurationalGameplayEffect(geSpec);\n                    break;\n            case EDurationPolicy.Instant:\n                    //可以立即应用的特效\n                    ApplyInstantGameplayEffect(geSpec);\n                    return true;\n        }\n\n        return true;\n}\n",[13063],{"type":597,"tag":629,"props":13064,"children":13065},{"__ignoreMap":591},[13066],{"type":603,"value":13061},{"type":597,"tag":606,"props":13068,"children":13069},{},[13070],{"type":603,"value":13071},"检查特效tag是否能够添加到角色身上",{"type":597,"tag":621,"props":13073,"children":13076},{"className":13074,"code":13075,"language":8105,"meta":591},[8107],"//建立当前角色的所有特效的GrantedTags\nvar appliedTags = new List\u003CGameplayTagScriptableObject>();\nfor (var i = 0; i \u003C AppliedGameplayEffects.Count; i++)\n{\n    appliedTags.AddRange(AppliedGameplayEffects[i].spec.GameplayEffect.gameplayEffectTags.GrantedTags);\n}\n\n//检查特效上的ApplicationTagRequirements的RequireTags字段\nfor (var i = 0; i \u003C geSpec.GameplayEffect.gameplayEffectTags.ApplicationTagRequirements.RequireTags.Length; i++)\n{\n    if (!appliedTags.Contains(geSpec.GameplayEffect.gameplayEffectTags.ApplicationTagRequirements.RequireTags[i]))\n    {\n            return false;\n    }\n}\n\n//检查特效上的ApplicationTagRequirements的IgnoreTags字段\nfor (var i = 0; i \u003C geSpec.GameplayEffect.gameplayEffectTags.ApplicationTagRequirements.IgnoreTags.Length; i++)\n{\n    if (appliedTags.Contains(geSpec.GameplayEffect.gameplayEffectTags.ApplicationTagRequirements.IgnoreTags[i]))\n    {\n            return false;\n    }\n}\n\nreturn true;\n",[13077],{"type":597,"tag":629,"props":13078,"children":13079},{"__ignoreMap":591},[13080],{"type":603,"value":13075},{"type":597,"tag":1023,"props":13082,"children":13084},{"id":13083},"特效gameplayeffectscriptableobject本身",[13085,13086,13092],{"type":603,"value":12548},{"type":597,"tag":629,"props":13087,"children":13089},{"className":13088},[],[13090],{"type":603,"value":13091},"GameplayEffectScriptableObject",{"type":603,"value":13093},"本身",{"type":597,"tag":1321,"props":13095,"children":13096},{},[13097],{"type":597,"tag":807,"props":13098,"children":13099},{},[13100,13102],{"type":603,"value":13101},"GameplayEffectDefinitionContainer  定义了特效的使用效果与条件",{"type":597,"tag":1321,"props":13103,"children":13104},{},[13105,13116,13121],{"type":597,"tag":807,"props":13106,"children":13107},{},[13108,13110],{"type":603,"value":13109},"DurationPolicy和DurationModifier和DurationMultiplier构成了该特效的持续时间,以及是否立即使用",{"type":597,"tag":629,"props":13111,"children":13113},{"className":13112},[],[13114],{"type":603,"value":13115},"DurationModifier.CalculateMagnitude(this).GetValueOrDefault() *.DurationMultiplier",{"type":597,"tag":807,"props":13117,"children":13118},{},[13119],{"type":603,"value":13120},"Modifiers 该特效对属性的修改",{"type":597,"tag":807,"props":13122,"children":13123},{},[13124],{"type":603,"value":13125},"ConditionalGameplayEffects  暂时没看到使用的地方??",{"type":597,"tag":621,"props":13127,"children":13130},{"className":13128,"code":13129,"language":8105,"meta":591},[8107],"   public struct GameplayEffectDefinitionContainer\n    {\n        /// \u003Csummary>\n        /// 持续方案,,是立即,还是持续\n        /// \u003C/summary>\n        public EDurationPolicy DurationPolicy;\n    //修改策略\n        public ModifierMagnitudeScriptableObject DurationModifier;\n\n        /// \u003Csummary>\n        /// 该特效的持续时间，如果特效有一个有限的持续时间的话\n        /// \u003C/summary>\n        public float DurationMultiplier;\n\n\n        /// \u003Csummary>\n        /// 该特效对属性的修改\n        /// \u003C/summary>\n        public GameplayEffectModifier[] Modifiers;\n\n        /// \u003Csummary>\n        /// Other GE to apply to the source ability system, based on presence of tags on source\n        /// \u003C/summary>\n        public ConditionalGameplayEffectContainer[] ConditionalGameplayEffects;\n    }\n",[13131],{"type":597,"tag":629,"props":13132,"children":13133},{"__ignoreMap":591},[13134],{"type":603,"value":13129},{"type":597,"tag":1321,"props":13136,"children":13137},{},[13138],{"type":597,"tag":807,"props":13139,"children":13140},{},[13141],{"type":603,"value":13142},"GameplayEffectTags   定义处理特效之间的关系",{"type":597,"tag":621,"props":13144,"children":13147},{"className":13145,"code":13146,"language":8105,"meta":591},[8107],"   public struct GameplayEffectTags\n   {\n        /// \u003Csummary>\n        /// 授予角色拥有的特殊tag,比如:无敌,隐身,诅咒\n        /// \n        /// 比如a技能,给敌人添加了一个诅咒(tagA)\n        /// 第二个技能依据是否有这个诅咒这个前置特效,有的话才能应用技能特效,则设置ApplicationTagRequirements.RequireTags中添加taga\n        /// \n        /// \n        /// 比如配置怪物免疫火系魔法\n        /// 则添加一个免疫火系魔法的tagb\n        /// 火系技能则在ApplicationTagRequirements中的IgnoreTags添加一个tagb\n        /// \n        /// \n        /// \u003C/summary>\n       [SerializeField] public GameplayTagScriptableObject[] GrantedTags;\n\n\n        /// \u003Csummary>\n        /// effect添加到人身上前,需要检查的条件\n        /// \u003C/summary>\n       [SerializeField] public GameplayTagRequireIgnoreContainer ApplicationTagRequirements;\n\n   }\n",[13148],{"type":597,"tag":629,"props":13149,"children":13150},{"__ignoreMap":591},[13151],{"type":603,"value":13146},{"type":597,"tag":598,"props":13153,"children":13154},{"id":12581},[13155],{"type":603,"value":12581},{"type":597,"tag":606,"props":13157,"children":13158},{},[13159],{"type":603,"value":13160},"AbstractAbilitySpec是技能的runtime,包含了",{"type":597,"tag":1321,"props":13162,"children":13163},{},[13164,13169,13174],{"type":597,"tag":807,"props":13165,"children":13166},{},[13167],{"type":603,"value":13168},"ability的scriptobject",{"type":597,"tag":807,"props":13170,"children":13171},{},[13172],{"type":603,"value":13173},"ability的其他数据例如等级,词条等",{"type":597,"tag":807,"props":13175,"children":13176},{},[13177],{"type":603,"value":13178},"角色字段",{"type":597,"tag":1023,"props":13180,"children":13182},{"id":13181},"技能释放流程",[13183],{"type":603,"value":13181},{"type":597,"tag":621,"props":13185,"children":13188},{"className":13186,"code":13187,"language":8105,"meta":591},[8107],"public virtual IEnumerator TryActivateAbility()\n{\n   //检查该能力是否能被激活\n   //1. 检查gameplaytags\n   //2. 检查cost\n   //3. 检查cooldown\n   if (!CanActivateAbility()) yield break;\n\n   isActive = true;\n   //激活能力前处理\n   yield return PreActivate();\n   //激活这个能力\n   yield return ActivateAbility();\n   //能力结束\n   EndAbility();\n\n}\n",[13189],{"type":597,"tag":629,"props":13190,"children":13191},{"__ignoreMap":591},[13192],{"type":603,"value":13187},{"type":597,"tag":606,"props":13194,"children":13195},{},[13196],{"type":603,"value":13197},"ability的cost和cooldown都使用了GameplayEffectScriptableObject,这也是这个系统比较蛋疼的地方,就是每个ability都需要建立cost和cooldown的object.",{"type":597,"tag":1023,"props":13199,"children":13201},{"id":13200},"检查cost",[13202],{"type":603,"value":13200},{"type":597,"tag":1321,"props":13204,"children":13205},{},[13206,13211,13216],{"type":597,"tag":807,"props":13207,"children":13208},{},[13209],{"type":603,"value":13210},"检查cost特效身上的Modifiers字段,并计算最终值",{"type":597,"tag":807,"props":13212,"children":13213},{},[13214],{"type":603,"value":13215},"然后和角色属性进行对比",{"type":597,"tag":807,"props":13217,"children":13218},{},[13219],{"type":603,"value":13220},"Modifiers可以有多条,且有计算公式",{"type":597,"tag":621,"props":13222,"children":13225},{"className":13223,"code":13224,"language":8105,"meta":591},[8107],"public virtual bool CheckCost()\n{\n        if (this.Ability.Cost == null) return true;\n        var geSpec = this.Owner.MakeOutgoingSpec(this.Ability.Cost, this.Level);\n        // If this isn't an instant cost, then assume it passes cooldown check\n        if (geSpec.GameplayEffect.gameplayEffect.DurationPolicy != EDurationPolicy.Instant) return true;\n    \n    //Modifiers可以包含多条,可以是属性会根据特效本身的等级做改变\n        for (var i = 0; i \u003C geSpec.GameplayEffect.gameplayEffect.Modifiers.Length; i++)\n        {\n            var modifier = geSpec.GameplayEffect.gameplayEffect.Modifiers[i];\n    \n            // Only worry about additive.  Anything else passes.\n            if (modifier.ModifierOperator != EAttributeModifier.Add) continue;\n            var costValue = (modifier.ModifierMagnitude.CalculateMagnitude(geSpec) * modifier.Multiplier).GetValueOrDefault();\n            \n        //获取角色身上该属性的值\n            this.Owner.AttributeSystem.GetAttributeValue(modifier.Attribute, out var attributeValue);\n            \n            // 如果属性值+消耗的值小于0则代表技能失败\n            if (attributeValue.CurrentValue + costValue \u003C 0) return false;\n\n        }\n        return true;\n}\n",[13226],{"type":597,"tag":629,"props":13227,"children":13228},{"__ignoreMap":591},[13229],{"type":603,"value":13224},{"type":597,"tag":1023,"props":13231,"children":13233},{"id":13232},"检查cooldow",[13234],{"type":603,"value":13232},{"type":597,"tag":1321,"props":13236,"children":13237},{},[13238,13243],{"type":597,"tag":807,"props":13239,"children":13240},{},[13241],{"type":603,"value":13242},"冷却时间特效最终会被添加到人物的身上",{"type":597,"tag":807,"props":13244,"children":13245},{},[13246],{"type":603,"value":13247},"该函数,主要是比对并找到人身上同tag的特效.然后检查该特效的TotalDuration",{"type":597,"tag":621,"props":13249,"children":13252},{"className":13250,"code":13251,"language":8105,"meta":591},[8107],"public virtual AbilityCooldownTime CheckCooldown()\n{\n        float maxDuration = 0;\n        if (this.Ability.Cooldown == null) return new AbilityCooldownTime();\n        var cooldownTags = this.Ability.Cooldown.gameplayEffectTags.GrantedTags;\n\n        float longestCooldown = 0f;\n\n        // Check if the cooldown tag is granted to the player, and if so, capture the remaining duration for that tag\n        for (var i = 0; i \u003C this.Owner.AppliedGameplayEffects.Count; i++)\n        {\n            var grantedTags = this.Owner.AppliedGameplayEffects[i].spec.GameplayEffect.gameplayEffectTags.GrantedTags;\n            for (var iTag = 0; iTag \u003C grantedTags.Length; iTag++)\n            {\n                    for (var iCooldownTag = 0; iCooldownTag \u003C cooldownTags.Length; iCooldownTag++)\n                    {\n                        if (grantedTags[iTag] == cooldownTags[iCooldownTag])\n                        {\n                                // 如果有一个策略是无限的..则返回一个float.maxvalue\n                                if (this.Owner.AppliedGameplayEffects[i].spec.GameplayEffect.gameplayEffect.DurationPolicy == EDurationPolicy.Infinite) return new AbilityCooldownTime()\n                                {\n                                    TimeRemaining = float.MaxValue,\n                                    TotalDuration = 0\n                                };\n        \n                                var durationRemaining = this.Owner.AppliedGameplayEffects[i].spec.DurationRemaining;\n        \n                                if (durationRemaining > longestCooldown)\n                                {\n                                    longestCooldown = durationRemaining;\n                                    maxDuration = this.Owner.AppliedGameplayEffects[i].spec.TotalDuration;\n                                }\n                        }\n    \n                    }\n            }\n        }\n\n        return new AbilityCooldownTime()\n        {\n            TimeRemaining = longestCooldown,\n            TotalDuration = maxDuration\n        };\n}\n",[13253],{"type":597,"tag":629,"props":13254,"children":13255},{"__ignoreMap":591},[13256],{"type":603,"value":13251},{"type":597,"tag":1023,"props":13258,"children":13260},{"id":13259},"检查abilitytags",[13261],{"type":603,"value":13259},{"type":597,"tag":3995,"props":13263,"children":13265},{"id":13264},"abilitytags",[13266],{"type":603,"value":13264},{"type":597,"tag":606,"props":13268,"children":13269},{},[13270],{"type":603,"value":13271},"定义了一些tag用来释放前进行检查是否能释放该技能",{"type":597,"tag":1321,"props":13273,"children":13274},{},[13275,13286,13297],{"type":597,"tag":807,"props":13276,"children":13277},{},[13278,13280],{"type":603,"value":13279},"例如检查自身是否能够匹配",{"type":597,"tag":629,"props":13281,"children":13283},{"className":13282},[],[13284],{"type":603,"value":13285},"OwnerTags",{"type":597,"tag":807,"props":13287,"children":13288},{},[13289,13291],{"type":603,"value":13290},"如果是指定目标则检查目标身上是否能够匹配",{"type":597,"tag":629,"props":13292,"children":13294},{"className":13293},[],[13295],{"type":603,"value":13296},"TargetTags",{"type":597,"tag":807,"props":13298,"children":13299},{},[13300],{"type":603,"value":13301},"SourceTags?暂时没有好的理解",{"type":597,"tag":621,"props":13303,"children":13306},{"className":13304,"code":13305,"language":8105,"meta":591},[8107],"[Serializable]\npublic struct AbilityTags\n{\n    /// \u003Csummary>\n    /// This tag describes the Gameplay Ability\n    /// \u003C/summary>\n    [SerializeField] public GameplayTagScriptableObject AssetTag;\n\n    /// \u003Csummary>\n    /// This ability can only be activated if the owner character has all of the Required tags\n    /// and none of the Ignore tags.  Usually, the owner is the source as well.\n    /// \u003C/summary>\n    [SerializeField] public GameplayTagRequireIgnoreContainer OwnerTags;\n\n    /// \u003Csummary>\n    /// This ability can only be activated if the source character has all of the Required tags\n    /// and none of the Ignore tags\n    /// \u003C/summary>\n    [SerializeField] public GameplayTagRequireIgnoreContainer SourceTags;\n\n    /// \u003Csummary>\n    /// This ability can only be activated if the target character has all of the Required tags\n    /// and none of the Ignore tags\n    /// \u003C/summary>\n    [SerializeField] public GameplayTagRequireIgnoreContainer TargetTags;\n\n}\n",[13307],{"type":597,"tag":629,"props":13308,"children":13309},{"__ignoreMap":591},[13310],{"type":603,"value":13305},{"type":597,"tag":3995,"props":13312,"children":13314},{"id":13313},"checkgameplaytags被定义在每个ability下然后对其重写",[13315],{"type":603,"value":13316},"CheckGameplayTags()被定义在每个ability下然后对其重写",{"type":597,"tag":1321,"props":13318,"children":13319},{},[13320,13333],{"type":597,"tag":807,"props":13321,"children":13322},{},[13323,13325,13331],{"type":603,"value":13324},"AscHasAllTags  用来检查",{"type":597,"tag":629,"props":13326,"children":13328},{"className":13327},[],[13329],{"type":603,"value":13330},"RequireTags",{"type":603,"value":13332}," ,检查人身上特效的tags是否包含这些,如果没有包含则检查失败",{"type":597,"tag":807,"props":13334,"children":13335},{},[13336,13338,13344],{"type":603,"value":13337},"AscHasNoneTags 用来检查",{"type":597,"tag":629,"props":13339,"children":13341},{"className":13340},[],[13342],{"type":603,"value":13343},"IgnoreTags",{"type":603,"value":13345}," ,检查人身上特效的tags是否包含这些,如果包含则检查失败",{"type":597,"tag":621,"props":13347,"children":13350},{"className":13348,"code":13349,"language":8105,"meta":591},[8107],"public override bool CheckGameplayTags()\n{\n        return AscHasAllTags(Owner, this.Ability.AbilityTags.OwnerTags.RequireTags)\n                && AscHasNoneTags(Owner, this.Ability.AbilityTags.OwnerTags.IgnoreTags)\n                && AscHasAllTags(Owner, this.Ability.AbilityTags.SourceTags.RequireTags)\n                && AscHasNoneTags(Owner, this.Ability.AbilityTags.SourceTags.IgnoreTags)\n                && AscHasAllTags(Target, this.Ability.AbilityTags.TargetTags.RequireTags)\n                && AscHasNoneTags(Target, this.Ability.AbilityTags.TargetTags.IgnoreTags);\n}\n\nprotected virtual bool AscHasAllTags(AbilitySystemCharacter asc, GameplayTagScriptableObject[] tags)\n{\n    // If the input ASC is not valid, assume check passed\n    if (!asc) return true;\n\n    for (var iAbilityTag = 0; iAbilityTag \u003C tags.Length; iAbilityTag++)\n    {\n        var abilityTag = tags[iAbilityTag];\n\n        bool requirementPassed = false;\n        for (var iAsc = 0; iAsc \u003C asc.AppliedGameplayEffects.Count; iAsc++)\n        {\n            GameplayTagScriptableObject[] ascGrantedTags = asc.AppliedGameplayEffects[iAsc].spec.GameplayEffect.gameplayEffectTags.GrantedTags;\n            for (var iAscTag = 0; iAscTag \u003C ascGrantedTags.Length; iAscTag++)\n            {\n                if (ascGrantedTags[iAscTag] == abilityTag)\n                {\n                    requirementPassed = true;\n                }\n            }\n        }\n        // If any ability tag wasn't found, requirements failed\n        if (!requirementPassed) return false;\n    }\n    return true;\n}\n\nprotected virtual bool AscHasNoneTags(AbilitySystemCharacter asc, GameplayTagScriptableObject[] tags)\n{\n    // If the input ASC is not valid, assume check passed\n    if (!asc) return true;\n\n    for (var iAbilityTag = 0; iAbilityTag \u003C tags.Length; iAbilityTag++)\n    {\n        var abilityTag = tags[iAbilityTag];\n\n        bool requirementPassed = true;\n        for (var iAsc = 0; iAsc \u003C asc.AppliedGameplayEffects.Count; iAsc++)\n        {\n            GameplayTagScriptableObject[] ascGrantedTags = asc.AppliedGameplayEffects[iAsc].spec.GameplayEffect.gameplayEffectTags.GrantedTags;\n            for (var iAscTag = 0; iAscTag \u003C ascGrantedTags.Length; iAscTag++)\n            {\n                if (ascGrantedTags[iAscTag] == abilityTag)\n                {\n                    requirementPassed = false;\n                }\n            }\n        }\n        // If any ability tag wasn't found, requirements failed\n        if (!requirementPassed) return false;\n    }\n    return true;\n}\n",[13351],{"type":597,"tag":629,"props":13352,"children":13353},{"__ignoreMap":591},[13354],{"type":603,"value":13349},{"title":591,"searchDepth":787,"depth":787,"links":13356},[13357,13362],{"id":12548,"depth":787,"text":12548,"children":13358},[13359,13360],{"id":13055,"depth":1530,"text":13055},{"id":13083,"depth":1530,"text":13361},"特效GameplayEffectScriptableObject本身",{"id":12581,"depth":787,"text":12581,"children":13363},[13364,13365,13366,13367],{"id":13181,"depth":1530,"text":13181},{"id":13200,"depth":1530,"text":13200},{"id":13232,"depth":1530,"text":13232},{"id":13259,"depth":1530,"text":13259},"content:game:2021-12-14-untiy-gameplay-ablility-sourcecode.md","game/2021-12-14-untiy-gameplay-ablility-sourcecode.md","2021-12-14",{"_path":348,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":347,"description":13372,"body":13373,"_type":791,"_id":13457,"_source":793,"_file":13458,"_extension":795,"date":13459},"复刻仓库On GitHub.com, navigate to the octocat/Spoon-Knife repository.在页面的右上角，单击 Fork（复刻）。$ git clone https://github.com/YOUR-USERNAME/Spoon-Knife\n> Cloning into `Spoon-Knife`...\n> remote: Counting objects: 10, done.\n> remote: Compressing objects: 100% (8/8), done.\n> remove: Total 10 (delta 1), reused 1",{"type":594,"children":13374,"toc":13453},[13375,13380,13408,13415,13423,13428,13436,13441],{"type":597,"tag":598,"props":13376,"children":13378},{"id":13377},"复刻仓库",[13379],{"type":603,"value":13377},{"type":597,"tag":1321,"props":13381,"children":13382},{},[13383,13397],{"type":597,"tag":807,"props":13384,"children":13385},{},[13386,13388,13395],{"type":603,"value":13387},"On GitHub.com, navigate to the ",{"type":597,"tag":886,"props":13389,"children":13392},{"href":13390,"rel":13391},"https://github.com/octocat/Spoon-Knife",[890],[13393],{"type":603,"value":13394},"octocat/Spoon-Knife",{"type":603,"value":13396}," repository.",{"type":597,"tag":807,"props":13398,"children":13399},{},[13400,13402,13407],{"type":603,"value":13401},"在页面的右上角，单击 ",{"type":597,"tag":1080,"props":13403,"children":13404},{},[13405],{"type":603,"value":13406},"Fork（复刻）",{"type":603,"value":758},{"type":597,"tag":606,"props":13409,"children":13410},{},[13411],{"type":597,"tag":719,"props":13412,"children":13414},{"alt":591,"src":13413},"/images/2021-12-12-github-sync/2021-11-30-04-25-59.jpg",[],{"type":597,"tag":621,"props":13416,"children":13418},{"code":13417},"$ git clone https://github.com/YOUR-USERNAME/Spoon-Knife\n> Cloning into `Spoon-Knife`...\n> remote: Counting objects: 10, done.\n> remote: Compressing objects: 100% (8/8), done.\n> remove: Total 10 (delta 1), reused 10 (delta 1)\n> Unpacking objects: 100% (10/10), done.\n",[13419],{"type":597,"tag":629,"props":13420,"children":13421},{"__ignoreMap":591},[13422],{"type":603,"value":13417},{"type":597,"tag":598,"props":13424,"children":13426},{"id":13425},"增加复刻的仓库作为上游远程仓库",[13427],{"type":603,"value":13425},{"type":597,"tag":621,"props":13429,"children":13431},{"code":13430},"$ git remote add upstream https://github.com/octocat/Spoon-Knife.git\n\n\n$ git remote -v\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)\n> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)\n",[13432],{"type":597,"tag":629,"props":13433,"children":13434},{"__ignoreMap":591},[13435],{"type":603,"value":13430},{"type":597,"tag":606,"props":13437,"children":13438},{},[13439],{"type":603,"value":13440},"后续就可以进行合并操作了",{"type":597,"tag":1321,"props":13442,"children":13443},{},[13444],{"type":597,"tag":807,"props":13445,"children":13446},{},[13447],{"type":597,"tag":886,"props":13448,"children":13451},{"href":13449,"rel":13450},"https://docs.github.com/cn/get-started/quickstart/fork-a-repo",[890],[13452],{"type":603,"value":13449},{"title":591,"searchDepth":787,"depth":787,"links":13454},[13455,13456],{"id":13377,"depth":787,"text":13377},{"id":13425,"depth":787,"text":13425},"content:tool:2021-12-12-github-sync.md","tool/2021-12-12-github-sync.md","2021-12-12",{"_path":345,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":344,"description":13461,"body":13462,"_type":791,"_id":13552,"_source":793,"_file":13553,"_extension":795,"date":13554},"构建设置构建命令# input your command here\ncnpm install -g hexo-cli\ncnpm install\nhexo clean\nhexo generate\n设置构建物\n部署设置下载路径设置部署脚本# 部署脚本会在部署组的每台机器上执行。\n# 一个典型脚本逻辑如下：先将制品包（在下载路径中配置的下载路径）解压缩到指定目录中，再执行启动脚本（通常在代码中维护，如示例中deploy.sh）。\n# 关于这个例子的详细解释见 https://help.aliyun.com/document_detail/153848.html \nmkdir /usr/local/s",{"type":594,"children":13463,"toc":13547},[13464,13469,13474,13482,13491,13496,13501,13508,13513,13521,13526,13539],{"type":597,"tag":598,"props":13465,"children":13467},{"id":13466},"构建",[13468],{"type":603,"value":13466},{"type":597,"tag":606,"props":13470,"children":13471},{},[13472],{"type":603,"value":13473},"设置构建命令",{"type":597,"tag":621,"props":13475,"children":13477},{"code":13476},"# input your command here\ncnpm install -g hexo-cli\ncnpm install\nhexo clean\nhexo generate\n",[13478],{"type":597,"tag":629,"props":13479,"children":13480},{"__ignoreMap":591},[13481],{"type":603,"value":13476},{"type":597,"tag":606,"props":13483,"children":13484},{},[13485,13487],{"type":603,"value":13486},"设置构建物\n",{"type":597,"tag":719,"props":13488,"children":13490},{"alt":591,"src":13489},"/images/2021-12-11-yunxiao-liushuixian-hexo/2021-12-01-22-00-34uxj0h.png",[],{"type":597,"tag":598,"props":13492,"children":13494},{"id":13493},"部署",[13495],{"type":603,"value":13493},{"type":597,"tag":606,"props":13497,"children":13498},{},[13499],{"type":603,"value":13500},"设置下载路径",{"type":597,"tag":606,"props":13502,"children":13503},{},[13504],{"type":597,"tag":719,"props":13505,"children":13507},{"alt":591,"src":13506},"/images/2021-12-11-yunxiao-liushuixian-hexo/2021-12-01-22-01-45guws3.png",[],{"type":597,"tag":606,"props":13509,"children":13510},{},[13511],{"type":603,"value":13512},"设置部署脚本",{"type":597,"tag":621,"props":13514,"children":13516},{"code":13515},"# 部署脚本会在部署组的每台机器上执行。\n# 一个典型脚本逻辑如下：先将制品包（在下载路径中配置的下载路径）解压缩到指定目录中，再执行启动脚本（通常在代码中维护，如示例中deploy.sh）。\n# 关于这个例子的详细解释见 https://help.aliyun.com/document_detail/153848.html \nmkdir /usr/local/src/igiven\ntar -zxvf /usr/local/src/igiven.tgz -C /usr/local/src/igiven/\n\\cp -rf /usr/local/src/igiven/* /usr/share/nginx/html\nrm -rf /usr/local/src/igiven.tgz\nrm -rf /usr/local/src/igiven\n",[13517],{"type":597,"tag":629,"props":13518,"children":13519},{"__ignoreMap":591},[13520],{"type":603,"value":13515},{"type":597,"tag":598,"props":13522,"children":13524},{"id":13523},"注意点",[13525],{"type":603,"value":13523},{"type":597,"tag":1321,"props":13527,"children":13528},{},[13529,13534],{"type":597,"tag":807,"props":13530,"children":13531},{},[13532],{"type":603,"value":13533},"仓库的名称不要例如igiven.github.io.不然部署时拉取仓库会失败",{"type":597,"tag":807,"props":13535,"children":13536},{},[13537],{"type":603,"value":13538},"添加主机时必须使用python2.7",{"type":597,"tag":621,"props":13540,"children":13542},{"code":13541},"yum install -y nginx python2\nwhereis python\npython -v\nrm /usr/bin/python\nln -s /usr/bin/python2.7 /usr/bin/python\n# 执行过命令可以把python删除再link回去\n\nsystemctl enable nginx\nsystemctl start nginx\n",[13543],{"type":597,"tag":629,"props":13544,"children":13545},{"__ignoreMap":591},[13546],{"type":603,"value":13541},{"title":591,"searchDepth":787,"depth":787,"links":13548},[13549,13550,13551],{"id":13466,"depth":787,"text":13466},{"id":13493,"depth":787,"text":13493},{"id":13523,"depth":787,"text":13523},"content:tool:2021-12-11-yunxiao-liushuixian-hexo.md","tool/2021-12-11-yunxiao-liushuixian-hexo.md","2021-12-11",{"_path":342,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":341,"description":13556,"body":13557,"_type":791,"_id":14085,"_source":793,"_file":14086,"_extension":795,"date":14087},"前言最近在打包 VS Code 插件时，发现打包后的插件体积非常大，而且插件在 VS Code 中的启动速度非常慢，对用户的体验不太友好了。对此做了一些研究，并更改了打包策略，终于把插件的体积从 35M 减少到 3M，并提高了插件的启动速度。本文将带你分析插件体积过大和启动速度过慢的原因，并讲解如何通过使用 webpack 进行打包来减少插件体积。最后将讲解如何配置 externals 剥离一些依赖模块，减少 bundle 的体积，避免出现打包失败的问题。原始打包首先，我们会以 iceworks-page-builder VS Code 插件为例子进行分析，具体的代码可以点击此链接查看。其中，",{"type":594,"children":13558,"toc":14078},[13559,13564,13569,13574,13579,13593,13598,13606,13634,13642,13647,13655,13676,13709,13716,13721,13729,13734,13740,13745,13817,13825,13838,13846,13874,13882,13910,13918,13931,13945,13951,13956,13963,13977,13990,13997,14010,14015,14023,14035,14043,14062,14069,14073],{"type":597,"tag":598,"props":13560,"children":13562},{"id":13561},"前言",[13563],{"type":603,"value":13561},{"type":597,"tag":606,"props":13565,"children":13566},{},[13567],{"type":603,"value":13568},"最近在打包 VS Code 插件时，发现打包后的插件体积非常大，而且插件在 VS Code 中的启动速度非常慢，对用户的体验不太友好了。对此做了一些研究，并更改了打包策略，终于把插件的体积从 35M 减少到 3M，并提高了插件的启动速度。",{"type":597,"tag":606,"props":13570,"children":13571},{},[13572],{"type":603,"value":13573},"本文将带你分析插件体积过大和启动速度过慢的原因，并讲解如何通过使用 webpack 进行打包来减少插件体积。最后将讲解如何配置 externals 剥离一些依赖模块，减少 bundle 的体积，避免出现打包失败的问题。",{"type":597,"tag":598,"props":13575,"children":13577},{"id":13576},"原始打包",[13578],{"type":603,"value":13576},{"type":597,"tag":606,"props":13580,"children":13581},{},[13582,13584,13591],{"type":603,"value":13583},"首先，我们会以 iceworks-page-builder VS Code 插件为例子进行分析，具体的代码可以点击",{"type":597,"tag":886,"props":13585,"children":13588},{"href":13586,"rel":13587},"https://link.zhihu.com/?target=https%3A//github.com/ice-lab/iceworks/tree/v0.1.6/extensions/iceworks-page-builder",[890],[13589],{"type":603,"value":13590},"此链接",{"type":603,"value":13592},"查看。",{"type":597,"tag":606,"props":13594,"children":13595},{},[13596],{"type":603,"value":13597},"其中，部分目录结构说明如下：",{"type":597,"tag":621,"props":13599,"children":13601},{"code":13600},"\u003Ccode class=\"language-text\">├── .vscodeignore            # 插件打包时需要忽略的文件\n├── build                     # 构建产物目录\n├── node_modules\n├── package.json\n├── src                       # 插件相关的源代码\n|  ├── extension.ts\n|  ├── services\n|  └── types.d.ts\n├── tsconfig.json\n└── web                       # webview 相关代码 本质是一个 React 项目\u003C/code>\n",[13602],{"type":597,"tag":629,"props":13603,"children":13604},{"__ignoreMap":591},[13605],{"type":603,"value":13600},{"type":597,"tag":606,"props":13607,"children":13608},{},[13609,13611,13618,13620,13625,13627,13632],{"type":603,"value":13610},"打包插件需要使用 ",{"type":597,"tag":886,"props":13612,"children":13615},{"href":13613,"rel":13614},"https://link.zhihu.com/?target=https%3A//github.com/microsoft/vscode-vsce",[890],[13616],{"type":603,"value":13617},"vsce",{"type":603,"value":13619}," 这个工具。 首先确认已安装 ",{"type":597,"tag":629,"props":13621,"children":13623},{"className":13622},[],[13624],{"type":603,"value":13617},{"type":603,"value":13626}," ；若未安装，则执行以下的命令安装 ",{"type":597,"tag":629,"props":13628,"children":13630},{"className":13629},[],[13631],{"type":603,"value":13617},{"type":603,"value":13633}," ：",{"type":597,"tag":621,"props":13635,"children":13637},{"code":13636},"\u003Ccode class=\"language-text\">npm i vsce -g\u003C/code>\n",[13638],{"type":597,"tag":629,"props":13639,"children":13640},{"__ignoreMap":591},[13641],{"type":603,"value":13636},{"type":597,"tag":606,"props":13643,"children":13644},{},[13645],{"type":603,"value":13646},"在项目的根目录下执行以下命令，即开始对插件进行打包：",{"type":597,"tag":621,"props":13648,"children":13650},{"code":13649},"\u003Ccode class=\"language-text\">vsce package\u003C/code>\n",[13651],{"type":597,"tag":629,"props":13652,"children":13653},{"__ignoreMap":591},[13654],{"type":603,"value":13649},{"type":597,"tag":606,"props":13656,"children":13657},{},[13658,13660,13666,13668,13674],{"type":603,"value":13659},"它会先执行 scripts 中的 ",{"type":597,"tag":629,"props":13661,"children":13663},{"className":13662},[],[13664],{"type":603,"value":13665},"vscode:prepublish",{"type":603,"value":13667}," 命令。从上面可以看出，会先对 Webview 相关的代码进行构建（本质是 CLI 提供的构建能力），得到 js 、html 、css 代码，然后使用 ",{"type":597,"tag":629,"props":13669,"children":13671},{"className":13670},[],[13672],{"type":603,"value":13673},"tsc",{"type":603,"value":13675}," 对插件源代码（./src/**）进行编译。",{"type":597,"tag":606,"props":13677,"children":13678},{},[13679,13681,13686,13688,13693,13695,13700,13702,13707],{"type":603,"value":13680},"等待 ",{"type":597,"tag":629,"props":13682,"children":13684},{"className":13683},[],[13685],{"type":603,"value":13665},{"type":603,"value":13687}," 执行完成后， ",{"type":597,"tag":629,"props":13689,"children":13691},{"className":13690},[],[13692],{"type":603,"value":13617},{"type":603,"value":13694}," 将执行剩下的插件打包操作，最后会在项目根目录下出现一个 .vsix 文件，也就是我们成功打包出来的插件。现在，整个插件的体积是 ",{"type":597,"tag":1080,"props":13696,"children":13697},{},[13698],{"type":603,"value":13699},"35M",{"type":603,"value":13701},"，在 VS Code 中启动速度大概为 ",{"type":597,"tag":1080,"props":13703,"children":13704},{},[13705],{"type":603,"value":13706},"8s",{"type":603,"value":13708},"。插件启动效果图如下：",{"type":597,"tag":606,"props":13710,"children":13711},{},[13712],{"type":597,"tag":719,"props":13713,"children":13715},{"alt":591,"src":13714},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-fbf1b8f5b23a29b359d922f428152455_b.webp",[],{"type":597,"tag":606,"props":13717,"children":13718},{},[13719],{"type":603,"value":13720},"那我们有办法知道究竟是哪些文件导致这个 .vsix 文件这么大的吗？答案是有的。我们只需要把 .vsix 的后缀改成 .zip，然后把这个 zip 文件进行解压，即可看到整个插件是由哪些文件构成了。",{"type":597,"tag":621,"props":13722,"children":13724},{"code":13723},"\u003Ccode class=\"language-text\">workspace/ice/iceworks/extensions/iceworks-page-builder/iceworks-page-builder-0.1.7\n└── extension\n   ├── CHANGELOG.md\n   ├── README.en.md\n   ├── README.md\n   ├── assets\n   ├── build                     # 1.86M\n        ├── assets\n      ├── css\n        |   └── index.css\n      ├── extension.js\n      ├── favicon.png\n      ├── index.html\n      ├── js\n      |  └── index.js\n      └── services\n         └── index.js\n   ├── node_modules              # 69.6M\n   ├── package.json\n   ├── package.nls.json\n   └── package.nls.zh-cn.json\u003C/code>\n",[13725],{"type":597,"tag":629,"props":13726,"children":13727},{"__ignoreMap":591},[13728],{"type":603,"value":13723},{"type":597,"tag":606,"props":13730,"children":13731},{},[13732],{"type":603,"value":13733},"可以看出其中的 node_modules 目录的体积是最大的，这是导致插件体积过大的问题。另外，build 目录和node_modules 目录下有很多模块，正是如此，VS Code 在加载我们的插件的过程中，会加载很多小模块，这就是加载过慢的原因。",{"type":597,"tag":598,"props":13735,"children":13737},{"id":13736},"使用-webpack-进行打包",[13738],{"type":603,"value":13739},"使用 webpack 进行打包",{"type":597,"tag":606,"props":13741,"children":13742},{},[13743],{"type":603,"value":13744},"相信大部分的前端开发者都知道，现在的模块化的前端开发范式非常流行，与此同时出现了很多模块构建工具，比如 Rollup、webpack 等。这些模块构建工具的出发点之一是，把多个模块打包成一个模块，解决加载多个模块速度过慢的问题。那我们能不能用这些构建工具，把多个小的源文件打包成单个入口文件，从而解决上述的问题呢？答案是肯定的。",{"type":597,"tag":606,"props":13746,"children":13747},{},[13748,13750,13756,13758,13764,13766,13771,13773,13778,13780,13785,13787,13792,13794,13800,13802,13808,13810,13815],{"type":603,"value":13749},"首先我们需要安装一下 ",{"type":597,"tag":629,"props":13751,"children":13753},{"className":13752},[],[13754],{"type":603,"value":13755},"webpack",{"type":603,"value":13757}," 和 ",{"type":597,"tag":629,"props":13759,"children":13761},{"className":13760},[],[13762],{"type":603,"value":13763},"webpack-cli",{"type":603,"value":13765}," ，其中， ",{"type":597,"tag":629,"props":13767,"children":13769},{"className":13768},[],[13770],{"type":603,"value":13755},{"type":603,"value":13772}," 是 Webpack 的核心模块， ",{"type":597,"tag":629,"props":13774,"children":13776},{"className":13775},[],[13777],{"type":603,"value":13763},{"type":603,"value":13779}," 是 ",{"type":597,"tag":629,"props":13781,"children":13783},{"className":13782},[],[13784],{"type":603,"value":13755},{"type":603,"value":13786}," 的 CLI 程序，用来在命令行中调用 ",{"type":597,"tag":629,"props":13788,"children":13790},{"className":13789},[],[13791],{"type":603,"value":13755},{"type":603,"value":13793}," 。另外还需要安装 ",{"type":597,"tag":629,"props":13795,"children":13797},{"className":13796},[],[13798],{"type":603,"value":13799},"ts-loader",{"type":603,"value":13801}," ，用于加载 ",{"type":597,"tag":629,"props":13803,"children":13805},{"className":13804},[],[13806],{"type":603,"value":13807},"ts",{"type":603,"value":13809}," 代码并编译成 ",{"type":597,"tag":629,"props":13811,"children":13813},{"className":13812},[],[13814],{"type":603,"value":589},{"type":603,"value":13816}," 代码。",{"type":597,"tag":621,"props":13818,"children":13820},{"code":13819},"\u003Ccode class=\"language-text\">npm i --save-dev webpack webpack-cli ts-loader\u003C/code>\n",[13821],{"type":597,"tag":629,"props":13822,"children":13823},{"__ignoreMap":591},[13824],{"type":603,"value":13819},{"type":597,"tag":606,"props":13826,"children":13827},{},[13828,13830,13836],{"type":603,"value":13829},"安装完成以后，我们需要在根目录下新建一个 ",{"type":597,"tag":629,"props":13831,"children":13833},{"className":13832},[],[13834],{"type":603,"value":13835},"webpack.config.js",{"type":603,"value":13837}," ，并增加以下的内容：",{"type":597,"tag":621,"props":13839,"children":13841},{"code":13840},"\u003Ccode class=\"language-js\">const path = require('path');\n\nconst tsConfigPath = path.join(__dirname, 'tsconfig.json');\n\nconst config = {\n  target: 'node',\n  entry: './src/extension.ts',\n  output: {\n    path: path.resolve(__dirname, 'build'),\n    filename: 'extension.js',\n    libraryTarget: 'commonjs2',\n    devtoolModuleFilenameTemplate: '../[resource-path]',\n  },\n  externals: {\n    vscode: 'commonjs vscode'\n  },\n  resolve: {\n    extensions: ['.ts', '.js'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              configFile: tsConfigPath,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n\nmodule.exports = (env, argv) => {\n  if (argv.mode === 'development') {\n    config.devtool = 'source-map';\n  }\n\n  return config;\n};\u003C/code>\n",[13842],{"type":597,"tag":629,"props":13843,"children":13844},{"__ignoreMap":591},[13845],{"type":603,"value":13840},{"type":597,"tag":606,"props":13847,"children":13848},{},[13849,13851,13857,13859,13865,13867,13872],{"type":603,"value":13850},"修改 ",{"type":597,"tag":629,"props":13852,"children":13854},{"className":13853},[],[13855],{"type":603,"value":13856},"package.json",{"type":603,"value":13858}," 中 ",{"type":597,"tag":629,"props":13860,"children":13862},{"className":13861},[],[13863],{"type":603,"value":13864},"scripts",{"type":603,"value":13866}," 的内容，以使用 ",{"type":597,"tag":629,"props":13868,"children":13870},{"className":13869},[],[13871],{"type":603,"value":13755},{"type":603,"value":13873}," 进行打包：",{"type":597,"tag":621,"props":13875,"children":13877},{"code":13876},"\u003Ccode class=\"language-json\">{\n    \"scripts\": {\n    \"vscode:prepublish\": \"rm -rf build && npm run build:web && webpack --mode production\",\n    \"build:web\": \"cd web && npm run build\",\n    \"watch:web\": \"cd web && npm run start\",\n    \"webpack\": \"webpack --mode development\",\n    \"webpack-dev\": \"webpack --mode development --watch\"\n  },\n}\u003C/code>\n",[13878],{"type":597,"tag":629,"props":13879,"children":13880},{"__ignoreMap":591},[13881],{"type":603,"value":13876},{"type":597,"tag":606,"props":13883,"children":13884},{},[13885,13887,13892,13894,13900,13902,13908],{"type":603,"value":13886},"由于经过 ",{"type":597,"tag":629,"props":13888,"children":13890},{"className":13889},[],[13891],{"type":603,"value":13755},{"type":603,"value":13893}," 打包后， bundle 中都已经包括了需要的模块。我们可以修改 ",{"type":597,"tag":629,"props":13895,"children":13897},{"className":13896},[],[13898],{"type":603,"value":13899},".vscodeignore",{"type":603,"value":13901}," 的内容，把插件打包中不需要的文件忽略掉，当然我们的 ",{"type":597,"tag":629,"props":13903,"children":13905},{"className":13904},[],[13906],{"type":603,"value":13907},"node_modules",{"type":603,"value":13909}," 也可以忽略掉：",{"type":597,"tag":621,"props":13911,"children":13913},{"code":13912},"\u003Ccode class=\"language-text\">.vscode\nnode_modules\nsrc/\nweb/\ntsconfig.json\nwebpack.config.js\u003C/code>\n",[13914],{"type":597,"tag":629,"props":13915,"children":13916},{"__ignoreMap":591},[13917],{"type":603,"value":13912},{"type":597,"tag":606,"props":13919,"children":13920},{},[13921,13923,13929],{"type":603,"value":13922},"以上的相关配置可以点击",{"type":597,"tag":886,"props":13924,"children":13927},{"href":13925,"rel":13926},"https://link.zhihu.com/?target=https%3A//github.com/ice-lab/iceworks/tree/v0.3.0/extensions/iceworks-page-builder",[890],[13928],{"type":603,"value":13590},{"type":603,"value":13930},"进行查看。",{"type":597,"tag":606,"props":13932,"children":13933},{},[13934,13936,13943],{"type":603,"value":13935},"在官方文档中，有一个章节专门讲解了如何使用 webpack 对插件进行打包。更详细的步骤可以参考",{"type":597,"tag":886,"props":13937,"children":13940},{"href":13938,"rel":13939},"https://link.zhihu.com/?target=https%3A//code.visualstudio.com/api/working-with-extensions/bundling-extension",[890],[13941],{"type":603,"value":13942},"文档",{"type":603,"value":13944},"。**",{"type":597,"tag":598,"props":13946,"children":13948},{"id":13947},"使用-externals-减少-bundle-体积",[13949],{"type":603,"value":13950},"使用 externals 减少 bundle 体积",{"type":597,"tag":606,"props":13952,"children":13953},{},[13954],{"type":603,"value":13955},"当配制好 webpack 相关配置，使用 webpack 打包构建插件时，出现以下的错误：",{"type":597,"tag":606,"props":13957,"children":13958},{},[13959],{"type":597,"tag":719,"props":13960,"children":13962},{"alt":591,"src":13961},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-0281fdef1bde4672c98eb45a0367ad36_1440w.jpg",[],{"type":597,"tag":606,"props":13964,"children":13965},{},[13966,13968,13975],{"type":603,"value":13967},"大概的问题是，使用 webpack 在生产环境下进行打包时，会使用 ",{"type":597,"tag":886,"props":13969,"children":13972},{"href":13970,"rel":13971},"https://link.zhihu.com/?target=https%3A//github.com/terser/terser",[890],[13973],{"type":603,"value":13974},"terser",{"type":603,"value":13976}," 对源码进行压缩。但是我们的 bundle 太大了（预计 bundle 的大小超过10M的时候），导致在压缩的过程中出现内存溢出的问题。",{"type":597,"tag":606,"props":13978,"children":13979},{},[13980,13982,13988],{"type":603,"value":13981},"我们使用 ",{"type":597,"tag":629,"props":13983,"children":13985},{"className":13984},[],[13986],{"type":603,"value":13987},"webpack-bundle-analyzer",{"type":603,"value":13989}," 来分析 bundle 的组成。 bundle 的依赖模块组成具体如下图：",{"type":597,"tag":606,"props":13991,"children":13992},{},[13993],{"type":597,"tag":719,"props":13994,"children":13996},{"alt":591,"src":13995},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-1214a43d4854d3899346cd1f6a91b168_1440w.jpg",[],{"type":597,"tag":606,"props":13998,"children":13999},{},[14000,14002,14008],{"type":603,"value":14001},"可以看出我们项目依赖的 ",{"type":597,"tag":629,"props":14003,"children":14005},{"className":14004},[],[14006],{"type":603,"value":14007},"prettier",{"type":603,"value":14009}," 占用了 bundle 中非常大的体积。那我们现在需要借助 webpack 中的 externals，不要把该依赖打包到 bundle 中，而是作为一个外部扩展，在运行时再去从外部获取依赖。",{"type":597,"tag":606,"props":14011,"children":14012},{},[14013],{"type":603,"value":14014},"我们可以先在 webpack.config.js 中配置 externals :",{"type":597,"tag":621,"props":14016,"children":14018},{"code":14017},"\u003Ccode class=\"language-js\">module.exports = {\n  externals: {\n    vscode: 'commonjs vscode',\n  + prettier: 'commonjs prettier'\n  },\n}\u003C/code>\n",[14019],{"type":597,"tag":629,"props":14020,"children":14021},{"__ignoreMap":591},[14022],{"type":603,"value":14017},{"type":597,"tag":606,"props":14024,"children":14025},{},[14026,14028,14033],{"type":603,"value":14027},"确保插件在打包的时候，相关依赖也存在于插件中，需要在 ",{"type":597,"tag":629,"props":14029,"children":14031},{"className":14030},[],[14032],{"type":603,"value":13899},{"type":603,"value":14034}," 文件中加入以下内容（这里真的踩了坑了）：",{"type":597,"tag":621,"props":14036,"children":14038},{"code":14037},"\u003Ccode class=\"language-text\">!node_modules/prettier\u003C/code>\n",[14039],{"type":597,"tag":629,"props":14040,"children":14041},{"__ignoreMap":591},[14042],{"type":603,"value":14037},{"type":597,"tag":606,"props":14044,"children":14045},{},[14046,14048,14053,14055,14060],{"type":603,"value":14047},"配置完成后，再进行打包，最后打包的插件体积为 ",{"type":597,"tag":1080,"props":14049,"children":14050},{},[14051],{"type":603,"value":14052},"3.6M",{"type":603,"value":14054},"，在 VS Code 中启动速度降到了 ",{"type":597,"tag":1080,"props":14056,"children":14057},{},[14058],{"type":603,"value":14059},"1s",{"type":603,"value":14061}," ，效果图如下：",{"type":597,"tag":606,"props":14063,"children":14064},{},[14065],{"type":597,"tag":719,"props":14066,"children":14068},{"alt":591,"src":14067},"/images/2021-12-02-vscode-plugins-big/2021-11-30-07-00-08v2-7fa4f670dae3d7e42f8b8e62e041289d_b.jpg",[],{"type":597,"tag":598,"props":14070,"children":14071},{"id":1464},[14072],{"type":603,"value":1464},{"type":597,"tag":606,"props":14074,"children":14075},{},[14076],{"type":603,"value":14077},"如果大家在打包 VS Code 插件时，如果打包出来的插件的体积过大，不妨可以考虑使用 webpack 对你的 VS Code 插件进行打包，会让你的插件有更小的体积，更快的启动速度，更好的用户体验。",{"title":591,"searchDepth":787,"depth":787,"links":14079},[14080,14081,14082,14083,14084],{"id":13561,"depth":787,"text":13561},{"id":13576,"depth":787,"text":13576},{"id":13736,"depth":787,"text":13739},{"id":13947,"depth":787,"text":13950},{"id":1464,"depth":787,"text":1464},"content:tool:2021-12-02-vscode-plugins-big.md","tool/2021-12-02-vscode-plugins-big.md","2021-12-02",{"_path":339,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":338,"description":14089,"body":14090,"_type":791,"_id":14218,"_source":793,"_file":14219,"_extension":795,"date":14220},"打开网址 https://store.rg-adguard.net/",{"type":594,"children":14091,"toc":14216},[14092,14103,14108,14113,14120,14124,14129,14136,14141,14149,14156,14161,14168,14173,14178,14183,14192,14201,14204],{"type":597,"tag":606,"props":14093,"children":14094},{},[14095,14097],{"type":603,"value":14096},"打开网址 ",{"type":597,"tag":886,"props":14098,"children":14101},{"href":14099,"rel":14100},"https://store.rg-adguard.net/",[890],[14102],{"type":603,"value":14099},{"type":597,"tag":606,"props":14104,"children":14105},{},[14106],{"type":603,"value":14107},"以 PackageFamilyName 方式搜索 Microsoft.WindowsStore_8wekyb3d8bbwe",{"type":597,"tag":606,"props":14109,"children":14110},{},[14111],{"type":603,"value":14112},"根据系统选择对应的包，每一种都要下载",{"type":597,"tag":606,"props":14114,"children":14115},{},[14116],{"type":597,"tag":719,"props":14117,"children":14119},{"alt":719,"src":14118},"/images/2021-11-15-install-WindowsStore/1595409-20190313101653224-1704280347.png",[],{"type":597,"tag":857,"props":14121,"children":14122},{"id":11979},[14123],{"type":603,"value":11979},{"type":597,"tag":606,"props":14125,"children":14126},{},[14127],{"type":603,"value":14128},"在下载目录按住 shift 键，然后鼠标右键，打开 Powershell",{"type":597,"tag":606,"props":14130,"children":14131},{},[14132],{"type":597,"tag":719,"props":14133,"children":14135},{"alt":719,"src":14134},"/images/2021-11-15-install-WindowsStore/1595409-20190313103101576-1015756103.png",[],{"type":597,"tag":606,"props":14137,"children":14138},{},[14139],{"type":603,"value":14140},"执行安装命令，此处只安装了 64 位安装包，建议在安装时把 32 位也一并下载安装",{"type":597,"tag":621,"props":14142,"children":14144},{"code":14143},"# 安装该路径下所有包\nAdd-AppxPackage *\n",[14145],{"type":597,"tag":629,"props":14146,"children":14147},{"__ignoreMap":591},[14148],{"type":603,"value":14143},{"type":597,"tag":606,"props":14150,"children":14151},{},[14152],{"type":597,"tag":719,"props":14153,"children":14155},{"alt":719,"src":14154},"/images/2021-11-15-install-WindowsStore/1595409-20190313103229471-402846601.png",[],{"type":597,"tag":606,"props":14157,"children":14158},{},[14159],{"type":603,"value":14160},"此时点击开始菜单应该就能看到应用商店了",{"type":597,"tag":606,"props":14162,"children":14163},{},[14164],{"type":597,"tag":719,"props":14165,"children":14167},{"alt":719,"src":14166},"/images/2021-11-15-install-WindowsStore/1595409-20190313103450428-1760401185.png",[],{"type":597,"tag":606,"props":14169,"children":14170},{},[14171],{"type":603,"value":14172},"清空应用商店缓存 WSReset.exe",{"type":597,"tag":606,"props":14174,"children":14175},{},[14176],{"type":603,"value":14177},"应用商店 ID 为 9WZDNCRFJBMP",{"type":597,"tag":606,"props":14179,"children":14180},{},[14181],{"type":603,"value":14182},"应用安装器 ID 为 9NBLGGH4NNS1",{"type":597,"tag":606,"props":14184,"children":14185},{},[14186],{"type":597,"tag":886,"props":14187,"children":14190},{"href":14188,"rel":14189},"https://github.com/dragonflylee/WimHelper",[890],[14191],{"type":603,"value":14188},{"type":597,"tag":606,"props":14193,"children":14194},{},[14195],{"type":597,"tag":886,"props":14196,"children":14199},{"href":14197,"rel":14198},"https://github.com/kkkgo/LTSB-Add-MicrosoftStore",[890],[14200],{"type":603,"value":14197},{"type":597,"tag":3720,"props":14202,"children":14203},{},[],{"type":597,"tag":606,"props":14205,"children":14206},{},[14207],{"type":597,"tag":886,"props":14208,"children":14211},{"href":14209,"rel":14210},"https://www.microsoft.com/zh-cn/store",[890],[14212],{"type":597,"tag":1080,"props":14213,"children":14214},{},[14215],{"type":603,"value":14209},{"title":591,"searchDepth":787,"depth":787,"links":14217},[],"content:tool:2021-11-15-install-WindowsStore.md","tool/2021-11-15-install-WindowsStore.md","2021-11-15",{"_path":336,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":335,"description":14222,"body":14223,"_type":791,"_id":14301,"_source":793,"_file":14302,"_extension":795,"date":14303},"安装cockpit后，默认只能通过IP地址+端口号来访问。其实，还可以通过nginx代理来访问。",{"type":594,"children":14224,"toc":14296},[14225,14229,14235,14243,14249,14254,14262,14270,14274],{"type":597,"tag":606,"props":14226,"children":14227},{},[14228],{"type":603,"value":14222},{"type":597,"tag":598,"props":14230,"children":14232},{"id":14231},"添加nginxconf配置",[14233],{"type":603,"value":14234},"添加Nginx.conf配置",{"type":597,"tag":621,"props":14236,"children":14238},{"code":14237}," \n## 添加并修改\nvi /etc/nginx/conf.d/cockpit.godgodgame.com\n\n-------------------------------------------------------------------------------------\n\n#使用cockpt名称配置上游服务器\nupstream cockpit {\n    server 127.0.0.1:9090;\n}\n \n#将http重定向到https\nserver{\n    listen 80;\n    server_name cockpit.godgodgame.com;\n    return 301 https://$server_name$request_uri;\n}\n\n#使用https访问并配置ssl\nserver {\n    listen 443 ssl http2;\n    #填写绑定证书的域名\n    server_name cockpit.godgodgame.com;\n    \n    \n    #证书文件名称\n    ssl_certificate /etc/nginx/cert/1_godgodgame.com_bundle.crt;\n    #私钥文件名称\n    ssl_certificate_key /etc/nginx/cert/2_godgodgame.com.key;\n    ssl_session_timeout 5m;\n    #请按照以下协议配置\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; \n    #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n    ssl_prefer_server_ciphers on;\n \n    location / {\n        # Required to proxy the connection to Cockpit\n        proxy_pass https://cockpit;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # Required for web sockets to function\n        proxy_http_version 1.1;\n        proxy_buffering off;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n\n        # Pass ETag header from Cockpit to clients.\n        # See: https://github.com/cockpit-project/cockpit/issues/5239\n        gzip off;\n    }\n}\n-------------------------------------------------------------------------------------\n# 先检查nginx配置是否有效/无有异常,如果有异常请按照异常提示修改；使用nginx -t进行nginx.conf的配置检测\n$ nginx -t;\n \n# 重启nginx\n$ nginx -s reload;\n",[14239],{"type":597,"tag":629,"props":14240,"children":14241},{"__ignoreMap":591},[14242],{"type":603,"value":14237},{"type":597,"tag":598,"props":14244,"children":14246},{"id":14245},"修改cockpit",[14247],{"type":603,"value":14248},"修改Cockpit",{"type":597,"tag":606,"props":14250,"children":14251},{},[14252],{"type":603,"value":14253},"这时输入域名，能看到登录页面，但登录后，显示不出内容，页面全白",{"type":597,"tag":621,"props":14255,"children":14257},{"code":14256},"sudo vim /etc/cockpit/cockpit.conf\n\n参照如下配置修改，注意域名替换为your_domain_host：\n[WebService]\nOrigins = https://cockpit.godgodgame.com https://127.0.0.1:9090\nProtocolHeader = X-Forwarded-Proto\nAllowUnencrypted = true\n\nsystemctl restart cockpit\n",[14258],{"type":597,"tag":629,"props":14259,"children":14260},{"__ignoreMap":591},[14261],{"type":603,"value":14256},{"type":597,"tag":621,"props":14263,"children":14265},{"code":14264},"map $http_upgrade $connection_upgrade { default upgrade; '' close; }\n \nupstream websocket {\nserver 127.0.0.1:9090;\n}\n \nserver{\n    listen 80;\n    server_name cockpit.godgodgame.com;\n    return 301 https://$server_name$request_uri;\n}\n \nserver {\n    listen 443 ssl http2;\n    server_name cockpit.godgodgame.com;\n \n    #ssl on;\n    ssl_certificate /etc/nginx/cert/1_cockpit.godgodgame.com_bundle.crt;\n    ssl_certificate_key /etc/nginx/cert/2_cockpit.godgodgame.com.key;\n \n    location / {\n        root /;\n        index index.html;\n        proxy_redirect off;\n        proxy_pass http://websocket;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $http_host;\n    }\n}\n",[14266],{"type":597,"tag":629,"props":14267,"children":14268},{"__ignoreMap":591},[14269],{"type":603,"value":14264},{"type":597,"tag":598,"props":14271,"children":14272},{"id":12178},[14273],{"type":603,"value":12178},{"type":597,"tag":1321,"props":14275,"children":14276},{},[14277,14287],{"type":597,"tag":807,"props":14278,"children":14279},{},[14280],{"type":597,"tag":886,"props":14281,"children":14284},{"href":14282,"rel":14283},"https://github.com/cockpit-project/cockpit/wiki/Proxying-Cockpit-over-nginx",[890],[14285],{"type":603,"value":14286},"Proxying Cockpit over nginx · cockpit-project/cockpit Wiki (github.com)",{"type":597,"tag":807,"props":14288,"children":14289},{},[14290],{"type":597,"tag":886,"props":14291,"children":14294},{"href":14292,"rel":14293},"https://cloud.tencent.com/document/product/400/35244",[890],[14295],{"type":603,"value":14292},{"title":591,"searchDepth":787,"depth":787,"links":14297},[14298,14299,14300],{"id":14231,"depth":787,"text":14234},{"id":14245,"depth":787,"text":14248},{"id":12178,"depth":787,"text":12178},"content:tool:2021-11-07-cockpit-linux.md","tool/2021-11-07-cockpit-linux.md","2021-11-07",{"_path":333,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":332,"description":14305,"body":14306,"_type":791,"_id":14563,"_source":793,"_file":14564,"_extension":795,"date":14565},"Pak解包和打包Pak文件就是UE4游戏生成的数据包文件，PC游戏一般放在游戏路径下的Content\\Paks，安卓则在obb解包后游戏路径下的Content\\Paks中，一般汉化所需的文本都放在pakchunk0-WindowsNoEditor.pak（PC端）或者pakchunk0-Android_ASTC.pak(移动端)中，如果不确定可以全部解包一下。目前主流的解包和打包工具有两种，一种是quickbms，另一种是UnrealPakSwitch。使用quickbms解包首先介绍一下quickbms(开发者论坛网站:https://zenhax.com/)的使用方法，quickbms并非",{"type":594,"children":14307,"toc":14561},[14308,14316,14321,14326,14334,14348,14355,14360,14367,14372,14379,14384,14391,14399,14404,14411,14416,14424,14446,14453,14458,14472,14480,14485,14492,14497,14504,14509,14514],{"type":597,"tag":606,"props":14309,"children":14310},{},[14311],{"type":597,"tag":1080,"props":14312,"children":14313},{},[14314],{"type":603,"value":14315},"Pak解包和打包",{"type":597,"tag":606,"props":14317,"children":14318},{},[14319],{"type":603,"value":14320},"Pak文件就是UE4游戏生成的数据包文件，PC游戏一般放在游戏路径下的Content\\Paks，安卓则在obb解包后游戏路径下的Content\\Paks中，一般汉化所需的文本都放在pakchunk0-WindowsNoEditor.pak（PC端）或者pakchunk0-Android_ASTC.pak(移动端)中，如果不确定可以全部解包一下。",{"type":597,"tag":606,"props":14322,"children":14323},{},[14324],{"type":603,"value":14325},"目前主流的解包和打包工具有两种，一种是quickbms，另一种是UnrealPakSwitch。",{"type":597,"tag":606,"props":14327,"children":14328},{},[14329],{"type":597,"tag":1080,"props":14330,"children":14331},{},[14332],{"type":603,"value":14333},"使用quickbms解包",{"type":597,"tag":606,"props":14335,"children":14336},{},[14337,14339,14346],{"type":603,"value":14338},"首先介绍一下quickbms(开发者论坛网站:",{"type":597,"tag":886,"props":14340,"children":14343},{"href":14341,"rel":14342},"https://zenhax.com/",[890],[14344],{"type":603,"value":14345},"https://zenhax.com/)的使用方法，quickbms并非UE4专用的解包打包工具，而是一个可以根据相应脚本插件来解包的工具，打开quickbms的目录，会看到这些文件，解包主要使用quickbms.exe和quickbms_4gb_files.exe，顾名思义quickbms_4gb_files.exe就是给超过4g的大文件解包使用的，没有超过的使用quickbms.exe解包即可。",{"type":603,"value":14347},"%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%8Cquickbms%E5%B9%B6%E9%9D%9EUE4%E4%B8%93%E7%94%A8%E7%9A%84%E8%A7%A3%E5%8C%85%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%80%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E7%9B%B8%E5%BA%94%E8%84%9A%E6%9C%AC%E6%8F%92%E4%BB%B6%E6%9D%A5%E8%A7%A3%E5%8C%85%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%8C%E6%89%93%E5%BC%80quickbms%E7%9A%84%E7%9B%AE%E5%BD%95%EF%BC%8C%E4%BC%9A%E7%9C%8B%E5%88%B0%E8%BF%99%E4%BA%9B%E6%96%87%E4%BB%B6%EF%BC%8C%E8%A7%A3%E5%8C%85%E4%B8%BB%E8%A6%81%E4%BD%BF%E7%94%A8quickbms.exe%E5%92%8Cquickbms_4gb_files.exe%EF%BC%8C%E9%A1%BE%E5%90%8D%E6%80%9D%E4%B9%89quickbms_4gb_files.exe%E5%B0%B1%E6%98%AF%E7%BB%99%E8%B6%85%E8%BF%874g%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8C%85%E4%BD%BF%E7%94%A8%E7%9A%84%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%B6%85%E8%BF%87%E7%9A%84%E4%BD%BF%E7%94%A8quickbms.exe%E8%A7%A3%E5%8C%85%E5%8D%B3%E5%8F%AF%E3%80%82)",{"type":597,"tag":606,"props":14349,"children":14350},{},[14351],{"type":597,"tag":719,"props":14352,"children":14354},{"alt":719,"src":14353},"/images/2021-11-06-ue4-view/1607844816-d70f13e360aab32.png",[],{"type":597,"tag":606,"props":14356,"children":14357},{},[14358],{"type":603,"value":14359},"使用过程很简单，打开quickbms.exe会提示选择选择解包脚本，我们选择unreal_tournament_4.bms这个脚本",{"type":597,"tag":606,"props":14361,"children":14362},{},[14363],{"type":597,"tag":719,"props":14364,"children":14366},{"alt":719,"src":14365},"/images/2021-11-06-ue4-view/1607844817-dba7c407119b5ba.png",[],{"type":597,"tag":606,"props":14368,"children":14369},{},[14370],{"type":603,"value":14371},"然后会再次提示选择pak，我们选择对应的pak包即可",{"type":597,"tag":606,"props":14373,"children":14374},{},[14375],{"type":597,"tag":719,"props":14376,"children":14378},{"alt":719,"src":14377},"/images/2021-11-06-ue4-view/1607844818-69c6a966ef586fc.png",[],{"type":597,"tag":606,"props":14380,"children":14381},{},[14382],{"type":603,"value":14383},"如果是没有加密的pak此时就会正常解包，如果是加密的pak，则需要输入密钥(密钥获取方式后面教程会提到)，后面就等待解包完成即可",{"type":597,"tag":606,"props":14385,"children":14386},{},[14387],{"type":597,"tag":719,"props":14388,"children":14390},{"alt":719,"src":14389},"/images/2021-11-06-ue4-view/1607844818-e6616f823a65b43.png",[],{"type":597,"tag":606,"props":14392,"children":14393},{},[14394],{"type":597,"tag":1080,"props":14395,"children":14396},{},[14397],{"type":603,"value":14398},"使用quickbms打包",{"type":597,"tag":606,"props":14400,"children":14401},{},[14402],{"type":603,"value":14403},"quickbms打包实际上就是解包的反过程，这里不能再直接使用quickbms.exe打包，而是要用打包脚本，如下图的三个脚本，使用reimport.bat打包有个条件，修改后的文件不能比源文件大。reimport2.bat和reimport3.bat按作者说法已经解决了这个限制，但是在实际使用中仍有问题，所以如果修改后的文件变大了就不建议使用了；",{"type":597,"tag":606,"props":14405,"children":14406},{},[14407],{"type":597,"tag":719,"props":14408,"children":14410},{"alt":719,"src":14409},"/images/2021-11-06-ue4-view/1607844819-43d08de99d1ba79.png",[],{"type":597,"tag":606,"props":14412,"children":14413},{},[14414],{"type":603,"value":14415},"quickbms打包有一个优点，就是不需要提供全部的文件，只需要将修改后的文件按pak包中的目录放置好就行(注: 一定要是完整目录)，比如修改了Pak包中TWD\\Content\\Localization\\Game\\en中的Game.locres文件，那么就要建立TWD\\Content\\Localization\\Game\\en这个路径将修改的Game.locres文件放入其中，然后双击reimport.bat脚本，同样的选择unreal_tournament_4.bms这个脚本，选择pak包，最后选择刚刚修改文件的目录即可",{"type":597,"tag":606,"props":14417,"children":14418},{},[14419],{"type":597,"tag":1080,"props":14420,"children":14421},{},[14422],{"type":603,"value":14423},"使用UnrealPakSwitch解包和打包",{"type":597,"tag":606,"props":14425,"children":14426},{},[14427,14429,14435,14437,14444],{"type":603,"value":14428},"UnrealPakSwitch工具(作者详细教程链接:",{"type":597,"tag":886,"props":14430,"children":14433},{"href":14431,"rel":14432},"https://gbatemp.net/threads/how-to-unpack-and-repack-unreal-engine-4-files.531784/",[890],[14434],{"type":603,"value":14431},{"type":603,"value":14436}," )实际使用的是虚幻4引擎中的UnrealPak.exe工具来进行解包和打包的，所以相对更加可靠，由于依赖的是u4pak.py脚本，所以需要先安装Python环境(可到官网下载，链接: ",{"type":597,"tag":886,"props":14438,"children":14441},{"href":14439,"rel":14440},"https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe",[890],[14442],{"type":603,"value":14443},"https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe)。安装过程不在赘述注意建立Path环境变量。安装好后，首先需要使用1.check这个脚本检测版本，将pak包放入UnrealPakSwitch工具目录下，然后拖动到1.check.cmd上即可弹出版本，Unreal",{"type":603,"value":14445},"%E3%80%82%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%8D%E5%9C%A8%E8%B5%98%E8%BF%B0%E6%B3%A8%E6%84%8F%E5%BB%BA%E7%AB%8BPath%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E3%80%82%E5%AE%89%E8%A3%85%E5%A5%BD%E5%90%8E%EF%BC%8C%E9%A6%96%E5%85%88%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A81.check%E8%BF%99%E4%B8%AA%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E7%89%88%E6%9C%AC%EF%BC%8C%E5%B0%86pak%E5%8C%85%E6%94%BE%E5%85%A5UnrealPakSwitch%E5%B7%A5%E5%85%B7%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8B%96%E5%8A%A8%E5%88%B01.check.cmd%E4%B8%8A%E5%8D%B3%E5%8F%AF%E5%BC%B9%E5%87%BA%E7%89%88%E6%9C%AC%EF%BC%8CUnreal) Engine 4.19.2 (for v4 *.pak), Unreal Engine 4.20.3 (for v5 *.pak), Unreal Engine 4.21.2 (for v7 *.pak), Unreal Engine 4.22.3 (for v8 *.pak), Unreal Engine 4.24.1 (for v8.23 *.pak), Unreal Engine 4.25.4 (for v9 *.pak).，检测版本后根据对应的版本放入相应版本的UnrealPak.exe工具，作者教程中写的很详细，不在赘述。",{"type":597,"tag":606,"props":14447,"children":14448},{},[14449],{"type":597,"tag":719,"props":14450,"children":14452},{"alt":719,"src":14451},"/images/2021-11-06-ue4-view/1607844820-2b83cb865fd7122.png",[],{"type":597,"tag":606,"props":14454,"children":14455},{},[14456],{"type":603,"value":14457},"然后就是解包，过程很简单，将pak包拖动到相应版本的unpack-vxx.cmd上，如果是加密包则拖动到unpack-encrypted-vxx.cmd上，即可自动进行解包，解包后目录会输出在UnrealPakSwitch工具目录下。同时会生成一个lista.txt文件，这个文件包含pak包中所有文件信息，后面打包需要用到。",{"type":597,"tag":606,"props":14459,"children":14460},{},[14461,14463,14470],{"type":603,"value":14462},"当修改好后需要打包的时候，就要对lista.txt文件进行修改，详细修改方法见作者教程",{"type":597,"tag":886,"props":14464,"children":14467},{"href":14465,"rel":14466},"https://gbatemp.net/threads/how-to-unpack-and-repack-unreal-engine-4-files.531784/%E4%B8%AD%E7%9A%84Pack",[890],[14468],{"type":603,"value":14469},"https://gbatemp.net/threads/how-to-unpack-and-repack-unreal-engine-4-files.531784/中的Pack",{"type":603,"value":14471}," files部分，修改好后拖动到pack-vxx.cmd上即可。",{"type":597,"tag":606,"props":14473,"children":14474},{},[14475],{"type":597,"tag":1080,"props":14476,"children":14477},{},[14478],{"type":603,"value":14479},"简单导出并汉化文本文件",{"type":597,"tag":606,"props":14481,"children":14482},{},[14483],{"type":603,"value":14484},"对于多语言的游戏，游戏文本基本都是放在Content\\Localization\\下的，如果目录下的文件是文本文件，那么直接用记事本打开修改即可，如果是locres文件，则需要使用工具来导出文本",{"type":597,"tag":606,"props":14486,"children":14487},{},[14488],{"type":597,"tag":719,"props":14489,"children":14491},{"alt":719,"src":14490},"/images/2021-11-06-ue4-view/1607844821-7744d389d53038c.png",[],{"type":597,"tag":606,"props":14493,"children":14494},{},[14495],{"type":603,"value":14496},"使用unreal_locres_export.exe是导出，unreal_locres_import.exe是导入，导出后的文本就是下面这样",{"type":597,"tag":606,"props":14498,"children":14499},{},[14500],{"type":597,"tag":719,"props":14501,"children":14503},{"alt":719,"src":14502},"/images/2021-11-06-ue4-view/1607844822-881c9b8a8029f4e.png",[],{"type":597,"tag":606,"props":14505,"children":14506},{},[14507],{"type":603,"value":14508},"将其修改成中文后(不要有任何换行动作，文件不要重命名)，使用导入工具生成locres文件即可。",{"type":597,"tag":606,"props":14510,"children":14511},{},[14512],{"type":603,"value":14513},"必备工具：",{"type":597,"tag":803,"props":14515,"children":14516},{},[14517,14546,14551,14556],{"type":597,"tag":807,"props":14518,"children":14519},{},[14520,14522,14528,14530,14533,14535,14541,14544],{"type":603,"value":14521},"Umodel 下载网址：",{"type":597,"tag":886,"props":14523,"children":14526},{"href":14524,"rel":14525},"http://www.gildor.org/en/projects/umodel",[890],[14527],{"type":603,"value":14524},{"type":603,"value":14529},"   国外大神作品，英文网站，有点英语基础就行。",{"type":597,"tag":1595,"props":14531,"children":14532},{},[],{"type":603,"value":14534},"不想点开网站的下载链接：",{"type":597,"tag":886,"props":14536,"children":14539},{"href":14537,"rel":14538},"http://www.gildor.org/down/43/umodel/umodel_win32.zip",[890],[14540],{"type":603,"value":14537},{"type":597,"tag":1595,"props":14542,"children":14543},{},[],{"type":603,"value":14545},"之前只有32位系统可以用，现在更新后64位也可以用了（我的就是）",{"type":597,"tag":807,"props":14547,"children":14548},{},[14549],{"type":603,"value":14550},"ActorX Import 也是上个网站上的插件，用于3ds max导入pskx文件用。下载解压后把文件放到3ds max 安装路径里的stdplugs文件夹里面。",{"type":597,"tag":807,"props":14552,"children":14553},{},[14554],{"type":603,"value":14555},"3ds max 版本不限，但最好不要太低，我用的2019最新版，可以用。注意3ds max最好破解一下，不然30天用的不舒服。",{"type":597,"tag":807,"props":14557,"children":14558},{},[14559],{"type":603,"value":14560},"UE4",{"title":591,"searchDepth":787,"depth":787,"links":14562},[],"content:tool:2021-11-06-ue4-view.md","tool/2021-11-06-ue4-view.md","2021-11-06",{"_path":574,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":573,"description":14567,"body":14568,"_type":791,"_id":14649,"_source":793,"_file":14650,"_extension":795,"date":14651},"Hi,\nWe found out that this particular issue is very hard to work on as domain reload depends on a lot of things:\n- Number and types of UI widgets alive in the editor\n- Quantity of code in the project (including from packages)\n- Callbacks run as part of the domain reload (InitializeOnLoad, EditorApplication events...) that can be handled by both editor, first party packages, 3rd party packages or user code\n- Topology of the project...",{"type":594,"children":14569,"toc":14647},[14570,14574,14579,14584,14589,14594,14606,14614,14619,14624,14632,14637],{"type":597,"tag":606,"props":14571,"children":14572},{},[14573],{"type":603,"value":14567},{"type":597,"tag":606,"props":14575,"children":14576},{},[14577],{"type":603,"value":14578},"So when we get numbers from users, about Domain Reload times, there are a lot of times where we can't find where the root issue come from.",{"type":597,"tag":606,"props":14580,"children":14581},{},[14582],{"type":603,"value":14583},"The good news is that this is going to change !",{"type":597,"tag":606,"props":14585,"children":14586},{},[14587],{"type":603,"value":14588},"In next version, Unity will ship with a diagnostic switch enabling detailed domain reload timings, allowing any user to see what actually happen on domain reload. This will help us figure what are the most common problematic components and on which ones we should prioritize optimization effort. This will also help users find workarounds for improving performance (e.g. close a particularly consuming UI widget, remove a package that is not really needed in the project,...).\nShortly after, we will backport this diagnostic switch to LTS versions of Unity (current plan is to backport down to 2019.4), to allow for more precise performance comparison.",{"type":597,"tag":606,"props":14590,"children":14591},{},[14592],{"type":603,"value":14593},"We are also working internally to leverage that diagnostic tools to detect problems earlier in packages that we ship, as part of our internal package validation suites. This is an ongoing effort though, so don't put your expectations too high on this, and please report your detailed domain reload logs as soon as you get the update !",{"type":597,"tag":606,"props":14595,"children":14596},{},[14597,14599,14604],{"type":603,"value":14598},"Domain reload detailed timings can now be enabled in 2021.2.0a20 an 2021.1.11f1 (and we are busy backporting this to 2019.4 and 2020.3).\n- In 2021.2.x it can be enabled using the diagnostics switches in Editor Preferences\n",{"type":597,"tag":719,"props":14600,"children":14603},{"alt":14601,"src":14602},"upload_2021-6-14_12-14-44.png","/images/2021-10-01-Increased-script-assembly-reload-time/upload_2021-6-14_12-14-44-png.871142",[],{"type":603,"value":14605},"\n- In 2021.1 (which does not have the diagnostic switches UI), you can enable it with the environment variable UNITY_DIAG_ENABLE_DOMAIN_RELOAD_TIMINGS.\n(e.g. in a Powershell console, you can run",{"type":597,"tag":621,"props":14607,"children":14609},{"code":14608}," $env:UNITY_DIAG_ENABLE_DOMAIN_RELOAD_TIMINGS=\"1\"; & 'C:\\Program Files\\Unity\\Hub\\Editor\\2021.1.11f1\\Editor\\Unity.exe'\n",[14610],{"type":597,"tag":629,"props":14611,"children":14612},{"__ignoreMap":591},[14613],{"type":603,"value":14608},{"type":597,"tag":606,"props":14615,"children":14616},{},[14617],{"type":603,"value":14618},").",{"type":597,"tag":606,"props":14620,"children":14621},{},[14622],{"type":603,"value":14623},"After that, in your editor logs (",{"type":597,"tag":621,"props":14625,"children":14627},{"code":14626},"%LOCALAPPDATA%\\Unity\\Editor\\Editor.log\n",[14628],{"type":597,"tag":629,"props":14629,"children":14630},{"__ignoreMap":591},[14631],{"type":603,"value":14626},{"type":597,"tag":606,"props":14633,"children":14634},{},[14635],{"type":603,"value":14636},"), you'll see detailed timings on domain reload.",{"type":597,"tag":606,"props":14638,"children":14639},{},[14640],{"type":597,"tag":886,"props":14641,"children":14644},{"href":14642,"rel":14643},"https://forum.unity.com/threads/any-update-regarding-increased-script-assembly-reload-time.1117138/?_ga=2.41177696.399908227.1633157438-1122779591.1605612681",[890],[14645],{"type":603,"value":14646},"Any update regarding \"Increased script assembly reload time\"? - Unity Forum",{"title":591,"searchDepth":787,"depth":787,"links":14648},[],"content:unity:2021-10-01-Increased-script-assembly-reload-time.md","unity/2021-10-01-Increased-script-assembly-reload-time.md","2021-10-01",{"_path":168,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":167,"description":14653,"body":14654,"_type":791,"_id":15741,"_source":793,"_file":15742,"_extension":795,"date":15743},"前言我知道没人爱看理论文章。可偶尔也得定期坐下来写点枯燥的设计理论文章，以防本旗舰彻底变成一个专业游戏评论博客。虽然我在写评论的时候从来都是本着“写评论是为了写设计要点”的方针，但是这事情干多了，还是不免会陷入就事论事的陷阱之中。也经常会有人问“FNV和F1、F2的任务系统不是一样的吗”这种问题，有时候也还是应该总结一下，写点理论文章。整理一下工作文档，再定期写一些抽象的文字对自己是有好处的。任务的概念与发展简史：从具体，到抽象，再到具体“老僧三十年前未参禅时，见山是山，见水是水。及至拿来，亲见知识，有个入处，见山不是山，见水不是水。而今得个休歇处，依前见山只是山，见水只是水。”——《五灯会元",{"type":594,"children":14655,"toc":15739},[14656,14663,14668,14673,14678,14686,14694,14702,14710,14715,14723,14728,14736,14741,14749,14754,14759,14767,14772,14780,14813,14818,14826,14831,14836,14841,14846,14851,14856,14861,14875,14880,14888,14893,14898,14903,14955,14960,14968,14973,14978,14983,14988,14993,14998,15003,15008,15013,15018,15023,15035,15040,15051,15056,15061,15066,15071,15076,15081,15086,15091,15096,15101,15109,15114,15119,15124,15129,15134,15139,15144,15149,15154,15159,15164,15169,15174,15179,15184,15189,15194,15199,15204,15209,15221,15226,15231,15236,15241,15246,15251,15256,15261,15266,15271,15276,15281,15293,15305,15310,15315,15320,15331,15336,15341,15346,15351,15356,15364,15369,15374,15379,15384,15389,15401,15406,15411,15416,15421,15426,15431,15436,15441,15446,15451,15456,15461,15466,15474,15479,15484,15496,15501,15506,15511,15516,15521,15526,15531,15536,15541,15546,15551,15559,15564,15569,15581,15593,15603,15611,15630,15656,15661,15669,15674,15679,15698,15703],{"type":597,"tag":606,"props":14657,"children":14658},{},[14659],{"type":597,"tag":1080,"props":14660,"children":14661},{},[14662],{"type":603,"value":13561},{"type":597,"tag":606,"props":14664,"children":14665},{},[14666],{"type":603,"value":14667},"我知道没人爱看理论文章。",{"type":597,"tag":606,"props":14669,"children":14670},{},[14671],{"type":603,"value":14672},"可偶尔也得定期坐下来写点枯燥的设计理论文章，以防本旗舰彻底变成一个专业游戏评论博客。虽然我在写评论的时候从来都是本着“写评论是为了写设计要点”的方针，但是这事情干多了，还是不免会陷入就事论事的陷阱之中。",{"type":597,"tag":606,"props":14674,"children":14675},{},[14676],{"type":603,"value":14677},"也经常会有人问“FNV和F1、F2的任务系统不是一样的吗”这种问题，有时候也还是应该总结一下，写点理论文章。整理一下工作文档，再定期写一些抽象的文字对自己是有好处的。",{"type":597,"tag":606,"props":14679,"children":14680},{},[14681],{"type":597,"tag":1080,"props":14682,"children":14683},{},[14684],{"type":603,"value":14685},"任务的概念与发展简史：从具体，到抽象，再到具体",{"type":597,"tag":606,"props":14687,"children":14688},{},[14689],{"type":597,"tag":1733,"props":14690,"children":14691},{},[14692],{"type":603,"value":14693},"“老僧三十年前未参禅时，见山是山，见水是水。及至拿来，亲见知识，有个入处，见山不是山，见水不是水。而今得个休歇处，依前见山只是山，见水只是水。”",{"type":597,"tag":606,"props":14695,"children":14696},{},[14697],{"type":597,"tag":1733,"props":14698,"children":14699},{},[14700],{"type":603,"value":14701},"——《五灯会元》卷十七《青原惟信禅师》",{"type":597,"tag":606,"props":14703,"children":14704},{},[14705],{"type":597,"tag":1080,"props":14706,"children":14707},{},[14708],{"type":603,"value":14709},"任务是什么？",{"type":597,"tag":606,"props":14711,"children":14712},{},[14713],{"type":603,"value":14714},"不管你是玩家还是设计者，你可能都没有仔细考虑过这个问题。\n任务似乎是那种“慢慢浸透了整个行业”的设计要素，我们甚至找不到游戏中任务系统的第一个发明人。\n但当你看到任务的时候，你就会认出它们。\n任务就是魔兽世界里面那些头顶着问号和感叹号的家伙们。\n任务就是使命召唤里面那些不停在屏幕一侧刷新的作战目标和前进方向。\n任务就是360的成就和PS3的奖杯列表里面密密麻麻令人眼晕的文字。\n任务就是网络游戏里在左下角刷个不停的的游戏活动提示。\n总之，任务就是游戏的时候告诉你“你现在应该去干什么”的那些系统，这些任务完成以后，你通常会得到对应的报酬。把用户需要的帮助、行为和报酬打个包，就能得到一个任务；接着，设计师就可以往任务里面插进各种各样的其他要素。\n“看，我这里有胡萝卜。你干完什么什么就肯定能得到胡萝卜哦！”\n这个设计的思路实在太过简单，但当我们回过头来看，却发现这个设计已经统治了整个行业。从FPS到RPG，甚至手机游戏和网页游戏，到处都充斥着任务和类任务系统的身影。\n因为任务实在是太好用了。它就是游戏行业对所谓的“叙事五要素”的综合解答。\n我们都知道，不管是小说、电影还是电视，都有五个经典的问题：时间、地点、人物、事件、原因，也就是When、Where、Whom、What、Why。对于游戏行业来说，这五个问题却没有这么简单。\n你用文字表述？玩家根本不看。你用其他表达方式表述？这些解决方案又没有通用性。\n而在一个任务之中，这些问题同时都会被展示出来。\n你能不能做这个任务？你应该去什么地方？你为什么要做这个任务，能得到什么东西？任务要怎么完成？用户现在到底应该做什么，怎么做？\n设计师总归要把这些东西告诉用户的，而任务是个比其他展示形式更为完善的解答。\n玩家需要的东西，帮助、行动和报酬，只要打开任务列表就一目了然了。\n所以现代游戏里到处都是任务、成就和目标，而游戏用户也飞快接受了它们。\n那些从不玩游戏的人看到现代的大型游戏，经常会问类似这样的问题：“这个角色光这么跑来跑去/打打杀杀是要干什么呢？”\n自从有了任务，这种问题总算也能回答了。\n但是——\n为什么我们的现代游戏中有这么多无聊的任务呢？为什么我们都讨厌Farm呢？为什么有的游戏任务好，有的游戏任务就差呢？要怎么做才能做出更好玩的任务呢？\n这都不是简单地把帮助、行动和报酬打个包就能解决的问题。肯定还有什么比“把帮助、行动和报酬打包”更根本的东西，存在在任务之中。",{"type":597,"tag":606,"props":14716,"children":14717},{},[14718],{"type":597,"tag":1080,"props":14719,"children":14720},{},[14721],{"type":603,"value":14722},"思想的起源",{"type":597,"tag":606,"props":14724,"children":14725},{},[14726],{"type":603,"value":14727},"也许任务最早的思想源头来自现实。\n如果说是现实中的“任务”概念，历史倒是很明确的。那些管理学大师们主张把工作分拆成一个又一个独立的模块，每个模块自然由许多任务组成。把这些任务分解到人头上，就是成功的管理了。\n但这种官僚而枯燥的管理方式，显然不应该是任务设计的起源。\n你们有谁觉得拿到每周工作任务表的时候觉得特高兴特好玩么？没有吧？\n你们会因为工作任务特复杂特有挑战性觉得充满了乐趣么？不会吧？\n明明工作也有行动啊。明明工作完了也能得到报酬啊。\n为什么工作就不好玩呢？\n但是在游戏里接到一排复杂的任务的时候，我们就会觉得好玩。\n应该这么说，游戏任务设计借鉴了管理学上的模型，但是其发展自有其源流，可谓殊途同归。\n所以，我们还是要沿着游戏本身的发展脉络，回溯到“任务”是隐含条件的古早时代中去。",{"type":597,"tag":606,"props":14729,"children":14730},{},[14731],{"type":597,"tag":1080,"props":14732,"children":14733},{},[14734],{"type":603,"value":14735},"见山是山：没有任务的时代",{"type":597,"tag":606,"props":14737,"children":14738},{},[14739],{"type":603,"value":14740},"早期的游戏当然没有任务，这似乎是个不容置疑的事实。\n最早的游戏，不管是太空侵略者还是Pong，包括Atari上那些东西，都只是光点、线段和色块，连显示文字的能力都不太有，自然没有任务的空间。\n超级玛丽的屏幕左上角不会有个对话框，告诉你你还需要踩死3只蘑菇才能获得5个金币的报酬。\n而在勇者斗恶龙里面，国王也只会让你去打倒恶龙，不会告诉你“你打倒恶龙需要屠龙剑，我在小地图上已经把它的位置标出来了，你顺着雷达走去就好”。\n至于游戏的另外来源呢？那些桌面游戏也同样没有任务。\n战棋游戏贡献的核心是数值系统和规则表。桌面角色扮演游戏则带来了迷宫、成长和宏大华丽的叙事。\n不管你是爱玩龙与地下城还是魂斗罗，你都不会见到类似今天主流游戏这样的任务。\n那时候的快乐似乎也很纯粹——\n稍等。\n早期的游戏确实没有任务，但是，这并不代表早期游戏没有“目的”。\n即便机能受到限制，即使整个行业都还出于萌芽期，但是游戏带给人们的快乐其实是没有变化的。\n比如我们玩超级玛丽这样的横板动作游戏，最初始的动力就是“我要打通这一关”。如果换成任务制的语言，就是“你要不停地反复到达屏幕的尽头”，以便看到更多的关卡、敌人和BOSS。\n当然，打通这一关以后，我的目标立刻就会变成“我想打通整个游戏”。那我就需要知道，“杀死库巴大王可以看到一段和公主的动画小电影”，或者“在地下城关卡有隐藏的房间到达就可以跳关”。\n然后，假定我没满足于打通关，还想用尽可能少的命打通关，我就需要想办法利用游戏的系统，比如“吃100个金币奖励一条命”、“吃蘑菇可以变大”、“吃花可以喷火”。这同样可以换成任务制的语言，比如“收集57/100个金币，获得自动复活药”。\n接着呢？我的朋友打得比我还好，他的分数比我更高，我还想打高分。我就必须开始研究杀死什么样的怪物可以获得怎样的分数回报好向他炫耀。那么，“一只乌龟跳一下等于100分”的任务回报也是可行的了。\n你看，如果用现代任务设计中的语言，完全可以把整个超级玛丽的系统都翻译过来。早期游戏没有任务，却并不代表他们没有今天游戏这些任务的要素。他们只是没有使用“任务设计”这种工具而已。如果是RPG类游戏，那就更方便了：不管是魔法门还是勇者斗恶龙，都可以非常容易地把冒险日志和攻略转化成任务化的语言。\n早期游戏的设计师们同样深谙“必须让玩家知道现在他应该要干什么”这个道理。只是在他们的时代中，游戏还是一件很新锐的玩具，并不需要掌握那么多的用户，也不需要努力让所有人都来理解游戏的目的，只要他们自己觉得“展示成这样玩家就能理解了吧”就可以了。\n早期游戏有游戏目的，只是他们还没有任务制来让玩家掌握目的；他们希望玩家自己可以探索出这些目的来。\n他们见山是山，是因为山在那里，而且也只需要接待懂得如何爬山的人就好了。",{"type":597,"tag":606,"props":14742,"children":14743},{},[14744],{"type":597,"tag":1080,"props":14745,"children":14746},{},[14747],{"type":603,"value":14748},"见山不是山：任务导向勃发的年代",{"type":597,"tag":606,"props":14750,"children":14751},{},[14752],{"type":603,"value":14753},"大概是从90年代中期开始，无论是东方还是西方，无论是家用机还是PC游戏，大家都开始逐渐采用任务设计了。\n任务的出现不是一个一夜之间的事件。现在回头看那个时期的游戏，可以发现有大量的“复合设计”：普通的主线剧情或日志和以列表形式出现的任务同时出现在游戏的系统里。\n玩家可以直接点击任务名获取单个任务的详情，也可以阅读庞大的日志，或者直接冲进游戏的关卡里打打杀杀。如果说上面的说法不太具体，你回忆一下暗黑破坏神（Diablo）或者博得之门（Baldur’s Gate），就能立刻明白“混合”这种说法的含义。日系游戏则更偏爱“列表”式的任务呈现方法，玩家需要到一个统一的“任务中心”去获取和完成任务，这种思路被大规模继承到了后来的网络游戏里，很多网络游戏都把任务设计集中在一点上完成。\n然后，在不知不觉中，游戏中的任务提示越来越明确，任务获得和完成越来越清楚，回报也越来越明显了。不光是角色扮演游戏有了任务和目标，模拟游戏、即时战略游戏、FPS和TPS射击游戏、动作游戏也纷纷从善如流加入了任务和目标。不管哪个游戏，只要打开菜单，总有个地方告诉你“你现在应该去干什么”。\n任务制被大规模采用的主要原因，其实并不是任务制本身有多少优势；而是游戏已经逐渐复杂化了，谁也不敢保证玩家能通过自己的探索就理解游戏所有的设计。\n有很多业内人士指出，那是因为现代游戏发展得太复杂了。他们觉得应该回到游戏的本原去，做些独立游戏，做些大家一看就会玩的东西，才是正确的道路。评论家和华尔街追捧那些独立游戏，追捧各种各样的创意小游戏，对360和PS3上的作品嗤之以鼻。\n真的吗？难道电影业会因为一个长镜头到底无法处理庞大的信息量，就指责说这是电影导演和编剧的错误，他们试图用电影承载太多的内容，所以整个电影业都应该回到用摄影机拍摄一些五分钟短片的年代去，以便可以继续用一个长镜头处理到底？\n显然不是。\n任务是一种如此好用的特殊语言，5分钟就能教会一个从没玩过这个游戏的人这个游戏的规则，并指导着他一步一步把这个游戏打通。\n任务时代的高潮出现在进入21世纪以后，到魔兽世界的时代到达巅峰。\n在魔兽世界和怪物猎人这样的游戏中，所有的设计都被任务统一起来，你不接任务几乎无法进行游戏。不管是叙事、系统还是教学，一切都有相对的任务进行指引。GTA这样的沙盘游戏更是整个就以任务展开剧情，不完成任务连地图都不会开启。\n同样，这个时代的其他游戏也在进行着疯狂的任务化和目标化：每个FPS游戏都有目标列表，多数的关卡都可以选择，就连赛车游戏也充满了限定条件的任务挑战模式。",{"type":597,"tag":606,"props":14755,"children":14756},{},[14757],{"type":603,"value":14758},"但是，并不是任务本身好玩，而是任务想要达成的那些目的好玩。一旦搞错了因果关系，任务设计很容易滑入到“为了任务而任务”的歧途上去。",{"type":597,"tag":606,"props":14760,"children":14761},{},[14762],{"type":597,"tag":1080,"props":14763,"children":14764},{},[14765],{"type":603,"value":14766},"见山只是山：重新淡化任务的年代",{"type":597,"tag":606,"props":14768,"children":14769},{},[14770],{"type":603,"value":14771},"把所有东西都任务化没问题吗？不要紧的，没有问题！\n——但就算这么说，在看到伦敦：地狱门里面用程序代码来生成任务的时候，人们心里也会忍不住打鼓吧。\n任务的泛滥很快就产生了一些负面效果。\n在任务列表把所有游戏内容都规范化、标准化的同时，“乏味”这个魔鬼也开始进入了这个系统。当我们看到任务列表越来越长，而每个任务的格式也越来越相似的时候，忍不住就有了“这是工作”的错觉。一旦玩家有了“这是工作”的错觉，他们就会抛弃这些设计。\n尤其是在某些网络游戏和纯任务制游戏中，这种乏味的感觉到达了顶峰。\n我就不多举例子了，但是你们每个人脑海中肯定都有一大排无聊到爆的纯任务制游戏和网络游戏列表。\n在这样的游戏中，典型的任务就是“打死多少个某种怪”、“打死多少个某种怪然后从他们身上拿回掉落”、“打死某种怪的BOSS”，然后如此重复循环。如果游戏的怪物设计有点特色还好，如果所有的怪物只有数值不同，打通这种游戏简直是折磨。\n这种游戏多了当然会产生反弹。\n在发售日期距离现在更近的游戏中，我们已经不太经常看到“任务中心”或者“关卡列表”这种东西了；取而代之的是重新复活的“发现设计目标”模式。\n很多任务是通过提示出现的。如果玩家没有完成过某个特定操作，或者没有发现线索，这个任务就不会在任务列表里出现。就算是魔兽世界式的问号、感叹号这样的明显提示，设计师在后来的版本中也在努力增加着任务本身的变化性，把任务获得、推进、完成的方法变得更为多样。\n与其说是“淡化”任务，不如说是大家对任务制设计的理解已经更加精进，更加娴熟。\nFNV就是一个好例子：虽然基本的设计元素仍然是那些任务，但是任务的变化已经更为多样，入口、出口和完成方式也更加变化多端。现代FPS/TPS游戏也不再像以前那么强调关卡和目标的概念，而更喜欢用类似成就的被动处理方法来提示玩家正确的玩法。\n同样，类任务设计也大行其道。在网络游戏里面，厂商们已经忍不住把任务从策划手里拿了出来，改名叫作“活动”、“每日”和“运镖”之类五花八门的名目。XBOX360的成就和PS3的奖杯只是换了个名字，两者其实也是明显的类任务设计。就连往常应该毫无“任务”可言的对战FPS/TPS游戏，也忍不住加入了升级、连杀奖励、称号这样的类任务系统，鼓励大家带着目的去打每一盘对战。\n总之，任务还是任务，在设计师的脑海和他们的工作文档中，大概还是这么组织的；只是，他们正在努力让用户看不到那个乏味的大任务列表。",{"type":597,"tag":606,"props":14773,"children":14774},{},[14775],{"type":597,"tag":1080,"props":14776,"children":14777},{},[14778],{"type":603,"value":14779},"回到概念",{"type":597,"tag":606,"props":14781,"children":14782},{},[14783,14785,14790,14792,14797,14799,14804,14806,14811],{"type":603,"value":14784},"正如上面的简史所说，",{"type":597,"tag":1080,"props":14786,"children":14787},{},[14788],{"type":603,"value":14789},"任务是一个被完全“凭空创造”出来的概念",{"type":603,"value":14791},"。\n就如电影和电视中的“镜头”，或者戏剧创作中的“幕”和“场”，是创造者为了创作方便，也为了观众接受方便而创作的概念。\n也就是说，",{"type":597,"tag":1080,"props":14793,"children":14794},{},[14795],{"type":603,"value":14796},"“任务”无论对故事、对可玩性还是对互动来说，其实都是不必要的",{"type":603,"value":14798},"。\n导演用自然的一个长镜头到底，理论上也能拍电影——他们要真这么干了还能成为大师。当然，你做一个没有任务的游戏成不了大师。\n但是，人类和动物的区别就在于我们可以使用工具。“任务”正是我们这个行业所创造出来的最犀利的工具之一，这种设计理念甚至已经不仅仅限于游戏之中了，渗透到了现代社会的许多角落中去。\n顺便说一句，要知道我们游戏行业已经创造了多少超乎常理的设计概念了？去看看刚刚出了DVDRIP的电影《Scott.Pilgrim.Vs.The.World》吧。对游戏没有了解的人不可能知道为什么群众给这片子在IMDB上投了8.0分的。\n一个好的游戏设计师，应当在心中时刻有着“任务”的概念；但是他不应当被任务的固有概念所束缚。\n当他需要剧情的时候，他应该能够把各种各样的剧情和故事熟练拆解成各种所需要的任务形式，并分配下去；当他需要游戏性的时候，他也应当能够将这种游戏性所需要的所有知识和操作，分散在不同的任务和目标之中。\n",{"type":597,"tag":1080,"props":14800,"children":14801},{},[14802],{"type":603,"value":14803},"让玩家每时每刻都知道他应当去做什么，这就是整个任务设计的核心。",{"type":603,"value":14805},"\n事情的关键并不是设计任务。\n你不应该为了设计任务而设计任务。\n那些充斥在三流游戏中的草率任务，正是在这种“我们需要500个任务”的粗暴指示下产生的。\n在如今的时代，如果一个任务只是因为“我需要填满任务列表”而存在，那这个任务就应该毫不犹豫地被删除。\n作为一个游戏设计师，你应该要保证：",{"type":597,"tag":1080,"props":14807,"children":14808},{},[14809],{"type":603,"value":14810},"你所设计的每一个任务，都有明确的设计目的。因为任务只是表象，设计目的才是真正的血肉。",{"type":603,"value":14812},"\n哪怕是最不起眼的“去杀10条狼”的Farm任务，实际上也是可以有设计目的的。我将在接下来的“任务的设计方法”一节中深入这个问题。",{"type":597,"tag":606,"props":14814,"children":14815},{},[14816],{"type":603,"value":14817},"照例，我知道你们都不爱看的枯燥无聊的理论文章……第二部分。说真的我没想到这个命题竟然能扯出这么多，写起来收不住了……所以这篇只是设计方法的（上）。",{"type":597,"tag":606,"props":14819,"children":14820},{},[14821],{"type":597,"tag":1080,"props":14822,"children":14823},{},[14824],{"type":603,"value":14825},"工具箱",{"type":597,"tag":606,"props":14827,"children":14828},{},[14829],{"type":603,"value":14830},"任务设计的方法说简单很简单，就是对各种设计手法的灵活使用。说复杂也复杂，因为任务的种类实在是多种多样。一个像魔兽世界这样庞大的游戏起码能分类出几十种不同的任务形式，如果细化到设计师们交给程序的需求列表这种程度，这个数字肯定会增加到三位数或者四位数。",{"type":597,"tag":606,"props":14832,"children":14833},{},[14834],{"type":603,"value":14835},"要把多种多样的设计目的、游戏内容和故事情节分解成任务的形式，你必须先对任务这个工具箱本身了若指掌。那些大号的电钻和锤子要放在最下面，钳子和螺丝刀在中层，螺母和螺钉装在顶层的塑料袋里。",{"type":597,"tag":606,"props":14837,"children":14838},{},[14839],{"type":603,"value":14840},"所以，在正式进入主题之前，我先说一下这个工具箱的各层结构。",{"type":597,"tag":606,"props":14842,"children":14843},{},[14844],{"type":603,"value":14845},"要解决的第一个问题是“这是个什么样的任务”，由设计目的决定的是任务的执行方式。我这个任务是要用来指引用户呢，满足用户的收集欲望呢，提供一种全新的游戏内容呢，还是方便关卡制作呢？从这个角度去思考任务的执行方式，就能把纷繁复杂的任务形式梳理清楚。",{"type":597,"tag":606,"props":14847,"children":14848},{},[14849],{"type":603,"value":14850},"接下来的问题是“用户怎么获得这个任务”，由展示方法决定的是任务的逻辑结构。怎么把一个任务呈现给用户？把怎样的任务呈现给什么类型的用户？怎么给用户提供对一个任务的期待？在逻辑结构层来解决。",{"type":597,"tag":606,"props":14852,"children":14853},{},[14854],{"type":603,"value":14855},"最后的一个问题是“各种各样的任务怎么管理”，由管理方法决定的是任务的分层模型；对玩家来说，这个分层模型也同时决定了他所看到的界面组织形式。",{"type":597,"tag":606,"props":14857,"children":14858},{},[14859],{"type":603,"value":14860},"从这里再前进一步就是“任务相关的制作资源怎么管理”，这个说起来就太枯燥乏味了，我这篇文章可能不会提到。",{"type":597,"tag":606,"props":14862,"children":14863},{},[14864,14866,14873],{"type":603,"value":14865},"最后一步是“预先告知用户任务回报”，这是个博大精深的话题，就算谈到我也只会是泛泛而谈。如果真要深入论述，恐怕得等到这架",{"type":597,"tag":886,"props":14867,"children":14870},{"href":14868,"rel":14869},"https://necromanov.wordpress.com/",[890],[14871],{"type":603,"value":14872},"战略航空军的旗舰",{"type":603,"value":14874},"上出现一篇叫“游戏数值设计”的理论性文章以后了。",{"type":597,"tag":606,"props":14876,"children":14877},{},[14878],{"type":603,"value":14879},"这些设计工具出现的时间有早有晚，有些仍然在发展中，有些工具已经产生了各种各样的变体。但是无论出现早晚，每种工具都有其优势和劣势。考虑到这是个进步非常迅速变化也非常快的领域，如果读者有什么意见也请自由发表。",{"type":597,"tag":606,"props":14881,"children":14882},{},[14883],{"type":597,"tag":1080,"props":14884,"children":14885},{},[14886],{"type":603,"value":14887},"执行方式：从设计目的出发",{"type":597,"tag":606,"props":14889,"children":14890},{},[14891],{"type":603,"value":14892},"任务的执行方式设计是现代游戏设计中最多变，也是最需要创造力的范畴。",{"type":597,"tag":606,"props":14894,"children":14895},{},[14896],{"type":603,"value":14897},"在执行方式这节中，我不打算像那些典型的“游戏教学书籍”那样用庞大枯燥的列表淹没你们——看那些“玩法教学书籍”是绝对学不会怎么设计的。同样，我也不需要重复一遍各种流行游戏中的任务设计，鹦鹉学舌的文章没有任何意义可言。与其有空看这种无意义的文章，还不如随便装个游戏抓紧时间打一打。",{"type":597,"tag":606,"props":14899,"children":14900},{},[14901],{"type":603,"value":14902},"我会从“任务的设计目的”入手，从设计者和玩家两方面的动机出发把任务分成六个大类以及一个灵活的附加类。",{"type":597,"tag":1321,"props":14904,"children":14905},{},[14906,14913,14920,14927,14934,14941,14948],{"type":597,"tag":807,"props":14907,"children":14908},{},[14909],{"type":597,"tag":1080,"props":14910,"children":14911},{},[14912],{"type":603,"value":11381},{"type":597,"tag":807,"props":14914,"children":14915},{},[14916],{"type":597,"tag":1080,"props":14917,"children":14918},{},[14919],{"type":603,"value":11402},{"type":597,"tag":807,"props":14921,"children":14922},{},[14923],{"type":597,"tag":1080,"props":14924,"children":14925},{},[14926],{"type":603,"value":11448},{"type":597,"tag":807,"props":14928,"children":14929},{},[14930],{"type":597,"tag":1080,"props":14931,"children":14932},{},[14933],{"type":603,"value":11473},{"type":597,"tag":807,"props":14935,"children":14936},{},[14937],{"type":597,"tag":1080,"props":14938,"children":14939},{},[14940],{"type":603,"value":11489},{"type":597,"tag":807,"props":14942,"children":14943},{},[14944],{"type":597,"tag":1080,"props":14945,"children":14946},{},[14947],{"type":603,"value":11497},{"type":597,"tag":807,"props":14949,"children":14950},{},[14951],{"type":597,"tag":1080,"props":14952,"children":14953},{},[14954],{"type":603,"value":11513},{"type":597,"tag":606,"props":14956,"children":14957},{},[14958],{"type":603,"value":14959},"由于我国是游戏设计后发国家，有些设计概念用中文表述可能不是太清晰，所有的类型都带个英文命名……总之你们知道Farm任务指代的是“重复作业”而不是“种田”就好了。",{"type":597,"tag":606,"props":14961,"children":14962},{},[14963],{"type":597,"tag":1080,"props":14964,"children":14965},{},[14966],{"type":603,"value":14967},"MoveTo型任务（移动任务）",{"type":597,"tag":606,"props":14969,"children":14970},{},[14971],{"type":603,"value":14972},"人类是这样一种生物：他们声称自己喜欢自由。但对大多数人来说，如果真的把自由的选择权给了他们，他们就会不知所措。",{"type":597,"tag":606,"props":14974,"children":14975},{},[14976],{"type":603,"value":14977},"所以，1990年的每个游戏中，都有庞大的地下城和分支对话。2010年的绝大多数游戏中，你只需要跟着任务黄点的指示，从一个黄点跑到下一个黄点。这是一个有点冷酷的事实，多数人并不是真的喜欢自由，或者喜欢选择——他们只是装作喜欢而已。",{"type":597,"tag":606,"props":14979,"children":14980},{},[14981],{"type":603,"value":14982},"所以我们必须要给这些人设计MoveTo型任务。别给他们选择权，直接告诉他们现在应该去哪里吧。",{"type":597,"tag":606,"props":14984,"children":14985},{},[14986],{"type":603,"value":14987},"MoveTo型任务是所有任务形式中最原始的一个，它的目的就是让玩家移动，或者说“跑路”。不管是魔戒的“到魔多去销毁戒指”还是西游记的“到西天去取经”，都是典型的Moveto任务。超级玛莉要从左到右突破所有关卡，雪人兄弟不往上冲就会被拖死，几乎所有FPS都要奔向一个又一个Checkpoint，这些也都是Moveto任务。从广义上来讲，甚至那些指示玩家如何按键移动人物、如何使用鼠标/手柄的教学目标都是Moveto类别的一种。",{"type":597,"tag":606,"props":14989,"children":14990},{},[14991],{"type":603,"value":14992},"它的设计目的也非常显而易见：指引玩家行动，展示游戏内容。这个目的类型几乎和整个游戏史一样久远：既然你设计了游戏，当然要告诉玩家里面有些什么吧！",{"type":597,"tag":606,"props":14994,"children":14995},{},[14996],{"type":603,"value":14997},"对玩家来说，完成MoveTo任务的目的是看到更多的没有看过的新内容；对设计者来说，MoveTo任务的目的除了展示玩家没有看过的新鲜设计内容之外，还要起到控制任务复杂度、关卡和脚本位置、Debug等等设计各种规范化的重要作用。在完成一个MoveTo任务之后，我们几乎可以笃定玩家必定在某个位置——这实在是太适合作为一段脚本的开头了。同样，对测试和Debug人员来说，移动任务也起到了重要的降低工作复杂度的作用——几乎是各种类沙盘游戏中唯一一个能起到该作用的设计手段。你不知道玩家什么时候去打哪里的怪，你也不知道玩家会怎么理解一个谜题，但是一个移动任务的结束地点肯定是个固定点。",{"type":597,"tag":606,"props":14999,"children":15000},{},[15001],{"type":603,"value":15002},"“这不都是废话吗！”",{"type":597,"tag":606,"props":15004,"children":15005},{},[15006],{"type":603,"value":15007},"肯定有好多读者要这么说了吧……且慢，且慢。从这个简单的事实陈述里面，能够导出一个很重要的问题，我把这个事实陈述换种说法看看。",{"type":597,"tag":606,"props":15009,"children":15010},{},[15011],{"type":603,"value":15012},"“如果玩家跟着这种任务移动到了新地点，却没有新的游戏内容呢？”",{"type":597,"tag":606,"props":15014,"children":15015},{},[15016],{"type":603,"value":15017},"现在你看到问题所在了。设计师设计Moveto任务除了指引之外，还有一个规范任务行动区间的作用；而玩家则不能理解这种作用，他们会觉得一段看不到任何内容的纯跑路是非常无聊枯燥的。",{"type":597,"tag":606,"props":15019,"children":15020},{},[15021],{"type":603,"value":15022},"事实也是如此。偶尔做一两个还好，如果连续几个任务都是纯跑路，路上没有任何游戏内容，哪怕报酬再好，玩家也是很烦躁的。从根本的设计目的上来说，跑路任务就不应该是用来消耗玩家时间的。成天让他在毫无内容变化的地方跑来跑去，不枯燥才怪呢！你能怪玩家想要自动跑路吗？你能怪他想要传送系统吗？显然不能。这甚至不能用回报来加以平衡；毕竟跑路的过程中，玩家什么也没干。你可以偶尔给玩家大笔的横财，但你不能老给他横财，长此以往必将吊起玩家的口味，让你想给他真正的回报的时候也没得可给。",{"type":597,"tag":606,"props":15024,"children":15025},{},[15026,15028,15033],{"type":603,"value":15027},"从这个简单的陈述中，我们可以推论出现代MoveTo任务设计的指导思想：“",{"type":597,"tag":1080,"props":15029,"children":15030},{},[15031],{"type":603,"value":15032},"如果玩家不能看到任何新内容，就不要让他去做一个MoveTo任务",{"type":603,"value":15034},"”。",{"type":597,"tag":606,"props":15036,"children":15037},{},[15038],{"type":603,"value":15039},"用设计目的这个标准来看，许多传统的任务设计方式都是有问题的。比如说，一个任务做完了以后，为什么一定要跑路回去交？如果没有任何新内容或者下阶段展开的话，有必要吗？一个关系到多个相关NPC的连续任务，需要让玩家跑来跑去吗？有没有什么代替方法？如果还不行，那么你就需要给玩家提供方便的移动方式：载具、出租车、自动跑路、瞬间移动，什么都行。这不是“现代浮躁的玩家不懂得游戏性”，而是“你根本没有给玩家提供任何游戏性”，这两者之间的区别是显而易见的。",{"type":597,"tag":606,"props":15041,"children":15042},{},[15043,15045,15050],{"type":603,"value":15044},"而这条规则当然也可以反过来用：“",{"type":597,"tag":1080,"props":15046,"children":15047},{},[15048],{"type":603,"value":15049},"在有重要的新游戏内容的情况下，你必须用Moveto任务来保证这些内容不被玩家错过",{"type":603,"value":15034},{"type":597,"tag":606,"props":15052,"children":15053},{},[15054],{"type":603,"value":15055},"在这类情况下，MoveTo类型的任务则是绝对必要的，不能完全被方便移动方式所代替。最典型的用法，就如同介绍一个大型新场景给玩家的时候，最好能用MoveTo任务把你这个场景的各个设计要点交待清楚。一座主城需要让玩家了解各个功能区；一个副本需要让玩家了解各个关键设计所在；哪怕是一段大型的即时电影演出，玩家也需要观摩电影的指引。在这些情况下，不要用快速移动方式代替你的MoveTo任务；在可能的情况下，甚至可以限制玩家移动来保证BUG数量能够得到控制。回去交任务也并不是都是没有用的操作，有些时候交任务本身可能也是一个设计要点，这个例子就比如荒野大镖客RDR里面回家那一段的杰出演出。我们不应该对“快速移动”或者“自动跑路”这样的设计要素一棍子打死，而应该区分对待。",{"type":597,"tag":606,"props":15057,"children":15058},{},[15059],{"type":603,"value":15060},"那如果设计师一定要插入一段内容不太丰富的MoveTo任务呢？倒也不是不能设计，只要你改换一下任务的类型。",{"type":597,"tag":606,"props":15062,"children":15063},{},[15064],{"type":603,"value":15065},"我可以提供这么几个任务设计的例子。在通常的设计方法中，这些都被归类于不同的任务类别，甚至不同的游戏性；但如果从设计目的考虑，你会发现他们本质上都是MovTo类的任务。跑到某个地方采集一组药草，安装一个炸弹，拉动一个开关什么的，本质上有区别吗？其实没有。",{"type":597,"tag":606,"props":15067,"children":15068},{},[15069],{"type":603,"value":15070},"设计师有一段路必需要求玩家跑两遍->在这两遍路上产生不同的、无法跳过的敌人。用不同的敌人来制造差异性。",{"type":597,"tag":606,"props":15072,"children":15073},{},[15074],{"type":603,"value":15075},"设计师有一个大关卡必须要求玩家先到最里面然后再出来->在进去的时候是一个MoveTo任务，在脱出的时候是一个强制推进的MoveTo型任务，可能是有时间限制、炸弹、毒气、洪水，总之你自己去想吧。",{"type":597,"tag":606,"props":15077,"children":15078},{},[15079],{"type":603,"value":15080},"设计师希望控制玩家特定的移动路径，或者交待重要的NPC剧情/性格->把MoveTo任务改写成一个护送任务，这是MoveTo任务的一个子类型。让NPC沿着事先设好的固定点移动，同时控制玩家不能离开NPC过远。",{"type":597,"tag":606,"props":15082,"children":15083},{},[15084],{"type":603,"value":15085},"设计师不在乎玩家怎么移动，但希望玩家看到这个区域内所有的重要点->把MoveTo任务改写成一个多段的物品收集/地点到达任务。设定几个操作点，让玩家去完成特定的操作，同时完成区域的交待工作。这种任务虽然以收集、解谜甚至Farm的形式出现，但本质上还是MoveTo型任务。",{"type":597,"tag":606,"props":15087,"children":15088},{},[15089],{"type":603,"value":15090},"设计师有一个复杂的关卡，但他希望玩家能按顺序完成这个关卡->把一个单一目标的MoveTo任务改写成一个连续而拥有多段目标的MoveTo任务。拆开路点，让用户每时每刻都有个短路点等在前面。",{"type":597,"tag":606,"props":15092,"children":15093},{},[15094],{"type":603,"value":15095},"你可以从这个基础上发挥你的设计能力和创造力，继续改善你的设计。关键仍然是设计目的，只要不是拖延游戏时间，玩家就不会讨厌MoveTo任务。难道有人会讨厌看激烈的大场面？那还玩什么游戏啊。",{"type":597,"tag":606,"props":15097,"children":15098},{},[15099],{"type":603,"value":15100},"实际上，不管是出于叙事考虑、设计考虑还是测试考虑，几乎每个任务的第一步都会是一个MoveTo型任务，这也是我把这个类别放在第一位的原因。",{"type":597,"tag":606,"props":15102,"children":15103},{},[15104],{"type":597,"tag":1080,"props":15105,"children":15106},{},[15107],{"type":603,"value":15108},"Farm型任务（重复任务）",{"type":597,"tag":606,"props":15110,"children":15111},{},[15112],{"type":603,"value":15113},"设计师不应该用MoveTo任务来拖延游戏时间。那他们应该用什么工具呢？",{"type":597,"tag":606,"props":15115,"children":15116},{},[15117],{"type":603,"value":15118},"当然是Farm任务。我说的不是种田，Farm在这里也不当种田讲（虽然在目前最流行的开心农场和Farmville里，他们的“Farm任务”真的是在种田……但理论还是应该更普适一点）。",{"type":597,"tag":606,"props":15120,"children":15121},{},[15122],{"type":603,"value":15123},"那Farm任务到底是什么呢？",{"type":597,"tag":606,"props":15125,"children":15126},{},[15127],{"type":603,"value":15128},"Farm任务的历史同样非常久远，可以追溯到游戏的史前期，甚至比Moveto类型还要早。",{"type":597,"tag":606,"props":15130,"children":15131},{},[15132],{"type":603,"value":15133},"我们总是说“打怪练功”、“打怪练功”。早在卷轴滚动技术出现之前，人们就开始玩各种只有一个固定画面的游戏，并且在这个固定的画面上用几个像素点对抗另外一些几个像素点组成的太空侵略者们。然后他们开始玩各种动作游戏，这些游戏的主题仍然是打怪（或者被怪打，总之还是有怪的）。然后是射击游戏，还是打怪。然后是角色扮演游戏，这次不光是打怪，还有升级……总之，光一个打怪就能覆盖80%的游戏。",{"type":597,"tag":606,"props":15135,"children":15136},{},[15137],{"type":603,"value":15138},"那么，打怪能得到什么呢？对这个问题的思考产生了Farm任务。一开始设计师们只是简单地计算分数，鼓励玩家的虚荣心；但这种行为很快就不够了，玩家们需要更明确的回报，设计师们就开始在游戏里加入什么奖命啊、奖励武器啊之类的新花样。终于，那些RPG设计师们把这些东西包装成了标准范式。",{"type":597,"tag":606,"props":15140,"children":15141},{},[15142],{"type":603,"value":15143},"随着设计师们在“打怪”和“练功”两者之间建立了明确的关系，Farm任务也由此产生。通常认为，只要在这两者之间建立联系的任务，就是Farm任务。所有那些让你去杀7只鸡15头猪20个兽人45个德国佬然后给你金币银币美刀钞票的任务，也全都是Farm任务。如果在广义上放宽到“所有需要反复熟练操作的游戏”，那Farm任务几乎能覆盖100%的类型。",{"type":597,"tag":606,"props":15145,"children":15146},{},[15147],{"type":603,"value":15148},"为什么这么命名呢？理由也很简单。",{"type":597,"tag":606,"props":15150,"children":15151},{},[15152],{"type":603,"value":15153},"种田有什么特点？主要就是两条，第一条是“田每年都要种，反反复复的种”，第二条是“种瓜得瓜，种豆得豆”。",{"type":597,"tag":606,"props":15155,"children":15156},{},[15157],{"type":603,"value":15158},"Farm任务有什么特点？同样是两条，第一条是“重复进行一样的工作”（打怪为主），第二条是“你费了多少力和时间，就有多少回报”。",{"type":597,"tag":606,"props":15160,"children":15161},{},[15162],{"type":603,"value":15163},"换句话说，Farm任务的核心就是“重复”和“回报”。只要把握住这个核心要点，你就能轻易地识别出各种各样的Farm任务。",{"type":597,"tag":606,"props":15165,"children":15166},{},[15167],{"type":603,"value":15168},"而这些就是设计师们赖以拖延游戏时间的神兵利器。从一开始，就算没有Farm任务，游戏也很好玩，人们也要趴在电视/电脑/手机前面玩太空侵略者，超级玛丽，勇者斗恶龙，使命召唤和愤怒的小鸟。加上回报以后，群众不就会想要“多打一个任务”，“再多打一个任务”了吗？",{"type":597,"tag":606,"props":15170,"children":15171},{},[15172],{"type":603,"value":15173},"多完美啊。",{"type":597,"tag":606,"props":15175,"children":15176},{},[15177],{"type":603,"value":15178},"好，那么我们现在知道了设计师侧的设计目的是“拖延时间”。那么玩家呢？对玩家来说，“重复”除了拖延时间之外还有什么用处？",{"type":597,"tag":606,"props":15180,"children":15181},{},[15182],{"type":603,"value":15183},"这个也再明显不过了——有个成语叫“熟能生巧”。人们为何要不停玩一样的游戏呢？自然是因为他们越玩越好啊。游戏技巧的提高本身，就已经是一件非常强力的武器了，足以拉着一部分人在游戏面前反复尝试。如果这种技巧的提高还伴随着各种游戏数值的提高，他们就更忍不住了。",{"type":597,"tag":606,"props":15185,"children":15186},{},[15187],{"type":603,"value":15188},"他们提高技巧，开启新内容，挑战新内容，再提高技巧，如此反复。",{"type":597,"tag":606,"props":15190,"children":15191},{},[15192],{"type":603,"value":15193},"也就是说，Farm任务的设计目的也分两个方面：设计师想用这种设计拖延用户的游戏时间，把他们拴在自己的游戏上；另一方面是用户，他们希望通过这些Farm任务熟悉游戏和熟练操作。",{"type":597,"tag":606,"props":15195,"children":15196},{},[15197],{"type":603,"value":15198},"看起来真是太完美了。设计师们拖延了时间，用户自己也乐意，大家还有额外回报。加个没啥实际用途的升级槽，玩家就该高兴死了吧？",{"type":597,"tag":606,"props":15200,"children":15201},{},[15202],{"type":603,"value":15203},"那么……喜欢反复完成“干掉15头迅猛龙/干掉15头老虎/干掉15头豹子”这类任务的人请举手。有人吗？喂，举手啊？",{"type":597,"tag":606,"props":15205,"children":15206},{},[15207],{"type":603,"value":15208},"好吧，为什么现在的Farm任务越设计越烦人了呢？明明是这么一个你情我愿的设计模式啊。它怎么就越做越无聊了呢？",{"type":597,"tag":606,"props":15210,"children":15211},{},[15212,15214,15219],{"type":603,"value":15213},"Farm任务之所以能击中大量玩家心中的软肋，其原因和种田一样：“",{"type":597,"tag":1080,"props":15215,"children":15216},{},[15217],{"type":603,"value":15218},"付出总有回报",{"type":603,"value":15220},"”。付出努力，收获与之相应的回报，永远是最令人兴奋的YY故事主线。",{"type":597,"tag":606,"props":15222,"children":15223},{},[15224],{"type":603,"value":15225},"Farm任务比现实有一个最大的优点：游戏里的回报从不赖账。现实是难以预测的，谋事在人，成事在天；游戏则是个非常公平的裁判。在完成了Farm任务以后，玩家可以得到非常确实的回报，系统绝不会贪污，不会打官腔，也不会踢皮球，该升级升级，该捞钱捞钱。",{"type":597,"tag":606,"props":15227,"children":15228},{},[15229],{"type":603,"value":15230},"这种回报有一种短暂而强烈的上瘾性，几乎我们每个人都体会过那种看着回报一次次增加或者角色一次次成长的兴奋感，脑内的兴奋物质——大概是内啡肽吧，如果不是请纠正——大量分泌。如果你不太玩游戏，那么就想象看着自己投资的股票市值不停上升的景象吧，带来的快感和上瘾性有其相似之处。对于初次接触游戏的人，这种上瘾性尤其可怕——在现实中可能一辈子也获得不了的成就感和安全感，在游戏里只用几天就能满足了。所以那些第一次玩网络游戏的人纷纷沉迷，办公室里的白领们忙着偷菜，Facebook上的洋人们在Farmville面前纷纷垂首……谁也不是内啡肽的对手。",{"type":597,"tag":606,"props":15232,"children":15233},{},[15234],{"type":603,"value":15235},"但如果你想做一个真正了不起的游戏，你就不能过于依赖这种廉价的Farm成瘾性，它更不该是你作为一个游戏设计师的唯一依赖。把猴子关在笼子里，他每次去拿同样的香蕉都会感到兴奋，用户可不会……好吧，至少有很大一部分用户会逐渐产生抗药性。",{"type":597,"tag":606,"props":15237,"children":15238},{},[15239],{"type":603,"value":15240},"确实，有些人会一直满足于这种成瘾性，但也有很多人不会。对游戏了解不多的人往往对这种上瘾性大惊失色，从而对此口诛笔伐，指责电子海洛因；一些对游戏浅尝辄止的轻度用户体验过上瘾性后对它产生了抗体，却会觉得“游戏什么的不过如此大同小异”。",{"type":597,"tag":606,"props":15242,"children":15243},{},[15244],{"type":603,"value":15245},"说实话，连猴子都能抄来一个Farm-升级系统，还要游戏设计师干什么？那可不是你的本事，而是用户大脑中内啡肽的本事啊。集中36只猴子，里面肯定有一只能押中轮盘赌的数字；如果你只是简单地做了打怪升级的Farm任务，那就意味着你和猴子一样，完全把运气寄托在用户身上，希望他们中的绝大多数人都还没对这种兴奋物质分泌模式产生抗性。",{"type":597,"tag":606,"props":15247,"children":15248},{},[15249],{"type":603,"value":15250},"如果你觉得这样就够了，当然也可以。最近的一只猴子公司估值都有51亿美元了，可以得很呢……但既然这是一篇设计理论文章，就该写出点儿比猴子转轮盘赌更多的东西来。",{"type":597,"tag":606,"props":15252,"children":15253},{},[15254],{"type":603,"value":15255},"那除了“重复”和“回报”以外，玩家还想要什么？再想想之前那句话，“熟能生巧”。",{"type":597,"tag":606,"props":15257,"children":15258},{},[15259],{"type":603,"value":15260},"没错，他们还要技能的提高。如果有技能的提高，没有回报他们都一遍遍玩游戏。让我们再看看前面那几个Farm任务。猎龙，猎虎，猎豹。玩家完成这几个任务之后，技术提高了吗？对游戏内容更熟悉了吗？除了那点银币和经验他们得到别的了吗？",{"type":597,"tag":606,"props":15262,"children":15263},{},[15264],{"type":603,"value":15265},"现在你该知道这几个Farm任务的问题出在哪里了吧。",{"type":597,"tag":606,"props":15267,"children":15268},{},[15269],{"type":603,"value":15270},"既然是重复一样枯燥乏味的操作，技术不仅得不到任何提高，就算提高了也没用的话，就别怨用户上外挂啊！",{"type":597,"tag":606,"props":15272,"children":15273},{},[15274],{"type":603,"value":15275},"Farm任务要做好，关键问题并不是你这个Farm任务本身的文本或者程序脚本写出高潮来，而是你这个游戏打怪部分本身必须有趣，而且有深度。",{"type":597,"tag":606,"props":15277,"children":15278},{},[15279],{"type":603,"value":15280},"深度可以分成两个方面。",{"type":597,"tag":606,"props":15282,"children":15283},{},[15284,15286,15291],{"type":603,"value":15285},"第一，",{"type":597,"tag":1080,"props":15287,"children":15288},{},[15289],{"type":603,"value":15290},"玩家的技术可以提高",{"type":603,"value":15292},"。这里有好多个方面可以提高，他的角色数值可以提高；他本人的操作能力可以提高；他对游戏的知识也可以提高。",{"type":597,"tag":606,"props":15294,"children":15295},{},[15296,15298,15303],{"type":603,"value":15297},"第二，",{"type":597,"tag":1080,"props":15299,"children":15300},{},[15301],{"type":603,"value":15302},"这个提高必须有用，而且总是有用",{"type":603,"value":15304},"。这一点总是被很多设计师忽略，所以我想强调一下。如果提高知识对游戏进程/游戏效率并无影响的话，那它就不是一个提高；数值和操作能力也是一样的。如果提高造成的效果近乎可以忽略——干掉这个设计要素。反正你不干掉它玩家也不会在乎，谁在意我杀一个怪是用4.8秒还是4.6秒？",{"type":597,"tag":606,"props":15306,"children":15307},{},[15308],{"type":603,"value":15309},"要做到这两点，你设计的游戏毫无疑问会拥有一张“成长阶梯表”，这是一件比猴子画的升级槽复杂而有趣得多的东西。你的游戏有多少种怪物，这些怪物有多少相关知识，玩家要消灭这些怪物需要多少操作能力和角色数值，和他们对应的有多少Farm任务，这些Farm任务完成以后能获得多少种不同的回报……等等等等。",{"type":597,"tag":606,"props":15311,"children":15312},{},[15313],{"type":603,"value":15314},"现在这些Farm任务就是有明确设计目的了：它们就是引导玩家通向这张成长表的桥梁。",{"type":597,"tag":606,"props":15316,"children":15317},{},[15318],{"type":603,"value":15319},"只要保证玩家能提高技能，而且这些技能对他进一步玩游戏有帮助，Farm任务就没有问题。甚至都不用Farm任务的额外奖励，玩家们自己都会去找最有效率的打怪升级方式；如果游戏设计能做到这个方式随着“成长阶梯表”不停变化的话，整个游戏就不会显得那么枯燥乏味。",{"type":597,"tag":606,"props":15321,"children":15322},{},[15323,15325,15330],{"type":603,"value":15324},"游戏设计师们务必要记住，你要在Farm任务中设计的是",{"type":597,"tag":1080,"props":15326,"children":15327},{},[15328],{"type":603,"value":15329},"一种需要不断“重复”的游戏内容，它应当是经得起不断重复的",{"type":603,"value":758},{"type":597,"tag":606,"props":15332,"children":15333},{},[15334],{"type":603,"value":15335},"照例，也有几点补充。",{"type":597,"tag":606,"props":15337,"children":15338},{},[15339],{"type":603,"value":15340},"是不是要做出游戏深度，就一定要把Farm任务做得很难或者很复杂？**–>**不一定。单纯地提高难度往往只是增加枯燥而已，单纯地提高操作复杂度肯定只是增加乏味。你只需要保证“相应的难度有相应的回报”就可以了。让没有技能或者厌恶复杂度的玩家接受低风险的回报，让喜欢挑战和提高技能的玩家去面对高风险高回报，别盲目地做那些对深度玩家好玩但是难死庸手的东西。如果要做，给他们相应的高回报，这样也能顺利地把玩家分开档次。",{"type":597,"tag":606,"props":15342,"children":15343},{},[15344],{"type":603,"value":15345},"是不是能够通过调整随机性来改善Farm任务的重复性？我加点状态变化啦随机怪物啦随机掉落啦什么的怎样？**–>**不是。务必记住，深度只是第二级的目的，在你实现这个目的之前，要先保证第一阶段“付出总有回报”的Farm任务公式没有受到破坏。种田的特点是固定的投入和固定的产出，就算有随机的天灾也应当能够以人力进行应对。不要用你对随机性的偏爱破坏Farm部分，那是另外一个设计目的完全不同的类型任务：Hunt任务的范畴。当然，可以有意外惊喜，也可以有累计奖励，没有玩家讨厌意外惊喜或者累积奖励。但是，别做过分的随机性。Farm的用户最讨厌天灾了。如果非要有天灾，给他们设计对策，掌握对策就能战胜的天灾立刻就变成游戏深度了。",{"type":597,"tag":606,"props":15347,"children":15348},{},[15349],{"type":603,"value":15350},"如果一定要做无聊的Farm任务来拖延时间该怎么办？开发周期来不及了呀！**–>**无论如何，加点儿调剂。改变一下回报的种类，把不同的Farm任务明确分开。玩家其实不怕重复做一件事，他们更怕“只能做一件事”，例如最终幻想13里面的刷乌龟……一旦一个游戏只能做一件事，这不仅是玩家不满的源泉，更是对整个游戏制作资源的极大浪费，游戏设计师们应该感到耻辱。所以，在成长阶梯表上，时刻考虑多提供几个不同方向的Farm任务作为选择。甚至，不同的打法给不同的回报。只要你的“付出就有回报”这个原则是确定的，根据完成方法的不同给不同的回报并不会降低Farm本身带来的乐趣。还不行……偶尔插点纯正内啡肽吧。但如果真的要插，这次就千万别给玩家他还要Farm多久的提示了，他爱Farm多久Farm多久——永恒之塔的100遍Farm任务恐怕是游戏设计史上最愚蠢的设计之一了。",{"type":597,"tag":606,"props":15352,"children":15353},{},[15354],{"type":603,"value":15355},"这次还是两个重要大类……继续继续。常见任务种类这就差不多了，剩下的2+1种其实都是特殊用途了，还得再整理整理思路。",{"type":597,"tag":606,"props":15357,"children":15358},{},[15359],{"type":597,"tag":1080,"props":15360,"children":15361},{},[15362],{"type":603,"value":15363},"Collect型任务（收集任务）",{"type":597,"tag":606,"props":15365,"children":15366},{},[15367],{"type":603,"value":15368},"说完了MoveTo型的任务和Farm型的任务，接下来可以说点确实没啥内涵的东西了。Collect任务就是任务里最好设计的一类。",{"type":597,"tag":606,"props":15370,"children":15371},{},[15372],{"type":603,"value":15373},"几乎每类常见游戏设计都是冲着某一种人性的弱点去的，收集任务也不例外。有人完全不收集任何东西吗？从藏书、集邮、标本制作、奢侈品购买、艺术品收藏一直到首办、变形金刚、网络资源下载狂，一般人总归会忍不住去收集某些自己喜欢的东西。小学生就会本能地收集弹珠啦、烟标啦之类的东西，可见这确实是人类基本的爱好之一。",{"type":597,"tag":606,"props":15375,"children":15376},{},[15377],{"type":603,"value":15378},"收集任务收集的并不一定是装备或者道具；收集装备或者道具的任务，也并不一定是出于收集目的所设计的。比如最简单的“打某种怪随机掉落n个专属物品”这种任务，从形式上来说是收集型任务，本质上却不是。这种任务是Farm型任务的一种变种，用来填千篇一律的Farm型任务表的。类似的，“到若干固定地点取得特定任务物品”也同样不是Collect任务，而是Moveto任务。但如果这种掉落品有其特殊的规律和值得研究的多样性，它却又可以成为收集任务的一部分了。",{"type":597,"tag":606,"props":15380,"children":15381},{},[15382],{"type":603,"value":15383},"为什么呢？因为收集任务设计中，最重要的就是“收集欲”。**所有不能激发收集欲望的任务都不是好的收集任务。**人们并不想收集那些完全一样的东西。",{"type":597,"tag":606,"props":15385,"children":15386},{},[15387],{"type":603,"value":15388},"说实话，收集欲望这东西本身没啥好说的，几条基本规律开天辟地以来就没改过，而且都是地球人都知道的设计原则，还做不到就是设计师的错了。",{"type":597,"tag":606,"props":15390,"children":15391},{},[15392,15394,15399],{"type":603,"value":15393},"就像金融衍生品的核心就是“打包与交换”这个概念一样，收集设计的核心就是“标准化与列表化”，把杂乱无章的物品合并，并组织成有逻辑的收集表。把相同的物品组织成收集内容，在内容的基础上产生逻辑，把过大的列表分成多级别的小表。",{"type":597,"tag":1080,"props":15395,"children":15396},{},[15397],{"type":603,"value":15398},"收集任务的设计目的就是赤裸裸地利用人类本能的收集欲甚至收集强迫症，来推销设计师们想卖的东西",{"type":603,"value":15400},"，最典型也是最混蛋的设计就是臭名昭著的成就系统。",{"type":597,"tag":606,"props":15402,"children":15403},{},[15404],{"type":603,"value":15405},"至于详细的设计要点么，我随便一列，你们也随便一看。",{"type":597,"tag":606,"props":15407,"children":15408},{},[15409],{"type":603,"value":15410},"首先，容易理解，容易入门。能够大众化的收集爱好通常都入门很容易，在游戏里也不例外。集邮的开始只是几张纪念邮票，钱币的入门也不过是几个平常找零回来的硬币，一个奢侈品狂姑娘的起步可能只是一个三流品牌的包包。好的收集品通常应该在玩家不知不觉间入手，然后给他展开一幅未来的庞大画卷。正面例子我就不多说了，反面例子么，COD7就是一个近在咫尺的例子。我估计肯定有好多用户直到通关也没发现游戏里有情报箱可以收集吧？",{"type":597,"tag":606,"props":15412,"children":15413},{},[15414],{"type":603,"value":15415},"然后，提示明确。什么东西能收集，收集了有好处，应该有明确的提示。在开放式的沙盘游戏，比如荒野大镖客、辐射这样的作品里，这点特别重要——因为你完全无法控制玩家什么时候拿到什么物品。如果实在不能像FNV一样用游戏内的任务进行提示，用一些超游戏的手段进行提示也是合理的。",{"type":597,"tag":606,"props":15417,"children":15418},{},[15419],{"type":603,"value":15420},"再次，阶段和收集目标清晰。弹珠为什么只是小孩子的收集品？因为弹珠和弹珠彼此之间的区别实在太小了。收集设计也是同样的道理，每个阶段都要有自己的特色，收集完一定数量以后要立刻给玩家回报，别去搞那些容易令人放弃的“贯穿性收集”。我刚批评过的哥特4就不说了，贯穿整个游戏的多种“漏掉一个就完了”的收集品实在是令人无语。COD7也很令人绝望，如果说有比从头到尾都没发现一个情报箱更惨的事情，那就是打了大半游戏以后才拾取到第一个情报箱……所有不能回去重新收集的收集品，起码应该给一个数量提示吧。就像臭名昭著的金融行业一样，“贪婪”和“恐惧”也是永远的设计主题。人类很难抗拒把已经有相当进程的收集项目收集完的冲动。",{"type":597,"tag":606,"props":15422,"children":15423},{},[15424],{"type":603,"value":15425},"最后，留下充足的想象空间。有哪个现实中的收集领域有尽头呢？在一个领域后面接着的是另一个领域，在一个类型后面接着的是另一个类型。每个能够流行开来的收集爱好都有着几乎无穷无尽的深度，游戏用不到做到这种程度，但是相当深度的收集目标也是必要的。已经收集的内容是进一步收集的垫脚石，已经收集到的奖励装备可以通过收集进一步升级，都是提供深度的简单办法。再深入就可以引入类似鉴定、随机属性或者隐藏属性这样的高级收集爱好者才会喜欢的要素，模仿现实收集行业里捡漏和鉴宝的要素。",{"type":597,"tag":606,"props":15427,"children":15428},{},[15429],{"type":603,"value":15430},"其他……其他真没什么好写的了。能做到这些，有收集癖的人就会欢欢地去做了；至于没有收集癖的那少数人，还是在收集回报上想办法吧。至于那些连贪婪和恐惧都没有的冷静强者，估计也不会来玩游戏吧？",{"type":597,"tag":606,"props":15432,"children":15433},{},[15434],{"type":603,"value":15435},"所以，我想谈另一个问题：收集设计思路的扩展用法。利用收集癖好本身不算什么了不起的设计，但怎样利用收集癖好来引导用户就是个艺术了。从开放的角度来想，只要能激发用户收集欲，收集的是什么其实无所谓。你到底要在收集任务里推销些什么呢？",{"type":597,"tag":606,"props":15437,"children":15438},{},[15439],{"type":603,"value":15440},"把眼光放远一点，不要把收集设计仅仅局限在任务上。最传统的想法是收集道具，这当然没有问题；音乐、CG、回想、图鉴这些想法比收集道具前进了一步，但本质上也区别不大。\n最简单的例子是成就。收集成就把收集的领域扩大到了“行为”方面。成就是挑战性设计，但把挑战们打包成一个成就系统，就是典型的收集设计了。这个类型改变的效果是非常明显的，现在几乎每个游戏都在努力做着类似成就的系统，瞄准的就是那些收集型玩家。",{"type":597,"tag":606,"props":15442,"children":15443},{},[15444],{"type":603,"value":15445},"关卡同样可以做成一种收集。谁规定所有关卡都要马上开放给玩家的？一点点解锁、凭票制、时间制、积分制都是可以考虑的设计。几乎每个音乐游戏都有用颜色清晰标明的不同难度及其评价，打开这个界面本身就是一种收集性质的激励。",{"type":597,"tag":606,"props":15447,"children":15448},{},[15449],{"type":603,"value":15450},"收集在装备设计中同样有大量应用。最经典的收集装备设计就是魔兽世界的套装……我上面说的入手简单、阶段目标清晰、提示明确、想象空间充足全齐了，可以当作一个经典的收集设计范例。暗黑破坏神的镶嵌是另外一个把收集要素融入到装备系统的好例子。这里值得一提的收集设计是“隐性收集装备”，也就是从数值角度按照套装设计，却并不写明的套装。在收集品过多的情况下，可以考虑用这个思路来设计。",{"type":597,"tag":606,"props":15452,"children":15453},{},[15454],{"type":603,"value":15455},"更进一步，制造业还是一种收集。用收集任务的角度来看制造业系统设计，很多问题就迎刃而解了。要怎么安排制造业生产的装备？要如何引导玩家去获得各种不同来源的道具，然后投入制造？要怎么安排制造业的阶梯性？用收集的理念来设计，会比用简单的公式合成或者复杂的真实系制造理念好玩得多。",{"type":597,"tag":606,"props":15457,"children":15458},{},[15459],{"type":603,"value":15460},"现阶段能想到的收集设计，个人认为是剧情线索的收集。这是一项真正愿者上钩的收集。那些最好的小说，实际上也是把细节和叙事线索什么的隐藏在字里行间，直到所有线索汇集，才一气呵成讲完所有的故事，塑造出令人印象深刻的人物。",{"type":597,"tag":606,"props":15462,"children":15463},{},[15464],{"type":603,"value":15465},"目前这方面有几个很好的尝试，比如Bioshock系列，通过录音和关卡的完美结合来安排收集性质的线索叙事；FNV在结构上已经是线索收集-任务展开的形式了，可惜的是影响要素还并没有按照收集系统来设计，缺乏了一些形式美感，也不容易让一般玩家领会到那种草蛇灰线伏线千里的气势。在没有任何提示下，有多少人能发现凯撒的死亡竟然会影响好几个八竿子都打不着的遥远任务的展开线索？在叙事领域，目前还没有将线索收集作为核心收集要素的例子，最多也就是Bioshock这样无伤大雅的补充；但我个人觉得，类似作品的出现也不会太远了。",{"type":597,"tag":606,"props":15467,"children":15468},{},[15469],{"type":597,"tag":1080,"props":15470,"children":15471},{},[15472],{"type":603,"value":15473},"Hunt型任务（狩猎任务）",{"type":597,"tag":606,"props":15475,"children":15476},{},[15477],{"type":603,"value":15478},"自古以来狩猎就是人类的本能，在游戏世界里也不例外。当然，打死那些没啥抵抗能力的家畜不算狩猎，所谓Hunt任务，就是要拿出最好的武器和装备，和相对更强大的敌人进行生死的决斗，并获得惊人的报酬——俗称打BOSS。",{"type":597,"tag":606,"props":15480,"children":15481},{},[15482],{"type":603,"value":15483},"如果说Farm任务对应的是动作游戏中的杂兵，那么Hunt任务对应的就是动作游戏中的Boss战。\n如果说Farm任务对应的是代表幸福安宁满足感的内啡肽，那么Hunt任务对应的就是亢奋专注快感的多巴胺。\n如果说Farm任务的目的是设计成“普通玩家经过努力后不用脑也可以完成”，那么Hunt任务就应该保证成为“玩家反复磨练技术后得到的报偿”。\nOK，到此为止。理论上是该这么说的啦……实际上不是这么回事。把上面那些基本常识记下来，然后来考虑一下真正的设计目的。",{"type":597,"tag":606,"props":15485,"children":15486},{},[15487,15489,15494],{"type":603,"value":15488},"设计Hunt任务的目的和考验玩家什么的没有任何关系。你设计首领战不是为了让玩家打不过去，而是为了让他的辛苦练习和成长有用武之地。真正的设计目的是消费。",{"type":597,"tag":1080,"props":15490,"children":15491},{},[15492],{"type":603,"value":15493},"Hunt任务和BOSS战的设计，对应的是玩家的消费",{"type":603,"value":15495},"（当然还有投资，但这两者在游戏中就和现实经济中一样难以区分）。",{"type":597,"tag":606,"props":15497,"children":15498},{},[15499],{"type":603,"value":15500},"换句话说，如果说其他类型的任务起到的是积累的作用，那么Hunt任务（当然还有PVP）就要起到消费的作用：在其他内容中取得的技能、等级和消耗品在这里被用掉，并变成玩家们最爱的回报和装备不动产。",{"type":597,"tag":606,"props":15502,"children":15503},{},[15504],{"type":603,"value":15505},"一个游戏的BOSS战可不是设计到谁都打不过去就是好的。想要做这种内容，去做怒首领蜂好了，听说直到今天在整个世界也只有一个人类可以打败二周目真绯蜂改发狂，而且大家还没有在录像上亲见。你通过传送每小时打败10次巴尔和考验玩家有任何关系么？你集结25个人和一个有钱的老板，去刷一个大副本和考验玩家有任何关系么？什么关系都没有啊。\n无他，唯手熟尔。Farm任务是连外挂也能完成的任务，而Hunt任务就应该是要求操作熟练度和专克外挂的那些内容。",{"type":597,"tag":606,"props":15507,"children":15508},{},[15509],{"type":603,"value":15510},"说到这里，最重要的是什么简直呼之欲出。主要有两个问题，门槛和随机性。",{"type":597,"tag":606,"props":15512,"children":15513},{},[15514],{"type":603,"value":15515},"门槛部分的设计思想很简单，保证用户大多数的资产都能在某个Hunt任务中用上。所有的武器、职业和技能都有优势领域自然最好，大部分有用也很不错。让不同的Hunt任务之间所需要的门槛错开也是很重要的，有些BOSS可能是硬性的数值门槛，有些可能是队伍组成/技能熟练门槛，有些可能是特殊装备门槛、时间门槛甚至用户金钱/资产门槛。不要太轻视这个部分：除了让用户怎么捞以外，让用户捞到的东西有用也是非常重要的。如果条件允许的话，负责设计重要的门槛BOSS的游戏设计师最好同时负责数值或系统的设计，至少也要有项目内数值或系统设计的经验。",{"type":597,"tag":606,"props":15517,"children":15518},{},[15519],{"type":603,"value":15520},"再说随机性。随机性看起来很简单，但其实也有不少小窍门。核心的指导思想么……我就说的浅白且反动一点了：**距离现实中的赌博（或者彩票）设计越近，那么随机性的设计就越令人舒服。**不算金融衍生品的话，赌博是人类掌握的最有效的财富消灭器，久经考验。如果这个游戏设计的目的是让人反复玩，那么Hunt任务和BOSS设计就要当仁不让，扛起作为赌场的责任来。",{"type":597,"tag":606,"props":15522,"children":15523},{},[15524],{"type":603,"value":15525},"最无聊的BOSS就是那种可以按照固定套路简单地对付，但是期望回报还一直非常高的BOSS。买100块随机返回80~120块奖金的彩票会有人爱买吗？一个这种高级BOSS就能毁掉整个游戏，最典型的例子就是FF13，网游里面也有大量“只有一个BOSS有人在刷”的游戏。当一个游戏所有的Hunt部分都变成Farm的时候，这个游戏的生命也就差不多到头了。性质非常类似的糟糕设计是“一切BOSS都可以用同样的招数简单的处理”，这会让玩家觉得不管是熟练操作还是角色成长都没有任何实际意义。",{"type":597,"tag":606,"props":15527,"children":15528},{},[15529],{"type":603,"value":15530},"另外一种乍看之下很好，其实却很令人烦躁的随机性设计就是所谓“平均化几率”。BOSS确实会很多招数，但他只是每次以相同的概率抽取几个差不多难度的招数。好不容易打倒了某个BOSS，这个BOSS却只会以平均的概率掉落各种相同等级的装备（在魔兽世界的某些BOSS中这种设计特别常见）。平均化随机的问题在于，事实上的回报和给玩家造成的期望不符。比如BOSS掉落三种装备，几率全是1/3。一般玩家自然会想“打三次应该就能都掉出来了吧”，实际上却不是这么回事——大多数时候起码要打4次或者5次才能都掉出来（感兴趣的人可以自己算算，我就不附公式了）。这个心理期望概率和实际概率的误差在重复次数不是太多的时候会非常明显。可以参考一下轮盘的设计：如果回报严格遵循算数平均的话，就应该给不同风险偏好的用户不同的赔率。",{"type":597,"tag":606,"props":15532,"children":15533},{},[15534],{"type":603,"value":15535},"从这里再进一步，就是在“玩法的随机性”和“回报的随机性”之间建立逻辑关系。流行的赌博形式可以分为四种：赔率规则非常简单，但是玩法策略充满可控性和对抗性的赌博（例如二十一点和得克萨斯扑克）；赔率规则非常复杂，但是玩法策略非常简单或者完全不可操控的赌博（例如轮盘）；赔率和玩法都非常简单的赌博（例如彩票，老虎机）；赔率和玩法都非常复杂的赌博（例如麻将，赛马）。其中第三种是最有趣的。六合彩本身是一个纯粹随机的游戏，但是由于回报倍率惊人，而且形式十分迷惑人，人们忍不住发展出了众多的“彩票逻辑”。计算数字概率啦，改变投注策略啦，就仿佛六合彩那几个数字和赛马或足球一样是有规律可循的一般……人们是多么热爱虚幻的操控感啊。",{"type":597,"tag":606,"props":15537,"children":15538},{},[15539],{"type":603,"value":15540},"那么回到随机性设计的问题上来。在目前的BOSS设计中，玩家的行动或行动策略对他所能获得的回报有影响吗？",{"type":597,"tag":606,"props":15542,"children":15543},{},[15544],{"type":603,"value":15545},"和赌博一对比，就显示出多数游戏在这方面设计的空白和乏力。暗黑破坏神显然是没有的，魔兽世界也基本是没有的，赌注状态仅有“能打过”和“打不过”两级门槛，用户并不能下更大的赌注，或者提高自己赢得赌注的几率。有些游戏倒是拉开了回报赔率的差距，同样一个BOSS可能掉落等级差距极大的回报，但这个回报赔率的区别并不取决于玩家所做出的赌注决策，只是纯粹碰运气而已。",{"type":597,"tag":606,"props":15547,"children":15548},{},[15549],{"type":603,"value":15550},"是否可以适当强化不同BOSS之间的赌博公式区别，让不同的BOSS拥有不同的回报赔率，并且这个赔率可以随着玩家的选择而改变呢？有些游戏选择了根据打法改变掉落表，有些游戏则引入了时间和评价之类的其他影响因素，不过在这方面的尝试仍然远远不够。比如，能不能制作一个类似轮盘或者赛马赌票的Hunt任务系统呢？能不能刻意限制玩家打BOSS的次数，让“无限下注赌场”变成“有限下注赌场”呢？顺着“赌场下注”的思路想下去，应该还有更多有趣的想法吧。",{"type":597,"tag":606,"props":15552,"children":15553},{},[15554],{"type":597,"tag":1080,"props":15555,"children":15556},{},[15557],{"type":603,"value":15558},"Puzzle型任务（解谜任务）",{"type":597,"tag":606,"props":15560,"children":15561},{},[15562],{"type":603,"value":15563},"如果这篇文章写作于1990年而不是2010年，肯定会写“Puzzle型任务的设计目的是智力挑战和由此带来的愉悦感”。就像神秘岛里的层层机关，就像国家宝藏里的条条线索，抽丝剥茧到最后揭开所有谜题……多有趣啊。\n就连在大众传媒和一般人的想象中，游戏设计师们干的也应该是类似这样的工作：他们（经常也有她们，通常还是些美妞……可恶，我恨现实）坐在一些塑胶玩具和毛绒玩具中间，对着一些色彩斑斓的电脑屏幕画画图，连连线，就做出来了一些类似愤怒的小鸟和植物大战僵尸的可爱游戏，然后大赚其钱。\n多美好的想象啊。大众传媒还觉得魔兽世界的测试员是世界上最好最有趣的十个工作之一呢……你们敢找个魔兽世界的Tester来么？",{"type":597,"tag":606,"props":15565,"children":15566},{},[15567],{"type":603,"value":15568},"遗憾的是，现在是2010年，一个互联网络已经大行其道的年代，所以这一段不会这么写。人类的智力在Google面前实在不值一提，再难的谜题在搜索引擎面前也会被分秒解决。智力挑战？抱歉一般人不喜欢这个。大家能面对的智力挑战到头就是雷顿教授（而且还要查攻略），稍微差点儿就是脑白金，一本字书或者一篇长文能秒掉百分之八十的用户，你还挑战他们的智力？开什么玩笑啊。\n所以，解谜任务在网络时代分出了两条支流。简单的那条支流瞄准的是操作，把“智力”简化成了简单重复操作考验，代表作品就如同脑白金、Puzzle Quest和愤怒的小鸟；难的那条支流则担负着另外一个任务，这类Puzzle型任务的最主要设计目的不是“智力挑战”，而是“用户交流”。",{"type":597,"tag":606,"props":15570,"children":15571},{},[15572,15574,15579],{"type":603,"value":15573},"先说“操作性谜题”。操作性谜题……本质上不是谜题。它们是一些通过程序生成的小游戏，只是装成谜题的样子而已。\n最低档的操作性谜题就仿佛国内网游非常流行的“每日文化答题”，用户只需要背背题库就好——为了每日领赏，他们也确实对题库倒背如流（我时常想，如果专门开个雅思题库或者GRE题库服务器，没准比新东方教学效果还好呢）。俄罗斯方块衍生系和宝石迷阵衍生系也非常受欢迎，做成和游戏内系统挂钩的或者3D视角的也不算费事（Puzzle Quest就算是个最典型的例子了）。再强一点的放拼字游戏或者数独，虽然抄起来很省心，只要设计师们改头换面一番就能瞬间生成数以千计的谜题表——脑白金是最好的例子了。喜欢动作性的设计师可以像愤怒的小鸟一样照抄某些经典的动作或者解谜游戏设计，反正愤怒的小鸟自己也不过是照抄那些前辈，例如百战天虫什么的（事实上这个抛物线解谜类型久远到电脑都还没出现就已经有了，如果十七世纪会解这种谜题，你就可以在任意一家国家的炮兵中找到一份好工作）。再往上才是“自己设计操作性谜题任务”——虽然大众媒体都吹捧这种做法，但我非常非常不推荐这条道路。一百个放在Appstore或者Xboxlive上的原创小游戏里，起码有九十五个无人问津。一百个放在主流游戏里面的解谜小游戏，起码有九十个是垃圾。劳民伤财呀，何苦呢？\n那么这种谜题任务用来干吗呢？目的也很简单，这大概是",{"type":597,"tag":1080,"props":15575,"children":15576},{},[15577],{"type":603,"value":15578},"成本最低的用来调剂节奏和拖延游戏时间的方法",{"type":603,"value":15580},"。设计操作性谜题任务几乎不需要什么游戏设计师，只需要些谜题数据库就能搞定了，而这点努力能换回玩家成千上万的游戏时间。它们也很适合做那些跨等级和横跨整个游戏的固定任务/每日任务，这样设计内容方面就不用操心了，只要简单调整调整题库的难度表和回报比例就成。除了“天才的设计师自己钩钩画画出来”的小游戏之外，剩下的操作性谜题都是久经考验，一般人也都玩得非常好，用户引导方面同样不用费心。\n就只是这样？没错，就只是这样，我想不出有什么更深刻的设计目标了。除了“低成本内容”外，没有其他意义，甭指望用户会因为你做了一个比愤怒的小鸟还好玩还漂亮的小游戏就凑过来，因为他们买的本来就是愤怒的小鸟而不是其他。",{"type":597,"tag":606,"props":15582,"children":15583},{},[15584,15586,15591],{"type":603,"value":15585},"再说“交流性谜题任务”。交流性谜题的设计目的就是让玩家们在游戏内或者游戏外勾勾搭搭，吵吵嚷嚷，间接",{"type":597,"tag":1080,"props":15587,"children":15588},{},[15589],{"type":603,"value":15590},"提高游戏的黏着度",{"type":603,"value":15592},"。\n最简单的交流性谜题自然是“多人合作”Puzzle任务了。在任务里强制让玩家们协作解除机关就能达成最简单的强制多人合作，再进一步就是让玩家们在战术/移动层上达成配合的解谜任务。玩家们在行动上的配合，或者强制限时推进同样非常好用，可以逼着用户们强化彼此之间的关系等级，构建出一些要求比野队、随机副本或者G团更高的任务内容。\n“寻求帮助”也是一种很好的交流性任务。大多数有任务的游戏，都有不止一种职业，设计师可以通过这种需要其他职业能力的任务来强化沟通。如果把这种任务放大到关卡或者副本的层面上来看，还可以发掘出更多变的用法：例如某个副本，有要求一个五人队伍中有四个战士才能完成的交流性Puzzle任务，也就无形间提供了整个副本的另外一套强制打法。\n再往上一层的目的就是想办法引导玩家去进行游戏外的讨论，这通过普通任务就很难做到了——搜索引擎和教程仍然是无敌的。通常来说，要让一个任务在玩家中造成分歧，用“隐藏”或者“推理”这种寻常手段是没用的，这种手段最多能制造一些“XXX地区还差两个任务没做成就完不成求助”这样的低水平讨论。你必须要做到两点：第一，隐藏一部份数据和逻辑。第二，构造虚假的线索。争论，只有争论才是制造分歧和掩盖谜题真相的最有力武器。构造虚假的线索，隐藏关键的数据，让玩家在他的直觉和逻辑之间产生矛盾。这事儿暴雪干得精熟，Square Enix也不遑多让。",{"type":597,"tag":606,"props":15594,"children":15595},{},[15596,15598],{"type":603,"value":15597},"最后我还是用实例来说明，说个我所知道的“交流性谜题”（其实不是谜题任务了，但是设计目的差不多）的设计例子吧。你们都知道暗黑破坏神2那臭名昭著的“物品掉落率增加7%护符（俗称SC）”吧？由于可以增加7%的掉落率，所有人都喜欢它。在某大型网络游戏里面，有个类似的设计，某些职业和装备上有个属性叫做“物品掉落率增加”的、看起来就像SC一样非常重要的属性。官方只是草草一说“这个属性可以增加物品的掉落率啊”就结束了，然后几个设计师在非官方的场合透露过“确实是有改变率的啊”。争论由此展开。由于持有技能的职业通常在大Raid中不太重要，有这种属性的装备本身战斗力通常非常低下，那到底要怎么才能最大化利益呢？一个Raid团应该带几个这种掉落率相关群众，又应该怎么围绕它们来安排战术呢？技术党们争论不止，自然想到了测试，结果发现——这个属性的效果是根据目标BOSS和掉落物种类的不同而变化的。对于大多数低等便宜原料来说掉落率常常倍增，但是对于各种装备、高级原料、宝石什么的就很难说了……于是持各种论调的技术党们争辩不止，论坛上定期出现“最新一期掉落率实测结果！推翻传统论调”的月经贴，各国人民组团时左右为难。\n我相信设计师们一定在偷笑吧。例子到此为止——Puzzle任务应该也不用再多说了。想办法创造出新的谜题和话题点，创造更多的争辩和分歧吧。",{"type":597,"tag":1080,"props":15599,"children":15600},{},[15601],{"type":603,"value":15602},"只有能产生分歧的问题，才是互联网和搜索引擎无法战胜的内容。",{"type":597,"tag":606,"props":15604,"children":15605},{},[15606],{"type":597,"tag":1080,"props":15607,"children":15608},{},[15609],{"type":603,"value":15610},"Challenge型任务（挑战任务）",{"type":597,"tag":606,"props":15612,"children":15613},{},[15614,15616,15621,15623,15628],{"type":603,"value":15615},"Challenge型任务的设计目的是“玩家分层”和“虚荣心”。如果说以上前几类任务的最终设计目的都是“让所有用户都能完成”的话，那么挑战型任务设计的目的只有一个：",{"type":597,"tag":1080,"props":15617,"children":15618},{},[15619],{"type":603,"value":15620},"让绝大多数用户只能部分地完成它",{"type":603,"value":15622},"（注意不是完不成它，一个用户不感兴趣或怎么也完不成的挑战是相当失败的）。“人人都有”的东西大家不太感兴趣，只有“人无我有”才是可恶的虚荣心。\n这个类型任务的设计思路直接继承了原始时代“分数”的设计目标，",{"type":597,"tag":1080,"props":15624,"children":15625},{},[15626],{"type":603,"value":15627},"让用户分层化",{"type":603,"value":15629},"。人生的目的就是打到最高分，每天的最高分，每周的最高分，每月的最高分，每服务器的最高分，历史的最高分……强者们，高手们，人民币日元美元欧元战士们，你们炫耀的时候到了！\n“挑战么……增加难度不就行了？”\n不要把这事儿想得太容易。没错，难度变化是几乎每个游戏都有的基础。变更数量、变更敌方属性、变更敌方行动规律（玩家管这叫AI，虽然实质上这和AI关系非常小）。同样的内容，改变一下数值和容错率就能提供完全不同的难度，是大家喜闻乐见的挑战自我和挑战他人的形式。这里棘手的问题，主要是怎么把这些难度变化任务展示给一般玩家……大多数游戏的设计是完全失败的，只有少数精英玩家会去挑战高难度。我印象里最成功的设计恐怕还是暴雪的暗黑破坏神，强逼着一般用户去挑战最高难度反复刷刷刷。如果你想让玩家挑战不同难度的相同任务，首先要控制难度种类不超过四种（最多五种吧，再多一般人就直接忽略了），然后是尽量让他们认为这是一次通关顺序上不同的内容——而不是反复进行同样的内容。\n可对精英玩家来说，这是远远不够的。设计师们总在抱怨用户弱智，他们总能发现，用户中最弱的那一部分永远比人类所能想象的程度还要弱。反过来说，用户们最强的那一部分也是强到几乎无止境的。反射神经论毫秒计算的只是基础，高手们的肉眼不光可以分辨单独帧，甚至还能分辨出每个单独帧延迟的时间；你的十个指头每分钟最多输出一百个有意义的操作，有的高手每分钟能输出五百个；你觉得能弹个钢琴已经很了不起了，可用户里多的是有绝对音感加精准操作媲美职业钢琴师的高手；你能在甩狙击枪的过程中命中目标？高手还能用肉眼对抛物线做积分呢。设计师当然要尽全力设计各种各样的高难度内容，这是他们当然的职责。但光靠难度是不够的，谁能斗过无敌的玩家呢？甭管是噩梦还是神级难度都有人无伤通关，设计目标是50分钟的内容可能会被突破到两三分钟，理论上决不可能的精确操作会被打到100%命中，高手的手指和外挂无异。光从难度入手是不够的，还得另想办法。",{"type":597,"tag":606,"props":15631,"children":15632},{},[15633,15635,15640,15642,15647,15649,15654],{"type":603,"value":15634},"另外的办法，就是设计师放弃去挑战玩家，而是",{"type":597,"tag":1080,"props":15636,"children":15637},{},[15638],{"type":603,"value":15639},"让玩家挑战自己和其他玩家的极限",{"type":603,"value":15641},"。无论是单机还是网游，都在试图走这个方向，设计那些让强力用户和强力用户自身进行极限挑战的内容。所以，挑战任务设计的核心，其实是“你要让玩家们在什么样的项目上分出高下”。由于挑战本身就是一种快乐，是否要在这里设计对应的回报都存在很大争议——从结果来看，通常有没有回报都可以。有些人喜欢留个象征性的入门回报，有些人喜欢留个分级制但是上不封顶的回报，有些人喜欢留个只给冠军的回报——怎么操作都行的，反正挑战任务的目标是玩家的好胜心和虚荣心；既然是“虚”荣心，当上冠军这件事情本身已经足以让那些高手们手舞足蹈了。除了回报之外，改善挑战任务的组织同样有不错的小说。理论上来说，挑战任务直接散布在整个游戏中是可以的；但像荒野大镖客RDR一样，用一些等级和列表把这些挑战任务组织起来会更好一些。看到100个挑战任务像芝麻一样分布在游戏里会令不少人抓狂；但如果挑战任务的组织结构是4",{"type":597,"tag":1733,"props":15643,"children":15644},{},[15645],{"type":603,"value":15646},"10（容易）、3",{"type":603,"value":15648},"10（普通）、2",{"type":597,"tag":1733,"props":15650,"children":15651},{},[15652],{"type":603,"value":15653},"10（困难）、1",{"type":603,"value":15655},"10（噩梦），那同样数量的挑战任务能让更多的人上钩。\n撇开难度不说，还有几种被广泛使用的低成本Challenge类任务设计手法——呃，我就不提人民币/美元充值榜和道具/装备排行榜了，那些太邪恶了，要用也得想办法立个牌坊再说。PVP要素也不多提了，给一个任务制作协作模式或者对抗模式的成本太高，基本可以视作完全做了个不同的新任务了——八成还得搭做一张新地图什么的。",{"type":597,"tag":606,"props":15657,"children":15658},{},[15659],{"type":603,"value":15660},"精确操作：传统上来说，分数主要就是用来奖励精确操作的——偶尔也用来奖励一下下面说的其他几类挑战任务。千万别设计那种“谁来了都能打满分”的分数统计任务，如果有这种内容，请果断砍掉，没有任何意义。精确操作通常有两种表现形式，一种是“操作得越准越好”，另一种是“操作得不出错就好”，前者考验反应，后者考验意识。这个对非网络游戏来说是非常常用的设计手段，但对网络游戏来说有个棘手的延时问题（同时也衍生出了外挂问题）。选择哪种，只取决于你所需要的游戏类型。前者更适合做分数排行榜，设计毫无失误的连击和目押；后者更适合做网络游戏和各种用来展现神一般的意识和飘忽的操作的内容。\n时间限制和时间统计：时限任务是最最最好做的挑战任务了。甭管什么内容，你都可以加个时间限制在那里，立马就可以开始计时排名。倒数计时可以强化紧张感，顺序计时可以用来做用户水准评价。再弱智的游戏都可以有时间挑战任务，怎么都能加进去的……只是有一个小小的问题，似乎有很大一部分玩家生理上本能讨厌计时。我个人的建议是，尽量少用倒计时，把倒计时任务丢在关键位置和某些可选任务里，不要做全局化的计时任务系统（也就是那种所有任务都自带一个计时器的禁忌设计）。这种东西偶尔有几个可以，走到哪儿都有就会破坏整个游戏的节奏感，还会吓跑患有隐性闹钟恐惧症的玩家。如果打算大量使用时间相关的设计，可以考虑用其他的方式变通处理，例如限定时间的BUFF或者道具，或者用“全世界/全服务器第一个达成某某目标”这样的变通手段来做。\n探索与意外发现：也就是“完成度”，同样是加起来不费什么大事儿的内容。和时间设计正好相反的挑战要素，时间相关挑战对应那些快准狠玩家，完成度相关挑战对应那些细慢精玩家。这个类型的挑战任务倒是不怕多，甚至从某种意义上来说，越多越好，做得越多就能引导玩家看到越多的设计细节——前提是你的游戏有足够的设计细节。击杀一个任务中生成的所有敌人，踹翻所有的生成宝箱，认真看完小电影抓紧时间按掉里面所有QTE，打柴堆一下向下移动三步空挥五刀就能吃到1UP……怎样变态的小知识都可以。暴雪饭们都对WOW“服务器里的树苗会随着版本更新逐渐换成大树”这事情赞不绝口，UO粉们对“因为游戏BUG产生的不同颜色的一般物品”趋之若鹜，玩家们探索设计细节的这个过程本身有时就能构成口碑营销。知道这些没用的小知识也算是炫耀要素之一，是真正爱好者们引以为豪的话题，做点儿东西满足他们的期待也是没错的。完全没有这些小知识的游戏看起来会很粗糙。",{"type":597,"tag":606,"props":15662,"children":15663},{},[15664],{"type":597,"tag":1080,"props":15665,"children":15666},{},[15667],{"type":603,"value":15668},"Storytelling型任务（叙事任务）",{"type":597,"tag":606,"props":15670,"children":15671},{},[15672],{"type":603,"value":15673},"说完了六类主要的设计目的，按以上教程做出来的任务就能好玩，或者令人印象很深刻了么？\n很遗憾，恐怕还是不能。这篇理论文章的目的是把任务做得很舒服，不会有人动辄跳起来骂娘，可不代表这些任务不会无聊。\n设计和艺术是不一样的。因为设计可以很容易地复制，而艺术不能。上面这些并不是什么了不起的东西，只是一篇基础设计常识的实用菜谱。不管怎么无聊的故事线，照着上面这些任务分类去做，至少能把普通的文本转换成看起来不那么单调的任务线，也能保证一般用户都能轻松地接受这些任务。\n但叙事没有这么简单，因为叙事的要求比不无聊要高得多。叙事任务并无其固定的形式。形式并不等于公式，世上有好的食谱和差的食谱，但绝无那种神奇的食谱可以保证你的蛋糕一定美味可口。\n所以，最后一个附加的任务分类就是叙事（Storytelling），探讨一下怎么用讨厌的任务制设计方法来实现电影化或者小说化的叙事。这一部分基本上全是设想了，不像前面六个大类，你们直接去找个“魔兽世界大灾变”来玩就能看到里面很多任务设计思路的具体改进方案。",{"type":597,"tag":606,"props":15675,"children":15676},{},[15677],{"type":603,"value":15678},"这个问题其实相当为难。大多数时候，任务制就是叙事的天敌。\n任务制天生就适合做短篇小说，它甚至能把很好的长篇故事拆成很多什么都不是的短篇小说和超短篇小说。回想一下你最喜欢的那些电影和小说吧，每个拆成任务制以后似乎都很无聊，连贯的故事变得支离破碎。\n几个还算成功的游戏作品在这些方面的努力看起来也乏善可陈。魔兽世界制作了数以万计的任务和数百万字的任务文本，但能让玩家感到激动地任务怕是连十分之一都没有。侠盗列车手GTA4在单个任务上下的功夫不可谓不深，投入不可谓不多，但大多数任务还是只配被玩家快速地按掉又按掉。辐射新维加斯在任务结构和复杂程度方面的努力创下了角色扮演游戏史上的新高，但这种努力也没有遮掩住主线任务故事的散乱和最终决战的巨大落差。我们手头没什么太成功的例子，只好从那些一闪而过的成功火花里来找灵感。",{"type":597,"tag":606,"props":15680,"children":15681},{},[15682,15684,15689,15691,15696],{"type":603,"value":15683},"对于游戏来说，叙事三要素的实现顺序和其他媒体是不一样的。我们的叙事三要素按照难度从低往高排，是环境，情节，人物。\n对于一个游戏来说，最容易搞定的就是环境了。环境带来的冲击随时都能看到，而且能够感受到；要塑造一个出色的环境也用不着什么太复杂的技巧：音乐加场景设计就能基本搞定。几乎每个成功的游戏，背后都有一个杰出的世界观。这也是任务设计最容易发挥其威力的地方——所谓世界，原本就是由一个又一个的细节拼成的，任务设计恰恰擅长描述细节。只要隔三差五分配一些任务或目标在世界观塑造上，就能很成功地构造环境。\n情节就相对比较难办了。任务制和情节的抵触看起来十分彻底：谁愿意每次情节发生的时候看到“你的任务已经更新”，然后又要重新跑一大段路？别管设计师或者剧本原来打算搞什么叙事节奏，现在都已经破坏光了。一个恶劣的反面例子就是辐射新维加斯最后的胡佛水坝大战，虽然剧本和线索布置得很充足，但真打到这里的时候就会令人感觉“啊，不过如此……”，一点也没有最终决战应有的节奏。\n我个人的观点，正确的发展方向只能是“",{"type":597,"tag":1080,"props":15685,"children":15686},{},[15687],{"type":603,"value":15688},"关键情节连贯化",{"type":603,"value":15690},"”。当情节上需要进行关键高潮的时候，尽一切可能进行连贯化。任务不用回去交，回报直接打进道具栏，跑路部分使用强制传送，小电影部分用即时互动……把所有的精力集中在叙事进程本身上，能跳的部分毫不犹豫地跳，能省的部分毫不犹豫地省。所有的叙事应当一气呵成，就像电影的高潮部分一样。任务执行本身也应当和叙事结合起来，要把游戏时间、难度，甚至是玩家失败的可能性也考虑进整个叙事流程当中。当然，出于成本和周期考虑，不可能所有任务都这么设计；为了达到这个目的，甚至可以牺牲那些不重要的次要任务的质量，明确地在“主线关键剧情任务”和“环境塑造任务”之间拉开差距。至于网络游戏么……你看，网络游戏本来也是要送新手包诱骗用户去升级的，不是么？既然用户肯定有额外资源，索性都用在这里好了。\n人物是最大的难点。就算是小说，要塑造一个人物形象也是难比登天的事情；更别说游戏了。说实话，我实在想不到什么成功塑造了人物形象的普通游戏例子，偶尔有几个成功的例子，又不太具备普适性，比如Bioshock这样的大成功连他们自己的二代都复制不了。日本游戏曾经倒是有很多成就，但那些成就是FC和PS舞台剧时代的成就，沿用的是戏剧形式的夸张演出，并不是当代的成就，当代的日本游戏人物塑造可以说是普遍失败的（美少女游戏Galgame除外啦……以5pb为代表的角色营销干得还不错)。我们只好从叙事常识角度试着来构思如何在任务中塑造人物了。\n先不说人物曲线什么的劳什子，塑造人物的最基本要求就是“信息量”，光这一点大多数任务制的游戏就保证不了。如果一部电影剧本看到第50页的时候还不知道谁是主角，有几个，这电影剧本肯定会被打回去重写；这样的事偏偏在游戏中反复地发生。不管是魔兽世界、GTA还是荒野大镖客里，主要角色塑造很少有超过十个任务的——区区十个任务！通常来说，不算任务进行过程，这十个任务也只够将就交待一下角色的出身性格什么的，距离有血有肉还差得远呢。想用这种分量的信息量塑造一个了不起的角色，你们需要的不是编剧，是莎士比亚了。要真想通过任务塑造人物，第一件事情就是",{"type":597,"tag":1080,"props":15692,"children":15693},{},[15694],{"type":603,"value":15695},"把人物角色相关任务的密度和数量提高",{"type":603,"value":15697},"，把所有能拉到目标角色身上的任务都拉过来，聚集成一条事件线，甚至一个巨大的事件团。\n接着就是所谓的“人物曲线”，一个人物角色的背景、动机、内在目标和性格变化。这个要求就更高了，就算在电影里通常也只是极少数主角能享受的高级待遇。对于游戏来说，这个变化更必须是能在游戏过程中让玩家潜移默化地体会出来的……难上加难。舞台剧式的角色直接转职固然省事，但以叙事手段来说未免落了下乘。用好感度之类的数值来处理人物不同阶段的反应和AI比前者略好，但以这种系统作为游戏内容却显得十分生硬，只有最早期那些“恋爱”游戏才会用这种生硬的系统——别看了，近期游戏里Dragon Age我说的就是你，这种上个世纪的Gameplay你不觉得难受么！如果参照日本galgame脚本的发展过程，比较受欢迎的处理方式其实是“同样的关键任务事件中，不同的角色有不同的反应”，但这个在游戏制作成本上的投入又实在太大了……现代游戏不能光掰对话树啊，也需要有不同的演出甚至具体的不同游戏内容。稍微退让一些的做法可能更有实际可操作性：人物的背景、动机、过去等等都是独立的小型任务或任务细节，关键的“性格变化”和“冲突”两步则和游戏内的大型情节任务挂钩处理，并设计对应的任务体验内容。由于大多数游戏都做得很差，在这方面努力一些，再在关键的体验部分想出个好点子就能令玩家留下深刻印象，典型例子如Bioshock的某角色以及最近COD7的某角色。",{"type":597,"tag":606,"props":15699,"children":15700},{},[15701],{"type":603,"value":15702},"总之，叙事性任务是所有任务类型中最需要灵活想法的一个部分，它是由其他所有类别任务复合而形成的。怎样巧妙地将任务系统的文本和游戏内容勾连成庞大而美妙的叙事体验，更接近艺术而不是技术，我也只能泛泛而谈了。在接下来的逻辑结构一节里，还会继续探讨不同的任务结构形式和玩家体验之间的关系。",{"type":597,"tag":606,"props":15704,"children":15705},{},[15706,15711,15718,15725,15732],{"type":597,"tag":1080,"props":15707,"children":15708},{},[15709],{"type":603,"value":15710},"内容为转载，总篇幅较长。原文地址（自备梯子）：",{"type":597,"tag":886,"props":15712,"children":15715},{"href":15713,"rel":15714},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/11/14/quest-design-01/",[890],[15716],{"type":603,"value":15717},"游戏任务设计(1)：概念与简史",{"type":597,"tag":886,"props":15719,"children":15722},{"href":15720,"rel":15721},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/11/23/quest_design_2/",[890],[15723],{"type":603,"value":15724},"游戏任务设计(2)：MoveTo与Farm任务",{"type":597,"tag":886,"props":15726,"children":15729},{"href":15727,"rel":15728},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/12/03/quest_design_03/",[890],[15730],{"type":603,"value":15731},"游戏任务设计(3)：Collect与Hunt任务",{"type":597,"tag":886,"props":15733,"children":15736},{"href":15734,"rel":15735},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/12/14/quest_design_04/",[890],[15737],{"type":603,"value":15738},"游戏任务设计(4)：Puzzle、Challenge和任务叙事",{"title":591,"searchDepth":787,"depth":787,"links":15740},[],"content:game:2021-08-05-game-task-design.md","game/2021-08-05-game-task-design.md","2021-08-05",{"_path":571,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":570,"description":15745,"body":15746,"_type":791,"_id":15844,"_source":793,"_file":15845,"_extension":795,"date":15846},"定义实体和组件SemanticObject  为gameobject添加各种componentTraits : 相当于component.可以定义各种属性定义处理系统Problem  依托 DecisionController运行计划StateTermination  为Problem  提供中止条件SemanticQuery   根据query为 DecisionController提供实体Action : 相当于一个特殊的system的基类.他定义了参数,和处理条件.以及effects和reward,但是没有实现具体的方法(executionInfo),executionInfo是需要手动",{"type":594,"children":15747,"toc":15838},[15748,15753,15766,15771,15802,15805,15810,15823,15828,15833],{"type":597,"tag":598,"props":15749,"children":15751},{"id":15750},"定义实体和组件",[15752],{"type":603,"value":15750},{"type":597,"tag":1321,"props":15754,"children":15755},{},[15756,15761],{"type":597,"tag":807,"props":15757,"children":15758},{},[15759],{"type":603,"value":15760},"SemanticObject  为gameobject添加各种component",{"type":597,"tag":807,"props":15762,"children":15763},{},[15764],{"type":603,"value":15765},"Traits : 相当于component.可以定义各种属性",{"type":597,"tag":598,"props":15767,"children":15769},{"id":15768},"定义处理系统",[15770],{"type":603,"value":15768},{"type":597,"tag":1321,"props":15772,"children":15773},{},[15774,15779,15784,15789],{"type":597,"tag":807,"props":15775,"children":15776},{},[15777],{"type":603,"value":15778},"Problem  依托 DecisionController运行计划",{"type":597,"tag":807,"props":15780,"children":15781},{},[15782],{"type":603,"value":15783},"StateTermination  为Problem  提供中止条件",{"type":597,"tag":807,"props":15785,"children":15786},{},[15787],{"type":603,"value":15788},"SemanticQuery   根据query为 DecisionController提供实体",{"type":597,"tag":807,"props":15790,"children":15791},{},[15792,15794],{"type":603,"value":15793},"Action : 相当于一个特殊的system的基类.他定义了参数,和处理条件.以及effects和reward,但是没有实现具体的方法(executionInfo),executionInfo是需要手动定义的",{"type":597,"tag":621,"props":15795,"children":15797},{"code":15796},"    public abstract class PlannerActionSystem : SystemBase\n    {\n\n        List\u003CParameterDefinition> m_Parameters = new List\u003CParameterDefinition>();\n\n\n        List\u003COperation> m_Preconditions = new List\u003COperation>();\n\n\n\n        List\u003CParameterDefinition> m_CreatedObjects = new List\u003CParameterDefinition>();\n\n\n        List\u003Cstring> m_RemovedObjects = new List\u003Cstring>();\n\n\n        List\u003COperation> m_ObjectModifiers = new List\u003COperation>();\n\n\n        float m_Reward;\n\n        List\u003CCustomRewardData> m_CustomRewards;\n\n\n        Unity.AI.Planner.Controller.ActionExecutionInfo executionInfo;\n\n\n        protected override void OnUpdate()\n        {\n            //检查条件\n\n            //将参数传给executionInfo\n\n            //然后执行方法\n            \n            \n            //处理effect.对object进行修改,创建,删除\n            \n            //然后处理reward\n            \n        }\n\n    }\n",[15798],{"type":597,"tag":629,"props":15799,"children":15800},{"__ignoreMap":591},[15801],{"type":603,"value":15796},{"type":597,"tag":3720,"props":15803,"children":15804},{},[],{"type":597,"tag":598,"props":15806,"children":15808},{"id":15807},"actions",[15809],{"type":603,"value":15807},{"type":597,"tag":1321,"props":15811,"children":15812},{},[15813,15818],{"type":597,"tag":807,"props":15814,"children":15815},{},[15816],{"type":603,"value":15817},"motives  相当于 preconditions   ..需要一些设定才会执行这个",{"type":597,"tag":807,"props":15819,"children":15820},{},[15821],{"type":603,"value":15822},"Requirements   也可以使用preconditions代替   ,",{"type":597,"tag":598,"props":15824,"children":15826},{"id":15825},"domain",[15827],{"type":603,"value":15825},{"type":597,"tag":606,"props":15829,"children":15830},{},[15831],{"type":603,"value":15832},"维护了一个entities列表,当entity触发了OnTriggerEnter事件会增加到这个列表中.",{"type":597,"tag":606,"props":15834,"children":15835},{},[15836],{"type":603,"value":15837},"aiplanner倒是不需要这个..他们是通过entity和component进行目标查找的",{"title":591,"searchDepth":787,"depth":787,"links":15839},[15840,15841,15842,15843],{"id":15750,"depth":787,"text":15750},{"id":15768,"depth":787,"text":15768},{"id":15807,"depth":787,"text":15807},{"id":15825,"depth":787,"text":15825},"content:unity:2021-08-01-AI-Planner.md","unity/2021-08-01-AI-Planner.md","2021-08-01",{"_path":568,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":567,"description":15848,"body":15849,"_type":791,"_id":15881,"_source":793,"_file":15882,"_extension":795,"date":15883},"public class shishi : MonoBehaviour\n{\n    public CameraSizeHandler CameraSize01;\n \n    [System.Serializable]\n    public class CameraSizeHandler\n    {\n        public Color BackgroundColor = Color.gray;\n        public Rect ViewPortRect = new Rect(0.0f, 0.0f, 1.0f, 1.0f); \n        public RectOffset Vie",{"type":594,"children":15850,"toc":15879},[15851,15858,15866,15871],{"type":597,"tag":606,"props":15852,"children":15853},{},[15854],{"type":597,"tag":719,"props":15855,"children":15857},{"alt":719,"src":15856},"/images/2021-07-20-FormerlySerializedAs/20200110140001821.png",[],{"type":597,"tag":621,"props":15859,"children":15861},{"code":15860},"public class shishi : MonoBehaviour\n{\n    public CameraSizeHandler CameraSize01;\n \n    [System.Serializable]\n    public class CameraSizeHandler\n    {\n        public Color BackgroundColor = Color.gray;\n        public Rect ViewPortRect = new Rect(0.0f, 0.0f, 1.0f, 1.0f); \n        public RectOffset ViewPortOffset; \n        public Vector2 CanvasMargin = new Vector2(22.0f, 22.0f);\n        public float MaxSpeed = 1000.0f;\n        bool enabled = false;\n    }\n}\n",[15862],{"type":597,"tag":629,"props":15863,"children":15864},{"__ignoreMap":591},[15865],{"type":603,"value":15860},{"type":597,"tag":606,"props":15867,"children":15868},{},[15869],{"type":603,"value":15870},"现在有一个需求，想改一改CameraSize01这个字段的名字，比如想修改为CameraSize02，并且需要将之前在监视器面板中为CameraSize01设置的各项值保留下来，如果直接修改，则会丢失属性中的值",{"type":597,"tag":621,"props":15872,"children":15874},{"code":15873},"\npublic class shishi : MonoBehaviour\n{\n    [FormerlySerializedAs(\"CameraSize01\")]\n    public CameraSizeHandler CameraSize02;\n \n    [System.Serializable]\n    public class CameraSizeHandler\n    {\n        public Color BackgroundColor = Color.gray;\n        public Rect ViewPortRect = new Rect(0.0f, 0.0f, 1.0f, 1.0f); \n        public RectOffset ViewPortOffset; \n        public Vector2 CanvasMargin = new Vector2(22.0f, 22.0f);\n        public float MaxSpeed = 1000.0f;\n        bool enabled = false;\n    }\n",[15875],{"type":597,"tag":629,"props":15876,"children":15877},{"__ignoreMap":591},[15878],{"type":603,"value":15873},{"title":591,"searchDepth":787,"depth":787,"links":15880},[],"content:unity:2021-07-20-FormerlySerializedAs.md","unity/2021-07-20-FormerlySerializedAs.md","2021-07-20",{"_path":165,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":164,"description":15885,"body":15886,"_type":791,"_id":15918,"_source":793,"_file":15919,"_extension":795,"date":15920},"skills   相当于 采矿技能,种植技能 ,制作技能level templates 只是升级属性..比如角色等级,skill等级.weapon等级weapontemplates  相当于拳法精通..斧头精通..枪法精通.棍法精通这些..而且有相关的技能和属性Races  种族,定义了可选职业,以及 weapontemplates  ,以及初始stat等classes  职业定义了stat以及技能树,和魔法书",{"type":594,"children":15887,"toc":15916},[15888],{"type":597,"tag":1321,"props":15889,"children":15890},{},[15891,15896,15901,15906,15911],{"type":597,"tag":807,"props":15892,"children":15893},{},[15894],{"type":603,"value":15895},"skills   相当于 采矿技能,种植技能 ,制作技能",{"type":597,"tag":807,"props":15897,"children":15898},{},[15899],{"type":603,"value":15900},"level templates 只是升级属性..比如角色等级,skill等级.weapon等级",{"type":597,"tag":807,"props":15902,"children":15903},{},[15904],{"type":603,"value":15905},"weapontemplates  相当于拳法精通..斧头精通..枪法精通.棍法精通这些..而且有相关的技能和属性",{"type":597,"tag":807,"props":15907,"children":15908},{},[15909],{"type":603,"value":15910},"Races  种族,定义了可选职业,以及 weapontemplates  ,以及初始stat等",{"type":597,"tag":807,"props":15912,"children":15913},{},[15914],{"type":603,"value":15915},"classes  职业定义了stat以及技能树,和魔法书",{"title":591,"searchDepth":787,"depth":787,"links":15917},[],"content:game:2021-06-15-rpgbuilder.md","game/2021-06-15-rpgbuilder.md","2021-06-15",{"_path":565,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":564,"description":15922,"body":15923,"_type":791,"_id":16361,"_source":793,"_file":16362,"_extension":795,"date":16363},"工欲善其事，必先利其器。为了搞清楚 Unity 的渲染顺序，首先我们要准备一个能方便修改 SortingLayer 以及 RenderQueue 的工具，下面这个编辑器脚本可以满足这个需求：",{"type":594,"children":15924,"toc":16359},[15925,15929,15939,15944,15951,15963,15970,15975,15980,15990,15994,16001,16006,16011,16024,16029,16036,16041,16049,16054,16055,16171,16176,16182,16187,16192,16197,16205,16211,16216,16222,16227,16232,16243,16254,16266,16276,16287,16293,16303,16319,16327,16333,16344,16349],{"type":597,"tag":606,"props":15926,"children":15927},{},[15928],{"type":603,"value":15922},{"type":597,"tag":606,"props":15930,"children":15931},{},[15932],{"type":597,"tag":886,"props":15933,"children":15936},{"href":15934,"rel":15935},"https://gist.github.com/qxsoftware/499135b6482ca57727c69e11b91a12bf",[890],[15937],{"type":603,"value":15938},"MeshRendererInspector.cs",{"type":597,"tag":606,"props":15940,"children":15941},{},[15942],{"type":603,"value":15943},"效果如下：",{"type":597,"tag":606,"props":15945,"children":15946},{},[15947],{"type":597,"tag":719,"props":15948,"children":15950},{"alt":719,"src":15949},"/images/2021-06-14-unity-render-order/mesh-renderer-inspector.jpg",[],{"type":597,"tag":606,"props":15952,"children":15953},{},[15954,15956,15961],{"type":603,"value":15955},"如何添加新的 SortingLayer？请通过 ",{"type":597,"tag":1080,"props":15957,"children":15958},{},[15959],{"type":603,"value":15960},"Edit/Project Settings/Tags and Layers",{"type":603,"value":15962}," 菜单选项打开：",{"type":597,"tag":606,"props":15964,"children":15965},{},[15966],{"type":597,"tag":719,"props":15967,"children":15969},{"alt":719,"src":15968},"/images/2021-06-14-unity-render-order/tags-layers.jpg",[],{"type":597,"tag":606,"props":15971,"children":15972},{},[15973],{"type":603,"value":15974},"然后添加三个 Sorting Layer，如上图所示。注意，Sorting Layer 添加后是可以拖动调整顺序的。",{"type":597,"tag":606,"props":15976,"children":15977},{},[15978],{"type":603,"value":15979},"便捷修改 Camera 的 opaqueSortMode 和 transparencySortMode：",{"type":597,"tag":606,"props":15981,"children":15982},{},[15983],{"type":597,"tag":886,"props":15984,"children":15987},{"href":15985,"rel":15986},"https://gist.github.com/qxsoftware/1821915377e333e45f7a632ae07e64aa",[890],[15988],{"type":603,"value":15989},"CameraInspector.cs",{"type":597,"tag":606,"props":15991,"children":15992},{},[15993],{"type":603,"value":15943},{"type":597,"tag":606,"props":15995,"children":15996},{},[15997],{"type":597,"tag":719,"props":15998,"children":16000},{"alt":719,"src":15999},"/images/2021-06-14-unity-render-order/sort-mode.jpg",[],{"type":597,"tag":3995,"props":16002,"children":16004},{"id":16003},"实际测试",[16005],{"type":603,"value":16003},{"type":597,"tag":606,"props":16007,"children":16008},{},[16009],{"type":603,"value":16010},"测试之前首先明确两点：",{"type":597,"tag":1321,"props":16012,"children":16013},{},[16014,16019],{"type":597,"tag":807,"props":16015,"children":16016},{},[16017],{"type":603,"value":16018},"什么因素影响绘制顺序",{"type":597,"tag":807,"props":16020,"children":16021},{},[16022],{"type":603,"value":16023},"深度缓冲区对绘制结果的影响",{"type":597,"tag":606,"props":16025,"children":16026},{},[16027],{"type":603,"value":16028},"为了弄清楚第一点，什么因素影响绘制顺序，我们需要把 ZWrite 关闭。同时结合 Unity Frame Debugger来观察绘制顺序。",{"type":597,"tag":16030,"props":16031,"children":16033},"h5",{"id":16032},"render-queue",[16034],{"type":603,"value":16035},"Render Queue",{"type":597,"tag":606,"props":16037,"children":16038},{},[16039],{"type":603,"value":16040},"RenderQueue 是材质（Material）的关键属性，当我们在 Unity 中创建一个材质后，Unity 会给这个材质设置一个默认 Shader，然后这个材质的 RenderQueue 被改为其 Shader 中设定的 RenderQueue。如果给这个材质球换了 Shader，Unity 会更新它的 RenderQueue（但是请注意，假如当前材质的 Shader 的 RenderQueue 是 3000，然后你修改 Shader 让其 RenderQueue 变成 3100，对应材质球的 RenderQueue 并不会更新！）。",{"type":597,"tag":606,"props":16042,"children":16043},{},[16044],{"type":597,"tag":1080,"props":16045,"children":16046},{},[16047],{"type":603,"value":16048},"Unity 最终以 Material 的 RenderQueue 为准。",{"type":597,"tag":606,"props":16050,"children":16051},{},[16052],{"type":603,"value":16053},"Unity 内置了几个 RenderQueue 的字面值：",{"type":603,"value":2680},{"type":597,"tag":1937,"props":16056,"children":16057},{},[16058,16078],{"type":597,"tag":1941,"props":16059,"children":16060},{},[16061],{"type":597,"tag":1945,"props":16062,"children":16063},{},[16064,16069,16074],{"type":597,"tag":1949,"props":16065,"children":16066},{},[16067],{"type":603,"value":16068},"RenderQueue",{"type":597,"tag":1949,"props":16070,"children":16071},{},[16072],{"type":603,"value":16073},"值",{"type":597,"tag":1949,"props":16075,"children":16076},{},[16077],{"type":603,"value":1958},{"type":597,"tag":1963,"props":16079,"children":16080},{},[16081,16099,16117,16135,16153],{"type":597,"tag":1945,"props":16082,"children":16083},{},[16084,16089,16094],{"type":597,"tag":1970,"props":16085,"children":16086},{},[16087],{"type":603,"value":16088},"Background",{"type":597,"tag":1970,"props":16090,"children":16091},{},[16092],{"type":603,"value":16093},"1000",{"type":597,"tag":1970,"props":16095,"children":16096},{},[16097],{"type":603,"value":16098},"这个渲染队列最先渲染，一般用于渲染背景",{"type":597,"tag":1945,"props":16100,"children":16101},{},[16102,16107,16112],{"type":597,"tag":1970,"props":16103,"children":16104},{},[16105],{"type":603,"value":16106},"Geometry(默认值)",{"type":597,"tag":1970,"props":16108,"children":16109},{},[16110],{"type":603,"value":16111},"2000",{"type":597,"tag":1970,"props":16113,"children":16114},{},[16115],{"type":603,"value":16116},"这个渲染队列是大多数物体的默认队列，用于渲染不透明物体",{"type":597,"tag":1945,"props":16118,"children":16119},{},[16120,16125,16130],{"type":597,"tag":1970,"props":16121,"children":16122},{},[16123],{"type":603,"value":16124},"AlphaTest",{"type":597,"tag":1970,"props":16126,"children":16127},{},[16128],{"type":603,"value":16129},"2450",{"type":597,"tag":1970,"props":16131,"children":16132},{},[16133],{"type":603,"value":16134},"使用了 AlphaTest 的物体在这个队列渲染，当所有的不透明物体都渲染完了再渲染这个，有助于提升性能",{"type":597,"tag":1945,"props":16136,"children":16137},{},[16138,16143,16148],{"type":597,"tag":1970,"props":16139,"children":16140},{},[16141],{"type":603,"value":16142},"Transparent",{"type":597,"tag":1970,"props":16144,"children":16145},{},[16146],{"type":603,"value":16147},"3000",{"type":597,"tag":1970,"props":16149,"children":16150},{},[16151],{"type":603,"value":16152},"在 Geometry 和 AlphaTest 之后、从后往前渲染，所有的半透明物体都应该在这里渲染",{"type":597,"tag":1945,"props":16154,"children":16155},{},[16156,16161,16166],{"type":597,"tag":1970,"props":16157,"children":16158},{},[16159],{"type":603,"value":16160},"Overlay",{"type":597,"tag":1970,"props":16162,"children":16163},{},[16164],{"type":603,"value":16165},"4000",{"type":597,"tag":1970,"props":16167,"children":16168},{},[16169],{"type":603,"value":16170},"在之前的所有渲染队列都渲染完了之后渲染，比如镜头光晕",{"type":597,"tag":606,"props":16172,"children":16173},{},[16174],{"type":603,"value":16175},"可以看到，RenderQueue 越大，渲染越靠后。",{"type":597,"tag":16030,"props":16177,"children":16179},{"id":16178},"cameraopaquesortmode",[16180],{"type":603,"value":16181},"Camera.opaqueSortMode",{"type":597,"tag":606,"props":16183,"children":16184},{},[16185],{"type":603,"value":16186},"默认情况下，不透明物体被放在粗略分隔的从前往后排布的桶中，GPU 按照这种方式渲染能节省性能。但是也有部分 GPU 不这么干，比如 PowerVR。Camera.opaqueSortMode 这个值的默认值是 Dafault，根据不同硬件平台，这个值有可能是：OpaqueSortMode.FrontToBack 或者 OpaqueSortMode.NoDistanceSort。我们也可以主动设置这个值为某一种。比如为了减少 CPU 消耗，把这个值设置为 NoDistanceSort。",{"type":597,"tag":606,"props":16188,"children":16189},{},[16190],{"type":603,"value":16191},"所以，不透明物体大部分情况下是按照从前往后渲染，也就是离相机越近，越先渲染。",{"type":597,"tag":606,"props":16193,"children":16194},{},[16195],{"type":603,"value":16196},"如果是手动选择了 FrontToBack，就是从前往后渲染；如果是 NoDistanceSort，就是从后往前渲染。",{"type":597,"tag":617,"props":16198,"children":16199},{},[16200],{"type":597,"tag":606,"props":16201,"children":16202},{},[16203],{"type":603,"value":16204},"根据实际测试，渲染的顺序并不是完全按照物体几何中心离相机的距离进行排序，而是一个近似的排序。",{"type":597,"tag":16030,"props":16206,"children":16208},{"id":16207},"cameratransparencysortmode",[16209],{"type":603,"value":16210},"Camera.transparencySortMode",{"type":597,"tag":606,"props":16212,"children":16213},{},[16214],{"type":603,"value":16215},"按照我测试用的 Unity5.3.4f1，修改这个值也会影响不透明物体的渲染顺序。所以这个东西很可能不重要，而且有 bug。",{"type":597,"tag":16030,"props":16217,"children":16219},{"id":16218},"sortinglayer",[16220],{"type":603,"value":16221},"SortingLayer",{"type":597,"tag":606,"props":16223,"children":16224},{},[16225],{"type":603,"value":16226},"SortingLayer 拥有最高优先级，如果 SortingLayer 不同，则首先按照 SortingLayer 排序；如果 SortingLayer 相同，再按照 RenderQueue 排序。",{"type":597,"tag":606,"props":16228,"children":16229},{},[16230],{"type":603,"value":16231},"如下图所示，有 6 个立方体，分别按顺序在摄像机前排开：",{"type":597,"tag":606,"props":16233,"children":16234},{},[16235,16239],{"type":597,"tag":719,"props":16236,"children":16238},{"alt":719,"src":16237},"/images/2021-06-14-unity-render-order/preview.png",[],{"type":597,"tag":719,"props":16240,"children":16242},{"alt":719,"src":16241},"/images/2021-06-14-unity-render-order/cubes.jpg",[],{"type":597,"tag":606,"props":16244,"children":16245},{},[16246,16248,16253],{"type":603,"value":16247},"其中，g1 组的立方体 SortingLayer 都是 Layer3，RenderQueue 都是 3000；g2 组的立方体 SortingLayer 都是 Layer2，RenderQueue 都是3500，最终渲染顺序是：",{"type":597,"tag":1080,"props":16249,"children":16250},{},[16251],{"type":603,"value":16252},"g2m1 g2m2 g2m3 g1m1 g1m2 g1m3",{"type":603,"value":758},{"type":597,"tag":606,"props":16255,"children":16256},{},[16257,16259,16264],{"type":603,"value":16258},"直观地说，就是 SortingLayer 越大，则物体",{"type":597,"tag":1080,"props":16260,"children":16261},{},[16262],{"type":603,"value":16263},"层级",{"type":603,"value":16265},"越高。SortingLayer 默认只有一个：Default，越往后添加的 SortingLayer 越大。",{"type":597,"tag":606,"props":16267,"children":16268},{},[16269,16271,16275],{"type":603,"value":16270},"现在把 g1 组的立方体 SortingLayer 改成 Layer2，RenderQueue 改成 3600，最终渲染顺序还是：",{"type":597,"tag":1080,"props":16272,"children":16273},{},[16274],{"type":603,"value":16252},{"type":603,"value":758},{"type":597,"tag":606,"props":16277,"children":16278},{},[16279,16281,16285],{"type":603,"value":16280},"直观地说，SortingLayer 相同的前提下，RenderQueue 越大，则物体",{"type":597,"tag":1080,"props":16282,"children":16283},{},[16284],{"type":603,"value":16263},{"type":603,"value":16286},"越高。",{"type":597,"tag":16030,"props":16288,"children":16290},{"id":16289},"sortingorder",[16291],{"type":603,"value":16292},"SortingOrder",{"type":597,"tag":606,"props":16294,"children":16295},{},[16296,16298,16302],{"type":603,"value":16297},"如果 SortingLayer 和 RenderQueue 都一样，则 SortingOrder 越大，则物体",{"type":597,"tag":1080,"props":16299,"children":16300},{},[16301],{"type":603,"value":16263},{"type":603,"value":16286},{"type":597,"tag":606,"props":16304,"children":16305},{},[16306,16308,16312,16314,16318],{"type":603,"value":16307},"如果只是 SortingLayer 一样，RenderQueue 和 SortingOrder 都不一样，则物体的",{"type":597,"tag":1080,"props":16309,"children":16310},{},[16311],{"type":603,"value":16263},{"type":603,"value":16313},"由 RenderQueue 和 SortingOrder 之和决定，相加之和越大，",{"type":597,"tag":1080,"props":16315,"children":16316},{},[16317],{"type":603,"value":16263},{"type":603,"value":16286},{"type":597,"tag":617,"props":16320,"children":16321},{},[16322],{"type":597,"tag":606,"props":16323,"children":16324},{},[16325],{"type":603,"value":16326},"以上结论是通过 Frame Debugger 单步执行得出的。",{"type":597,"tag":16030,"props":16328,"children":16330},{"id":16329},"cameradepth",[16331],{"type":603,"value":16332},"Camera.depth",{"type":597,"tag":606,"props":16334,"children":16335},{},[16336,16338,16342],{"type":603,"value":16337},"还有一个很常用的调整渲染顺序的选项：摄像机深度。摄像机深度是优先级最高的选项，深度值越大，物体",{"type":597,"tag":1080,"props":16339,"children":16340},{},[16341],{"type":603,"value":16263},{"type":603,"value":16343},"越高。常用的比如 NGUI 就是用一个单独的相机（深度值比渲染场景的相机大）来渲染 UI，这样就保证 UI 在所有东西上方。",{"type":597,"tag":606,"props":16345,"children":16346},{},[16347],{"type":603,"value":16348},"参考资料：",{"type":597,"tag":606,"props":16350,"children":16351},{},[16352],{"type":597,"tag":886,"props":16353,"children":16356},{"href":16354,"rel":16355},"https://jakobknudsen.wordpress.com/2013/07/20/transparency-and-sorting/",[890],[16357],{"type":603,"value":16358},"Transparency and sorting in Unity",{"title":591,"searchDepth":787,"depth":787,"links":16360},[],"content:unity:2021-06-14-unity-render-order.md","unity/2021-06-14-unity-render-order.md","2021-06-14",{"_path":562,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":561,"description":16365,"body":16366,"_type":791,"_id":16416,"_source":793,"_file":16417,"_extension":795,"date":16418},"Hello Readers, I'll Show you how to make simple one way platform. It is simple, useful and efficient technique to achieve this result. Here is the procedure --",{"type":594,"children":16367,"toc":16414},[16368,16372,16385,16393,16401,16409],{"type":597,"tag":606,"props":16369,"children":16370},{},[16371],{"type":603,"value":16365},{"type":597,"tag":803,"props":16373,"children":16374},{},[16375,16380],{"type":597,"tag":807,"props":16376,"children":16377},{},[16378],{"type":603,"value":16379},"Make a Simple platform using Box collider.",{"type":597,"tag":807,"props":16381,"children":16382},{},[16383],{"type":603,"value":16384},"Make a new game object children of the platform and add a box collider just below the original platform as shown in image and tick its 'is trigger' checkbox so that we can check player's collision in it.",{"type":597,"tag":606,"props":16386,"children":16387},{},[16388],{"type":597,"tag":719,"props":16389,"children":16392},{"alt":16390,"src":16391},"111","/images/2021-06-13-How-to-Make-One-Way-Platform/111-1623584452229.jpg",[],{"type":597,"tag":803,"props":16394,"children":16395},{},[16396],{"type":597,"tag":807,"props":16397,"children":16398},{},[16399],{"type":603,"value":16400},"Create a new Script to the game object we create in step 2 and assign the following script --",{"type":597,"tag":621,"props":16402,"children":16404},{"code":16403},"//the collider of the main visible platform\nvar platform : BoxCollider2D;\n//this variable is true when the players is just below the platform so that its Box collider can be disabled that will allow the player to pass through the platform\nvar oneway : boolean;\n\n\nfunction Update () {\n    //Enabling or Disabling the platform's Box collider to allowing player to pass\n    if (oneway)\n     platform.enabled=false;\n     if (!oneway)\n     platform.enabled=true; \n}\n//Checking the collison of the gameobject we created in step 2 for checking if the player is just below the platform and nedded to ignore the collison to the platform\nfunction OnTriggerStay2D(other: Collider2D) {\n   oneway = true;\n}\n\nfunction OnTriggerExit2D(other: Collider2D) {\n//Just to make sure that the platform's Box Collider does not get permantly disabled and it should be enabeled once the player get its through\n   oneway = false;\n}\n",[16405],{"type":597,"tag":629,"props":16406,"children":16407},{"__ignoreMap":591},[16408],{"type":603,"value":16403},{"type":597,"tag":606,"props":16410,"children":16411},{},[16412],{"type":603,"value":16413},"I've made a simple ball game to illustrate the application of the one way platforms. You can download the example project folder below. --",{"title":591,"searchDepth":787,"depth":787,"links":16415},[],"content:unity:2021-06-13-How-to-Make-One-Way-Platform.md","unity/2021-06-13-How-to-Make-One-Way-Platform.md","2021-06-13",{"_path":162,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":161,"description":16420,"body":16421,"_type":791,"_id":16703,"_source":793,"_file":16704,"_extension":795,"date":16705},"生成类LevelGeneratorBase  最基本的生成方法类包括Generate和GenerateCoroutineDungeonGeneratorBase 一般都会继承于该类Generate流程创建playload,即IPipelineTask的上下文创建pipelineTask,包括三个InputTask,GeneratorTask,PostProcessingTaskPipelineRunner执行管道任务,将playload赋值给各个pipelineTask然后执行pipelinetask的Process()函数pipelineTask你可以继承LevelGeneratorBase",{"type":594,"children":16422,"toc":16698},[16423,16428,16466,16477,16523,16529,16562,16648,16654,16659,16664,16669,16677,16685,16690],{"type":597,"tag":1023,"props":16424,"children":16426},{"id":16425},"生成类",[16427],{"type":603,"value":16425},{"type":597,"tag":1321,"props":16429,"children":16430},{},[16431,16455],{"type":597,"tag":807,"props":16432,"children":16433},{},[16434,16440,16442,16448,16449],{"type":597,"tag":629,"props":16435,"children":16437},{"className":16436},[],[16438],{"type":603,"value":16439},"LevelGeneratorBase",{"type":603,"value":16441},"  最基本的生成方法类包括",{"type":597,"tag":629,"props":16443,"children":16445},{"className":16444},[],[16446],{"type":603,"value":16447},"Generate",{"type":603,"value":695},{"type":597,"tag":629,"props":16450,"children":16452},{"className":16451},[],[16453],{"type":603,"value":16454},"GenerateCoroutine",{"type":597,"tag":807,"props":16456,"children":16457},{},[16458,16464],{"type":597,"tag":629,"props":16459,"children":16461},{"className":16460},[],[16462],{"type":603,"value":16463},"DungeonGeneratorBase",{"type":603,"value":16465}," 一般都会继承于该类",{"type":597,"tag":3995,"props":16467,"children":16469},{"id":16468},"generate流程",[16470,16475],{"type":597,"tag":629,"props":16471,"children":16473},{"className":16472},[],[16474],{"type":603,"value":16447},{"type":603,"value":16476},"流程",{"type":597,"tag":803,"props":16478,"children":16479},{},[16480,16485,16510],{"type":597,"tag":807,"props":16481,"children":16482},{},[16483],{"type":603,"value":16484},"创建playload,即IPipelineTask的上下文",{"type":597,"tag":807,"props":16486,"children":16487},{},[16488,16490,16496,16497,16503,16504],{"type":603,"value":16489},"创建pipelineTask,包括三个",{"type":597,"tag":629,"props":16491,"children":16493},{"className":16492},[],[16494],{"type":603,"value":16495},"InputTask",{"type":603,"value":9688},{"type":597,"tag":629,"props":16498,"children":16500},{"className":16499},[],[16501],{"type":603,"value":16502},"GeneratorTask",{"type":603,"value":9688},{"type":597,"tag":629,"props":16505,"children":16507},{"className":16506},[],[16508],{"type":603,"value":16509},"PostProcessingTask",{"type":597,"tag":807,"props":16511,"children":16512},{},[16513,16515,16521],{"type":603,"value":16514},"PipelineRunner执行管道任务,将playload赋值给各个pipelineTask然后执行pipelinetask的",{"type":597,"tag":629,"props":16516,"children":16518},{"className":16517},[],[16519],{"type":603,"value":16520},"Process()",{"type":603,"value":16522},"函数",{"type":597,"tag":3995,"props":16524,"children":16526},{"id":16525},"pipelinetask",[16527],{"type":603,"value":16528},"pipelineTask",{"type":597,"tag":606,"props":16530,"children":16531},{},[16532,16534,16539,16541,16547,16548,16554,16556],{"type":603,"value":16533},"你可以继承",{"type":597,"tag":629,"props":16535,"children":16537},{"className":16536},[],[16538],{"type":603,"value":16439},{"type":603,"value":16540},"  然后分别覆盖",{"type":597,"tag":629,"props":16542,"children":16544},{"className":16543},[],[16545],{"type":603,"value":16546},"GetInputTask()",{"type":603,"value":695},{"type":597,"tag":629,"props":16549,"children":16551},{"className":16550},[],[16552],{"type":603,"value":16553},"GetGeneratorTask()",{"type":603,"value":16555},",还有",{"type":597,"tag":629,"props":16557,"children":16559},{"className":16558},[],[16560],{"type":603,"value":16561},"GetPostProcessingTask()",{"type":597,"tag":1321,"props":16563,"children":16564},{},[16565,16575,16599],{"type":597,"tag":807,"props":16566,"children":16567},{},[16568,16573],{"type":597,"tag":629,"props":16569,"children":16571},{"className":16570},[],[16572],{"type":603,"value":16495},{"type":603,"value":16574},"   一般来说是FixedLevelGraphInputTask,主要是用来设置Payload.LevelDescription",{"type":597,"tag":807,"props":16576,"children":16577},{},[16578,16583,16585,16591,16593],{"type":597,"tag":629,"props":16579,"children":16581},{"className":16580},[],[16582],{"type":603,"value":16502},{"type":603,"value":16584},"   主要是通过GraphBasedGeneratorGrid2D来设置Payload.GeneratedLevel 和 Payload.GeneratorStats,还有会实例化",{"type":597,"tag":629,"props":16586,"children":16588},{"className":16587},[],[16589],{"type":603,"value":16590},"Generated Level/Room template instances",{"type":603,"value":16592},"以及下面的房间,参见",{"type":597,"tag":629,"props":16594,"children":16596},{"className":16595},[],[16597],{"type":603,"value":16598},"GeneratorUtils.TransformLayout",{"type":597,"tag":807,"props":16600,"children":16601},{},[16602,16607,16609],{"type":597,"tag":629,"props":16603,"children":16605},{"className":16604},[],[16606],{"type":603,"value":16509},{"type":603,"value":16608},"  主要是根据PriorityCallbacks按照优先顺序执行回调函数,默认的回调函数,通过配置有以下",{"type":597,"tag":1321,"props":16610,"children":16611},{},[16612,16623,16628,16633,16638,16643],{"type":597,"tag":807,"props":16613,"children":16614},{},[16615,16617],{"type":603,"value":16616},"InitializeSharedTilemaps 即实例化",{"type":597,"tag":629,"props":16618,"children":16620},{"className":16619},[],[16621],{"type":603,"value":16622},"GeneratedLevel/Tilemaps",{"type":597,"tag":807,"props":16624,"children":16625},{},[16626],{"type":603,"value":16627},"CopyTilesToSharedTilemaps 将rooms下的tile复制到SharedTilemaps 下",{"type":597,"tag":807,"props":16629,"children":16630},{},[16631],{"type":603,"value":16632},"CenterGrid 将Generated Level下的子对象设置为0,0",{"type":597,"tag":807,"props":16634,"children":16635},{},[16636],{"type":603,"value":16637},"DisableRoomTemplatesRenderers    禁用roomtemapltes下的显示",{"type":597,"tag":807,"props":16639,"children":16640},{},[16641],{"type":603,"value":16642},"DisableRoomTemplatesColliders  禁用roomtemplates下的碰撞",{"type":597,"tag":807,"props":16644,"children":16645},{},[16646],{"type":603,"value":16647},"还可以通过继承DungeonGeneratorPostProcessBase写你自己的后处理函数",{"type":597,"tag":1023,"props":16649,"children":16651},{"id":16650},"door-sockets",[16652],{"type":603,"value":16653},"Door sockets",{"type":597,"tag":606,"props":16655,"children":16656},{},[16657],{"type":603,"value":16658},"门锁..就是走廊和房间选中同一个锁,就能匹配的上",{"type":597,"tag":598,"props":16660,"children":16662},{"id":16661},"对于连接处",[16663],{"type":603,"value":16661},{"type":597,"tag":606,"props":16665,"children":16666},{},[16667],{"type":603,"value":16668},"他会按照顺序copy到sharedtilemaps.所以,位于连接处的tile,如果后面的会覆盖前面的",{"type":597,"tag":606,"props":16670,"children":16671},{},[16672],{"type":597,"tag":719,"props":16673,"children":16676},{"alt":16674,"src":16675},"image-20210630183742467","/images/2021-06-12-edgar-code-read/image-20210630183742467.png",[],{"type":597,"tag":606,"props":16678,"children":16679},{},[16680],{"type":597,"tag":719,"props":16681,"children":16684},{"alt":16682,"src":16683},"image-20210630183825008","/images/2021-06-12-edgar-code-read/image-20210630183825008.png",[],{"type":597,"tag":606,"props":16686,"children":16687},{},[16688],{"type":603,"value":16689},"最终的合成则是下图",{"type":597,"tag":606,"props":16691,"children":16692},{},[16693],{"type":597,"tag":719,"props":16694,"children":16697},{"alt":16695,"src":16696},"image-20210630183914172","/images/2021-06-12-edgar-code-read/image-20210630183914172.png",[],{"title":591,"searchDepth":787,"depth":787,"links":16699},[16700,16701,16702],{"id":16425,"depth":1530,"text":16425},{"id":16650,"depth":1530,"text":16653},{"id":16661,"depth":787,"text":16661},"content:game:2021-06-12-edgar-code-read.md","game/2021-06-12-edgar-code-read.md","2021-06-12",{"_path":559,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":558,"description":16707,"body":16708,"_type":791,"_id":16774,"_source":793,"_file":16775,"_extension":795,"date":16776},"componentpublic struct State:IComponentData\n{\n    public int a;\n} \na系统\n var PostUpdateCommands = World.GetExistingSystem\u003CAbilityUpdateCommandBufferSystem>().CreateCommandBuffer();\nEntities\n    .ForEach((Entity entity) =>\n    {\n        var state = EntityManager.GetComponent\u003CState>(entity);\n        st",{"type":594,"children":16709,"toc":16772},[16710,16715,16723,16728,16736,16741,16749,16754,16762,16767],{"type":597,"tag":606,"props":16711,"children":16712},{},[16713],{"type":603,"value":16714},"component",{"type":597,"tag":621,"props":16716,"children":16718},{"code":16717},"public struct State:IComponentData\n{\n    public int a;\n} \n",[16719],{"type":597,"tag":629,"props":16720,"children":16721},{"__ignoreMap":591},[16722],{"type":603,"value":16717},{"type":597,"tag":606,"props":16724,"children":16725},{},[16726],{"type":603,"value":16727},"a系统",{"type":597,"tag":621,"props":16729,"children":16731},{"code":16730},"\n var PostUpdateCommands = World.GetExistingSystem\u003CAbilityUpdateCommandBufferSystem>().CreateCommandBuffer();\nEntities\n    .ForEach((Entity entity) =>\n    {\n        var state = EntityManager.GetComponent\u003CState>(entity);\n        state.a = 1111;\n        PostUpdateCommands.SetComponent(entity,state);\n    })\n    .WithoutBurst()\n    .Run();\n",[16732],{"type":597,"tag":629,"props":16733,"children":16734},{"__ignoreMap":591},[16735],{"type":603,"value":16730},{"type":597,"tag":606,"props":16737,"children":16738},{},[16739],{"type":603,"value":16740},"b系统",{"type":597,"tag":621,"props":16742,"children":16744},{"code":16743},"Entities\n    .ForEach((Entity entity) =>\n    {\n        var state = EntityManager.GetComponent\u003CState>(entity);\n        state.a = 2222;\n        EntityManager.SetComponentData(entity,state);\n    })\n     .WithStructuralChanges()\n    .Run();\n",[16745],{"type":597,"tag":629,"props":16746,"children":16747},{"__ignoreMap":591},[16748],{"type":603,"value":16743},{"type":597,"tag":606,"props":16750,"children":16751},{},[16752],{"type":603,"value":16753},"执行顺序",{"type":597,"tag":621,"props":16755,"children":16757},{"code":16756},"A-->B-->AbilityUpdateCommandBufferSystem\n",[16758],{"type":597,"tag":629,"props":16759,"children":16760},{"__ignoreMap":591},[16761],{"type":603,"value":16756},{"type":597,"tag":606,"props":16763,"children":16764},{},[16765],{"type":603,"value":16766},"这里的结果,我们以为是2222.其实是1111.",{"type":597,"tag":606,"props":16768,"children":16769},{},[16770],{"type":603,"value":16771},"所以要么全是使用commandbuff.否则容易造成数据错误",{"title":591,"searchDepth":787,"depth":787,"links":16773},[],"content:unity:2021-05-20-ecs-commandbuff-question.md","unity/2021-05-20-ecs-commandbuff-question.md","2021-05-20",{"_path":330,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":329,"description":16778,"body":16779,"_type":791,"_id":16870,"_source":793,"_file":16871,"_extension":795,"date":16872},"微软DNS服务器——可以长期信赖的稳定服务器。主用：4.2.2.1备用：4.2.2.2如果你使用win10,且要经常登录微软账号.一定要设置一个国内公共DNS服务提供商：百度DNS服务器——延迟很小，毕竟是大品牌，响应速度也不错，口碑不错。​\t主用：180.76.76.76腾讯DNS服务器——延迟小，响应快，口碑不错。​\t主用：119.29.29.29​\t备用：182.254.116.116阿里DNS服务器——延迟小，响应快，口碑不错。​\t主用：223.5.5.5​\t备用：223.6.6.6CNNIC中国互联网络信息中心 DNS服务器——国家队产品，地址好记，经常用来做网络连通性测试的。​\t主",{"type":594,"children":16780,"toc":16866},[16781,16787,16792,16797,16802,16808],{"type":597,"tag":1023,"props":16782,"children":16784},{"id":16783},"微软dns服务器可以长期信赖的稳定服务器",[16785],{"type":603,"value":16786},"微软DNS服务器——可以长期信赖的稳定服务器。",{"type":597,"tag":606,"props":16788,"children":16789},{},[16790],{"type":603,"value":16791},"主用：4.2.2.1",{"type":597,"tag":606,"props":16793,"children":16794},{},[16795],{"type":603,"value":16796},"备用：4.2.2.2",{"type":597,"tag":606,"props":16798,"children":16799},{},[16800],{"type":603,"value":16801},"如果你使用win10,且要经常登录微软账号.一定要设置一个",{"type":597,"tag":1023,"props":16803,"children":16805},{"id":16804},"国内公共dns服务提供商",[16806],{"type":603,"value":16807},"国内公共DNS服务提供商：",{"type":597,"tag":1321,"props":16809,"children":16810},{},[16811,16821,16836,16851],{"type":597,"tag":807,"props":16812,"children":16813},{},[16814,16816,16819],{"type":603,"value":16815},"百度DNS服务器——延迟很小，毕竟是大品牌，响应速度也不错，口碑不错。",{"type":597,"tag":1595,"props":16817,"children":16818},{},[],{"type":603,"value":16820},"​\t主用：180.76.76.76",{"type":597,"tag":807,"props":16822,"children":16823},{},[16824,16826,16829,16831,16834],{"type":603,"value":16825},"腾讯DNS服务器——延迟小，响应快，口碑不错。",{"type":597,"tag":1595,"props":16827,"children":16828},{},[],{"type":603,"value":16830},"​\t主用：119.29.29.29",{"type":597,"tag":1595,"props":16832,"children":16833},{},[],{"type":603,"value":16835},"​\t备用：182.254.116.116",{"type":597,"tag":807,"props":16837,"children":16838},{},[16839,16841,16844,16846,16849],{"type":603,"value":16840},"阿里DNS服务器——延迟小，响应快，口碑不错。",{"type":597,"tag":1595,"props":16842,"children":16843},{},[],{"type":603,"value":16845},"​\t主用：223.5.5.5",{"type":597,"tag":1595,"props":16847,"children":16848},{},[],{"type":603,"value":16850},"​\t备用：223.6.6.6",{"type":597,"tag":807,"props":16852,"children":16853},{},[16854,16856,16859,16861,16864],{"type":603,"value":16855},"CNNIC中国互联网络信息中心 DNS服务器——国家队产品，地址好记，经常用来做网络连通性测试的。",{"type":597,"tag":1595,"props":16857,"children":16858},{},[],{"type":603,"value":16860},"​\t主用：1.2.4.8",{"type":597,"tag":1595,"props":16862,"children":16863},{},[],{"type":603,"value":16865},"​\t备用：202.98.0.68",{"title":591,"searchDepth":787,"depth":787,"links":16867},[16868,16869],{"id":16783,"depth":1530,"text":16786},{"id":16804,"depth":1530,"text":16807},"content:tool:2021-05-06-dns.md","tool/2021-05-06-dns.md","2021-05-06",{"_path":137,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":136,"description":16874,"body":16875,"_type":791,"_id":17804,"_source":793,"_file":17805,"_extension":795,"date":17806},"In object-oriented code bases, we tend to express most of not all of our data in highly semantic and contextual ways – that is, we use classes that contain both data and behaviour, and often even more information through inheritance, attributes, and more.",{"type":594,"children":16876,"toc":17787},[16877,16881,16886,16891,16897,16902,16907,16912,16917,16923,16928,16933,16938,16943,16953,16966,16971,16991,17004,17009,17017,17022,17030,17035,17048,17054,17059,17071,17076,17088,17093,17098,17103,17108,17113,17118,17130,17135,17152,17170,17175,17180,17188,17193,17201,17206,17211,17216,17221,17226,17231,17256,17261,17266,17272,17277,17282,17287,17293,17298,17303,17316,17321,17390,17395,17403,17417,17422,17427,17432,17437,17442,17448,17453,17454,17561,17579,17597,17602,17603,17705,17730,17735,17740,17745,17751,17756,17767,17772,17777,17782],{"type":597,"tag":606,"props":16878,"children":16879},{},[16880],{"type":603,"value":16874},{"type":597,"tag":606,"props":16882,"children":16883},{},[16884],{"type":603,"value":16885},"However, sometimes we need to extract the data contained in these types – for example for sending network messages, or saving to disk. In this post we will look into converting between structs and byte arrays, to make exactly this possible.",{"type":597,"tag":606,"props":16887,"children":16888},{},[16889],{"type":603,"value":16890},"We will compare different ways of doing so, and analyse them for performance and easy of use.",{"type":597,"tag":598,"props":16892,"children":16894},{"id":16893},"why-byte-arrays",[16895],{"type":603,"value":16896},"Why byte arrays?",{"type":597,"tag":606,"props":16898,"children":16899},{},[16900],{"type":603,"value":16901},"The reason we will be looking into serialising our data into byte arrays is because these are essentially the most fundamental data storage format. We can easily write them to a network buffer or stream, or to a file.",{"type":597,"tag":606,"props":16903,"children":16904},{},[16905],{"type":603,"value":16906},"There are many alternatives and none of them will be right for every single use case. For example, I like to use JSON files to store settings, scripts, and text-based assets, as well as asset meta data.",{"type":597,"tag":606,"props":16908,"children":16909},{},[16910],{"type":603,"value":16911},"In those cases performance is not the most important consideration. Instead it is more valuable to be able to edit and review files easily inside a text editor.",{"type":597,"tag":606,"props":16913,"children":16914},{},[16915],{"type":603,"value":16916},"In situations where performance is important however – such as the mentioned networking or compact file storage – serialising only the relevant data itself and skipping the encoding and formatting inherent to clear text files can be key.",{"type":597,"tag":598,"props":16918,"children":16920},{"id":16919},"why-structures",[16921],{"type":603,"value":16922},"Why structures?",{"type":597,"tag":606,"props":16924,"children":16925},{},[16926],{"type":603,"value":16927},"There are several reasons for why we are talking about structures specifically.",{"type":597,"tag":606,"props":16929,"children":16930},{},[16931],{"type":603,"value":16932},"First, I want to make a clear distinction between data and behaviour, by using a type that contains exactly the data we are interested in serialising.",{"type":597,"tag":606,"props":16934,"children":16935},{},[16936],{"type":603,"value":16937},"Secondly, structures are much more reliable and controllable when it comes to binary data layout. We will see how this is important for our last method of serialisation.",{"type":597,"tag":606,"props":16939,"children":16940},{},[16941],{"type":603,"value":16942},"Overall, we can use structures to directly represent the data that will be written into our byte array. For our example of networking this means that we have a clear one to one correspondence between our structures and our network messages.",{"type":597,"tag":598,"props":16944,"children":16946},{"id":16945},"binaryformatter",[16947],{"type":597,"tag":629,"props":16948,"children":16950},{"className":16949},[],[16951],{"type":603,"value":16952},"BinaryFormatter",{"type":597,"tag":606,"props":16954,"children":16955},{},[16956,16958,16964],{"type":603,"value":16957},"In our first method of converting between structs and byte arrays, we will make use of .NET’s ",{"type":597,"tag":886,"props":16959,"children":16962},{"href":16960,"rel":16961},"https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter(v=vs.110).aspx",[890],[16963],{"type":603,"value":16952},{"type":603,"value":16965}," class.",{"type":597,"tag":606,"props":16967,"children":16968},{},[16969],{"type":603,"value":16970},"The entire purpose of that class is to serialise an object into binary format (i.e. a byte array) – as well as deserialising the same back into objects.",{"type":597,"tag":606,"props":16972,"children":16973},{},[16974,16976,16982,16984,16990],{"type":603,"value":16975},"The class offers a lot of functionality – most of which we are not interested in here. Of interest to us are only two methods: ",{"type":597,"tag":629,"props":16977,"children":16979},{"className":16978},[],[16980],{"type":603,"value":16981},"Serialize()",{"type":603,"value":16983}," and ",{"type":597,"tag":629,"props":16985,"children":16987},{"className":16986},[],[16988],{"type":603,"value":16989},"Deserialize()",{"type":603,"value":9674},{"type":597,"tag":606,"props":16992,"children":16993},{},[16994,16996,17002],{"type":603,"value":16995},"These methods allow us to read/write our data to any stream. In many cases we could use this to write to a network – or file – buffer or stream directly. For our purpose – and for ease of testing, we will use the ",{"type":597,"tag":629,"props":16997,"children":16999},{"className":16998},[],[17000],{"type":603,"value":17001},"MemoryStream",{"type":603,"value":17003}," class which is little more than a stream wrapper around a byte array in the first place.",{"type":597,"tag":606,"props":17005,"children":17006},{},[17007],{"type":603,"value":17008},"Here are two generic methods that do exactly this:",{"type":597,"tag":621,"props":17010,"children":17012},{"code":17011},"public static byte[] Serialize\u003CT>(T data)\n    where T : struct\n{\n    var formatter = new BinaryFormatter();\n    var stream = new MemoryStream();\n    formatter.Serialize(stream, data);\n    return stream.ToArray();\n}\npublic static T Deserialize\u003CT>(byte[] array)\n    where T : struct\n{\n    var stream = new MemoryStream(array);\n    var formatter = new BinaryFormatter();\n    return (T)formatter.Deserialize(stream);\n}\n",[17013],{"type":597,"tag":629,"props":17014,"children":17015},{"__ignoreMap":591},[17016],{"type":603,"value":17011},{"type":597,"tag":606,"props":17018,"children":17019},{},[17020],{"type":603,"value":17021},"These methods can now be easily used like this:",{"type":597,"tag":621,"props":17023,"children":17025},{"code":17024},"[Serializable] // BinaryFormatter needs this attribute\nstruct MyStruct\n{\n    // some fields here\n}\n\nvar data = new MyStruct();\nvar bytes = Serialize(data);\nvar data2 = Deserialize\u003CMyStruct>(bytes);\n// data and data2 now contain the same values\n",[17026],{"type":597,"tag":629,"props":17027,"children":17028},{"__ignoreMap":591},[17029],{"type":603,"value":17024},{"type":597,"tag":606,"props":17031,"children":17032},{},[17033],{"type":603,"value":17034},"This looks great!",{"type":597,"tag":606,"props":17036,"children":17037},{},[17038,17040,17046],{"type":603,"value":17039},"It seems that we have found a solution that is both easy to use, and requires almost no work if we want to expand it. Allowing for the conversion of new structs simple requires the addition of the ",{"type":597,"tag":629,"props":17041,"children":17043},{"className":17042},[],[17044],{"type":603,"value":17045},"Serializable",{"type":603,"value":17047}," attribute, while we have to do nothing at all if we modify our structures to include more, less, or different data.",{"type":597,"tag":1023,"props":17049,"children":17051},{"id":17050},"performance",[17052],{"type":603,"value":17053},"Performance",{"type":597,"tag":606,"props":17055,"children":17056},{},[17057],{"type":603,"value":17058},"How about performance?",{"type":597,"tag":606,"props":17060,"children":17061},{},[17062,17064],{"type":603,"value":17063},"I wrote a little test that both serialises and deserialises hundreds of thousands of times, and repeats that process several times to make sure we get accurate results. You can find the full code of it ",{"type":597,"tag":886,"props":17065,"children":17068},{"href":17066,"rel":17067},"https://github.com/amulware/genericgamedev-tests/tree/master/src/StructByteArrayConversion",[890],[17069],{"type":603,"value":17070},"on my GitHub",{"type":597,"tag":606,"props":17072,"children":17073},{},[17074],{"type":603,"value":17075},"Here are the results:",{"type":597,"tag":606,"props":17077,"children":17078},{},[17079,17081,17086],{"type":603,"value":17080},"Using ",{"type":597,"tag":629,"props":17082,"children":17084},{"className":17083},[],[17085],{"type":603,"value":16952},{"type":603,"value":17087},",\n– converting a 16 byte structs to an array one million times takes 4.86 seconds;\n– converting an array to a 16 byte struct one million times takes 3.85 seconds.",{"type":597,"tag":606,"props":17089,"children":17090},{},[17091],{"type":603,"value":17092},"This means that a single call to either of our methods takes less than 5 microseconds.",{"type":597,"tag":606,"props":17094,"children":17095},{},[17096],{"type":603,"value":17097},"That is pretty good!",{"type":597,"tag":606,"props":17099,"children":17100},{},[17101],{"type":603,"value":17102},"With this performance we can easily write and read thousands of networking messages per second before we will notice the performance impact. That is easily enough for most games and other real-time applications.",{"type":597,"tag":606,"props":17104,"children":17105},{},[17106],{"type":603,"value":17107},"There is another kind of performance measurement that is important however – and especially so when it comes to networking: Bandwidth.",{"type":597,"tag":606,"props":17109,"children":17110},{},[17111],{"type":603,"value":17112},"The struct I ran the tests with consisted of exactly 16 bytes. That means that in principle we should be able to write it into a byte array with length 16. The BinaryFormatter however – and this is related to the other features it has – writes a total of 218 bytes to the array.",{"type":597,"tag":606,"props":17114,"children":17115},{},[17116],{"type":603,"value":17117},"Suffice it to say: That is a whole lot more.",{"type":597,"tag":606,"props":17119,"children":17120},{},[17121,17123,17129],{"type":603,"value":17122},"The advantage of this is, that the object that is deserialised will actually be of the correct type. I merely made the method generic so that we could perform the cast and return the structure boxed in the result of ",{"type":597,"tag":629,"props":17124,"children":17126},{"className":17125},[],[17127],{"type":603,"value":17128},"BinaryFormatter.Deserialize()",{"type":603,"value":9674},{"type":597,"tag":606,"props":17131,"children":17132},{},[17133],{"type":603,"value":17134},"There are cases were we care less about the amount of data, and prefer to handle our data in this way. For this post however, I want to find a method that results in an array as small as possible.",{"type":597,"tag":598,"props":17136,"children":17138},{"id":17137},"binarywriterbinaryreader",[17139,17145,17146],{"type":597,"tag":629,"props":17140,"children":17142},{"className":17141},[],[17143],{"type":603,"value":17144},"BinaryWriter",{"type":603,"value":3326},{"type":597,"tag":629,"props":17147,"children":17149},{"className":17148},[],[17150],{"type":603,"value":17151},"BinaryReader",{"type":597,"tag":606,"props":17153,"children":17154},{},[17155,17157,17163,17164],{"type":603,"value":17156},"Our second case study will be two other .NET classes: ",{"type":597,"tag":886,"props":17158,"children":17161},{"href":17159,"rel":17160},"https://msdn.microsoft.com/en-us/library/system.io.binaryreader(v=vs.110).aspx",[890],[17162],{"type":603,"value":17144},{"type":603,"value":16983},{"type":597,"tag":886,"props":17165,"children":17168},{"href":17166,"rel":17167},"https://msdn.microsoft.com/en-us/library/system.io.binarywriter(v=vs.110).aspx",[890],[17169],{"type":603,"value":17151},{"type":597,"tag":606,"props":17171,"children":17172},{},[17173],{"type":603,"value":17174},"These classes are much simpler. They do little more than allowing us to write and read primitive types like integers and booleans to and from an arbitrary stream.",{"type":597,"tag":606,"props":17176,"children":17177},{},[17178],{"type":603,"value":17179},"This means that we cannot write the entire structure to our stream with just a single line of code any more. Instead we need to write and read all fields manually:",{"type":597,"tag":621,"props":17181,"children":17183},{"code":17182},"struct MyStruct\n{\n    int anInteger;\n    float aFloat;\n    long aLong;\n\n    public byte[] ToArray()\n    {\n        var stream = new MemoryStream();\n        var writer = new BinaryWriter(stream);\n\n        writer.Write(this.anInteger);\n        writer.Write(this.aFloat);\n        writer.Write(this.aLong);\n\n        return stream.ToArray();\n    }\n\n    public static MyStruct FromArray(byte[] bytes)\n    {\n        var reader = new BinaryReader(new MemoryStream(bytes));\n\n        var s = default(MyStruct);\n\n        s.anInteger = reader.ReadInt32();\n        s.aFloat = reader.ReadSingle();\n        s.aLong = reader.ReadInt64();\n\n        return s;\n    }\n}\n",[17184],{"type":597,"tag":629,"props":17185,"children":17186},{"__ignoreMap":591},[17187],{"type":603,"value":17182},{"type":597,"tag":606,"props":17189,"children":17190},{},[17191],{"type":603,"value":17192},"Using these methods is similarly easy to the ones above:",{"type":597,"tag":621,"props":17194,"children":17196},{"code":17195},"var data = new MyStruct();\nvar array = data.ToArray();\nvar data2 = MyStruct.FromArray(array);\n",[17197],{"type":597,"tag":629,"props":17198,"children":17199},{"__ignoreMap":591},[17200],{"type":603,"value":17195},{"type":597,"tag":606,"props":17202,"children":17203},{},[17204],{"type":603,"value":17205},"In this case, the returned array is indeed exactly 16 bytes long.",{"type":597,"tag":1023,"props":17207,"children":17209},{"id":17208},"performance-1",[17210],{"type":603,"value":17053},{"type":597,"tag":606,"props":17212,"children":17213},{},[17214],{"type":603,"value":17215},"But how does this manual approach measure up in performance?",{"type":597,"tag":606,"props":17217,"children":17218},{},[17219],{"type":603,"value":17220},"Very well!",{"type":597,"tag":606,"props":17222,"children":17223},{},[17224],{"type":603,"value":17225},"In my test, the times for serialising and deserialising went from 4.86 and 3.85 down to 0.50 and 0.20 seconds respectively (again for one million conversions each).",{"type":597,"tag":606,"props":17227,"children":17228},{},[17229],{"type":603,"value":17230},"It turns out this approach is not only space efficient, but it is also around ten times faster than the previous one – seemingly no reason to look back!",{"type":597,"tag":606,"props":17232,"children":17233},{},[17234,17236,17241,17243,17248,17249,17254],{"type":603,"value":17235},"In fact, there is an optimisation we can make to increase performance even further: We do not have to create new ",{"type":597,"tag":629,"props":17237,"children":17239},{"className":17238},[],[17240],{"type":603,"value":17001},{"type":603,"value":17242},"s and ",{"type":597,"tag":629,"props":17244,"children":17246},{"className":17245},[],[17247],{"type":603,"value":17151},{"type":603,"value":3326},{"type":597,"tag":629,"props":17250,"children":17252},{"className":17251},[],[17253],{"type":603,"value":17144},{"type":603,"value":17255},"s for each method call. Instead we can reuse them – either by having static ones (watch out for thread-safety!) or by keeping them in whatever object manages for example our network traffic.",{"type":597,"tag":606,"props":17257,"children":17258},{},[17259],{"type":603,"value":17260},"Doing so drops my measured time down to 0.14 and 0.11 seconds respectively.",{"type":597,"tag":606,"props":17262,"children":17263},{},[17264],{"type":603,"value":17265},"Note that the same optimisation can be applied to the first method. However – while positive – the performance increase is much less than in this case, relative to the overall much worse time.",{"type":597,"tag":1023,"props":17267,"children":17269},{"id":17268},"some-concerns",[17270],{"type":603,"value":17271},"Some concerns",{"type":597,"tag":606,"props":17273,"children":17274},{},[17275],{"type":603,"value":17276},"If we do look back to the code however, note how if we add another structure that we would like to serialise, we have to add the two methods to it, and adapt them to its fields.",{"type":597,"tag":606,"props":17278,"children":17279},{},[17280],{"type":603,"value":17281},"Further, if we change one of our structures, we have to make sure to reflect that change in both of these methods. We are bound to forget – especially when adding a new field – which could easily result in a small debugging nightmare.",{"type":597,"tag":606,"props":17283,"children":17284},{},[17285],{"type":603,"value":17286},"Ideally we can find a solution that is fast, uses little space, and does not require us to continuously maintain our serialisation code.",{"type":597,"tag":598,"props":17288,"children":17290},{"id":17289},"marshalling",[17291],{"type":603,"value":17292},"Marshalling",{"type":597,"tag":606,"props":17294,"children":17295},{},[17296],{"type":603,"value":17297},"The last approach we will take a look at is that of marshalling.",{"type":597,"tag":606,"props":17299,"children":17300},{},[17301],{"type":603,"value":17302},"Marshalling refers to using both managed and unmanaged data and the transfer between them. By default, any object created in C# lives in managed memory, which has a lot of advantages – such as automatic garbage collection. Using unmanaged memory on the other hand is more difficult in C#, and requires us to allocate and free space manually. If we forget to do so, we may cause memory leaks that will eventually cause our application to crash.",{"type":597,"tag":606,"props":17304,"children":17305},{},[17306,17308,17315],{"type":603,"value":17307},"All of the functionality we are interested in can be found in the static ",{"type":597,"tag":886,"props":17309,"children":17312},{"href":17310,"rel":17311},"https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal(v=vs.100).aspx",[890],[17313],{"type":603,"value":17314},"Marshal",{"type":603,"value":16965},{"type":597,"tag":606,"props":17317,"children":17318},{},[17319],{"type":603,"value":17320},"Specifically, we will use:",{"type":597,"tag":1321,"props":17322,"children":17323},{},[17324,17335,17346,17357,17368,17379],{"type":597,"tag":807,"props":17325,"children":17326},{},[17327,17333],{"type":597,"tag":629,"props":17328,"children":17330},{"className":17329},[],[17331],{"type":603,"value":17332},"Marshal.SizeOf()",{"type":603,"value":17334},"\nto determine the byte size of our structs;",{"type":597,"tag":807,"props":17336,"children":17337},{},[17338,17344],{"type":597,"tag":629,"props":17339,"children":17341},{"className":17340},[],[17342],{"type":603,"value":17343},"Marshal.AllocHGlobal()",{"type":603,"value":17345},"\nto allocate unmanaged memory;",{"type":597,"tag":807,"props":17347,"children":17348},{},[17349,17355],{"type":597,"tag":629,"props":17350,"children":17352},{"className":17351},[],[17353],{"type":603,"value":17354},"Marshal.StructureToPtr()",{"type":603,"value":17356},"\nto marshal (copy) our structure to the allocated unmanaged memory;",{"type":597,"tag":807,"props":17358,"children":17359},{},[17360,17366],{"type":597,"tag":629,"props":17361,"children":17363},{"className":17362},[],[17364],{"type":603,"value":17365},"Marshal.PtrToStructure()",{"type":603,"value":17367},"\nto marshal (copy) from unmanaged memory back to our structure;",{"type":597,"tag":807,"props":17369,"children":17370},{},[17371,17377],{"type":597,"tag":629,"props":17372,"children":17374},{"className":17373},[],[17375],{"type":603,"value":17376},"Marshal.Copy()",{"type":603,"value":17378},"\nto copy between the unmanaged memory and our byte array;",{"type":597,"tag":807,"props":17380,"children":17381},{},[17382,17388],{"type":597,"tag":629,"props":17383,"children":17385},{"className":17384},[],[17386],{"type":603,"value":17387},"Marshal.FreeHGlobal()",{"type":603,"value":17389},"\nto free the allocated memory;",{"type":597,"tag":606,"props":17391,"children":17392},{},[17393],{"type":603,"value":17394},"Using these methods we can construct the following methods:",{"type":597,"tag":621,"props":17396,"children":17398},{"code":17397},"public static byte[] Serialize\u003CT>(T s)\n    where T : struct\n{\n    var size = Marshal.SizeOf(typeof(T));\n    var array = new byte[size];\n    var ptr = Marshal.AllocHGlobal(size);\n    Marshal.StructureToPtr(s, ptr, true);\n    Marshal.Copy(ptr, array, 0, size);\n    Marshal.FreeHGlobal(ptr);\n    return array;\n}\n\npublic static T Deserialize\u003CT>(byte[] array)\n    where T : struct\n{\n    var size = Marshal.SizeOf(typeof(T));\n    var ptr = Marshal.AllocHGlobal(size);\n    Marshal.Copy(array, 0, ptr, size);\n    var s = (T)Marshal.PtrToStructure(ptr, typeof(T));\n    Marshal.FreeHGlobal(ptr);\n    return s;\n}\n",[17399],{"type":597,"tag":629,"props":17400,"children":17401},{"__ignoreMap":591},[17402],{"type":603,"value":17397},{"type":597,"tag":606,"props":17404,"children":17405},{},[17406,17408,17415],{"type":603,"value":17407},"Note that due to the unsafety of using unmanaged memory, we may want to use a ",{"type":597,"tag":886,"props":17409,"children":17412},{"href":17410,"rel":17411},"https://msdn.microsoft.com/en-us/library/zwc8s4fz.aspx",[890],[17413],{"type":603,"value":17414},"try – finally",{"type":603,"value":17416}," block to make sure the memory will always be freed, even if something goes wrong. For brevity, this is left out here.",{"type":597,"tag":606,"props":17418,"children":17419},{},[17420],{"type":603,"value":17421},"When testing our code, which again is as easy to use as before – in fact the method signatures are exactly the same as our first pair – we see that it indeed works as we hope.",{"type":597,"tag":606,"props":17423,"children":17424},{},[17425],{"type":603,"value":17426},"Without any code inside our structures and completely generic methods there is no need to write or maintain any code when adding or modifying structures.",{"type":597,"tag":606,"props":17428,"children":17429},{},[17430],{"type":603,"value":17431},"Further the resulting array is the expected 16 bytes long.",{"type":597,"tag":1023,"props":17433,"children":17435},{"id":17434},"performance-2",[17436],{"type":603,"value":17053},{"type":597,"tag":606,"props":17438,"children":17439},{},[17440],{"type":603,"value":17441},"When running these methods through the tests, converting structs to byte arrays and vice versa takes a mere 0.47 and 0.60 seconds respectively (again for one million calls).",{"type":597,"tag":598,"props":17443,"children":17445},{"id":17444},"comparison",[17446],{"type":603,"value":17447},"Comparison",{"type":597,"tag":606,"props":17449,"children":17450},{},[17451],{"type":603,"value":17452},"Here is a table with the results from the performance tests:",{"type":603,"value":2989},{"type":597,"tag":1937,"props":17455,"children":17456},{},[17457,17478],{"type":597,"tag":1941,"props":17458,"children":17459},{},[17460],{"type":597,"tag":1945,"props":17461,"children":17462},{},[17463,17468,17473],{"type":597,"tag":1949,"props":17464,"children":17465},{},[17466],{"type":603,"value":17467},"16 byte struct",{"type":597,"tag":1949,"props":17469,"children":17470},{},[17471],{"type":603,"value":17472},"struct to array",{"type":597,"tag":1949,"props":17474,"children":17475},{},[17476],{"type":603,"value":17477},"array to struct",{"type":597,"tag":1963,"props":17479,"children":17480},{},[17481,17499,17517,17544],{"type":597,"tag":1945,"props":17482,"children":17483},{},[17484,17489,17494],{"type":597,"tag":1970,"props":17485,"children":17486},{},[17487],{"type":603,"value":17488},"binary formatter (218 byte array!)",{"type":597,"tag":1970,"props":17490,"children":17491},{},[17492],{"type":603,"value":17493},"4.86s",{"type":597,"tag":1970,"props":17495,"children":17496},{},[17497],{"type":603,"value":17498},"3.85s",{"type":597,"tag":1945,"props":17500,"children":17501},{},[17502,17507,17512],{"type":597,"tag":1970,"props":17503,"children":17504},{},[17505],{"type":603,"value":17506},"binary writer/reader",{"type":597,"tag":1970,"props":17508,"children":17509},{},[17510],{"type":603,"value":17511},"0.50s",{"type":597,"tag":1970,"props":17513,"children":17514},{},[17515],{"type":603,"value":17516},"0.20s",{"type":597,"tag":1945,"props":17518,"children":17519},{},[17520,17528,17536],{"type":597,"tag":1970,"props":17521,"children":17522},{},[17523],{"type":597,"tag":1080,"props":17524,"children":17525},{},[17526],{"type":603,"value":17527},"binary w/r (singleton)",{"type":597,"tag":1970,"props":17529,"children":17530},{},[17531],{"type":597,"tag":1080,"props":17532,"children":17533},{},[17534],{"type":603,"value":17535},"0.14s",{"type":597,"tag":1970,"props":17537,"children":17538},{},[17539],{"type":597,"tag":1080,"props":17540,"children":17541},{},[17542],{"type":603,"value":17543},"0.11s",{"type":597,"tag":1945,"props":17545,"children":17546},{},[17547,17551,17556],{"type":597,"tag":1970,"props":17548,"children":17549},{},[17550],{"type":603,"value":17289},{"type":597,"tag":1970,"props":17552,"children":17553},{},[17554],{"type":603,"value":17555},"0.47s",{"type":597,"tag":1970,"props":17557,"children":17558},{},[17559],{"type":603,"value":17560},"0.60s",{"type":597,"tag":606,"props":17562,"children":17563},{},[17564,17566,17571,17572,17577],{"type":603,"value":17565},"Clearly, if what we care about most is performance, writing and reading our data manually, using shared ",{"type":597,"tag":629,"props":17567,"children":17569},{"className":17568},[],[17570],{"type":603,"value":17144},{"type":603,"value":16983},{"type":597,"tag":629,"props":17573,"children":17575},{"className":17574},[],[17576],{"type":603,"value":17151},{"type":603,"value":17578}," objects is the fastest method.",{"type":597,"tag":606,"props":17580,"children":17581},{},[17582,17584,17589,17590,17595],{"type":603,"value":17583},"On the other hand, the ",{"type":597,"tag":629,"props":17585,"children":17587},{"className":17586},[],[17588],{"type":603,"value":16952},{"type":603,"value":16983},{"type":597,"tag":629,"props":17591,"children":17593},{"className":17592},[],[17594],{"type":603,"value":17314},{"type":603,"value":17596}," methods allow for much easier reuse and make our code significantly more robust to change since there is no code to update and maintain.",{"type":597,"tag":606,"props":17598,"children":17599},{},[17600],{"type":603,"value":17601},"To provide some more data, here are the results from the same test, but this time with a 128 byte structure:",{"type":603,"value":2989},{"type":597,"tag":1937,"props":17604,"children":17605},{},[17606,17625],{"type":597,"tag":1941,"props":17607,"children":17608},{},[17609],{"type":597,"tag":1945,"props":17610,"children":17611},{},[17612,17617,17621],{"type":597,"tag":1949,"props":17613,"children":17614},{},[17615],{"type":603,"value":17616},"128 byte struct",{"type":597,"tag":1949,"props":17618,"children":17619},{},[17620],{"type":603,"value":17472},{"type":597,"tag":1949,"props":17622,"children":17623},{},[17624],{"type":603,"value":17477},{"type":597,"tag":1963,"props":17626,"children":17627},{},[17628,17645,17662,17688],{"type":597,"tag":1945,"props":17629,"children":17630},{},[17631,17635,17640],{"type":597,"tag":1970,"props":17632,"children":17633},{},[17634],{"type":603,"value":17488},{"type":597,"tag":1970,"props":17636,"children":17637},{},[17638],{"type":603,"value":17639},"17.32s",{"type":597,"tag":1970,"props":17641,"children":17642},{},[17643],{"type":603,"value":17644},"14.47s",{"type":597,"tag":1945,"props":17646,"children":17647},{},[17648,17652,17657],{"type":597,"tag":1970,"props":17649,"children":17650},{},[17651],{"type":603,"value":17506},{"type":597,"tag":1970,"props":17653,"children":17654},{},[17655],{"type":603,"value":17656},"1.48s",{"type":597,"tag":1970,"props":17658,"children":17659},{},[17660],{"type":603,"value":17661},"0.66s",{"type":597,"tag":1945,"props":17663,"children":17664},{},[17665,17672,17680],{"type":597,"tag":1970,"props":17666,"children":17667},{},[17668],{"type":597,"tag":1080,"props":17669,"children":17670},{},[17671],{"type":603,"value":17527},{"type":597,"tag":1970,"props":17673,"children":17674},{},[17675],{"type":597,"tag":1080,"props":17676,"children":17677},{},[17678],{"type":603,"value":17679},"0.78s",{"type":597,"tag":1970,"props":17681,"children":17682},{},[17683],{"type":597,"tag":1080,"props":17684,"children":17685},{},[17686],{"type":603,"value":17687},"0.56s",{"type":597,"tag":1945,"props":17689,"children":17690},{},[17691,17695,17700],{"type":597,"tag":1970,"props":17692,"children":17693},{},[17694],{"type":603,"value":17289},{"type":597,"tag":1970,"props":17696,"children":17697},{},[17698],{"type":603,"value":17699},"0.84s",{"type":597,"tag":1970,"props":17701,"children":17702},{},[17703],{"type":603,"value":17704},"0.75s",{"type":597,"tag":606,"props":17706,"children":17707},{},[17708,17710,17715,17716,17721,17723,17728],{"type":603,"value":17709},"We can see that the relative ordering of the different measurements is still the same. However, note how the ",{"type":597,"tag":629,"props":17711,"children":17713},{"className":17712},[],[17714],{"type":603,"value":17144},{"type":603,"value":16983},{"type":597,"tag":629,"props":17717,"children":17719},{"className":17718},[],[17720],{"type":603,"value":17151},{"type":603,"value":17722}," measurements are getting significantly closer to the ",{"type":597,"tag":629,"props":17724,"children":17726},{"className":17725},[],[17727],{"type":603,"value":17314},{"type":603,"value":17729}," ones.",{"type":597,"tag":606,"props":17731,"children":17732},{},[17733],{"type":603,"value":17734},"While I would not necessarily encourage structures of this size, I would argue that marshalling is the best approach for large structures in almost every case. The slightly slower performance is easily justified by the much more maintainable code.",{"type":597,"tag":606,"props":17736,"children":17737},{},[17738],{"type":603,"value":17739},"In fact, I would go as far and say that even for small structures the ease of using marshalling is still top advantageous despite the lower performance.",{"type":597,"tag":606,"props":17741,"children":17742},{},[17743],{"type":603,"value":17744},"In the end, binary serialization is unlikely to ever be a bottleneck, and unless it is, we should choose the option that fulfils our requirements of small array size and ease of use.",{"type":597,"tag":598,"props":17746,"children":17748},{"id":17747},"conclusion",[17749],{"type":603,"value":17750},"Conclusion",{"type":597,"tag":606,"props":17752,"children":17753},{},[17754],{"type":603,"value":17755},"We took a look at three – and a half – different ways of converting between structs and byte arrays.",{"type":597,"tag":606,"props":17757,"children":17758},{},[17759,17761,17766],{"type":603,"value":17760},"Judging by memory usage, performance, and ease of use, there is no clear winner – only a clear loser unless we specifically need the additional functionality of ",{"type":597,"tag":629,"props":17762,"children":17764},{"className":17763},[],[17765],{"type":603,"value":16952},{"type":603,"value":9674},{"type":597,"tag":606,"props":17768,"children":17769},{},[17770],{"type":603,"value":17771},"However, in marshalling we found a method that is reasonably fast, while acing our other requirements.",{"type":597,"tag":606,"props":17773,"children":17774},{},[17775],{"type":603,"value":17776},"While in extremely performance critical code we may want to write our data manually, marshalling is likely the best alternative in the vast majority of cases.",{"type":597,"tag":606,"props":17778,"children":17779},{},[17780],{"type":603,"value":17781},"Feel free to let me know if you agree with this analysis, or if you have other methods of achieving the same result that may be worth looking into.",{"type":597,"tag":606,"props":17783,"children":17784},{},[17785],{"type":603,"value":17786},"Enjoy the pixels!",{"title":591,"searchDepth":787,"depth":787,"links":17788},[17789,17790,17791,17794,17799,17802,17803],{"id":16893,"depth":787,"text":16896},{"id":16919,"depth":787,"text":16922},{"id":16945,"depth":787,"text":16952,"children":17792},[17793],{"id":17050,"depth":1530,"text":17053},{"id":17137,"depth":787,"text":17795,"children":17796},"BinaryWriter/BinaryReader",[17797,17798],{"id":17208,"depth":1530,"text":17053},{"id":17268,"depth":1530,"text":17271},{"id":17289,"depth":787,"text":17292,"children":17800},[17801],{"id":17434,"depth":1530,"text":17053},{"id":17444,"depth":787,"text":17447},{"id":17747,"depth":787,"text":17750},"content:dotnet:2021-05-01-Converting-between-Structs-and-Byte-Arrays.md","dotnet/2021-05-01-Converting-between-Structs-and-Byte-Arrays.md","2021-05-01",{"_path":556,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":555,"description":17808,"body":17809,"_type":791,"_id":17994,"_source":793,"_file":17995,"_extension":795,"date":17996},"1. UGUI上显示模型UGUI上显示模型.png创建拍摄用的摄像机创建RenderTexture并绑定到摄像机camera.targetTexture上RenderTexture绑定到rawImage.texture上（rawImage见上图）创建显示的模型，相机可见注意Destroy销毁 创建出来的RenderTexture 和相机注意模型上的粒子特效由于Alpha透明通道，显示会有一点问题，可以通过Shader Blend混合处理，挂载在rawImage上。public void CreateCamera(Vector3 pos, Vector3 rot, int width, int ",{"type":594,"children":17810,"toc":17992},[17811,17817,17824,17829,17862,17871,17877,17886,17907,17913,17920,17925,17932,17937,17944,17949,17956,17961,17968,17973,17980,17985],{"type":597,"tag":3995,"props":17812,"children":17814},{"id":17813},"_1-ugui上显示模型",[17815],{"type":603,"value":17816},"1. UGUI上显示模型",{"type":597,"tag":606,"props":17818,"children":17819},{},[17820],{"type":597,"tag":719,"props":17821,"children":17823},{"alt":719,"src":17822},"/images/2021-04-11-render-texture/4276633-05b67353425f7248.png",[],{"type":597,"tag":606,"props":17825,"children":17826},{},[17827],{"type":603,"value":17828},"UGUI上显示模型.png",{"type":597,"tag":803,"props":17830,"children":17831},{},[17832,17837,17842,17847,17852,17857],{"type":597,"tag":807,"props":17833,"children":17834},{},[17835],{"type":603,"value":17836},"创建拍摄用的摄像机",{"type":597,"tag":807,"props":17838,"children":17839},{},[17840],{"type":603,"value":17841},"创建RenderTexture并绑定到摄像机camera.targetTexture上",{"type":597,"tag":807,"props":17843,"children":17844},{},[17845],{"type":603,"value":17846},"RenderTexture绑定到rawImage.texture上（rawImage见上图）",{"type":597,"tag":807,"props":17848,"children":17849},{},[17850],{"type":603,"value":17851},"创建显示的模型，相机可见",{"type":597,"tag":807,"props":17853,"children":17854},{},[17855],{"type":603,"value":17856},"注意Destroy销毁 创建出来的RenderTexture 和相机",{"type":597,"tag":807,"props":17858,"children":17859},{},[17860],{"type":603,"value":17861},"注意模型上的粒子特效由于Alpha透明通道，显示会有一点问题，可以通过Shader Blend混合处理，挂载在rawImage上。",{"type":597,"tag":621,"props":17863,"children":17866},{"className":17864,"code":17865,"language":8105,"meta":591},[8107],"public void CreateCamera(Vector3 pos, Vector3 rot, int width, int height, string layerName, float size)\n{\n    // 创建拍摄用的摄像机\n    GameObject go = new GameObject(\"ModelCamera\");\n    _camera = go.AddComponent\u003CCamera>();\n    _camera.clearFlags = CameraClearFlags.SolidColor;\n    _camera.transform.position = pos;\n    _camera.transform.rotation = Quaternion.Euler(rot);\n    _camera.cullingMask = LayerMask.GetMask(layerName);\n    _camera.orthographic = true;\n    _camera.orthographicSize = size;\n    _camera.backgroundColor = new Color(0,0,0,0);\n\n    // 创建RenderTexture并绑定到摄像机上\n    _renderTexture = new RenderTexture(width, height, 8);\n    _camera.targetTexture = _renderTexture;\n\n    if (_rawImage != null)\n    {\n        _rawImage.texture = _renderTexture;\n    }\n}\n",[17867],{"type":597,"tag":629,"props":17868,"children":17869},{"__ignoreMap":591},[17870],{"type":603,"value":17865},{"type":597,"tag":3995,"props":17872,"children":17874},{"id":17873},"_2-camera相机拍照分享保存为jpg",[17875],{"type":603,"value":17876},"2. Camera相机拍照分享，保存为jpg",{"type":597,"tag":621,"props":17878,"children":17881},{"className":17879,"code":17880,"language":8105,"meta":591},[8107],"private IEnumerator CameraPhoto(Camera cam, Rect rect, string name) {\n    if (rt == null) {\n        rt = RenderTexture.GetTemporary(renderTextureDesc);\n    }\n    cam.targetTexture = rt;\n    cam.Render();\n\n    RenderTexture currentActiveRT = RenderTexture.active;\n    RenderTexture.active = rt;\n    Texture2D screenShot = new Texture2D((int)rect.width, (int)rect.height, TextureFormat.RGB24, false);\n    screenShot.ReadPixels(rect, 0, 0);\n    screenShot.Apply();\n    yield return new WaitForEndOfFrame();\n\n    cam.targetTexture = null;\n    RenderTexture.active = currentActiveRT;\n\n    byte[] bytes = screenShot.EncodeToJPG();\n    string file = Application.dataPath + \"/Texture/\" + name;\n    System.IO.File.WriteAllBytes(file, bytes);\n}\n",[17882],{"type":597,"tag":629,"props":17883,"children":17884},{"__ignoreMap":591},[17885],{"type":603,"value":17880},{"type":597,"tag":803,"props":17887,"children":17888},{},[17889,17894,17899,17904],{"type":597,"tag":807,"props":17890,"children":17891},{},[17892],{"type":603,"value":17893},"Rendertexture的分配和销毁上有一个地方需要注意：\n如果频繁的要new一个rt出来，那么不要直接new，而是使用RenderTexture提供的GetTemporary和ReleaseTemporary，它将在内部维护一个池，反复重用一些大小格式一样的rt资源，因为让GPU为你分配一个新的texture其实是要耗时间的。",{"type":597,"tag":807,"props":17895,"children":17896},{},[17897],{"type":603,"value":17898},"EncodeToJPG 生成的图片体积更小",{"type":597,"tag":807,"props":17900,"children":17901},{},[17902],{"type":603,"value":17903},"有的时候我们想人为的控制每一次渲染，你可以将这个摄像机disable掉，然后手动的调用一次render。",{"type":597,"tag":807,"props":17905,"children":17906},{},[],{"type":597,"tag":3995,"props":17908,"children":17910},{"id":17909},"_3-制作小地图",[17911],{"type":603,"value":17912},"3. 制作小地图",{"type":597,"tag":606,"props":17914,"children":17915},{},[17916],{"type":597,"tag":719,"props":17917,"children":17919},{"alt":719,"src":17918},"/images/2021-04-11-render-texture/17266280-153a6a121210c7f7.png",[],{"type":597,"tag":606,"props":17921,"children":17922},{},[17923],{"type":603,"value":17924},"这里需要新建一个Layer。依次点击菜单项Edit -> Project Settings -> Tags and Layers新建Layer命名为Minimap。",{"type":597,"tag":606,"props":17926,"children":17927},{},[17928],{"type":597,"tag":719,"props":17929,"children":17931},{"alt":719,"src":17930},"/images/2021-04-11-render-texture/17266280-f96f6a1a4c01bae2.png",[],{"type":597,"tag":606,"props":17933,"children":17934},{},[17935],{"type":603,"value":17936},"然后新建三个球体。一个设为蓝色代表Unity Chan。将该球体设为Unity Chan的子对象，并将其Layer设为Minimap。",{"type":597,"tag":606,"props":17938,"children":17939},{},[17940],{"type":597,"tag":719,"props":17941,"children":17943},{"alt":719,"src":17942},"/images/2021-04-11-render-texture/17266280-dfdc8f16823fbf32.png",[],{"type":597,"tag":606,"props":17945,"children":17946},{},[17947],{"type":603,"value":17948},"对两个机器人进行同样的操作，将球体改为红色。",{"type":597,"tag":606,"props":17950,"children":17951},{},[17952],{"type":597,"tag":719,"props":17953,"children":17955},{"alt":719,"src":17954},"/images/2021-04-11-render-texture/17266280-4b34ec3b3279e6aa.png",[],{"type":597,"tag":606,"props":17957,"children":17958},{},[17959],{"type":603,"value":17960},"现在最关键的一步来了！选中Main Camera并确保其Culling Mask中不包括Minimap这一层。",{"type":597,"tag":606,"props":17962,"children":17963},{},[17964],{"type":597,"tag":719,"props":17965,"children":17967},{"alt":719,"src":17966},"/images/2021-04-11-render-texture/17266280-1eb8533ebe757f7d.png",[],{"type":597,"tag":606,"props":17969,"children":17970},{},[17971],{"type":603,"value":17972},"然后选中Minimap Camera让其Culling Mask只包括Minimap这一层。",{"type":597,"tag":606,"props":17974,"children":17975},{},[17976],{"type":597,"tag":719,"props":17977,"children":17979},{"alt":719,"src":17978},"/images/2021-04-11-render-texture/17266280-e16613658b088db8.png",[],{"type":597,"tag":606,"props":17981,"children":17982},{},[17983],{"type":603,"value":17984},"现在这个小地图看起来就比较完善了！",{"type":597,"tag":606,"props":17986,"children":17987},{},[17988],{"type":597,"tag":719,"props":17989,"children":17991},{"alt":719,"src":17990},"/images/2021-04-11-render-texture/17266280-694ef4f538aae2e1.png",[],{"title":591,"searchDepth":787,"depth":787,"links":17993},[],"content:unity:2021-04-11-render-texture.md","unity/2021-04-11-render-texture.md","2021-04-11",{"_path":553,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":552,"description":17998,"body":17999,"_type":791,"_id":18083,"_source":793,"_file":18084,"_extension":795,"date":18085},"B站圈毛君翻译教程：The Basic：https://www.bilibili.com/video/av48965588/Rule Tile：https://www.bilibili.com/video/av49083381/Prefab Brush：https://www.bilibili.com/video/av49098444/Tilemap Collider：https://www.bilibili.com/video/av49115670/TileBaseGetTileData 确定瓦片在瓦片地图上的外观 ,相当于滚动列表中的getdata..获取数据用于显示,,RefreshTi",{"type":594,"children":18000,"toc":18072},[18001,18007,18019,18031,18043,18055,18061],{"type":597,"tag":1023,"props":18002,"children":18004},{"id":18003},"b站圈毛君翻译教程",[18005],{"type":603,"value":18006},"B站圈毛君翻译教程：",{"type":597,"tag":1023,"props":18008,"children":18010},{"id":18009},"the-basichttpswwwbilibilicomvideoav48965588",[18011,18013],{"type":603,"value":18012},"The Basic：",{"type":597,"tag":886,"props":18014,"children":18017},{"href":18015,"rel":18016},"https://www.bilibili.com/video/av48965588/",[890],[18018],{"type":603,"value":18015},{"type":597,"tag":1023,"props":18020,"children":18022},{"id":18021},"rule-tilehttpswwwbilibilicomvideoav49083381",[18023,18025],{"type":603,"value":18024},"Rule Tile：",{"type":597,"tag":886,"props":18026,"children":18029},{"href":18027,"rel":18028},"https://www.bilibili.com/video/av49083381/",[890],[18030],{"type":603,"value":18027},{"type":597,"tag":1023,"props":18032,"children":18034},{"id":18033},"prefab-brushhttpswwwbilibilicomvideoav49098444",[18035,18037],{"type":603,"value":18036},"Prefab Brush：",{"type":597,"tag":886,"props":18038,"children":18041},{"href":18039,"rel":18040},"https://www.bilibili.com/video/av49098444/",[890],[18042],{"type":603,"value":18039},{"type":597,"tag":1023,"props":18044,"children":18046},{"id":18045},"tilemap-colliderhttpswwwbilibilicomvideoav49115670",[18047,18049],{"type":603,"value":18048},"Tilemap Collider：",{"type":597,"tag":886,"props":18050,"children":18053},{"href":18051,"rel":18052},"https://www.bilibili.com/video/av49115670/",[890],[18054],{"type":603,"value":18051},{"type":597,"tag":857,"props":18056,"children":18058},{"id":18057},"tilebase",[18059],{"type":603,"value":18060},"TileBase",{"type":597,"tag":606,"props":18062,"children":18063},{},[18064,18070],{"type":597,"tag":629,"props":18065,"children":18067},{"className":18066},[],[18068],{"type":603,"value":18069},"GetTileData",{"type":603,"value":18071}," 确定瓦片在瓦片地图上的外观 ,相当于滚动列表中的getdata..获取数据用于显示,,RefreshTile后会触发",{"title":591,"searchDepth":787,"depth":787,"links":18073},[18074,18075,18077,18079,18081],{"id":18003,"depth":1530,"text":18006},{"id":18009,"depth":1530,"text":18076},"The Basic：https://www.bilibili.com/video/av48965588/",{"id":18021,"depth":1530,"text":18078},"Rule Tile：https://www.bilibili.com/video/av49083381/",{"id":18033,"depth":1530,"text":18080},"Prefab Brush：https://www.bilibili.com/video/av49098444/",{"id":18045,"depth":1530,"text":18082},"Tilemap Collider：https://www.bilibili.com/video/av49115670/","content:unity:2021-01-25-tilemap.md","unity/2021-01-25-tilemap.md","2021-01-25",{"_path":550,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":549,"description":18087,"body":18088,"_type":791,"_id":18160,"_source":793,"_file":18161,"_extension":795,"date":18162},"使用射线这是一种发射线，获取当前点击的物体（具有碰撞器）的坐标点（也就是碰撞器范围的坐标点）if (Input.GetMouseButtonDown(0))\n{\n\n    RaycastHit hitt = new RaycastHit();\n\n    Ray ray =Camera.main.ScreenPointToRay(Input.mousePosition);\n\n    Physics.Raycast(ray, out hitt);\n\n    Debug.Log(hitt.point);\n\n    //Debug.Log(Camera.main.ScreenToWorldPoint(",{"type":594,"children":18089,"toc":18156},[18090,18095,18100,18108,18113,18121,18126,18131,18136,18141,18146,18151],{"type":597,"tag":598,"props":18091,"children":18093},{"id":18092},"使用射线",[18094],{"type":603,"value":18092},{"type":597,"tag":606,"props":18096,"children":18097},{},[18098],{"type":603,"value":18099},"这是一种发射线，获取当前点击的物体（具有碰撞器）的坐标点（也就是碰撞器范围的坐标点）",{"type":597,"tag":621,"props":18101,"children":18103},{"code":18102},"if (Input.GetMouseButtonDown(0))\n{\n\n    RaycastHit hitt = new RaycastHit();\n\n    Ray ray =Camera.main.ScreenPointToRay(Input.mousePosition);\n\n    Physics.Raycast(ray, out hitt);\n\n    Debug.Log(hitt.point);\n\n    //Debug.Log(Camera.main.ScreenToWorldPoint(Input.mousePosition));\n}\n",[18104],{"type":597,"tag":629,"props":18105,"children":18106},{"__ignoreMap":591},[18107],{"type":603,"value":18102},{"type":597,"tag":598,"props":18109,"children":18111},{"id":18110},"直接转换",[18112],{"type":603,"value":18110},{"type":597,"tag":621,"props":18114,"children":18116},{"code":18115}," void Update()\n {\n    if(Input.GetMouseButtonDown(0))\n   {    \n     var  z = target.transform.position.z - camera.transform.position.z;\n     Debug.Log(TempC.ScreenToWorldPoint(new Vector3(Input.mousePosition.x,Input.mousePosition.y, z)));\n    }\n }\n",[18117],{"type":597,"tag":629,"props":18118,"children":18119},{"__ignoreMap":591},[18120],{"type":603,"value":18115},{"type":597,"tag":606,"props":18122,"children":18123},{},[18124],{"type":603,"value":18125},"摄像机对游戏世界的渲染范围是一个平截头体，渲染边界是一个矩形，用与near clippingplane或者far clippingplane平行的平面截取这个平截头体，可以获得无数个平行的矩形面，也就是我们看到的屏幕矩形。离摄像机越远，矩形越大，离摄像机越近，矩形越小。所以，同样大小的物体，随着离摄像机越来越远，相对于对应屏幕矩形就越来越小，所看起来就越来越小。",{"type":597,"tag":606,"props":18127,"children":18128},{},[18129],{"type":603,"value":18130},"在屏幕上，某个像素点相对于屏幕矩形的位置，可以对应于游戏世界中的点相对于某个截面的位置，关键在于这个点在哪个截面上，也就是说，关键在于这个截面离摄像机有多远！",{"type":597,"tag":606,"props":18132,"children":18133},{},[18134],{"type":603,"value":18135},"在ScreenToWorldPoint这个方法中，参数是一个三维坐标，而实际上，屏幕坐标只能是二维坐标。参数中的z坐标的作用就是：用来表示上述平面离摄像机的距离。",{"type":597,"tag":606,"props":18137,"children":18138},{},[18139],{"type":603,"value":18140},"也就是说，给定一个坐标（X，Y，Z），",{"type":597,"tag":606,"props":18142,"children":18143},{},[18144],{"type":603,"value":18145},"首先截取一个垂直于摄像机Z轴的，距离为Z的平面P，这样不管X，Y怎么变化，返回的点都只能在这个平面上；",{"type":597,"tag":606,"props":18147,"children":18148},{},[18149],{"type":603,"value":18150},"然后，X，Y表示像素坐标，根据（X，Y）相对于屏幕的位置，得到游戏世界中的点相对于截面P的位置，我们也就将屏幕坐标转换为了世界坐标。",{"type":597,"tag":606,"props":18152,"children":18153},{},[18154],{"type":603,"value":18155},"所以如果要判断是否点中一个目标,则传入的z的值即你想选中的目标到摄像机的距离",{"title":591,"searchDepth":787,"depth":787,"links":18157},[18158,18159],{"id":18092,"depth":787,"text":18092},{"id":18110,"depth":787,"text":18110},"content:unity:2021-01-24-screentoworld.md","unity/2021-01-24-screentoworld.md","2021-01-24",{"_path":159,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":158,"description":18164,"body":18165,"_type":791,"_id":18511,"_source":793,"_file":18512,"_extension":795,"date":18513},"关卡生成算法的第一部分：生成关卡的critical path（关卡通路），我们先不考虑那些障碍物、陷阱、敌人和宝箱什么的。",{"type":594,"children":18166,"toc":18509},[18167,18173,18177,18182,18189,18203,18210,18215,18238,18243,18248,18253,18258,18263,18268,18273,18278,18285,18293,18299,18306,18311,18318,18328,18333,18398,18403,18408,18413,18418,18423,18428,18455,18460,18465,18470,18479,18488],{"type":597,"tag":857,"props":18168,"children":18170},{"id":18169},"part1-创建solution-path-关卡通路",[18171],{"type":603,"value":18172},"Part1. 创建Solution path - 关卡通路",{"type":597,"tag":606,"props":18174,"children":18175},{},[18176],{"type":603,"value":18164},{"type":597,"tag":606,"props":18178,"children":18179},{},[18180],{"type":603,"value":18181},"算法的第一部分是生成关卡的 Critical Path（通路），关卡由 16 个房间按照 4x4 的网格组成。方法是先在第一排随机找到一个起始房间，然后随机使相邻的房间成为通路的一部分，一直到最后一排，生成出口。找到通路之后，连接这些房间，然后再随机补充上非通路部分的房间，打通这些房间。如图顺序所示：",{"type":597,"tag":606,"props":18183,"children":18184},{},[18185],{"type":597,"tag":719,"props":18186,"children":18188},{"alt":719,"src":18187},"/images/2021-01-23-Spelunky-map/spelunky-map-generation-steps.gif",[],{"type":597,"tag":606,"props":18190,"children":18191},{},[18192,18194,18201],{"type":603,"value":18193},"然后为这些房间随机选取对应的预定义好的关卡模块。根据 Spelunky 的教学文章[",{"type":597,"tag":886,"props":18195,"children":18198},{"href":18196,"rel":18197},"https://indienova.com/indie-game-development/the-procedurally-generated-map-of-dead-cells/#reference",[890],[18199],{"type":603,"value":18200},"3]",{"type":603,"value":18202},"，这里有 4 种不同的房间类型：",{"type":597,"tag":606,"props":18204,"children":18205},{},[18206],{"type":597,"tag":719,"props":18207,"children":18209},{"alt":719,"src":18208},"/images/2021-01-23-Spelunky-map/8752-1519530045.png",[],{"type":597,"tag":606,"props":18211,"children":18212},{},[18213],{"type":603,"value":18214},"这个关卡由16个房间按照4x4的网格方式组成，这里有4种不同的房间类型：",{"type":597,"tag":1321,"props":18216,"children":18217},{},[18218,18223,18228,18233],{"type":597,"tag":807,"props":18219,"children":18220},{},[18221],{"type":603,"value":18222},"0：不在critical path上，不会产生任何出口（可被忽略的）次要房间 (感谢洋芋君指出之前的翻译问题)",{"type":597,"tag":807,"props":18224,"children":18225},{},[18226],{"type":603,"value":18227},"1：左右一定有出口",{"type":597,"tag":807,"props":18229,"children":18230},{},[18231],{"type":603,"value":18232},"2：左右下一定有出口，如果有2号room在上方，也一定有上方出口",{"type":597,"tag":807,"props":18234,"children":18235},{},[18236],{"type":603,"value":18237},"3：左右上一定有出口",{"type":597,"tag":606,"props":18239,"children":18240},{},[18241],{"type":603,"value":18242},"第一步在最顶部这行随机选取一格创建一个Start Room，房间类型对开始的房间来说没太大影响。一般来说，Start Room类型我们会选1或者2。",{"type":597,"tag":606,"props":18244,"children":18245},{},[18246],{"type":603,"value":18247},"每当一个Room被创建，首先总是类型1(左右)。",{"type":597,"tag":606,"props":18249,"children":18250},{},[18251],{"type":603,"value":18252},"然后要决定往哪边走。取一个均匀分布的随机数，从1到5。当1或2时，critical path向左；当3或4时，critical path向右；当5时，path向下。（当critical path碰到屏幕边缘，立即向下移动并同时切换左右方向。）",{"type":597,"tag":606,"props":18254,"children":18255},{},[18256],{"type":603,"value":18257},"这有个问题，如果我们向左或右移动，是OK的，因为我们创建的Room是一定有左右出口的。但我们要向下走，我们就得改变我们当前所在的房间了。所以生成器重写房间类型为2，覆盖当前的房间，现在我们可以向下移动了。",{"type":597,"tag":606,"props":18259,"children":18260},{},[18261],{"type":603,"value":18262},"当生成器移到下一个房间，会问我们最后创建的那个房间（也就是刚才我们头顶上那个）类型是不是2（底部有出口）。 如果是2，那么当前这个房间类型一定要是2或3（上方有出口）。因为2、3类型都有左右出口，启动算法从头再来一次。",{"type":597,"tag":606,"props":18264,"children":18265},{},[18266],{"type":603,"value":18267},"如果到了底部这一行，我们要尝试向下，那肯定不行了，我们放置一个Exit Room来取代向下的房间。",{"type":597,"tag":606,"props":18269,"children":18270},{},[18271],{"type":603,"value":18272},"现在我们已经生成了整个critical path（关卡通路，即图中那些暗红色的格子，游戏中是不显示的，这里只是为了举例）。接下来要做的最后一件事，我们要把4x4的网格中的空余部分放上类型为0的房间，这些房间并不在critical path上。这些房间在任何方向都不一定有出口，所以有时候会生成一些围墙。",{"type":597,"tag":606,"props":18274,"children":18275},{},[18276],{"type":603,"value":18277},"如果一列中有3或者4个Room 0，那这一列房间有几率成为一个蛇窝。如果我们要生成蛇窝的话，从上到下，放一列房间，类型为7 8 9，或者7 8 8 9，取决于我们希望这个蛇窝有多深。(这里的蛇和宝石并不像其他敌人那样随机生成，因为它们是这种地形的一部分，所以位置基本是固定出现。）",{"type":597,"tag":606,"props":18279,"children":18280},{},[18281],{"type":597,"tag":719,"props":18282,"children":18284},{"alt":719,"src":18283},"/images/2021-01-23-Spelunky-map/8752-1519530075.png_webp",[],{"type":597,"tag":606,"props":18286,"children":18287},{},[18288],{"type":597,"tag":1733,"props":18289,"children":18290},{},[18291],{"type":603,"value":18292},"蛇窝",{"type":597,"tag":857,"props":18294,"children":18296},{"id":18295},"part2-创建房间-关卡生成算法的第二部分生成room我们先不考虑那些障碍物陷阱敌人和宝箱什么的",[18297],{"type":603,"value":18298},"Part2. 创建房间 关卡生成算法的第二部分：生成Room，我们先不考虑那些障碍物、陷阱、敌人和宝箱什么的。",{"type":597,"tag":606,"props":18300,"children":18301},{},[18302],{"type":597,"tag":719,"props":18303,"children":18305},{"alt":719,"src":18304},"/images/2021-01-23-Spelunky-map/8752-1519530105.png_webp",[],{"type":597,"tag":606,"props":18307,"children":18308},{},[18309],{"type":603,"value":18310},"Spelunky并不像其他大部分游戏（平台游戏，platformer）在传统的2D tile-base的平台游戏中，你用关卡编辑器做出的地图可能看起来像这样：",{"type":597,"tag":606,"props":18312,"children":18313},{},[18314],{"type":597,"tag":719,"props":18315,"children":18317},{"alt":719,"src":18316},"/images/2021-01-23-Spelunky-map/8752-1519530119.png_webp",[],{"type":597,"tag":606,"props":18319,"children":18320},{},[18321,18323],{"type":603,"value":18322},"在这种类型编辑器里，是这样的，比如，在（64,128）这个位置是草的tile。但Spelunky完全不是这样。\n上一部分我们了解了Spelunky有4种基本房间类型（types）。这每个房间类型有8-16个模板。这些模板具备一个房间的基本布局，包括一些静态和概率tile的组合。\nRoom Templates（房间模板）\n每个房间类型都有一堆不同的模板。\n",{"type":597,"tag":1733,"props":18324,"children":18325},{},[18326],{"type":603,"value":18327},"译注：Derek Yu使用不同的布局，做了一系列的房间设计。比如你掉出去的房间（DROP）、掉入的房间（LANDING）、可以穿过的走廊（CORRIDOR）、不在关卡通路上的房间（NON-CRITICAL）。",{"type":597,"tag":606,"props":18329,"children":18330},{},[18331],{"type":603,"value":18332},"房间模板，嗯……看起来就像下面这样：",{"type":597,"tag":617,"props":18334,"children":18335},{},[18336,18344,18352,18360,18368,18376,18383,18390],{"type":597,"tag":617,"props":18337,"children":18338},{},[18339],{"type":597,"tag":606,"props":18340,"children":18341},{},[18342],{"type":603,"value":18343},"1100000000",{"type":597,"tag":617,"props":18345,"children":18346},{},[18347],{"type":597,"tag":606,"props":18348,"children":18349},{},[18350],{"type":603,"value":18351},"40L6000000",{"type":597,"tag":617,"props":18353,"children":18354},{},[18355],{"type":597,"tag":606,"props":18356,"children":18357},{},[18358],{"type":603,"value":18359},"11P0000000",{"type":597,"tag":617,"props":18361,"children":18362},{},[18363],{"type":597,"tag":606,"props":18364,"children":18365},{},[18366],{"type":603,"value":18367},"11L0000000",{"type":597,"tag":617,"props":18369,"children":18370},{},[18371],{"type":597,"tag":606,"props":18372,"children":18373},{},[18374],{"type":603,"value":18375},"11L5000000",{"type":597,"tag":617,"props":18377,"children":18378},{},[18379],{"type":597,"tag":606,"props":18380,"children":18381},{},[18382],{"type":603,"value":18343},{"type":597,"tag":617,"props":18384,"children":18385},{},[18386],{"type":597,"tag":606,"props":18387,"children":18388},{},[18389],{"type":603,"value":18343},{"type":597,"tag":617,"props":18391,"children":18392},{},[18393],{"type":597,"tag":606,"props":18394,"children":18395},{},[18396],{"type":603,"value":18397},"1111111111",{"type":597,"tag":606,"props":18399,"children":18400},{},[18401],{"type":603,"value":18402},"每个模板由10x8 的tile网格组成。\"0\"表示空，\"1\"表示100%是砖块，\"L\"是梯子，\"P\"是爬梯子上去的平台(platform)。现在你在看这个模板， 嗯，下面一排是地面，左边是2个tile宽的墙，上面有个小缺口，有个梯子可以爬到那。",{"type":597,"tag":606,"props":18404,"children":18405},{},[18406],{"type":603,"value":18407},"Static and Probabilistic Tiles( 静态和概率Tile )",{"type":597,"tag":606,"props":18409,"children":18410},{},[18411],{"type":603,"value":18412},"static tile就像传统关卡编辑器里一样，你让这里有个砖块，那这就永远是砖块了。",{"type":597,"tag":606,"props":18414,"children":18415},{},[18416],{"type":603,"value":18417},"上面模板里的\"4\" tile，就是probabilistic tile。\"4\"表示那有25%的几率会是一个能推动的障碍物，出现在梯子的顶部旁边。有经验的Spelunky玩家会一下认出这个：有时你爬到一个梯子顶部，旁边有个障碍物，你得推它，就可以进到下一个房间。有时候爬到梯子顶上旁边就没有这玩意。还有比如“这有33%的几率会出现个尖刺”，或者“这有一半的几率是空的，或者是砖块”。",{"type":597,"tag":606,"props":18419,"children":18420},{},[18421],{"type":603,"value":18422},"Obstacle Block( 障碍块）",{"type":597,"tag":606,"props":18424,"children":18425},{},[18426],{"type":603,"value":18427},"\"5\"和\"6\"就是所谓的Obstacle Block。Obstacle Block由 5x3 的tile网格组成，是个有趣的小结构，会让玩家针对这个障碍来思考自己的策略。Obstacle block本身也会由一些概率tile组成。下面是\"5\" 这个模板，表示放置在地上（\"6\"表示放置在空中）:",{"type":597,"tag":617,"props":18429,"children":18430},{},[18431,18439,18447],{"type":597,"tag":617,"props":18432,"children":18433},{},[18434],{"type":597,"tag":606,"props":18435,"children":18436},{},[18437],{"type":603,"value":18438},"00000",{"type":597,"tag":617,"props":18440,"children":18441},{},[18442],{"type":597,"tag":606,"props":18443,"children":18444},{},[18445],{"type":603,"value":18446},"00102",{"type":597,"tag":617,"props":18448,"children":18449},{},[18450],{"type":597,"tag":606,"props":18451,"children":18452},{},[18453],{"type":603,"value":18454},"71177",{"type":597,"tag":606,"props":18456,"children":18457},{},[18458],{"type":603,"value":18459},"规则和之前的一样，0是空，1是砖块。你能看出来，这是个小台阶。\"7\"有33%的几率是个尖刺，或者为空。如果运气不好，这里就得跳到那个台阶上面避开尖刺。\"2\"表示有一半的几率味空，或者是砖块。这就有意思了，有可能有个小砖块让你落脚不用踩到尖刺，也有可能除了小台阶，旁边都是空的，玩家得跳到上面去。你可以看出，这么个小障碍块，如果设计的好的话，游戏自己就会随机生成很多很多有意思的场景。",{"type":597,"tag":606,"props":18461,"children":18462},{},[18463],{"type":603,"value":18464},"译于2018-Jan-20",{"type":597,"tag":606,"props":18466,"children":18467},{},[18468],{"type":603,"value":18469},"原文链接最好用chrome打开，对，要科学，你懂了",{"type":597,"tag":606,"props":18471,"children":18472},{},[18473],{"type":597,"tag":886,"props":18474,"children":18477},{"href":18475,"rel":18476},"http://tinysubversions.com/spelunkyGen/",[890],[18478],{"type":603,"value":18475},{"type":597,"tag":606,"props":18480,"children":18481},{},[18482],{"type":597,"tag":886,"props":18483,"children":18486},{"href":18484,"rel":18485},"http://tinysubversions.com/spelunkyGen2/",[890],[18487],{"type":603,"value":18484},{"type":597,"tag":1321,"props":18489,"children":18490},{},[18491,18500],{"type":597,"tag":807,"props":18492,"children":18493},{},[18494],{"type":597,"tag":886,"props":18495,"children":18498},{"href":18496,"rel":18497},"https://indienova.com/u/root/blogread/5454",[890],[18499],{"type":603,"value":18496},{"type":597,"tag":807,"props":18501,"children":18502},{},[18503],{"type":597,"tag":886,"props":18504,"children":18507},{"href":18505,"rel":18506},"https://indienova.com/indie-game-development/the-procedurally-generated-map-of-dead-cells/",[890],[18508],{"type":603,"value":18505},{"title":591,"searchDepth":787,"depth":787,"links":18510},[],"content:game:2021-01-23-Spelunky-map.md","game/2021-01-23-Spelunky-map.md","2021-01-23",{"_path":156,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":155,"description":18515,"body":18516,"_type":791,"_id":19043,"_source":793,"_file":19044,"_extension":795,"date":18513},"引言文章作者：Mike Anderson随机生成的地图是 Roguelike 类游戏最独特的一点，它让游戏变得很有乐趣，因为玩家永远要面对新的挑战。但是随机地图却不是那么容易生成的。在传统的游戏中，一般你都会有一个地图编辑器，可以自由的创建地图。在任何一款称得上是“Roguelike”的游戏中，开发者都要自己创造一个“虚拟地图编辑器”，这样才能随机创建无限的动态地图，从而让玩家在其中流连忘返。在这篇文章里，我会将自己在开发一款名为 Tyrant 的 Roguelike 游戏中使用的方法记录下来。我怀疑这可能只能算是一个原型，但是我之前也没有见过什么一本正经讲述生成 Roguelike 地图算法",{"type":594,"children":18517,"toc":19041},[18518,18523,18535,18548,18553,18567,18572,18577,18591,18614,18619,18624,18629,18634,18639,18644,18649,18654,18707,18720,18725,18730,18735,18740,18745,18750,18755,18760,18765,18770,18775,18780,18788,18793,18801,18806,18814,18819,18827,18832,18840,18845,18853,18858,18866,18871,18879,18884,18892,18897,18905,18910,18917,18922,18930,18935,18943,18948,18952,18957,18962,18987,19001,19015,19029],{"type":597,"tag":3995,"props":18519,"children":18521},{"id":18520},"引言",[18522],{"type":603,"value":18520},{"type":597,"tag":606,"props":18524,"children":18525},{},[18526,18528],{"type":603,"value":18527},"文章作者：",{"type":597,"tag":886,"props":18529,"children":18532},{"href":18530,"rel":18531},"http://www.roguebasin.com/index.php?title=Mike_Anderson",[890],[18533],{"type":603,"value":18534},"Mike Anderson",{"type":597,"tag":606,"props":18536,"children":18537},{},[18538,18540,18546],{"type":603,"value":18539},"随机生成的地图是 ",{"type":597,"tag":886,"props":18541,"children":18544},{"href":18542,"rel":18543},"https://indienova.com/tag/roguelike/",[890],[18545],{"type":603,"value":7308},{"type":603,"value":18547}," 类游戏最独特的一点，它让游戏变得很有乐趣，因为玩家永远要面对新的挑战。",{"type":597,"tag":606,"props":18549,"children":18550},{},[18551],{"type":603,"value":18552},"但是随机地图却不是那么容易生成的。在传统的游戏中，一般你都会有一个地图编辑器，可以自由的创建地图。在任何一款称得上是“Roguelike”的游戏中，开发者都要自己创造一个“虚拟地图编辑器”，这样才能随机创建无限的动态地图，从而让玩家在其中流连忘返。",{"type":597,"tag":606,"props":18554,"children":18555},{},[18556,18558,18565],{"type":603,"value":18557},"在这篇文章里，我会将自己在开发一款名为 ",{"type":597,"tag":886,"props":18559,"children":18562},{"href":18560,"rel":18561},"http://sourceforge.net/projects/tyrant/",[890],[18563],{"type":603,"value":18564},"Tyrant",{"type":603,"value":18566}," 的 Roguelike 游戏中使用的方法记录下来。我怀疑这可能只能算是一个原型，但是我之前也没有见过什么一本正经讲述生成 Roguelike 地图算法的文章。而且，它工作得还是比较令人满意的，所以，我愿意将它分享给大家。",{"type":597,"tag":3995,"props":18568,"children":18570},{"id":18569},"这款算法的目标",[18571],{"type":603,"value":18569},{"type":597,"tag":606,"props":18573,"children":18574},{},[18575],{"type":603,"value":18576},"在写任何代码之前，了解自己的目标总是很重要的，这对编程很有帮助，哪怕你随后会做无数的修改。",{"type":597,"tag":606,"props":18578,"children":18579},{},[18580,18582,18589],{"type":603,"value":18581},"一个地牢（",{"type":597,"tag":886,"props":18583,"children":18586},{"href":18584,"rel":18585},"https://indienova.com/tag/dungeon/",[890],[18587],{"type":603,"value":18588},"Dungeon",{"type":603,"value":18590},"）应该包含以下要点：",{"type":597,"tag":1321,"props":18592,"children":18593},{},[18594,18599,18604,18609],{"type":597,"tag":807,"props":18595,"children":18596},{},[18597],{"type":603,"value":18598},"一组相互连通的房间、门和通道",{"type":597,"tag":807,"props":18600,"children":18601},{},[18602],{"type":603,"value":18603},"一个入口（向上走的楼梯）",{"type":597,"tag":807,"props":18605,"children":18606},{},[18607],{"type":603,"value":18608},"一个出口（向下走的楼梯）",{"type":597,"tag":807,"props":18610,"children":18611},{},[18612],{"type":603,"value":18613},"所有的空间必须能够到达",{"type":597,"tag":606,"props":18615,"children":18616},{},[18617],{"type":603,"value":18618},"最后一点尤其重要。要知道，你的玩家在契而不舍的努力之后，应该能够顺利通过这一层，不要让他们失望。另外，如果放了某个物品到地图上的某个空间，它应该不会被藏在无法到达的地方。",{"type":597,"tag":3995,"props":18620,"children":18622},{"id":18621},"计划",[18623],{"type":603,"value":18621},{"type":597,"tag":606,"props":18625,"children":18626},{},[18627],{"type":603,"value":18628},"在我写 Tyrant 的时候，我尝试了很多种不同的算法来生成地图，这里所讲的是我能做到的最好的一个，也是目前游戏中使用的那个。",{"type":597,"tag":606,"props":18630,"children":18631},{},[18632],{"type":603,"value":18633},"我的灵感来自于此：“如果我是地下城的一个居民，那么我该怎么去建设我的地牢呢？”",{"type":597,"tag":606,"props":18635,"children":18636},{},[18637],{"type":603,"value":18638},"显然，我并不会将我的地下城建造成一个一个看起来不错的小房间，然后在中间用长长的通道连接起来。所以，当我需要为我的小怪物们提供更多空间的时候，我应该是拿起我的斧头，挖一个更大一些的洞。这样当他们有所需要的时候就会增加一些新房间——尽管它们看起来可能杂乱无章。",{"type":597,"tag":606,"props":18640,"children":18641},{},[18642],{"type":603,"value":18643},"有些地下城主可能想要用吊桥呀、陷阱呀什么的来守护比较“有趣”的房间，但是这些需求都异曲同工。由一个小的地牢开始，慢慢向四周扩散，直到整个地牢形成。这就是我们的计划。",{"type":597,"tag":3995,"props":18645,"children":18647},{"id":18646},"算法",[18648],{"type":603,"value":18646},{"type":597,"tag":606,"props":18650,"children":18651},{},[18652],{"type":603,"value":18653},"在这个算法里面，“元素”代表着某种地图元素，比如：大房间、小房间、通道、圆形竞技场、保险柜等等。",{"type":597,"tag":803,"props":18655,"children":18656},{},[18657,18662,18667,18672,18677,18682,18687,18692,18697,18702],{"type":597,"tag":807,"props":18658,"children":18659},{},[18660],{"type":603,"value":18661},"将整个地图填满土",{"type":597,"tag":807,"props":18663,"children":18664},{},[18665],{"type":603,"value":18666},"在地图中间挖一个房间出来",{"type":597,"tag":807,"props":18668,"children":18669},{},[18670],{"type":603,"value":18671},"选中某一房间（如果有多个的话）的墙壁",{"type":597,"tag":807,"props":18673,"children":18674},{},[18675],{"type":603,"value":18676},"确定要修建某种新元素",{"type":597,"tag":807,"props":18678,"children":18679},{},[18680],{"type":603,"value":18681},"查看从选中的墙延伸出去是否有足够的空间承载新的元素",{"type":597,"tag":807,"props":18683,"children":18684},{},[18685],{"type":603,"value":18686},"如果有的话继续，不然就返回第 3 步",{"type":597,"tag":807,"props":18688,"children":18689},{},[18690],{"type":603,"value":18691},"从选中的墙处增加新的元素",{"type":597,"tag":807,"props":18693,"children":18694},{},[18695],{"type":603,"value":18696},"返回第 3 步，直到地牢建设完成",{"type":597,"tag":807,"props":18698,"children":18699},{},[18700],{"type":603,"value":18701},"在地图的随机点上安排上楼和下楼的楼梯",{"type":597,"tag":807,"props":18703,"children":18704},{},[18705],{"type":603,"value":18706},"最后，放进去怪兽和物品",{"type":597,"tag":606,"props":18708,"children":18709},{},[18710,18712,18718],{"type":603,"value":18711},"第 1、2 步很简单。只要你创建好地图就可以去做到。我发现，写一个 ",{"type":597,"tag":629,"props":18713,"children":18715},{"className":18714},[],[18716],{"type":603,"value":18717},"fillRect",{"type":603,"value":18719}," 指令用来填充一个区域是比较有效的做法。",{"type":597,"tag":606,"props":18721,"children":18722},{},[18723],{"type":603,"value":18724},"第 3 步麻烦一些。你不能随意的寻找一个方块区域去添加你的元素，因为规则是要将元素添加到当前的地牢当中。这样会使得连接看起来比较不错，也确保了所有的区域都可以到达。Tyrant 的做法是：在地图上随机选择一个方块，直到找到横向或者纵向毗邻一个干净的方块那个。这样做的好处是：它给了你一个近乎公平的方式去选择某一面墙。",{"type":597,"tag":606,"props":18726,"children":18727},{},[18728],{"type":603,"value":18729},"第 4 步不太困难。我自己写了一个随机方法来决定建造哪一种元素。你可以自己定义它们，调整某些元素出现的权重，这会让你的地牢有自己的特点和侧重点。一个规划比较好的地牢会有很多规矩的房间，中间有长而且直的走廊连接。而洞穴则可能有一堆打洞以及曲折的小道等等。",{"type":597,"tag":606,"props":18731,"children":18732},{},[18733],{"type":603,"value":18734},"第 5 步更复杂一些，而且也是整个算法的核心。针对每一种元素，你需要知道它会占用的空间大小。然后你要去判断它是否和已经有的元素相交。Tyrant 使用了相对简单的一种方法：它会先得到要创建的元素所占用的空间大小，得到这个空间的数据，然后检查是否这个空间由土填满。",{"type":597,"tag":606,"props":18736,"children":18737},{},[18738],{"type":603,"value":18739},"第 6 步决定是否创建这个元素。如果这个待确定的空间包含有除了土之外的内容，那么就回到第 3 步继续。注意，大部分元素在这步都会被打回。不过这不是个问题，因为处理时间可以忽略。Tyrant 尝试着将某个元素加入 300 次左右到地牢中去，一般只有 40 次左右会通过这步。",{"type":597,"tag":606,"props":18741,"children":18742},{},[18743],{"type":603,"value":18744},"第 7 步会将新元素添加到地图上去。在这步，你还可以增加一些有趣的元素，比如动物、居民、秘道门和财宝什么的。",{"type":597,"tag":606,"props":18746,"children":18747},{},[18748],{"type":603,"value":18749},"第 8 步返回去创建更多的房间。确切的次数跟你地牢的尺寸以及其它参数有关。",{"type":597,"tag":606,"props":18751,"children":18752},{},[18753],{"type":603,"value":18754},"第 9 步要看个人喜好了。最简单的方法就是随机的去查找方块，直到找到一个空的位置去放置楼梯。",{"type":597,"tag":606,"props":18756,"children":18757},{},[18758],{"type":603,"value":18759},"第 10 步就是随机的创建怪兽。Tyrant 在这一步才加入游戏中大多数的怪兽，由少量的特殊怪兽或者生物会在生成房间的时候添加进去。",{"type":597,"tag":606,"props":18761,"children":18762},{},[18763],{"type":603,"value":18764},"就这样啦，这里所说的只是算法的规则，具体还要您自己去实现啦。",{"type":597,"tag":3995,"props":18766,"children":18768},{"id":18767},"例子",[18769],{"type":603,"value":18767},{"type":597,"tag":606,"props":18771,"children":18772},{},[18773],{"type":603,"value":18774},"好了，在看了半天算法之后，我们来一个例子吧：",{"type":597,"tag":606,"props":18776,"children":18777},{},[18778],{"type":603,"value":18779},"Key:",{"type":597,"tag":621,"props":18781,"children":18783},{"code":18782},"# = 地板\nD = 门\nW = 正在考查中的墙\nC = 宝箱\n",[18784],{"type":597,"tag":629,"props":18785,"children":18786},{"__ignoreMap":591},[18787],{"type":603,"value":18782},{"type":597,"tag":606,"props":18789,"children":18790},{},[18791],{"type":603,"value":18792},"\\1. 第一个房间",{"type":597,"tag":621,"props":18794,"children":18796},{"code":18795},"#####\n#####\n#####\n",[18797],{"type":597,"tag":629,"props":18798,"children":18799},{"__ignoreMap":591},[18800],{"type":603,"value":18795},{"type":597,"tag":606,"props":18802,"children":18803},{},[18804],{"type":603,"value":18805},"\\2. 随机选择一面墙",{"type":597,"tag":621,"props":18807,"children":18809},{"code":18808},"#####\n#####W\n#####\n",[18810],{"type":597,"tag":629,"props":18811,"children":18812},{"__ignoreMap":591},[18813],{"type":603,"value":18808},{"type":597,"tag":606,"props":18815,"children":18816},{},[18817],{"type":603,"value":18818},"\\3. 为新的通道元素进行区域搜索（包括两边的空间）",{"type":597,"tag":621,"props":18820,"children":18822},{"code":18821},"#####**********\n#####W*********\n#####**********\n",[18823],{"type":597,"tag":629,"props":18824,"children":18825},{"__ignoreMap":591},[18826],{"type":603,"value":18821},{"type":597,"tag":606,"props":18828,"children":18829},{},[18830],{"type":603,"value":18831},"\\4. 是空的，可以添加元素",{"type":597,"tag":621,"props":18833,"children":18835},{"code":18834},"#####\n#####D########\n#####\n",[18836],{"type":597,"tag":629,"props":18837,"children":18838},{"__ignoreMap":591},[18839],{"type":603,"value":18834},{"type":597,"tag":606,"props":18841,"children":18842},{},[18843],{"type":603,"value":18844},"\\5. 选择另外一面墙",{"type":597,"tag":621,"props":18846,"children":18848},{"code":18847},"#####     W\n#####D########\n#####\n",[18849],{"type":597,"tag":629,"props":18850,"children":18851},{"__ignoreMap":591},[18852],{"type":603,"value":18847},{"type":597,"tag":606,"props":18854,"children":18855},{},[18856],{"type":603,"value":18857},"\\6. 扫描寻找新的房间所占用空间：",{"type":597,"tag":621,"props":18859,"children":18861},{"code":18860},"       ******\n       ******\n       ******\n       ******\n       ******\n#####  ***W**\n#####D########\n#####\n",[18862],{"type":597,"tag":629,"props":18863,"children":18864},{"__ignoreMap":591},[18865],{"type":603,"value":18860},{"type":597,"tag":606,"props":18867,"children":18868},{},[18869],{"type":603,"value":18870},"\\7. 这个地区也可以，那就添加一个新房间，再往里面扔一个宝箱 C（Chest）：",{"type":597,"tag":621,"props":18872,"children":18874},{"code":18873},"        ####\n        ###C\n        ####\n        ####\n#####     D  \n#####D########\n#####\n",[18875],{"type":597,"tag":629,"props":18876,"children":18877},{"__ignoreMap":591},[18878],{"type":603,"value":18873},{"type":597,"tag":606,"props":18880,"children":18881},{},[18882],{"type":603,"value":18883},"\\8. 跟前面做法一样，我们增加一个新的通道元素",{"type":597,"tag":621,"props":18885,"children":18887},{"code":18886},"             #\n             #\n        #### #\n        ###C #\n        #### #\n        #### #\n#####     D  #\n#####D########\n#####\n",[18888],{"type":597,"tag":629,"props":18889,"children":18890},{"__ignoreMap":591},[18891],{"type":603,"value":18886},{"type":597,"tag":606,"props":18893,"children":18894},{},[18895],{"type":603,"value":18896},"\\9. 这一次，我们试着为第二个房间增加一个通道元素",{"type":597,"tag":621,"props":18898,"children":18900},{"code":18899},"             #\n             #\n        #### #\n        ###C*******\n        ####W******\n        ####*******\n#####     D  #\n#####D########\n#####\n",[18901],{"type":597,"tag":629,"props":18902,"children":18903},{"__ignoreMap":591},[18904],{"type":603,"value":18899},{"type":597,"tag":606,"props":18906,"children":18907},{},[18908],{"type":603,"value":18909},"\\10. 扫描失败了，已经被占用",{"type":597,"tag":621,"props":18911,"children":18912},{"code":18886},[18913],{"type":597,"tag":629,"props":18914,"children":18915},{"__ignoreMap":591},[18916],{"type":603,"value":18886},{"type":597,"tag":606,"props":18918,"children":18919},{},[18920],{"type":603,"value":18921},"\\11. 比较特别的元素，一个菱形的房间",{"type":597,"tag":621,"props":18923,"children":18925},{"code":18924},"             #\n             #   ###\n        #### #  #####\n        ###C # #######\n        #### #D#######\n        #### # #######\n#####     D  #  #####\n#####D########   ###\n#####\n",[18926],{"type":597,"tag":629,"props":18927,"children":18928},{"__ignoreMap":591},[18929],{"type":603,"value":18924},{"type":597,"tag":606,"props":18931,"children":18932},{},[18933],{"type":603,"value":18934},"\\12. 添加一个隐藏的暗门，以及充满陷阱的通道：",{"type":597,"tag":621,"props":18936,"children":18938},{"code":18937},"             #\n             #   ###\n        #### #  #####\n        ###C # #######S###T##TT#T##\n        #### #D#######\n        #### # #######\n#####     D  #  #####\n#####D########   ###\n#####\n",[18939],{"type":597,"tag":629,"props":18940,"children":18941},{"__ignoreMap":591},[18942],{"type":603,"value":18937},{"type":597,"tag":606,"props":18944,"children":18945},{},[18946],{"type":603,"value":18947},"\\13. 继续……",{"type":597,"tag":3995,"props":18949,"children":18950},{"id":1464},[18951],{"type":603,"value":1464},{"type":597,"tag":606,"props":18953,"children":18954},{},[18955],{"type":603,"value":18956},"好了，这就是我的算法，我希望它对你有用，或者从一个有趣的角度去看如何解决一个问题。",{"type":597,"tag":3995,"props":18958,"children":18960},{"id":18959},"代码实现",[18961],{"type":603,"value":18959},{"type":597,"tag":606,"props":18963,"children":18964},{},[18965,18970,18976,18978,18985],{"type":597,"tag":1080,"props":18966,"children":18967},{},[18968],{"type":603,"value":18969},"Java 代码实现",{"type":597,"tag":886,"props":18971,"children":18974},{"href":18972,"rel":18973},"http://www.roguebasin.com/index.php?title=Java_Example_of_Dungeon-Building_Algorithm",[890],[18975],{"type":603,"value":18969},{"type":603,"value":18977},"\n你可以通过 ",{"type":597,"tag":886,"props":18979,"children":18982},{"href":18980,"rel":18981},"http://openprocessing.org/visuals/?visualID=18822",[890],[18983],{"type":603,"value":18984},"Open Processing",{"type":603,"value":18986}," 在浏览器里面运行它（需要做一些小修改）。它会创建一个图形化的地牢。",{"type":597,"tag":606,"props":18988,"children":18989},{},[18990,18995],{"type":597,"tag":1080,"props":18991,"children":18992},{},[18993],{"type":603,"value":18994},"Python Curses 代码实现",{"type":597,"tag":886,"props":18996,"children":18999},{"href":18997,"rel":18998},"http://www.roguebasin.com/index.php?title=Python_Curses_Example_of_Dungeon-Building_Algorithm",[890],[19000],{"type":603,"value":18994},{"type":597,"tag":606,"props":19002,"children":19003},{},[19004,19009],{"type":597,"tag":1080,"props":19005,"children":19006},{},[19007],{"type":603,"value":19008},"C++ 代码实现",{"type":597,"tag":886,"props":19010,"children":19013},{"href":19011,"rel":19012},"http://www.roguebasin.com/index.php?title=C%2B%2B_Example_of_Dungeon-Building_Algorithm",[890],[19014],{"type":603,"value":19008},{"type":597,"tag":606,"props":19016,"children":19017},{},[19018,19023],{"type":597,"tag":1080,"props":19019,"children":19020},{},[19021],{"type":603,"value":19022},"C# 代码实现",{"type":597,"tag":886,"props":19024,"children":19027},{"href":19025,"rel":19026},"http://www.roguebasin.com/index.php?title=CSharp_Example_of_a_Dungeon-Building_Algorithm",[890],[19028],{"type":603,"value":19022},{"type":597,"tag":606,"props":19030,"children":19031},{},[19032,19034],{"type":603,"value":19033},"原文地址：",{"type":597,"tag":886,"props":19035,"children":19038},{"href":19036,"rel":19037},"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm",[890],[19039],{"type":603,"value":19040},"链接",{"title":591,"searchDepth":787,"depth":787,"links":19042},[],"content:game:2021-01-23-roguelike-map.md","game/2021-01-23-roguelike-map.md",{"_path":153,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":152,"description":19046,"body":19047,"_type":791,"_id":19483,"_source":793,"_file":19484,"_extension":795,"date":19485},"作者：哈里叔叔\n链接：https://www.zhihu.com/question/52019284/answer/1476187895\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",{"type":594,"children":19048,"toc":19476},[19049,19062,19067,19072,19085,19096,19101,19121,19129,19134,19139,19150,19158,19163,19168,19179,19184,19189,19197,19202,19213,19221,19234,19245,19265,19270,19275,19286,19294,19299,19320,19325,19336,19341,19352,19360,19365,19370,19375,19386,19394,19399,19410,19415,19420,19431,19436,19447,19452,19463,19468,19473],{"type":597,"tag":606,"props":19050,"children":19051},{},[19052,19054,19060],{"type":603,"value":19053},"作者：哈里叔叔\n链接：",{"type":597,"tag":886,"props":19055,"children":19058},{"href":19056,"rel":19057},"https://www.zhihu.com/question/52019284/answer/1476187895",[890],[19059],{"type":603,"value":19056},{"type":603,"value":19061},"\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",{"type":597,"tag":1023,"props":19063,"children":19065},{"id":19064},"对称性对抗游戏简介",[19066],{"type":603,"value":19064},{"type":597,"tag":606,"props":19068,"children":19069},{},[19070],{"type":603,"value":19071},"对称性对抗游戏是指参与游戏的玩家所拥有的资源、交互方式、受制规则、最终目标是相同或相近的，是一种公平、对称的零和游戏。如《英雄无敌》《文明》《卡坦岛》等游戏。",{"type":597,"tag":606,"props":19073,"children":19074},{},[19075,19077,19083],{"type":603,"value":19076},"我们参考文明的4X要素[",{"type":597,"tag":886,"props":19078,"children":19080},{"href":19079},"#ref_1",[19081],{"type":603,"value":19082},"1]",{"type":603,"value":19084},"搭建了一个多人回合制战略游戏，如下图所示：地图开始被“战争迷雾”所覆盖。玩家必须派遣探险者进入这片迷雾中，以揭露要扩张的土地，要开发的资源以及要消灭的对手。",{"type":597,"tag":606,"props":19086,"children":19087},{},[19088,19092],{"type":597,"tag":719,"props":19089,"children":19091},{"alt":719,"src":19090},"/images/2021-01-22-civ-map/v2-9c3f623a46a9e27b84fa3bc74cbc54bd_hd.jpg",[],{"type":597,"tag":719,"props":19093,"children":19095},{"alt":719,"src":19094},"/images/2021-01-22-civ-map/v2-9c3f623a46a9e27b84fa3bc74cbc54bd_720w.jpg",[],{"type":597,"tag":1023,"props":19097,"children":19099},{"id":19098},"地图的平衡性指标",[19100],{"type":603,"value":19098},{"type":597,"tag":606,"props":19102,"children":19103},{},[19104,19106,19112,19114,19119],{"type":603,"value":19105},"我们参考[",{"type":597,"tag":886,"props":19107,"children":19109},{"href":19108},"#ref_2",[19110],{"type":603,"value":19111},"2]",{"type":603,"value":19113},"[",{"type":597,"tag":886,"props":19115,"children":19117},{"href":19116},"#ref_3",[19118],{"type":603,"value":18200},{"type":603,"value":19120},"两篇参考文献制定出评估对称性对抗游戏地图平衡性的两点指标。",{"type":597,"tag":606,"props":19122,"children":19123},{},[19124],{"type":597,"tag":1080,"props":19125,"children":19126},{},[19127],{"type":603,"value":19128},"1. 战略特征（Strategic Feature）",{"type":597,"tag":606,"props":19130,"children":19131},{},[19132],{"type":603,"value":19133},"战略特征是指玩家在游戏中可以利用的战略资源。 战略特征的平衡是指每一名玩家在一定时间内获得基本相同的资源（包括类型和数量）。",{"type":597,"tag":606,"props":19135,"children":19136},{},[19137],{"type":603,"value":19138},"下面两张图显示了两名玩家战略特征不平衡的情况，蓝色玩家初始时可以获得更多的矿产资源，而黄色玩家的出生点附近几乎没有矿产资源，这会导致游戏初期黄色玩家的发展受限。",{"type":597,"tag":606,"props":19140,"children":19141},{},[19142,19146],{"type":597,"tag":719,"props":19143,"children":19145},{"alt":719,"src":19144},"/images/2021-01-22-civ-map/v2-c217513044c65234f7773e83f2aefd8f_hd.jpg",[],{"type":597,"tag":719,"props":19147,"children":19149},{"alt":719,"src":19148},"/images/2021-01-22-civ-map/v2-c217513044c65234f7773e83f2aefd8f_720w.jpg",[],{"type":597,"tag":606,"props":19151,"children":19152},{},[19153],{"type":597,"tag":1080,"props":19154,"children":19155},{},[19156],{"type":603,"value":19157},"2. 玩家占位符（player placeholder）",{"type":597,"tag":606,"props":19159,"children":19160},{},[19161],{"type":603,"value":19162},"玩家初始的出生点占位的分布也会影响游戏的平衡性。",{"type":597,"tag":606,"props":19164,"children":19165},{},[19166],{"type":603,"value":19167},"下面两张图显示了玩家初始占位符分布密度不同导致游戏性不平衡的情况。左图的玩家初始分布密集，这会导致这个地区的玩家在游戏前期相互碾压、发展受限；而右图中的黄色玩家在游戏前期缺少竞争，能够更好地发展自身建设。",{"type":597,"tag":606,"props":19169,"children":19170},{},[19171,19175],{"type":597,"tag":719,"props":19172,"children":19174},{"alt":719,"src":19173},"/images/2021-01-22-civ-map/v2-af9bc4a5e3c7c7d7d5c674d76a5510e0_hd.jpg",[],{"type":597,"tag":719,"props":19176,"children":19178},{"alt":719,"src":19177},"/images/2021-01-22-civ-map/v2-af9bc4a5e3c7c7d7d5c674d76a5510e0_720w.jpg",[],{"type":597,"tag":606,"props":19180,"children":19181},{},[19182],{"type":603,"value":19183},"除了以上两点对游戏平衡性的影响之外，战略游戏地图的随机地图还要考虑到：地图的美观性、根据玩家的偏好定制参数、生成地图的效率等要求。",{"type":597,"tag":1023,"props":19185,"children":19187},{"id":19186},"地图的生成过程",[19188],{"type":603,"value":19186},{"type":597,"tag":606,"props":19190,"children":19191},{},[19192],{"type":597,"tag":1080,"props":19193,"children":19194},{},[19195],{"type":603,"value":19196},"1. 根据玩家的偏好定制地图参数",{"type":597,"tag":606,"props":19198,"children":19199},{},[19200],{"type":603,"value":19201},"在新建游戏之前，我们会让玩家根据自己的喜好定制地图参数，包括地图的尺寸、玩家的总数量、地图的类型（盘古大陆、大洲、海岛群）、水体比例、植被比例、岩石比例与资源的比例等。",{"type":597,"tag":606,"props":19203,"children":19204},{},[19205,19209],{"type":597,"tag":719,"props":19206,"children":19208},{"alt":719,"src":19207},"/images/2021-01-22-civ-map/v2-4a2127dcc15dabf1b2a6da2d5964035d_hd.jpg",[],{"type":597,"tag":719,"props":19210,"children":19212},{"alt":719,"src":19211},"/images/2021-01-22-civ-map/v2-4a2127dcc15dabf1b2a6da2d5964035d_720w.jpg",[],{"type":597,"tag":606,"props":19214,"children":19215},{},[19216],{"type":597,"tag":1080,"props":19217,"children":19218},{},[19219],{"type":603,"value":19220},"2. 生成地图的轮廓：柏林噪声",{"type":597,"tag":606,"props":19222,"children":19223},{},[19224,19226,19232],{"type":603,"value":19225},"柏林噪声（Perlin noise）指由Ken Perlin发明的自然噪声生成算法[",{"type":597,"tag":886,"props":19227,"children":19229},{"href":19228},"#ref_4",[19230],{"type":603,"value":19231},"4]",{"type":603,"value":19233},"。在游戏开发领域，柏林噪声可以用于生成波形，起伏不平的材质或者纹理。如下图所示：",{"type":597,"tag":606,"props":19235,"children":19236},{},[19237,19241],{"type":597,"tag":719,"props":19238,"children":19240},{"alt":719,"src":19239},"/images/2021-01-22-civ-map/v2-9666e99f436d9863363e73d8148fabc4_hd.jpg",[],{"type":597,"tag":719,"props":19242,"children":19244},{"alt":719,"src":19243},"/images/2021-01-22-civ-map/v2-9666e99f436d9863363e73d8148fabc4_720w.jpg",[],{"type":597,"tag":606,"props":19246,"children":19247},{},[19248,19250,19257,19258,19264],{"type":603,"value":19249},"与椒盐噪声相比，柏林噪声有较好的连续性分布，可以更好的模拟自然界中的地形分布与地表装饰物分布。利用柏林噪声生成自然地图可以参考B站视频：",{"type":597,"tag":886,"props":19251,"children":19254},{"href":19252,"rel":19253},"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1sJ411e7nt",[890],[19255],{"type":603,"value":19256},"柏林噪声程序化生成随机地图",{"type":603,"value":19113},{"type":597,"tag":886,"props":19259,"children":19261},{"href":19260},"#ref_5",[19262],{"type":603,"value":19263},"5]",{"type":603,"value":758},{"type":597,"tag":606,"props":19266,"children":19267},{},[19268],{"type":603,"value":19269},"柏林噪声的生成采用伪随机数的生成方式，相同的“随机数种子”会生成相同的地貌。这也是很多随机地图生成器中会暴露“种子”让玩家根据种子生成地图的原因。如果想跟好朋友分享某个生成结果比较好的地图，只需要共享“种子”字符串，就能在随机地图生成器中还原出所生成的地形，而不需要把整个地图文件保存到本地再分享。",{"type":597,"tag":606,"props":19271,"children":19272},{},[19273],{"type":603,"value":19274},"Unity官方自带生成柏林函数的函数。我们引用了柏林噪声js库来进行地形的实现。我们利用柏林噪声的采样尺度来决定地图的类型是连续的大陆型地图还是离散的大洲型地图；将随机取到的连续噪声均衡化作为地图的高度图，根据用户设置的水体占比来制定海平面高度，最终生成的地形结果如下图所示：",{"type":597,"tag":606,"props":19276,"children":19277},{},[19278,19282],{"type":597,"tag":719,"props":19279,"children":19281},{"alt":719,"src":19280},"/images/2021-01-22-civ-map/v2-53f678a81cd6969e60c89f5b8c5318a3_hd.jpg",[],{"type":597,"tag":719,"props":19283,"children":19285},{"alt":719,"src":19284},"/images/2021-01-22-civ-map/v2-53f678a81cd6969e60c89f5b8c5318a3_720w.jpg",[],{"type":597,"tag":606,"props":19287,"children":19288},{},[19289],{"type":597,"tag":1080,"props":19290,"children":19291},{},[19292],{"type":603,"value":19293},"3. 玩家出生点的选择：米切尔最佳候选算法",{"type":597,"tag":606,"props":19295,"children":19296},{},[19297],{"type":603,"value":19298},"为了保证每位玩家两两之间的初始分布不会过近，我们在生成游戏地形后，在陆地上对玩家初始占位符进行均匀采样。为了兼顾效果与效率，我们最终选用米切尔最佳候选 算法（best candidate）。",{"type":597,"tag":606,"props":19300,"children":19301},{},[19302,19304,19311,19312,19318],{"type":603,"value":19303},"米切尔最佳候选算法是一种渐进、增量式的均匀采样方法。它每一轮采样都是从多个随机采样点中，保留与之前轮的所有采样点中最小距离最大的点作为本轮的采样结果。更加具体直观的算法解释可以参考:",{"type":597,"tag":886,"props":19305,"children":19308},{"href":19306,"rel":19307},"https://link.zhihu.com/?target=https%3A//bindog.github.io/blog/2014/08/09/visualizing-algorithms/",[890],[19309],{"type":603,"value":19310},"算法可视化",{"type":603,"value":19113},{"type":597,"tag":886,"props":19313,"children":19315},{"href":19314},"#ref_6",[19316],{"type":603,"value":19317},"6]",{"type":603,"value":19319},"中有关米切尔候选算法的部分",{"type":597,"tag":606,"props":19321,"children":19322},{},[19323],{"type":603,"value":19324},"如下图所示：黑色点是之前轮已经确定的采样点，灰色点是本轮随机采样的候选点，每个候选点都选出与之前轮采样点中距离最近的距离，再从中选出最小距离最大的红色点作为本轮采样的结果。",{"type":597,"tag":606,"props":19326,"children":19327},{},[19328,19332],{"type":597,"tag":719,"props":19329,"children":19331},{"alt":719,"src":19330},"/images/2021-01-22-civ-map/v2-fac9f90ba270e0869f56081434f79a4d_hd.jpg",[],{"type":597,"tag":719,"props":19333,"children":19335},{"alt":719,"src":19334},"/images/2021-01-22-civ-map/v2-fac9f90ba270e0869f56081434f79a4d_720w.jpg",[],{"type":597,"tag":606,"props":19337,"children":19338},{},[19339],{"type":603,"value":19340},"利用这种采样方式采样出玩家的初始占位符，可以避免任意两个玩家之间的距离过近导致游戏平衡性被破坏，如下图所示：",{"type":597,"tag":606,"props":19342,"children":19343},{},[19344,19348],{"type":597,"tag":719,"props":19345,"children":19347},{"alt":719,"src":19346},"/images/2021-01-22-civ-map/v2-3924e3347b5634505b2a19101ddc28f7_hd.jpg",[],{"type":597,"tag":719,"props":19349,"children":19351},{"alt":719,"src":19350},"/images/2021-01-22-civ-map/v2-3924e3347b5634505b2a19101ddc28f7_720w.jpg",[],{"type":597,"tag":606,"props":19353,"children":19354},{},[19355],{"type":597,"tag":1080,"props":19356,"children":19357},{},[19358],{"type":603,"value":19359},"4. 战略资源的分布",{"type":597,"tag":606,"props":19361,"children":19362},{},[19363],{"type":603,"value":19364},"采样出玩家的分布之后，我们将地图单元格分为两种类型：每个玩家占位符附近距离N以内的单元格为玩家区域（Player Zones），不隶属于任何玩家区域的单元格被称为隔离区或自然区（Natural Zones）。",{"type":597,"tag":606,"props":19366,"children":19367},{},[19368],{"type":603,"value":19369},"为了让每名玩家在游戏初始时具有公平的战略特征，我们对每位玩家的玩家区域内定额分配植被、岩石与矿产资源。根据用户设定的植被、岩石与资源占比分别计算出每位玩家区应当分配到的植被、岩石与资源数量，然后在每个玩家区域内不重不漏地采样出相等数量的植被、岩石与资源单元格。",{"type":597,"tag":606,"props":19371,"children":19372},{},[19373],{"type":603,"value":19374},"对于自然区，我们按照玩家设置的参数，采用米切尔候选算法均匀采样每一种资源。这样可以保证每位玩家在游戏初始时能够得到数量一致的战略特征。如下图所示：",{"type":597,"tag":606,"props":19376,"children":19377},{},[19378,19382],{"type":597,"tag":719,"props":19379,"children":19381},{"alt":719,"src":19380},"/images/2021-01-22-civ-map/v2-36f553af401b6bddf8238a387674559b_hd.jpg",[],{"type":597,"tag":719,"props":19383,"children":19385},{"alt":719,"src":19384},"/images/2021-01-22-civ-map/v2-36f553af401b6bddf8238a387674559b_720w.jpg",[],{"type":597,"tag":606,"props":19387,"children":19388},{},[19389],{"type":597,"tag":1080,"props":19390,"children":19391},{},[19392],{"type":603,"value":19393},"5. 边界情况处理",{"type":597,"tag":606,"props":19395,"children":19396},{},[19397],{"type":603,"value":19398},"用以上方式生成的地图在某些情况下会产生不好的结果，例如当水体比例过低时生成海岛地形，会导致水体不够划分不出海岛地形；当水体比例过高时，会由于陆地单元格分布不均导致出生在不同规模大小的岛屿上的玩家能够得到的战略资源再度失衡。对于这些边界情况，我们利用种子生长与泛洪填充等启发式生成方法生成地图，优先保证地图类型能够满足用户的需求，并尽可能保证水体与各种战略特征的资源逼近用户的设定。以下是我们在水体占比过低与水体占比过高时生成的地图，可以看出在这两种情况下依然能够保证所生成地图的平衡性：",{"type":597,"tag":606,"props":19400,"children":19401},{},[19402,19406],{"type":597,"tag":719,"props":19403,"children":19405},{"alt":719,"src":19404},"/images/2021-01-22-civ-map/v2-cbd869e4e4aaf2271e96a91adc50208e_hd.jpg",[],{"type":597,"tag":719,"props":19407,"children":19409},{"alt":719,"src":19408},"/images/2021-01-22-civ-map/v2-cbd869e4e4aaf2271e96a91adc50208e_720w.jpg",[],{"type":597,"tag":1023,"props":19411,"children":19413},{"id":19412},"生成地图质量的定量评估",[19414],{"type":603,"value":19412},{"type":597,"tag":606,"props":19416,"children":19417},{},[19418],{"type":603,"value":19419},"为了判断我们的生成随机地图算法是否具有良好的平衡性指标，我们设计了一套地图自动扩张算法：每个玩家以出生点占位符为种子，轮流从目前领土所毗邻的无人单元格中抽取一个进行占领以扩张势力范围，直到地图中所有的单元格都被有且只有一个玩家占领；然后我们统计每个玩家占领到的资源数量、距离最近的敌人距离，以及每个玩家与多少数量的玩家领土相邻。如下图所示：",{"type":597,"tag":606,"props":19421,"children":19422},{},[19423,19427],{"type":597,"tag":719,"props":19424,"children":19426},{"alt":719,"src":19425},"/images/2021-01-22-civ-map/v2-aff4ede9c673351500855f48cadcb4f0_hd.jpg",[],{"type":597,"tag":719,"props":19428,"children":19430},{"alt":719,"src":19429},"/images/2021-01-22-civ-map/v2-aff4ede9c673351500855f48cadcb4f0_720w.jpg",[],{"type":597,"tag":606,"props":19432,"children":19433},{},[19434],{"type":603,"value":19435},"实验组是我们的算法生成的地图，对照组是根据水体与各种资源的比例随机采样地形、随机采样玩家分布得到的地图。如下方左侧是实验组生成的地图，右侧是对照组生成的地图：",{"type":597,"tag":606,"props":19437,"children":19438},{},[19439,19443],{"type":597,"tag":719,"props":19440,"children":19442},{"alt":719,"src":19441},"/images/2021-01-22-civ-map/v2-17df5c19a246e5bbbef3fa428646a3e8_hd.jpg",[],{"type":597,"tag":719,"props":19444,"children":19446},{"alt":719,"src":19445},"/images/2021-01-22-civ-map/v2-17df5c19a246e5bbbef3fa428646a3e8_720w.jpg",[],{"type":597,"tag":606,"props":19448,"children":19449},{},[19450],{"type":603,"value":19451},"实验组与对照组各生成100次地图，统计每个玩家与其他势力最小距离的均值与方差、扩张完成后各资源占有量的均值与方差以及每位玩家潜在冲突势力的均值与方差，统计的结果如下所示：",{"type":597,"tag":606,"props":19453,"children":19454},{},[19455,19459],{"type":597,"tag":719,"props":19456,"children":19458},{"alt":719,"src":19457},"/images/2021-01-22-civ-map/v2-32e30c53111a6cc563aa0e1a819f18e3_hd.jpg",[],{"type":597,"tag":719,"props":19460,"children":19462},{"alt":719,"src":19461},"/images/2021-01-22-civ-map/v2-32e30c53111a6cc563aa0e1a819f18e3_720w.jpg",[],{"type":597,"tag":606,"props":19464,"children":19465},{},[19466],{"type":603,"value":19467},"通过定量的统计结果可以看出，我们的方法生成的地图，玩家之间有更大的平均极小距离，这说明每位玩家的出生点占位符设置更加平衡；各种资源的分布方差均比对照组小，说明我们的战略特征分配与朴素的随机生成的地图相比更加均衡。",{"type":597,"tag":606,"props":19469,"children":19470},{},[19471],{"type":603,"value":19472},"综上所述，我们的地图生成结果能够保证对称性多人对抗战略游戏的平衡性。",{"type":597,"tag":1023,"props":19474,"children":19475},{"id":591},[],{"title":591,"searchDepth":787,"depth":787,"links":19477},[19478,19479,19480,19481,19482],{"id":19064,"depth":1530,"text":19064},{"id":19098,"depth":1530,"text":19098},{"id":19186,"depth":1530,"text":19186},{"id":19412,"depth":1530,"text":19412},{"id":591,"depth":1530,"text":591},"content:game:2021-01-22-civ-map.md","game/2021-01-22-civ-map.md","2021-01-22",{"_path":150,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":149,"description":19487,"body":19488,"_type":791,"_id":19828,"_source":793,"_file":19829,"_extension":795,"date":19830},"什么是“波函数坍塌”？这个名字看起来是来自量子力学，意思应该是只有在真正观察时，粒子的状态才能被确定，要不然是不确定的，其实并不确定这个解释对不对，物理就够难了，更何况是量子力学。不过呢，很多事物都只是被赋予了高大上的名字，但是实际上根本没有看起来那么复杂。这里所说的“波函数坍塌”实际上是一种贴图以及模型合成技术（texture synthesize or model synthesize），所谓贴图是指数字动画中被贴在物体表面的图片，模型则是这些物体的模型。在2d里，模型一般就是一个二维的封闭区域，3d则是一个有特定形状的物体。贴图模型合成技术的研究和应用已经有很多年的历史了，只是直到今天才",{"type":594,"children":19489,"toc":19820},[19490,19496,19501,19506,19511,19516,19521,19549,19554,19559,19564,19569,19585,19592,19619,19624,19629,19634,19639,19662,19667,19672,19677,19682,19699,19704,19716,19721,19726,19733,19738,19743,19748,19776,19780],{"type":597,"tag":598,"props":19491,"children":19493},{"id":19492},"什么是波函数坍塌",[19494],{"type":603,"value":19495},"什么是“波函数坍塌”？",{"type":597,"tag":606,"props":19497,"children":19498},{},[19499],{"type":603,"value":19500},"这个名字看起来是来自量子力学，意思应该是只有在真正观察时，粒子的状态才能被确定，要不然是不确定的，其实并不确定这个解释对不对，物理就够难了，更何况是量子力学。不过呢，很多事物都只是被赋予了高大上的名字，但是实际上根本没有看起来那么复杂。",{"type":597,"tag":606,"props":19502,"children":19503},{},[19504],{"type":603,"value":19505},"这里所说的“波函数坍塌”实际上是一种贴图以及模型合成技术（texture synthesize or model synthesize），所谓贴图是指数字动画中被贴在物体表面的图片，模型则是这些物体的模型。在2d里，模型一般就是一个二维的封闭区域，3d则是一个有特定形状的物体。贴图模型合成技术的研究和应用已经有很多年的历史了，只是直到今天才有了一个比较霸气的名字而已。",{"type":597,"tag":606,"props":19507,"children":19508},{},[19509],{"type":603,"value":19510},"开发这些模型或者贴图合成技术是为了能使用一块很小的由人工制作的贴图或者模型来生成大量相似的贴图或者模型。这样可以有效的减少人工作业，提升效率。当然可能有人会有这样的疑问，现在基于GAN的AI看起来能够生成又是动画又是图片的，还有这种技术存在的必要吗? 答案当然是有存在的必要，首先GAN需要海量的样本去训练，有生成这么多样本的劲，大概早就做完游戏了，其次是AI生成的不一定能满足业务需求，而且使用者并没有调教的可能性，而在做贴图或者模型合成时，实际上只需要一个样本就可以完成所有的工作了。接下来要简要介绍下基本的原理。",{"type":597,"tag":598,"props":19512,"children":19514},{"id":19513},"基本原理",[19515],{"type":603,"value":19513},{"type":597,"tag":606,"props":19517,"children":19518},{},[19519],{"type":603,"value":19520},"“波函数坍塌“主要是依赖于样本相邻各点的布局结构，以这些结构作为特征，在一个更大的空间上生成满足样本结构约束的新数据。",{"type":597,"tag":606,"props":19522,"children":19523},{},[19524,19526,19531,19533,19537,19539,19542,19544,19547],{"type":603,"value":19525},"以贴图合成为例，假设在输入贴图中有且仅有一点坐标是 x,y，颜色为",{"type":597,"tag":719,"props":19527,"children":19530},{"alt":19528,"src":19529},"[公式]","/images/2021-01-21-wave-collapse-function/6.svg",[],{"type":603,"value":19532}," ，上下左右四个点的颜色分别是 ",{"type":597,"tag":719,"props":19534,"children":19536},{"alt":19528,"src":19535},"/images/2021-01-21-wave-collapse-function/5.svg",[],{"type":603,"value":19538}," 。那么在输出贴图中，如果存在一点颜色为 ",{"type":597,"tag":719,"props":19540,"children":19541},{"alt":19528,"src":19529},[],{"type":603,"value":19543}," ，那么它的上下左右四个点的颜色必须是 ",{"type":597,"tag":719,"props":19545,"children":19546},{"alt":19528,"src":19535},[],{"type":603,"value":19548}," 。",{"type":597,"tag":606,"props":19550,"children":19551},{},[19552],{"type":603,"value":19553},"实际上我们可以建立更复杂的相邻布局约束，比如说以贴图中某个点周围的不仅上下左右，还有对角线上的4个点，总共八个点建立约束条件，甚至是上下左右四个点的上下左右总共12个点。不过本文只会探讨受上下左右四个点约束的情况。",{"type":597,"tag":606,"props":19555,"children":19556},{},[19557],{"type":603,"value":19558},"所以我们的算法就是根据输入贴图提供的这种约束关系来生成输出贴图。这是一个搜索的过程，实际上是一个np hard问题，也就是说，只有当我们搜索了所有的可能性时，才一定能获得一个结果，当然这个结果可能是成功合成贴图，也可能是失败了，当对最终生成图片存在外界约束时，会有更大的可能性失败。",{"type":597,"tag":606,"props":19560,"children":19561},{},[19562],{"type":603,"value":19563},"虽然以贴图为例来说明，但是本文的初衷是为了能够生2d游戏的地图，所以接下来将仅介绍2d下的离散模型合成技术。在2d游戏开发中，一般会用瓦片（tiles）贴图来构成地图，其中瓦片会有特定的几何形状，然后通过瓦片的放置来完成地图。本文以及提供的代码只会考虑正方形的瓦片，对于正方形瓦片来说就和上面的解释完全一致了。",{"type":597,"tag":606,"props":19565,"children":19566},{},[19567],{"type":603,"value":19568},"最后不得不列一下我觉得还蛮重要的公式，该公式描述了上文中提及的一致性约束。",{"type":597,"tag":606,"props":19570,"children":19571},{},[19572,19574,19578,19580,19583],{"type":603,"value":19573},"设输入模型为 E，输出模型为 M ，那么当 M与 E 一致时，则对于 M中任意一点 x ，存在 ",{"type":597,"tag":719,"props":19575,"children":19577},{"alt":19528,"src":19576},"/images/2021-01-21-wave-collapse-function/8.svg",[],{"type":603,"value":19579}," ，且 ",{"type":597,"tag":719,"props":19581,"children":19582},{"alt":19528,"src":19576},[],{"type":603,"value":19584}," 属于 E ，满足：",{"type":597,"tag":606,"props":19586,"children":19587},{},[19588],{"type":597,"tag":719,"props":19589,"children":19591},{"alt":19528,"src":19590},"/images/2021-01-21-wave-collapse-function/7.svg",[],{"type":597,"tag":606,"props":19593,"children":19594},{},[19595,19597,19600,19602,19606,19608,19612,19614,19618],{"type":603,"value":19596},"其中， x 是 M中一点，而 ",{"type":597,"tag":719,"props":19598,"children":19599},{"alt":19528,"src":19576},[],{"type":603,"value":19601}," 是 E中一点， ",{"type":597,"tag":719,"props":19603,"children":19605},{"alt":19528,"src":19604},"/images/2021-01-21-wave-collapse-function/9.svg",[],{"type":603,"value":19607}," 则是几何纬度上正负向的单位向量，3维下是 ",{"type":597,"tag":719,"props":19609,"children":19611},{"alt":19528,"src":19610},"/images/2021-01-21-wave-collapse-function/4.svg",[],{"type":603,"value":19613}," ，2维下则是 ",{"type":597,"tag":719,"props":19615,"children":19617},{"alt":19528,"src":19616},"/images/2021-01-21-wave-collapse-function/3.svg",[],{"type":603,"value":19548},{"type":597,"tag":606,"props":19620,"children":19621},{},[19622],{"type":603,"value":19623},"接下来当然是要介绍具体的算法了。但是首先还是需要将问题重新描述一下。",{"type":597,"tag":598,"props":19625,"children":19627},{"id":19626},"描述问题",[19628],{"type":603,"value":19626},{"type":597,"tag":606,"props":19630,"children":19631},{},[19632],{"type":603,"value":19633},"我们需要通过一个样例模型，然后给予一个种子来生成一个更大的模型。在2d情况下，模型会被描述为一个二维矩阵，矩阵中的每个点都是一个非负整数，不同的整数代表一个瓦片的种类，0表示空瓦片。我们需要设定输出模型的大小比如一个10*10的矩阵，然后通过一个特定的种子来生成随机数，根据这个随机数去遍历所有的可能性并找到一个合适的解。",{"type":597,"tag":606,"props":19635,"children":19636},{},[19637],{"type":603,"value":19638},"所以我们的程序至少需要做下面几件事：",{"type":597,"tag":803,"props":19640,"children":19641},{},[19642,19647,19652,19657],{"type":597,"tag":807,"props":19643,"children":19644},{},[19645],{"type":603,"value":19646},"载入瓦片信息，种类编号和瓦片的图片。",{"type":597,"tag":807,"props":19648,"children":19649},{},[19650],{"type":603,"value":19651},"载入输入模型信息，即输入模型矩阵，矩阵的值为瓦片种类id，然后分析输入模型，得到约束条件矩阵。",{"type":597,"tag":807,"props":19653,"children":19654},{},[19655],{"type":603,"value":19656},"根据约束矩阵，以及随机数去搜索输出模型。",{"type":597,"tag":807,"props":19658,"children":19659},{},[19660],{"type":603,"value":19661},"输出（可视化）输出模型。",{"type":597,"tag":606,"props":19663,"children":19664},{},[19665],{"type":603,"value":19666},"显然，第三步是最为麻烦的，也是最困难的，其次是第二步，我们需要得到一个约束矩阵，然后第一和第四步都是常规操作。",{"type":597,"tag":598,"props":19668,"children":19670},{"id":19669},"获得约束矩阵",[19671],{"type":603,"value":19669},{"type":597,"tag":606,"props":19673,"children":19674},{},[19675],{"type":603,"value":19676},"约束矩阵描述了在输入模型中，相邻点的布局关系。当我们为输出模型布局时，我们可以在某一点填入一个特定的瓦片id，然后当填充这个瓦片相邻的四个瓦片时，通过查询约束矩阵，我们可以知道在当前瓦片id下，它上方的位置只能是特定的几个id。同理就可以推导出其他三个瓦片能够选择的id。",{"type":597,"tag":606,"props":19678,"children":19679},{},[19680],{"type":603,"value":19681},"所以当生成一个2d模型时，需要4个约束矩阵，分别代表x轴正向，负向，和y轴正向，负向的约束。每个约束矩阵的长度为总的瓦片id数，宽度也是总的瓦片id数，其值为bool或者是0或1，用来表示当当前点上的瓦片id是某个值时，其相邻对应位置瓦片允许的值。",{"type":597,"tag":606,"props":19683,"children":19684},{},[19685,19687,19691,19693,19697],{"type":603,"value":19686},"写个简单的例子，对于输入模型矩阵 ",{"type":597,"tag":719,"props":19688,"children":19690},{"alt":19528,"src":19689},"/images/2021-01-21-wave-collapse-function/2.svg",[],{"type":603,"value":19692}," 的正的右侧，也就是x轴正方向，可以得到如下的约束规则：0-1，1-2，2-3，2-1，1-0，0-0。整理成矩阵也就是 ",{"type":597,"tag":719,"props":19694,"children":19696},{"alt":19528,"src":19695},"/images/2021-01-21-wave-collapse-function/1.svg",[],{"type":603,"value":19698}," ，这个矩阵等于它的转置矩阵，然后我们会有4个类似这样的约束矩阵对应不同方向的邻居，我们使用当前的瓦片id去查询就可以得到相邻瓦片允许填入的瓦片id了。",{"type":597,"tag":598,"props":19700,"children":19702},{"id":19701},"搜索算法",[19703],{"type":603,"value":19701},{"type":597,"tag":606,"props":19705,"children":19706},{},[19707,19709,19714],{"type":603,"value":19708},"搜索算法部分是最为困难的部分了。我们需要保存一个记录矩阵（catalog），该矩阵与最终输出模型大小相同，比如输出模型是10",{"type":597,"tag":1733,"props":19710,"children":19711},{},[19712],{"type":603,"value":19713},"10的这个记录矩阵也是10",{"type":603,"value":19715},"10的。在这个记录矩阵中，每个元素会是一个集合，表示当前该点可以填入的瓦片id的集合，当该点可填入瓦片id集合为空集时，说明走了一条错误的路径，需要回退。然后我们的搜索算法会按照之前走过来的路径回退到上一个操作点，同时这个记录矩阵也需要回退相应的步数。",{"type":597,"tag":606,"props":19717,"children":19718},{},[19719],{"type":603,"value":19720},"对于记录矩阵的回退，需要记录一个类似数据库的ahead log的东西，来记录所有对记录矩阵的操作，当产生回退时，只需要沿着这log向前恢复就可以。",{"type":597,"tag":606,"props":19722,"children":19723},{},[19724],{"type":603,"value":19725},"对于搜索算法的前进和回退，在我参考的论文里没有提及具体的方式，经过一段时间的尝试，我建立了一颗树来记录搜索的路径，当产生回退时，树的当前节点会被标记为不可通行，便不会向这片树枝搜索了。",{"type":597,"tag":606,"props":19727,"children":19728},{},[19729],{"type":597,"tag":719,"props":19730,"children":19732},{"alt":719,"src":19731},"/images/2021-01-21-wave-collapse-function/v2-37deccf09bca15112c03e8169fc3c525_720w.jpg",[],{"type":597,"tag":606,"props":19734,"children":19735},{},[19736],{"type":603,"value":19737},"如上图所示，灰色的节点表示还没探索到，实际上还不在树里，红色的节点表示需要回退的节点。蓝色的节点表示已探索或者待探索的节点，绿色的箭头表示已经探索的路径。",{"type":597,"tag":606,"props":19739,"children":19740},{},[19741],{"type":603,"value":19742},"五边形节点表示根节点，一旦在根节点发生回退说明，搜索失败，并没有找到合适的输出模型。正方形节点表示选择点操作，当游标在正方形节点上时，等于选取该节点记录的点为当前点。圆形节点则表示，为当前点选择了一个特定的瓦片，该瓦片的种类取决于记录矩阵在该点允许的选择，然后会根据约束矩阵，更新记录矩阵，当发现更新后记录矩阵存在空集便会回退。",{"type":597,"tag":606,"props":19744,"children":19745},{},[19746],{"type":603,"value":19747},"最终会有如下的搜索过程：",{"type":597,"tag":803,"props":19749,"children":19750},{},[19751,19756,19761,19766,19771],{"type":597,"tag":807,"props":19752,"children":19753},{},[19754],{"type":603,"value":19755},"建立搜索树，找到所有的点，并将其放在根节点下边，随机选一个节点，将游标移动到该节点，设定该节点对应的点为当前节点，然后根据记录矩阵中的值，随机选择一个瓦片填入，并根据约束矩阵更新记录矩阵。",{"type":597,"tag":807,"props":19757,"children":19758},{},[19759],{"type":603,"value":19760},"找到剩余所有没有瓦片的点，将这些节点加入当前节点后面，然后将根据这些点与当前所选中的点的距离，计算一个权重，离得最近的会被最先搜索，如果没有新的节点可以选择，则生成成功。",{"type":597,"tag":807,"props":19762,"children":19763},{},[19764],{"type":603,"value":19765},"根据权重和生成的随机数以及选择一个节点，根据记录矩阵在该点的瓦片集合以及随机数为该节点选择一个瓦片，然后根据约束矩阵以及当前选择去更新记录矩阵中相邻点的记录：",{"type":597,"tag":807,"props":19767,"children":19768},{},[19769],{"type":603,"value":19770},"如果更新中发现某相邻点可选瓦片为空，则需要回退到上一个圆形节点，与此同时记录矩阵也要回退上一个圆形节点之后的操作，并将该节点标为禁止通行，并返回第2步，如果发现当前节点在根节点，则生成失败。",{"type":597,"tag":807,"props":19772,"children":19773},{},[19774],{"type":603,"value":19775},"如果不为空，则根据随机数选择一个瓦片填入，并根据约束矩阵更新记录矩阵，然后返回第2步。",{"type":597,"tag":598,"props":19777,"children":19778},{"id":19040},[19779],{"type":603,"value":19040},{"type":597,"tag":1321,"props":19781,"children":19782},{},[19783,19793,19802,19811],{"type":597,"tag":807,"props":19784,"children":19785},{},[19786],{"type":597,"tag":886,"props":19787,"children":19790},{"href":19788,"rel":19789},"https://zhuanlan.zhihu.com/p/66416593?edition=yidianzixun&yidian%5C_docid=0M2y2bvM",[890],[19791],{"type":603,"value":19792},"https://zhuanlan.zhihu.com/p/66416593?edition=yidianzixun&yidian\\_docid=0M2y2bvM",{"type":597,"tag":807,"props":19794,"children":19795},{},[19796],{"type":597,"tag":886,"props":19797,"children":19800},{"href":19798,"rel":19799},"https://zhuanlan.zhihu.com/p/65495333",[890],[19801],{"type":603,"value":19798},{"type":597,"tag":807,"props":19803,"children":19804},{},[19805],{"type":597,"tag":886,"props":19806,"children":19809},{"href":19807,"rel":19808},"https://github.com/mxgmn/WaveFunctionCollapse",[890],[19810],{"type":603,"value":19807},{"type":597,"tag":807,"props":19812,"children":19813},{},[19814],{"type":597,"tag":886,"props":19815,"children":19818},{"href":19816,"rel":19817},"https://github.com/BorisTheBrave/DeBroglie",[890],[19819],{"type":603,"value":19816},{"title":591,"searchDepth":787,"depth":787,"links":19821},[19822,19823,19824,19825,19826,19827],{"id":19492,"depth":787,"text":19495},{"id":19513,"depth":787,"text":19513},{"id":19626,"depth":787,"text":19626},{"id":19669,"depth":787,"text":19669},{"id":19701,"depth":787,"text":19701},{"id":19040,"depth":787,"text":19040},"content:game:2021-01-21-wave-collapse-function.md","game/2021-01-21-wave-collapse-function.md","2021-01-21",{"_path":147,"_dir":8033,"_draft":590,"_partial":590,"_locale":591,"title":146,"description":19832,"body":19833,"_type":791,"_id":20716,"_source":793,"_file":20717,"_extension":795,"date":20718},"柏林噪声是一个非常强大算法，经常用于程序生成随机内容，在游戏和其他像电影等多媒体领域广泛应用。算法发明者Ken Perlin也因此算法获得奥斯卡科技成果奖（靠算法拿奥斯卡也是没谁了666）。本文将剖析他于2002年发表的改进版柏林噪声算法。在游戏开发领域，柏林噪声可以用于生成波形，起伏不平的材质或者纹理。例如，它能用于程序生成地形（例如使用柏林噪声来生成我的世界（Minecraft）里的地形），火焰燃烧特效，水和云等等。柏林噪声绝大部分应用在2维，3维层面上，但某种意义上也能拓展到4维。柏林噪声在1维层面上可用于卷轴地形、模拟手绘线条等。\n如果将柏林噪声拓展到4维层面，以第4维，即w轴代表时间，就能利用柏林噪声做动画。例如，2D柏林噪声可以通过插值生成地形，而3D柏林噪声则可以模拟海平面上起伏的波浪。下面是柏林噪声在不同维度的图像以及在游戏中的应用场景。",{"type":594,"children":19834,"toc":20709},[19835,19858,19870,19875,19878,19883,19900,19911,19931,19948,19953,19961,19978,19989,20003,20011,20016,20033,20053,20058,20063,20071,20076,20080,20088,20093,20097,20105,20110,20114,20122,20127,20144,20149,20153,20161,20180,20197,20202,20214,20219,20222,20227,20240,20246,20259,20263,20271,20288,20293,20297,20305,20340,20345,20357,20362,20366,20374,20387,20393,20398,20406,20418,20422,20430,20457,20463,20483,20487,20495,20500,20504,20512,20531,20543,20549,20554,20558,20566,20569,20575,20580,20597,20602,20619,20631,20652,20664,20676,20689,20693,20701,20704],{"type":597,"tag":606,"props":19836,"children":19837},{},[19838,19840,19847,19849,19856],{"type":603,"value":19839},"柏林噪声是一个非常强大算法，经常用于程序生成随机内容，在游戏和其他像电影等多媒体领域广泛应用。算法发明者Ken Perlin也因此算法获得",{"type":597,"tag":886,"props":19841,"children":19844},{"href":19842,"rel":19843},"http://mrl.nyu.edu/~perlin/doc/oscar.html",[890],[19845],{"type":603,"value":19846},"奥斯卡科技成果奖",{"type":603,"value":19848},"（靠算法拿奥斯卡也是没谁了666）。本文将剖析他于2002年发表的",{"type":597,"tag":886,"props":19850,"children":19853},{"href":19851,"rel":19852},"http://mrl.nyu.edu/~perlin/noise/",[890],[19854],{"type":603,"value":19855},"改进版柏林噪声算法",{"type":603,"value":19857},"。在游戏开发领域，柏林噪声可以用于生成波形，起伏不平的材质或者纹理。例如，它能用于程序生成地形（例如使用柏林噪声来生成我的世界（Minecraft）里的地形），火焰燃烧特效，水和云等等。柏林噪声绝大部分应用在2维，3维层面上，但某种意义上也能拓展到4维。柏林噪声在1维层面上可用于卷轴地形、模拟手绘线条等。\n如果将柏林噪声拓展到4维层面，以第4维，即w轴代表时间，就能利用柏林噪声做动画。例如，2D柏林噪声可以通过插值生成地形，而3D柏林噪声则可以模拟海平面上起伏的波浪。下面是柏林噪声在不同维度的图像以及在游戏中的应用场景。",{"type":597,"tag":606,"props":19859,"children":19860},{},[19861],{"type":597,"tag":886,"props":19862,"children":19865},{"href":19863,"rel":19864},"https://images2015.cnblogs.com/blog/608996/201707/608996-20170721155322355-1352334868.png",[890],[19866],{"type":597,"tag":719,"props":19867,"children":19869},{"alt":719,"src":19868},"/images/2021-01-20-Perlin-map/608996-20170721155322355-1352334868.png",[],{"type":597,"tag":606,"props":19871,"children":19872},{},[19873],{"type":603,"value":19874},"正如图所示，柏林噪声算法可以用来模拟许多自然中的噪声现象。接下来让我们从数理上分析算法的实现原理。",{"type":597,"tag":3720,"props":19876,"children":19877},{},[],{"type":597,"tag":857,"props":19879,"children":19880},{"id":19513},[19881],{"type":603,"value":19882},"基本原理#",{"type":597,"tag":617,"props":19884,"children":19885},{},[19886],{"type":597,"tag":606,"props":19887,"children":19888},{},[19889,19891,19898],{"type":603,"value":19890},"注意：事先声明，本节内容大多源于",{"type":597,"tag":886,"props":19892,"children":19895},{"href":19893,"rel":19894},"http://webstaff.itn.liu.se/~stegu/TNM022-2005/perlinnoiselinks/perlin-noise-math-faq.html",[890],[19896],{"type":603,"value":19897},"this wonderful article by Matt Zucker",{"type":603,"value":19899},"，不过该篇文章内容也是建立在1980年所发明的柏林噪声算法基础上的。本文我将使用2002年发明的改进版柏林噪声算法。因此，我的算法版本跟Zucker的版本会有些不同。",{"type":597,"tag":606,"props":19901,"children":19902},{},[19903,19905],{"type":603,"value":19904},"让我们从最基本的柏林噪声函数看起：\n",{"type":597,"tag":629,"props":19906,"children":19908},{"className":19907},[],[19909],{"type":603,"value":19910},"public double perlin(double x, double y, double z);",{"type":597,"tag":606,"props":19912,"children":19913},{},[19914,19916,19922,19924,19929],{"type":603,"value":19915},"函数接收",{"type":597,"tag":629,"props":19917,"children":19919},{"className":19918},[],[19920],{"type":603,"value":19921},"x,y,z",{"type":603,"value":19923},"三个坐标分量作为输入，并返回0.0~1.0的double值作为输出。那我们应该怎么处理输入值？首先，我们取3个输入值",{"type":597,"tag":629,"props":19925,"children":19927},{"className":19926},[],[19928],{"type":603,"value":19921},{"type":603,"value":19930},"的小数点部分，就可以表示为单元空间里的一个点了。为了方便讲解，我们将问题降维到2维空间来讨论（原理是一样的），下图是该点在2维空间上的表示：",{"type":597,"tag":606,"props":19932,"children":19933},{},[19934,19943],{"type":597,"tag":886,"props":19935,"children":19938},{"href":19936,"rel":19937},"https://upload-images.jianshu.io/upload_images/1797904-bfbbc85ed4afee99.png?imageMogr2/auto-orient/strip",[890],[19939],{"type":597,"tag":719,"props":19940,"children":19942},{"alt":719,"src":19941},"/images/2021-01-20-Perlin-map/1797904-bfbbc85ed4afee99.png",[],{"type":597,"tag":1733,"props":19944,"children":19945},{},[19946],{"type":603,"value":19947},"图1：小蓝点代表输入值在单元正方形里的空间坐标，其他4个点则是单元正方形的各顶点",{"type":597,"tag":606,"props":19949,"children":19950},{},[19951],{"type":603,"value":19952},"接着，我们给4个顶点（在3维空间则是8个顶点）各自生成一个伪随机的梯度向量。梯度向量代表该顶点相对单元正方形内某点的影响是正向还是反向的（向量指向方向为正向，相反方向为反向）。而伪随机是指，对于任意组相同的输入，必定得到相同的输出。因此，虽然每个顶点生成的梯度向量看似随机，实际上并不是。这也保证了在梯度向量在生成函数不变的情况下，每个坐标的梯度向量都是确定不变的。",{"type":597,"tag":617,"props":19954,"children":19955},{},[19956],{"type":597,"tag":606,"props":19957,"children":19958},{},[19959],{"type":603,"value":19960},"举个例子来理解伪随机，比如我们从圆周率π（3.14159...）的小数部分中随机抽取某一位数字，结果看似随机，但如果抽取小数点后1位，结果必定为1；抽取小数点后2位，结果必定为4。",{"type":597,"tag":606,"props":19962,"children":19963},{},[19964,19973],{"type":597,"tag":886,"props":19965,"children":19968},{"href":19966,"rel":19967},"https://upload-images.jianshu.io/upload_images/1797904-ad4b0120e857b5d3.png?imageMogr2/auto-orient/strip",[890],[19969],{"type":597,"tag":719,"props":19970,"children":19972},{"alt":719,"src":19971},"/images/2021-01-20-Perlin-map/1797904-ad4b0120e857b5d3.png",[],{"type":597,"tag":1733,"props":19974,"children":19975},{},[19976],{"type":603,"value":19977},"图2：各顶点上的梯度向量随机选取结果",{"type":597,"tag":606,"props":19979,"children":19980},{},[19981,19983],{"type":603,"value":19982},"请注意，上图所示的梯度向量并不是完全准确的。在本文所介绍的改进版柏林噪声中，这些梯度向量并不是完全随机的，而是由12条单位正方体（3维）的中心点到各条边中点的向量组成：\n",{"type":597,"tag":629,"props":19984,"children":19986},{"className":19985},[],[19987],{"type":603,"value":19988},"(1,1,0),(-1,1,0),(1,-1,0),(-1,-1,0), (1,0,1),(-1,0,1),(1,0,-1),(-1,0,-1), (0,1,1),(0,-1,1),(0,1,-1),(0,-1,-1)",{"type":597,"tag":606,"props":19990,"children":19991},{},[19992,19994,20001],{"type":603,"value":19993},"采用这些特殊梯度向量的原因在",{"type":597,"tag":886,"props":19995,"children":19998},{"href":19996,"rel":19997},"http://mrl.nyu.edu/~perlin/paper445.pdf",[890],[19999],{"type":603,"value":20000},"Ken Perlin's SIGGRAPH 2002 paper: Improving Noise",{"type":603,"value":20002},"这篇文章里有具体讲解。",{"type":597,"tag":617,"props":20004,"children":20005},{},[20006],{"type":597,"tag":606,"props":20007,"children":20008},{},[20009],{"type":603,"value":20010},"注意：许多介绍柏林噪声算法的文章都是根据最初版柏林噪声算法来讲解的，预定义的梯度表不是本文所说的这12个向量。如图2所示的梯度向量就是最初版算法所随机出来的梯度向量，不过这两种算法的原理都是一样的。",{"type":597,"tag":606,"props":20012,"children":20013},{},[20014],{"type":603,"value":20015},"接着，我们需要求出另外4个向量（在3维空间则是8个），它们分别从各顶点指向输入点（蓝色点）。下面有个2维空间下的例子：",{"type":597,"tag":606,"props":20017,"children":20018},{},[20019,20028],{"type":597,"tag":886,"props":20020,"children":20023},{"href":20021,"rel":20022},"https://upload-images.jianshu.io/upload_images/1797904-6dde06b2b941253d.png?imageMogr2/auto-orient/strip",[890],[20024],{"type":597,"tag":719,"props":20025,"children":20027},{"alt":719,"src":20026},"/images/2021-01-20-Perlin-map/1797904-6dde06b2b941253d.png",[],{"type":597,"tag":1733,"props":20029,"children":20030},{},[20031],{"type":603,"value":20032},"图3:各个距离向量",{"type":597,"tag":606,"props":20034,"children":20035},{},[20036,20038,20045,20047],{"type":603,"value":20037},"接着，对每个顶点的梯度向量和距离向量做",{"type":597,"tag":886,"props":20039,"children":20042},{"href":20040,"rel":20041},"https://en.wikipedia.org/wiki/Dot_product",[890],[20043],{"type":603,"value":20044},"点积",{"type":603,"value":20046},"运算，我们就可以得出每个顶点的影响值：\n",{"type":597,"tag":629,"props":20048,"children":20050},{"className":20049},[],[20051],{"type":603,"value":20052},"grad.x * dist.x + grad.y * dist.y + grad.z * dist.z",{"type":597,"tag":606,"props":20054,"children":20055},{},[20056],{"type":603,"value":20057},"这正是算法所需要的值，点积运算为两向量长度之积，再乘以两向量夹角余弦：",{"type":597,"tag":606,"props":20059,"children":20060},{},[20061],{"type":603,"value":20062},"复制代码",{"type":597,"tag":621,"props":20064,"children":20066},{"code":20065},"dot(vec1,vec2) = cos(angle(vec1,vec2)) * vec1.length * vec2.length\n",[20067],{"type":597,"tag":629,"props":20068,"children":20069},{"__ignoreMap":591},[20070],{"type":603,"value":20065},{"type":597,"tag":606,"props":20072,"children":20073},{},[20074],{"type":603,"value":20075},"换句话说，如果两向量指向同一方向，点积结果为：",{"type":597,"tag":606,"props":20077,"children":20078},{},[20079],{"type":603,"value":20062},{"type":597,"tag":621,"props":20081,"children":20083},{"code":20082},"1 * vec1.length * vec2.length\n",[20084],{"type":597,"tag":629,"props":20085,"children":20086},{"__ignoreMap":591},[20087],{"type":603,"value":20082},{"type":597,"tag":606,"props":20089,"children":20090},{},[20091],{"type":603,"value":20092},"如果两向量指向相反方向，则点积结果为：",{"type":597,"tag":606,"props":20094,"children":20095},{},[20096],{"type":603,"value":20062},{"type":597,"tag":621,"props":20098,"children":20100},{"code":20099},"-1 * vec1.length * vec2.length\n",[20101],{"type":597,"tag":629,"props":20102,"children":20103},{"__ignoreMap":591},[20104],{"type":603,"value":20099},{"type":597,"tag":606,"props":20106,"children":20107},{},[20108],{"type":603,"value":20109},"如果两向量互相垂直，则点积结果为0。",{"type":597,"tag":606,"props":20111,"children":20112},{},[20113],{"type":603,"value":20062},{"type":597,"tag":621,"props":20115,"children":20117},{"code":20116},"0 * vec1.length * vec2.length\n",[20118],{"type":597,"tag":629,"props":20119,"children":20120},{"__ignoreMap":591},[20121],{"type":603,"value":20116},{"type":597,"tag":606,"props":20123,"children":20124},{},[20125],{"type":603,"value":20126},"点积也可以理解为向量a在向量b上的投影，当距离向量在梯度向量上的投影为同方向，点积结果为正数；当距离向量在梯度向量上的投影为反方向，点积结果为负数。因此，通过两向量点积，我们就知道该顶点的影响值是正还是负的。不难看出，顶点的梯度向量直接决定了这一点。下面通过一副彩色图，直观地看下各顶点的影响值：",{"type":597,"tag":606,"props":20128,"children":20129},{},[20130,20139],{"type":597,"tag":886,"props":20131,"children":20134},{"href":20132,"rel":20133},"https://upload-images.jianshu.io/upload_images/1797904-0c7ca0db2126715a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",[890],[20135],{"type":597,"tag":719,"props":20136,"children":20138},{"alt":719,"src":20137},"/images/2021-01-20-Perlin-map/1797904-0c7ca0db2126715a.png",[],{"type":597,"tag":1733,"props":20140,"children":20141},{},[20142],{"type":603,"value":20143},"图4：2D柏林噪声的影响值",{"type":597,"tag":606,"props":20145,"children":20146},{},[20147],{"type":603,"value":20148},"下一步，我们需要对4个顶点的影响值做插值，求得加权平均值（在3维空间则是8个）。算法非常简单（2维空间下的解法）：",{"type":597,"tag":606,"props":20150,"children":20151},{},[20152],{"type":603,"value":20062},{"type":597,"tag":621,"props":20154,"children":20156},{"code":20155},"// Below are 4 influence values in the arrangement:\n// [g1] | [g2]\n// -----------\n// [g3] | [g4]\nint g1, g2, g3, g4;\nint u, v;   // These coordinates are the location of the input coordinate in its unit square.  \n            // For example a value of (0.5,0.5) is in the exact center of its unit square.\n\nint x1 = lerp(g1,g2,u);\nint x2 = lerp(g3,h4,u);\n\nint average = lerp(x1,x2,v);\n",[20157],{"type":597,"tag":629,"props":20158,"children":20159},{"__ignoreMap":591},[20160],{"type":603,"value":20155},{"type":597,"tag":606,"props":20162,"children":20163},{},[20164,20166,20171,20173,20178],{"type":603,"value":20165},"至此，整个柏林噪声算法还剩下最后一块拼图了：如果直接使用上述代码，由于是采用lerp线性插值计算得出的值，虽然运行效率高，但噪声效果不好，看起来会不自然。我们需要采用一种更为平滑，非线性的插值函数：",{"type":597,"tag":1080,"props":20167,"children":20168},{},[20169],{"type":603,"value":20170},"fade函数",{"type":603,"value":20172},"，通常也被称为",{"type":597,"tag":1080,"props":20174,"children":20175},{},[20176],{"type":603,"value":20177},"ease curve",{"type":603,"value":20179},"(也作为缓动函数在游戏中广泛使用)：",{"type":597,"tag":606,"props":20181,"children":20182},{},[20183,20192],{"type":597,"tag":886,"props":20184,"children":20187},{"href":20185,"rel":20186},"https://upload-images.jianshu.io/upload_images/1797904-27f5e6997742a89a.png?imageMogr2/auto-orient/strip",[890],[20188],{"type":597,"tag":719,"props":20189,"children":20191},{"alt":719,"src":20190},"/images/2021-01-20-Perlin-map/1797904-27f5e6997742a89a.png",[],{"type":597,"tag":1733,"props":20193,"children":20194},{},[20195],{"type":603,"value":20196},"图5：ease curve",{"type":597,"tag":606,"props":20198,"children":20199},{},[20200],{"type":603,"value":20201},"ease curve的值会用来计算前面代码里的u和v，这样插值变化不再是单调的线性变化，而是这样一个过程：初始变化慢，中间变化快，结尾变化又慢下来（也就是在当数值趋近于整数时，变化变慢）。这个用于改善柏林噪声算法的fade函数可以表示为以下数学形式：",{"type":597,"tag":606,"props":20203,"children":20204},{},[20205],{"type":597,"tag":886,"props":20206,"children":20209},{"href":20207,"rel":20208},"https://upload-images.jianshu.io/upload_images/1797904-05b271d52d2bee24.gif?imageMogr2/auto-orient/strip",[890],[20210],{"type":597,"tag":719,"props":20211,"children":20213},{"alt":719,"src":20212},"/images/2021-01-20-Perlin-map/1797904-05b271d52d2bee24.gif",[],{"type":597,"tag":606,"props":20215,"children":20216},{},[20217],{"type":603,"value":20218},"基本上，这就是整个柏林噪声算法的原理了！搞清了算法的各个实现关键步骤后，现在让我们着手把代码实现出来。",{"type":597,"tag":3720,"props":20220,"children":20221},{},[],{"type":597,"tag":857,"props":20223,"children":20224},{"id":18959},[20225],{"type":603,"value":20226},"代码实现#",{"type":597,"tag":606,"props":20228,"children":20229},{},[20230,20232,20238],{"type":603,"value":20231},"在本节开始前我需要重申一遍，代码实现是C#版本。相比",{"type":597,"tag":886,"props":20233,"children":20235},{"href":19851,"rel":20234},[890],[20236],{"type":603,"value":20237},"Ken Perlin的Java版本实现",{"type":603,"value":20239},"做了小小的改动，主要是增加了代码的整洁性和可读性，支持噪声重复（瓦片重复）特性。代码完全开源，可免费使用（考虑到这毕竟不是我原创发明的算法 - Ken Perlin才是！）",{"type":597,"tag":598,"props":20241,"children":20243},{"id":20242},"准备工作",[20244],{"type":603,"value":20245},"准备工作##",{"type":597,"tag":606,"props":20247,"children":20248},{},[20249,20251,20257],{"type":603,"value":20250},"第一步，我们需要先声明一个排列表（permutation table），或者直接缩写为",{"type":597,"tag":629,"props":20252,"children":20254},{"className":20253},[],[20255],{"type":603,"value":20256},"p[]",{"type":603,"value":20258},"数组就行了。数组长度为256，分别随机、无重复地存放了0-255这些数值。为了避免缓存溢出，我们再重复填充一次数组的值，所以数组最终长度为512：",{"type":597,"tag":606,"props":20260,"children":20261},{},[20262],{"type":603,"value":20062},{"type":597,"tag":621,"props":20264,"children":20266},{"code":20265},"private static readonly int[] permutation = { 151,160,137,91,90,15,                 // Hash lookup table as defined by Ken Perlin.  This is a randomly\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,    // arranged array of all numbers from 0-255 inclusive.\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n};\n\nprivate static readonly int[] p;                                                    // Doubled permutation to avoid overflow\n\nstatic Perlin() {\n    p = new int[512];\n    for(int x=0;x\u003C512;x++) {\n        p[x] = permutation[x%256];\n    }\n}\n",[20267],{"type":597,"tag":629,"props":20268,"children":20269},{"__ignoreMap":591},[20270],{"type":603,"value":20265},{"type":597,"tag":606,"props":20272,"children":20273},{},[20274,20279,20281,20286],{"type":597,"tag":629,"props":20275,"children":20277},{"className":20276},[],[20278],{"type":603,"value":20256},{"type":603,"value":20280},"数组会在算法后续的哈希计算中使用到，用于确定一组输入最终挑选哪个梯度向量（从前面所列出的12个梯度向量中挑选）。后续代码会详细展示",{"type":597,"tag":629,"props":20282,"children":20284},{"className":20283},[],[20285],{"type":603,"value":20256},{"type":603,"value":20287},"数组的用法。",{"type":597,"tag":606,"props":20289,"children":20290},{},[20291],{"type":603,"value":20292},"接着，我们开始编写柏林噪声函数：",{"type":597,"tag":606,"props":20294,"children":20295},{},[20296],{"type":603,"value":20062},{"type":597,"tag":621,"props":20298,"children":20300},{"code":20299},"public double perlin(double x, double y, double z) {\n    if(repeat > 0) {                                    // If we have any repeat on, change the coordinates to their \"local\" repetitions\n        x = x%repeat;\n        y = y%repeat;\n        z = z%repeat;\n    }\n    \n    int xi = (int)x & 255;                              // Calculate the \"unit cube\" that the point asked will be located in\n    int yi = (int)y & 255;                              // The left bound is ( |_x_|,|_y_|,|_z_| ) and the right bound is that\n    int zi = (int)z & 255;                              // plus 1.  Next we calculate the location (from 0.0 to 1.0) in that cube.\n    double xf = x-(int)x;\n    double yf = y-(int)y;\n    double zf = z-(int)z;\n    // ...\n}\n",[20301],{"type":597,"tag":629,"props":20302,"children":20303},{"__ignoreMap":591},[20304],{"type":603,"value":20299},{"type":597,"tag":606,"props":20306,"children":20307},{},[20308,20310,20316,20318,20323,20325,20331,20333,20338],{"type":603,"value":20309},"上面的代码很直观。首先，对输入坐标使用求余运算符%，求出[0,repeat)范围内的余数。紧接着声明",{"type":597,"tag":629,"props":20311,"children":20313},{"className":20312},[],[20314],{"type":603,"value":20315},"xi, yi, zi",{"type":603,"value":20317},"三个变量。它们代表了输入坐标落在了哪个单元正方形里。我们还要限制坐标在[0,255]这个范围内，避免访问数组",{"type":597,"tag":629,"props":20319,"children":20321},{"className":20320},[],[20322],{"type":603,"value":20256},{"type":603,"value":20324},"时，出现数组越界错误。这也产生了一个副作用：柏林噪声每隔256个整数就会再次重复。但这不是太大的问题，因为算法不仅能处理整数，还能处理小数。最后，我们通过",{"type":597,"tag":629,"props":20326,"children":20328},{"className":20327},[],[20329],{"type":603,"value":20330},"xf, yf, zf",{"type":603,"value":20332},"三个变量（也就是",{"type":597,"tag":629,"props":20334,"children":20336},{"className":20335},[],[20337],{"type":603,"value":19921},{"type":603,"value":20339},"的小数部分值），确定了输入坐标在单元正方形里的空间位置（就是前面所示的小蓝点）。",{"type":597,"tag":598,"props":20341,"children":20342},{"id":20170},[20343],{"type":603,"value":20344},"Fade函数##",{"type":597,"tag":606,"props":20346,"children":20347},{},[20348,20350],{"type":603,"value":20349},"现在我们需要用代码表示前面所提到的fade函数（图5）。正如上文所提，函数的数学表示：\n",{"type":597,"tag":886,"props":20351,"children":20353},{"href":20207,"rel":20352},[890],[20354],{"type":597,"tag":719,"props":20355,"children":20356},{"alt":719,"src":20212},[],{"type":597,"tag":606,"props":20358,"children":20359},{},[20360],{"type":603,"value":20361},"代码实现如下：",{"type":597,"tag":606,"props":20363,"children":20364},{},[20365],{"type":603,"value":20062},{"type":597,"tag":621,"props":20367,"children":20369},{"code":20368},"public static double fade(double t) {\n                                                        // Fade function as defined by Ken Perlin.  This eases coordinate values\n                                                        // so that they will ease towards integral values.  This ends up smoothing\n                                                        // the final output.\n    return t * t * t * (t * (t * 6 - 15) + 10);         // 6t^5 - 15t^4 + 10t^3\n}\n\npublic double perlin(double x, double y, double z) {\n    // ...\n\n    double u = fade(xf);\n    double v = fade(yf);\n    double w = fade(zf);\n\n    // ...\n}\n",[20370],{"type":597,"tag":629,"props":20371,"children":20372},{"__ignoreMap":591},[20373],{"type":603,"value":20368},{"type":597,"tag":606,"props":20375,"children":20376},{},[20377,20379,20385],{"type":603,"value":20378},"代码所计算得出的",{"type":597,"tag":629,"props":20380,"children":20382},{"className":20381},[],[20383],{"type":603,"value":20384},"u / v / w",{"type":603,"value":20386},"变量将在后面的插值计算中使用到。",{"type":597,"tag":598,"props":20388,"children":20390},{"id":20389},"哈希函数",[20391],{"type":603,"value":20392},"哈希函数##",{"type":597,"tag":606,"props":20394,"children":20395},{},[20396],{"type":603,"value":20397},"柏林噪声哈希函数用于给每组输入计算返回一个唯一、确定值。哈希函数在维基百科的定义如下：",{"type":597,"tag":617,"props":20399,"children":20400},{},[20401],{"type":597,"tag":606,"props":20402,"children":20403},{},[20404],{"type":603,"value":20405},"哈希函数是一种从任何一种数据中创建小的数字“指纹”的方法，输入数据有任何细微的不同，都会令输出结果完全不一样",{"type":597,"tag":606,"props":20407,"children":20408},{},[20409,20411,20416],{"type":603,"value":20410},"下面代码就是柏林噪声算法所使用的哈希函数。它使用了早前我们声明的",{"type":597,"tag":629,"props":20412,"children":20414},{"className":20413},[],[20415],{"type":603,"value":20256},{"type":603,"value":20417},"数组：",{"type":597,"tag":606,"props":20419,"children":20420},{},[20421],{"type":603,"value":20062},{"type":597,"tag":621,"props":20423,"children":20425},{"code":20424},"public double perlin(double x, double y, double z) {\n    // ...\n\n    int aaa, aba, aab, abb, baa, bba, bab, bbb;\n    aaa = p[p[p[    xi ]+    yi ]+    zi ];\n    aba = p[p[p[    xi ]+inc(yi)]+    zi ];\n    aab = p[p[p[    xi ]+    yi ]+inc(zi)];\n    abb = p[p[p[    xi ]+inc(yi)]+inc(zi)];\n    baa = p[p[p[inc(xi)]+    yi ]+    zi ];\n    bba = p[p[p[inc(xi)]+inc(yi)]+    zi ];\n    bab = p[p[p[inc(xi)]+    yi ]+inc(zi)];\n    bbb = p[p[p[inc(xi)]+inc(yi)]+inc(zi)];\n\n    // ...\n}\n\npublic int inc(int num) {\n    num++;\n    if (repeat > 0) num %= repeat;\n    \n    return num;\n}\n",[20426],{"type":597,"tag":629,"props":20427,"children":20428},{"__ignoreMap":591},[20429],{"type":603,"value":20424},{"type":597,"tag":606,"props":20431,"children":20432},{},[20433,20435,20441,20443,20448,20450,20455],{"type":603,"value":20434},"代码的哈希函数，对包围着输入坐标（小蓝点）的周围8个单元正方形的索引坐标进行了哈希计算。",{"type":597,"tag":629,"props":20436,"children":20438},{"className":20437},[],[20439],{"type":603,"value":20440},"inc()",{"type":603,"value":20442},"函数用于将输入值增加1，同时保证范围在[0,repeat)内。如果不需要噪声重复，",{"type":597,"tag":629,"props":20444,"children":20446},{"className":20445},[],[20447],{"type":603,"value":20440},{"type":603,"value":20449},"函数可以简化成单纯将输入值增加1。由于哈希结果值是从",{"type":597,"tag":629,"props":20451,"children":20453},{"className":20452},[],[20454],{"type":603,"value":20256},{"type":603,"value":20456},"数组中得到的，所以哈希函数的返回值范围限定在[0,255]内。",{"type":597,"tag":598,"props":20458,"children":20460},{"id":20459},"梯度函数",[20461],{"type":603,"value":20462},"梯度函数##",{"type":597,"tag":606,"props":20464,"children":20465},{},[20466,20468,20474,20476,20481],{"type":603,"value":20467},"我时常认为Ken Perlin的最初版算法里的",{"type":597,"tag":629,"props":20469,"children":20471},{"className":20470},[],[20472],{"type":603,"value":20473},"grad()",{"type":603,"value":20475},"函数写法过于复杂，令人费解。我们只要明白",{"type":597,"tag":629,"props":20477,"children":20479},{"className":20478},[],[20480],{"type":603,"value":20473},{"type":603,"value":20482},"函数的作用在于计算随机选取的梯度向量以及顶点位置向量的点积。Ken Perlin巧妙地使用了位翻转(bit-flipping)技巧来实现：",{"type":597,"tag":606,"props":20484,"children":20485},{},[20486],{"type":603,"value":20062},{"type":597,"tag":621,"props":20488,"children":20490},{"code":20489},"public static double grad(int hash, double x, double y, double z) {\n    int h = hash & 15;                                    // Take the hashed value and take the first 4 bits of it (15 == 0b1111)\n    double u = h \u003C 8 /* 0b1000 */ ? x : y;                // If the most significant bit (MSB) of the hash is 0 then set u = x.  Otherwise y.\n    \n    double v;                                             // In Ken Perlin's original implementation this was another conditional operator (?:).  I\n                                                          // expanded it for readability.\n    \n    if(h \u003C 4 /* 0b0100 */)                                // If the first and second significant bits are 0 set v = y\n        v = y;\n    else if(h == 12 /* 0b1100 */ || h == 14 /* 0b1110*/)  // If the first and second significant bits are 1 set v = x\n        v = x;\n    else                                                  // If the first and second significant bits are not equal (0/1, 1/0) set v = z\n        v = z;\n    \n    return ((h&1) == 0 ? u : -u)+((h&2) == 0 ? v : -v); // Use the last 2 bits to decide if u and v are positive or negative.  Then return their addition.\n}\n",[20491],{"type":597,"tag":629,"props":20492,"children":20493},{"__ignoreMap":591},[20494],{"type":603,"value":20489},{"type":597,"tag":606,"props":20496,"children":20497},{},[20498],{"type":603,"value":20499},"下面代码则是以另一种令人容易理解的方式完成了这个任务（而且在很多语言版本的运行效率都优于前面一种）：",{"type":597,"tag":606,"props":20501,"children":20502},{},[20503],{"type":603,"value":20062},{"type":597,"tag":621,"props":20505,"children":20507},{"code":20506},"// Source: http://riven8192.blogspot.com/2010/08/calculate-perlinnoise-twice-as-fast.html\npublic static double grad(int hash, double x, double y, double z)\n{\n    switch(hash & 0xF)\n    {\n        case 0x0: return  x + y;\n        case 0x1: return -x + y;\n        case 0x2: return  x - y;\n        case 0x3: return -x - y;\n        case 0x4: return  x + z;\n        case 0x5: return -x + z;\n        case 0x6: return  x - z;\n        case 0x7: return -x - z;\n        case 0x8: return  y + z;\n        case 0x9: return -y + z;\n        case 0xA: return  y - z;\n        case 0xB: return -y - z;\n        case 0xC: return  y + x;\n        case 0xD: return -y + z;\n        case 0xE: return  y - x;\n        case 0xF: return -y - z;\n        default: return 0; // never happens\n    }\n}\n",[20508],{"type":597,"tag":629,"props":20509,"children":20510},{"__ignoreMap":591},[20511],{"type":603,"value":20506},{"type":597,"tag":606,"props":20513,"children":20514},{},[20515,20517,20524,20526],{"type":603,"value":20516},"以上的源码可以",{"type":597,"tag":886,"props":20518,"children":20521},{"href":20519,"rel":20520},"http://riven8192.blogspot.com/2010/08/calculate-perlinnoise-twice-as-fast.html",[890],[20522],{"type":603,"value":20523},"点击这里",{"type":603,"value":20525},"查看。无论如何，上面的两种实现并没有实质差别。他们都是从以下12个向量里随机挑选一个作为梯度向量：\n",{"type":597,"tag":629,"props":20527,"children":20529},{"className":20528},[],[20530],{"type":603,"value":19988},{"type":597,"tag":606,"props":20532,"children":20533},{},[20534,20536,20541],{"type":603,"value":20535},"随机挑选结果其实取决于前一步所计算得出的哈希值（",{"type":597,"tag":629,"props":20537,"children":20539},{"className":20538},[],[20540],{"type":603,"value":20473},{"type":603,"value":20542},"函数的第一个参数）。后面3个参数则代表由输入点指向顶点的距离向量（最终拿来与梯度向量进行点积）。",{"type":597,"tag":598,"props":20544,"children":20546},{"id":20545},"插值整合",[20547],{"type":603,"value":20548},"插值整合##",{"type":597,"tag":606,"props":20550,"children":20551},{},[20552],{"type":603,"value":20553},"经过前面的几步计算，我们得出了8个顶点的影响值，并将它们进行平滑插值，得出了最终结果：",{"type":597,"tag":606,"props":20555,"children":20556},{},[20557],{"type":603,"value":20062},{"type":597,"tag":621,"props":20559,"children":20561},{"code":20560},"public double perlin(double x, double y, double z) {\n    // ...\n\n    double x1, x2, y1, y2;\n    x1 = lerp(    grad (aaa, xf  , yf  , zf),           // The gradient function calculates the dot product between a pseudorandom\n                grad (baa, xf-1, yf  , zf),             // gradient vector and the vector from the input coordinate to the 8\n                u);                                     // surrounding points in its unit cube.\n    x2 = lerp(    grad (aba, xf  , yf-1, zf),           // This is all then lerped together as a sort of weighted average based on the faded (u,v,w)\n                grad (bba, xf-1, yf-1, zf),             // values we made earlier.\n                  u);\n    y1 = lerp(x1, x2, v);\n\n    x1 = lerp(    grad (aab, xf  , yf  , zf-1),\n                grad (bab, xf-1, yf  , zf-1),\n                u);\n    x2 = lerp(    grad (abb, xf  , yf-1, zf-1),\n                  grad (bbb, xf-1, yf-1, zf-1),\n                  u);\n    y2 = lerp (x1, x2, v);\n    \n    return (lerp (y1, y2, w)+1)/2;                      // For convenience we bind the result to 0 - 1 (theoretical min/max before is [-1, 1])\n}\n\n// Linear Interpolate\npublic static double lerp(double a, double b, double x) {\n    return a + x * (b - a);\n}\n",[20562],{"type":597,"tag":629,"props":20563,"children":20564},{"__ignoreMap":591},[20565],{"type":603,"value":20560},{"type":597,"tag":3720,"props":20567,"children":20568},{},[],{"type":597,"tag":857,"props":20570,"children":20572},{"id":20571},"利用倍频实现更自然的噪声",[20573],{"type":603,"value":20574},"利用倍频实现更自然的噪声#",{"type":597,"tag":606,"props":20576,"children":20577},{},[20578],{"type":603,"value":20579},"最后让我们再思考下，除了前面所讲的计算，还有其他办法可以令噪声结果更加自然吗？虽然柏林噪声算法一定程度上模拟了自然噪声，但仍没有完全表现出自然噪声的不规律性。举个现实例子，现实地形会有大段连绵、高耸的山地，也会有丘陵和蚀坑，更小点的有大块岩石，甚至更小的鹅卵石块，这都属于地形的一部分。那如何让柏林噪声算法模拟出这样的自然噪声特性，解决方法也很简单：我们可以使用不同的频率（frequencies）和振幅（amplitudes）参数进行多几次柏林噪声计算，然后将结果叠加在一起。频率是指采样数据的间隔，振幅是指返回值的幅度范围。",{"type":597,"tag":606,"props":20581,"children":20582},{},[20583,20592],{"type":597,"tag":886,"props":20584,"children":20587},{"href":20585,"rel":20586},"https://upload-images.jianshu.io/upload_images/1797904-6f96e55ed8d87b04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",[890],[20588],{"type":597,"tag":719,"props":20589,"children":20591},{"alt":719,"src":20590},"/images/2021-01-20-Perlin-map/1797904-6f96e55ed8d87b04.png",[],{"type":597,"tag":1733,"props":20593,"children":20594},{},[20595],{"type":603,"value":20596},"图6：不同频率和振幅参数下的柏林噪声结果",{"type":597,"tag":606,"props":20598,"children":20599},{},[20600],{"type":603,"value":20601},"将所有结果叠加在一起，我们就能得到以下结果：",{"type":597,"tag":606,"props":20603,"children":20604},{},[20605,20614],{"type":597,"tag":886,"props":20606,"children":20609},{"href":20607,"rel":20608},"https://upload-images.jianshu.io/upload_images/1797904-c69b2bf9e253defb.png?imageMogr2/auto-orient/strip",[890],[20610],{"type":597,"tag":719,"props":20611,"children":20613},{"alt":719,"src":20612},"/images/2021-01-20-Perlin-map/1797904-c69b2bf9e253defb.png",[],{"type":597,"tag":1733,"props":20615,"children":20616},{},[20617],{"type":603,"value":20618},"图7：图6所有噪声的叠加结果",{"type":597,"tag":606,"props":20620,"children":20621},{},[20622,20624,20629],{"type":603,"value":20623},"很明显，这样的噪声结果更加令人信服。上面的6组噪声被称之为噪声的不同",{"type":597,"tag":1080,"props":20625,"children":20626},{},[20627],{"type":603,"value":20628},"倍频(Octave)",{"type":603,"value":20630},"。随着倍频增大，噪声对于最终叠加噪声的影响程度变小。当然，倍频组数的增加，会线性地增加代码执行时间，在游戏运行时使用噪声算法，再好不要使用超过几组倍频（比如，当你想在60fps下模拟火焰特效时，最好不要这么干）。然而，做数据预处理时，就很适合使用多组倍频叠加来模拟更自然的噪声（比如用于提前生成游戏地形等）。",{"type":597,"tag":606,"props":20632,"children":20633},{},[20634,20636,20641,20643,20650],{"type":603,"value":20635},"那我们应该分别挑选多大的频率和振幅来进行噪声计算呢？这个可以通过",{"type":597,"tag":1080,"props":20637,"children":20638},{},[20639],{"type":603,"value":20640},"persistence",{"type":603,"value":20642},"参数确定。",{"type":597,"tag":886,"props":20644,"children":20647},{"href":20645,"rel":20646},"http://freespace.virgin.net/hugo.elias/models/m_perlin.htm",[890],[20648],{"type":603,"value":20649},"Hugo Elias",{"type":603,"value":20651},"对persistence的定义使用如下：",{"type":597,"tag":606,"props":20653,"children":20654},{},[20655],{"type":597,"tag":886,"props":20656,"children":20659},{"href":20657,"rel":20658},"https://upload-images.jianshu.io/upload_images/1797904-b7093e0ea840d56c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",[890],[20660],{"type":597,"tag":719,"props":20661,"children":20663},{"alt":719,"src":20662},"/images/2021-01-20-Perlin-map/1797904-b7093e0ea840d56c.png",[],{"type":597,"tag":606,"props":20665,"children":20666},{},[20667],{"type":597,"tag":886,"props":20668,"children":20671},{"href":20669,"rel":20670},"https://upload-images.jianshu.io/upload_images/1797904-006ffe9e12825253.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",[890],[20672],{"type":597,"tag":719,"props":20673,"children":20675},{"alt":719,"src":20674},"/images/2021-01-20-Perlin-map/1797904-006ffe9e12825253.png",[],{"type":597,"tag":606,"props":20677,"children":20678},{},[20679,20681,20687],{"type":603,"value":20680},"以上公式",{"type":597,"tag":629,"props":20682,"children":20684},{"className":20683},[],[20685],{"type":603,"value":20686},"i",{"type":603,"value":20688},"的值取决于倍频数量，代码实现也很简单：",{"type":597,"tag":606,"props":20690,"children":20691},{},[20692],{"type":603,"value":20062},{"type":597,"tag":621,"props":20694,"children":20696},{"code":20695},"public double OctavePerlin(double x, double y, double z, int octaves, double persistence) {\n    double total = 0;\n    double frequency = 1;\n    double amplitude = 1;\n    double maxValue = 0;  // Used for normalizing result to 0.0 - 1.0\n    for(int i=0;i\u003Coctaves;i++) {\n        total += perlin(x * frequency, y * frequency, z * frequency) * amplitude;\n        \n        maxValue += amplitude;\n        \n        amplitude *= persistence;\n        frequency *= 2;\n    }\n    \n    return total/maxValue;\n}\n",[20697],{"type":597,"tag":629,"props":20698,"children":20699},{"__ignoreMap":591},[20700],{"type":603,"value":20695},{"type":597,"tag":3720,"props":20702,"children":20703},{},[],{"type":597,"tag":857,"props":20705,"children":20706},{"id":4683},[20707],{"type":603,"value":20708},"UNITY",{"title":591,"searchDepth":787,"depth":787,"links":20710},[20711,20712,20713,20714,20715],{"id":20242,"depth":787,"text":20245},{"id":20170,"depth":787,"text":20344},{"id":20389,"depth":787,"text":20392},{"id":20459,"depth":787,"text":20462},{"id":20545,"depth":787,"text":20548},"content:game:2021-01-20-Perlin-map.md","game/2021-01-20-Perlin-map.md","2021-01-20",{"_path":547,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":546,"description":20720,"body":20721,"_type":791,"_id":20947,"_source":793,"_file":20948,"_extension":795,"date":20949},"A Native Collection has not been disposed, resulting in a memory leak. Enable Full StackTraces to get more details.\n启用堆栈跟踪单击 Unity 菜单中的 Jobs > Leak Detection > Full Stack Traces 以选中它。还有记得重启unity然后，控制台中的错误内容将显示内存泄漏发生在数据保留位置。A Native Collection has not been disposed, resulting in a memory leak. Alloca",{"type":594,"children":20722,"toc":20943},[20723,20731,20739,20752,20757,20765,20779,20787,20792,20812,20823,20828,20838,20854,20880,20886,20900,20909,20914,20923],{"type":597,"tag":606,"props":20724,"children":20725},{},[20726],{"type":597,"tag":719,"props":20727,"children":20730},{"alt":20728,"src":20729},"f:id:sugar_affordance:20201110091446p","/images/2020-12-20-Collection-has-not-been-disposed/20201110091446.png",[],{"type":597,"tag":621,"props":20732,"children":20734},{"code":20733},"A Native Collection has not been disposed, resulting in a memory leak. Enable Full StackTraces to get more details.\n",[20735],{"type":597,"tag":629,"props":20736,"children":20737},{"__ignoreMap":591},[20738],{"type":603,"value":20733},{"type":597,"tag":1023,"props":20740,"children":20742},{"id":20741},"启用堆栈跟踪",[20743,20750],{"type":597,"tag":886,"props":20744,"children":20747},{"href":20745,"rel":20746},"http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%C3%A5%AF%A5%C8%A5%EC%A1%BC%A5%B9",[890],[20748],{"type":603,"value":20749},"启用",{"type":603,"value":20751},"堆栈跟踪",{"type":597,"tag":606,"props":20753,"children":20754},{},[20755],{"type":603,"value":20756},"单击 Unity 菜单中的 Jobs > Leak Detection > Full Stack Traces 以选中它。还有记得重启unity",{"type":597,"tag":606,"props":20758,"children":20759},{},[20760],{"type":597,"tag":719,"props":20761,"children":20764},{"alt":20762,"src":20763},"f:id:sugar_affordance:20201110091520p","/images/2020-12-20-Collection-has-not-been-disposed/20201110091520.png",[],{"type":597,"tag":606,"props":20766,"children":20767},{},[20768,20770,20777],{"type":603,"value":20769},"然后，控制台中的错误内容将显示内存",{"type":597,"tag":886,"props":20771,"children":20774},{"href":20772,"rel":20773},"http://d.hatena.ne.jp/keyword/%A5%E1%A5%E2%A5%EA%A5%EA%A1%BC%A5%AF",[890],[20775],{"type":603,"value":20776},"泄漏",{"type":603,"value":20778},"发生在数据保留位置。",{"type":597,"tag":621,"props":20780,"children":20782},{"code":20781},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:\nUnity.Entities.BlobAssetStore:.ctor() (at Library/PackageCache/com.unity.entities@0.16.0-preview.21/Unity.Entities.Hybrid/GameObjectConversion/BlobAssetStore.cs:26)\nCreateEntitySystem:Setup(Transform) (at Assets/0_MainAssets/Scripts/ECS/System/CreateEntitySystem.cs:116)\n",[20783],{"type":597,"tag":629,"props":20784,"children":20785},{"__ignoreMap":591},[20786],{"type":603,"value":20781},{"type":597,"tag":3995,"props":20788,"children":20790},{"id":20789},"关于分配器",[20791],{"type":603,"value":20789},{"type":597,"tag":606,"props":20793,"children":20794},{},[20795,20797,20803,20805,20810],{"type":603,"value":20796},"NativeContainer（如 NativeArray）在 Dispose 中未释放内存时，会根据某些条件",{"type":597,"tag":886,"props":20798,"children":20800},{"href":20772,"rel":20799},[890],[20801],{"type":603,"value":20802},"检测",{"type":603,"value":20804},"为内存泄漏。 条件",{"type":597,"tag":1080,"props":20806,"children":20807},{},[20808],{"type":603,"value":20809},"因分配器",{"type":603,"value":20811},"的类型而异，分配器是 Allocator.TempJob，在确保本机 Array 时指定。",{"type":597,"tag":621,"props":20813,"children":20818},{"code":20814,"language":20815,"meta":591,"className":20816},"NativeArray\u003Cfloat> leakArray = new NativeArray\u003Cfloat>(4, Allocator.TempJob);\n","cs",[20817],"language-cs",[20819],{"type":597,"tag":629,"props":20820,"children":20821},{"__ignoreMap":591},[20822],{"type":603,"value":20814},{"type":597,"tag":606,"props":20824,"children":20825},{},[20826],{"type":603,"value":20827},"这是一个详细的解释。",{"type":597,"tag":606,"props":20829,"children":20830},{},[20831],{"type":597,"tag":886,"props":20832,"children":20835},{"href":20833,"rel":20834},"https://docs.unity3d.com/ja/current/Manual/JobSystemNativeContainer.html",[890],[20836],{"type":603,"value":20837},"NativeContainer - Unity 手册",{"type":597,"tag":606,"props":20839,"children":20840},{},[20841,20846,20848,20853],{"type":597,"tag":1080,"props":20842,"children":20843},{},[20844],{"type":603,"value":20845},"如果 Allocator.Temp",{"type":603,"value":20847},"在函数中没有 Dispose， 否则内存",{"type":597,"tag":886,"props":20849,"children":20851},{"href":20772,"rel":20850},[890],[20852],{"type":603,"value":20776},{"type":603,"value":9343},{"type":597,"tag":606,"props":20855,"children":20856},{},[20857,20862,20864,20870,20872,20878],{"type":597,"tag":1080,"props":20858,"children":20859},{},[20860],{"type":603,"value":20861},"确定 Allocator.TempJob",{"type":603,"value":20863},"必须在\n4 帧内释放， 否则内存",{"type":597,"tag":886,"props":20865,"children":20867},{"href":20772,"rel":20866},[890],[20868],{"type":603,"value":20869},"泄漏确定",{"type":603,"value":20871},"__Allocator.Persistent 将永久保留，",{"type":597,"tag":886,"props":20873,"children":20875},{"href":20772,"rel":20874},[890],[20876],{"type":603,"value":20877},"并且不会",{"type":603,"value":20879},"检测到内存泄漏。",{"type":597,"tag":1023,"props":20881,"children":20883},{"id":20882},"用-using-括起来确保内存安全",[20884],{"type":603,"value":20885},"用 using 括起来，确保内存安全",{"type":597,"tag":606,"props":20887,"children":20888},{},[20889,20891,20898],{"type":603,"value":20890},"知道泄漏的位置后，我们只是将变量放在 Dispose 中，但**建议在 using",{"type":597,"tag":886,"props":20892,"children":20895},{"href":20893,"rel":20894},"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%C8%A5%E1%A5%F3%A5%C8",[890],[20896],{"type":603,"value":20897},"语句",{"type":603,"value":20899},"**中括起来。",{"type":597,"tag":621,"props":20901,"children":20904},{"code":20902,"language":20815,"meta":591,"className":20903},"using (NativeArray\u003Cfloat> leakArray = new NativeArray\u003Cfloat>(4, Allocator.TempJob)) {\n\n  // 処理\n\n}\n",[20817],[20905],{"type":597,"tag":629,"props":20906,"children":20907},{"__ignoreMap":591},[20908],{"type":603,"value":20902},{"type":597,"tag":606,"props":20910,"children":20911},{},[20912],{"type":603,"value":20913},"这样，当您离开块时，将自动释放变量。\n当有多个变量时，请并排排列它们。",{"type":597,"tag":621,"props":20915,"children":20918},{"code":20916,"language":20815,"meta":591,"className":20917},"using (NativeArray\u003CArchetypeChunk> chunks = AnimationBatcherQuery.CreateArchetypeChunkArray(Allocator.TempJob))\nusing (NativeArray\u003Cfloat> leakArray = new NativeArray\u003Cfloat>(4, Allocator.TempJob)) {\n\n  // 処理\n\n}\n",[20817],[20919],{"type":597,"tag":629,"props":20920,"children":20921},{"__ignoreMap":591},[20922],{"type":603,"value":20916},{"type":597,"tag":606,"props":20924,"children":20925},{},[20926,20933,20935,20941],{"type":597,"tag":886,"props":20927,"children":20930},{"href":20928,"rel":20929},"http://d.hatena.ne.jp/keyword/C%23",[890],[20931],{"type":603,"value":20932},"从 C#",{"type":603,"value":20934},"8 开始，您可以在 Coco 中并排编写句点，但 Unity 现在",{"type":597,"tag":886,"props":20936,"children":20938},{"href":20928,"rel":20937},[890],[20939],{"type":603,"value":20940},"像 C#",{"type":603,"value":20942},"7.3 一样，将来会起作用吗？",{"title":591,"searchDepth":787,"depth":787,"links":20944},[20945,20946],{"id":20741,"depth":1530,"text":20741},{"id":20882,"depth":1530,"text":20885},"content:unity:2020-12-20-Collection-has-not-been-disposed.md","unity/2020-12-20-Collection-has-not-been-disposed.md","2020-12-20",{"_path":134,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":133,"description":20951,"body":20952,"_type":791,"_id":21119,"_source":793,"_file":21120,"_extension":795,"date":21121},"IntroductionWhen you use HTTP on your Identity Server 4 enabled website, users may not login because of the changes made by Chrome in the version 8x. This occurs when you use HTTP schema in your website. The issue is explained here https://docs.microsoft.com/en-gb/dotnet/core/compatibility/3.0-3.1#h",{"type":594,"children":20953,"toc":21111},[20954,20960,20971,20977,20983,20995,21004,21010,21029,21042,21051,21057,21083,21092,21097,21100],{"type":597,"tag":598,"props":20955,"children":20957},{"id":20956},"introduction",[20958],{"type":603,"value":20959},"Introduction",{"type":597,"tag":606,"props":20961,"children":20962},{},[20963,20965],{"type":603,"value":20964},"When you use HTTP on your Identity Server 4 enabled website, users may not login because of the changes made by Chrome in the version 8x. This occurs when you use HTTP schema in your website. The issue is explained here ",{"type":597,"tag":886,"props":20966,"children":20969},{"href":20967,"rel":20968},"https://docs.microsoft.com/en-gb/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication",[890],[20970],{"type":603,"value":20967},{"type":597,"tag":598,"props":20972,"children":20974},{"id":20973},"how-to-solve-it",[20975],{"type":603,"value":20976},"How to solve it?",{"type":597,"tag":1023,"props":20978,"children":20980},{"id":20979},"step-1",[20981],{"type":603,"value":20982},"Step-1",{"type":597,"tag":606,"props":20984,"children":20985},{},[20986,20988,20993],{"type":603,"value":20987},"Create the below extension in your *",{"type":597,"tag":1080,"props":20989,"children":20990},{},[20991],{"type":603,"value":20992},".Web",{"type":603,"value":20994}," project.",{"type":597,"tag":621,"props":20996,"children":20999},{"className":20997,"code":20998,"language":8105,"meta":591},[8107],"using System;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public static class SameSiteCookiesServiceCollectionExtensions\n    {\n        /// \u003Csummary>\n        /// -1 defines the unspecified value, which tells ASPNET Core to NOT\n        /// send the SameSite attribute. With ASPNET Core 3.1 the\n        /// \u003Cseealso cref=\"SameSiteMode\" /> enum will have a definition for\n        /// Unspecified.\n        /// \u003C/summary>\n        private const SameSiteMode Unspecified = (SameSiteMode)(-1);\n\n        /// \u003Csummary>\n        /// Configures a cookie policy to properly set the SameSite attribute\n        /// for Browsers that handle unknown values as Strict. Ensure that you\n        /// add the \u003Cseealso cref=\"Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware\" />\n        /// into the pipeline before sending any cookies!\n        /// \u003C/summary>\n        /// \u003Cremarks>\n        /// Minimum ASPNET Core Version required for this code:\n        ///   - 2.1.14\n        ///   - 2.2.8\n        ///   - 3.0.1\n        ///   - 3.1.0-preview1\n        /// Starting with version 80 of Chrome (to be released in February 2020)\n        /// cookies with NO SameSite attribute are treated as SameSite=Lax.\n        /// In order to always get the cookies send they need to be set to\n        /// SameSite=None. But since the current standard only defines Lax and\n        /// Strict as valid values there are some browsers that treat invalid\n        /// values as SameSite=Strict. We therefore need to check the browser\n        /// and either send SameSite=None or prevent the sending of SameSite=None.\n        /// Relevant links:\n        /// - https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1\n        /// - https://tools.ietf.org/html/draft-west-cookie-incrementalism-00\n        /// - https://www.chromium.org/updates/same-site\n        /// - https://devblogs.microsoft.com/aspnet/upcoming-samesite-cookie-changes-in-asp-net-and-asp-net-core/\n        /// - https://bugs.webkit.org/show_bug.cgi?id=198181\n        /// \u003C/remarks>\n        /// \u003Cparam name=\"services\">The service collection to register \u003Csee cref=\"CookiePolicyOptions\" /> into.\u003C/param>\n        /// \u003Creturns>The modified \u003Csee cref=\"IServiceCollection\" />.\u003C/returns>\n        public static IServiceCollection ConfigureNonBreakingSameSiteCookies(this IServiceCollection services)\n        {\n            services.Configure\u003CCookiePolicyOptions>(options =>\n            {\n                options.MinimumSameSitePolicy = Unspecified;\n                options.OnAppendCookie = cookieContext =>\n                CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\n                options.OnDeleteCookie = cookieContext =>\n                CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\n            });\n\n            return services;\n        }\n\n        private static void CheckSameSite(HttpContext httpContext, CookieOptions options)\n        {\n            if (options.SameSite == SameSiteMode.None)\n            {\n                var userAgent = httpContext.Request.Headers[\"User-Agent\"].ToString();\n\n                if (DisallowsSameSiteNone(userAgent))\n                {\n                    options.SameSite = Unspecified;\n                }\n            }\n        }\n\n        /// \u003Csummary>\n        /// Checks if the UserAgent is known to interpret an unknown value as Strict.\n        /// For those the \u003Csee cref=\"CookieOptions.SameSite\" /> property should be\n        /// set to \u003Csee cref=\"Unspecified\" />.\n        /// \u003C/summary>\n        /// \u003Cremarks>\n        /// This code is taken from Microsoft:\n        /// https://devblogs.microsoft.com/aspnet/upcoming-samesite-cookie-changes-in-asp-net-and-asp-net-core/\n        /// \u003C/remarks>\n        /// \u003Cparam name=\"userAgent\">The user agent string to check.\u003C/param>\n        /// \u003Creturns>Whether the specified user agent (browser) accepts SameSite=None or not.\u003C/returns>\n        private static bool DisallowsSameSiteNone(string userAgent)\n        {\n            // Cover all iOS based browsers here. This includes:\n            //   - Safari on iOS 12 for iPhone, iPod Touch, iPad\n            //   - WkWebview on iOS 12 for iPhone, iPod Touch, iPad\n            //   - Chrome on iOS 12 for iPhone, iPod Touch, iPad\n            // All of which are broken by SameSite=None, because they use the\n            // iOS networking stack.\n            // Notes from Thinktecture:\n            // Regarding https://caniuse.com/#search=samesite iOS versions lower\n            // than 12 are not supporting SameSite at all. Starting with version 13\n            // unknown values are NOT treated as strict anymore. Therefore we only\n            // need to check version 12.\n            if (userAgent.Contains(\"CPU iPhone OS 12\")\n               || userAgent.Contains(\"iPad; CPU OS 12\"))\n            {\n                return true;\n            }\n\n            // Cover Mac OS X based browsers that use the Mac OS networking stack.\n            // This includes:\n            //   - Safari on Mac OS X.\n            // This does not include:\n            //   - Chrome on Mac OS X\n            // because they do not use the Mac OS networking stack.\n            // Notes from Thinktecture:\n            // Regarding https://caniuse.com/#search=samesite MacOS X versions lower\n            // than 10.14 are not supporting SameSite at all. Starting with version\n            // 10.15 unknown values are NOT treated as strict anymore. Therefore we\n            // only need to check version 10.14.\n            if (userAgent.Contains(\"Safari\")\n               && userAgent.Contains(\"Macintosh; Intel Mac OS X 10_14\")\n               && userAgent.Contains(\"Version/\"))\n            {\n                return true;\n            }\n\n            // Cover Chrome 50-69, because some versions are broken by SameSite=None\n            // and none in this range require it.\n            // Note: this covers some pre-Chromium Edge versions,\n            // but pre-Chromium Edge does not require SameSite=None.\n            // Notes from Thinktecture:\n            // We can not validate this assumption, but we trust Microsofts\n            // evaluation. And overall not sending a SameSite value equals to the same\n            // behavior as SameSite=None for these old versions anyways.\n            if (userAgent.Contains(\"Chrome/5\") || userAgent.Contains(\"Chrome/6\"))\n            {\n                return true;\n            }\n\n            if (GetChromeVersion(userAgent) >= 80)\n            {\n                return true;\n            }\n\n            return false;\n        }\n\n        private static int GetChromeVersion(string userAgent)\n        {\n            try\n            {\n                return Convert.ToInt32(userAgent.Split(\"Chrome/\")[1].Split('.')[0]);\n            }\n            catch (Exception)\n            {\n                return 0;\n            }\n        }\n    }\n}\n",[21000],{"type":597,"tag":629,"props":21001,"children":21002},{"__ignoreMap":591},[21003],{"type":603,"value":20998},{"type":597,"tag":1023,"props":21005,"children":21007},{"id":21006},"step-2",[21008],{"type":603,"value":21009},"Step-2",{"type":597,"tag":606,"props":21011,"children":21012},{},[21013,21015,21020,21022,21028],{"type":603,"value":21014},"Assume that your project name is ",{"type":597,"tag":1733,"props":21016,"children":21017},{},[21018],{"type":603,"value":21019},"Acme.BookStore",{"type":603,"value":21021},". Then open ",{"type":597,"tag":629,"props":21023,"children":21025},{"className":21024},[],[21026],{"type":603,"value":21027},"AcmeBookStoreWebModule.cs",{"type":603,"value":16965},{"type":597,"tag":606,"props":21030,"children":21031},{},[21032,21034,21040],{"type":603,"value":21033},"Add the following line to ",{"type":597,"tag":629,"props":21035,"children":21037},{"className":21036},[],[21038],{"type":603,"value":21039},"ConfigureServices()",{"type":603,"value":21041}," method.",{"type":597,"tag":621,"props":21043,"children":21046},{"className":21044,"code":21045,"language":8105,"meta":591},[8107],"context.Services.ConfigureNonBreakingSameSiteCookies();\n",[21047],{"type":597,"tag":629,"props":21048,"children":21049},{"__ignoreMap":591},[21050],{"type":603,"value":21045},{"type":597,"tag":1023,"props":21052,"children":21054},{"id":21053},"step-3",[21055],{"type":603,"value":21056},"Step-3",{"type":597,"tag":606,"props":21058,"children":21059},{},[21060,21062,21068,21070,21075,21077],{"type":603,"value":21061},"Go to",{"type":597,"tag":629,"props":21063,"children":21065},{"className":21064},[],[21066],{"type":603,"value":21067},"OnApplicationInitialization()",{"type":603,"value":21069}," method in ",{"type":597,"tag":629,"props":21071,"children":21073},{"className":21072},[],[21074],{"type":603,"value":21027},{"type":603,"value":21076}," add ",{"type":597,"tag":629,"props":21078,"children":21080},{"className":21079},[],[21081],{"type":603,"value":21082},"app.UseCookiePolicy();",{"type":597,"tag":621,"props":21084,"children":21087},{"className":21085,"code":21086,"language":8105,"meta":591},[8107],"public override void OnApplicationInitialization(ApplicationInitializationContext context)\n{\n        var app = context.GetApplicationBuilder();\n        var env = context.GetEnvironment();\n\n        if (env.IsDevelopment())\n        {\n                app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n                app.UseErrorPage();\n                app.UseHsts();\n        }\n         // Before UseAuthentication or anything else that writes cookies.\n        app.UseCookiePolicy(); //\u003C--- added this --->\n\n    //....\n}\n",[21088],{"type":597,"tag":629,"props":21089,"children":21090},{"__ignoreMap":591},[21091],{"type":603,"value":21086},{"type":597,"tag":606,"props":21093,"children":21094},{},[21095],{"type":603,"value":21096},"It's all! You are ready to go!",{"type":597,"tag":3720,"props":21098,"children":21099},{},[],{"type":597,"tag":606,"props":21101,"children":21102},{},[21103,21105],{"type":603,"value":21104},"Referenced from ",{"type":597,"tag":886,"props":21106,"children":21109},{"href":21107,"rel":21108},"https://www.thinktecture.com/en/identity/samesite/prepare-your-identityserver/",[890],[21110],{"type":603,"value":21107},{"title":591,"searchDepth":787,"depth":787,"links":21112},[21113,21114],{"id":20956,"depth":787,"text":20959},{"id":20973,"depth":787,"text":20976,"children":21115},[21116,21117,21118],{"id":20979,"depth":1530,"text":20982},{"id":21006,"depth":1530,"text":21009},{"id":21053,"depth":1530,"text":21056},"content:dotnet:2020-12-11-chrome-login-fail.md","dotnet/2020-12-11-chrome-login-fail.md","2020-12-11",{"_path":544,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":543,"description":21123,"body":21124,"_type":791,"_id":21235,"_source":793,"_file":21236,"_extension":795,"date":21237},"三维空间的右手笛卡尔坐标如图1所示。图1在航空中，pitch, yaw, roll如图2所示。pitch是围绕X轴旋转，也叫做俯仰角，如图3所示。yaw是围绕Y轴旋转，也叫偏航角，如图4所示。roll是围绕Z轴旋转，也叫翻滚角，如图5所示。图2图3-pitch是围绕X轴旋转图4-yaw是围绕Y轴旋转图5-roll是围绕Z轴旋转绕三个轴的旋转值pitch，yaw，roll来自航空界的叫法，翻译为俯仰角，偏航角，翻滚角，非常形象。\n从英文意思出发，roll:是卷；滚动，转动；辗的意思；\nyaw是（火箭、飞机、宇宙飞船等）偏航的意思；\npitch是坠落；倾斜；投掷的意思；\n所以，roll的意思是翻滚",{"type":594,"children":21125,"toc":21233},[21126,21131,21138,21143,21148,21153,21158,21163,21170,21175,21182,21187,21194,21199,21206,21211,21216,21221,21226],{"type":597,"tag":606,"props":21127,"children":21128},{},[21129],{"type":603,"value":21130},"三维空间的右手笛卡尔坐标如图1所示。",{"type":597,"tag":606,"props":21132,"children":21133},{},[21134],{"type":597,"tag":719,"props":21135,"children":21137},{"alt":719,"src":21136},"/images/2020-11-29-pitch-yaw-roll/20140401183456562",[],{"type":597,"tag":606,"props":21139,"children":21140},{},[21141],{"type":603,"value":21142},"图1",{"type":597,"tag":606,"props":21144,"children":21145},{},[21146],{"type":603,"value":21147},"在航空中，pitch, yaw, roll如图2所示。",{"type":597,"tag":606,"props":21149,"children":21150},{},[21151],{"type":603,"value":21152},"pitch是围绕X轴旋转，也叫做俯仰角，如图3所示。",{"type":597,"tag":606,"props":21154,"children":21155},{},[21156],{"type":603,"value":21157},"yaw是围绕Y轴旋转，也叫偏航角，如图4所示。",{"type":597,"tag":606,"props":21159,"children":21160},{},[21161],{"type":603,"value":21162},"roll是围绕Z轴旋转，也叫翻滚角，如图5所示。",{"type":597,"tag":606,"props":21164,"children":21165},{},[21166],{"type":597,"tag":719,"props":21167,"children":21169},{"alt":719,"src":21168},"/images/2020-11-29-pitch-yaw-roll/20140401183507359",[],{"type":597,"tag":606,"props":21171,"children":21172},{},[21173],{"type":603,"value":21174},"图2",{"type":597,"tag":606,"props":21176,"children":21177},{},[21178],{"type":597,"tag":719,"props":21179,"children":21181},{"alt":719,"src":21180},"/images/2020-11-29-pitch-yaw-roll/20140401183518578",[],{"type":597,"tag":606,"props":21183,"children":21184},{},[21185],{"type":603,"value":21186},"图3-pitch是围绕X轴旋转",{"type":597,"tag":606,"props":21188,"children":21189},{},[21190],{"type":597,"tag":719,"props":21191,"children":21193},{"alt":719,"src":21192},"/images/2020-11-29-pitch-yaw-roll/20140401183525562",[],{"type":597,"tag":606,"props":21195,"children":21196},{},[21197],{"type":603,"value":21198},"图4-yaw是围绕Y轴旋转",{"type":597,"tag":606,"props":21200,"children":21201},{},[21202],{"type":597,"tag":719,"props":21203,"children":21205},{"alt":719,"src":21204},"/images/2020-11-29-pitch-yaw-roll/20140401183537890",[],{"type":597,"tag":606,"props":21207,"children":21208},{},[21209],{"type":603,"value":21210},"图5-roll是围绕Z轴旋转",{"type":597,"tag":606,"props":21212,"children":21213},{},[21214],{"type":603,"value":21215},"绕三个轴的旋转值pitch，yaw，roll来自航空界的叫法，翻译为俯仰角，偏航角，翻滚角，非常形象。\n从英文意思出发，roll:是卷；滚动，转动；辗的意思；\nyaw是（火箭、飞机、宇宙飞船等）偏航的意思；\npitch是坠落；倾斜；投掷的意思；\n所以，roll的意思是翻滚，就是绕着机身所在的那个轴。yaw是偏航的意思，偏航就是绕着重力方向为轴。pitch倾斜、坠落的意思（头朝地坠落）。",{"type":597,"tag":606,"props":21217,"children":21218},{},[21219],{"type":603,"value":21220},"另外值得注意的是，pitch值是不能超过90度，这里牵扯到了万向锁的知识，不再多说，网上很多讨论。",{"type":597,"tag":606,"props":21222,"children":21223},{},[21224],{"type":603,"value":21225},"下面这张图是以摄像机的角度来阐述欧拉角的，可以加深理解。",{"type":597,"tag":606,"props":21227,"children":21228},{},[21229],{"type":597,"tag":719,"props":21230,"children":21232},{"alt":719,"src":21231},"/images/2020-11-29-pitch-yaw-roll/20151125212621964",[],{"title":591,"searchDepth":787,"depth":787,"links":21234},[],"content:unity:2020-11-29-pitch-yaw-roll.md","unity/2020-11-29-pitch-yaw-roll.md","2020-11-29",{"_path":131,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":130,"description":21239,"body":21240,"_type":791,"_id":21416,"_source":793,"_file":21417,"_extension":795,"date":21418},"假如有类型 Show 的定义如下十進位表示法\n[Flags]\nenum Days\n{\n    None      = 0,  // 0000 0000\n    Sunday    = 1,  // 0000 0001\n    Monday    = 2,  // 0000 0010\n    Tuesday   = 4,  // 0000 0100\n    Wednesday = 8,  // 0000 1000\n    Thursday  = 16, // 0001 0000\n    Friday    = 32, // 0010 0000\n    Saturday  = 64  // 010",{"type":594,"children":21241,"toc":21410},[21242,21247,21255,21278,21284,21289,21300,21308,21314,21323,21331,21337,21346,21354,21362,21368,21377,21381,21389,21402],{"type":597,"tag":606,"props":21243,"children":21244},{},[21245],{"type":603,"value":21246},"假如有类型 Show 的定义如下",{"type":597,"tag":621,"props":21248,"children":21250},{"code":21249},"十進位表示法\n[Flags]\nenum Days\n{\n    None      = 0,  // 0000 0000\n    Sunday    = 1,  // 0000 0001\n    Monday    = 2,  // 0000 0010\n    Tuesday   = 4,  // 0000 0100\n    Wednesday = 8,  // 0000 1000\n    Thursday  = 16, // 0001 0000\n    Friday    = 32, // 0010 0000\n    Saturday  = 64  // 0100 0000\n}\n位元移位表示法\n[Flags]\nenum Days\n{\n    None      = 0,      // 0000 0000\n    Sunday    = 1 \u003C\u003C 0, // 0000 0001\n    Monday    = 1 \u003C\u003C 1, // 0000 0010\n    Tuesday   = 1 \u003C\u003C 2, // 0000 0100\n    Wednesday = 1 \u003C\u003C 3, // 0000 1000\n    Thursday  = 1 \u003C\u003C 4, // 0001 0000\n    Friday    = 1 \u003C\u003C 5, // 0010 0000\n    Saturday  = 1 \u003C\u003C 6  // 0100 0000\n}\n二進位表示法 (C# 7.2新增)\n[Flags]\nenum Days\n{\n    None      = 0b_0000_0000, // 0000 0000\n    Sunday    = 0b_0000_0001, // 0000 0001\n    Monday    = 0b_0000_0010, // 0000 0010\n    Tuesday   = 0b_0000_0100, // 0000 0100\n    Wednesday = 0b_0000_1000, // 0000 1000\n    Thursday  = 0b_0001_0000, // 0001 0000\n    Friday    = 0b_0010_0000, // 0010 0000\n    Saturday  = 0b_0100_0000  // 0100 0000\n}\n \n十六進位表示法\n[Flags]\nenum RenderType\n{\n   None = 0x0,\n   DataUri = 0x1,\n   GZip = 0x2,\n   ContentPage = 0x4,\n   ViewPage = 0x8,\n   HomePage = 0x10 // Next two values could be 0x20, 0x40\n}\n",[21251],{"type":597,"tag":629,"props":21252,"children":21253},{"__ignoreMap":591},[21254],{"type":603,"value":21249},{"type":597,"tag":1321,"props":21256,"children":21257},{},[21258,21263,21268,21273],{"type":597,"tag":807,"props":21259,"children":21260},{},[21261],{"type":603,"value":21262},"& 按位与",{"type":597,"tag":807,"props":21264,"children":21265},{},[21266],{"type":603,"value":21267},"| 按位或",{"type":597,"tag":807,"props":21269,"children":21270},{},[21271],{"type":603,"value":21272},"^ 按位异或",{"type":597,"tag":807,"props":21274,"children":21275},{},[21276],{"type":603,"value":21277},"~取反",{"type":597,"tag":598,"props":21279,"children":21281},{"id":21280},"并集-添加",[21282],{"type":603,"value":21283},"并集 (添加)",{"type":597,"tag":606,"props":21285,"children":21286},{},[21287],{"type":603,"value":21288},"a|b: 并集(所有的和,相同部分只算一次);",{"type":597,"tag":621,"props":21290,"children":21295},{"code":21291,"language":21292,"meta":591,"className":21293},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A | B\n{'英语', '物理', '语文', '政治', '化学', '数学', '生物', '地理', '历史'}\n","swift",[21294],"language-swift",[21296],{"type":597,"tag":629,"props":21297,"children":21298},{"__ignoreMap":591},[21299],{"type":603,"value":21291},{"type":597,"tag":606,"props":21301,"children":21302},{},[21303],{"type":597,"tag":719,"props":21304,"children":21307},{"alt":21305,"src":21306},"image-20210404182659146","/images/2020-11-24-flags/image-20210404182659146.png",[],{"type":597,"tag":598,"props":21309,"children":21311},{"id":21310},"差集-去除",[21312],{"type":603,"value":21313},"差集 (去除)",{"type":597,"tag":621,"props":21315,"children":21318},{"code":21316,"language":21292,"meta":591,"className":21317},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & (~B)\n{'物理', '生物', '化学'}\n>>> B & (~A)\n{'政治', '历史', '地理'}\n  \n",[21294],[21319],{"type":597,"tag":629,"props":21320,"children":21321},{"__ignoreMap":591},[21322],{"type":603,"value":21316},{"type":597,"tag":606,"props":21324,"children":21325},{},[21326],{"type":597,"tag":719,"props":21327,"children":21330},{"alt":21328,"src":21329},"image-20210404182718872","/images/2020-11-24-flags/image-20210404182718872.png",[],{"type":597,"tag":598,"props":21332,"children":21334},{"id":21333},"补集对称差集",[21335],{"type":603,"value":21336},"补集(对称差集)",{"type":597,"tag":621,"props":21338,"children":21341},{"code":21339,"language":21292,"meta":591,"className":21340},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A ^ B\n{'物理', '生物', '化学', '政治', '历史', '地理'}\n",[21294],[21342],{"type":597,"tag":629,"props":21343,"children":21344},{"__ignoreMap":591},[21345],{"type":603,"value":21339},{"type":597,"tag":606,"props":21347,"children":21348},{},[21349],{"type":597,"tag":719,"props":21350,"children":21353},{"alt":21351,"src":21352},"image-20210404182742701","/images/2020-11-24-flags/image-20210404182742701.png",[],{"type":597,"tag":606,"props":21355,"children":21356},{},[21357],{"type":597,"tag":719,"props":21358,"children":21361},{"alt":21359,"src":21360},"image-20210404182802570","/images/2020-11-24-flags/image-20210404182802570.png",[],{"type":597,"tag":598,"props":21363,"children":21365},{"id":21364},"交集-检查",[21366],{"type":603,"value":21367},"交集  (检查)",{"type":597,"tag":621,"props":21369,"children":21372},{"code":21370,"language":21292,"meta":591,"className":21371},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & B\n{'英语', '语文', '数学'}\n",[21294],[21373],{"type":597,"tag":629,"props":21374,"children":21375},{"__ignoreMap":591},[21376],{"type":603,"value":21370},{"type":597,"tag":606,"props":21378,"children":21379},{},[21380],{"type":603,"value":3320},{"type":597,"tag":621,"props":21382,"children":21384},{"code":21383},"  Show show = Show.A | Show.B;\n  show.HasFlag(Show.A);\n",[21385],{"type":597,"tag":629,"props":21386,"children":21387},{"__ignoreMap":591},[21388],{"type":603,"value":21383},{"type":597,"tag":606,"props":21390,"children":21391},{},[21392,21394,21400],{"type":603,"value":21393},"从性能上看通过 ",{"type":597,"tag":629,"props":21395,"children":21397},{"className":21396},[],[21398],{"type":603,"value":21399},"&",{"type":603,"value":21401}," 的性能会比 HasFlag 高，但是从可读性上 HasFlag 更友好，如果你的代码没有性能问题推荐使用 HasFlag 方法",{"type":597,"tag":606,"props":21403,"children":21404},{},[21405],{"type":597,"tag":719,"props":21406,"children":21409},{"alt":21407,"src":21408},"image-20210404182612251","/images/2020-11-24-flags/image-20210404182612251.png",[],{"title":591,"searchDepth":787,"depth":787,"links":21411},[21412,21413,21414,21415],{"id":21280,"depth":787,"text":21283},{"id":21310,"depth":787,"text":21313},{"id":21333,"depth":787,"text":21336},{"id":21364,"depth":787,"text":21367},"content:dotnet:2020-11-24-flags.md","dotnet/2020-11-24-flags.md","2020-11-24",{"_path":541,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":540,"description":21420,"body":21421,"_type":791,"_id":21977,"_source":793,"_file":21978,"_extension":795,"date":21979},"NetworkStreamReceiveSystem客户端连接服务端  ,服务端创建NetworkIdComponent客户端添加NetworkStreamInGame组件,并通过rpc 发送GoInGameRequest请求服务端接收到请求后,实例化player为player添加GhostOwnerComponent初始化player添加一些其他不需要同步的组件为connection添加NetworkStreamInGame组件为connection设置CommandTargetComponent客户端根据player独有的组件特性,查找已经被ghost同步过来的实体比对NetworkIdC",{"type":594,"children":21422,"toc":21970},[21423,21429,21516,21521,21526,21531,21536,21541,21546,21551,21559,21564,21569,21574,21579,21584,21589,21594,21599,21604,21609,21614,21619,21624,21629,21634,21639,21644,21649,21654,21659,21664,21669,21674,21679,21687,21692,21700,21705,21713,21718,21726,21731,21736,21741,21746,21752,21757,21762,21770,21775,21783,21788,21796,21801,21806,21814,21819,21827,21832,21838,21843,21851,21856,21861,21866,21874,21879,21884,21890,21895,21900,21905,21911,21916,21924,21929,21937,21942,21947,21952,21957,21962],{"type":597,"tag":857,"props":21424,"children":21426},{"id":21425},"networkstreamreceivesystem",[21427],{"type":603,"value":21428},"NetworkStreamReceiveSystem",{"type":597,"tag":803,"props":21430,"children":21431},{},[21432,21437,21442,21470,21493,21498],{"type":597,"tag":807,"props":21433,"children":21434},{},[21435],{"type":603,"value":21436},"客户端连接服务端  ,服务端创建NetworkIdComponent",{"type":597,"tag":807,"props":21438,"children":21439},{},[21440],{"type":603,"value":21441},"客户端添加NetworkStreamInGame组件,并通过rpc 发送GoInGameRequest请求",{"type":597,"tag":807,"props":21443,"children":21444},{},[21445,21447],{"type":603,"value":21446},"服务端接收到请求后,实例化player",{"type":597,"tag":1321,"props":21448,"children":21449},{},[21450,21455,21460,21465],{"type":597,"tag":807,"props":21451,"children":21452},{},[21453],{"type":603,"value":21454},"为player添加GhostOwnerComponent",{"type":597,"tag":807,"props":21456,"children":21457},{},[21458],{"type":603,"value":21459},"初始化player添加一些其他不需要同步的组件",{"type":597,"tag":807,"props":21461,"children":21462},{},[21463],{"type":603,"value":21464},"为connection添加NetworkStreamInGame组件",{"type":597,"tag":807,"props":21466,"children":21467},{},[21468],{"type":603,"value":21469},"为connection设置CommandTargetComponent",{"type":597,"tag":807,"props":21471,"children":21472},{},[21473,21475],{"type":603,"value":21474},"客户端根据player独有的组件特性,查找已经被ghost同步过来的实体",{"type":597,"tag":1321,"props":21476,"children":21477},{},[21478,21483,21488],{"type":597,"tag":807,"props":21479,"children":21480},{},[21481],{"type":603,"value":21482},"比对NetworkIdComponent和GhostOwnerComponent的id,判断是否是localPlayer",{"type":597,"tag":807,"props":21484,"children":21485},{},[21486],{"type":603,"value":21487},"对localplayer进行初始化",{"type":597,"tag":807,"props":21489,"children":21490},{},[21491],{"type":603,"value":21492},"为connection设置CommandTargetComponent为localplayer",{"type":597,"tag":807,"props":21494,"children":21495},{},[21496],{"type":603,"value":21497},"客户端使用CommandTargetComponent的targetEntity进行command发送",{"type":597,"tag":807,"props":21499,"children":21500},{},[21501,21503],{"type":603,"value":21502},"客户端和服务端对传送的command同时使用PredictedGhostComponent进行预测????",{"type":597,"tag":1321,"props":21504,"children":21505},{},[21506],{"type":597,"tag":807,"props":21507,"children":21508},{},[21509,21511,21514],{"type":603,"value":21510},"预测不是发生在客户端的吗???貌似netcode服务端也做了预测",{"type":597,"tag":1595,"props":21512,"children":21513},{},[],{"type":603,"value":21515},"在服务器上，预测循环始终仅运行一次，并且不会更新TimeData结构，因为它已经正确。它仍然设置GhostPredictionSystemGroup.PredictingTick以确保可以在客户端和服务器上运行完全相同的代码。",{"type":597,"tag":606,"props":21517,"children":21518},{},[21519],{"type":603,"value":21520},"插值 是针对其他玩家的本地显示...预测是针对自己操作的角色,最后从服务器校正",{"type":597,"tag":606,"props":21522,"children":21523},{},[21524],{"type":603,"value":21525},"延迟补偿是服务器在做的一件事情..",{"type":597,"tag":606,"props":21527,"children":21528},{},[21529],{"type":603,"value":21530},"GhostReceiveSystem  接收快照",{"type":597,"tag":606,"props":21532,"children":21533},{},[21534],{"type":603,"value":21535},"GhostUpdateSystem  应用快照     设置了predictionStartTick和AppliedTick",{"type":597,"tag":606,"props":21537,"children":21538},{},[21539],{"type":603,"value":21540},"GhostPredictionSystemGroup   设置了 PredictingTick ,服务端永远为ServerSimulationSystemGroup.servertick",{"type":597,"tag":606,"props":21542,"children":21543},{},[21544],{"type":603,"value":21545},"=======================================================================",{"type":597,"tag":606,"props":21547,"children":21548},{},[21549],{"type":603,"value":21550},"客户端的servertick在不同的两帧之间可能是相同的",{"type":597,"tag":606,"props":21552,"children":21553},{},[21554],{"type":597,"tag":719,"props":21555,"children":21558},{"alt":21556,"src":21557},"image-20201206011918426","/images/2020-11-18-netcode-sourcecode/image-20201206011918426.png",[],{"type":597,"tag":606,"props":21560,"children":21561},{},[21562],{"type":603,"value":21563},"servertick    235",{"type":597,"tag":606,"props":21565,"children":21566},{},[21567],{"type":603,"value":21568},"PredictingTick    230",{"type":597,"tag":606,"props":21570,"children":21571},{},[21572],{"type":603,"value":21573},"PredictingTick    231",{"type":597,"tag":606,"props":21575,"children":21576},{},[21577],{"type":603,"value":21578},"PredictingTick    232",{"type":597,"tag":606,"props":21580,"children":21581},{},[21582],{"type":603,"value":21583},"PredictingTick    233",{"type":597,"tag":606,"props":21585,"children":21586},{},[21587],{"type":603,"value":21588},"PredictingTick    234",{"type":597,"tag":606,"props":21590,"children":21591},{},[21592],{"type":603,"value":21593},"PredictingTick    235",{"type":597,"tag":606,"props":21595,"children":21596},{},[21597],{"type":603,"value":21598},"servertick    240  因为跑预测所以这里可能过了好几帧servertick这里不是236",{"type":597,"tag":606,"props":21600,"children":21601},{},[21602],{"type":603,"value":21603},"PredictingTick    240  //自己先跑一下",{"type":597,"tag":606,"props":21605,"children":21606},{},[21607],{"type":603,"value":21608},"servertick    240 //又可能tick增长时间还没有过",{"type":597,"tag":606,"props":21610,"children":21611},{},[21612],{"type":603,"value":21613},"PredictingTick    238",{"type":597,"tag":606,"props":21615,"children":21616},{},[21617],{"type":603,"value":21618},"PredictingTick    239",{"type":597,"tag":606,"props":21620,"children":21621},{},[21622],{"type":603,"value":21623},"PredictingTick    240",{"type":597,"tag":606,"props":21625,"children":21626},{},[21627],{"type":603,"value":21628},"实际上没多大复杂的事情..客户端发送命令给服务端,服务端处理后将tick和数据同步给客户端...",{"type":597,"tag":606,"props":21630,"children":21631},{},[21632],{"type":603,"value":21633},"客户端拿到数据..该预测的预测..该插值的插值...",{"type":597,"tag":606,"props":21635,"children":21636},{},[21637],{"type":603,"value":21638},"然后还需要处理这帧的自己的命令...",{"type":597,"tag":606,"props":21640,"children":21641},{},[21642],{"type":603,"value":21643},"客户端:",{"type":597,"tag":606,"props":21645,"children":21646},{},[21647],{"type":603,"value":21648},"Ghost数据(服务端传送的同步)--预测---输入命令--发送命令给服务端---处理命令----覆盖同步数据(一般是覆盖自己的)--应用数据(位移,动画等)",{"type":597,"tag":606,"props":21650,"children":21651},{},[21652],{"type":603,"value":21653},"服务端:",{"type":597,"tag":606,"props":21655,"children":21656},{},[21657],{"type":603,"value":21658},"服务端接收到命令---处理命令----写入Ghost数据(同步)--应用数据(位移,动画等)",{"type":597,"tag":598,"props":21660,"children":21662},{"id":21661},"预测",[21663],{"type":603,"value":21661},{"type":597,"tag":606,"props":21665,"children":21666},{},[21667],{"type":603,"value":21668},"输入的时候, 添加发送给服务器时的servertick ,",{"type":597,"tag":606,"props":21670,"children":21671},{},[21672],{"type":603,"value":21673},"注意这个servertick和ServerSimulationSystemGroup.servertick没有多大关系.",{"type":597,"tag":606,"props":21675,"children":21676},{},[21677],{"type":603,"value":21678},"m_ClientSimulationSystemGroup.ServerTick标记发送给服务器的命令所在的tick,以及用来接收服务器快照后(快照会包含该tick),丢弃执行过的命令,以及预测未执行的命令使用",{"type":597,"tag":621,"props":21680,"children":21682},{"code":21681},"        var input = default(CubeInput);\n        input.Tick = m_ClientSimulationSystemGroup.ServerTick;\n        if (Input.GetKey(\"a\"))\n            input.horizontal -= 1;\n        if (Input.GetKey(\"d\"))\n            input.horizontal += 1;\n        if (Input.GetKey(\"s\"))\n            input.vertical -= 1;\n        if (Input.GetKey(\"w\"))\n            input.vertical += 1;\n        var inputBuffer = EntityManager.GetBuffer\u003CCubeInput>(localInput);\n        inputBuffer.AddCommandData(input);\n",[21683],{"type":597,"tag":629,"props":21684,"children":21685},{"__ignoreMap":591},[21686],{"type":603,"value":21681},{"type":597,"tag":606,"props":21688,"children":21689},{},[21690],{"type":603,"value":21691},"客户端使用服务端的快照时,将更新PredictedGhostComponent,可以看到他有两个tick,一个是应用tick,一个是预测开始的tick",{"type":597,"tag":621,"props":21693,"children":21695},{"code":21694},"    public struct PredictedGhostComponent : IComponentData\n    {\n        public uint AppliedTick;\n        public uint PredictionStartTick;\n    }\n",[21696],{"type":597,"tag":629,"props":21697,"children":21698},{"__ignoreMap":591},[21699],{"type":603,"value":21694},{"type":597,"tag":606,"props":21701,"children":21702},{},[21703],{"type":603,"value":21704},"服务端PredictedGhostComponent其中AppliedTick和PredictionStartTick永远为0",{"type":597,"tag":621,"props":21706,"children":21708},{"code":21707},"[UpdateInGroup(typeof(GhostPredictionSystemGroup))]\npublic class MoveCubeSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        var group = World.GetExistingSystem\u003CGhostPredictionSystemGroup>();\n        var tick = group.PredictingTick;\n        var deltaTime = Time.DeltaTime;\n        Entities.ForEach((DynamicBuffer\u003CCubeInput> inputBuffer, ref Translation trans, ref PredictedGhostComponent prediction) =>\n        {\n            if (!GhostPredictionSystemGroup.ShouldPredict(tick, prediction))\n                return;\n            CubeInput input;\n            inputBuffer.GetDataAtTick(tick, out input);\n            if (input.horizontal > 0)\n                trans.Value.x += deltaTime;\n            if (input.horizontal \u003C 0)\n                trans.Value.x -= deltaTime;\n            if (input.vertical > 0)\n                trans.Value.z += deltaTime;\n            if (input.vertical \u003C 0)\n                trans.Value.z -= deltaTime;\n        });\n    }\n}\n",[21709],{"type":597,"tag":629,"props":21710,"children":21711},{"__ignoreMap":591},[21712],{"type":603,"value":21707},{"type":597,"tag":606,"props":21714,"children":21715},{},[21716],{"type":603,"value":21717},"让我们看下GhostPredictionSystemGroup的源代码:",{"type":597,"tag":621,"props":21719,"children":21721},{"code":21720},"   protected override void OnUpdate()\n        {\n            // If client, go from oldest applied predicted tick to target tick, apply. Allow filtering on latest received tick somehow\n            if (isServer)\n            {\n                // If server, apply once\n                var simulationSystemGroup = World.GetExistingSystem\u003CServerSimulationSystemGroup>();\n                PredictingTick = simulationSystemGroup.ServerTick;\n                IsFinalPredictionTick = true;\n                base.OnUpdate();\n            }\n            else\n            {\n                if (predictedTickWriters.Length > 1)\n                {\n                    predictedTickWriters[0] = JobHandle.CombineDependencies(predictedTickWriters);\n                    predictedTickWriters.ResizeUninitialized(1);\n                }\n\n                if (predictedTickWriters.Length > 0)\n                    predictedTickWriters[0].Complete();\n                predictedTickWriters.Clear();\n                uint oldestAppliedTick = 0;\n                for (int i = 0; i \u003C OldestPredictedTick.Length; ++i)\n                {\n                    if (OldestPredictedTick[i] != 0)\n                    {\n                        if (oldestAppliedTick == 0 ||\n                            SequenceHelpers.IsNewer(oldestAppliedTick, OldestPredictedTick[i]))\n                            oldestAppliedTick = OldestPredictedTick[i];\n                        OldestPredictedTick[i] = 0;\n                    }\n                }\n\n                var simulationSystemGroup = World.GetExistingSystem\u003CClientSimulationSystemGroup>();\n                var serverTick = simulationSystemGroup.ServerTick;\n                var targetTick = serverTick;\n\n                if (oldestAppliedTick == 0 ||\n                    !SequenceHelpers.IsNewer(targetTick, oldestAppliedTick))\n                    //oldestAppliedTick = targetTick - 1;\n                    return; // Nothing rolled back - nothing to predict\n                // Do not try to predict more frames than we can have input for\n                if (targetTick - oldestAppliedTick > CommandDataUtility.k_CommandDataMaxSize)\n                    oldestAppliedTick = targetTick - CommandDataUtility.k_CommandDataMaxSize;\n\n                var previousTime = Time;\n                var elapsedTime = previousTime.ElapsedTime;\n                if (simulationSystemGroup.ServerTickFraction \u003C 1)\n                {\n                    --targetTick;\n                    elapsedTime -= simulationSystemGroup.ServerTickDeltaTime * simulationSystemGroup.ServerTickFraction;\n                }\n\n                for (uint i = oldestAppliedTick + 1; i != targetTick+1; ++i)\n                {\n                    uint tickAge = targetTick - i;\n                    World.SetTime(new TimeData(elapsedTime - simulationSystemGroup.ServerTickDeltaTime*tickAge, simulationSystemGroup.ServerTickDeltaTime));\n                    PredictingTick = i;\n                    IsFinalPredictionTick = (i == serverTick);\n                    base.OnUpdate();\n                }\n\n                if (simulationSystemGroup.ServerTickFraction \u003C 1)\n                {\n                    PredictingTick = targetTick + 1;\n                    IsFinalPredictionTick = true;\n                    World.SetTime(new TimeData(previousTime.ElapsedTime, simulationSystemGroup.ServerTickDeltaTime *\n                                                                        simulationSystemGroup.ServerTickFraction));\n                    base.OnUpdate();\n                }\n                World.SetTime(previousTime);\n            }\n        }\n",[21722],{"type":597,"tag":629,"props":21723,"children":21724},{"__ignoreMap":591},[21725],{"type":603,"value":21720},{"type":597,"tag":606,"props":21727,"children":21728},{},[21729],{"type":603,"value":21730},"可以看到从开始值不断的改变PredictingTick进行预测,然后执行了base.OnUpdate()",{"type":597,"tag":857,"props":21732,"children":21734},{"id":21733},"插值",[21735],{"type":603,"value":21733},{"type":597,"tag":606,"props":21737,"children":21738},{},[21739],{"type":603,"value":21740},"插值就是将网络玩家显示在过去的某个时刻",{"type":597,"tag":606,"props":21742,"children":21743},{},[21744],{"type":603,"value":21745},"假设你在t=1000收到位置信息，你已经在t=900收到了一次位置信息，所以你知道玩家在t=900和t=1000的位置，所以在t=1000到t=1100之间，你只要显示玩家t=900到t=1000的位置。这种方法，你所显示的都是玩家的真实数据，只是有100ms的延迟。",{"type":597,"tag":1023,"props":21747,"children":21749},{"id":21748},"translation和rotation的转换",[21750],{"type":603,"value":21751},"Translation和Rotation的转换",{"type":597,"tag":606,"props":21753,"children":21754},{},[21755],{"type":603,"value":21756},"Unity.NetCode.Editor.GhostAuthoringComponentEditor",{"type":597,"tag":606,"props":21758,"children":21759},{},[21760],{"type":603,"value":21761},"中添加了Translation和Rotation的转换,只有被转换的才会被传输..如果不想转换可以在code gen window中勾掉Unity.Transforms..auto compile也勾掉",{"type":597,"tag":621,"props":21763,"children":21765},{"code":21764},"    public static void InitDefaultOverrides()\n        {\n            GhostDefaultOverrides = new Dictionary\u003Cstring, GhostComponent>();\n            AssembliesDefaultOverrides = new HashSet\u003Cstring>(new []{\n                \"Unity.NetCode\",\n                \"Unity.Transforms\",\n            });\n\n            var comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Translation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 100, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n            comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Rotation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 1000, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n        }\n",[21766],{"type":597,"tag":629,"props":21767,"children":21768},{"__ignoreMap":591},[21769],{"type":603,"value":21764},{"type":597,"tag":606,"props":21771,"children":21772},{},[21773],{"type":603,"value":21774},"我们可以看到这里使用了GhostFiled并且将其设置为Interpolate..我们在看下他生成的code",{"type":597,"tag":621,"props":21776,"children":21778},{"code":21777},"        [BurstCompile]\n        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]\n        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)\n        {\n            for (int i = 0; i \u003C count; ++i)\n            {\n                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast\u003CSnapshotData.DataAtTick>(snapshotData, snapshotStride*i);\n                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast\u003CSnapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);\n                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast\u003CSnapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);\n                float snapshotInterpolationFactor = snapshotInterpolationData.InterpolationFactor;\n                ref var component = ref GhostComponentSerializer.TypeCast\u003CUnity.Transforms.Translation>(componentData, componentStride*i);\n                var deserializerState = GhostComponentSerializer.TypeCast\u003CGhostDeserializerState>(stateData, 0);\n                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;\n                component.Value = math.lerp(\n                    new float3(snapshotBefore.Value_x * 0.01f, snapshotBefore.Value_y * 0.01f, snapshotBefore.Value_z * 0.01f),\n                    new float3(snapshotAfter.Value_x * 0.01f, snapshotAfter.Value_y * 0.01f, snapshotAfter.Value_z * 0.01f),\n                    snapshotInterpolationFactor);\n            }\n        }\n",[21779],{"type":597,"tag":629,"props":21780,"children":21781},{"__ignoreMap":591},[21782],{"type":603,"value":21777},{"type":597,"tag":606,"props":21784,"children":21785},{},[21786],{"type":603,"value":21787},"我们看到在读取快照的时候使用了snapshotInterpolationFactor进行插值,SnapshotData类中",{"type":597,"tag":621,"props":21789,"children":21791},{"code":21790},"\n  public unsafe bool GetDataAtTick(uint targetTick, float targetTickFraction, in DynamicBuffer\u003CSnapshotDataBuffer> buffer, out DataAtTick data)\n        {\n            data = default;\n            if (buffer.Length == 0)\n                return false;\n            var numBuffers = buffer.Length / SnapshotSize;\n            int beforeIdx = 0;\n            uint beforeTick = 0;\n            int afterIdx = 0;\n            uint afterTick = 0;\n            // If last tick is fractional before should not include the tick we are targeting, it should instead be included in after\n            if (targetTickFraction \u003C 1)\n                --targetTick;\n            byte* snapshotData;\n            // Loop from latest available to oldest available snapshot\n            for (int slot = 0; slot \u003C numBuffers; ++slot)\n            {\n                var curIndex = (LatestIndex + GhostSystemConstants.SnapshotHistorySize - slot) % GhostSystemConstants.SnapshotHistorySize;\n                snapshotData = (byte*)buffer.GetUnsafePtr() + curIndex * SnapshotSize;\n                uint tick = *(uint*)snapshotData;\n                if (tick == 0)\n                    continue;\n                if (SequenceHelpers.IsNewer(tick, targetTick))\n                {\n                    afterTick = tick;\n                    afterIdx = curIndex;\n                }\n                else\n                {\n                    beforeTick = tick;\n                    beforeIdx = curIndex;\n                    break;\n                }\n            }\n\n            if (beforeTick == 0)\n            {\n                return false;\n            }\n\n            data.SnapshotBefore = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + beforeIdx * SnapshotSize);\n            data.Tick = beforeTick;\n            if (afterTick == 0)\n            {\n                data.SnapshotAfter = data.SnapshotBefore;\n                data.InterpolationFactor = 0;\n            }\n            else\n            {\n                data.SnapshotAfter = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + afterIdx * SnapshotSize);\n                data.InterpolationFactor = (float) (targetTick - beforeTick) / (float) (afterTick - beforeTick);\n                if (targetTickFraction \u003C 1)\n                    data.InterpolationFactor += targetTickFraction / (float) (afterTick - beforeTick);\n            }\n\n            return true;\n        }\n",[21792],{"type":597,"tag":629,"props":21793,"children":21794},{"__ignoreMap":591},[21795],{"type":603,"value":21790},{"type":597,"tag":606,"props":21797,"children":21798},{},[21799],{"type":603,"value":21800},"在其中计算了InterpolationFactor.",{"type":597,"tag":606,"props":21802,"children":21803},{},[21804],{"type":603,"value":21805},"无论是插值和预测都是先读取快照.我们看下GhostUpdateSystem",{"type":597,"tag":621,"props":21807,"children":21809},{"code":21808}," public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex, DynamicComponentTypeHandle* ghostChunkComponentTypesPtr, int ghostChunkComponentTypesLength)\n            {\n                bool predicted = chunk.Has(predictedGhostComponentType);\n                uint targetTick = predicted ? predictedTargetTick : interpolatedTargetTick;\n                float targetTickFraction = predicted ? 1.0f : interpolatedTargetTickFraction;\n",[21810],{"type":597,"tag":629,"props":21811,"children":21812},{"__ignoreMap":591},[21813],{"type":603,"value":21808},{"type":597,"tag":606,"props":21815,"children":21816},{},[21817],{"type":603,"value":21818},"预测使用的是predictedTargetTick,插值使用的是interpolatedTargetTick",{"type":597,"tag":621,"props":21820,"children":21822},{"code":21821}," interpolatedTargetTick = m_ClientSimulationSystemGroup.InterpolationTick,\n                interpolatedTargetTickFraction = m_ClientSimulationSystemGroup.InterpolationTickFraction,\n\n                predictedTargetTick = m_ClientSimulationSystemGroup.ServerTick,\n",[21823],{"type":597,"tag":629,"props":21824,"children":21825},{"__ignoreMap":591},[21826],{"type":603,"value":21821},{"type":597,"tag":606,"props":21828,"children":21829},{},[21830],{"type":603,"value":21831},"而他们又都来自m_ClientSimulationSystemGroup,m_ClientSimulationSystemGroup的tick又来自NetworkTimeSystem",{"type":597,"tag":1023,"props":21833,"children":21835},{"id":21834},"clientservertickrate",[21836],{"type":603,"value":21837},"ClientServerTickRate",{"type":597,"tag":606,"props":21839,"children":21840},{},[21841],{"type":603,"value":21842},"RpcSetNetworkId",{"type":597,"tag":621,"props":21844,"children":21846},{"code":21845}," [BurstCompile]\n        [AOT.MonoPInvokeCallback(typeof(RpcExecutor.ExecuteDelegate))]\n        private static void InvokeExecute(ref RpcExecutor.Parameters parameters)\n        {\n            var rpcData = default(RpcSetNetworkId);\n            var rpcSerializer = default(RpcSetNetworkId);\n            rpcSerializer.Deserialize(ref parameters.Reader, parameters.DeserializerState, ref rpcData);\n\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, parameters.Connection, new NetworkIdComponent {Value = rpcData.nid});\n            var ent = parameters.CommandBuffer.CreateEntity(parameters.JobIndex);\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, ent, new ClientServerTickRateRefreshRequest\n            {\n                MaxSimulationStepsPerFrame = rpcData.simMaxSteps,\n                NetworkTickRate = rpcData.netTickRate,\n                SimulationTickRate = rpcData.simTickRate\n            });\n        }\n",[21847],{"type":597,"tag":629,"props":21848,"children":21849},{"__ignoreMap":591},[21850],{"type":603,"value":21845},{"type":597,"tag":606,"props":21852,"children":21853},{},[21854],{"type":603,"value":21855},"服务端在同步networkid的时候会一起同步ClientServerTickRate",{"type":597,"tag":606,"props":21857,"children":21858},{},[21859],{"type":603,"value":21860},"客户端会比服务端多一个NetworkTimeSystem根据往返时间和最近从服务器收到的快照来计算服务器时间的初始估计",{"type":597,"tag":606,"props":21862,"children":21863},{},[21864],{"type":603,"value":21865},"来看下插值tick的计算..他首先是算出predictTargetTick然后减去一个插值",{"type":597,"tag":621,"props":21867,"children":21869},{"code":21868},"\n var idiff = (uint)currentInterpolationFrames;\n            interpolateTargetTick = predictTargetTick - idiff;\n            var subidiff = currentInterpolationFrames - idiff;\n            subidiff -= subInterpolateTargetTick+subPredictTargetTick;\n            if (subidiff \u003C 0)\n            {\n                ++interpolateTargetTick;\n                subidiff = -subidiff;\n            }\n            else if (subidiff > 0)\n            {\n                idiff = (uint)subidiff;\n                subidiff -= idiff;\n                interpolateTargetTick -= idiff;\n                subidiff = 1f-subidiff;\n            }\n            subInterpolateTargetTick = subidiff;\n",[21870],{"type":597,"tag":629,"props":21871,"children":21872},{"__ignoreMap":591},[21873],{"type":603,"value":21868},{"type":597,"tag":606,"props":21875,"children":21876},{},[21877],{"type":603,"value":21878},"它是根据网络延迟算出一个tick,然后从快照中取出...",{"type":597,"tag":857,"props":21880,"children":21882},{"id":21881},"补偿",[21883],{"type":603,"value":21881},{"type":597,"tag":857,"props":21885,"children":21887},{"id":21886},"ghostsendsystem",[21888],{"type":603,"value":21889},"GhostSendSystem",{"type":597,"tag":606,"props":21891,"children":21892},{},[21893],{"type":603,"value":21894},"以下皆为脑补:",{"type":597,"tag":606,"props":21896,"children":21897},{},[21898],{"type":603,"value":21899},"发送的时候根据ghost的设置,来判断发送给该用户的数据(ghosts),其中谁是插值,谁是预测..因为插值和预测的包应该是有区别的..",{"type":597,"tag":606,"props":21901,"children":21902},{},[21903],{"type":603,"value":21904},"接收的时候再根据是否预测,还是插值.进行PredictedGhostComponent的设置",{"type":597,"tag":598,"props":21906,"children":21908},{"id":21907},"ghost",[21909],{"type":603,"value":21910},"GHOST",{"type":597,"tag":606,"props":21912,"children":21913},{},[21914],{"type":603,"value":21915},"GhostAuthoringComponent验证的时候会生成prefabId",{"type":597,"tag":621,"props":21917,"children":21919},{"code":21918},"    if (gameObject.transform.parent == null)\n            {\n                // The common case is a root object in a prefab, in this case we always validate the guid to detect cloned files\n                var prefabStage = UnityEditor.Experimental.SceneManagement.PrefabStageUtility.GetPrefabStage(gameObject);\n                if (prefabStage != null)\n                {\n#if UNITY_2020_1_OR_NEWER\n                    var assetPath = prefabStage.assetPath;\n#else\n                    var assetPath = prefabStage.prefabAssetPath;\n#endif\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(assetPath);\n                }\n                else if (UnityEditor.PrefabUtility.GetPrefabAssetType(gameObject) != UnityEditor.PrefabAssetType.NotAPrefab)\n                {\n                    var path = UnityEditor.AssetDatabase.GetAssetPath(gameObject);\n                    if (String.IsNullOrEmpty(path))\n                        return;\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(path);\n                }\n            }\n            if (guid != prefabId)\n            {\n                UnityEditor.Undo.RecordObject(this, \"\");\n                prefabId = guid;\n            }\n",[21920],{"type":597,"tag":629,"props":21921,"children":21922},{"__ignoreMap":591},[21923],{"type":603,"value":21918},{"type":597,"tag":606,"props":21925,"children":21926},{},[21927],{"type":603,"value":21928},"GhostAuthoringConversion,会为prefab根据client和server添加各种组件ghost, Snapshot",{"type":597,"tag":621,"props":21930,"children":21932},{"code":21931},"    var ghostType = new GhostTypeComponent();\n    ghostType.guid0 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(0, 8), 16);\n    ghostType.guid1 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(8, 8), 16);\n    ghostType.guid2 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(16, 8), 16);\n    ghostType.guid3 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(24, 8), 16);\n    DstEntityManager.AddComponentData(entity, ghostType);\n                    \n                    \n                    \n                    \n  DstEntityManager.AddComponentData(entity, new GhostComponent());\n",[21933],{"type":597,"tag":629,"props":21934,"children":21935},{"__ignoreMap":591},[21936],{"type":603,"value":21931},{"type":597,"tag":606,"props":21938,"children":21939},{},[21940],{"type":603,"value":21941},"默认一定会添加的组件:",{"type":597,"tag":606,"props":21943,"children":21944},{},[21945],{"type":603,"value":21946},"客户端会添加 snapshotData和snapshotDataBuffer",{"type":597,"tag":606,"props":21948,"children":21949},{},[21950],{"type":603,"value":21951},"服务端会添加PredictedGhostComponent,GhostSystemStateComponent,sharedGhostTypeComponent",{"type":597,"tag":606,"props":21953,"children":21954},{},[21955],{"type":603,"value":21956},"[GhostComponent(PrefabType=GhostPrefabType.Client)] 可以控制服务端和客户端是否添加该组件",{"type":597,"tag":606,"props":21958,"children":21959},{},[21960],{"type":603,"value":21961},"他会同步ghost prefab..根据ghostid..然后客户端.根据ghostid实例化ghost",{"type":597,"tag":621,"props":21963,"children":21965},{"code":21964},"    public struct SpawnedGhost : IEquatable\u003CSpawnedGhost>\n    {\n        public int ghostId;\n        public uint spawnTick;\n        public override int GetHashCode()\n        {\n            return ghostId;\n        }\n        public bool Equals(SpawnedGhost ghost)\n        {\n            return ghost.ghostId == ghostId && ghost.spawnTick == spawnTick;\n        }\n    }\n",[21966],{"type":597,"tag":629,"props":21967,"children":21968},{"__ignoreMap":591},[21969],{"type":603,"value":21964},{"title":591,"searchDepth":787,"depth":787,"links":21971},[21972,21976],{"id":21661,"depth":787,"text":21661,"children":21973},[21974,21975],{"id":21748,"depth":1530,"text":21751},{"id":21834,"depth":1530,"text":21837},{"id":21907,"depth":787,"text":21910},"content:unity:2020-11-18-netcode-sourcecode.md","unity/2020-11-18-netcode-sourcecode.md","2020-11-18",{"_path":538,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":537,"description":21981,"body":21982,"_type":791,"_id":22032,"_source":793,"_file":22033,"_extension":795,"date":22034},"\n  [Preserve]\n    [UpdateInGroup(typeof(InitializationSystemGroup))]\n    public class UpdateWorldTimeSystem : ComponentSystem\n    {\n        private bool hasTickedOnce = false;\n\n        protected override void OnUpdate()\n        {\n            var currentElapsedTime = Time.ElapsedTime;\n            var",{"type":594,"children":21983,"toc":22030},[21984,21992,22000,22005,22013,22017,22022],{"type":597,"tag":621,"props":21985,"children":21987},{"code":21986},"\n  [Preserve]\n    [UpdateInGroup(typeof(InitializationSystemGroup))]\n    public class UpdateWorldTimeSystem : ComponentSystem\n    {\n        private bool hasTickedOnce = false;\n\n        protected override void OnUpdate()\n        {\n            var currentElapsedTime = Time.ElapsedTime;\n            var deltaTime = math.min(UnityEngine.Time.deltaTime, World.MaximumDeltaTime);\n            World.SetTime(new TimeData(\n                elapsedTime: hasTickedOnce ? (currentElapsedTime + deltaTime) : currentElapsedTime,\n                deltaTime: deltaTime\n            ));\n            hasTickedOnce = true;\n        }\n    }\n",[21988],{"type":597,"tag":629,"props":21989,"children":21990},{"__ignoreMap":591},[21991],{"type":603,"value":21986},{"type":597,"tag":621,"props":21993,"children":21995},{"code":21994},"    internal struct WorldTime : IComponentData\n    {\n        public TimeData Time;\n    }\n\n    internal struct WorldTimeQueue : IBufferElementData\n    {\n        public TimeData Time;\n    }\n",[21996],{"type":597,"tag":629,"props":21997,"children":21998},{"__ignoreMap":591},[21999],{"type":603,"value":21994},{"type":597,"tag":606,"props":22001,"children":22002},{},[22003],{"type":603,"value":22004},"World.cs",{"type":597,"tag":621,"props":22006,"children":22008},{"code":22007},"\n        protected Entity TimeSingleton\n        {\n            get\n            {\n                if (m_TimeSingletonQuery.IsEmptyIgnoreFilter)\n                {\n        #if UNITY_EDITOR\n                    var entity = EntityManager.CreateEntity(typeof(WorldTime), typeof(WorldTimeQueue));\n                    EntityManager.SetName(entity , \"WorldTime\");\n        #else\n                    EntityManager.CreateEntity(typeof(WorldTime), typeof(WorldTimeQueue));\n        #endif\n                }\n\n                return m_TimeSingletonQuery.GetSingletonEntity();\n            }\n        }\n\n        public void SetTime(TimeData newTimeData)\n        {\n            EntityManager.SetComponentData(TimeSingleton, new WorldTime() {Time = newTimeData});\n            this.Time = newTimeData;\n        }\n\n        public void PushTime(TimeData newTimeData)\n        {\n            var queue = EntityManager.GetBuffer\u003CWorldTimeQueue>(TimeSingleton);\n            queue.Add(new WorldTimeQueue() { Time = this.Time });\n            SetTime(newTimeData);\n        }\n\n        public void PopTime()\n        {\n            var queue = EntityManager.GetBuffer\u003CWorldTimeQueue>(TimeSingleton);\n\n            Assert.IsTrue(queue.Length > 0, \"PopTime without a matching PushTime\");\n\n            var prevTime = queue[queue.Length - 1];\n            queue.RemoveAt(queue.Length - 1);\n            SetTime(prevTime.Time);\n        }\n",[22009],{"type":597,"tag":629,"props":22010,"children":22011},{"__ignoreMap":591},[22012],{"type":603,"value":22007},{"type":597,"tag":606,"props":22014,"children":22015},{},[22016],{"type":603,"value":9674},{"type":597,"tag":606,"props":22018,"children":22019},{},[22020],{"type":603,"value":22021},"ComponentSystemBase",{"type":597,"tag":621,"props":22023,"children":22025},{"code":22024},"        /// \u003Csummary>\n        /// The World in which this system exists.\n        /// \u003C/summary>\n        /// \u003Cvalue>The World of this system.\u003C/value>\n        public World World => m_StatePtr != null ? (World)m_StatePtr->m_World.Target : null;\n\n        /// \u003Csummary>\n        /// The current Time data for this system's world.\n        /// \u003C/summary>\n        public ref readonly TimeData Time => ref World.Time;\n",[22026],{"type":597,"tag":629,"props":22027,"children":22028},{"__ignoreMap":591},[22029],{"type":603,"value":22024},{"title":591,"searchDepth":787,"depth":787,"links":22031},[],"content:unity:2020-11-17-unity-ecs-worldtime.md","unity/2020-11-17-unity-ecs-worldtime.md","2020-11-17",{"_path":327,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":326,"description":22036,"body":22037,"_type":791,"_id":22087,"_source":793,"_file":22088,"_extension":795,"date":22089},"他是收费的..收费的..收费的..和腾讯云的相关产品https://console.cloud.tencent.com/sls  主要是部署的时候使用https://console.cloud.tencent.com/cdn  如果你使用了自己的域名...则会使用cdnhttps://console.cloud.tencent.com/cos5  你生产的网站实际上是放在这个里面的.",{"type":594,"children":22038,"toc":22085},[22039,22044,22049],{"type":597,"tag":606,"props":22040,"children":22041},{},[22042],{"type":603,"value":22043},"他是收费的..收费的..收费的..",{"type":597,"tag":606,"props":22045,"children":22046},{},[22047],{"type":603,"value":22048},"和腾讯云的相关产品",{"type":597,"tag":803,"props":22050,"children":22051},{},[22052,22063,22074],{"type":597,"tag":807,"props":22053,"children":22054},{},[22055,22061],{"type":597,"tag":886,"props":22056,"children":22059},{"href":22057,"rel":22058},"https://console.cloud.tencent.com/sls",[890],[22060],{"type":603,"value":22057},{"type":603,"value":22062},"  主要是部署的时候使用",{"type":597,"tag":807,"props":22064,"children":22065},{},[22066,22072],{"type":597,"tag":886,"props":22067,"children":22070},{"href":22068,"rel":22069},"https://console.cloud.tencent.com/cdn",[890],[22071],{"type":603,"value":22068},{"type":603,"value":22073},"  如果你使用了自己的域名...则会使用cdn",{"type":597,"tag":807,"props":22075,"children":22076},{},[22077,22083],{"type":597,"tag":886,"props":22078,"children":22081},{"href":22079,"rel":22080},"https://console.cloud.tencent.com/cos5",[890],[22082],{"type":603,"value":22079},{"type":603,"value":22084},"  你生产的网站实际上是放在这个里面的.",{"title":591,"searchDepth":787,"depth":787,"links":22086},[],"content:tool:2020-11-16-coding-pages.md","tool/2020-11-16-coding-pages.md","2020-11-16",{"_path":535,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":534,"description":22091,"body":22092,"_type":791,"_id":22350,"_source":793,"_file":22351,"_extension":795,"date":22089},"首先ability总是和item或者character结合在一起的",{"type":594,"children":22093,"toc":22347},[22094,22098,22102,22107,22140,22148,22154,22165,22170,22175,22180,22185,22190,22195,22200,22205,22211,22219,22224,22229,22234,22239,22244,22250,22258,22263,22268,22276,22281,22287,22295,22308,22313,22318,22323,22329],{"type":597,"tag":857,"props":22095,"children":22096},{"id":534},[22097],{"type":603,"value":534},{"type":597,"tag":606,"props":22099,"children":22100},{},[22101],{"type":603,"value":22091},{"type":597,"tag":606,"props":22103,"children":22104},{},[22105],{"type":603,"value":22106},"以下Authoring 会为ability加上不同的组件",{"type":597,"tag":1321,"props":22108,"children":22109},{},[22110,22115,22120,22125,22130,22135],{"type":597,"tag":807,"props":22111,"children":22112},{},[22113],{"type":603,"value":22114},"AbilityAutoRifleAuthoring",{"type":597,"tag":807,"props":22116,"children":22117},{},[22118],{"type":603,"value":22119},"AbilityMovementAuthoring",{"type":597,"tag":807,"props":22121,"children":22122},{},[22123],{"type":603,"value":22124},"AbilitySprintAuthoring",{"type":597,"tag":807,"props":22126,"children":22127},{},[22128],{"type":603,"value":22129},"AbilityDeadAuthoring",{"type":597,"tag":807,"props":22131,"children":22132},{},[22133],{"type":603,"value":22134},"AbilitySelectSlotAuthoring",{"type":597,"tag":807,"props":22136,"children":22137},{},[22138],{"type":603,"value":22139},"AbilityMeleeAuthoring",{"type":597,"tag":621,"props":22141,"children":22143},{"code":22142},"EntityManager.CreateArchetype(\ntypeof(Ability.AbilityControl),  //控制器\ntypeof(Ability.AbilityTag), //技能tag( Melee,Movement,AutoRifle, SelectSlot,Dead,Sprint)\ntypeof(Ability.AbilityAction),  //技能动作(None,PrimaryFire,SecondaryFire,Reloading,Melee,NumActions)会通过Item关联具体值\ntypeof(settings),  // 技能的配置\ntypeof(state), // 技能状态  \ntypeof(PredictedState),  // 预测状态\ntypeof(InterpolatedState), // 插值状态\n);\n",[22144],{"type":597,"tag":629,"props":22145,"children":22146},{"__ignoreMap":591},[22147],{"type":603,"value":22142},{"type":597,"tag":598,"props":22149,"children":22151},{"id":22150},"abilitycollection",[22152],{"type":603,"value":22153},"AbilityCollection",{"type":597,"tag":606,"props":22155,"children":22156},{},[22157,22163],{"type":597,"tag":629,"props":22158,"children":22160},{"className":22159},[],[22161],{"type":603,"value":22162},"AbilityEntry",{"type":603,"value":22164},"是一个IBufferElementData.存储了多个ability",{"type":597,"tag":606,"props":22166,"children":22167},{},[22168],{"type":603,"value":22169},"定义了技能类型,能和什么类型一起运行,会打断什么类型",{"type":597,"tag":606,"props":22171,"children":22172},{},[22173],{"type":603,"value":22174},"一个技能可能会有多个触发button,比如一把枪,会有开火键和装弹键",{"type":597,"tag":606,"props":22176,"children":22177},{},[22178],{"type":603,"value":22179},"UpdateAbilityOwnership系统.. 填充character的OwnedCollection组件.分别为自己和item",{"type":597,"tag":606,"props":22181,"children":22182},{},[22183],{"type":603,"value":22184},"再根据OwnedCollection填充ownedAbilities",{"type":597,"tag":606,"props":22186,"children":22187},{},[22188],{"type":603,"value":22189},"PrepareOwnerForAbilityUpdate系统",{"type":597,"tag":606,"props":22191,"children":22192},{},[22193],{"type":603,"value":22194},"检查ability是否启用.未启用则删除",{"type":597,"tag":606,"props":22196,"children":22197},{},[22198],{"type":603,"value":22199},"SelectActiveBehavior系统",{"type":597,"tag":606,"props":22201,"children":22202},{},[22203],{"type":603,"value":22204},"选择激活一个ability",{"type":597,"tag":857,"props":22206,"children":22208},{"id":22207},"item",[22209],{"type":603,"value":22210},"Item",{"type":597,"tag":621,"props":22212,"children":22214},{"code":22213},"EntityManager.CreateArchetype(\ntypeof(Item.InputState),  //输入状态\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个item可能有多个技能\n);\n",[22215],{"type":597,"tag":629,"props":22216,"children":22217},{"__ignoreMap":591},[22218],{"type":603,"value":22213},{"type":597,"tag":606,"props":22220,"children":22221},{},[22222],{"type":603,"value":22223},"Item.Initialize会查找所有拥有(Inventory.ItemEntry)的实体(就是character)",{"type":597,"tag":606,"props":22225,"children":22226},{},[22227],{"type":603,"value":22228},"然后将item添加到character的Inventory.ItemEntry组件的buff中.",{"type":597,"tag":606,"props":22230,"children":22231},{},[22232],{"type":603,"value":22233},"将item和character关联起来",{"type":597,"tag":606,"props":22235,"children":22236},{},[22237],{"type":603,"value":22238},"Inventory.update系统",{"type":597,"tag":606,"props":22240,"children":22241},{},[22242],{"type":603,"value":22243},"比较activeslot和lastactiveinventoryslot.来在item上添加和删除PartOwner.Visible组件",{"type":597,"tag":857,"props":22245,"children":22247},{"id":22246},"character",[22248],{"type":603,"value":22249},"Character",{"type":597,"tag":621,"props":22251,"children":22253},{"code":22252},"EntityManager.CreateArchetype(\ntypeof(Settings),  //角色设置\ntypeof(InterpolatedData), // 插值数据\ntypeof(PredictedData),//预测数据\ntypeof(ReplicatedData),// 角色类型\n\ntypeof(Player.OwnerPlayerId.Default),// 拥有者id\ntypeof(PlayerControlled.State),// 玩家控制器状态\ntypeof(HitColliderOwner.State),  //碰撞器状态\n\n//Inventory\ntypeof(Inventory.ItemEntry)   //一个item的buff\ntypeof(Inventory.State)   //状态..激活的是哪一个item\ntypeof(Inventory.InternalState)  //最后激活的item\n\n//生命和伤害\ntypeof(HealthStateData),\ntypeof(DamageEvent), //注意是个buff\ntypeof(DamageHistoryData),  \n\n//ability\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个角色可能有多个能力\ntypeof(AbilityOwner.State),//技能拥有者状态\ntypeof(AbilityOwner.OwnedCollection),//技能拥有者是个buff  拥有者有可能是角色也有可能是item\ntypeof(AbilityOwner.OwnedAbility),//拥有的所有技能,包括角色和item的\n\n\n\n\n\n//角色控制器数据\ntypeof(CharacterControllerComponentData),  // 一些角色控制器数据\ntypeof(CharacterControllerInitializationData),   //碰撞盒数据\ntypeof(CharacterControllerVelocity),\ntypeof(CharacterControllerMoveQuery),\ntypeof(CharacterControllerMoveResult),\ntypeof(CharacterControllerGroundSupportData),\n\n\n\n);\n",[22254],{"type":597,"tag":629,"props":22255,"children":22256},{"__ignoreMap":591},[22257],{"type":603,"value":22252},{"type":597,"tag":857,"props":22259,"children":22261},{"id":22260},"part",[22262],{"type":603,"value":22260},{"type":597,"tag":606,"props":22264,"children":22265},{},[22266],{"type":603,"value":22267},"Part 模块是抽象\"部分关系\"的一种存在, 不过具体到实现来说, 就是可以用来管理角色模型, 武器模型(以及其LOD), 以角色配置为例说明下述具体用法",{"type":597,"tag":621,"props":22269,"children":22271},{"code":22270},"EntityManager.CreateArchetype(\ntypeof(Part.Owner),  //部件拥有者\ntypeof(TerraformerWeaponPart.AutoringData)  //声音\ntypeof(TerraformerWeaponPart.AuthoringClass)  //材质,特效之类的\ntypeof(TerraformerWeaponPart.State)  //状态\n);\n",[22272],{"type":597,"tag":629,"props":22273,"children":22274},{"__ignoreMap":591},[22275],{"type":603,"value":22270},{"type":597,"tag":606,"props":22277,"children":22278},{},[22279],{"type":603,"value":22280},"同样的item和character都可以拥有part",{"type":597,"tag":857,"props":22282,"children":22284},{"id":22283},"local-player",[22285],{"type":603,"value":22286},"local player",{"type":597,"tag":621,"props":22288,"children":22290},{"code":22289},"EntityManager.CreateArchetype(\ntypeof(Player.State)  \ntypeof(UserCommand)    //是个buff\ntypeof(LocalPlayer)  \ntypeof(LocalPlayerCharacterControl.State)\n\ntypeof(AbilityUIElement)\ntypeof(PresentationElement)\ntypeof(PlayerCameraControl.State)\n);\n\n\n",[22291],{"type":597,"tag":629,"props":22292,"children":22293},{"__ignoreMap":591},[22294],{"type":603,"value":22289},{"type":597,"tag":606,"props":22296,"children":22297},{},[22298,22300,22306],{"type":603,"value":22299},"首先看",{"type":597,"tag":629,"props":22301,"children":22303},{"className":22302},[],[22304],{"type":603,"value":22305},"CharacterAuthoring",{"type":603,"value":22307},"然后我们就知道.一个character到底有哪些东东了",{"type":597,"tag":606,"props":22309,"children":22310},{},[22311],{"type":603,"value":22312},"//Assets/Unity.Sample.Terraformer/Prefabs/Characters/Terraformer/Char_Terraformer.prefab",{"type":597,"tag":606,"props":22314,"children":22315},{},[22316],{"type":603,"value":22317},"SpawnCharacter",{"type":597,"tag":606,"props":22319,"children":22320},{},[22321],{"type":603,"value":22322},"ItemAuthoring",{"type":597,"tag":857,"props":22324,"children":22326},{"id":22325},"palyer-实例化流程",[22327],{"type":603,"value":22328},"palyer 实例化流程",{"type":597,"tag":803,"props":22330,"children":22331},{},[22332,22337,22342],{"type":597,"tag":807,"props":22333,"children":22334},{},[22335],{"type":603,"value":22336},"客户端连接的时候,服务端PlayerModuleServer.CreatePlayerEntity 创建player实体",{"type":597,"tag":807,"props":22338,"children":22339},{},[22340],{"type":603,"value":22341},"服务端根据GameMode,创建角色GameModeSystemServer.Update()",{"type":597,"tag":807,"props":22343,"children":22344},{},[22345],{"type":603,"value":22346},"客户端创建localplayer.并根据系统将localplayer和character和player进行绑定",{"title":591,"searchDepth":787,"depth":787,"links":22348},[22349],{"id":22150,"depth":787,"text":22153},"content:unity:2020-11-16-dotssample.md","unity/2020-11-16-dotssample.md",{"_path":324,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":323,"description":22353,"body":22354,"_type":791,"_id":22437,"_source":793,"_file":22438,"_extension":795,"date":22439},"包缓存太大每次运行Unity都会发现自己的C盘空间在急剧缩小，查了一下发现是C:\\Users\\Username\\AppData\\Local\\Unity\\cache这个文件夹特别大，它主要是存储一些Unity常用的packages，默认都是存在C盘下。\n为了拯救C盘空间，可以通过设置环境变量的方式解决，具体请参考Global Cache，或Configure Unity Package Manager global cache location。添加环境变量[environment]::setEnvironmentVariable('UPM_CACHE_ROOT','D:\\Users\\zhepa",{"type":594,"children":22355,"toc":22433},[22356,22361,22383,22388,22396,22401,22406,22414,22423],{"type":597,"tag":598,"props":22357,"children":22359},{"id":22358},"包缓存太大",[22360],{"type":603,"value":22358},{"type":597,"tag":606,"props":22362,"children":22363},{},[22364,22366,22373,22375,22382],{"type":603,"value":22365},"每次运行Unity都会发现自己的C盘空间在急剧缩小，查了一下发现是C:\\Users\\Username\\AppData\\Local\\Unity\\cache这个文件夹特别大，它主要是存储一些Unity常用的packages，默认都是存在C盘下。\n为了拯救C盘空间，可以通过设置环境变量的方式解决，具体请参考",{"type":597,"tag":886,"props":22367,"children":22370},{"href":22368,"rel":22369},"https://docs.unity3d.com/Manual/upm-cache.html?_ga=2.102441737.940588655.1611571898-92384475.1591107641",[890],[22371],{"type":603,"value":22372},"Global Cache",{"type":603,"value":22374},"，或",{"type":597,"tag":886,"props":22376,"children":22379},{"href":22377,"rel":22378},"https://forum.unity.com/threads/configure-unity-package-manager-global-cache-location.650245/",[890],[22380],{"type":603,"value":22381},"Configure Unity Package Manager global cache location",{"type":603,"value":758},{"type":597,"tag":606,"props":22384,"children":22385},{},[22386],{"type":603,"value":22387},"添加环境变量",{"type":597,"tag":621,"props":22389,"children":22391},{"code":22390},"[environment]::setEnvironmentVariable('UPM_CACHE_ROOT','D:\\Users\\zhepama\\AppData\\Unity\\Caches','User')\n",[22392],{"type":597,"tag":629,"props":22393,"children":22394},{"__ignoreMap":591},[22395],{"type":603,"value":22390},{"type":597,"tag":598,"props":22397,"children":22399},{"id":22398},"商店资源太大",[22400],{"type":603,"value":22398},{"type":597,"tag":606,"props":22402,"children":22403},{},[22404],{"type":603,"value":22405},"使用cmd,注意powershell是不支持mklink的",{"type":597,"tag":621,"props":22407,"children":22409},{"code":22408}," mklink /J \"C:\\Users\\zhepama\\AppData\\Roaming\\Unity\\Asset Store-5.x\" \"E:\\Asset\\Asset Store-5.x\"\n",[22410],{"type":597,"tag":629,"props":22411,"children":22412},{"__ignoreMap":591},[22413],{"type":603,"value":22408},{"type":597,"tag":606,"props":22415,"children":22416},{},[22417],{"type":597,"tag":886,"props":22418,"children":22421},{"href":22419,"rel":22420},"https://forum.unity.com/threads/asset-store-download-folder.83620/page-2",[890],[22422],{"type":603,"value":22419},{"type":597,"tag":606,"props":22424,"children":22425},{},[22426],{"type":597,"tag":886,"props":22427,"children":22430},{"href":22428,"rel":22429},"https://docs.unity.cn/cn/2021.3/Manual/upm-config-cache.html",[890],[22431],{"type":603,"value":22432},"Customizing the shared cache locations - Unity 手册",{"title":591,"searchDepth":787,"depth":787,"links":22434},[22435,22436],{"id":22358,"depth":787,"text":22358},{"id":22398,"depth":787,"text":22398},"content:tool:2020-11-15-unity-is-big.md","tool/2020-11-15-unity-is-big.md","2020-11-15",{"_path":532,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":531,"description":22441,"body":22442,"_type":791,"_id":23077,"_source":793,"_file":23078,"_extension":795,"date":22439},"ConvertToEntitySystem运行在默认世界中..每次update的时候会处理ConvertToEntity添加到system中的gameobject",{"type":594,"children":22443,"toc":23071},[22444,22449,22453,22458,22466,22471,22484,22489,22494,22502,22507,22514,22563,22568,22576,22581,22589,22634,22639,22645,22655,22744,22763,22795,22813,22819,22852,22857,22866,22871,22880,22887,22913,22920,22925,22936,22941,22948,22957,22964,22969,22976,22986,23016,23021,23026,23037,23045,23053,23063],{"type":597,"tag":857,"props":22445,"children":22447},{"id":22446},"关于转换系统",[22448],{"type":603,"value":22446},{"type":597,"tag":606,"props":22450,"children":22451},{},[22452],{"type":603,"value":22441},{"type":597,"tag":606,"props":22454,"children":22455},{},[22456],{"type":603,"value":22457},"最终调用的时候是使用.",{"type":597,"tag":621,"props":22459,"children":22461},{"code":22460},"GameObjectConversionUtility.Convert(gameObjectWorld);\n",[22462],{"type":597,"tag":629,"props":22463,"children":22464},{"__ignoreMap":591},[22465],{"type":603,"value":22460},{"type":597,"tag":606,"props":22467,"children":22468},{},[22469],{"type":603,"value":22470},"然后具体的转换过程会新疆一个转换world主要执行GameObjectConversionMappingSystem,然后转换完成后销毁这个world",{"type":597,"tag":1321,"props":22472,"children":22473},{},[22474,22479],{"type":597,"tag":807,"props":22475,"children":22476},{},[22477],{"type":603,"value":22478},"GameObjectConversionUtility.ConvertGameObjectHierarchy(unitView.gameObject, settings)会转换所有child.",{"type":597,"tag":807,"props":22480,"children":22481},{},[22482],{"type":603,"value":22483},"GameObjectConversionMappingSystem.conversion.MappingSystem.AddGameObjectOrPrefab(root);会递归所有child",{"type":597,"tag":857,"props":22485,"children":22487},{"id":22486},"parent",[22488],{"type":603,"value":22486},{"type":597,"tag":606,"props":22490,"children":22491},{},[22492],{"type":603,"value":22493},"localtoworld是一个矩阵",{"type":597,"tag":621,"props":22495,"children":22497},{"code":22496},"      EntityManager.SetComponentData(myCube, new LocalToWorld\n        {\n            Value = new float4x4(rotation: quaternion.identity, translation:new float3(1,2,3))\n        });\n",[22498],{"type":597,"tag":629,"props":22499,"children":22500},{"__ignoreMap":591},[22501],{"type":603,"value":22496},{"type":597,"tag":606,"props":22503,"children":22504},{},[22505],{"type":603,"value":22506},"如果人肉单纯修改 LocalToWorld 这个 4x4 Transform 矩阵将会无比痛苦, 所以 Unity 帮我们实现了一堆有用的系统来修改它:",{"type":597,"tag":606,"props":22508,"children":22509},{},[22510],{"type":597,"tag":719,"props":22511,"children":22513},{"alt":719,"src":22512},"/images/2020-11-15-ecs-parent/v2-1eb72ea2222c31c50554021afecb27d1_1440w.jpg",[],{"type":597,"tag":606,"props":22515,"children":22516},{},[22517,22518,22524,22525,22531,22532,22538,22539,22545,22547,22553,22555,22561],{"type":603,"value":8220},{"type":597,"tag":629,"props":22519,"children":22521},{"className":22520},[],[22522],{"type":603,"value":22523},"Translation",{"type":603,"value":9688},{"type":597,"tag":629,"props":22526,"children":22528},{"className":22527},[],[22529],{"type":603,"value":22530},"Rotation",{"type":603,"value":9688},{"type":597,"tag":629,"props":22533,"children":22535},{"className":22534},[],[22536],{"type":603,"value":22537},"Scale",{"type":603,"value":3326},{"type":597,"tag":629,"props":22540,"children":22542},{"className":22541},[],[22543],{"type":603,"value":22544},"NonUniformScale",{"type":603,"value":22546},"组件将会极大简化我们的操作, 上图这些系统 会将这些组件的改动反应到 LocalToWorld 中.你甚至可以使用 Parent 来实现层级结构. 比如一个 Entity 的 Transform 为 0, 但同时有一个 ",{"type":597,"tag":629,"props":22548,"children":22550},{"className":22549},[],[22551],{"type":603,"value":22552},"Parent",{"type":603,"value":22554}," 组件指向了父 Entity, 那么最终该 Entity 的 ",{"type":597,"tag":629,"props":22556,"children":22558},{"className":22557},[],[22559],{"type":603,"value":22560},"LocalToWorld",{"type":603,"value":22562}," 值将会和父 Entity的 LocalToWorld 一样.",{"type":597,"tag":606,"props":22564,"children":22565},{},[22566],{"type":603,"value":22567},"我们新建一个场景",{"type":597,"tag":606,"props":22569,"children":22570},{},[22571],{"type":597,"tag":719,"props":22572,"children":22575},{"alt":22573,"src":22574},"image-20201116024147417","/images/2020-11-15-ecs-parent/image-20201116024147417.png",[],{"type":597,"tag":606,"props":22577,"children":22578},{},[22579],{"type":603,"value":22580},"查看分析器.就能看到如下关系图",{"type":597,"tag":606,"props":22582,"children":22583},{},[22584],{"type":597,"tag":719,"props":22585,"children":22588},{"alt":22586,"src":22587},"image-20201116024105067","/images/2020-11-15-ecs-parent/image-20201116024105067.png",[],{"type":597,"tag":1321,"props":22590,"children":22591},{},[22592,22610],{"type":597,"tag":807,"props":22593,"children":22594},{},[22595,22597,22603,22604],{"type":603,"value":22596},"CUBE   ",{"type":597,"tag":629,"props":22598,"children":22600},{"className":22599},[],[22601],{"type":603,"value":22602},"child",{"type":603,"value":9688},{"type":597,"tag":629,"props":22605,"children":22607},{"className":22606},[],[22608],{"type":603,"value":22609},"physicsCollider",{"type":597,"tag":807,"props":22611,"children":22612},{},[22613,22615,22620,22621,22627,22628],{"type":603,"value":22614},"SPHER ",{"type":597,"tag":629,"props":22616,"children":22618},{"className":22617},[],[22619],{"type":603,"value":22486},{"type":603,"value":9979},{"type":597,"tag":629,"props":22622,"children":22624},{"className":22623},[],[22625],{"type":603,"value":22626},"localtoparent",{"type":603,"value":9979},{"type":597,"tag":629,"props":22629,"children":22631},{"className":22630},[],[22632],{"type":603,"value":22633},"previousparent",{"type":597,"tag":606,"props":22635,"children":22636},{},[22637],{"type":603,"value":22638},"由于物理的转化规则,子物体没有physicscollider.",{"type":597,"tag":598,"props":22640,"children":22642},{"id":22641},"linkedentitygroup",[22643],{"type":603,"value":22644},"LinkedEntityGroup",{"type":597,"tag":606,"props":22646,"children":22647},{},[22648,22653],{"type":597,"tag":629,"props":22649,"children":22651},{"className":22650},[],[22652],{"type":603,"value":22644},{"type":603,"value":22654},"是一个 dynamic buffer , 通常它会影响:",{"type":597,"tag":1321,"props":22656,"children":22657},{},[22658,22685,22709],{"type":597,"tag":807,"props":22659,"children":22660},{},[22661,22663,22668,22670,22675,22677,22683],{"type":603,"value":22662},"调用",{"type":597,"tag":629,"props":22664,"children":22666},{"className":22665},[],[22667],{"type":603,"value":4729},{"type":603,"value":22669},"方法时, 会同时实例化所有 buffer 中的 entity, 同时也会创建相同的",{"type":597,"tag":629,"props":22671,"children":22673},{"className":22672},[],[22674],{"type":603,"value":22644},{"type":603,"value":22676},". 注意实例化并不一定和ECS中的",{"type":597,"tag":629,"props":22678,"children":22680},{"className":22679},[],[22681],{"type":603,"value":22682},"Prefab",{"type":603,"value":22684}," component 直接关联.",{"type":597,"tag":807,"props":22686,"children":22687},{},[22688,22689,22694,22696,22701,22703],{"type":603,"value":22662},{"type":597,"tag":629,"props":22690,"children":22692},{"className":22691},[],[22693],{"type":603,"value":4744},{"type":603,"value":22695},"时也会同时销毁 ",{"type":597,"tag":629,"props":22697,"children":22699},{"className":22698},[],[22700],{"type":603,"value":22644},{"type":603,"value":22702},"中的所有 entity. 类似在编辑器中删除",{"type":597,"tag":629,"props":22704,"children":22706},{"className":22705},[],[22707],{"type":603,"value":22708},"GameObject",{"type":597,"tag":807,"props":22710,"children":22711},{},[22712,22714,22720,22722,22728,22730,22735,22737,22742],{"type":603,"value":22713},"调用 ",{"type":597,"tag":629,"props":22715,"children":22717},{"className":22716},[],[22718],{"type":603,"value":22719},"entityManager.SetEnabled",{"type":603,"value":22721}," 加上的 ",{"type":597,"tag":629,"props":22723,"children":22725},{"className":22724},[],[22726],{"type":603,"value":22727},"Disabled",{"type":603,"value":22729},"component 会告知 ECS 的查询系统忽略它们, 而 ",{"type":597,"tag":629,"props":22731,"children":22733},{"className":22732},[],[22734],{"type":603,"value":22644},{"type":603,"value":22736}," 中的 entity 也会受到同样的影响. 有点类似禁用",{"type":597,"tag":629,"props":22738,"children":22740},{"className":22739},[],[22741],{"type":603,"value":22708},{"type":603,"value":22743}," 时同时会禁用整个层级树.",{"type":597,"tag":606,"props":22745,"children":22746},{},[22747,22749,22754,22756,22761],{"type":603,"value":22748},"注意如果buffer 中的 entity 也有",{"type":597,"tag":629,"props":22750,"children":22752},{"className":22751},[],[22753],{"type":603,"value":22644},{"type":603,"value":22755},", 系统",{"type":597,"tag":1080,"props":22757,"children":22758},{},[22759],{"type":603,"value":22760},"不会递归地",{"type":603,"value":22762},"执行instantiation/destroy/disabled 过程.",{"type":597,"tag":606,"props":22764,"children":22765},{},[22766,22768,22773,22774,22779,22781,22786,22788,22793],{"type":603,"value":22767},"这些过程在具体执行当中也有一些细微不同.",{"type":597,"tag":629,"props":22769,"children":22771},{"className":22770},[],[22772],{"type":603,"value":4729},{"type":603,"value":695},{"type":597,"tag":629,"props":22775,"children":22777},{"className":22776},[],[22778],{"type":603,"value":4737},{"type":603,"value":22780},"只要检测到 buffer 便在所有成员上一次性执行, 不会做其他更多事. 这意味着关联该 buffer 的 entity ",{"type":597,"tag":1080,"props":22782,"children":22783},{},[22784],{"type":603,"value":22785},"必须要把自己包括在内",{"type":603,"value":22787},"才能正常工作**.** 然而",{"type":597,"tag":629,"props":22789,"children":22791},{"className":22790},[],[22792],{"type":603,"value":4744},{"type":603,"value":22794},"则无所谓, 因为它会先销毁传入的entity, 然后再迭代 buffer 中的 entity 进行销毁.",{"type":597,"tag":606,"props":22796,"children":22797},{},[22798,22800,22805,22806,22811],{"type":603,"value":22799},"要注意",{"type":597,"tag":629,"props":22801,"children":22803},{"className":22802},[],[22804],{"type":603,"value":22644},{"type":603,"value":13757},{"type":597,"tag":629,"props":22807,"children":22809},{"className":22808},[],[22810],{"type":603,"value":22552},{"type":603,"value":22812},"并不一样 (虽然它们经常同时出现). 后者是递归地工作, 循环依赖也是不允许的.",{"type":597,"tag":598,"props":22814,"children":22816},{"id":22815},"从非-prefab-conversion-中获取linkedentitygroup",[22817],{"type":603,"value":22818},"从非 prefab conversion 中获取LinkedEntityGroup",{"type":597,"tag":606,"props":22820,"children":22821},{},[22822,22824,22829,22831,22836,22838,22843,22845,22850],{"type":603,"value":22823},"目前, 我们使用",{"type":597,"tag":629,"props":22825,"children":22827},{"className":22826},[],[22828],{"type":603,"value":9207},{"type":603,"value":22830},"并不能得到 ",{"type":597,"tag":629,"props":22832,"children":22834},{"className":22833},[],[22835],{"type":603,"value":22644},{"type":603,"value":22837},". 所以当销毁转换后的 entity时, 并不能连锁地销毁相关联的entity(比如Child/Parent), 不管你是否认同, 目前这是默认的行为. (",{"type":597,"tag":629,"props":22839,"children":22841},{"className":22840},[],[22842],{"type":603,"value":9207},{"type":603,"value":22844},"却可以正常得到基于",{"type":597,"tag":629,"props":22846,"children":22848},{"className":22847},[],[22849],{"type":603,"value":22552},{"type":603,"value":22851}," 的层级结构).",{"type":597,"tag":606,"props":22853,"children":22854},{},[22855],{"type":603,"value":22856},"如果你需要该 buffer 正常添加, 在 mapping sysytem 中有一个方法可以使用:",{"type":597,"tag":621,"props":22858,"children":22861},{"code":22859,"language":8105,"meta":591,"className":22860}," public void DeclareLinkedEntityGroup(GameObject gameObject)\n",[8107],[22862],{"type":597,"tag":629,"props":22863,"children":22864},{"__ignoreMap":591},[22865],{"type":603,"value":22859},{"type":597,"tag":606,"props":22867,"children":22868},{},[22869],{"type":603,"value":22870},"调用后 primary entity 会得到该 buffer, 并包含所有子对象(递归地查询, 线性排列的结果).",{"type":597,"tag":621,"props":22872,"children":22875},{"code":22873,"language":8105,"meta":591,"className":22874},"public class CubeConvert : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        conversionSystem.DeclareLinkedEntityGroup(this.gameObject);\n    }\n}\n",[8107],[22876],{"type":597,"tag":629,"props":22877,"children":22878},{"__ignoreMap":591},[22879],{"type":603,"value":22873},{"type":597,"tag":606,"props":22881,"children":22882},{},[22883],{"type":597,"tag":719,"props":22884,"children":22886},{"alt":719,"src":22885},"/images/2020-11-15-ecs-parent/v2-fe2983f48e754c910758292e0a0dfc91_1440w.jpg",[],{"type":597,"tag":606,"props":22888,"children":22889},{},[22890,22892,22897,22899,22904,22905,22911],{"type":603,"value":22891},"从 debbuger 现在可以看到已经正常添加了",{"type":597,"tag":629,"props":22893,"children":22895},{"className":22894},[],[22896],{"type":603,"value":22644},{"type":603,"value":22898},", 目前它已经支持",{"type":597,"tag":629,"props":22900,"children":22902},{"className":22901},[],[22903],{"type":603,"value":4729},{"type":603,"value":695},{"type":597,"tag":629,"props":22906,"children":22908},{"className":22907},[],[22909],{"type":603,"value":22910},"SetEnable",{"type":603,"value":22912}," 的正常工作了:",{"type":597,"tag":606,"props":22914,"children":22915},{},[22916],{"type":597,"tag":719,"props":22917,"children":22919},{"alt":719,"src":22918},"/images/2020-11-15-ecs-parent/v2-7d3ddcf06ebfd7b410dc38b6dd0d336a_1440w.jpg",[],{"type":597,"tag":606,"props":22921,"children":22922},{},[22923],{"type":603,"value":22924},"LinkedEntityGroup 总是会包含它自己, 包括 disable 这种情况. 因此如果你在叶子对象上禁用了 GameObject , 你也会得到包含它自己的LinkedEntityGroup.",{"type":597,"tag":598,"props":22926,"children":22928},{"id":22927},"关于手动添加linkedentitygroup",[22929,22931],{"type":603,"value":22930},"关于手动添加",{"type":597,"tag":629,"props":22932,"children":22934},{"className":22933},[],[22935],{"type":603,"value":22644},{"type":597,"tag":606,"props":22937,"children":22938},{},[22939],{"type":603,"value":22940},"如果我添加了一个 conversion script 到 SpecialCube, 它的Convert 方法会在 CubeHead 被转换时调用, 该代码意图在于记住 Cube(3) 的 Entity:",{"type":597,"tag":606,"props":22942,"children":22943},{},[22944],{"type":597,"tag":719,"props":22945,"children":22947},{"alt":719,"src":22946},"/images/2020-11-15-ecs-parent/v2-de0722a0a9b1b64f962e00c0655f6641_1440w.jpg",[],{"type":597,"tag":621,"props":22949,"children":22952},{"code":22950,"language":8105,"meta":591,"className":22951},"public class SpecialCube : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public GameObject itsChild;\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponent\u003CLinkedEntityGroup>(entity);\n        var leg = dstManager.GetBuffer\u003CLinkedEntityGroup>(entity);\n        leg.Add(conversionSystem.GetPrimaryEntity(itsChild));\n    }\n}\n",[8107],[22953],{"type":597,"tag":629,"props":22954,"children":22955},{"__ignoreMap":591},[22956],{"type":603,"value":22950},{"type":597,"tag":606,"props":22958,"children":22959},{},[22960],{"type":597,"tag":719,"props":22961,"children":22963},{"alt":719,"src":22962},"/images/2020-11-15-ecs-parent/v2-50abef20adb51226bd0af6bddba9e8bb_1440w.jpg",[],{"type":597,"tag":606,"props":22965,"children":22966},{},[22967],{"type":603,"value":22968},"这时我们检查一下conversion 的Prefab entity 的结果(烘焙对于单个 Entity 或者 Entity buffer 都有效), 我们期望我们人工添加的 LinkedEntityGroup 包含对于 Prefab 同级的引用.",{"type":597,"tag":606,"props":22970,"children":22971},{},[22972],{"type":597,"tag":719,"props":22973,"children":22975},{"alt":719,"src":22974},"/images/2020-11-15-ecs-parent/v2-287469fff9e08d15954ccf00d6b63df5_1440w.jpg",[],{"type":597,"tag":857,"props":22977,"children":22978},{"id":4689},[22979,22981],{"type":603,"value":22980},"关于parent和",{"type":597,"tag":629,"props":22982,"children":22984},{"className":22983},[],[22985],{"type":603,"value":22644},{"type":597,"tag":1321,"props":22987,"children":22988},{},[22989,22993],{"type":597,"tag":807,"props":22990,"children":22991},{},[22992],{"type":603,"value":4700},{"type":597,"tag":807,"props":22994,"children":22995},{},[22996,22997,23002,23003,23008,23010,23015],{"type":603,"value":4723},{"type":597,"tag":629,"props":22998,"children":23000},{"className":22999},[],[23001],{"type":603,"value":4729},{"type":603,"value":4731},{"type":597,"tag":629,"props":23004,"children":23006},{"className":23005},[],[23007],{"type":603,"value":4737},{"type":603,"value":23009},"  ",{"type":597,"tag":629,"props":23011,"children":23013},{"className":23012},[],[23014],{"type":603,"value":4744},{"type":603,"value":4746},{"type":597,"tag":606,"props":23017,"children":23018},{},[23019],{"type":603,"value":23020},"被disable的组件不会被foreach到,除非主动申请选取disable",{"type":597,"tag":857,"props":23022,"children":23024},{"id":23023},"最佳的方式去关联entity和prefab",[23025],{"type":603,"value":23023},{"type":597,"tag":606,"props":23027,"children":23028},{},[23029,23030],{"type":603,"value":19113},{"type":597,"tag":886,"props":23031,"children":23034},{"href":23032,"rel":23033},"https://forum.unity.com/threads/hybrid-ecs-best-way-to-handle-convert-and-inject-game-object-prefab.736646/",[890],[23035],{"type":603,"value":23036},"Hybrid ECS] Best way to handle Convert and Inject Game Object Prefab? - Unity Forum",{"type":597,"tag":621,"props":23038,"children":23040},{"code":23039},"using UnityEngine;\n \npublic class Prefabs : MonoBehaviour\n{\n    private static Prefabs m_Instance;\n \n    public static GameObject PlayerModel => m_Instance.playerModel;\n \n    public GameObject playerModel;\n \n    private void Awake()\n    {\n        if (m_Instance == null)\n        {\n            m_Instance = this;\n        }\n        else\n        {\n            Debug.LogError(\"Prefab Singleton loaded twice\");\n        }\n    }\n}\n",[23041],{"type":597,"tag":629,"props":23042,"children":23043},{"__ignoreMap":591},[23044],{"type":603,"value":23039},{"type":597,"tag":621,"props":23046,"children":23048},{"code":23047},"using Unity.Entities;\nusing Unity.NetCode;\nusing Unity.Transforms;\nusing UnityEngine;\n \n[UpdateInGroup(typeof(ClientSimulationSystemGroup))]\n \npublic class PlayerModelSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        Entities.WithNone\u003CTransform>().ForEach((Entity playerEntity, ref PlayerComponent playerComponent) => {\n            if (Prefabs.PlayerModel != null)\n            {\n                var playerModel = Object.Instantiate(Prefabs.PlayerModel);\n                EntityManager.AddComponentObject(playerEntity, playerModel.GetComponent\u003CTransform>());\n                EntityManager.AddComponentData(playerEntity, new CopyTransformToGameObject());\n            }\n        });\n    }\n}\n",[23049],{"type":597,"tag":629,"props":23050,"children":23051},{"__ignoreMap":591},[23052],{"type":603,"value":23047},{"type":597,"tag":606,"props":23054,"children":23055},{},[23056],{"type":597,"tag":886,"props":23057,"children":23060},{"href":23058,"rel":23059},"https://forum.unity.com/threads/unity-tech-where-is-the-simple-bridge-between-monobehaviours-and-ecs.823485/",[890],[23061],{"type":603,"value":23062},"Unity Tech - Where is the SIMPLE Bridge Between MonoBehaviours and ECS?? - Unity Forum",{"type":597,"tag":621,"props":23064,"children":23066},{"code":23065},"using Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\nusing UnityEngine;\n \n// Attach to your Game Object to be converted, the GameObjectPrefab is a pure Game Object with no conversion that may contain MonoBehaviour components such as the particle system.\npublic class GameObjectPrefabAuthoring : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public GameObject GameObjectPrefab;\n \n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentObject(entity, new GameObjectPrefab\n        {\n            Value = GameObjectPrefab\n        });\n    }\n}\n \npublic class GameObjectPrefab : IComponentData\n{\n    public GameObject Value;\n}\n \n// Instantiate and destroy the referenced prefab when the entity is created or destroyed. You can even pool the Game Object.\npublic class GameObjectPrefabSystem : JobComponentSystem\n{\n    public class GameObjectPrefabInstance : ISystemStateComponentData\n    {\n        public GameObject Value;\n    }\n \n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        Entities\n            .WithNone\u003CGameObjectPrefabInstance>()\n            .ForEach((Entity entity, GameObjectPrefab gameObjectPrefab) =>\n            {\n                var gameObjectPrefabInstance = Object.Instantiate(gameObjectPrefab.Value);\n \n                EntityManager.AddComponentData(entity, new GameObjectPrefabInstance\n                {\n                    Value = gameObjectPrefabInstance\n                });\n \n                // Just an example to make the GameObject Prefab instance follow the entity.\n                EntityManager.AddComponentObject(entity, gameObjectPrefabInstance.transform);\n                EntityManager.AddComponent\u003CCopyTransformToGameObject>(entity);\n            })\n            .WithStructuralChanges()\n            .Run();\n \n        Entities\n            .WithNone\u003CGameObjectPrefab>()\n            .ForEach((Entity entity, GameObjectPrefabInstance gameObjectPrefabInstance) =>\n            {\n                Object.Destroy(gameObjectPrefabInstance.Value);\n \n                EntityManager.RemoveComponent\u003CGameObjectPrefabInstance>(entity);\n            })\n            .WithStructuralChanges()\n            .Run();\n \n        return default;\n    }\n}\n \n// A dummy system for testing purposes.\npublic class DummyEntityWithGameObjectControllerSystem : JobComponentSystem\n{\n    EntityQuery m_Query;\n \n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        var deltaTime = Time.DeltaTime;\n        var speed = 3;\n        var direction = new float2(Input.GetAxisRaw(\"Horizontal\"), Input.GetAxisRaw(\"Vertical\"));\n        var destroy = Input.GetKeyDown(KeyCode.Delete);\n \n        if (destroy)\n        {\n            EntityManager.DestroyEntity(m_Query);\n        }\n \n        return Entities\n            .WithStoreEntityQueryInField(ref m_Query)\n            .WithAll\u003CGameObjectPrefab>()\n            .ForEach((ref Translation translation) =>\n            {\n                translation.Value += math.normalizesafe(new float3(direction, 0).xzy) * speed * deltaTime;\n            })\n            .Schedule(inputDeps);\n    }\n}\n",[23067],{"type":597,"tag":629,"props":23068,"children":23069},{"__ignoreMap":591},[23070],{"type":603,"value":23065},{"title":591,"searchDepth":787,"depth":787,"links":23072},[23073,23074,23075],{"id":22641,"depth":787,"text":22644},{"id":22815,"depth":787,"text":22818},{"id":22927,"depth":787,"text":23076},"关于手动添加LinkedEntityGroup","content:unity:2020-11-15-ecs-parent.md","unity/2020-11-15-ecs-parent.md",{"_path":529,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":528,"description":23080,"body":23081,"_type":791,"_id":23166,"_source":793,"_file":23167,"_extension":795,"date":23168},"We do not have a PVS (potential visibility set) system in place yet, but we do have distance based importance scaling which mostly solves the bandwidth aspect of it (but no the anit-cheat aspect). It solves it by sending things close by more frequently than things far away rather than not sending things far away.\nMy recommendation would be to start with distance based scaling and see how far it takes you. When we add a PVS solution it will probably be based on segmenting the entities into separate chunks and run the visibility logic per chunk - I guess that is closest to the subworlds you mention.",{"type":594,"children":23082,"toc":23164},[23083,23087,23092,23097,23111,23123,23133,23143,23154,23159],{"type":597,"tag":606,"props":23084,"children":23085},{},[23086],{"type":603,"value":23080},{"type":597,"tag":606,"props":23088,"children":23089},{},[23090],{"type":603,"value":23091},"Distance based importance is used in asteroids and we can scale up to >20.000 active entities with it as long as only a subset of those entities are close by (tested with 20.000 asteroids and 8k x 8k map). I expect it will continue scaling far beyond that but never tried.",{"type":597,"tag":606,"props":23093,"children":23094},{},[23095],{"type":603,"value":23096},"The way distance based importance works is that it first segments the entities into different chunks based on a user defined grid. No entities will be in the same chunk unless they are in the same grid cell. Once we have that segmentation we run a user defined importance scaling method per chunk, where the method knows the grid position of the chunk and the grid position of the camera, and it can scale importance based on distance in grid cells.",{"type":597,"tag":606,"props":23098,"children":23099},{},[23100,23102,23109],{"type":603,"value":23101},"The code to setup the grid segmentation is in ",{"type":597,"tag":886,"props":23103,"children":23106},{"href":23104,"rel":23105},"https://github.com/Unity-Technologies/multiplayer/blob/master/sampleproject/Assets/Samples/Asteroids/GameMain.cs",[890],[23107],{"type":603,"value":23108},"https://github.com/Unity-Technologi...eproject/Assets/Samples/Asteroids/GameMain.cs",{"type":603,"value":23110}," - see the code doing something like entityManager.AddComponentData(grid, new GhostDistanceImportance",{"type":597,"tag":606,"props":23112,"children":23113},{},[23114,23116],{"type":603,"value":23115},"We also add a GhostConnectionPosition to all connections when going in-game and there is a system to update the position - see ",{"type":597,"tag":886,"props":23117,"children":23120},{"href":23118,"rel":23119},"https://github.com/Unity-Technologies/multiplayer/blob/master/sampleproject/Assets/Samples/Asteroids/Server/Systems/UpdateConnectionPositionSystem.cs",[890],[23121],{"type":603,"value":23122},"https://github.com/Unity-Technologi...ver/Systems/UpdateConnectionPositionSystem.cs",{"type":597,"tag":606,"props":23124,"children":23125},{},[23126],{"type":597,"tag":886,"props":23127,"children":23130},{"href":23128,"rel":23129},"https://docs.unity3d.com/Packages/com.unity.netcode@0.5/manual/ghost-snapshots.html#distance-based-importance",[890],[23131],{"type":603,"value":23132},"Ghost snapshots | Unity NetCode | 0.5.0-preview.5 (unity3d.com)",{"type":597,"tag":606,"props":23134,"children":23135},{},[23136],{"type":597,"tag":886,"props":23137,"children":23140},{"href":23138,"rel":23139},"https://forum.unity.com/threads/unity-netcode-0-0-2-preview-1.785558/page-2",[890],[23141],{"type":603,"value":23142},"Unity NetCode 0.0.2-preview.1 | Page 2 - Unity Forum",{"type":597,"tag":606,"props":23144,"children":23145},{},[23146,23147],{"type":603,"value":19113},{"type":597,"tag":886,"props":23148,"children":23151},{"href":23149,"rel":23150},"https://forum.unity.com/threads/netcode-expected-amount-of-ghosts.790742/",[890],[23152],{"type":603,"value":23153},"NetCode] Expected amount of ghosts? - Unity Forum",{"type":597,"tag":606,"props":23155,"children":23156},{},[23157],{"type":603,"value":23158},"TileCenter offsets the grid a bit. Say you want 0,0,0 to be at the border of a tile instead of in the center of a tile, you would then set TileCenter to TileSize / 2. Unless you need fine grained control over the grid alignment you can just leave it at 0.",{"type":597,"tag":606,"props":23160,"children":23161},{},[23162],{"type":603,"value":23163},"The tile border is related to reducing tile changes when an entity is between two tiles. The tiles are expanded by a border to have some overlap. This overlap means that you have to go a bit (the border size) outside your current tile before you switch to a new one, so if you are the the edge between two tiles and move a little bit back and forth you will not switch tile every frame.",{"title":591,"searchDepth":787,"depth":787,"links":23165},[],"content:unity:2020-11-14-netcode.md","unity/2020-11-14-netcode.md","2020-11-14",{"_path":128,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":127,"description":23170,"body":23171,"_type":791,"_id":23412,"_source":793,"_file":23413,"_extension":795,"date":23414},"都知道反射伤性能，但不得不反射的时候又怎么办呢？当真的被问题逼迫的时候还是能找到解决办法的。",{"type":594,"children":23172,"toc":23408},[23173,23177,23182,23185,23190,23199,23204,23268,23273,23282,23287,23300,23305,23318,23323,23336,23345,23366,23379,23388],{"type":597,"tag":606,"props":23174,"children":23175},{},[23176],{"type":603,"value":23170},{"type":597,"tag":606,"props":23178,"children":23179},{},[23180],{"type":603,"value":23181},"为反射得到的方法创建一个委托，此后调用此委托将能够提高近乎直接调用方法本身的性能。（当然 Emit 也能够帮助我们显著提升性能，不过直接得到可以调用的委托不是更加方便吗？）",{"type":597,"tag":3720,"props":23183,"children":23184},{},[],{"type":597,"tag":1023,"props":23186,"children":23188},{"id":23187},"性能对比数据",[23189],{"type":603,"value":23187},{"type":597,"tag":606,"props":23191,"children":23192},{},[23193,23197],{"type":597,"tag":719,"props":23194,"children":23196},{"alt":23187,"src":23195},"/images/2020-11-13-Reflection-Method/20180227195855828",[],{"type":603,"value":23198},"\n▲ 没有什么能够比数据更有说服力（注意后面两行是有秒数的）",{"type":597,"tag":606,"props":23200,"children":23201},{},[23202],{"type":603,"value":23203},"可能我还需要解释一下那五行数据的含义：",{"type":597,"tag":803,"props":23205,"children":23206},{},[23207,23219,23230,23246,23257],{"type":597,"tag":807,"props":23208,"children":23209},{},[23210,23212,23217],{"type":603,"value":23211},"直接调用（��",{"type":597,"tag":1733,"props":23213,"children":23214},{},[23215],{"type":603,"value":23216},"应该没有什么比直接调用函数本身更有性能优势的吧",{"type":603,"value":23218},"）",{"type":597,"tag":807,"props":23220,"children":23221},{},[23222,23224,23229],{"type":603,"value":23223},"做一个跟直接调用的方法功能一模一样的委托（��",{"type":597,"tag":1733,"props":23225,"children":23226},{},[23227],{"type":603,"value":23228},"目的是看看调用委托相比调用方法本身是否有性能损失，从数据上看，损失非常小",{"type":603,"value":23218},{"type":597,"tag":807,"props":23231,"children":23232},{},[23233,23238,23240,23245],{"type":597,"tag":1080,"props":23234,"children":23235},{},[23236],{"type":603,"value":23237},"本文重点",{"type":603,"value":23239}," 将反射出来的方法创建一个委托，然后调用这个委托（��",{"type":597,"tag":1733,"props":23241,"children":23242},{},[23243],{"type":603,"value":23244},"看看吧，性能跟直接调差别也不大嘛",{"type":603,"value":23218},{"type":597,"tag":807,"props":23247,"children":23248},{},[23249,23251,23256],{"type":603,"value":23250},"先反射得到方法，然后一直调用这个方法（��",{"type":597,"tag":1733,"props":23252,"children":23253},{},[23254],{"type":603,"value":23255},"终于可以看出来反射本身还是挺伤性能的了，50 多倍的性能损失啊",{"type":603,"value":23218},{"type":597,"tag":807,"props":23258,"children":23259},{},[23260,23262,23267],{"type":603,"value":23261},"缓存都不用，从头开始反射然后调用得到的方法（��",{"type":597,"tag":1733,"props":23263,"children":23264},{},[23265],{"type":603,"value":23266},"100 多倍的性能损失了",{"type":603,"value":23218},{"type":597,"tag":606,"props":23269,"children":23270},{},[23271],{"type":603,"value":23272},"以下是测试代码，可以更好地理解上图数据的含义：",{"type":597,"tag":621,"props":23274,"children":23277},{"className":23275,"code":23276,"language":8105,"meta":591},[8107],"using System;\nusing System.Diagnostics;\nusing System.Reflection;\n\nnamespace Walterlv.Demo\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // 调用的目标实例。\n            var instance = new StubClass();\n\n            // 使用反射找到的方法。\n            var method = typeof(StubClass).GetMethod(nameof(StubClass.Test), new[] { typeof(int) });\n            Assert.IsNotNull(method);\n\n            // 将反射找到的方法创建一个委托。\n            var func = InstanceMethodBuilder\u003Cint, int>.CreateInstanceMethod(instance, method);\n\n            // 跟被测方法功能一样的纯委托。\n            Func\u003Cint, int> pureFunc = value => value;\n\n            // 测试次数。\n            var count = 10000000;\n\n            // 直接调用。\n            var watch = new Stopwatch();\n            watch.Start();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = instance.Test(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 直接调用\");\n\n            // 使用同样功能的 Func 调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = pureFunc(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用同样功能的 Func 调用\");\n\n            // 使用反射创建出来的委托调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = func(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用反射创建出来的委托调用\");\n\n            // 使用反射得到的方法缓存调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = method.Invoke(instance, new object[] { 5 });\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用反射得到的方法缓存调用\");\n\n            // 直接使用反射调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = typeof(StubClass).GetMethod(nameof(StubClass.Test), new[] { typeof(int) })\n                    ?.Invoke(instance, new object[] { 5 });\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 直接使用反射调用\");\n        }\n\n        private class StubClass\n        {\n            public int Test(int i)\n            {\n                return i;\n            }\n        }\n    }\n}\n",[23278],{"type":597,"tag":629,"props":23279,"children":23280},{"__ignoreMap":591},[23281],{"type":603,"value":23276},{"type":597,"tag":1023,"props":23283,"children":23285},{"id":23284},"如何实现",[23286],{"type":603,"value":23284},{"type":597,"tag":606,"props":23288,"children":23289},{},[23290,23292,23298],{"type":603,"value":23291},"实现的关键就在于 ",{"type":597,"tag":629,"props":23293,"children":23295},{"className":23294},[],[23296],{"type":603,"value":23297},"MethodInfo.CreateDelegate",{"type":603,"value":23299}," 方法。这是 .NET Standard 中就有的方法，这意味着 .NET Framework 和 .NET Core 中都可以使用。",{"type":597,"tag":606,"props":23301,"children":23302},{},[23303],{"type":603,"value":23304},"此方法有两个重载：",{"type":597,"tag":1321,"props":23306,"children":23307},{},[23308,23313],{"type":597,"tag":807,"props":23309,"children":23310},{},[23311],{"type":603,"value":23312},"要求传入一个类型，而这个类型就是应该转成的委托的类型",{"type":597,"tag":807,"props":23314,"children":23315},{},[23316],{"type":603,"value":23317},"要求传入一个类型和一个实例，一样的，类型是应该转成的委托的类型",{"type":597,"tag":606,"props":23319,"children":23320},{},[23321],{"type":603,"value":23322},"他们的区别在于前者创建出来的委托是直接调用那个实例方法本身，后者则更原始一些，真正调用的时候还需要传入一个实例对象。",{"type":597,"tag":606,"props":23324,"children":23325},{},[23326,23328,23334],{"type":603,"value":23327},"拿上面的 ",{"type":597,"tag":629,"props":23329,"children":23331},{"className":23330},[],[23332],{"type":603,"value":23333},"StubClass",{"type":603,"value":23335}," 来说明会更直观一些：",{"type":597,"tag":621,"props":23337,"children":23340},{"className":23338,"code":23339,"language":8105,"meta":591},[8107],"private class StubClass\n{\n    public int Test(int i)\n    {\n        return i;\n    }\n}\n",[23341],{"type":597,"tag":629,"props":23342,"children":23343},{"__ignoreMap":591},[23344],{"type":603,"value":23339},{"type":597,"tag":606,"props":23346,"children":23347},{},[23348,23350,23356,23358,23364],{"type":603,"value":23349},"前者得到的委托相当于 ",{"type":597,"tag":629,"props":23351,"children":23353},{"className":23352},[],[23354],{"type":603,"value":23355},"int Test(int i)",{"type":603,"value":23357}," 方法，后者得到的委托相当于 ",{"type":597,"tag":629,"props":23359,"children":23361},{"className":23360},[],[23362],{"type":603,"value":23363},"int Test(StubClass instance, int i)",{"type":603,"value":23365}," 方法。（在 IL 里实例的方法其实都是后者，而前者更像 C# 中的代码，容易理解。）",{"type":597,"tag":606,"props":23367,"children":23368},{},[23369,23371,23377],{"type":603,"value":23370},"单独使用 ",{"type":597,"tag":629,"props":23372,"children":23374},{"className":23373},[],[23375],{"type":603,"value":23376},"CreateDelegate",{"type":603,"value":23378}," 方法可能每次都需要尝试第一个参数到底应该传入些什么，于是我将其封装成了泛型版本，增加易用性。",{"type":597,"tag":621,"props":23380,"children":23383},{"className":23381,"code":23382,"language":8105,"meta":591},[8107],"using System;\nusing System.Linq;\nusing System.Reflection;\nusing System.Diagnostics.Contracts;\n\nnamespace Walterlv.Demo\n{\n    public static class InstanceMethodBuilder\u003CT, TReturnValue>\n    {\n        /// \u003Csummary>\n        /// 调用时就像 var result = func(t)。\n        /// \u003C/summary>\n        [Pure]\n        public static Func\u003CT, TReturnValue> CreateInstanceMethod\u003CTInstanceType>(TInstanceType instance, MethodInfo method)\n        {\n            if (instance == null) throw new ArgumentNullException(nameof(instance));\n            if (method == null) throw new ArgumentNullException(nameof(method));\n\n            return (Func\u003CT, TReturnValue>) method.CreateDelegate(typeof(Func\u003CT, TReturnValue>), instance);\n        }\n\n        /// \u003Csummary>\n        /// 调用时就像 var result = func(this, t)。\n        /// \u003C/summary>\n        [Pure]\n        public static Func\u003CTInstanceType, T, TReturnValue> CreateMethod\u003CTInstanceType>(MethodInfo method)\n        {\n            if (method == null)\n                throw new ArgumentNullException(nameof(method));\n\n            return (Func\u003CTInstanceType, T, TReturnValue>) method.CreateDelegate(typeof(Func\u003CTInstanceType, T, TReturnValue>));\n        }\n    }\n}\n",[23384],{"type":597,"tag":629,"props":23385,"children":23386},{"__ignoreMap":591},[23387],{"type":603,"value":23382},{"type":597,"tag":606,"props":23389,"children":23390},{},[23391,23393,23400,23406],{"type":603,"value":23392},"泛型的多参数版本可以使用泛型类型生成器生成，我在 ",{"type":597,"tag":886,"props":23394,"children":23397},{"href":23395,"rel":23396},"http://blog.csdn.net/WPwalter/article/details/79216183",[890],[23398],{"type":603,"value":23399},"生成代码，从 ",{"type":597,"tag":629,"props":23401,"children":23403},{"className":23402},[],[23404],{"type":603,"value":23405},"到",{"type":603,"value":23407}," —— 自动生成多个类型的泛型 - 吕毅 一文中写了一个泛型生成器，可以稍加修改以便适应这种泛型类。",{"title":591,"searchDepth":787,"depth":787,"links":23409},[23410,23411],{"id":23187,"depth":1530,"text":23187},{"id":23284,"depth":1530,"text":23284},"content:dotnet:2020-11-13-Reflection-Method.md","dotnet/2020-11-13-Reflection-Method.md","2020-11-13",{"_path":526,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":525,"description":23416,"body":23417,"_type":791,"_id":23437,"_source":793,"_file":23438,"_extension":795,"date":23414},"using Newtonsoft.Json;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEngine;\n\nnamespace DotHass.Unity\n{\n    public class SaveService : ISaveService\n    {\n        // IMPORTANT: Make sure to change this key for each project you use thi",{"type":594,"children":23418,"toc":23435},[23419,23427],{"type":597,"tag":621,"props":23420,"children":23422},{"code":23421},"using Newtonsoft.Json;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEngine;\n\nnamespace DotHass.Unity\n{\n    public class SaveService : ISaveService\n    {\n        // IMPORTANT: Make sure to change this key for each project you use this encryption in to help secure your\n        // encrypted values. This key must be exactly 32 characters long (256 bit).\n        public string Key = \":{j%6j?E:t#}G10mM%9hp5S=%}2,Y26e\";\n\n        public bool Encrypt = false;\n\n        public SaveService()\n        {\n            // Create a new encryption provider\n            SimpleEncryption.provider = new RijndaelManaged\n            {\n                // Get the bytes from the supplied string key and use it as the provider's key\n                Key = Encoding.ASCII.GetBytes(Key),\n\n                // Ensure that the same data is always encrypted the same way when used with the same key\n                Mode = CipherMode.ECB\n            };\n        }\n\n        protected Task DeleteAsync(string key)\n        {\n            var fullPath = this.GetFullPath(key);\n            this.Delete(fullPath);\n            return Task.CompletedTask;\n        }\n\n        protected Task SaveAsync(string key, object value)\n        {\n           \n\n            var fullPath = this.GetFullPath(key);\n            var content = JsonConvert.SerializeObject(value);\n\n            return WriteAsync(fullPath, content);\n        }\n\n        protected async Task\u003CT> LoadAsync\u003CT>(string key, T defaultValue)\n        {\n            var fullPath = this.GetFullPath(key);\n\n            if (this.Exists(fullPath) == false)\n            {\n                return defaultValue;\n            }\n            return await LoadAsync\u003CT>(key);\n        }\n\n        private async Task\u003CT> LoadAsync\u003CT>(string key)\n        {\n            var fullPath = this.GetFullPath(key);\n            var content = await this.ReadAsync(fullPath);\n            return JsonConvert.DeserializeObject\u003CT>(content);\n        }\n\n        protected string GetFullPath(string key)\n        {\n            return Path.Combine(Application.persistentDataPath, key.ToUpper());\n        }\n\n        public bool Exists(string fullPath)\n        {\n            return File.Exists(fullPath);\n        }\n\n        public void Delete(string fullPath)\n        {\n            if (File.Exists(fullPath))\n            {\n                File.Delete(fullPath);\n            }\n            else if (Directory.Exists(fullPath))\n            {\n                Directory.Delete(fullPath, true);\n            }\n        }\n\n        public async Task WriteAsync(string fullPath, string content)\n        {\n            if (this.Encrypt == true)\n            {\n                content = SimpleEncryption.EncryptString(content);\n            }\n            using (StreamWriter sw = new StreamWriter(fullPath, false, Encoding.UTF8))\n            {\n                //覆盖该文件\n                await sw.WriteAsync(content);\n            }\n        }\n\n        public async Task\u003Cstring> ReadAsync(string fullPath)\n        {\n            using (StreamReader sw = new StreamReader(fullPath, Encoding.UTF8))\n            {\n                var fetchedString = await sw.ReadToEndAsync();\n\n                if (this.Encrypt == true)\n                {\n                    fetchedString = SimpleEncryption.DecryptString(fetchedString);\n                }\n                return fetchedString;\n            }\n        }\n    }\n}\n",[23423],{"type":597,"tag":629,"props":23424,"children":23425},{"__ignoreMap":591},[23426],{"type":603,"value":23421},{"type":597,"tag":621,"props":23428,"children":23430},{"code":23429},"using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n/// \u003Csummary>\n/// https://github.com/sabresaurus/PlayerPrefsEditor/blob/master/Runtime/SimpleEncryption.cs\n/// \u003C/summary>\nnamespace DotHass.Unity\n{\n    public static class SimpleEncryption\n    {\n        // IMPORTANT: Make sure to change this key for each project you use this encryption in to help secure your\n        // encrypted values. This key must be exactly 32 characters long (256 bit).\n        private static readonly string key = \":{j%6j?E:t#}G10mM%9hp5S=%}2,Y26C\";\n\n        // Cache the encryption provider\n        public static RijndaelManaged provider = null;\n\n        private static void SetupProvider()\n        {\n            // Create a new encryption provider\n            provider = new RijndaelManaged();\n\n            // Get the bytes from the supplied string key and use it as the provider's key\n            provider.Key = Encoding.ASCII.GetBytes(key);\n\n            // Ensure that the same data is always encrypted the same way when used with the same key\n            provider.Mode = CipherMode.ECB;\n        }\n\n        /// \u003Csummary>\n        /// Encrypts the specified string using the key stored in SimpleEncryption and returns the encrypted result\n        /// \u003C/summary>\n        public static string EncryptString(string sourceString)\n        {\n            if (provider == null)\n            {\n                // Encryption provider hasn't been set up yet, so set it up\n                SetupProvider();\n            }\n\n            // Create an encryptor to encrypt the bytes\n            ICryptoTransform encryptor = provider.CreateEncryptor();\n\n            // Convert the source string into bytes to be encrypted\n            byte[] sourceBytes = Encoding.UTF8.GetBytes(sourceString);\n\n            // Encrypt the bytes using the encryptor we just created\n            byte[] outputBytes = encryptor.TransformFinalBlock(sourceBytes, 0, sourceBytes.Length);\n\n            // Convert the encrypted bytes into a Base 64 string, so we can safely represent them as a string and return\n            // that string\n            return Convert.ToBase64String(outputBytes);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the specified string from its specified encrypted value into the returned decrypted value using the\n        /// key stored in SimpleEncryption\n        /// \u003C/summary>\n        public static string DecryptString(string sourceString)\n        {\n            if (provider == null)\n            {\n                // Encryption provider hasn't been set up yet, so set it up\n                SetupProvider();\n            }\n\n            // Create a decryptor to decrypt the encrypted bytes\n            ICryptoTransform decryptor = provider.CreateDecryptor();\n\n            // Convert the base 64 string representing the encrypted bytes back into an array of encrypted bytes\n            byte[] sourceBytes = Convert.FromBase64String(sourceString);\n\n            // Use the decryptor we just created to decrypt those bytes\n            byte[] outputBytes = decryptor.TransformFinalBlock(sourceBytes, 0, sourceBytes.Length);\n\n            // Turn the decrypted bytes back into the decrypted string and return it\n            return Encoding.UTF8.GetString(outputBytes);\n        }\n\n        /// \u003Csummary>\n        /// Encrypts the specified float value and returns an encrypted string\n        /// \u003C/summary>\n        public static string EncryptFloat(float value)\n        {\n            // Convert the float into its 4 bytes\n            byte[] bytes = BitConverter.GetBytes(value);\n\n            // Represent those bytes as a base 64 string\n            string base64 = Convert.ToBase64String(bytes);\n\n            // Return the encrypted version of that base 64 string\n            return SimpleEncryption.EncryptString(base64);\n        }\n\n        /// \u003Csummary>\n        /// Encrypts the specified int value and returns an encrypted string\n        /// \u003C/summary>\n        public static string EncryptInt(int value)\n        {\n            // Convert the int value into its 4 bytes\n            byte[] bytes = BitConverter.GetBytes(value);\n\n            // Represent those bytes as a base 64 string\n            string base64 = Convert.ToBase64String(bytes);\n\n            // Return the encrypted version of that base 64 string\n            return SimpleEncryption.EncryptString(base64);\n        }\n\n        /// Encrypts the specified bool value and returns an encrypted string\n        /// \u003C/summary>\n        public static string EncryptBool(bool value)\n        {\n            // Convert the bool value into its 4 bytes\n            byte[] bytes = BitConverter.GetBytes(value);\n\n            // Represent those bytes as a base 64 string\n            string base64 = Convert.ToBase64String(bytes);\n\n            // Return the encrypted version of that base 64 string\n            return SimpleEncryption.EncryptString(base64);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the encrypted string representing a float into the decrypted float\n        /// \u003C/summary>\n        public static float DecryptFloat(string sourceString)\n        {\n            // Decrypt the encrypted string\n            string decryptedString = SimpleEncryption.DecryptString(sourceString);\n\n            // Convert the decrypted Base 64 representation back into bytes\n            byte[] bytes = Convert.FromBase64String(decryptedString);\n\n            // Turn the bytes back into a float and return it\n            return BitConverter.ToSingle(bytes, 0);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the encrypted string representing an int into the decrypted int\n        /// \u003C/summary>\n        public static int DecryptInt(string sourceString)\n        {\n            // Decrypt the encrypted string\n            string decryptedString = SimpleEncryption.DecryptString(sourceString);\n\n            // Convert the decrypted Base 64 representation back into bytes\n            byte[] bytes = Convert.FromBase64String(decryptedString);\n\n            // Turn the bytes back into a int and return it\n            return BitConverter.ToInt32(bytes, 0);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the encrypted string representing a bool into the decrypted bool\n        /// \u003C/summary>\n        public static bool DecryptBool(string sourceString)\n        {\n            // Decrypt the encrypted string\n            string decryptedString = SimpleEncryption.DecryptString(sourceString);\n\n            // Convert the decrypted Base 64 representation back into bytes\n            byte[] bytes = Convert.FromBase64String(decryptedString);\n\n            // Turn the bytes back into a bool and return it\n            return BitConverter.ToBoolean(bytes, 0);\n        }\n    }\n}\n",[23431],{"type":597,"tag":629,"props":23432,"children":23433},{"__ignoreMap":591},[23434],{"type":603,"value":23429},{"title":591,"searchDepth":787,"depth":787,"links":23436},[],"content:unity:2020-11-13-simple-save.md","unity/2020-11-13-simple-save.md",{"_path":523,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":522,"description":23440,"body":23441,"_type":791,"_id":23730,"_source":793,"_file":23731,"_extension":795,"date":23732},"coffeecato写在前面：\n本文确实不错，作者用以说明自动生成网格的示图非常具有代表性，从drawcall的生成过程分析性能开销的重点，引出了overdraw和达到GPU像素填充率限制的原因，从中也可以看出作者对这个主题的理解颇有深度。查看作者的个人自述，居然是个2012年毕业的小伙子，后生可畏啊！翻译本文对自己也是个考验。\n英文水平捉急，如果错误请多多指正。",{"type":594,"children":23442,"toc":23728},[23443,23447,23472,23477,23482,23498,23513,23521,23526,23531,23536,23541,23558,23567,23572,23580,23585,23590,23618,23623,23628,23654,23659,23668,23677,23685,23690],{"type":597,"tag":606,"props":23444,"children":23445},{},[23446],{"type":603,"value":23440},{"type":597,"tag":606,"props":23448,"children":23449},{},[23450,23455,23465,23467],{"type":597,"tag":1733,"props":23451,"children":23452},{},[23453],{"type":603,"value":23454},"原文：",{"type":597,"tag":886,"props":23456,"children":23459},{"href":23457,"rel":23458},"https://rubentorresbonet.wordpress.com/2016/05/26/unity-sprites-spriterenderer-vs-canvasrenderer-ui-image/",[890],[23460],{"type":597,"tag":1733,"props":23461,"children":23462},{},[23463],{"type":603,"value":23464},"UNITY SPRITES: SPRITERENDERER VS. CANVASRENDERER (UI IMAGE)",{"type":603,"value":23466},"\n翻译已征得原作者同意：\n",{"type":597,"tag":719,"props":23468,"children":23471},{"alt":23469,"src":23470},"这里写图片描述","/images/2020-11-12-sprite-image-diff/20171116103038856",[],{"type":597,"tag":606,"props":23473,"children":23474},{},[23475],{"type":603,"value":23476},"当在一个公司项目工作时，我被问到关于sprites(SpriteRenderer)和UI image(CanvasRenderer)的区别。我没找到多少相关的信息，所以我决定在公司准备一场介绍来帮助大家把两者的区别搞清楚。本文中你将会看到一个比当时的介绍更完整的版本。运行环境是Unity5.3.4f1.",{"type":597,"tag":606,"props":23478,"children":23479},{},[23480],{"type":603,"value":23481},"Sprites本质上是半透明texture，其中texture是在导入时被设置导入为sprites的。它们不是直接被应用于meshes,而是会应用于长方形/多边形（最后，它们始终是meshes，因为没有那么大的区别）。Sprites就是被渲染到2d/3d场景或者其他界面中的图片.",{"type":597,"tag":606,"props":23483,"children":23484},{},[23485,23490,23492,23496],{"type":597,"tag":1080,"props":23486,"children":23487},{},[23488],{"type":603,"value":23489},"1.用法",{"type":603,"value":23491},"\n在Unity中使用sprites很简单。只需将目标图片移动到assets文件夹下然后点击打开inspector settings.将texture type改为sprite(2D and UI),如下图：\n",{"type":597,"tag":719,"props":23493,"children":23495},{"alt":23469,"src":23494},"/images/2020-11-12-sprite-image-diff/20171114233841299",[],{"type":603,"value":23497},"\n现在你该决定将图片当成sprite使用还是作为UI Image.但是如果考虑到渲染，你可能并不确定你想要使用哪种方式。我们将会在下一节描述两种方式间的区别；现在我们大概描述一下如何在Unity中创建它们。",{"type":597,"tag":606,"props":23499,"children":23500},{},[23501,23503,23507,23509],{"type":603,"value":23502},"如果你想使用SpriteRenderer,将sprite从Project窗口移动到Hierarchy窗口或者Scene窗口。成功创建后的窗口应该像这样：\n",{"type":597,"tag":719,"props":23504,"children":23506},{"alt":23469,"src":23505},"/images/2020-11-12-sprite-image-diff/20171114233856654",[],{"type":603,"value":23508},"\n如果你想创建UI Image,在Hierarchy中右键然后create new UI–>Image.这个控件需要canvas,如果没有canvas会自动创建一个。最后，你将看到：\n",{"type":597,"tag":719,"props":23510,"children":23512},{"alt":23469,"src":23511},"/images/2020-11-12-sprite-image-diff/20171114233911906",[],{"type":597,"tag":606,"props":23514,"children":23515},{},[23516],{"type":597,"tag":1080,"props":23517,"children":23518},{},[23519],{"type":603,"value":23520},"2.对比：SpriteRenderer vs CanvasRenderer",{"type":597,"tag":606,"props":23522,"children":23523},{},[23524],{"type":603,"value":23525},"在Hierarchy窗口,你可以把sprites随便放在哪。然而，UI Images不得不放在canvas下面。你可以通过transform移动其他obejcts那样移动sprites,但是images使用RectTransform来在界面系统中移动。",{"type":597,"tag":606,"props":23527,"children":23528},{},[23529],{"type":603,"value":23530},"使用默认材质时，Sprites是在”Queue” = “Transparent” “RenderType” = “Geometry”(原文： transparent geometry queue)模式下渲染的。UI Images也是在这种模式下渲染的，除非你使用了Overlay 模式渲染（coffeecato补充：Canvas的Render Mode）,这种情况下它将会通过Canvas.RenderOverlay渲染。你可能会猜到，这样在移动设备上的开销很大。我们稍后会讨论到。",{"type":597,"tag":606,"props":23532,"children":23533},{},[23534],{"type":603,"value":23535},"sprites和images的一个最重要的区别在于sprites支持网格的自动构造，而UI Image的网格始终由矩形构成。构造网格的原因将会在下一节讲到；我们将会看到它的重要性及它对性能的重大影响。",{"type":597,"tag":606,"props":23537,"children":23538},{},[23539],{"type":603,"value":23540},"最后，两种方式都可以通过使用sprite atlases来减少draw calls.",{"type":597,"tag":606,"props":23542,"children":23543},{},[23544,23546,23550,23552,23556],{"type":603,"value":23545},"下面的例子将会帮助看到二者之间的区别：\n",{"type":597,"tag":719,"props":23547,"children":23549},{"alt":23469,"src":23548},"/images/2020-11-12-sprite-image-diff/20171114233924452",[],{"type":603,"value":23551},"\n上图中可以看到，UI Image创造了一个紧密的矩形来包裹sprite,而SpriteRenderer创造了一个能更好匹配将要渲染的sprite的网格。看看另一个例子：\n",{"type":597,"tag":719,"props":23553,"children":23555},{"alt":23469,"src":23554},"/images/2020-11-12-sprite-image-diff/20171114233938619",[],{"type":603,"value":23557},"\n同样的情况出现这个例子中。但是网格这次看起来更复杂了，为什么呢？Unity尝试去为sprites构造最佳的网格来避免引入太多的多边形。可能有人会说这样的权衡到底是利是弊。",{"type":597,"tag":606,"props":23559,"children":23560},{},[23561,23563],{"type":603,"value":23562},"如果我们导入一张拥有孤岛（coffeecato补充：原文是islands）的png，一张图片包含被透明区域分隔开的图形会发生什么情况？\n",{"type":597,"tag":719,"props":23564,"children":23566},{"alt":23469,"src":23565},"/images/2020-11-12-sprite-image-diff/20171114233951951",[],{"type":597,"tag":606,"props":23568,"children":23569},{},[23570],{"type":603,"value":23571},"上图中我们看到的情况很有意思，SpriteRenderer创造了两个子网格，一个对应一个孤岛；然后UI Image只是通过扩展矩形来覆盖整个图片。",{"type":597,"tag":606,"props":23573,"children":23574},{},[23575],{"type":597,"tag":1080,"props":23576,"children":23577},{},[23578],{"type":603,"value":23579},"3.性能",{"type":597,"tag":606,"props":23581,"children":23582},{},[23583],{"type":603,"value":23584},"你可能会猜到，上面例子显示的不同处理方式可能会导致性能的差异。当渲染很多对象时，差别会更明显（比如地形中的草，或者粒子特效）。下面我们来分析一下其中的原因。",{"type":597,"tag":606,"props":23586,"children":23587},{},[23588],{"type":603,"value":23589},"当渲染texture时，设置好顶点，索引，uv坐标，纹理数据和shader参数，然后向GPU发送数据，这个过程就是著名的draw call.随后，在图片最终显示之前，一些乱七八糟的事情在GPU发生。一个简单的渲染管线通常包括：",{"type":597,"tag":803,"props":23591,"children":23592},{},[23593,23598,23603,23608,23613],{"type":597,"tag":807,"props":23594,"children":23595},{},[23596],{"type":603,"value":23597},"CPU 发送一个draw命令到GPU",{"type":597,"tag":807,"props":23599,"children":23600},{},[23601],{"type":603,"value":23602},"GPU获取到绘制所需的所有信息",{"type":597,"tag":807,"props":23604,"children":23605},{},[23606],{"type":603,"value":23607},"几何图形通过顶点着色器和光栅化被转化为像素",{"type":597,"tag":807,"props":23609,"children":23610},{},[23611],{"type":603,"value":23612},"每个像素通过片元着色器被转化然后被写入到帧缓存一次或数次",{"type":597,"tag":807,"props":23614,"children":23615},{},[23616],{"type":603,"value":23617},"当一帧结束时，图形会显示在你的显示器上",{"type":597,"tag":606,"props":23619,"children":23620},{},[23621],{"type":603,"value":23622},"回到主题，SpriteRenderer和UI Image之间的区别是什么？显而易见，sprites的开销更大，因为它的几何数据更复杂。但是如果我告诉你顶点操作通常比片元操作开销小的多呢？尤其对于移动设备和半透明对象。",{"type":597,"tag":606,"props":23624,"children":23625},{},[23626],{"type":603,"value":23627},"在很多引擎包括Unity中，半透明材质是由后向前渲染的。那意味着，最远的物体（从camera出发）最先渲染，这样alpha混合操作才能像预期那样工作。对于不透明材质，渲染正好反过来这样便于我们剔除不可见物体。",{"type":597,"tag":606,"props":23629,"children":23630},{},[23631,23633,23638,23640,23645,23647,23652],{"type":603,"value":23632},"像素着色器会被渲染sprite中的每一个像素都执行，因此，当存在较大的图形时（相对屏幕尺寸），片元着色器将会在很多像素上执行。问题在于，当透明物体在视锥体内时没有很有效的方法将它们剔除，因此你将会渲染所有的半透明物体即使其中的大多数最终都不可见。所以你会发现同一个像素会渲染多次，在帧缓存中也会重写多次。这个问题通常被称为",{"type":597,"tag":1080,"props":23634,"children":23635},{},[23636],{"type":603,"value":23637},"overdraw",{"type":603,"value":23639},".同样地，由于这种现象带来了",{"type":597,"tag":1080,"props":23641,"children":23642},{},[23643],{"type":603,"value":23644},"内存带宽",{"type":603,"value":23646},"的浪费，会很快达到GPU ",{"type":597,"tag":1080,"props":23648,"children":23649},{},[23650],{"type":603,"value":23651},"像素填充率",{"type":603,"value":23653},"的限制，这种情况是移动设备应当极力避免的。这就是问题的关键。",{"type":597,"tag":606,"props":23655,"children":23656},{},[23657],{"type":603,"value":23658},"如果你确实理解了上面一段，你将会弄明白SpriteRenderer和CanvasRenderer是多么的不同。前者通过构造网格清除了不必要的透明像素（因此，避免了执行开销巨大的片元着色器，从而避免了overdraw），然而UI Image创建了一个简单的网格很可能会引起很多overdraw。你需要在复杂的几何图形和更多的片操作之间做一个权衡。",{"type":597,"tag":606,"props":23660,"children":23661},{},[23662,23664],{"type":603,"value":23663},"你应该会想到使用sprite atlases，因为spritest通常数量很大同时尺寸很小。这会导致绘制sprites有很多drawcall.同样地，对于较大的图形，图形压缩也是不错的方法。\n",{"type":597,"tag":719,"props":23665,"children":23667},{"alt":23469,"src":23666},"/images/2020-11-12-sprite-image-diff/20171114234009365",[],{"type":597,"tag":606,"props":23669,"children":23670},{},[23671,23673],{"type":603,"value":23672},"你可以通过Atlas Packer很方便的创建sprite atlas.同时，有时自动构造的网格性能上并不好你也无法控制它，因此你可能会使用一些性能更好的插件比如ShoeBox 或者 TexturePacker.\n",{"type":597,"tag":719,"props":23674,"children":23676},{"alt":23469,"src":23675},"/images/2020-11-12-sprite-image-diff/20171114234059641",[],{"type":597,"tag":606,"props":23678,"children":23679},{},[23680],{"type":597,"tag":1080,"props":23681,"children":23682},{},[23683],{"type":603,"value":23684},"4.结论",{"type":597,"tag":606,"props":23686,"children":23687},{},[23688],{"type":603,"value":23689},"当下次再遇到sprites时，不妨考虑下面的建议：",{"type":597,"tag":803,"props":23691,"children":23692},{},[23693,23698,23703,23708,23713,23718,23723],{"type":597,"tag":807,"props":23694,"children":23695},{},[23696],{"type":603,"value":23697},"如果sprites的数量不多，想用什么用什么。如果拥有上百个sprites，重新读读本文。",{"type":597,"tag":807,"props":23699,"children":23700},{},[23701],{"type":603,"value":23702},"使用profiler和frame debugger来搞清楚发生的状况。",{"type":597,"tag":807,"props":23704,"children":23705},{},[23706],{"type":603,"value":23707},"避免使用透明，尽量使用不透明的物体替代透明物体。",{"type":597,"tag":807,"props":23709,"children":23710},{},[23711],{"type":603,"value":23712},"避免在屏幕上渲染尺寸较大的sprites，这会引起更多的overdraw。你可以通过在Scene View中选择rendering mode为Overdraw来查看overdraw的情况。这对于粒子特效很关键。",{"type":597,"tag":807,"props":23714,"children":23715},{},[23716],{"type":603,"value":23717},"选择更复杂的几何体而不是更多的像素，尤其对于移动设备。可以通过选择Scene View中的Shading Mode为shaded wireframe来查看。",{"type":597,"tag":807,"props":23719,"children":23720},{},[23721],{"type":603,"value":23722},"如果需要对界面进行较多的位置操作（比如content fitter, vertical groups等）选择UI Images.",{"type":597,"tag":807,"props":23724,"children":23725},{},[23726],{"type":603,"value":23727},"减少渲染区域的分辨率来查看性能有没有实质的提升，通过这种方法来判断是否达到了像素填充率的限制。",{"title":591,"searchDepth":787,"depth":787,"links":23729},[],"content:unity:2020-11-12-sprite-image-diff.md","unity/2020-11-12-sprite-image-diff.md","2020-11-12",{"_path":520,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":519,"description":23734,"body":23735,"_type":791,"_id":24138,"_source":793,"_file":24139,"_extension":795,"date":24140},"1. 使用SystemStateComponent原理所谓State，含义是只能被手动删除的Component，在删除Entity后，依然留下做一些殿后工作，只有被指名要求删除的时候才会被删除。这种特性就让我们可以通过不同的Query去获得结构变化的消息。栗子假设我们有一个Entity，身上有两个组件，A：IComponentData 与 B: ISystemStateComponentData当我们添加A组件的时候，通过Filter{ 有A无B }，我们可以在别处得知这个Entity何时被添加。在添加后手动加入B组件。当我们删除Entity，或者移除A组件的时候，通过Filter { 有B无",{"type":594,"children":23736,"toc":24121},[23737,23743,23748,23753,23758,23776,23781,23787,23792,23800,23803,23808,23813,23819,23824,23833,23838,23847,23852,23891,23896,23909,23914,23937,23943,23951,23956,23965,23971,23976,23984,23989,23998,24004,24009,24014,24023,24029,24034,24057,24066,24072,24082,24092,24102,24112],{"type":597,"tag":1023,"props":23738,"children":23740},{"id":23739},"_1-使用systemstatecomponent",[23741],{"type":603,"value":23742},"1. 使用SystemStateComponent",{"type":597,"tag":1023,"props":23744,"children":23746},{"id":23745},"原理",[23747],{"type":603,"value":23745},{"type":597,"tag":606,"props":23749,"children":23750},{},[23751],{"type":603,"value":23752},"所谓State，含义是只能被手动删除的Component，在删除Entity后，依然留下做一些殿后工作，只有被指名要求删除的时候才会被删除。这种特性就让我们可以通过不同的Query去获得结构变化的消息。",{"type":597,"tag":1023,"props":23754,"children":23756},{"id":23755},"栗子",[23757],{"type":603,"value":23755},{"type":597,"tag":803,"props":23759,"children":23760},{},[23761,23766,23771],{"type":597,"tag":807,"props":23762,"children":23763},{},[23764],{"type":603,"value":23765},"假设我们有一个Entity，身上有两个组件，A：IComponentData 与 B: ISystemStateComponentData",{"type":597,"tag":807,"props":23767,"children":23768},{},[23769],{"type":603,"value":23770},"当我们添加A组件的时候，通过Filter{ 有A无B }，我们可以在别处得知这个Entity何时被添加。在添加后手动加入B组件。",{"type":597,"tag":807,"props":23772,"children":23773},{},[23774],{"type":603,"value":23775},"当我们删除Entity，或者移除A组件的时候，通过Filter { 有B无A }，同理可得知何时这个Entity被移除或是A组件被移除。",{"type":597,"tag":606,"props":23777,"children":23778},{},[23779],{"type":603,"value":23780},"更具体的实现可以在查看官方对于ParentSystem的设计。",{"type":597,"tag":1023,"props":23782,"children":23784},{"id":23783},"_2-查询componentversion",[23785],{"type":603,"value":23786},"2. 查询ComponentVersion",{"type":597,"tag":606,"props":23788,"children":23789},{},[23790],{"type":603,"value":23791},"每当出现某Component相关的结构性变化的时候，该Component的版本就会+1 。",{"type":597,"tag":621,"props":23793,"children":23795},{"code":23794},"EntityManager.GetComponentVersion()\n",[23796],{"type":597,"tag":629,"props":23797,"children":23798},{"__ignoreMap":591},[23799],{"type":603,"value":23794},{"type":597,"tag":3720,"props":23801,"children":23802},{},[],{"type":597,"tag":598,"props":23804,"children":23806},{"id":23805},"数据变化",[23807],{"type":603,"value":23805},{"type":597,"tag":606,"props":23809,"children":23810},{},[23811],{"type":603,"value":23812},"顾名思义。方法有三种。",{"type":597,"tag":1023,"props":23814,"children":23816},{"id":23815},"_1-chunk检查",[23817],{"type":603,"value":23818},"1. Chunk检查",{"type":597,"tag":1023,"props":23820,"children":23822},{"id":23821},"原理-1",[23823],{"type":603,"value":23745},{"type":597,"tag":621,"props":23825,"children":23828},{"code":23826,"language":8105,"meta":591,"className":23827},"chunk.DidChange(ArchetypeChunkComponentType, version)\n",[8107],[23829],{"type":597,"tag":629,"props":23830,"children":23831},{"__ignoreMap":591},[23832],{"type":603,"value":23826},{"type":597,"tag":606,"props":23834,"children":23835},{},[23836],{"type":603,"value":23837},"查看其内部实现",{"type":597,"tag":621,"props":23839,"children":23842},{"code":23840,"language":8105,"meta":591,"className":23841},"if ( ComponentVer > LastSystemVersion ) \n",[8107],[23843],{"type":597,"tag":629,"props":23844,"children":23845},{"__ignoreMap":591},[23846],{"type":603,"value":23840},{"type":597,"tag":606,"props":23848,"children":23849},{},[23850],{"type":603,"value":23851},"什么意思呢？",{"type":597,"tag":803,"props":23853,"children":23854},{},[23855,23867,23886],{"type":597,"tag":807,"props":23856,"children":23857},{},[23858,23860,23865],{"type":603,"value":23859},"GlobalSystemVersion为记录一个世界所有系统更新信息的版本号。在每一个系统更新",{"type":597,"tag":1080,"props":23861,"children":23862},{},[23863],{"type":603,"value":23864},"之前",{"type":603,"value":23866},"，GSV++。",{"type":597,"tag":807,"props":23868,"children":23869},{},[23870,23872,23877,23879,23884],{"type":603,"value":23871},"LastSystemVersion为系统记录自己的版本号。在某系统更新",{"type":597,"tag":1080,"props":23873,"children":23874},{},[23875],{"type":603,"value":23876},"之后",{"type":603,"value":23878},"，它会保存GSV，含义是",{"type":597,"tag":1080,"props":23880,"children":23881},{},[23882],{"type":603,"value":23883},"上次",{"type":603,"value":23885},"运行时的版本号，直到下次某系统更新之后，它的版本号不会更改",{"type":597,"tag":807,"props":23887,"children":23888},{},[23889],{"type":603,"value":23890},"每一种Component，在System申请写入权限的时候，都会记录该System的LSV 获取方式为chunk.GetArch",{"type":597,"tag":606,"props":23892,"children":23893},{},[23894],{"type":603,"value":23895},"因此，if ( ComponentVer > LSV ) 就说明该Component被修改了（有系统获得了写入权限）。翻译成大白话，就是Component是否在提供的版本号之后的时间被更新？在当前系统请求LSV的结果是上一帧该系统的版本号，如果Component被写入时的版本号大于该系统上一帧的版本号，就说明Component在此时至上一帧的某个时间点被写入。",{"type":597,"tag":1321,"props":23897,"children":23898},{},[23899,23904],{"type":597,"tag":807,"props":23900,"children":23901},{},[23902],{"type":603,"value":23903},"由于这个Component只有在遍历的时候申请写入权限时才会记住版本号，因此EntityManager手动更新信息是不会被记录的。",{"type":597,"tag":807,"props":23905,"children":23906},{},[23907],{"type":603,"value":23908},"这个信息时效性只有一帧，从上次该系统更新后到这次更新后的一帧，因此在这次更新中，修改Component后查询是否改变，答案是True，反之为False。",{"type":597,"tag":1023,"props":23910,"children":23912},{"id":23911},"举例",[23913],{"type":603,"value":23911},{"type":597,"tag":803,"props":23915,"children":23916},{},[23917,23922,23927,23932],{"type":597,"tag":807,"props":23918,"children":23919},{},[23920],{"type":603,"value":23921},"系统的更新顺序为A->B->C->A",{"type":597,"tag":807,"props":23923,"children":23924},{},[23925],{"type":603,"value":23926},"那么GSV ：0 -> 1 -> 2 -> 3，每个系统更新之前+1",{"type":597,"tag":807,"props":23928,"children":23929},{},[23930],{"type":603,"value":23931},"当数据在B系统被写入，Component就记住了B的GSV = 1",{"type":597,"tag":807,"props":23933,"children":23934},{},[23935],{"type":603,"value":23936},"当我们在第二次轮到A系统的时候监测是否Component被改动，DidChange自动使用A系统上次的GSV记录 LSV = 0 与 Component记录的信息CV = 1做对比，发现CV > LSV，得知信息已经被更改了，返回True。",{"type":597,"tag":1023,"props":23938,"children":23940},{"id":23939},"api",[23941],{"type":603,"value":23942},"API",{"type":597,"tag":621,"props":23944,"children":23946},{"code":23945},"chunk.DidChange(InputAType, LastSystemVersion);\n",[23947],{"type":597,"tag":629,"props":23948,"children":23949},{"__ignoreMap":591},[23950],{"type":603,"value":23945},{"type":597,"tag":606,"props":23952,"children":23953},{},[23954],{"type":603,"value":23955},"注意LSV应从EntityManager.LastSystemVersion取得，并传入Job",{"type":597,"tag":621,"props":23957,"children":23960},{"code":23958,"language":8105,"meta":591,"className":23959},"[BurstCompile]\nstruct UpdateJob : IJobChunk\n{\n   public ArchetypeChunkComponentType\u003CInputA> InputAType;\n   public ArchetypeChunkComponentType\u003CInputB> InputBType;\n   [ReadOnly] public ArchetypeChunkComponentType\u003COutput> OutputType;\n   public uint LastSystemVersion;\n\n   public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n   {\n       var inputAChanged = chunk.DidChange(InputAType, LastSystemVersion);\n       var inputBChanged = chunk.DidChange(InputBType, LastSystemVersion);\n       if (!(inputAChanged || inputBChanged))\n           return;\n      //...\n}\n",[8107],[23961],{"type":597,"tag":629,"props":23962,"children":23963},{"__ignoreMap":591},[23964],{"type":603,"value":23958},{"type":597,"tag":1023,"props":23966,"children":23968},{"id":23967},"_2-query自动检查",[23969],{"type":603,"value":23970},"2. Query自动检查",{"type":597,"tag":606,"props":23972,"children":23973},{},[23974],{"type":603,"value":23975},"在声明Query的时候，特别注明",{"type":597,"tag":621,"props":23977,"children":23979},{"code":23978},"m_Group.SetFilterChanged(new ComponentType{ typeof(InputA), typeof(InputB)});\n",[23980],{"type":597,"tag":629,"props":23981,"children":23982},{"__ignoreMap":591},[23983],{"type":603,"value":23978},{"type":597,"tag":606,"props":23985,"children":23986},{},[23987],{"type":603,"value":23988},"这样Query就会把没被修改的ComponentType排除在外。注意，这种检查是Component层级，而不是单个Entity层级的。",{"type":597,"tag":621,"props":23990,"children":23993},{"code":23991,"language":8105,"meta":591,"className":23992},"EntityQuery m_Group;\nprotected override void OnCreate()\n{\n   m_Group = GetEntityQuery(typeof(Output), \n                               ComponentType.ReadOnly\u003CInputA>(), \n                               ComponentType.ReadOnly\u003CInputB>());\n   m_Group.SetFilterChanged(new ComponentType{ typeof(InputA), typeof(InputB)});\n}\n",[8107],[23994],{"type":597,"tag":629,"props":23995,"children":23996},{"__ignoreMap":591},[23997],{"type":603,"value":23991},{"type":597,"tag":1023,"props":23999,"children":24001},{"id":24000},"_3-ijobforeach中使用-changefilter",[24002],{"type":603,"value":24003},"3. IJobForEach中使用 [ChangeFilter]",{"type":597,"tag":606,"props":24005,"children":24006},{},[24007],{"type":603,"value":24008},"与Query的排除效果类似。",{"type":597,"tag":1023,"props":24010,"children":24012},{"id":24011},"示例",[24013],{"type":603,"value":24011},{"type":597,"tag":621,"props":24015,"children":24018},{"code":24016,"language":8105,"meta":591,"className":24017},"public struct ProcessTendency : IJobForEachWithEntity\u003CHumanState, HumanStock>\n{\n    public void Execute(Entity entity, int index, [ChangedFilter] ref State state)\n    {\n",[8107],[24019],{"type":597,"tag":629,"props":24020,"children":24021},{"__ignoreMap":591},[24022],{"type":603,"value":24016},{"type":597,"tag":598,"props":24024,"children":24026},{"id":24025},"best-practice",[24027],{"type":603,"value":24028},"Best Practice",{"type":597,"tag":606,"props":24030,"children":24031},{},[24032],{"type":603,"value":24033},"对自己的系统做了一些单元测试后，我觉得有几点应该记录下来。",{"type":597,"tag":1321,"props":24035,"children":24036},{},[24037,24042,24047,24052],{"type":597,"tag":807,"props":24038,"children":24039},{},[24040],{"type":603,"value":24041},"如果要做一套响应式系统循环触发，慎用EntityManager获取信息。因为EntityManager的Get系列API会直接获取写入权限。",{"type":597,"tag":807,"props":24043,"children":24044},{},[24045],{"type":603,"value":24046},"Job有延迟，因此单元测试的时候，如果涉及Version，应该做一些操作“等待”正确的版本号刷新，比如Debug.Log()。",{"type":597,"tag":807,"props":24048,"children":24049},{},[24050],{"type":603,"value":24051},"GetEntityQuery会在系统注册，因此在Query里SetFilterChanged即可，毋需在Execute()中再声明一遍。",{"type":597,"tag":807,"props":24053,"children":24054},{},[24055],{"type":603,"value":24056},"在主线程获取DynamicBuffer的长度时，Query与EM都不能做到以只读方式做到。因此正确的做法是",{"type":597,"tag":621,"props":24058,"children":24061},{"code":24059,"language":8105,"meta":591,"className":24060},"var query    = GetEntityQuery(ComponentType.ReadOnly\u003CT>());\nvar entities  = query.ToEntityArray(Allocator.TempJob);\nvar entity    = entities[0];\nvar length   = EntityManager.GetChunk(entity).GetBufferAccessor(GetArchetypeChunkBufferType\u003CTendency>(true))[0].Length;\nentities.Dispose();\n",[8107],[24062],{"type":597,"tag":629,"props":24063,"children":24064},{"__ignoreMap":591},[24065],{"type":603,"value":24059},{"type":597,"tag":598,"props":24067,"children":24069},{"id":24068},"reference",[24070],{"type":603,"value":24071},"Reference",{"type":597,"tag":606,"props":24073,"children":24074},{},[24075],{"type":597,"tag":886,"props":24076,"children":24079},{"href":24077,"rel":24078},"https://link.zhihu.com/?target=https%3A//gametorrahod.com/designing-an-efficient-system-with-version-numbers/",[890],[24080],{"type":603,"value":24081},"https://gametorrahod.com/designing-an-efficient-system-with-version-numbers/",{"type":597,"tag":606,"props":24083,"children":24084},{},[24085],{"type":597,"tag":886,"props":24086,"children":24089},{"href":24087,"rel":24088},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Packages/com.unity.entities%400.0/manual/chunk_iteration_job.html",[890],[24090],{"type":603,"value":24091},"Using IJobChunk | Package Manager UI website",{"type":597,"tag":606,"props":24093,"children":24094},{},[24095],{"type":597,"tag":886,"props":24096,"children":24099},{"href":24097,"rel":24098},"https://medium.com/@icex33/coping-with-change-in-unity3d-ecs-45422fff8dda#id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6ImQ5NDZiMTM3NzM3Yjk3MzczOGU1Mjg2YzIwOGI2NmU3YTM5ZWU3YzEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2MDUxMTkzMDksImF1ZCI6IjIxNjI5NjAzNTgzNC1rMWs2cWUwNjBzMnRwMmEyamFtNGxqZGNtczAwc3R0Zy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNTYwNDIyOTcxMDAwNDczMDgwOCIsImVtYWlsIjoiemhlcGFtYUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXpwIjoiMjE2Mjk2MDM1ODM0LWsxazZxZTA2MHMydHAyYTJqYW00bGpkY21zMDBzdHRnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwibmFtZSI6IuadjuS5neS7mSIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLXlfSnhUTXJkQWk4L0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBL0FNWnV1Y25xLVNRSGVVR1FRUENfUjJ0Zk93RGh2QzRHbHcvczk2LWMvcGhvdG8uanBnIiwiZ2l2ZW5fbmFtZSI6IuS5neS7mSIsImZhbWlseV9uYW1lIjoi5p2OIiwiaWF0IjoxNjA1MTE5NjA5LCJleHAiOjE2MDUxMjMyMDksImp0aSI6IjQyM2E3NTM3NmE0YTZkNzI3ODgzYmYyZDIyMDljMGNjZTg2NDRjMTUifQ.eicZfv00n72yCqIDVFxy8XOMlWkcjychu8aPN6q9Cj61MvcJfIAAVgdREk1J5t4dpTxqN10FOZnfFxRZBnkbHFjjVLI0Lu1lYr7bE5NhxdRnjaNwbs-WQbuMHAKBeMvdKzIIeqRAswuHNlwtd_ATfON4V0v3aobOlVPOFUz3mgstb5cFhoH2oJIGTfnYj108-1_IVJRUoTo80Eii2gTEsC4frSGweQNZlu2XMnfsfRz3724NqinN7csfXXQ9zZ8vh29zHBgEUYnVh7JNOONr8A9wQY9RxI1v73HEC2YNFekuB87qCjGRpgUKGGFBaUwClpOifr9W-Z30U3t_TSgENw",[890],[24100],{"type":603,"value":24101},"Coping with Change in Unity3D ECS | by Maxim Zaks | Medium",{"type":597,"tag":606,"props":24103,"children":24104},{},[24105],{"type":597,"tag":886,"props":24106,"children":24109},{"href":24107,"rel":24108},"https://www.effectiveunity.com/ecs/06-how-to-build-reactive-systems-with-unity-ecs-part-1/",[890],[24110],{"type":603,"value":24111},"How to build reactive systems with Unity ECS: Part 1 • Effective Unity",{"type":597,"tag":606,"props":24113,"children":24114},{},[24115],{"type":597,"tag":886,"props":24116,"children":24119},{"href":24117,"rel":24118},"https://www.effectiveunity.com/ecs/07-how-to-build-reactive-systems-with-unity-ecs-part-2/",[890],[24120],{"type":603,"value":24117},{"title":591,"searchDepth":787,"depth":787,"links":24122},[24123,24124,24125,24126,24127,24136,24137],{"id":23739,"depth":1530,"text":23742},{"id":23745,"depth":1530,"text":23745},{"id":23755,"depth":1530,"text":23755},{"id":23783,"depth":1530,"text":23786},{"id":23805,"depth":787,"text":23805,"children":24128},[24129,24130,24131,24132,24133,24134,24135],{"id":23815,"depth":1530,"text":23818},{"id":23821,"depth":1530,"text":23745},{"id":23911,"depth":1530,"text":23911},{"id":23939,"depth":1530,"text":23942},{"id":23967,"depth":1530,"text":23970},{"id":24000,"depth":1530,"text":24003},{"id":24011,"depth":1530,"text":24011},{"id":24025,"depth":787,"text":24028},{"id":24068,"depth":787,"text":24071},"content:unity:2020-11-11-how-to-build-reactive-systems-with-unity-ecs.md","unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs.md","2020-11-11",{"_path":514,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":513,"description":24142,"body":24143,"_type":791,"_id":24193,"_source":793,"_file":24194,"_extension":795,"date":24195},"在使用Camera.main.ScreenToWorldPoint(Input.mousePosition))的時候，有時候會發現取得的是Camera的座標而不是滑鼠的座標。",{"type":594,"children":24144,"toc":24191},[24145,24149,24154,24159,24171,24176,24181,24186],{"type":597,"tag":606,"props":24146,"children":24147},{},[24148],{"type":603,"value":24142},{"type":597,"tag":606,"props":24150,"children":24151},{},[24152],{"type":603,"value":24153},"因為事實上是需要提供Z參數的\nCamera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, Z));\n　　Z代表的是Depth，因此如果Z=0的話就會是Camera的transform position了，因為此時nearClip趨近於Camera，不論你畫面中哪個點都會趨近於Camera的position",{"type":597,"tag":606,"props":24155,"children":24156},{},[24157],{"type":603,"value":24158},"自己做的參考圖。",{"type":597,"tag":606,"props":24160,"children":24161},{},[24162],{"type":597,"tag":886,"props":24163,"children":24166},{"href":24164,"rel":24165},"http://ref.gamer.com.tw/redir.php?url=http%3A%2F%2F3.bp.blogspot.com%2F-R7XPjFKkYxw%2FU2VzYO6WanI%2FAAAAAAAAAqs%2FFYk7Y6UuSTU%2Fs1600%2F1.png",[890],[24167],{"type":597,"tag":719,"props":24168,"children":24170},{"alt":719,"src":24169},"/images/2020-10-24-ScreenToWorldPoint/1.png",[],{"type":597,"tag":606,"props":24172,"children":24173},{},[24174],{"type":603,"value":24175},"以Perspective攝影機來看，當我用ScreenToWorldPoint(Input.mousePosition)想要來取得目前滑鼠座標在世界座標的位置的時候，可以看到當設定的Ｚ值不同，不只是取得的Ｚ座標不同連ＸＹ的座標都會不同（上圖的紅點位置，在遊戲視窗中是相同的左上角）。",{"type":597,"tag":606,"props":24177,"children":24178},{},[24179],{"type":603,"value":24180},"所以假設Ｚ值趨近於0的時候會怎樣，也就是該點座標會趨近於Camera的座標，因此當你沒有設定Ｚ值，而Ｚ值為0的時候，不管你滑鼠在哪都只會取得攝影機的座標。",{"type":597,"tag":606,"props":24182,"children":24183},{},[24184],{"type":603,"value":24185},"解決辦法：在Perspective攝影機的狀態下Ｚ值不要為0，或是使用Camera.main.nearClipPlane來設定最短的Clip位置。",{"type":597,"tag":606,"props":24187,"children":24188},{},[24189],{"type":603,"value":24190},"而Orthographic的攝影機呢，反而沒有這個問題，當Ｚ值設定為0的時候還是可以有相對正確的ＸＹ座標。",{"title":591,"searchDepth":787,"depth":787,"links":24192},[],"content:unity:2020-10-24-ScreenToWorldPoint.md","unity/2020-10-24-ScreenToWorldPoint.md","2020-10-24",{"_path":517,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":516,"description":24197,"body":24198,"_type":791,"_id":24216,"_source":793,"_file":24217,"_extension":795,"date":24195},"2d下z轴对性能的影响\n多个摄像机对性能的影响",{"type":594,"children":24199,"toc":24214},[24200,24204,24209],{"type":597,"tag":606,"props":24201,"children":24202},{},[24203],{"type":603,"value":24197},{"type":597,"tag":606,"props":24205,"children":24206},{},[24207],{"type":603,"value":24208},"sprites-default和Unlit差不多\n背景图像不要使用lit,太影响性能\n大面积的图像不要使用lit",{"type":597,"tag":606,"props":24210,"children":24211},{},[24212],{"type":603,"value":24213},"建立spriteatlas测试优化\n为角色建立动态纹理",{"title":591,"searchDepth":787,"depth":787,"links":24215},[],"content:unity:2020-10-24-unity-urp-performance.md","unity/2020-10-24-unity-urp-performance.md",{"_path":511,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":510,"description":24219,"body":24220,"_type":791,"_id":25099,"_source":793,"_file":25100,"_extension":795,"date":25101},"静态批处理[1]定义标明为 Static 的静态物件，如果在使用相同材质球的条件下，在**Build（项目打包）**的时候Unity会自动地提取这些共享材质的静态模型的Vertex buffer和Index buffer。根据其摆放在场景中的位置等最终状态信息，将这些模型的顶点数据变换到世界空间下，存储在新构建的大Vertex buffer和Index buffer中。并且记录每一个子模型的Index buffer数据在构建的大Index buffer中的起始及结束位置。在后续的绘制过程中，一次性提交整个合并模型的顶点数据，根据引擎的场景管理系统判断各个子模型的可见性。然后设置一次渲染状态，调",{"type":594,"children":24221,"toc":25088},[24222,24234,24245,24257,24264,24269,24276,24289,24294,24306,24317,24325,24336,24349,24360,24367,24370,24382,24392,24417,24422,24427,24437,24459,24470,24507,24516,24526,24533,24536,24542,24552,24604,24619,24630,24661,24670,24680,24697,24707,24714,24717,24730,24740,24793,24802,24812,24846,24855,24865,24887,24897,24904,24907,24919,24945,24950],{"type":597,"tag":598,"props":24223,"children":24225},{"id":24224},"静态批处理1",[24226,24228],{"type":603,"value":24227},"静态批处理[",{"type":597,"tag":886,"props":24229,"children":24232},{"href":24230,"rel":24231},"https://zhuanlan.zhihu.com/p/98642798#ref_1",[890],[24233],{"type":603,"value":19082},{"type":597,"tag":1321,"props":24235,"children":24236},{},[24237],{"type":597,"tag":807,"props":24238,"children":24239},{},[24240],{"type":597,"tag":1080,"props":24241,"children":24242},{},[24243],{"type":603,"value":24244},"定义",{"type":597,"tag":606,"props":24246,"children":24247},{},[24248,24250,24255],{"type":603,"value":24249},"标明为 Static 的静态物件，如果在使用",{"type":597,"tag":1080,"props":24251,"children":24252},{},[24253],{"type":603,"value":24254},"相同材质球",{"type":603,"value":24256},"的条件下，在**Build（项目打包）**的时候Unity会自动地提取这些共享材质的静态模型的Vertex buffer和Index buffer。根据其摆放在场景中的位置等最终状态信息，将这些模型的顶点数据变换到世界空间下，存储在新构建的大Vertex buffer和Index buffer中。并且记录每一个子模型的Index buffer数据在构建的大Index buffer中的起始及结束位置。",{"type":597,"tag":606,"props":24258,"children":24259},{},[24260],{"type":597,"tag":719,"props":24261,"children":24263},{"alt":719,"src":24262},"/images/2020-10-23-unity-optimizing-gpu/v2-48b948e088a2310817c67c6530637a95_720w.jpg",[],{"type":597,"tag":606,"props":24265,"children":24266},{},[24267],{"type":603,"value":24268},"在后续的绘制过程中，一次性提交整个合并模型的顶点数据，根据引擎的场景管理系统判断各个子模型的可见性。然后设置一次渲染状态，调用多次Draw call分别绘制每一个子模型。",{"type":597,"tag":606,"props":24270,"children":24271},{},[24272],{"type":597,"tag":719,"props":24273,"children":24275},{"alt":719,"src":24274},"/images/2020-10-23-unity-optimizing-gpu/v2-9e2e1e5df3ad1b37ebe0dc1af4712005_720w.jpg",[],{"type":597,"tag":606,"props":24277,"children":24278},{},[24279,24281,24287],{"type":603,"value":24280},"Static batching并**不减少Draw call的数量（**但是在编辑器时由于计算方法区别Draw call数量是会显示减少了的[",{"type":597,"tag":886,"props":24282,"children":24285},{"href":24283,"rel":24284},"https://zhuanlan.zhihu.com/p/98642798#ref_2",[890],[24286],{"type":603,"value":19111},{"type":603,"value":24288},"），但是由于我们预先把所有的子模型的顶点变换到了世界空间下，所以在运行时cpu不需要再次执行顶点变换操作，节约了少量的计算资源，并且这些子模型共享材质，所以在多次Draw call调用之间并没有渲染状态的切换，渲染API（Command Buffer）会缓存绘制命令，起到了渲染优化的目的 。",{"type":597,"tag":606,"props":24290,"children":24291},{},[24292],{"type":603,"value":24293},"但Static batching也会带来一些性能的负面影响。Static batching会导致应用打包之后体积增大，应用运行时所占用的内存体积也会增大。",{"type":597,"tag":606,"props":24295,"children":24296},{},[24297,24299,24305],{"type":603,"value":24298},"另外，在很多不同的GameObject引用同一模型的情况下，如果不开启Static batching，GameObject共享的模型会在应用程序包内或者内存中只存在一份，绘制的时候提交模型顶点信息，然后设置每一个GameObjec的材质信息，分别调用渲染API绘制。开启Static batching，在Unity执行Build的时候，场景中所有引用相同模型的GameObject都必须将模型顶点信息复制，并经过计算变化到最终在世界空间中，存储在最终生成的Vertex buffer中。这就导致了打包的体积及运行时内存的占用增大。例如，在茂密的森林级别将树标记为静态会严重影响内存[",{"type":597,"tag":886,"props":24300,"children":24303},{"href":24301,"rel":24302},"https://zhuanlan.zhihu.com/p/98642798#ref_3",[890],[24304],{"type":603,"value":18200},{"type":603,"value":758},{"type":597,"tag":1321,"props":24307,"children":24308},{},[24309],{"type":597,"tag":807,"props":24310,"children":24311},{},[24312],{"type":597,"tag":1080,"props":24313,"children":24314},{},[24315],{"type":603,"value":24316},"无法参与批处理情况",{"type":597,"tag":803,"props":24318,"children":24319},{},[24320],{"type":597,"tag":807,"props":24321,"children":24322},{},[24323],{"type":603,"value":24324},"改变Renderer.material将会造成一份材质的拷贝，因此会打断批处理，你应该使用Renderer.sharedMaterial来保证材质的共享状态。",{"type":597,"tag":1321,"props":24326,"children":24327},{},[24328],{"type":597,"tag":807,"props":24329,"children":24330},{},[24331],{"type":597,"tag":1080,"props":24332,"children":24333},{},[24334],{"type":603,"value":24335},"相同材质批处理断开情况",{"type":597,"tag":803,"props":24337,"children":24338},{},[24339,24344],{"type":597,"tag":807,"props":24340,"children":24341},{},[24342],{"type":603,"value":24343},"位置不相邻且中间夹杂着不同材质的其他物体，不会进行同批处理，这种情况比较特殊，涉及到批处理的顺序，我的另一篇文章有详解。",{"type":597,"tag":807,"props":24345,"children":24346},{},[24347],{"type":603,"value":24348},"拥有lightmap的物体含有额外（隐藏）的材质属性，比如：lightmap的偏移和缩放系数等。所以，拥有lightmap的物体将不会进行同批处理（除非他们指向lightmap的同一部分）。",{"type":597,"tag":1321,"props":24350,"children":24351},{},[24352],{"type":597,"tag":807,"props":24353,"children":24354},{},[24355],{"type":597,"tag":1080,"props":24356,"children":24357},{},[24358],{"type":603,"value":24359},"流程原理",{"type":597,"tag":606,"props":24361,"children":24362},{},[24363],{"type":597,"tag":719,"props":24364,"children":24366},{"alt":719,"src":24365},"/images/2020-10-23-unity-optimizing-gpu/v2-37b225e02afe6dca369647e4a3bf3bd4_720w.jpg",[],{"type":597,"tag":3720,"props":24368,"children":24369},{},[],{"type":597,"tag":598,"props":24371,"children":24373},{"id":24372},"动态批处理4",[24374,24376],{"type":603,"value":24375},"动态批处理[",{"type":597,"tag":886,"props":24377,"children":24380},{"href":24378,"rel":24379},"https://zhuanlan.zhihu.com/p/98642798#ref_4",[890],[24381],{"type":603,"value":19231},{"type":597,"tag":1321,"props":24383,"children":24384},{},[24385],{"type":597,"tag":807,"props":24386,"children":24387},{},[24388],{"type":597,"tag":1080,"props":24389,"children":24390},{},[24391],{"type":603,"value":24244},{"type":597,"tag":606,"props":24393,"children":24394},{},[24395,24397,24401,24403,24408,24410,24415],{"type":603,"value":24396},"在使用",{"type":597,"tag":1080,"props":24398,"children":24399},{},[24400],{"type":603,"value":24254},{"type":603,"value":24402},"的情况下，Unity会在运行时对于",{"type":597,"tag":1080,"props":24404,"children":24405},{},[24406],{"type":603,"value":24407},"正在视野中",{"type":603,"value":24409},"的符合条件的动态对象在一个Draw call内绘制，所以",{"type":597,"tag":1080,"props":24411,"children":24412},{},[24413],{"type":603,"value":24414},"会降低Draw Calls",{"type":603,"value":24416},"的数量。",{"type":597,"tag":606,"props":24418,"children":24419},{},[24420],{"type":603,"value":24421},"Dynamic batching的原理也很简单，在进行场景绘制之前将所有的共享同一材质的模型的顶点信息变换到世界空间中，然后通过一次Draw call绘制多个模型，达到合批的目的。模型顶点变换的操作是由CPU完成的，所以这会带来一些CPU的性能消耗。并且计算的模型顶点数量不宜太多，否则CPU串行计算耗费的时间太长会造成场景渲染卡顿，所以Dynamic batching只能处理一些小模型。",{"type":597,"tag":606,"props":24423,"children":24424},{},[24425],{"type":603,"value":24426},"Dynamic batching在降低Draw call的同时会导致额外的CPU性能消耗，所以仅仅在合批操作的性能消耗小于不合批，Dynamic batching才会有意义。而新一代图形API（ Metal、Vulkan）在批次间的消耗降低了很多，所以在这种情况下使用Dynamic batching很可能不能获得性能提升。Dynamic batching相对于Static batching不需要预先复制模型顶点，所以在内存占用和发布的程序体积方面要优于Static batching。但是Dynamic batching会带来一些运行时CPU性能消耗，Static batching在这一点要比Dynamic batching更加高效。",{"type":597,"tag":1321,"props":24428,"children":24429},{},[24430],{"type":597,"tag":807,"props":24431,"children":24432},{},[24433],{"type":597,"tag":1080,"props":24434,"children":24435},{},[24436],{"type":603,"value":24316},{"type":597,"tag":803,"props":24438,"children":24439},{},[24440,24445,24450,24455],{"type":597,"tag":807,"props":24441,"children":24442},{},[24443],{"type":603,"value":24444},"物件Mesh大于等于900个面。",{"type":597,"tag":807,"props":24446,"children":24447},{},[24448],{"type":603,"value":24449},"代码动态改变材质变量后不算同一个材质，会不参与合批。",{"type":597,"tag":807,"props":24451,"children":24452},{},[24453],{"type":603,"value":24454},"如果你的着色器使用顶点位置，法线和UV值三种属性，那么你只能批处理300顶点以下的物体；如果你的着色器需要使用顶点位置，法线，UV0，UV1和切向量，那你只能批处理180顶点以下的物体，否则都无法参与合批。",{"type":597,"tag":807,"props":24456,"children":24457},{},[24458],{"type":603,"value":24324},{"type":597,"tag":1321,"props":24460,"children":24461},{},[24462],{"type":597,"tag":807,"props":24463,"children":24464},{},[24465],{"type":597,"tag":1080,"props":24466,"children":24467},{},[24468],{"type":603,"value":24469},"批处理中断情况",{"type":597,"tag":803,"props":24471,"children":24472},{},[24473,24477,24482,24487,24492,24497,24502],{"type":597,"tag":807,"props":24474,"children":24475},{},[24476],{"type":603,"value":24343},{"type":597,"tag":807,"props":24478,"children":24479},{},[24480],{"type":603,"value":24481},"物体如果都符合条件会优先参与静态批处理，再是GPU Instancing，然后才到动态批处理，假如物体符合前两者，此次批处理都会被打断。",{"type":597,"tag":807,"props":24483,"children":24484},{},[24485],{"type":603,"value":24486},"GameObject之间如果有镜像变换不能进行合批，例如，\"GameObject A with +1 scale and GameObject B with –1 scale cannot be batched together\"。",{"type":597,"tag":807,"props":24488,"children":24489},{},[24490],{"type":603,"value":24491},"拥有lightmap的物体含有额外（隐藏）的材质属性，比如：lightmap的偏移和缩放系数等。所以，拥有lightmap的物体将不会进行批处理（除非他们指向lightmap的同一部分）。",{"type":597,"tag":807,"props":24493,"children":24494},{},[24495],{"type":603,"value":24496},"使用Multi-pass Shader的物体会禁用Dynamic batching，因为Multi-pass Shader通常会导致一个物体要连续绘制多次，并切换渲染状态。这会打破其跟其他物体进行Dynamic batching的机会。",{"type":597,"tag":807,"props":24498,"children":24499},{},[24500],{"type":603,"value":24501},"我们知道能够进行合批的前提是多个GameObject共享同一材质，但是对于Shadow casters的渲染是个例外。仅管Shadow casters使用不同的材质，但是只要它们的材质中给Shadow Caster Pass使用的参数是相同的，他们也能够进行Dynamic batching。",{"type":597,"tag":807,"props":24503,"children":24504},{},[24505],{"type":603,"value":24506},"Unity的Forward Rendering Path中如果一个GameObject接受多个光照会为每一个per-pixel light产生多余的模型提交和绘制，从而附加了多个Pass导致无法合批，如下图:",{"type":597,"tag":606,"props":24508,"children":24509},{},[24510,24514],{"type":597,"tag":719,"props":24511,"children":24513},{"alt":719,"src":24512},"/images/2020-10-23-unity-optimizing-gpu/v2-177f53a633d2eac753abe07805367d4d_720w.jpg",[],{"type":603,"value":24515},"可以接收多个光源的shader，在受到多个光源是无法合批",{"type":597,"tag":1321,"props":24517,"children":24518},{},[24519],{"type":597,"tag":807,"props":24520,"children":24521},{},[24522],{"type":597,"tag":1080,"props":24523,"children":24524},{},[24525],{"type":603,"value":24359},{"type":597,"tag":606,"props":24527,"children":24528},{},[24529],{"type":597,"tag":719,"props":24530,"children":24532},{"alt":719,"src":24531},"/images/2020-10-23-unity-optimizing-gpu/v2-8c69d718432ba4045155c700fda6f6b6_720w.jpg",[],{"type":597,"tag":3720,"props":24534,"children":24535},{},[],{"type":597,"tag":598,"props":24537,"children":24539},{"id":24538},"gpu-instancing",[24540],{"type":603,"value":24541},"GPU Instancing",{"type":597,"tag":1321,"props":24543,"children":24544},{},[24545],{"type":597,"tag":807,"props":24546,"children":24547},{},[24548],{"type":597,"tag":1080,"props":24549,"children":24550},{},[24551],{"type":603,"value":24244},{"type":597,"tag":606,"props":24553,"children":24554},{},[24555,24556,24561,24563,24568,24569,24575,24577,24582,24584,24588,24597,24602],{"type":603,"value":24396},{"type":597,"tag":1080,"props":24557,"children":24558},{},[24559],{"type":603,"value":24560},"相同材质球、相同Mesh(预设体的实例会自动地使用相同的网格模型和材质)的情况下，Unity会在运行时对于",{"type":603,"value":24562},"正在视野中的符合要求的所有对象使用",{"type":597,"tag":1080,"props":24564,"children":24565},{},[24566],{"type":603,"value":24567},"Constant Buffer",{"type":603,"value":19113},{"type":597,"tag":886,"props":24570,"children":24573},{"href":24571,"rel":24572},"https://zhuanlan.zhihu.com/p/98642798#ref_5",[890],[24574],{"type":603,"value":19263},{"type":603,"value":24576},"将其位置、缩放、uv偏移、",{"type":597,"tag":1733,"props":24578,"children":24579},{},[24580],{"type":603,"value":24581},"lightmapindex",{"type":603,"value":24583},"等相关信息保存在显存中的**“统一/常量缓冲器”",{"type":597,"tag":1080,"props":24585,"children":24586},{},[24587],{"type":603,"value":19113},{"type":597,"tag":886,"props":24589,"children":24592},{"href":24590,"rel":24591},"https://zhuanlan.zhihu.com/p/98642798#ref_6",[890],[24593],{"type":597,"tag":1080,"props":24594,"children":24595},{},[24596],{"type":603,"value":19317},{"type":597,"tag":1080,"props":24598,"children":24599},{},[24600],{"type":603,"value":24601},"中，然后从中抽取一个对象作为实例送入渲染流程，当在执行DrawCall操作后，从显存中取出实例的部分共享信息与从GPU常量缓冲器中取出对应对象的相关信息一并传递到下一渲染阶段，与此同时，不同的着色器阶段可以从缓存区中直接获取到需要的常量，不用设置两次常量。比起以上两种批处理，GPU Instancing可以",{"type":603,"value":24603},"规避合并Mesh导致的内存与性能上升**的问题，但是由于场景中所有符合该合批条件的渲染物体的信息每帧都要被重新创建，放入“统一/常量缓冲区”中，而碍于缓存区的大小限制，每一个Constant Buffer的大小要严格限制（不得大于64k）。详细请阅读：",{"type":597,"tag":606,"props":24605,"children":24606},{},[24607],{"type":597,"tag":886,"props":24608,"children":24611},{"href":24609,"rel":24610},"https://zhuanlan.zhihu.com/p/34499251",[890],[24612,24614],{"type":603,"value":24613},"Testplus：U3D优化批处理-GPU Instancing了解一下zhuanlan.zhihu.com",{"type":597,"tag":719,"props":24615,"children":24618},{"alt":24616,"src":24617},"图标","/images/2020-10-23-unity-optimizing-gpu/v2-b06a0dbdf07544a4d0687a8917611afd_180x120.jpg",[],{"type":597,"tag":1321,"props":24620,"children":24621},{},[24622],{"type":597,"tag":807,"props":24623,"children":24624},{},[24625],{"type":597,"tag":1080,"props":24626,"children":24627},{},[24628],{"type":603,"value":24629},"无法参与加速情况",{"type":597,"tag":803,"props":24631,"children":24632},{},[24633,24638,24651,24656],{"type":597,"tag":807,"props":24634,"children":24635},{},[24636],{"type":603,"value":24637},"缩放为负值的情况下，会不参与加速。",{"type":597,"tag":807,"props":24639,"children":24640},{},[24641,24643,24650],{"type":603,"value":24642},"代码动态改变材质变量后不算同一个材质，会不参与加速，但可以通过将颜色变化等变量加入常量缓冲器中实现[",{"type":597,"tag":886,"props":24644,"children":24647},{"href":24645,"rel":24646},"https://zhuanlan.zhihu.com/p/98642798#ref_7",[890],[24648],{"type":603,"value":24649},"7]",{"type":603,"value":758},{"type":597,"tag":807,"props":24652,"children":24653},{},[24654],{"type":603,"value":24655},"受限于常量缓冲区在不同设备上的大小的上限，移动端支持的个数可能较低。",{"type":597,"tag":807,"props":24657,"children":24658},{},[24659],{"type":603,"value":24660},"只支持一盏实时光，要在多个光源的情况下使用实例化，我们别无选择，只能切换到延迟渲染路径。为了能够让这套机制运作起来，请将所需的编译器指令添加到我们着色器的延迟渲染通道中。",{"type":597,"tag":606,"props":24662,"children":24663},{},[24664,24668],{"type":597,"tag":719,"props":24665,"children":24667},{"alt":719,"src":24666},"/images/2020-10-23-unity-optimizing-gpu/v2-5c97567b099e9d98ca9d957282b1922e_720w.jpg",[],{"type":603,"value":24669},"当在多个光源开启GPU Instancing",{"type":597,"tag":1321,"props":24671,"children":24672},{},[24673],{"type":597,"tag":807,"props":24674,"children":24675},{},[24676],{"type":597,"tag":1080,"props":24677,"children":24678},{},[24679],{"type":603,"value":24469},{"type":597,"tag":803,"props":24681,"children":24682},{},[24683,24687,24692],{"type":597,"tag":807,"props":24684,"children":24685},{},[24686],{"type":603,"value":24343},{"type":597,"tag":807,"props":24688,"children":24689},{},[24690],{"type":603,"value":24691},"一个批次超过125个物体（受限于常量缓冲区在不同设备上的大小的上限，移动端数量有浮动）的时候会新建另一个加速流程。",{"type":597,"tag":807,"props":24693,"children":24694},{},[24695],{"type":603,"value":24696},"物体如果都符合条件会优先参与静态批处理，然后才到GPU Instancing，假如物体符合前者，此次加速都会被打断。",{"type":597,"tag":1321,"props":24698,"children":24699},{},[24700],{"type":597,"tag":807,"props":24701,"children":24702},{},[24703],{"type":597,"tag":1080,"props":24704,"children":24705},{},[24706],{"type":603,"value":24359},{"type":597,"tag":606,"props":24708,"children":24709},{},[24710],{"type":597,"tag":719,"props":24711,"children":24713},{"alt":719,"src":24712},"/images/2020-10-23-unity-optimizing-gpu/v2-0dde54b930bef9c768c10d3c79126e16_720w.jpg",[],{"type":597,"tag":3720,"props":24715,"children":24716},{},[],{"type":597,"tag":598,"props":24718,"children":24720},{"id":24719},"srp-batcher8",[24721,24723],{"type":603,"value":24722},"SRP Batcher[",{"type":597,"tag":886,"props":24724,"children":24727},{"href":24725,"rel":24726},"https://zhuanlan.zhihu.com/p/98642798#ref_8",[890],[24728],{"type":603,"value":24729},"8]",{"type":597,"tag":1321,"props":24731,"children":24732},{},[24733],{"type":597,"tag":807,"props":24734,"children":24735},{},[24736],{"type":597,"tag":1080,"props":24737,"children":24738},{},[24739],{"type":603,"value":24244},{"type":597,"tag":606,"props":24741,"children":24742},{},[24743,24745,24750,24752,24756,24758,24762,24763,24768,24770,24774,24782,24791],{"type":603,"value":24744},"在使用LWRP或者HWRP时，开启SRP Batcher的情况下，只要物体的",{"type":597,"tag":1080,"props":24746,"children":24747},{},[24748],{"type":603,"value":24749},"Shader中变体",{"type":603,"value":24751},"一致，就可以启用SRP Batcher加速。它与上文GPU Instancing实现的原理相近，Unity会在运行时对于正在视野中的符合要求的所有对象使用**“Per Object” GPU BUFFER（一个独立的Buffer）** 将其位置、缩放、uv偏移、",{"type":597,"tag":1733,"props":24753,"children":24754},{},[24755],{"type":603,"value":24581},{"type":603,"value":24757},"等相关信息保存在GPU内存中，同时也会将正在视野中的符合要求的所有对象使用",{"type":597,"tag":1080,"props":24759,"children":24760},{},[24761],{"type":603,"value":24567},{"type":603,"value":19113},{"type":597,"tag":886,"props":24764,"children":24766},{"href":24571,"rel":24765},[890],[24767],{"type":603,"value":19263},{"type":603,"value":24769},"将材质信息保存在保存在显存中的**“统一/常量缓冲器”",{"type":597,"tag":1080,"props":24771,"children":24772},{},[24773],{"type":603,"value":19113},{"type":597,"tag":886,"props":24775,"children":24777},{"href":24590,"rel":24776},[890],[24778],{"type":597,"tag":1080,"props":24779,"children":24780},{},[24781],{"type":603,"value":19317},{"type":597,"tag":1080,"props":24783,"children":24784},{},[24785,24787],{"type":603,"value":24786},"中。与GPU Instancing相比，因为数据不再每帧被重新创建，而且需要保存进“统一/常量缓冲区”的数据排除了各自的位置、缩放、uv偏移、",{"type":597,"tag":1733,"props":24788,"children":24789},{},[24790],{"type":603,"value":24581},{"type":603,"value":24792},"等相关信息，所以缓冲区内有更多的空间可以动态地**存储场景中所有渲染物体的材质信息。由于数据不再每帧被重新创建，而是动态更新，所以SRP Batcher的本质并不会降低Draw Calls的数量，它只会降低Draw Calls之间的GPU设置成本。",{"type":597,"tag":606,"props":24794,"children":24795},{},[24796,24800],{"type":597,"tag":719,"props":24797,"children":24799},{"alt":719,"src":24798},"/images/2020-10-23-unity-optimizing-gpu/v2-7b93309c00f2866639a2f7c529495608_720w.jpg",[],{"type":603,"value":24801},"因为不用重新创建Constant Buffer，所以本质上SRP Batcher不会降低Draw Calls的数量，它只会降低Draw Calls之间的GPU设置成本",{"type":597,"tag":1321,"props":24803,"children":24804},{},[24805],{"type":597,"tag":807,"props":24806,"children":24807},{},[24808],{"type":597,"tag":1080,"props":24809,"children":24810},{},[24811],{"type":603,"value":24629},{"type":597,"tag":803,"props":24813,"children":24814},{},[24815,24820],{"type":597,"tag":807,"props":24816,"children":24817},{},[24818],{"type":603,"value":24819},"对象不可以是粒子或蒙皮网格。",{"type":597,"tag":807,"props":24821,"children":24822},{},[24823,24825,24830,24832,24837,24839,24844],{"type":603,"value":24824},"Shader中",{"type":597,"tag":1080,"props":24826,"children":24827},{},[24828],{"type":603,"value":24829},"变体",{"type":603,"value":24831},"不一致，如下图两个",{"type":597,"tag":1080,"props":24833,"children":24834},{},[24835],{"type":603,"value":24836},"相同Shader",{"type":603,"value":24838},"的材质，但是因为Surface Options不一致，导致",{"type":597,"tag":1080,"props":24840,"children":24841},{},[24842],{"type":603,"value":24843},"变体不一样",{"type":603,"value":24845},"而无法合并。",{"type":597,"tag":606,"props":24847,"children":24848},{},[24849,24853],{"type":597,"tag":719,"props":24850,"children":24852},{"alt":719,"src":24851},"/images/2020-10-23-unity-optimizing-gpu/v2-b0599861b3304d19979816413cb13a43_720w.jpg",[],{"type":603,"value":24854},"变体不同的不同材质",{"type":597,"tag":1321,"props":24856,"children":24857},{},[24858],{"type":597,"tag":807,"props":24859,"children":24860},{},[24861],{"type":597,"tag":1080,"props":24862,"children":24863},{},[24864],{"type":603,"value":24469},{"type":597,"tag":803,"props":24866,"children":24867},{},[24868],{"type":597,"tag":807,"props":24869,"children":24870},{},[24871,24873,24878,24880,24885],{"type":603,"value":24872},"位置不相邻且中间夹杂着",{"type":597,"tag":1080,"props":24874,"children":24875},{},[24876],{"type":603,"value":24877},"不同Shader",{"type":603,"value":24879},"，或者",{"type":597,"tag":1080,"props":24881,"children":24882},{},[24883],{"type":603,"value":24884},"不同变体",{"type":603,"value":24886},"的其他物体，不会进行同批处理，这种情况比较特殊，涉及到批处理的顺序，我的另一篇文章有详解。",{"type":597,"tag":1321,"props":24888,"children":24889},{},[24890],{"type":597,"tag":807,"props":24891,"children":24892},{},[24893],{"type":597,"tag":1080,"props":24894,"children":24895},{},[24896],{"type":603,"value":24359},{"type":597,"tag":606,"props":24898,"children":24899},{},[24900],{"type":597,"tag":719,"props":24901,"children":24903},{"alt":719,"src":24902},"/images/2020-10-23-unity-optimizing-gpu/v2-6125b513800939912bb07853ae0a1f90_720w.jpg",[],{"type":597,"tag":3720,"props":24905,"children":24906},{},[],{"type":597,"tag":598,"props":24908,"children":24910},{"id":24909},"_2020年2月13日-更新-更改对统一常量缓冲器的描述对srp-batcher与gpu-instancing的实现原理进行了比较大的修改",[24911],{"type":597,"tag":1733,"props":24912,"children":24913},{},[24914],{"type":597,"tag":1080,"props":24915,"children":24916},{},[24917],{"type":603,"value":24918},"2020年2月13日-更新： 更改对”统一/常量缓冲器“的描述，对SRP Batcher与GPU Instancing的实现原理进行了比较大的修改。",{"type":597,"tag":617,"props":24920,"children":24921},{},[24922],{"type":597,"tag":606,"props":24923,"children":24924},{},[24925,24930,24935,24940],{"type":597,"tag":1733,"props":24926,"children":24927},{},[24928],{"type":603,"value":24929},"^ ^ 以上只是我工作中的一些小总结",{"type":597,"tag":1733,"props":24931,"children":24932},{},[24933],{"type":603,"value":24934},"有什么不正确的地方可以在评论告诉我",{"type":597,"tag":1733,"props":24936,"children":24937},{},[24938],{"type":603,"value":24939},"我的微信号是：sam2b2b",{"type":597,"tag":1733,"props":24941,"children":24942},{},[24943],{"type":603,"value":24944},"有想一起进步的小伙伴可以加微信逛逛圈",{"type":597,"tag":598,"props":24946,"children":24948},{"id":24947},"参考",[24949],{"type":603,"value":24947},{"type":597,"tag":803,"props":24951,"children":24952},{},[24953,24969,24984,24999,25013,25038,25056,25071],{"type":597,"tag":807,"props":24954,"children":24955},{},[24956,24963],{"type":597,"tag":886,"props":24957,"children":24960},{"href":24958,"rel":24959},"https://zhuanlan.zhihu.com/p/98642798#ref_1_0",[890],[24961],{"type":603,"value":24962},"^",{"type":597,"tag":886,"props":24964,"children":24967},{"href":24965,"rel":24966},"https://gameinstitute.qq.com/community/detail/114323",[890],[24968],{"type":603,"value":24965},{"type":597,"tag":807,"props":24970,"children":24971},{},[24972,24978],{"type":597,"tag":886,"props":24973,"children":24976},{"href":24974,"rel":24975},"https://zhuanlan.zhihu.com/p/98642798#ref_2_0",[890],[24977],{"type":603,"value":24962},{"type":597,"tag":886,"props":24979,"children":24982},{"href":24980,"rel":24981},"https://forum.unity.com/threads/regression-feature-not-bug-static-dynamic-batching-combining-v-buffers-but-not-draw-calls.360143/",[890],[24983],{"type":603,"value":24980},{"type":597,"tag":807,"props":24985,"children":24986},{},[24987,24993],{"type":597,"tag":886,"props":24988,"children":24991},{"href":24989,"rel":24990},"https://zhuanlan.zhihu.com/p/98642798#ref_3_0",[890],[24992],{"type":603,"value":24962},{"type":597,"tag":886,"props":24994,"children":24997},{"href":24995,"rel":24996},"https://docs.unity3d.com/Manual/DrawCallBatching.html",[890],[24998],{"type":603,"value":24995},{"type":597,"tag":807,"props":25000,"children":25001},{},[25002,25008],{"type":597,"tag":886,"props":25003,"children":25006},{"href":25004,"rel":25005},"https://zhuanlan.zhihu.com/p/98642798#ref_4_0",[890],[25007],{"type":603,"value":24962},{"type":597,"tag":886,"props":25009,"children":25011},{"href":24965,"rel":25010},[890],[25012],{"type":603,"value":24965},{"type":597,"tag":807,"props":25014,"children":25015},{},[25016,25017,25023,25030,25032],{"type":603,"value":24962},{"type":597,"tag":886,"props":25018,"children":25021},{"href":25019,"rel":25020},"https://zhuanlan.zhihu.com/p/98642798#ref_5_0",[890],[25022],{"type":603,"value":886},{"type":597,"tag":886,"props":25024,"children":25027},{"href":25025,"rel":25026},"https://zhuanlan.zhihu.com/p/98642798#ref_5_1",[890],[25028],{"type":603,"value":25029},"b",{"type":603,"value":25031},"Constant Buffer ",{"type":597,"tag":886,"props":25033,"children":25036},{"href":25034,"rel":25035},"https://zhuanlan.zhihu.com/p/35830868",[890],[25037],{"type":603,"value":25034},{"type":597,"tag":807,"props":25039,"children":25040},{},[25041,25042,25048,25054],{"type":603,"value":24962},{"type":597,"tag":886,"props":25043,"children":25046},{"href":25044,"rel":25045},"https://zhuanlan.zhihu.com/p/98642798#ref_6_0",[890],[25047],{"type":603,"value":886},{"type":597,"tag":886,"props":25049,"children":25052},{"href":25050,"rel":25051},"https://zhuanlan.zhihu.com/p/98642798#ref_6_1",[890],[25053],{"type":603,"value":25029},{"type":603,"value":25055},"unity将常量存储在4M的缓冲池里，并每帧循环池（这个池子被绑定到GPU上，可以在截帧工具比如XCode或者Snapdragon上看到）",{"type":597,"tag":807,"props":25057,"children":25058},{},[25059,25065],{"type":597,"tag":886,"props":25060,"children":25063},{"href":25061,"rel":25062},"https://zhuanlan.zhihu.com/p/98642798#ref_7_0",[890],[25064],{"type":603,"value":24962},{"type":597,"tag":886,"props":25066,"children":25069},{"href":25067,"rel":25068},"https://blog.csdn.net/lzhq1982/article/details/88119283",[890],[25070],{"type":603,"value":25067},{"type":597,"tag":807,"props":25072,"children":25073},{},[25074,25080,25082],{"type":597,"tag":886,"props":25075,"children":25078},{"href":25076,"rel":25077},"https://zhuanlan.zhihu.com/p/98642798#ref_8_0",[890],[25079],{"type":603,"value":24962},{"type":603,"value":25081},"SRP Batcher 官方文档： ",{"type":597,"tag":886,"props":25083,"children":25086},{"href":25084,"rel":25085},"https://mp.weixin.qq.com/s/-4Bhxtm_L5paFFAv8co4Xw",[890],[25087],{"type":603,"value":25084},{"title":591,"searchDepth":787,"depth":787,"links":25089},[25090,25092,25094,25095,25097,25098],{"id":24224,"depth":787,"text":25091},"静态批处理[1]",{"id":24372,"depth":787,"text":25093},"动态批处理[4]",{"id":24538,"depth":787,"text":24541},{"id":24719,"depth":787,"text":25096},"SRP Batcher[8]",{"id":24909,"depth":787,"text":24918},{"id":24947,"depth":787,"text":24947},"content:unity:2020-10-23-unity-optimizing-gpu.md","unity/2020-10-23-unity-optimizing-gpu.md","2020-10-23",{"_path":508,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":507,"description":25103,"body":25104,"_type":791,"_id":25935,"_source":793,"_file":25936,"_extension":795,"date":25937},"關於深度緩衝 (Depth buffering, or z-buffering)勢必得先回歸電腦繪圖學 (Computer graphics) 的知識，理解 Rasterization 怎麼透過 z-buffering ，來解決物體 rendering 可視問題 (visibility problem)，哪些可見那些不可見，這也關係到物件在 rendering result 成像後前後順序。當物件 rendering 時，每個所生成的 pixel 產生的深度資訊 (z coordinate) 會儲存在 z-buffer (或稱為 depth buffer)，buffer 為二維陣列，其尺寸大小",{"type":594,"children":25105,"toc":25929},[25106,25112,25135,25148,25161,25179,25192,25196,25209,25213,25223,25229,25256,25269,25280,25605,25611,25616,25627,25632,25637,25642,25649,25654,25659,25667,25678,25691,25696,25704,25710,25715,25720,25784,25789,25828,25833],{"type":597,"tag":598,"props":25107,"children":25109},{"id":25108},"關於深度緩衝-depth-buffering-or-z-buffering",[25110],{"type":603,"value":25111},"關於深度緩衝 (Depth buffering, or z-buffering)",{"type":597,"tag":606,"props":25113,"children":25114},{},[25115,25117,25124,25126,25133],{"type":603,"value":25116},"勢必得先回歸電腦繪圖學 (Computer graphics) 的知識，理解 ",{"type":597,"tag":886,"props":25118,"children":25121},{"href":25119,"rel":25120},"https://en.wikipedia.org/wiki/Rasterisation",[890],[25122],{"type":603,"value":25123},"Rasterization",{"type":603,"value":25125}," 怎麼透過 ",{"type":597,"tag":886,"props":25127,"children":25130},{"href":25128,"rel":25129},"https://en.wikipedia.org/wiki/Z-buffering",[890],[25131],{"type":603,"value":25132},"z-buffering",{"type":603,"value":25134}," ，來解決物體 rendering 可視問題 (visibility problem)，哪些可見那些不可見，這也關係到物件在 rendering result 成像後前後順序。",{"type":597,"tag":606,"props":25136,"children":25137},{},[25138,25140,25146],{"type":603,"value":25139},"當物件 rendering 時，每個所生成的 pixel 產生的深度資訊 (z coordinate) 會儲存在 z-buffer (或稱為 depth buffer)，buffer 為二維陣列，其尺寸大小與最後成像尺寸相同。在 Unity shader 中可利用 ",{"type":597,"tag":629,"props":25141,"children":25143},{"className":25142},[],[25144],{"type":603,"value":25145},"ZWrite On | Off",{"type":603,"value":25147}," 來切換是否將深度資訊要寫入到 z-buffer。",{"type":597,"tag":606,"props":25149,"children":25150},{},[25151,25153,25159],{"type":603,"value":25152},"如果場景中其他物件 rendering 時，也在同一個 pixel 位置渲染結果時，會檢查 z-buffer 所儲存的深度資訊，是否將渲染結果覆蓋原本的 pixel，並且將新的深度資訊寫入到 z-buffer。通常條件會設定為深度資訊比原本更接近攝影機時，就能夠覆蓋原本結果。在 Unity shader 中可利用 ",{"type":597,"tag":629,"props":25154,"children":25156},{"className":25155},[],[25157],{"type":603,"value":25158},"ZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always",{"type":603,"value":25160}," 來調整判斷方式。",{"type":597,"tag":606,"props":25162,"children":25163},{},[25164,25169,25171,25177],{"type":597,"tag":1080,"props":25165,"children":25166},{},[25167],{"type":603,"value":25168},"有 z-buffering 機制，可不管物件算繪順序 (rendering order)，使得離攝影機越近的物件，永遠都描繪在其他離攝影機越遠的物件之前",{"type":603,"value":25170}," (",{"type":597,"tag":629,"props":25172,"children":25174},{"className":25173},[],[25175],{"type":603,"value":25176},"ZTest LEqual",{"type":603,"value":25178},")。",{"type":597,"tag":606,"props":25180,"children":25181},{},[25182],{"type":597,"tag":886,"props":25183,"children":25186},{"href":25184,"rel":25185},"https://3.bp.blogspot.com/-xEsBEXX2jiQ/Wv_KFd2e3hI/AAAAAAAAwHY/aMJAzz3UIPkMUZOUqd9sgz_dsKZYN0PmQCHMYCw/s1600/bed-room.png",[890],[25187],{"type":597,"tag":719,"props":25188,"children":25191},{"alt":25189,"src":25190},"房間示意圖","/images/2020-10-22-unity-render-order/bed-room.png",[],{"type":597,"tag":606,"props":25193,"children":25194},{},[25195],{"type":603,"value":25189},{"type":597,"tag":606,"props":25197,"children":25198},{},[25199],{"type":597,"tag":886,"props":25200,"children":25203},{"href":25201,"rel":25202},"https://3.bp.blogspot.com/-x6KnmDnIk6o/Wv_KF_uymYI/AAAAAAAAwHc/XyV7-wddP-0QgqxstR_8MGzLGOxMlbUuACHMYCw/s1600/depth-info-bed-room.png",[890],[25204],{"type":597,"tag":719,"props":25205,"children":25208},{"alt":25206,"src":25207},"房間的深度資訊，越深色表示離攝影機越近","/images/2020-10-22-unity-render-order/depth-info-bed-room.png",[],{"type":597,"tag":606,"props":25210,"children":25211},{},[25212],{"type":603,"value":25206},{"type":597,"tag":606,"props":25214,"children":25215},{},[25216],{"type":597,"tag":886,"props":25217,"children":25220},{"href":25218,"rel":25219},"https://assetstore.unity.com/packages/3d/props/furniture/pack-gesta-furniture-1-28237",[890],[25221],{"type":603,"value":25222},"場景來源",{"type":597,"tag":598,"props":25224,"children":25226},{"id":25225},"renderers-rendering-order",[25227],{"type":603,"value":25228},"Renderer’s rendering order",{"type":597,"tag":606,"props":25230,"children":25231},{},[25232,25234,25240,25242,25248,25250,25255],{"type":603,"value":25233},"假設 shader 中關閉深度機制的判斷 (",{"type":597,"tag":629,"props":25235,"children":25237},{"className":25236},[],[25238],{"type":603,"value":25239},"ZTest Always",{"type":603,"value":25241},")，或者在 render 場景物件的過程中都不寫入深度 (",{"type":597,"tag":629,"props":25243,"children":25245},{"className":25244},[],[25246],{"type":603,"value":25247},"ZWrite Off",{"type":603,"value":25249},")，即",{"type":597,"tag":1080,"props":25251,"children":25252},{},[25253],{"type":603,"value":25254},"沒有 z-buffering 機制，rendering order 會決定成像的結果，越晚畫的物件永遠都在其他較早畫的物件之上",{"type":603,"value":758},{"type":597,"tag":606,"props":25257,"children":25258},{},[25259,25261,25267],{"type":603,"value":25260},"而在 SpriteRenderer 直接修改 sorting layer 以及 order in layer 來改變 rendering order，就能調整該物件在算繪結果的物件前後，便是基於此緣故，更多細節可查看 ",{"type":597,"tag":629,"props":25262,"children":25264},{"className":25263},[],[25265],{"type":603,"value":25266},"Sprites/Default",{"type":603,"value":25268}," shader 程式碼。",{"type":597,"tag":606,"props":25270,"children":25271},{},[25272,25274,25279],{"type":603,"value":25273},"故整理在 Unity 中，rendering order 是根據以下參數進行排序：",{"type":597,"tag":1080,"props":25275,"children":25276},{},[25277],{"type":603,"value":25278},"Camera depth > Material type > Sorting layer > Order in layer > Material render queue > Camera order algorithm",{"type":603,"value":758},{"type":597,"tag":1321,"props":25281,"children":25282},{},[25283,25334,25352,25415,25460,25518],{"type":597,"tag":807,"props":25284,"children":25285},{},[25286,25288],{"type":603,"value":25287},"Camera depth",{"type":597,"tag":1321,"props":25289,"children":25290},{},[25291,25296,25301,25312],{"type":597,"tag":807,"props":25292,"children":25293},{},[25294],{"type":603,"value":25295},"數字越大越晚畫",{"type":597,"tag":807,"props":25297,"children":25298},{},[25299],{"type":603,"value":25300},"通常無法搭配 Clear Flags: Don’t Clear，因為不會清除 depth buffer (z-buffer)",{"type":597,"tag":807,"props":25302,"children":25303},{},[25304,25306],{"type":603,"value":25305},"程式設定 ",{"type":597,"tag":629,"props":25307,"children":25309},{"className":25308},[],[25310],{"type":603,"value":25311},"camera.depth",{"type":597,"tag":807,"props":25313,"children":25314},{},[25315,25317,25320,25330,25333],{"type":603,"value":25316},"選擇場景中的 camera 編輯",{"type":597,"tag":1595,"props":25318,"children":25319},{},[],{"type":597,"tag":886,"props":25321,"children":25324},{"href":25322,"rel":25323},"https://3.bp.blogspot.com/-VdjJ2P8mRSw/Wv_KGL2e9kI/AAAAAAAAwHg/bf871Tz0ZCgcM_pTnENDlLA2EVCVEOXgQCHMYCw/s1600/edit-camera-depth-unity.png",[890],[25325],{"type":597,"tag":719,"props":25326,"children":25329},{"alt":25327,"src":25328},"編輯 depth 參數","/images/2020-10-22-unity-render-order/edit-camera-depth-unity.png",[],{"type":597,"tag":1595,"props":25331,"children":25332},{},[],{"type":603,"value":25327},{"type":597,"tag":807,"props":25335,"children":25336},{},[25337,25339],{"type":603,"value":25338},"Material type",{"type":597,"tag":1321,"props":25340,"children":25341},{},[25342,25347],{"type":597,"tag":807,"props":25343,"children":25344},{},[25345],{"type":603,"value":25346},"先畫不透明物件 (opaque)，再畫透明物件 (transparent)",{"type":597,"tag":807,"props":25348,"children":25349},{},[25350],{"type":603,"value":25351},"根據 material render queue 來決定，數值小於等於 2500 為不透明物件，數值大於 2500 為透明物件",{"type":597,"tag":807,"props":25353,"children":25354},{},[25355,25357],{"type":603,"value":25356},"Sorting layer",{"type":597,"tag":1321,"props":25358,"children":25359},{},[25360,25364,25369,25379,25397],{"type":597,"tag":807,"props":25361,"children":25362},{},[25363],{"type":603,"value":25295},{"type":597,"tag":807,"props":25365,"children":25366},{},[25367],{"type":603,"value":25368},"大多數的 renderer 都有支援此參數，但僅有 SpriteRenderder 以及 ParticleSystemRenderer 能在預設的 Inspector 編輯（不過自定義編輯器來達成）",{"type":597,"tag":807,"props":25370,"children":25371},{},[25372,25373],{"type":603,"value":25305},{"type":597,"tag":629,"props":25374,"children":25376},{"className":25375},[],[25377],{"type":603,"value":25378},"renderer.sortingLayerID",{"type":597,"tag":807,"props":25380,"children":25381},{},[25382,25384,25387],{"type":603,"value":25383},"在 Tag Manager 編輯 Sorting layer",{"type":597,"tag":1595,"props":25385,"children":25386},{},[],{"type":597,"tag":886,"props":25388,"children":25391},{"href":25389,"rel":25390},"https://3.bp.blogspot.com/-HQnwI_JP7dQ/Wv_KG_RuisI/AAAAAAAAwHo/8ecZFCMsknsP2XOd227LgYyr_JsP-k5fwCHMYCw/s1600/edit-sorting-layers-unity.png",[890],[25392],{"type":597,"tag":719,"props":25393,"children":25396},{"alt":25394,"src":25395},"編輯 Sorting layers","/images/2020-10-22-unity-render-order/edit-sorting-layers-unity.png",[],{"type":597,"tag":807,"props":25398,"children":25399},{},[25400,25402,25405],{"type":603,"value":25401},"選擇場景的 SpriteRenderder 或是 ParticleSystemRenderer 編輯 Sorting layer",{"type":597,"tag":1595,"props":25403,"children":25404},{},[],{"type":597,"tag":886,"props":25406,"children":25409},{"href":25407,"rel":25408},"https://3.bp.blogspot.com/-74IY8tFv9b4/WwAf4mJ-bqI/AAAAAAAAwJQ/xHzyeHjHwP89PPKkCo3Ahp_OrsCdEJNKwCLcBGAs/s1600/edit-sorting-layer-unity.png",[890],[25410],{"type":597,"tag":719,"props":25411,"children":25414},{"alt":25412,"src":25413},"編輯 Sorting layer","/images/2020-10-22-unity-render-order/edit-sorting-layer-unity.png",[],{"type":597,"tag":807,"props":25416,"children":25417},{},[25418,25420],{"type":603,"value":25419},"Order in layer",{"type":597,"tag":1321,"props":25421,"children":25422},{},[25423,25427,25432,25442],{"type":597,"tag":807,"props":25424,"children":25425},{},[25426],{"type":603,"value":25295},{"type":597,"tag":807,"props":25428,"children":25429},{},[25430],{"type":603,"value":25431},"大多數的 renderer 都有支援此參數，但僅有 SpriteRenderder 以及 ParticleSystemRenderer 能在預設的 Inspector 編輯",{"type":597,"tag":807,"props":25433,"children":25434},{},[25435,25436],{"type":603,"value":25305},{"type":597,"tag":629,"props":25437,"children":25439},{"className":25438},[],[25440],{"type":603,"value":25441},"renderer.sortingOrder",{"type":597,"tag":807,"props":25443,"children":25444},{},[25445,25447,25450],{"type":603,"value":25446},"選擇場景的 SpriteRenderder 或是 ParticleSystemRenderer 編輯 Order in layer",{"type":597,"tag":1595,"props":25448,"children":25449},{},[],{"type":597,"tag":886,"props":25451,"children":25454},{"href":25452,"rel":25453},"https://3.bp.blogspot.com/-8VZ0pu3-ZdI/WwAfrRVqL9I/AAAAAAAAwJM/89ZAUPkUfUsy9eXQn1bZUW9y_Q8HxBCxwCLcBGAs/s1600/edit-order-in-layer-unity.png",[890],[25455],{"type":597,"tag":719,"props":25456,"children":25459},{"alt":25457,"src":25458},"編輯 Order in layer","/images/2020-10-22-unity-render-order/edit-order-in-layer-unity.png",[],{"type":597,"tag":807,"props":25461,"children":25462},{},[25463,25465],{"type":603,"value":25464},"Material render queue",{"type":597,"tag":1321,"props":25466,"children":25467},{},[25468,25472,25477,25490,25500],{"type":597,"tag":807,"props":25469,"children":25470},{},[25471],{"type":603,"value":25295},{"type":597,"tag":807,"props":25473,"children":25474},{},[25475],{"type":603,"value":25476},"預設值會從 Shader 取得，但可自行定義",{"type":597,"tag":807,"props":25478,"children":25479},{},[25480,25482],{"type":603,"value":25481},"不透明物件 (Opaque)、半透明物件 (AlphaTest)、透明物件 (Transparent) 預設值分別 2000、2450、以及 3000",{"type":597,"tag":1321,"props":25483,"children":25484},{},[25485],{"type":597,"tag":807,"props":25486,"children":25487},{},[25488],{"type":603,"value":25489},"通常只有透明物件會關閉 ZWrite",{"type":597,"tag":807,"props":25491,"children":25492},{},[25493,25494],{"type":603,"value":25305},{"type":597,"tag":629,"props":25495,"children":25497},{"className":25496},[],[25498],{"type":603,"value":25499},"material.renderQueue",{"type":597,"tag":807,"props":25501,"children":25502},{},[25503,25505,25508],{"type":603,"value":25504},"選擇專案中的 material 編輯",{"type":597,"tag":1595,"props":25506,"children":25507},{},[],{"type":597,"tag":886,"props":25509,"children":25512},{"href":25510,"rel":25511},"https://3.bp.blogspot.com/--4-IFurF7lk/Wv_KGSiPZ2I/AAAAAAAAwHk/95Bv8w902lke-HN_CCP1wigeekWuMQknQCHMYCw/s1600/edit-render-queue-unity.png",[890],[25513],{"type":597,"tag":719,"props":25514,"children":25517},{"alt":25515,"src":25516},"編輯 render queue","/images/2020-10-22-unity-render-order/edit-render-queue-unity.png",[],{"type":597,"tag":807,"props":25519,"children":25520},{},[25521,25523],{"type":603,"value":25522},"Camera render algorithm",{"type":597,"tag":1321,"props":25524,"children":25525},{},[25526,25531,25562],{"type":597,"tag":807,"props":25527,"children":25528},{},[25529],{"type":603,"value":25530},"無法在預設編輯器修改，使用程式調整",{"type":597,"tag":807,"props":25532,"children":25533},{},[25534,25536,25544],{"type":603,"value":25535},"非透明物件排序演算法",{"type":597,"tag":621,"props":25537,"children":25539},{"code":25538},"camera.opaqueSortMode\n",[25540],{"type":597,"tag":629,"props":25541,"children":25542},{"__ignoreMap":591},[25543],{"type":603,"value":25538},{"type":597,"tag":1321,"props":25545,"children":25546},{},[25547,25552,25557],{"type":597,"tag":807,"props":25548,"children":25549},{},[25550],{"type":603,"value":25551},"Default：在 Unity 2018.1 預設值 FrontToBack",{"type":597,"tag":807,"props":25553,"children":25554},{},[25555],{"type":603,"value":25556},"FrontToBack：粗略低由近到遠排序繪製，能使得 GPU rendering 時有更好的效能",{"type":597,"tag":807,"props":25558,"children":25559},{},[25560],{"type":603,"value":25561},"NoDistanceSort：關閉排序繪製，能降低 CPU 的使用量",{"type":597,"tag":807,"props":25563,"children":25564},{},[25565,25567,25575],{"type":603,"value":25566},"透明物件排序演算法",{"type":597,"tag":621,"props":25568,"children":25570},{"code":25569},"camera.transparencySortMode\n",[25571],{"type":597,"tag":629,"props":25572,"children":25573},{"__ignoreMap":591},[25574],{"type":603,"value":25569},{"type":597,"tag":1321,"props":25576,"children":25577},{},[25578,25583,25588,25593],{"type":597,"tag":807,"props":25579,"children":25580},{},[25581],{"type":603,"value":25582},"Default：根據 camera projection mode 調整",{"type":597,"tag":807,"props":25584,"children":25585},{},[25586],{"type":603,"value":25587},"Perspective：根據 camera 位置到物件中心 (object center) 的距離排序",{"type":597,"tag":807,"props":25589,"children":25590},{},[25591],{"type":603,"value":25592},"Orthographic：根據 view plane 到物件中心 (object center) 的距離排序",{"type":597,"tag":807,"props":25594,"children":25595},{},[25596,25598],{"type":603,"value":25597},"CustomAxis：制定 axis 排序，專門用於 2D 遊戲製作，可參考",{"type":597,"tag":886,"props":25599,"children":25602},{"href":25600,"rel":25601},"https://qiita.com/RyotaMurohoshi/items/3f0de2689af72f9b46f9",[890],[25603],{"type":603,"value":25604},"這篇文章",{"type":597,"tag":3995,"props":25606,"children":25608},{"id":25607},"补充renderqueue",[25609],{"type":603,"value":25610},"补充RenderQueue",{"type":597,"tag":606,"props":25612,"children":25613},{},[25614],{"type":603,"value":25615},"nderQueue ，RenderQueue 其实就是shader中tags中的Queue",{"type":597,"tag":621,"props":25617,"children":25622},{"code":25618,"language":25619,"meta":591,"className":25620},"Tags { \"Queue\"=\"Geometry\" }\n","bash",[25621],"language-bash",[25623],{"type":597,"tag":629,"props":25624,"children":25625},{"__ignoreMap":591},[25626],{"type":603,"value":25618},{"type":597,"tag":606,"props":25628,"children":25629},{},[25630],{"type":603,"value":25631},"默认情况下，Unity会基于对象距离摄像机的远近来排序你的对象。因此，当一个对象离摄像机越近，它就会优先绘制在其他更远的对象上面。对于大多数情况这是有效并合适的，但是在一些特殊情况下，你可能想要自己控制对象的绘制顺序。而使用Tags{}块我们就可以得到这样的控制。",{"type":597,"tag":606,"props":25633,"children":25634},{},[25635],{"type":603,"value":25636},"Unity提供给我们一些默认的渲染队列，每一个对应一个唯一的值，来指导Unity绘制对象到屏幕上。这些内置的渲染队列被称为Background, Geometry, AlphaTest, GeometryLast,Transparent, Overlay。这些队列不是随便创建的，它们是为了让我们更容易地编写Shader并处理实时渲染的。",{"type":597,"tag":606,"props":25638,"children":25639},{},[25640],{"type":603,"value":25641},"同时需在SubShader中显示声明ZWrite Off，通知Unity我们会重写物体的渲染深度排序。",{"type":597,"tag":606,"props":25643,"children":25644},{},[25645],{"type":597,"tag":719,"props":25646,"children":25648},{"alt":719,"src":25647},"https:////upload-images.jianshu.io/upload_images/15536448-9a2deda21e4f661e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/744/format/webp",[],{"type":597,"tag":606,"props":25650,"children":25651},{},[25652],{"type":603,"value":25653},"好了，最后给出一个最终的总结：\n依次按条件先后顺序进行排序渲染处理。先按大项条件排序，后按小项条件排序",{"type":597,"tag":606,"props":25655,"children":25656},{},[25657],{"type":603,"value":25658},"1.Camera Depth: 越小越优先\n2.RenderQueue 2500以下",{"type":597,"tag":621,"props":25660,"children":25662},{"code":25661},"1. Sorting Layer/Order in Layer\n    1. 按照Sorting Layer/Order in Layer 设置的值，越小越优先\n    2. 无此属性，等同于 Sorting Layer=default ,Order in Layer=0 参与排序\n    2.RenderQueue 越小越优先\n    3.RenderQueue 相等，`由近到远排序优先`\n",[25663],{"type":597,"tag":629,"props":25664,"children":25665},{"__ignoreMap":591},[25666],{"type":603,"value":25661},{"type":597,"tag":606,"props":25668,"children":25669},{},[25670,25672],{"type":603,"value":25671},"3.RenderQueue 2500以上\n1. Sorting Layer/Order in Layer\n1. 按照Sorting Layer/Order in Layer 设置的值，越小越优先\n2. 无此属性，等同于 Sorting Layer=default ,Order in Layer=0 参与排序\n2.RenderQueue 越小越优先\n3.RenderQueue 相等，",{"type":597,"tag":629,"props":25673,"children":25675},{"className":25674},[],[25676],{"type":603,"value":25677},"由远到近排序优先",{"type":597,"tag":606,"props":25679,"children":25680},{},[25681,25683,25689],{"type":603,"value":25682},"说明一下：2500是关键值，它是透明跟不透明的分界点，因此我们考虑层级的时候要注意着点：renderqueue > 2500的物体绝对会在renderqueue \u003C= 2500的物体前面，即渲染时renderqueue大的会挡住renderqueue小的，不论它的sortingLayer和sortingOrder怎么设置都是不起作用的。知道了这点，其他的就很好理解了。当两个的RenderQueue都在同一侧时，在SortingLayer高的绝对会在sortingLayer前面，无视renderqueue跟soringOrder，只有在sortingLayer相同的前提下，soringOrder高的会在sortingOrder低的前面，无视renderqueue。当sortingLayer跟sortingOrder相同时，才看renderqueue的高低，高的在前面。特别要注意一下半透明物体的渲染顺序是",{"type":597,"tag":629,"props":25684,"children":25686},{"className":25685},[],[25687],{"type":603,"value":25688},"越远越先渲染",{"type":603,"value":25690},"，这与不透明物体是相反的。",{"type":597,"tag":606,"props":25692,"children":25693},{},[25694],{"type":603,"value":25695},"UGUI中的ui默认使用的是UI/Default 材质，对应的shader中的渲染队列是Transparent",{"type":597,"tag":621,"props":25697,"children":25699},{"code":25698},"Shader \"UI/Default\"\n{\n    Properties\n    {\n       ...\n    }\n\n    SubShader\n    {\n        Tags\n        {\n            \"Queue\"=\"Transparent\"\n            \"IgnoreProjector\"=\"True\"\n            \"RenderType\"=\"Transparent\"\n            \"PreviewType\"=\"Plane\"\n            \"CanUseSpriteAtlas\"=\"True\"\n        }\n        ...\n    }\n}\n",[25700],{"type":597,"tag":629,"props":25701,"children":25702},{"__ignoreMap":591},[25703],{"type":603,"value":25698},{"type":597,"tag":598,"props":25705,"children":25707},{"id":25706},"uguis-rendering-order",[25708],{"type":603,"value":25709},"UGUI’s rendering order",{"type":597,"tag":606,"props":25711,"children":25712},{},[25713],{"type":603,"value":25714},"在 Unity 5.x 推出的 UGUI 系統中，其 rendering order 卻是另外規則，這分成兩個部分探討 Canvas & CanvasRenderer，其概念可想像是 CanvasRenderer 可視為畫在畫布 Canvas 的元件，之後該畫布再畫在最終的畫面上（e.g. render target）。",{"type":597,"tag":606,"props":25716,"children":25717},{},[25718],{"type":603,"value":25719},"關於 Canvas 的 rendering order：",{"type":597,"tag":1321,"props":25721,"children":25722},{},[25723,25754],{"type":597,"tag":807,"props":25724,"children":25725},{},[25726,25728],{"type":603,"value":25727},"Screen Space - Overlay",{"type":597,"tag":1321,"props":25729,"children":25730},{},[25731,25736],{"type":597,"tag":807,"props":25732,"children":25733},{},[25734],{"type":603,"value":25735},"想像該 canvas 由隱藏的 camera 處理，其 depth = 101 (最後才處理)",{"type":597,"tag":807,"props":25737,"children":25738},{},[25739,25741,25744],{"type":603,"value":25740},"多個相同的 canvas 使用 Sort Order 來決定描繪順序，數字越大越晚畫",{"type":597,"tag":1595,"props":25742,"children":25743},{},[],{"type":597,"tag":886,"props":25745,"children":25748},{"href":25746,"rel":25747},"https://3.bp.blogspot.com/-Jwq-GkVy5Pg/Wv_MaxvDuEI/AAAAAAAAwII/8xeKRt-08sw9AtYHAxXbPztqk3rlwMH6QCLcBGAs/s1600/edit-canvas-unity.png",[890],[25749],{"type":597,"tag":719,"props":25750,"children":25753},{"alt":25751,"src":25752},"編輯 Canvas's Sort Order","/images/2020-10-22-unity-render-order/edit-canvas-unity.png",[],{"type":597,"tag":807,"props":25755,"children":25756},{},[25757,25759],{"type":603,"value":25758},"Screen Space - Camera & World Space",{"type":597,"tag":1321,"props":25760,"children":25761},{},[25762,25767],{"type":597,"tag":807,"props":25763,"children":25764},{},[25765],{"type":603,"value":25766},"想像為存在在世界場景的平面",{"type":597,"tag":807,"props":25768,"children":25769},{},[25770,25772,25775],{"type":603,"value":25771},"多個相同 canvas 使用 Sorting layer 以及 Order in layer 來決定 rendering order",{"type":597,"tag":1595,"props":25773,"children":25774},{},[],{"type":597,"tag":886,"props":25776,"children":25779},{"href":25777,"rel":25778},"https://4.bp.blogspot.com/-u-mDDKcRfAY/Wv_NHS9SsZI/AAAAAAAAwIU/Mt_mBRPL8DYo7Xj9Cbh-hOPTFbg6X3UMgCLcBGAs/s1600/edit-canvas-unity.png",[890],[25780],{"type":597,"tag":719,"props":25781,"children":25783},{"alt":25782,"src":25752},"編輯 Canvas's Sorting layer & Order in layer",[],{"type":597,"tag":606,"props":25785,"children":25786},{},[25787],{"type":603,"value":25788},"關於同一個 canvas 下，其 CanvasRenderer 之間的 rendering order：",{"type":597,"tag":1321,"props":25790,"children":25791},{},[25792],{"type":597,"tag":807,"props":25793,"children":25794},{},[25795,25797],{"type":603,"value":25796},"Material render queue > Transform order",{"type":597,"tag":1321,"props":25798,"children":25799},{},[25800,25805,25823],{"type":597,"tag":807,"props":25801,"children":25802},{},[25803],{"type":603,"value":25804},"Material render queue 同前面說明，看材質球 (material) 的 render queue 參數",{"type":597,"tag":807,"props":25806,"children":25807},{},[25808,25810,25813],{"type":603,"value":25809},"Transform order：依照 Transform 階層關係，採 Pre-order 方式排序",{"type":597,"tag":1595,"props":25811,"children":25812},{},[],{"type":597,"tag":886,"props":25814,"children":25817},{"href":25815,"rel":25816},"https://4.bp.blogspot.com/-fCMusmLKj4k/Wv_NnqL6SXI/AAAAAAAAwIo/suCM_XaddIAEwirQkIibP2wB8Mas3EjagCLcBGAs/s1600/canvas-renderer-rendering-order-unity.png",[890],[25818],{"type":597,"tag":719,"props":25819,"children":25822},{"alt":25820,"src":25821},"Canvas renderer's rendering order example","/images/2020-10-22-unity-render-order/canvas-renderer-rendering-order-unity.png",[],{"type":597,"tag":807,"props":25824,"children":25825},{},[25826],{"type":603,"value":25827},"注意：當所屬的 Canvas 之 render mode 為 Screen Space - Overlay，則無視 Material render queue",{"type":597,"tag":598,"props":25829,"children":25831},{"id":25830},"使用實踐情境",[25832],{"type":603,"value":25830},{"type":597,"tag":1321,"props":25834,"children":25835},{},[25836,25898,25911],{"type":597,"tag":807,"props":25837,"children":25838},{},[25839,25841],{"type":603,"value":25840},"3D",{"type":597,"tag":1321,"props":25842,"children":25843},{},[25844,25862],{"type":597,"tag":807,"props":25845,"children":25846},{},[25847,25849],{"type":603,"value":25848},"不透明物件 & 半透明物件 (e.g. 草、鐵絲網等等) 依照場景擺放",{"type":597,"tag":1321,"props":25850,"children":25851},{},[25852,25857],{"type":597,"tag":807,"props":25853,"children":25854},{},[25855],{"type":603,"value":25856},"不需要特別設定 rendering order",{"type":597,"tag":807,"props":25858,"children":25859},{},[25860],{"type":603,"value":25861},"一切交給 z-buffering 機制",{"type":597,"tag":807,"props":25863,"children":25864},{},[25865,25867],{"type":603,"value":25866},"透明物件或是粒子特效 (particle system) 可透過 sort layer & order in layer 機制調整 rendering order",{"type":597,"tag":1321,"props":25868,"children":25869},{},[25870,25881],{"type":597,"tag":807,"props":25871,"children":25872},{},[25873,25875,25880],{"type":603,"value":25874},"透明物件 shader 通常不會寫 z-buffer (e.g. ",{"type":597,"tag":629,"props":25876,"children":25878},{"className":25877},[],[25879],{"type":603,"value":25247},{"type":603,"value":3748},{"type":597,"tag":807,"props":25882,"children":25883},{},[25884,25886,25891,25893],{"type":603,"value":25885},"可 hack inspector 來設定 ",{"type":597,"tag":629,"props":25887,"children":25889},{"className":25888},[],[25890],{"type":603,"value":25378},{"type":603,"value":25892}," 以及 ",{"type":597,"tag":629,"props":25894,"children":25896},{"className":25895},[],[25897],{"type":603,"value":25441},{"type":597,"tag":807,"props":25899,"children":25900},{},[25901,25903],{"type":603,"value":25902},"2D",{"type":597,"tag":1321,"props":25904,"children":25905},{},[25906],{"type":597,"tag":807,"props":25907,"children":25908},{},[25909],{"type":603,"value":25910},"Sprite renderer 使用 sort layer & order in layer 機制來調整 rendering order，以控制 depth",{"type":597,"tag":807,"props":25912,"children":25913},{},[25914,25916],{"type":603,"value":25915},"UGUI",{"type":597,"tag":1321,"props":25917,"children":25918},{},[25919,25924],{"type":597,"tag":807,"props":25920,"children":25921},{},[25922],{"type":603,"value":25923},"利用 transform hierarchy 來建立 rendering order，因應效能優化可能還得拆成多個 canvas",{"type":597,"tag":807,"props":25925,"children":25926},{},[25927],{"type":603,"value":25928},"若採用 Canvas render mode: World space，想讓 UI 與 3D 場景物件的結合，可將 canvas 視為 3D 物件去設計場景架構 (這自己就沒有經驗…)",{"title":591,"searchDepth":787,"depth":787,"links":25930},[25931,25932,25933,25934],{"id":25108,"depth":787,"text":25111},{"id":25225,"depth":787,"text":25228},{"id":25706,"depth":787,"text":25709},{"id":25830,"depth":787,"text":25830},"content:unity:2020-10-22-unity-render-order.md","unity/2020-10-22-unity-render-order.md","2020-10-22",{"_path":505,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":504,"description":25939,"body":25940,"_type":791,"_id":26088,"_source":793,"_file":26089,"_extension":795,"date":26090},"BuildConfiguration他继承于scriptobject,他的扩展名是\".buildconfiguration\"导入的时候执行了编辑器脚本    [ScriptedImporter(3, new[] { BuildConfiguration.AssetExtension })]\n    sealed class BuildConfigurationScriptedImporter : ScriptedImporter\n    {\n        public override void OnImportAsset(AssetImportContext context)\n      ",{"type":594,"children":25941,"toc":26084},[25942,25948,25956,25964,25972,25980,26005,26013,26021,26062,26068,26076],{"type":597,"tag":598,"props":25943,"children":25945},{"id":25944},"buildconfiguration",[25946],{"type":603,"value":25947},"BuildConfiguration",{"type":597,"tag":1321,"props":25949,"children":25950},{},[25951],{"type":597,"tag":807,"props":25952,"children":25953},{},[25954],{"type":603,"value":25955},"他继承于scriptobject,他的扩展名是\".buildconfiguration\"导入的时候执行了编辑器脚本",{"type":597,"tag":621,"props":25957,"children":25959},{"code":25958},"    [ScriptedImporter(3, new[] { BuildConfiguration.AssetExtension })]\n    sealed class BuildConfigurationScriptedImporter : ScriptedImporter\n    {\n        public override void OnImportAsset(AssetImportContext context)\n        {\n            var asset = BuildConfiguration.CreateInstance();\n            if (BuildConfiguration.DeserializeFromPath(asset, context.assetPath))\n            {\n                context.AddObjectToAsset(\"asset\", asset/*, icon*/);\n                context.SetMainObject(asset);\n            }\n        }\n    ...\n",[25960],{"type":597,"tag":629,"props":25961,"children":25962},{"__ignoreMap":591},[25963],{"type":603,"value":25958},{"type":597,"tag":1321,"props":25965,"children":25966},{},[25967],{"type":597,"tag":807,"props":25968,"children":25969},{},[25970],{"type":603,"value":25971},"再看下他再unity中的编辑器显示",{"type":597,"tag":621,"props":25973,"children":25975},{"code":25974},"[CustomEditor(typeof(BuildConfigurationScriptedImporter))]\n    internal sealed class BuildConfigurationScriptedImporterEditor : ScriptedImporterEditor\n    {\n        static class ClassNames\n        {\n            public const string BaseClassName = nameof(BuildConfiguration);\n            public const string Dependencies = BaseClassName + \"__asset-dependencies\";\n            public const string Header = BaseClassName + \"__asset-header\";\n            public const string HeaderLabel = BaseClassName + \"__asset-header-label\";\n            public const string BuildAction = BaseClassName + \"__build-action\";\n            public const string BuildDropdown = BaseClassName + \"__build-dropdown\";\n            public const string AddComponent = BaseClassName + \"__add-component-button\";\n            public const string OptionalComponents = BaseClassName + \"__optional-components\";\n        }\n\n        internal struct BuildAction : IEquatable\u003CBuildAction>\n        {\n            public string Name;\n            public Action\u003CBuildConfiguration> Action;\n\n            public bool Equals(BuildAction other)\n            {\n                return Name == other.Name;\n            }\n        }\n",[25976],{"type":597,"tag":629,"props":25977,"children":25978},{"__ignoreMap":591},[25979],{"type":603,"value":25974},{"type":597,"tag":606,"props":25981,"children":25982},{},[25983,25985,25991,25992,25998,25999],{"type":603,"value":25984},"该脚本定义了三个按钮",{"type":597,"tag":629,"props":25986,"children":25988},{"className":25987},[],[25989],{"type":603,"value":25990},"build",{"type":603,"value":9688},{"type":597,"tag":629,"props":25993,"children":25995},{"className":25994},[],[25996],{"type":603,"value":25997},"run",{"type":603,"value":9688},{"type":597,"tag":629,"props":26000,"children":26002},{"className":26001},[],[26003],{"type":603,"value":26004},"build and run",{"type":597,"tag":1321,"props":26006,"children":26007},{},[26008],{"type":597,"tag":807,"props":26009,"children":26010},{},[26011],{"type":603,"value":26012},"如何建立",{"type":597,"tag":621,"props":26014,"children":26016},{"code":26015},"        public BuildResult Build()\n        {\n            var pipeline = GetBuildPipeline();\n            var canUse = CanUsePipeline(pipeline);\n            if (!canUse.Result)\n            {\n                return BuildResult.Failure(pipeline, this, canUse.Reason);\n            }\n\n            var what = !string.IsNullOrEmpty(name) ? $\" {name}\" : string.Empty;\n            using (var progress = new BuildProgress($\"Building{what}\", \"Please wait...\"))\n            {\n                return pipeline.Build(this, progress);\n            }\n        }\n",[26017],{"type":597,"tag":629,"props":26018,"children":26019},{"__ignoreMap":591},[26020],{"type":603,"value":26015},{"type":597,"tag":803,"props":26022,"children":26023},{},[26024,26042],{"type":597,"tag":807,"props":26025,"children":26026},{},[26027,26029,26035,26036],{"type":603,"value":26028},"从IBuildPipelineComponent组件中获取Pipeline..继承IBuildPipelineComponent接口的组件有",{"type":597,"tag":629,"props":26030,"children":26032},{"className":26031},[],[26033],{"type":603,"value":26034},"ClassicBuildProfile",{"type":603,"value":9688},{"type":597,"tag":629,"props":26037,"children":26039},{"className":26038},[],[26040],{"type":603,"value":26041},"DotsRuntimeBuildProfile",{"type":597,"tag":807,"props":26043,"children":26044},{},[26045,26047,26052,26054],{"type":603,"value":26046},"关于platform,我们看下安卓建立的配置,可以看到手动实例化了",{"type":597,"tag":629,"props":26048,"children":26050},{"className":26049},[],[26051],{"type":603,"value":26034},{"type":603,"value":26053},",并且设置了platform",{"type":597,"tag":621,"props":26055,"children":26057},{"code":26056},"    static class AndroidMenuItem\n    {\n        const string k_CreateBuildConfigurationAssetClassic = BuildConfigurationMenuItem.k_BuildConfigurationMenu + \"Android Classic Build Configuration\";\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic, true)]\n        static bool CreateBuildConfigurationAssetClassicValidation()\n        {\n            return Directory.Exists(AssetDatabase.GetAssetPath(Selection.activeObject));\n        }\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic)]\n        static void CreateBuildConfigurationAssetClassic()\n        {\n            Selection.activeObject = BuildConfigurationMenuItem.CreateAssetInActiveDirectory(\n                \"AndroidClassic\",\n                new GeneralSettings(),\n                new SceneList(),\n                new ClassicBuildProfile { Platform = new AndroidPlatform() });\n        }\n    }\n",[26058],{"type":597,"tag":629,"props":26059,"children":26060},{"__ignoreMap":591},[26061],{"type":603,"value":26056},{"type":597,"tag":598,"props":26063,"children":26065},{"id":26064},"buildplayerstep",[26066],{"type":603,"value":26067},"BuildPlayerStep",{"type":597,"tag":1321,"props":26069,"children":26070},{},[26071],{"type":597,"tag":807,"props":26072,"children":26073},{},[26074],{"type":603,"value":26075},"我们看到他的最终执行仍然使用了API, UnityEditor.BuildPipeline.BuildPlayer(buildPlayerOptions);",{"type":597,"tag":621,"props":26077,"children":26079},{"code":26078},"sealed class BuildPlayerStep : BuildStepBase\n    {\n        public override Type[] UsedComponents { get; } =\n        {\n            typeof(ClassicBuildProfile),\n            typeof(SceneList),\n            typeof(GeneralSettings),\n            typeof(OutputBuildDirectory)\n        };\n\n        public override BuildResult Run(BuildContext context)\n        {\n            var classicSharedData = context.GetValue\u003CClassicSharedData>();\n            var target = classicSharedData.BuildTarget;\n            if (target \u003C= 0)\n                return context.Failure($\"Invalid build target '{target.ToString()}'.\");\n            if (target != EditorUserBuildSettings.activeBuildTarget)\n                return context.Failure($\"{nameof(EditorUserBuildSettings.activeBuildTarget)} must be switched before {nameof(BuildPlayerStep)} step.\");\n\n            var embeddedScenes = context.GetValue\u003CEmbeddedScenesValue>().Scenes;\n            if (embeddedScenes.Length == 0)\n                return context.Failure(\"There are no scenes to build.\");\n\n            var outputPath = context.GetOutputBuildDirectory();\n            if (!Directory.Exists(outputPath))\n                Directory.CreateDirectory(outputPath);\n\n            string locationPathName;\n            if (context.HasValue\u003CLocationInfo>())\n            {\n                locationPathName = context.GetValue\u003CLocationInfo>().Path;\n            }\n            else\n            {\n                var generalSettings = context.GetComponentOrDefault\u003CGeneralSettings>();\n                locationPathName = Path.Combine(outputPath, generalSettings.ProductName + ClassicBuildProfile.GetExecutableExtension(target));\n            }\n\n            var buildPlayerOptions = new BuildPlayerOptions()\n            {\n                scenes = embeddedScenes,\n                target = target,\n                locationPathName = locationPathName,\n                targetGroup = UnityEditor.BuildPipeline.GetBuildTargetGroup(target),\n            };\n\n            buildPlayerOptions.options = BuildOptions.None;\n\n            foreach (var customizer in classicSharedData.Customizers)\n                buildPlayerOptions.options |= customizer.ProvideBuildOptions();\n\n            var extraScriptingDefines = classicSharedData.Customizers.SelectMany(c => c.ProvidePlayerScriptingDefines()).ToArray();\n            buildPlayerOptions.extraScriptingDefines = extraScriptingDefines;\n\n            var report = UnityEditor.BuildPipeline.BuildPlayer(buildPlayerOptions);\n            context.SetValue(report);\n\n            return context.FromReport(report);\n        }\n    }\n",[26080],{"type":597,"tag":629,"props":26081,"children":26082},{"__ignoreMap":591},[26083],{"type":603,"value":26078},{"title":591,"searchDepth":787,"depth":787,"links":26085},[26086,26087],{"id":25944,"depth":787,"text":25947},{"id":26064,"depth":787,"text":26067},"content:unity:2020-10-21-platform.md","unity/2020-10-21-platform.md","2020-10-21",{"_path":502,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":501,"description":26092,"body":26093,"_type":791,"_id":26153,"_source":793,"_file":26154,"_extension":795,"date":26155},"Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs",{"type":594,"children":26094,"toc":26151},[26095,26099,26107,26112,26117,26125,26130,26138,26143],{"type":597,"tag":606,"props":26096,"children":26097},{},[26098],{"type":603,"value":26092},{"type":597,"tag":621,"props":26100,"children":26102},{"code":26101},"    static class AutomaticWorldBootstrap\n    {\n        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]\n        static void Initialize()\n        {\n            DefaultWorldInitialization.Initialize(\"Default World\", false);\n        }\n    }\n",[26103],{"type":597,"tag":629,"props":26104,"children":26105},{"__ignoreMap":591},[26106],{"type":603,"value":26101},{"type":597,"tag":606,"props":26108,"children":26109},{},[26110],{"type":603,"value":26111},"Packages/com.unity.entities/Unity.Entities/DefaultWorldInitialization.cs",{"type":597,"tag":606,"props":26113,"children":26114},{},[26115],{"type":603,"value":26116},"检查是否有bootstrap没有的话则自动创建world",{"type":597,"tag":621,"props":26118,"children":26120},{"code":26119},"        /// \u003Csummary>\n        /// Initializes the default world or runs ICustomBootstrap if one is available.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"defaultWorldName\">The name of the world that will be created. Unless there is a custom bootstrap.\u003C/param>\n        /// \u003Cparam name=\"editorWorld\">Editor worlds by default only include systems with [ExecuteAlways]. If editorWorld is true, ICustomBootstrap will not be used.\u003C/param>\n        public static World Initialize(string defaultWorldName, bool editorWorld = false)\n        {\n            RegisterUnloadOrPlayModeChangeShutdown();\n\n            if (!editorWorld)\n            {\n                var bootStrap = CreateBootStrap();\n                if (bootStrap != null && bootStrap.Initialize(defaultWorldName))\n                {\n                    Assert.IsTrue(World.DefaultGameObjectInjectionWorld != null,\n                        $\"ICustomBootstrap.Initialize() implementation failed to set \" +\n                        $\"World.DefaultGameObjectInjectionWorld, despite returning true \" +\n                        $\"(indicating the World has been properly initialized)\");\n                    return World.DefaultGameObjectInjectionWorld;\n                }\n            }\n\n            var world = new World(defaultWorldName, editorWorld ? WorldFlags.Editor : WorldFlags.Game);\n            World.DefaultGameObjectInjectionWorld = world;\n\n            var systemList = GetAllSystems(WorldSystemFilterFlags.Default, editorWorld);\n            AddSystemToRootLevelSystemGroupsInternal(world, systemList, systemList.Count);\n\n#if !UNITY_DOTSRUNTIME\n            ScriptBehaviourUpdateOrder.AddWorldToCurrentPlayerLoop(world);\n#endif\n\n            DefaultWorldInitialized?.Invoke(world);\n            return world;\n        }\n",[26121],{"type":597,"tag":629,"props":26122,"children":26123},{"__ignoreMap":591},[26124],{"type":603,"value":26119},{"type":597,"tag":606,"props":26126,"children":26127},{},[26128],{"type":603,"value":26129},"查找可用的bootstrap并实例化",{"type":597,"tag":621,"props":26131,"children":26133},{"code":26132},"        static ICustomBootstrap CreateBootStrap()\n        {\n#if !UNITY_DOTSRUNTIME\n            var bootstrapTypes = TypeManager.GetTypesDerivedFrom(typeof(ICustomBootstrap));\n            Type selectedType = null;\n\n            foreach (var bootType in bootstrapTypes)\n            {\n                if (bootType.IsAbstract || bootType.ContainsGenericParameters)\n                    continue;\n\n                if (selectedType == null)\n                    selectedType = bootType;\n                else if (selectedType.IsAssignableFrom(bootType))\n                    selectedType = bootType;\n                else if (!bootType.IsAssignableFrom(selectedType))\n                    Debug.LogError(\"Multiple custom ICustomBootstrap specified, ignoring \" + bootType);\n            }\n            ICustomBootstrap bootstrap = null;\n            if (selectedType != null)\n                bootstrap = Activator.CreateInstance(selectedType) as ICustomBootstrap;\n\n            return bootstrap;\n#else\n            throw new Exception(\"This method should have been replaced by code-gen.\");\n#endif\n        }\n",[26134],{"type":597,"tag":629,"props":26135,"children":26136},{"__ignoreMap":591},[26137],{"type":603,"value":26132},{"type":597,"tag":606,"props":26139,"children":26140},{},[26141],{"type":603,"value":26142},"小技巧: 新建一个ICustomBootstrap,在Initialize抛出异常.则能在追踪栈找到代码的入口",{"type":597,"tag":621,"props":26144,"children":26146},{"code":26145},"Multiple custom ICustomBootstrap specified, ignoring GameBootstrap\nUnityEngine.Debug:LogError(Object)\nUnity.Debug:LogError(Object) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/Stubs/Unity/Debug.cs:13)\nUnity.Entities.DefaultWorldInitialization:CreateBootStrap() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:351)\nUnity.Entities.DefaultWorldInitialization:Initialize(String, Boolean) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:116)\nUnity.Entities.AutomaticWorldBootstrap:Initialize() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs:15)\n",[26147],{"type":597,"tag":629,"props":26148,"children":26149},{"__ignoreMap":591},[26150],{"type":603,"value":26145},{"title":591,"searchDepth":787,"depth":787,"links":26152},[],"content:unity:2020-10-20-ecs-world.md","unity/2020-10-20-ecs-world.md","2020-10-20",{"_path":499,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":498,"description":26157,"body":26158,"_type":791,"_id":31350,"_source":793,"_file":31351,"_extension":795,"date":31352},"*(译前言: Unity DOTS提出了一套全新的开发技术栈, 但目前少有精讲如何结合现有工作流进行开发的资料, 外网 *这篇文章 (Game Object Conversion and SubScene) 详细解构了基于 GameObject 和 Subscene 的工作流程和原理, 要求读者对 DOTS/ECS 有基本的了解, 虽然非常之长, 但值得一读)",{"type":594,"children":26159,"toc":31316},[26160,26177,26180,26185,26190,26197,26202,26207,26235,26247,26252,26257,26263,26275,26302,26356,26377,26383,26440,26472,26513,26518,26523,26549,26558,26565,26570,26579,26584,26591,26603,26615,26622,26641,26647,26652,26656,26663,26703,26708,26717,26730,26735,26770,26779,26786,26791,26798,26803,26808,26834,26862,26867,26873,26885,26890,26898,26918,26930,27061,27067,27098,27161,27173,27200,27207,27220,27268,27280,27286,27291,27300,27311,27379,27386,27433,27440,27446,27465,27476,27485,27549,27554,27563,27569,27588,27608,27621,27649,27655,27692,27738,27745,27757,27764,27771,27797,27802,27809,27814,27821,27828,27847,27872,27879,27886,27906,27913,27949,27962,27968,27992,27999,28019,28038,28100,28119,28126,28138,28145,28150,28185,28203,28237,28277,28282,28289,28295,28321,28328,28347,28353,28358,28378,28409,28416,28421,28428,28435,28481,28486,28504,28511,28518,28523,28529,28541,28589,28594,28621,28634,28647,28654,28674,28679,28686,28706,28715,28722,28764,28773,28778,28784,28812,28844,28856,28863,28870,28875,28882,28887,28893,28905,28948,28957,29011,29024,29043,29076,29080,29089,29163,29178,29205,29221,29225,29253,29257,29265,29269,29277,29284,29306,29313,29325,29331,29356,29368,29375,29418,29425,29430,29486,29491,29497,29502,29507,29516,29521,29528,29533,29540,29545,29551,29556,29561,29567,29572,29577,29584,29589,29595,29600,29605,29613,29618,29626,29631,29639,29649,29657,29662,29667,29676,29681,29686,29695,29700,29708,29720,29725,29733,29738,29750,29755,29760,29765,29770,29782,29787,29793,29798,29806,29811,29818,29825,29830,29839,29844,29851,29874,29882,29887,29892,29897,29905,29910,29918,29923,29930,29940,29947,29956,29961,29968,29977,29984,29992,29997,30004,30013,30018,30026,30053,30061,30066,30071,30077,30085,30092,30096,30101,30106,30111,30119,30131,30136,30141,30150,30158,30163,30169,30176,30181,30188,30195,30200,30205,30212,30217,30226,30231,30238,30245,30250,30257,30262,30271,30276,30285,30290,30299,30304,30309,30316,30323,30328,30340,30345,30354,30361,30371,30376,30385,30390,30395,30405,30410,30419,30426,30433,30438,30447,30454,30459,30464,30473,30480,30490,30499,30506,30511,30520,30525,30531,30536,30541,30548,30555,30560,30569,30576,30581,30588,30593,30598,30603,30610,30615,30622,30627,30634,30639,30646,30657,30663,30668,30680,30685,30694,30706,30711,30718,30723,30730,30735,30740,30747,30752,30757,30762,30770,30780,30785,30790,30795,30802,30807,30816,30823,30828,30837,30842,30849,30854,30860,30865,30874,30886,30891,30904,30909,30918,30923,30928,30936,30945,30950,30955,30964,30969,30974,30983,30988,30993,31035,31042,31050,31055,31060,31067,31072,31079,31086,31091,31098,31116,31121,31126,31133,31143,31153,31160,31185,31195,31203,31210,31215,31224,31233,31238,31243,31250,31258,31263,31268,31275,31280,31287,31292,31299,31304,31309],{"type":597,"tag":606,"props":26161,"children":26162},{},[26163,26165,26175],{"type":603,"value":26164},"*(译前言: Unity DOTS提出了一套全新的开发技术栈, 但目前少有精讲如何结合现有工作流进行开发的资料, 外网 *",{"type":597,"tag":886,"props":26166,"children":26169},{"href":26167,"rel":26168},"https://link.zhihu.com/?target=https%3A//gametorrahod.com/game-object-conversion-and-subscene/",[890],[26170],{"type":597,"tag":1733,"props":26171,"children":26172},{},[26173],{"type":603,"value":26174},"这篇文章 (Game Object Conversion and SubScene)",{"type":603,"value":26176}," 详细解构了基于 GameObject 和 Subscene 的工作流程和原理, 要求读者对 DOTS/ECS 有基本的了解, 虽然非常之长, 但值得一读)",{"type":597,"tag":3720,"props":26178,"children":26179},{},[],{"type":597,"tag":606,"props":26181,"children":26182},{},[26183],{"type":603,"value":26184},"游戏基本上就是关于玩家的输入如何改变(设计好的)数据, 并从渲染结果中得到乐趣的过程. 传统上, 这些数据是用 Unity 的所见即所得的编辑器来设计的. 但是基于 GameObject 的数据和 ECS 并不兼容. 如果在设计数据阶段能保留Unity的传统模式同时在 Runtime 阶段使用 ECS 高效处理数据, 那就能完美结合两者的优点.",{"type":597,"tag":598,"props":26186,"children":26188},{"id":26187},"以前是如何制作游戏的",[26189],{"type":603,"value":26187},{"type":597,"tag":606,"props":26191,"children":26192},{},[26193],{"type":597,"tag":719,"props":26194,"children":26196},{"alt":719,"src":26195},"/images/2020-10-19-game-object-conversion-and-subscene/v2-6189e6b1d575c1ad9bbec966f5e99ee4_720w.jpg",[],{"type":597,"tag":606,"props":26198,"children":26199},{},[26200],{"type":603,"value":26201},"如上图, 首先想想为什么方块能在每帧都被正确绘制到屏幕上? 在传统的 GameObject 里, 引擎会编译并排序整个 hierarchy 树, 同时按顺序调用绘制函数(draw call). 每次 Draw call 调用之间引擎需要初始化 material 和 mesh (也即 set pass call, 如果和前一次调用一样则无需初始化). 在内部 Unity 可能尝试合并 mesh 来减少 draw call (dynamic batching 和 static batching), 如果是 Dynamic 对象这步操作会增加一些 CPU 开销, 如果是 static 则会在build 时预先合并.",{"type":597,"tag":606,"props":26203,"children":26204},{},[26205],{"type":603,"value":26206},"换句话说, 我们使用 Unity 构建的游戏保存在 YAML格式的 Scene文件中. 尽管游戏并非在 YAML 基础上运行, 在加载 Scene 并解析了方块 .prefab 文件后, 引起会准备一些 C++ 的内存用来存储 Transform, 相应代码则基于此来绘制.",{"type":597,"tag":606,"props":26208,"children":26209},{},[26210,26212,26217,26219,26225,26227,26233],{"type":603,"value":26211},"在同一帧中这是同一块操作. 并取决于",{"type":597,"tag":1080,"props":26213,"children":26214},{},[26215],{"type":603,"value":26216},"数据",{"type":603,"value":26218},"本身, 每个方块的",{"type":597,"tag":629,"props":26220,"children":26222},{"className":26221},[],[26223],{"type":603,"value":26224},"Transform",{"type":603,"value":26226},"和 ",{"type":597,"tag":629,"props":26228,"children":26230},{"className":26229},[],[26231],{"type":603,"value":26232},"MeshFilter",{"type":603,"value":26234}," 告知了我们绘制什么. 不幸的是, 绘制都关注于什么样draw call 顺序能得到的正确的结果, 而所有这些绘制都来自于对于数据某些形式的迭代. (在C++中如果数据排布不佳依然不一定能高效迭代). 大家知道 ECS 擅长数据迭代. 而 Burst 加 ECS 则能帮助数据容易多线程处理, 这是我们为什么要用 ECS 来开发游戏的原因.",{"type":597,"tag":606,"props":26236,"children":26237},{},[26238,26240,26245],{"type":603,"value":26239},"另一块操作则是逻辑. 在绘制之前, 比如方块可能有个 Bouncing 组件在持续地改变它的 ",{"type":597,"tag":629,"props":26241,"children":26243},{"className":26242},[],[26244],{"type":603,"value":26224},{"type":603,"value":26246}," (好让你的游戏变得更有趣). 在改变用于绘制的数据这方面, ECS 依然能帮到你.",{"type":597,"tag":606,"props":26248,"children":26249},{},[26250],{"type":603,"value":26251},"游戏基本上就这些了, 你有一些数据, 然后可能根据玩家的输入等因素来改变, 最后在每一帧中绘制出来.",{"type":597,"tag":606,"props":26253,"children":26254},{},[26255],{"type":603,"value":26256},"结合改变数据和对数据的绘制, 玩家应该开始能感受到乐趣了! 事实上这一过程也常常使人放松(比如看着一个球在屏幕上下移动). 从纯数据的角度来审视游戏非常重要, 否则你无法接受基于 DOTS 来开发游戏的方式.",{"type":597,"tag":598,"props":26258,"children":26260},{"id":26259},"如何在-dots-的世界里做游戏",[26261],{"type":603,"value":26262},"如何在 DOTS 的世界里做游戏",{"type":597,"tag":606,"props":26264,"children":26265},{},[26266,26267,26273],{"type":603,"value":695},{"type":597,"tag":629,"props":26268,"children":26270},{"className":26269},[],[26271],{"type":603,"value":26272},"GameOjbect",{"type":603,"value":26274},"不同, 数据在ECS里类似数据库, 设想一下, 因为我们可以使用Jobs或者 SIMD指令来更快地迭代数据, 所以不仅改变数据的逻辑非常高效而且绘制本身也是高效的.",{"type":597,"tag":606,"props":26276,"children":26277},{},[26278,26280,26286,26288,26294,26295,26301],{"type":603,"value":26279},"接下来我们直接跳到最后. 我现在已经在使用ECS并且我有3个 transform 矩阵需要绘制(以",{"type":597,"tag":629,"props":26281,"children":26283},{"className":26282},[],[26284],{"type":603,"value":26285},"IcomponentData",{"type":603,"value":26287},"形式, 所以迭代是线性且快速的) , 外加对应的 ",{"type":597,"tag":629,"props":26289,"children":26291},{"className":26290},[],[26292],{"type":603,"value":26293},"Mesh",{"type":603,"value":13757},{"type":597,"tag":629,"props":26296,"children":26298},{"className":26297},[],[26299],{"type":603,"value":26300},"Material",{"type":603,"value":9674},{"type":597,"tag":606,"props":26303,"children":26304},{},[26305,26307,26312,26314,26321,26323,26329,26331,26337,26339,26346,26348,26354],{"type":603,"value":26306},"使用 Unity 的 Graphics Api 我们可以直接绘制这些数据而无需 ",{"type":597,"tag":629,"props":26308,"children":26310},{"className":26309},[],[26311],{"type":603,"value":22708},{"type":603,"value":26313}," 这个数据容器! 参考 ",{"type":597,"tag":886,"props":26315,"children":26318},{"href":26316,"rel":26317},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/ScriptReference/Graphics.html",[890],[26319],{"type":603,"value":26320},"Unity - Scripting API: Graphics",{"type":603,"value":26322}," 以及支持 ",{"type":597,"tag":629,"props":26324,"children":26326},{"className":26325},[],[26327],{"type":603,"value":26328},"NativeArray",{"type":603,"value":26330}," 的 ",{"type":597,"tag":629,"props":26332,"children":26334},{"className":26333},[],[26335],{"type":603,"value":26336},"BatchRendererGroup",{"type":603,"value":26338},"(",{"type":597,"tag":886,"props":26340,"children":26343},{"href":26341,"rel":26342},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/2019.3/Documentation/ScriptReference/Rendering.BatchRendererGroup.html",[890],[26344],{"type":603,"value":26345},"https://docs.unity3d.com/2019.3/Documentation/ScriptReference/Rendering.BatchRendererGroup.html",{"type":603,"value":26347},"). 这时你已经可以直接从数据来绘制了. 只需要用 ECS 的",{"type":597,"tag":629,"props":26349,"children":26351},{"className":26350},[],[26352],{"type":603,"value":26353},"EntityQuery",{"type":603,"value":26355},"等方法来获取数据并绘制它们.",{"type":597,"tag":606,"props":26357,"children":26358},{},[26359,26361,26368,26370,26375],{"type":603,"value":26360},"参考这篇日文博客(",{"type":597,"tag":886,"props":26362,"children":26365},{"href":26363,"rel":26364},"https://link.zhihu.com/?target=https%3A//virtualcast.jp/blog/2019/10/batchrenderergroup/",[890],[26366],{"type":603,"value":26367},"https://virtualcast.jp/blog/2019/10/batchrenderergroup/",{"type":603,"value":26369},"), 描述了 BatchRendererGroup 的优势. 尽管 \"batches\" 数量巨大, 性能依然优异. 要注意 batching 实际上是合并 mesh 的操作, 因此有一定的计算量. 绘制就是重复地调用没有改变的数据,只要你将 NativeArray 的内存留在 ",{"type":597,"tag":629,"props":26371,"children":26373},{"className":26372},[],[26374],{"type":603,"value":26336},{"type":603,"value":26376}," 里面, 1000+的 \"batches\" 一点也不可怕.(较低的\"set pass call\"展示了在帧间绘制时并没有太多了 material 切换)",{"type":597,"tag":598,"props":26378,"children":26380},{"id":26379},"hybrid-renderer",[26381],{"type":603,"value":26382},"Hybrid Renderer",{"type":597,"tag":606,"props":26384,"children":26385},{},[26386,26388,26395,26397,26403,26405,26411,26412,26418,26420,26425,26426,26431,26433,26438],{"type":603,"value":26387},"Unity 开发了 Hybrid Renderer (",{"type":597,"tag":886,"props":26389,"children":26392},{"href":26390,"rel":26391},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Packages/com.unity.rendering.hybrid%40latest",[890],[26393],{"type":603,"value":26394},"https://docs.unity3d.com/Packages/com.unity.rendering.hybrid@latest",{"type":603,"value":26396},") 来完成上文提到的绘制工作. 如果你有一个关联 ",{"type":597,"tag":629,"props":26398,"children":26400},{"className":26399},[],[26401],{"type":603,"value":26402},"LocalToworld",{"type":603,"value":26404}," 组件(也即Transform矩阵)的 Entity , 且Entity 所在 Chunk 关联了是 ",{"type":597,"tag":629,"props":26406,"children":26408},{"className":26407},[],[26409],{"type":603,"value":26410},"ISharedComponentData",{"type":603,"value":26330},{"type":597,"tag":629,"props":26413,"children":26415},{"className":26414},[],[26416],{"type":603,"value":26417},"RenderMesh",{"type":603,"value":26419}," 组件 (",{"type":597,"tag":629,"props":26421,"children":26423},{"className":26422},[],[26424],{"type":603,"value":26293},{"type":603,"value":13757},{"type":597,"tag":629,"props":26427,"children":26429},{"className":26428},[],[26430],{"type":603,"value":26300},{"type":603,"value":26432}," 不在 ECS 框架下), 那么它就会使用 ",{"type":597,"tag":629,"props":26434,"children":26436},{"className":26435},[],[26437],{"type":603,"value":26336},{"type":603,"value":26439}," 来绘制数据.",{"type":597,"tag":606,"props":26441,"children":26442},{},[26443,26445,26450,26452,26457,26458,26463,26465,26470],{"type":603,"value":26444},"整个 Chunk 基于 ",{"type":597,"tag":629,"props":26446,"children":26448},{"className":26447},[],[26449],{"type":603,"value":22560},{"type":603,"value":26451}," 的数量来绘制的是同样数量的 mesh 和 material. 这已经类似于CPU版本的 GPU instancing 了, 只使用 draw call 是非常快的, 这种粗暴的绘制方式甚至可能比花费 CPU 来每帧合并 mesh 的方式还要快. 由于同一 chunk 使用同样的 ",{"type":597,"tag":629,"props":26453,"children":26455},{"className":26454},[],[26456],{"type":603,"value":26293},{"type":603,"value":13757},{"type":597,"tag":629,"props":26459,"children":26461},{"className":26460},[],[26462],{"type":603,"value":26300},{"type":603,"value":26464}," , 并非100%无需 set pass call. 如果你的 Material 开启了 GPU instancing, ",{"type":597,"tag":629,"props":26466,"children":26468},{"className":26467},[],[26469],{"type":603,"value":26336},{"type":603,"value":26471}," 可以批量绘制可不是快速的重绘.",{"type":597,"tag":606,"props":26473,"children":26474},{},[26475,26477,26482,26484,26489,26491,26497,26499,26504,26506,26511],{"type":603,"value":26476},"之所以这种方式称之为 Hybrid 是因为 ",{"type":597,"tag":629,"props":26478,"children":26480},{"className":26479},[],[26481],{"type":603,"value":26336},{"type":603,"value":26483}," 是普通的 Unity API 而不是 ECS API. 但是这并不意味着这不是 Data-Oriented. 事实上 ",{"type":597,"tag":629,"props":26485,"children":26487},{"className":26486},[],[26488],{"type":603,"value":26336},{"type":603,"value":26490}," 工作的方式非常地 Data-Oriented: 就是由 ",{"type":597,"tag":629,"props":26492,"children":26494},{"className":26493},[],[26495],{"type":603,"value":26496},"MaterialPropertyBlock",{"type":603,"value":26498}," 和 Transform 矩阵构成的 ",{"type":597,"tag":629,"props":26500,"children":26502},{"className":26501},[],[26503],{"type":603,"value":26328},{"type":603,"value":26505}," 数据. 所以别害怕使用它(Hybrid Renderer) 除非你知道如何使用 Graphics API 或者使用 ",{"type":597,"tag":629,"props":26507,"children":26509},{"className":26508},[],[26510],{"type":603,"value":26336},{"type":603,"value":26512},"构建你自己的渲染模式. (或许可以去掉非必须的步骤比如 culling).",{"type":597,"tag":598,"props":26514,"children":26516},{"id":26515},"让我们用纯数据来做个游戏吧",[26517],{"type":603,"value":26515},{"type":597,"tag":606,"props":26519,"children":26520},{},[26521],{"type":603,"value":26522},"既然已经接受了游戏就是改变数据和展示数据, 使用 Hybrid Renderer 我们就可以来做游戏了. 我们假设这就是关于一个上下弹跳的方块的游戏, 按住空格的时候让它跳的更疯狂, 这可能对于小孩子来讲非常有趣.",{"type":597,"tag":606,"props":26524,"children":26525},{},[26526,26528,26533,26534,26539,26541,26547],{"type":603,"value":26527},"首先要解决的问题, 如何获取到我们需要的 ",{"type":597,"tag":629,"props":26529,"children":26531},{"className":26530},[],[26532],{"type":603,"value":26293},{"type":603,"value":13757},{"type":597,"tag":629,"props":26535,"children":26537},{"className":26536},[],[26538],{"type":603,"value":26300},{"type":603,"value":26540},". 我想我会使用 ",{"type":597,"tag":629,"props":26542,"children":26544},{"className":26543},[],[26545],{"type":603,"value":26546},"Rensources.Load",{"type":603,"value":26548},"来加载一个引用了相关 asset 的 prefab:",{"type":597,"tag":621,"props":26550,"children":26553},{"className":26551,"code":26552,"language":8105,"meta":591},[8107],"using UnityEngine;\n\npublic class AssetHolder : MonoBehaviour\n{\n    public Mesh myMesh;\n    public Material myMaterial;\n}\n",[26554],{"type":597,"tag":629,"props":26555,"children":26556},{"__ignoreMap":591},[26557],{"type":603,"value":26552},{"type":597,"tag":606,"props":26559,"children":26560},{},[26561],{"type":597,"tag":719,"props":26562,"children":26564},{"alt":719,"src":26563},"/images/2020-10-19-game-object-conversion-and-subscene/v2-2fd0d4674c7f066e2e1059dd48558882_720w.jpg",[],{"type":597,"tag":606,"props":26566,"children":26567},{},[26568],{"type":603,"value":26569},"下面的 System 用来创建Hybrid Renderer 要使用的数据.",{"type":597,"tag":621,"props":26571,"children":26574},{"className":26572,"code":26573,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Rendering;\nusing Unity.Transforms;\nusing UnityEngine;\n\n[UpdateInGroup(typeof(SimulationSystemGroup))]\npublic class CubeGameSystem : JobComponentSystem\n{\n    protected override void OnCreate()\n    {\n        base.OnCreate();\n        var myCube = EntityManager.CreateEntity(\n            ComponentType.ReadOnly\u003CLocalToWorld>(),\n            ComponentType.ReadOnly\u003CRenderMesh>()\n        );\n        EntityManager.SetComponentData(myCube, new LocalToWorld\n        {\n            Value = new float4x4(rotation: quaternion.identity, translation:new float3(1,2,3))\n        });\n        var ah = Resources.Load\u003CGameObject>(\"AssetHolder\").GetComponent\u003CAssetHolder>();\n        EntityManager.SetSharedComponentData(myCube, new RenderMesh\n        {\n            mesh = ah.myMesh,\n            material = ah.myMaterial\n        });\n    }\n\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        return default;\n    }\n}\n",[26575],{"type":597,"tag":629,"props":26576,"children":26577},{"__ignoreMap":591},[26578],{"type":603,"value":26573},{"type":597,"tag":606,"props":26580,"children":26581},{},[26582],{"type":603,"value":26583},"瞧, 我的 data-oriented 方块坐标位于 (1, 2, 3)!",{"type":597,"tag":606,"props":26585,"children":26586},{},[26587],{"type":597,"tag":719,"props":26588,"children":26590},{"alt":719,"src":26589},"/images/2020-10-19-game-object-conversion-and-subscene/v2-e531723f584b5747646fc3340dc937ef_720w.jpg",[],{"type":597,"tag":606,"props":26592,"children":26593},{},[26594,26596,26601],{"type":603,"value":26595},"可以看到 Hierarchy 窗口里什么都没有, 但是方块却出现了. 编辑器窗口里也无法选中它, 它仅仅是被绘制了而已. 事实上编辑器里之所以可以选中是因为 ",{"type":597,"tag":629,"props":26597,"children":26599},{"className":26598},[],[26600],{"type":603,"value":22708},{"type":603,"value":26602}," 容器连接了绘制的内容和其他编辑的内容.",{"type":597,"tag":606,"props":26604,"children":26605},{},[26606,26608,26613],{"type":603,"value":26607},"如果现在检查 Entity Debugger, 你会注意到 Hybrid Renderer 又添加了一些别的东西. 它会在提交数据到 ",{"type":597,"tag":629,"props":26609,"children":26611},{"className":26610},[],[26612],{"type":603,"value":26336},{"type":603,"value":26614}," 之前剔除掉无法被看到的东西.",{"type":597,"tag":606,"props":26616,"children":26617},{},[26618],{"type":597,"tag":719,"props":26619,"children":26621},{"alt":719,"src":26620},"/images/2020-10-19-game-object-conversion-and-subscene/v2-218f24f57c5b783f8d52064804a8e977_720w.jpg",[],{"type":597,"tag":606,"props":26623,"children":26624},{},[26625,26627,26632,26634,26639],{"type":603,"value":26626},"以上意味着: \"你拥有 1 个chunk, 该 chunk 能容纳 128 个 Entity ( 1 个 Entity占用 125 字节, 1 个 chunk 16kb), 你已经使用了该 chunk 其中 1 个位置, 你还能添加 127 个方块. Hybrid Renderer 把方块 ",{"type":597,"tag":629,"props":26628,"children":26630},{"className":26629},[],[26631],{"type":603,"value":22560},{"type":603,"value":26633}," 数据喂给 ",{"type":597,"tag":629,"props":26635,"children":26637},{"className":26636},[],[26638],{"type":603,"value":26336},{"type":603,"value":26640}," 时, 这些数据在内存中都是连续排列的.",{"type":597,"tag":598,"props":26642,"children":26644},{"id":26643},"transform-systems",[26645],{"type":603,"value":26646},"Transform systems",{"type":597,"tag":606,"props":26648,"children":26649},{},[26650],{"type":603,"value":26651},"现在你有一个数据并且绘制了, 接下来我们加点玩法.",{"type":597,"tag":606,"props":26653,"children":26654},{},[26655],{"type":603,"value":22506},{"type":597,"tag":606,"props":26657,"children":26658},{},[26659],{"type":597,"tag":719,"props":26660,"children":26662},{"alt":719,"src":26661},"/images/2020-10-19-game-object-conversion-and-subscene/v2-1eb72ea2222c31c50554021afecb27d1_720w.jpg",[],{"type":597,"tag":606,"props":26664,"children":26665},{},[26666,26667,26672,26673,26678,26679,26684,26685,26690,26691,26696,26697,26702],{"type":603,"value":8220},{"type":597,"tag":629,"props":26668,"children":26670},{"className":26669},[],[26671],{"type":603,"value":22523},{"type":603,"value":9688},{"type":597,"tag":629,"props":26674,"children":26676},{"className":26675},[],[26677],{"type":603,"value":22530},{"type":603,"value":9688},{"type":597,"tag":629,"props":26680,"children":26682},{"className":26681},[],[26683],{"type":603,"value":22537},{"type":603,"value":3326},{"type":597,"tag":629,"props":26686,"children":26688},{"className":26687},[],[26689],{"type":603,"value":22544},{"type":603,"value":22546},{"type":597,"tag":629,"props":26692,"children":26694},{"className":26693},[],[26695],{"type":603,"value":22552},{"type":603,"value":22554},{"type":597,"tag":629,"props":26698,"children":26700},{"className":26699},[],[26701],{"type":603,"value":22560},{"type":603,"value":22562},{"type":597,"tag":606,"props":26704,"children":26705},{},[26706],{"type":603,"value":26707},"接下来我们添加 Translation 给方块. 玩法系统现在就可以通过修改 Translation 而不是 LocalToWorld了. 我同时添加了 Cube 组件作为 Tag, 这样子代码会更加清晰:",{"type":597,"tag":621,"props":26709,"children":26712},{"className":26710,"code":26711,"language":8105,"meta":591},[8107],"var myCube = EntityManager.CreateEntity(\n    ComponentType.ReadOnly\u003CTranslation>(),\n    ComponentType.ReadOnly\u003CCube>(), //Tag\n    ComponentType.ReadOnly\u003CLocalToWorld>(),\n    ComponentType.ReadOnly\u003CRenderMesh>()\n);\n",[26713],{"type":597,"tag":629,"props":26714,"children":26715},{"__ignoreMap":591},[26716],{"type":603,"value":26711},{"type":597,"tag":606,"props":26718,"children":26719},{},[26720,26722,26728],{"type":603,"value":26721},"接下来实现弹跳. 我们使用 ",{"type":597,"tag":629,"props":26723,"children":26725},{"className":26724},[],[26726],{"type":603,"value":26727},"Time .ElapsedTime",{"type":603,"value":26729}," 作为余弦函数的输入, 会返回一个从 0 到 1来回的值.",{"type":597,"tag":606,"props":26731,"children":26732},{},[26733],{"type":603,"value":26734},"注意, ECS 妙的一点在于你可以不断地添加新系统来实现代码的\"横向地\"以构建更多玩法. 模式则是从 ECS 快速的数据库里查询数据, 然后修改, 再存回去. 你可能对这种每次都查询-修改都要增加新 System 的模式觉得有些不安, 但这种模式提升了代码的扩展性. 而 Unity ECS 则确保了重复的数据查询是高效的, 因此在代码中有大量逻辑简单的 System 是完全可行的.",{"type":597,"tag":606,"props":26736,"children":26737},{},[26738,26740,26745,26747,26752,26754,26760,26762,26768],{"type":603,"value":26739},"我们的弹跳系统先在主线程检查空格是否按下, 并声明相关变量, 最后在 Lambda jobs 中捕获这些变量, 并根据此并行修改查询到的 Cube 的 ",{"type":597,"tag":629,"props":26741,"children":26743},{"className":26742},[],[26744],{"type":603,"value":22523},{"type":603,"value":26746}," 值, 其中每一个线程会运行时会使用 1 个 chunk 的 Cube 和 ",{"type":597,"tag":629,"props":26748,"children":26750},{"className":26749},[],[26751],{"type":603,"value":22523},{"type":603,"value":26753}," 数据. ",{"type":597,"tag":629,"props":26755,"children":26757},{"className":26756},[],[26758],{"type":603,"value":26759},"Time",{"type":603,"value":26761}," 是由 ECS 库维护的一个属性, 它每帧都会从传统的 ",{"type":597,"tag":629,"props":26763,"children":26765},{"className":26764},[],[26766],{"type":603,"value":26767},"UnityEngine.Time",{"type":603,"value":26769}," 获取相应的数据",{"type":597,"tag":621,"props":26771,"children":26774},{"className":26772,"code":26773,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Mathematics;\nusing Unity.Transforms;\nusing UnityEngine;\n\n[UpdateInGroup(typeof(SimulationSystemGroup))]\n[UpdateBefore(typeof(TransformSystemGroup))]\npublic class CubeBouncingSystem : JobComponentSystem\n{\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        int multiplier = Input.GetKey(KeyCode.Space) ? 100 : 20;\n        var elapsedTime = Time.ElapsedTime;\n        \n        JobHandle jh = Entities.WithAll\u003CCube>().ForEach((ref Translation t) =>\n        {\n            float3 value = t.Value;\n            value.y = math.cos((float) elapsedTime * multiplier);\n            t.Value = value;\n        }).Schedule(inputDeps);\n        return jh;\n    }\n}\n",[26775],{"type":597,"tag":629,"props":26776,"children":26777},{"__ignoreMap":591},[26778],{"type":603,"value":26773},{"type":597,"tag":606,"props":26780,"children":26781},{},[26782],{"type":597,"tag":719,"props":26783,"children":26785},{"alt":719,"src":26784},"/images/2020-10-19-game-object-conversion-and-subscene/v2-f23943863e0ab8ec8907f242579a0884_b.jpg",[],{"type":597,"tag":606,"props":26787,"children":26788},{},[26789],{"type":603,"value":26790},"Worker 线程现在已经在工作了. 当你用这种方式构建游戏, 最终几乎每个 Worker 线程都会来回使用以避免闲置:",{"type":597,"tag":606,"props":26792,"children":26793},{},[26794],{"type":597,"tag":719,"props":26795,"children":26797},{"alt":719,"src":26796},"/images/2020-10-19-game-object-conversion-and-subscene/v2-f116b2bea7e7ca411112bc9e82265c54_720w.jpg",[],{"type":597,"tag":598,"props":26799,"children":26801},{"id":26800},"可是这样构建游戏实在是太痛苦了",[26802],{"type":603,"value":26800},{"type":597,"tag":606,"props":26804,"children":26805},{},[26806],{"type":603,"value":26807},"你应该已经注意到, 正儿八经的游戏要改成 data-oriented 并不容易. (除了上文的弹跳球这样的简单场景). 甚至现在你都没法使用所见即所得的编辑器了. 整个游戏如果按照这种方式获取 LTW + Mesh + Material 将会是噩梦般的开发旅程. 虽然整个游戏按照这样的方式构建非常恐怖, 但性能确实是会非常好. 有点倒退回 Cocos2D 时代的感觉. 自然你是想要在编辑器中快速地迭代玩法/美术相关内容.",{"type":597,"tag":606,"props":26809,"children":26810},{},[26811,26813,26818,26820,26825,26827,26832],{"type":603,"value":26812},"但记住这个方块绘制效率极高, 如果你添加更多的方块, 它们都会打包喂给",{"type":597,"tag":629,"props":26814,"children":26816},{"className":26815},[],[26817],{"type":603,"value":26336},{"type":603,"value":26819}," 因为在同一个 chunk 内存里 ",{"type":597,"tag":629,"props":26821,"children":26823},{"className":26822},[],[26824],{"type":603,"value":22560},{"type":603,"value":26826}," 已经被连续排列好了. 而复制一个方块也不再是复制",{"type":597,"tag":629,"props":26828,"children":26830},{"className":26829},[],[26831],{"type":603,"value":22708},{"type":603,"value":26833},"这样昂贵的操作, 只需要添加更多 Entity 以及相应的组件.",{"type":597,"tag":606,"props":26835,"children":26836},{},[26837,26839,26844,26846,26852,26854,26860],{"type":603,"value":26838},"同样的, 一个 Entity 将数据转存回 ",{"type":597,"tag":629,"props":26840,"children":26842},{"className":26841},[],[26843],{"type":603,"value":22708},{"type":603,"value":26845}," 也不是什么好主意 (",{"type":597,"tag":629,"props":26847,"children":26849},{"className":26848},[],[26850],{"type":603,"value":26851},"GameObjectEntity",{"type":603,"value":26853}," 就做了这样的事儿), 我们想要运行时的 pure ECS , 而不是桥接回 ",{"type":597,"tag":629,"props":26855,"children":26857},{"className":26856},[],[26858],{"type":603,"value":26859},"MonoBehaviour",{"type":603,"value":26861}," 的 ECS.",{"type":597,"tag":606,"props":26863,"children":26864},{},[26865],{"type":603,"value":26866},"简言之, 你想要 ECS 的高性能, 但不想要按这样的方式来开发游戏.",{"type":597,"tag":598,"props":26868,"children":26870},{"id":26869},"conversion-workflow",[26871],{"type":603,"value":26872},"Conversion workflow",{"type":597,"tag":606,"props":26874,"children":26875},{},[26876,26878,26883],{"type":603,"value":26877},"所以 Unity 团队采用了常规的 GameObject 来仅实现",{"type":597,"tag":1080,"props":26879,"children":26880},{},[26881],{"type":603,"value":26882},"编辑操作(authoring),",{"type":603,"value":26884}," 而在运行时, 则将这些 GameObject **转换(convert)**为纯粹的 ECS data.",{"type":597,"tag":606,"props":26886,"children":26887},{},[26888],{"type":603,"value":26889},"我之所以之前介绍 renderer 和 transform, 是因为转换过程实际上是将编辑时方便的 GameObject 对象转换为高性能 transform 和 renderring 系统支持的 entity.",{"type":597,"tag":606,"props":26891,"children":26892},{},[26893],{"type":597,"tag":1080,"props":26894,"children":26895},{},[26896],{"type":603,"value":26897},"Component object",{"type":597,"tag":606,"props":26899,"children":26900},{},[26901,26903,26909,26911,26916],{"type":603,"value":26902},"在进阶之前, 我假设你已经知道了 component objects. 这不仅是可以添加到 Entity 上的 ",{"type":597,"tag":629,"props":26904,"children":26906},{"className":26905},[],[26907],{"type":603,"value":26908},"IComponentData",{"type":603,"value":26910}," 组件, 你甚至可以使用 ",{"type":597,"tag":629,"props":26912,"children":26914},{"className":26913},[],[26915],{"type":603,"value":26859},{"type":603,"value":26917}," 类型.",{"type":597,"tag":606,"props":26919,"children":26920},{},[26921,26923,26928],{"type":603,"value":26922},"只不过你无法在 jobs 使用这些类型, 很多有 ",{"type":597,"tag":629,"props":26924,"children":26926},{"className":26925},[],[26927],{"type":603,"value":26908},{"type":603,"value":26929}," 约束的泛型 API 也无法被使用. 但是这种类型的组件确实是关联到 Entity 上的, 也有相关的 API 可以使用. 以下是一些支持 component objects API 例子:",{"type":597,"tag":1321,"props":26931,"children":26932},{},[26933,26959,26990,27022],{"type":597,"tag":807,"props":26934,"children":26935},{},[26936,26942,26944,26950,26951,26957],{"type":597,"tag":629,"props":26937,"children":26939},{"className":26938},[],[26940],{"type":603,"value":26941},"EntityManager",{"type":603,"value":26943},":",{"type":597,"tag":629,"props":26945,"children":26947},{"className":26946},[],[26948],{"type":603,"value":26949},"AddComponentObject",{"type":603,"value":9688},{"type":597,"tag":629,"props":26952,"children":26954},{"className":26953},[],[26955],{"type":603,"value":26956},"GetComponentObject",{"type":603,"value":26958},". 如果添加不存在的组件, 你在获取时会得到一个 null.",{"type":597,"tag":807,"props":26960,"children":26961},{},[26962,26968,26970,26976,26978,26983,26985],{"type":597,"tag":629,"props":26963,"children":26965},{"className":26964},[],[26966],{"type":603,"value":26967},"ComponentType",{"type":603,"value":26969},": 你可以创建 ",{"type":597,"tag":629,"props":26971,"children":26973},{"className":26972},[],[26974],{"type":603,"value":26975},"\u003CT>",{"type":603,"value":26977}," (如",{"type":597,"tag":629,"props":26979,"children":26981},{"className":26980},[],[26982],{"type":603,"value":26859},{"type":603,"value":26984},")类型的 ",{"type":597,"tag":629,"props":26986,"children":26988},{"className":26987},[],[26989],{"type":603,"value":26967},{"type":597,"tag":807,"props":26991,"children":26992},{},[26993,26999,27000,27006,27008,27013,27015,27020],{"type":597,"tag":629,"props":26994,"children":26996},{"className":26995},[],[26997],{"type":603,"value":26998},"system.GetEntityQuery",{"type":603,"value":9688},{"type":597,"tag":629,"props":27001,"children":27003},{"className":27002},[],[27004],{"type":603,"value":27005},"em.CreateArchetype",{"type":603,"value":27007},": 因此你可以使用",{"type":597,"tag":629,"props":27009,"children":27011},{"className":27010},[],[27012],{"type":603,"value":26859},{"type":603,"value":27014},"类型的 ",{"type":597,"tag":629,"props":27016,"children":27018},{"className":27017},[],[27019],{"type":603,"value":26967},{"type":603,"value":27021}," 来创建组件的查询.",{"type":597,"tag":807,"props":27023,"children":27024},{},[27025,27030,27031,27037,27039,27045,27047,27053,27055],{"type":597,"tag":629,"props":27026,"children":27028},{"className":27027},[],[27029],{"type":603,"value":26353},{"type":603,"value":26943},{"type":597,"tag":629,"props":27032,"children":27034},{"className":27033},[],[27035],{"type":603,"value":27036},"ToComponentArray",{"type":603,"value":27038},"会返回 ",{"type":597,"tag":629,"props":27040,"children":27042},{"className":27041},[],[27043],{"type":603,"value":27044},"T[]",{"type":603,"value":27046},". 这会返回以托管数组方式存储托管组件的结果, 而不是",{"type":597,"tag":629,"props":27048,"children":27050},{"className":27049},[],[27051],{"type":603,"value":27052},"ToComponentDataArray",{"type":603,"value":27054},"那样返回 ",{"type":597,"tag":629,"props":27056,"children":27058},{"className":27057},[],[27059],{"type":603,"value":27060},"NativeArray\u003CT>",{"type":597,"tag":598,"props":27062,"children":27064},{"id":27063},"conversion-world-destination-world-primary-entity",[27065],{"type":603,"value":27066},"Conversion world, destination world, primary entity",{"type":597,"tag":606,"props":27068,"children":27069},{},[27070,27072,27077,27079,27084,27086,27091,27093],{"type":603,"value":27071},"在内部, 转换过程是创建特定目的的 World, 并在其中运行特定的 ",{"type":597,"tag":1080,"props":27073,"children":27074},{},[27075],{"type":603,"value":27076},"conversion systems",{"type":603,"value":27078}," (这样你会得到一个新的 ",{"type":597,"tag":629,"props":27080,"children":27082},{"className":27081},[],[27083],{"type":603,"value":26941},{"type":603,"value":27085},", 以及存储entities 的数据库). 这被称为 ",{"type":597,"tag":1080,"props":27087,"children":27088},{},[27089],{"type":603,"value":27090},"conversion world",{"type":603,"value":27092},". conversion world 同时也知晓用于存储转换结果的 ",{"type":597,"tag":1080,"props":27094,"children":27095},{},[27096],{"type":603,"value":27097},"destination world.",{"type":597,"tag":606,"props":27099,"children":27100},{},[27101,27103,27108,27110,27116,27117,27122,27124,27130,27132,27137,27139,27145,27146,27151,27153,27159],{"type":603,"value":27102},"因为conversion world is一个 ECS World, 我们可以从 Entity 出发来而不是仅仅是 Hierarchy 中的 ",{"type":597,"tag":629,"props":27104,"children":27106},{"className":27105},[],[27107],{"type":603,"value":22708},{"type":603,"value":27109},". 由于前文所提到的 component object 的存在, 从",{"type":597,"tag":629,"props":27111,"children":27113},{"className":27112},[],[27114],{"type":603,"value":27115},"Gamebject",{"type":603,"value":4731},{"type":597,"tag":1080,"props":27118,"children":27119},{},[27120],{"type":603,"value":27121},"importing",{"type":603,"value":27123}," 的过程也非常容易, 所以你也可以得到一堆完整复刻 ",{"type":597,"tag":629,"props":27125,"children":27127},{"className":27126},[],[27128],{"type":603,"value":27129},"Gameobject",{"type":603,"value":27131},"原有层级关系和组件的 Entity (使用 class 类型组件). 也就是说, 让每个 entity 也拥有 Unity 传统的 ",{"type":597,"tag":629,"props":27133,"children":27135},{"className":27134},[],[27136],{"type":603,"value":26224},{"type":603,"value":27138},", ",{"type":597,"tag":629,"props":27140,"children":27142},{"className":27141},[],[27143],{"type":603,"value":27144},"RectTransform",{"type":603,"value":27138},{"type":597,"tag":629,"props":27147,"children":27149},{"className":27148},[],[27150],{"type":603,"value":26232},{"type":603,"value":27152}," 或者 ",{"type":597,"tag":629,"props":27154,"children":27156},{"className":27155},[],[27157],{"type":603,"value":27158},"LineRenderer",{"type":603,"value":27160}," 组件.",{"type":597,"tag":606,"props":27162,"children":27163},{},[27164,27166,27171],{"type":603,"value":27165},"这些拥有component object 的 entity 并不优秀, 我们更希望得到更优的基于 ",{"type":597,"tag":629,"props":27167,"children":27169},{"className":27168},[],[27170],{"type":603,"value":26908},{"type":603,"value":27172}," 的组件.",{"type":597,"tag":606,"props":27174,"children":27175},{},[27176,27178,27183,27185,27191,27193,27198],{"type":603,"value":27177},"通过",{"type":597,"tag":1080,"props":27179,"children":27180},{},[27181],{"type":603,"value":27182},"单次调用",{"type":603,"value":27184}," conversion world 的 ",{"type":597,"tag":629,"props":27186,"children":27188},{"className":27187},[],[27189],{"type":603,"value":27190},"update",{"type":603,"value":27192}," 方法, 其中的特定 system 也会 update 单次, 这会导入 component object entity 并将结果存入 destination world. 至少, 这会为每一个conversion world 中找到的 ",{"type":597,"tag":629,"props":27194,"children":27196},{"className":27195},[],[27197],{"type":603,"value":26224},{"type":603,"value":27199}," 组件创建一个空的 Entity.",{"type":597,"tag":606,"props":27201,"children":27202},{},[27203],{"type":597,"tag":719,"props":27204,"children":27206},{"alt":719,"src":27205},"/images/2020-10-19-game-object-conversion-and-subscene/v2-bff28dd360d229c6ba16b991033abf0d_720w.jpg",[],{"type":597,"tag":606,"props":27208,"children":27209},{},[27210,27212,27218],{"type":603,"value":27211},"上图中, destination world 的 Entity A 被成为 ",{"type":597,"tag":629,"props":27213,"children":27215},{"className":27214},[],[27216],{"type":603,"value":27217},"GameObject A ",{"type":603,"value":27219},"的 \"primary entity\". 之所以没有被称为 \"resulting entity\", 是因为这转换过程并非是一对一的过程. 比如 A 可能在 destination world 中构建出 A1 和 A2 两个 entity, 这种情况, 其中一个将成为 primary entity.",{"type":597,"tag":606,"props":27221,"children":27222},{},[27223,27225,27230,27232,27237,27239,27244,27246,27251,27253,27259,27261,27266],{"type":603,"value":27224},"另一个",{"type":597,"tag":1080,"props":27226,"children":27227},{},[27228],{"type":603,"value":27229},"在 conversion world 工作时",{"type":603,"value":27231},"的特点是你可以通过原始的 ",{"type":597,"tag":629,"props":27233,"children":27235},{"className":27234},[],[27236],{"type":603,"value":22708},{"type":603,"value":27238}," 获取 primary entity(当然也可以传入任一 ",{"type":597,"tag":629,"props":27240,"children":27242},{"className":27241},[],[27243],{"type":603,"value":26859},{"type":603,"value":27245}," 来获取, 内部将会调用",{"type":597,"tag":629,"props":27247,"children":27249},{"className":27248},[],[27250],{"type":603,"value":26859},{"type":603,"value":27252},"的 ",{"type":597,"tag":629,"props":27254,"children":27256},{"className":27255},[],[27257],{"type":603,"value":27258},".gameObject",{"type":603,"value":27260},"来替代). 比如上图 A 的",{"type":597,"tag":629,"props":27262,"children":27264},{"className":27263},[],[27265],{"type":603,"value":26224},{"type":603,"value":27267}," 也可以用于获取 primary entity, 这在更复杂的转换过程中可能有用.",{"type":597,"tag":606,"props":27269,"children":27270},{},[27271,27273,27278],{"type":603,"value":27272},"最后, 包含那些并不高效的 Entity 的 conversion world 将会被 ",{"type":597,"tag":1080,"props":27274,"children":27275},{},[27276],{"type":603,"value":27277},"destroy",{"type":603,"value":27279}," 掉.",{"type":597,"tag":598,"props":27281,"children":27283},{"id":27282},"gameobjectconversionsystem",[27284],{"type":603,"value":27285},"GameObjectConversionSystem",{"type":597,"tag":606,"props":27287,"children":27288},{},[27289],{"type":603,"value":27290},"被标记了如下 attribute 的 system 将在 conversion world 中被调用:",{"type":597,"tag":621,"props":27292,"children":27295},{"className":27293,"code":27294,"language":8105,"meta":591},[8107],"[WorldSystemFilter(WorldSystemFilterFlags.GameObjectConversion)]\n",[27296],{"type":597,"tag":629,"props":27297,"children":27298},{"__ignoreMap":591},[27299],{"type":603,"value":27294},{"type":597,"tag":606,"props":27301,"children":27302},{},[27303,27305,27310],{"type":603,"value":27304},"这个 attribute 是可继承的, 因此更推荐的方法是直接继承ECS库里已提供的",{"type":597,"tag":629,"props":27306,"children":27308},{"className":27307},[],[27309],{"type":603,"value":27285},{"type":603,"value":9674},{"type":597,"tag":606,"props":27312,"children":27313},{},[27314,27316,27322,27324,27329,27331,27336,27337,27343,27344,27349,27350,27355,27357,27362,27364,27370,27372,27377],{"type":603,"value":27315},"拿 ",{"type":597,"tag":629,"props":27317,"children":27319},{"className":27318},[],[27320],{"type":603,"value":27321},"TransformConversion",{"type":603,"value":27323}," system 为例. 它会在 conversion world 里面寻找 ",{"type":597,"tag":629,"props":27325,"children":27327},{"className":27326},[],[27328],{"type":603,"value":26224},{"type":603,"value":27330}," 组件, 依此来构建 destination world 中 entity 的",{"type":597,"tag":629,"props":27332,"children":27334},{"className":27333},[],[27335],{"type":603,"value":22560},{"type":603,"value":695},{"type":597,"tag":629,"props":27338,"children":27340},{"className":27339},[],[27341],{"type":603,"value":27342},"Translate",{"type":603,"value":3326},{"type":597,"tag":629,"props":27345,"children":27347},{"className":27346},[],[27348],{"type":603,"value":22530},{"type":603,"value":3326},{"type":597,"tag":629,"props":27351,"children":27353},{"className":27352},[],[27354],{"type":603,"value":22544},{"type":603,"value":27356},"组件, 它甚至知道在",{"type":597,"tag":629,"props":27358,"children":27360},{"className":27359},[],[27361],{"type":603,"value":26224},{"type":603,"value":27363},"的 scale 为",{"type":597,"tag":629,"props":27365,"children":27367},{"className":27366},[],[27368],{"type":603,"value":27369},"(1,1,1)",{"type":603,"value":27371},"时不添加",{"type":597,"tag":629,"props":27373,"children":27375},{"className":27374},[],[27376],{"type":603,"value":22544},{"type":603,"value":27378},"!",{"type":597,"tag":606,"props":27380,"children":27381},{},[27382],{"type":597,"tag":719,"props":27383,"children":27385},{"alt":719,"src":27384},"/images/2020-10-19-game-object-conversion-and-subscene/v2-48b3c53e12f6c638b561e55ad6b095cb_720w.jpg",[],{"type":597,"tag":606,"props":27387,"children":27388},{},[27389,27391,27397,27399,27404,27405,27411,27413,27418,27420,27425,27426,27431],{"type":603,"value":27390},"另一个值得看的例子是 ",{"type":597,"tag":629,"props":27392,"children":27394},{"className":27393},[],[27395],{"type":603,"value":27396},"MeshRendererConversion",{"type":603,"value":27398},". 这是",{"type":597,"tag":629,"props":27400,"children":27402},{"className":27401},[],[27403],{"type":603,"value":26232},{"type":603,"value":695},{"type":597,"tag":629,"props":27406,"children":27408},{"className":27407},[],[27409],{"type":603,"value":27410},"MeshRenderer",{"type":603,"value":27412},"转换为",{"type":597,"tag":629,"props":27414,"children":27416},{"className":27415},[],[27417],{"type":603,"value":26417},{"type":603,"value":27419}," 加 ",{"type":597,"tag":629,"props":27421,"children":27423},{"className":27422},[],[27424],{"type":603,"value":26293},{"type":603,"value":13757},{"type":597,"tag":629,"props":27427,"children":27429},{"className":27428},[],[27430],{"type":603,"value":26300},{"type":603,"value":27432}," 的地方",{"type":597,"tag":606,"props":27434,"children":27435},{},[27436],{"type":597,"tag":719,"props":27437,"children":27439},{"alt":719,"src":27438},"/images/2020-10-19-game-object-conversion-and-subscene/v2-acf0da5e1a80bd23ba69b1bf80870973_720w.jpg",[],{"type":597,"tag":598,"props":27441,"children":27443},{"id":27442},"conversion-的顺序",[27444],{"type":603,"value":27445},"Conversion 的顺序",{"type":597,"tag":606,"props":27447,"children":27448},{},[27449,27451,27456,27458,27463],{"type":603,"value":27450},"conversion systems 都是被扫描以及归集到一起的, 因此顺序并没有被清晰地定义. 假设你想要转换过程中 \"get primary entity\" 并获取到 ",{"type":597,"tag":629,"props":27452,"children":27454},{"className":27453},[],[27455],{"type":603,"value":22560},{"type":603,"value":27457}," 组件, 执行顺序就变得很重要了, 因为你要确保你的 conversion system 在 Unity 的 ",{"type":597,"tag":629,"props":27459,"children":27461},{"className":27460},[],[27462],{"type":603,"value":27321},{"type":603,"value":27464},"之后执行.",{"type":597,"tag":606,"props":27466,"children":27467},{},[27468,27474],{"type":597,"tag":629,"props":27469,"children":27471},{"className":27470},[],[27472],{"type":603,"value":27473},"UpdateInGroup",{"type":603,"value":27475},"依然排得上用场. 在 conversion world, 有如下一些 groups:",{"type":597,"tag":621,"props":27477,"children":27480},{"className":27478,"code":27479,"language":8105,"meta":591},[8107],"public class GameObjectDeclareReferencedObjectsGroup : ComponentSystemGroup { }\n\npublic class GameObjectBeforeConversionGroup : ComponentSystemGroup { }\npublic class GameObjectConversionGroup : ComponentSystemGroup { }\npublic class GameObjectAfterConversionGroup : ComponentSystemGroup { }\n\npublic class GameObjectExportGroup : ComponentSystemGroup { }\n",[27481],{"type":597,"tag":629,"props":27482,"children":27483},{"__ignoreMap":591},[27484],{"type":603,"value":27479},{"type":597,"tag":606,"props":27486,"children":27487},{},[27488,27490,27496,27498,27504,27506,27511,27513,27519,27521,27526,27528,27533,27535,27540,27542,27547],{"type":603,"value":27489},"如非特别指定, 你的 system 将运行在 ",{"type":597,"tag":629,"props":27491,"children":27493},{"className":27492},[],[27494],{"type":603,"value":27495},"GameObjectConversionGroup",{"type":603,"value":27497},"中. 因此如果你想要在Unity内置的 conversion system 之后做事情, 你得确保你的 system 运行在其后. 要注意的是你不能使用",{"type":597,"tag":629,"props":27499,"children":27501},{"className":27500},[],[27502],{"type":603,"value":27503},"[UpdateAfter(typeof(TransformConversion))]",{"type":603,"value":27505},"因为",{"type":597,"tag":629,"props":27507,"children":27509},{"className":27508},[],[27510],{"type":603,"value":27321},{"type":603,"value":27512},"不是",{"type":597,"tag":629,"props":27514,"children":27516},{"className":27515},[],[27517],{"type":603,"value":27518},"public",{"type":603,"value":27520},"的. 从前文截图你可以看到它运行在 before group 中, 因此你的默认运行在",{"type":597,"tag":629,"props":27522,"children":27524},{"className":27523},[],[27525],{"type":603,"value":27495},{"type":603,"value":27527}," 中的 system 是可以获取到 ",{"type":597,"tag":629,"props":27529,"children":27531},{"className":27530},[],[27532],{"type":603,"value":22560},{"type":603,"value":27534},"等组件的. ",{"type":597,"tag":629,"props":27536,"children":27538},{"className":27537},[],[27539],{"type":603,"value":27396},{"type":603,"value":27541}," 则运行在 ",{"type":597,"tag":629,"props":27543,"children":27545},{"className":27544},[],[27546],{"type":603,"value":27495},{"type":603,"value":27548}," 中, 因此如果你想要获取到 RenderMesh, 则需要将你的 system 放在其后.",{"type":597,"tag":606,"props":27550,"children":27551},{},[27552],{"type":603,"value":27553},"declare 和 export Group 很特殊, 因为它们运行在特定的过程的前后, 而中间三个 Group则是一紧挨着运行, 因此, 你如果要放在这两个 Group 内运行, 一定得明白它们前后都做了些什么事儿(后文会讲).",{"type":597,"tag":621,"props":27555,"children":27558},{"className":27556,"code":27557,"language":8105,"meta":591},[8107],"???\nGameObjectDeclareReferencedObjectsGroup.Update()\n???\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update()\nGameObjectAfterConversionGroup.Update()\n???\nGameObjectExportGroup.Update()\n",[27559],{"type":597,"tag":629,"props":27560,"children":27561},{"__ignoreMap":591},[27562],{"type":603,"value":27557},{"type":597,"tag":598,"props":27564,"children":27566},{"id":27565},"gameobjectconversionmappingsystem",[27567],{"type":603,"value":27568},"GameObjectConversionMappingSystem",{"type":597,"tag":606,"props":27570,"children":27571},{},[27572,27574,27579,27581,27586],{"type":603,"value":27573},"conversion world 还有一个非常特别的系统附加在所有可用的 ",{"type":597,"tag":629,"props":27575,"children":27577},{"className":27576},[],[27578],{"type":603,"value":27285},{"type":603,"value":27580}," 里, 就是",{"type":597,"tag":629,"props":27582,"children":27584},{"className":27583},[],[27585],{"type":603,"value":27568},{"type":603,"value":27587},". (下文称之为 mapping system). 该系统是所有 conversion world 的 boss, 奇迹发生之地.",{"type":597,"tag":606,"props":27589,"children":27590},{},[27591,27593,27599,27601,27606],{"type":603,"value":27592},"首先这是一个纯粹的 \"tooling system\", 意思是它只有一个空的 ",{"type":597,"tag":629,"props":27594,"children":27596},{"className":27595},[],[27597],{"type":603,"value":27598},"OnUpdate",{"type":603,"value":27600}," 函数, 完全是用来被其他系统获取, 并在它们的",{"type":597,"tag":629,"props":27602,"children":27604},{"className":27603},[],[27605],{"type":603,"value":27598},{"type":603,"value":27607},"中使用的工具.(这种设计也适用于你自己的游戏.)",{"type":597,"tag":606,"props":27609,"children":27610},{},[27611,27613,27619],{"type":603,"value":27612},"这里你可以执行",{"type":597,"tag":629,"props":27614,"children":27616},{"className":27615},[],[27617],{"type":603,"value":27618},"GetPrimaryEntity",{"type":603,"value":27620}," 来与 destination world 沟通, 或者创建更多的 entity. 当你想执行 conversion, 你需要显式地指定 destination world. 这个 world 用来当作 mapping system 的 constructor.",{"type":597,"tag":606,"props":27622,"children":27623},{},[27624,27626,27632,27634,27639,27641,27647],{"type":603,"value":27625},"在你的 conversion system 里面, 你可以 ",{"type":597,"tag":629,"props":27627,"children":27629},{"className":27628},[],[27630],{"type":603,"value":27631},"GetOrCreateSystem",{"type":603,"value":27633}," 来获取 mapping system, 但如果你继承了",{"type":597,"tag":629,"props":27635,"children":27637},{"className":27636},[],[27638],{"type":603,"value":27285},{"type":603,"value":27640},", 则可以直接通过相应的",{"type":597,"tag":629,"props":27642,"children":27644},{"className":27643},[],[27645],{"type":603,"value":27646},"protected",{"type":603,"value":27648}," 方法获取到.",{"type":597,"tag":598,"props":27650,"children":27652},{"id":27651},"让我们使用-converttoentity-来convert吧",[27653],{"type":603,"value":27654},"让我们使用 ConvertToEntity 来convert吧",{"type":597,"tag":606,"props":27656,"children":27657},{},[27658,27660,27665,27666,27671,27673,27678,27679,27684,27685,27690],{"type":603,"value":27659},"现在已经有足够的知识来执行转换过程了. 目前我们仅仅使用 Unity 内置的 conversion system. 也即",{"type":597,"tag":629,"props":27661,"children":27663},{"className":27662},[],[27664],{"type":603,"value":27321},{"type":603,"value":695},{"type":597,"tag":629,"props":27667,"children":27669},{"className":27668},[],[27670],{"type":603,"value":27396},{"type":603,"value":27672}," , 因此确保你的输入拥有",{"type":597,"tag":629,"props":27674,"children":27676},{"className":27675},[],[27677],{"type":603,"value":26224},{"type":603,"value":9688},{"type":597,"tag":629,"props":27680,"children":27682},{"className":27681},[],[27683],{"type":603,"value":26232},{"type":603,"value":695},{"type":597,"tag":629,"props":27686,"children":27688},{"className":27687},[],[27689],{"type":603,"value":27410},{"type":603,"value":27691}," 来得到结果.",{"type":597,"tag":606,"props":27693,"children":27694},{},[27695,27697,27702,27704,27710,27712,27717,27719,27724,27725,27730,27731,27737],{"type":603,"value":27696},"要在scene里面选择 game objects导入 conversion world, 我们可以使用",{"type":597,"tag":629,"props":27698,"children":27700},{"className":27699},[],[27701],{"type":603,"value":9207},{"type":603,"value":27703},"组件. 在 ",{"type":597,"tag":629,"props":27705,"children":27707},{"className":27706},[],[27708],{"type":603,"value":27709},"Awake",{"type":603,"value":27711}," 里面, 它会基于一些标准来选择导入什么. 所以若如下图附加到",{"type":597,"tag":629,"props":27713,"children":27715},{"className":27714},[],[27716],{"type":603,"value":22708},{"type":603,"value":27718},"上, 那么在 conversion world里, 我会得到这些ECS的 ",{"type":597,"tag":1080,"props":27720,"children":27721},{},[27722],{"type":603,"value":27723},"component objects:",{"type":603,"value":4731},{"type":597,"tag":629,"props":27726,"children":27728},{"className":27727},[],[27729],{"type":603,"value":26224},{"type":603,"value":9688},{"type":597,"tag":629,"props":27732,"children":27734},{"className":27733},[],[27735],{"type":603,"value":27736},"Hello",{"type":603,"value":9674},{"type":597,"tag":606,"props":27739,"children":27740},{},[27741],{"type":597,"tag":719,"props":27742,"children":27744},{"alt":719,"src":27743},"/images/2020-10-19-game-object-conversion-and-subscene/v2-a96ebb838511e15934a42fd1b2000b1c_720w.jpg",[],{"type":597,"tag":606,"props":27746,"children":27747},{},[27748,27750,27755],{"type":603,"value":27749},"当进入 play mode 时, ",{"type":597,"tag":629,"props":27751,"children":27753},{"className":27752},[],[27754],{"type":603,"value":27709},{"type":603,"value":27756}," 被调用的瞬间后你得到:",{"type":597,"tag":606,"props":27758,"children":27759},{},[27760],{"type":597,"tag":719,"props":27761,"children":27763},{"alt":719,"src":27762},"/images/2020-10-19-game-object-conversion-and-subscene/v2-dcece28b71a8313f75f0e4fd6ca7667c_720w.jpg",[],{"type":597,"tag":606,"props":27765,"children":27766},{},[27767],{"type":597,"tag":719,"props":27768,"children":27770},{"alt":719,"src":27769},"/images/2020-10-19-game-object-conversion-and-subscene/v2-87122268425b7052676a0b7cce6c8cc8_720w.jpg",[],{"type":597,"tag":606,"props":27772,"children":27773},{},[27774,27776,27781,27783,27788,27790,27795],{"type":603,"value":27775},"当前状态当然还没准备好绘制, 因为还没有 ",{"type":597,"tag":629,"props":27777,"children":27779},{"className":27778},[],[27780],{"type":603,"value":26417},{"type":603,"value":27782},", 但是你可以看到",{"type":597,"tag":629,"props":27784,"children":27786},{"className":27785},[],[27787],{"type":603,"value":27321},{"type":603,"value":27789},"发现了",{"type":597,"tag":629,"props":27791,"children":27793},{"className":27792},[],[27794],{"type":603,"value":26224},{"type":603,"value":27796},"component object 然后就在conversion world 被销毁之前, 在 Primary entity 上构建了 LTW/TR .",{"type":597,"tag":606,"props":27798,"children":27799},{},[27800],{"type":603,"value":27801},"如果我修改一下 scale:",{"type":597,"tag":606,"props":27803,"children":27804},{},[27805],{"type":597,"tag":719,"props":27806,"children":27808},{"alt":719,"src":27807},"/images/2020-10-19-game-object-conversion-and-subscene/v2-84dbdfe15794ce27a4b4957f7480abcb_720w.jpg",[],{"type":597,"tag":606,"props":27810,"children":27811},{},[27812],{"type":603,"value":27813},"转换的结果:",{"type":597,"tag":606,"props":27815,"children":27816},{},[27817],{"type":597,"tag":719,"props":27818,"children":27820},{"alt":719,"src":27819},"/images/2020-10-19-game-object-conversion-and-subscene/v2-6d131a5073402ee6700baf5c1c9a7829_720w.jpg",[],{"type":597,"tag":606,"props":27822,"children":27823},{},[27824],{"type":597,"tag":719,"props":27825,"children":27827},{"alt":719,"src":27826},"/images/2020-10-19-game-object-conversion-and-subscene/v2-bf7ebc16e636d69937377796cc12a334_720w.jpg",[],{"type":597,"tag":606,"props":27829,"children":27830},{},[27831,27833,27838,27840,27845],{"type":603,"value":27832},"因为 ",{"type":597,"tag":629,"props":27834,"children":27836},{"className":27835},[],[27837],{"type":603,"value":27321},{"type":603,"value":27839}," conversion system 的代码发现了 ",{"type":597,"tag":629,"props":27841,"children":27843},{"className":27842},[],[27844],{"type":603,"value":26224},{"type":603,"value":27846},"有非 1 的 scale, 于是决定加上额外的组件到 primary entity 上.",{"type":597,"tag":606,"props":27848,"children":27849},{},[27850,27852,27857,27859,27864,27865,27870],{"type":603,"value":27851},"接下来看看",{"type":597,"tag":629,"props":27853,"children":27855},{"className":27854},[],[27856],{"type":603,"value":27396},{"type":603,"value":27858},"在我们添加了 ",{"type":597,"tag":629,"props":27860,"children":27862},{"className":27861},[],[27863],{"type":603,"value":26232},{"type":603,"value":695},{"type":597,"tag":629,"props":27866,"children":27868},{"className":27867},[],[27869],{"type":603,"value":27410},{"type":603,"value":27871}," 后做些什么:",{"type":597,"tag":606,"props":27873,"children":27874},{},[27875],{"type":597,"tag":719,"props":27876,"children":27878},{"alt":719,"src":27877},"/images/2020-10-19-game-object-conversion-and-subscene/v2-2cc3d708a668ecd3a34776ae9860b433_720w.jpg",[],{"type":597,"tag":606,"props":27880,"children":27881},{},[27882],{"type":597,"tag":719,"props":27883,"children":27885},{"alt":719,"src":27884},"/images/2020-10-19-game-object-conversion-and-subscene/v2-adeb3de47a701bf36a971fa9baeaae97_b.jpg",[],{"type":597,"tag":606,"props":27887,"children":27888},{},[27889,27891,27896,27898,27904],{"type":603,"value":27890},"我得到了一个正确转换且拥有纯粹ECS数据后的方块! 另外 conversion world 也可以分配 entity name, 因为 conversion world 知晓 ",{"type":597,"tag":629,"props":27892,"children":27894},{"className":27893},[],[27895],{"type":603,"value":26224},{"type":603,"value":27897}," 的存在, 所以可以在 conversion world 被销毁前通过",{"type":597,"tag":629,"props":27899,"children":27901},{"className":27900},[],[27902],{"type":603,"value":27903},".gameObject.name",{"type":603,"value":27905}," 来追踪其名字.",{"type":597,"tag":606,"props":27907,"children":27908},{},[27909],{"type":597,"tag":719,"props":27910,"children":27912},{"alt":719,"src":27911},"/images/2020-10-19-game-object-conversion-and-subscene/v2-992e31a0522e8183fcbee75cf061ec4b_720w.jpg",[],{"type":597,"tag":606,"props":27914,"children":27915},{},[27916,27921,27923,27928,27929,27934,27936,27941,27942,27947],{"type":597,"tag":629,"props":27917,"children":27919},{"className":27918},[],[27920],{"type":603,"value":9207},{"type":603,"value":27922},"组件里\"and destroy\" 选项并非 conversion world 流程里的内容, 由该MonoBehaviour 组件自行完成. 因为它并不觉得你想要复制出同样的结果, 如果我不销毁掉原对象, 那么我就会得到两个方块, 一个来自",{"type":597,"tag":629,"props":27924,"children":27926},{"className":27925},[],[27927],{"type":603,"value":26232},{"type":603,"value":695},{"type":597,"tag":629,"props":27930,"children":27932},{"className":27931},[],[27933],{"type":603,"value":27410},{"type":603,"value":27935}," , 另一个来自Hybrid Renderer 渲染的",{"type":597,"tag":629,"props":27937,"children":27939},{"className":27938},[],[27940],{"type":603,"value":26417},{"type":603,"value":695},{"type":597,"tag":629,"props":27943,"children":27945},{"className":27944},[],[27946],{"type":603,"value":22560},{"type":603,"value":27948}," .",{"type":597,"tag":606,"props":27950,"children":27951},{},[27952,27954,27960],{"type":603,"value":27953},"如果你不想要默认的行为, 你可以使用",{"type":597,"tag":629,"props":27955,"children":27957},{"className":27956},[],[27958],{"type":603,"value":27959},"GameObjectConversionUtility.ConvertGameObjectHierarchy",{"type":603,"value":27961},"手工转换. 后文会细讲.",{"type":597,"tag":598,"props":27963,"children":27965},{"id":27964},"hierarchy-conversion",[27966],{"type":603,"value":27967},"Hierarchy conversion",{"type":597,"tag":606,"props":27969,"children":27970},{},[27971,27976,27978,27983,27985,27991],{"type":597,"tag":629,"props":27972,"children":27974},{"className":27973},[],[27975],{"type":603,"value":9207},{"type":603,"value":27977}," 实际上提交了所有子 ",{"type":597,"tag":629,"props":27979,"children":27981},{"className":27980},[],[27982],{"type":603,"value":22708},{"type":603,"value":27984}," 给 conversion world, 除非你在子对象中使用 ",{"type":597,"tag":629,"props":27986,"children":27988},{"className":27987},[],[27989],{"type":603,"value":27990},"ConvertToEntity (Stop)",{"type":603,"value":9674},{"type":597,"tag":606,"props":27993,"children":27994},{},[27995],{"type":597,"tag":719,"props":27996,"children":27998},{"alt":719,"src":27997},"/images/2020-10-19-game-object-conversion-and-subscene/v2-3ecf0a5ef86786b295197e8b9af42d3e_720w.jpg",[],{"type":597,"tag":606,"props":28000,"children":28001},{},[28002,28004,28009,28011,28017],{"type":603,"value":28003},"上图的结构中, conversion world 最后会得到: A B E F G H. 每一个元素的 component objects 都会和最初的类似. ",{"type":597,"tag":629,"props":28005,"children":28007},{"className":28006},[],[28008],{"type":603,"value":26224},{"type":603,"value":28010},"component object 是关键点, 因为它有",{"type":597,"tag":629,"props":28012,"children":28014},{"className":28013},[],[28015],{"type":603,"value":28016},".parent",{"type":603,"value":28018},"属性, 这样 conversion world 才能基于此构建出整个层级树.",{"type":597,"tag":606,"props":28020,"children":28021},{},[28022,28024,28029,28031,28036],{"type":603,"value":28023},"给 D 添加 ",{"type":597,"tag":629,"props":28025,"children":28027},{"className":28026},[],[28028],{"type":603,"value":9207},{"type":603,"value":28030},"是不会有效果的(在C处转换就停止了), 因此会抛出警告. 而添加",{"type":597,"tag":629,"props":28032,"children":28034},{"className":28033},[],[28035],{"type":603,"value":9207},{"type":603,"value":28037},"给 B 则没有警告, 但也不会有额外的作用, 因为 A 处隐含了 B也将被纳入层级的事实.",{"type":597,"tag":606,"props":28039,"children":28040},{},[28041,28043,28048,28050,28056,28058,28063,28065,28070,28072,28077,28079,28084,28086,28091,28093,28098],{"type":603,"value":28042},"ECS 里有一个",{"type":597,"tag":629,"props":28044,"children":28046},{"className":28045},[],[28047],{"type":603,"value":22552},{"type":603,"value":28049},"组件, 该组件仅有一个",{"type":597,"tag":629,"props":28051,"children":28053},{"className":28052},[],[28054],{"type":603,"value":28055},"Entity",{"type":603,"value":28057},"字段用来表示 transform 的层级关系.",{"type":597,"tag":629,"props":28059,"children":28061},{"className":28060},[],[28062],{"type":603,"value":22560},{"type":603,"value":28064},"的计算总是基于",{"type":597,"tag":629,"props":28066,"children":28068},{"className":28067},[],[28069],{"type":603,"value":22552},{"type":603,"value":28071},"组件. 如果 ",{"type":597,"tag":629,"props":28073,"children":28075},{"className":28074},[],[28076],{"type":603,"value":22523},{"type":603,"value":28078},"是 0, 那么 ",{"type":597,"tag":629,"props":28080,"children":28082},{"className":28081},[],[28083],{"type":603,"value":22560},{"type":603,"value":28085}," 矩阵的结果并不是在行1 2 3 和 列4为0, 而是直接复制",{"type":597,"tag":629,"props":28087,"children":28089},{"className":28088},[],[28090],{"type":603,"value":22552},{"type":603,"value":28092},"所指示Entity的",{"type":597,"tag":629,"props":28094,"children":28096},{"className":28095},[],[28097],{"type":603,"value":22560},{"type":603,"value":28099}," 的值.",{"type":597,"tag":606,"props":28101,"children":28102},{},[28103,28105,28110,28112,28117],{"type":603,"value":28104},"而负责计算",{"type":597,"tag":629,"props":28106,"children":28108},{"className":28107},[],[28109],{"type":603,"value":22552},{"type":603,"value":28111},"的正是 ",{"type":597,"tag":629,"props":28113,"children":28115},{"className":28114},[],[28116],{"type":603,"value":27321},{"type":603,"value":28118},", 让我们看看结果:",{"type":597,"tag":606,"props":28120,"children":28121},{},[28122],{"type":597,"tag":719,"props":28123,"children":28125},{"alt":719,"src":28124},"/images/2020-10-19-game-object-conversion-and-subscene/v2-cf1b98c0bfc171a75faaeb1708bb6807_720w.jpg",[],{"type":597,"tag":606,"props":28127,"children":28128},{},[28129,28131,28136],{"type":603,"value":28130},"我们先猜猜A B E F G H 会占用多少 chunk? (不管转换过程中有多少魔法, 我们永远得关注数据本身!) 先假设我们这些对象的 scale 都为1 (这样就不会产出",{"type":597,"tag":629,"props":28132,"children":28134},{"className":28133},[],[28135],{"type":603,"value":22544},{"type":603,"value":28137},"组件).",{"type":597,"tag":606,"props":28139,"children":28140},{},[28141],{"type":597,"tag":719,"props":28142,"children":28144},{"alt":719,"src":28143},"/images/2020-10-19-game-object-conversion-and-subscene/v2-b03840ef2f4026f8171dd5a0981ab1f5_b.jpg",[],{"type":597,"tag":606,"props":28146,"children":28147},{},[28148],{"type":603,"value":28149},"为何有 3 个chunk?",{"type":597,"tag":606,"props":28151,"children":28152},{},[28153,28155,28160,28162,28167,28169,28175,28177,28183],{"type":603,"value":28154},"你可能会猜测所有 chunk 都会有 ",{"type":597,"tag":629,"props":28156,"children":28158},{"className":28157},[],[28159],{"type":603,"value":22552},{"type":603,"value":28161}," 而对于根部的 A, 其",{"type":597,"tag":629,"props":28163,"children":28165},{"className":28164},[],[28166],{"type":603,"value":22552},{"type":603,"value":28168},"则可以是一个 ",{"type":597,"tag":629,"props":28170,"children":28172},{"className":28171},[],[28173],{"type":603,"value":28174},"Entity.Null",{"type":603,"value":28176}," , 但是 Unity 并没有选择这样做, 因为在复杂一些的游戏里, 查询时使用",{"type":597,"tag":629,"props":28178,"children":28180},{"className":28179},[],[28181],{"type":603,"value":28182},"ComponentType.Exclude",{"type":603,"value":28184}," 会相对更加高效一点. (你可以想象成如果没有parent组件, transform systems 可以忽略掉一些矩阵运算.)",{"type":597,"tag":1321,"props":28186,"children":28187},{},[28188,28193,28198],{"type":597,"tag":807,"props":28189,"children":28190},{},[28191],{"type":603,"value":28192},"没有 Parent, 但有 child : A",{"type":597,"tag":807,"props":28194,"children":28195},{},[28196],{"type":603,"value":28197},"Parent 和 Child 都有: F",{"type":597,"tag":807,"props":28199,"children":28200},{},[28201],{"type":603,"value":28202},"叶子节点, 仅有 Child: B E H G",{"type":597,"tag":606,"props":28204,"children":28205},{},[28206,28208,28214,28215,28221,28222,28228,28230,28235],{"type":603,"value":28207},"你可以看到还有一些 component 被添加了: ",{"type":597,"tag":629,"props":28209,"children":28211},{"className":28210},[],[28212],{"type":603,"value":28213},"LocalToParent",{"type":603,"value":9688},{"type":597,"tag":629,"props":28216,"children":28218},{"className":28217},[],[28219],{"type":603,"value":28220},"Child",{"type":603,"value":9688},{"type":597,"tag":629,"props":28223,"children":28225},{"className":28224},[],[28226],{"type":603,"value":28227},"PreviousParent",{"type":603,"value":28229},".目前还无需关心它们, 总之它们会最终参与",{"type":597,"tag":629,"props":28231,"children":28233},{"className":28232},[],[28234],{"type":603,"value":22560},{"type":603,"value":28236},"的计算.",{"type":597,"tag":606,"props":28238,"children":28239},{},[28240,28242,28247,28249,28254,28256,28261,28263,28268,28270,28275],{"type":603,"value":28241},"注意到 conversion 过程中有多少个不同的 Archetype 产生有时候很有用. 比如当你有个巨大的 game objects 层级树, 且其中有些对象仅仅是用来组织结构的空对象, 有些则真正拥有",{"type":597,"tag":629,"props":28243,"children":28245},{"className":28244},[],[28246],{"type":603,"value":26232},{"type":603,"value":28248},"and",{"type":597,"tag":629,"props":28250,"children":28252},{"className":28251},[],[28253],{"type":603,"value":27410},{"type":603,"value":28255},", 这样你最终可能会至少得到 6 个 chunk. (3个前述chunk, 以及3个包含",{"type":597,"tag":629,"props":28257,"children":28259},{"className":28258},[],[28260],{"type":603,"value":26417},{"type":603,"value":28262}," 的chunk). 因为",{"type":597,"tag":629,"props":28264,"children":28266},{"className":28265},[],[28267],{"type":603,"value":26417},{"type":603,"value":28269},"是",{"type":597,"tag":629,"props":28271,"children":28273},{"className":28272},[],[28274],{"type":603,"value":26410},{"type":603,"value":28276},", 如果你有更多的 mesh 和 materials, 那么 chunk 的数量还会继续增加. 总之, 这类的思想也出现在dynamic/static batching, GPU instancing, 或 SRP batchers 之中, 而不是 ECS 独有. 使用Entity Debugger 可以清楚地看到 chunks 是如何被组织的.",{"type":597,"tag":606,"props":28278,"children":28279},{},[28280],{"type":603,"value":28281},"\"and destroy\" 的行为在 stop 时也会有一些变化, 被 stop 的对象之下的层级会被单独摘出来并保留(因为 Unity 猜测既然那里你没有相应的 entity, 那么就为你保留 gameobject)",{"type":597,"tag":606,"props":28283,"children":28284},{},[28285],{"type":597,"tag":719,"props":28286,"children":28288},{"alt":719,"src":28287},"/images/2020-10-19-game-object-conversion-and-subscene/v2-ad321f404c9cc350778236f78db75bab_720w.jpg",[],{"type":597,"tag":598,"props":28290,"children":28292},{"id":28291},"disabled-与-gameobject-conversion",[28293],{"type":603,"value":28294},"Disabled 与 GameObject conversion",{"type":597,"tag":606,"props":28296,"children":28297},{},[28298,28300,28305,28307,28312,28314,28319],{"type":603,"value":28299},"被 disabled 了的",{"type":597,"tag":629,"props":28301,"children":28303},{"className":28302},[],[28304],{"type":603,"value":22708},{"type":603,"value":28306},"会被加上一个 ECS 中的",{"type":597,"tag":629,"props":28308,"children":28310},{"className":28309},[],[28311],{"type":603,"value":22727},{"type":603,"value":28313},"component, 如下所示, Convert and destroying 顶部的 Cube, 你会得到 5 个 Entity, 其中 3 个关联 ",{"type":597,"tag":629,"props":28315,"children":28317},{"className":28316},[],[28318],{"type":603,"value":22727},{"type":603,"value":28320},"component:",{"type":597,"tag":606,"props":28322,"children":28323},{},[28324],{"type":597,"tag":719,"props":28325,"children":28327},{"alt":719,"src":28326},"/images/2020-10-19-game-object-conversion-and-subscene/v2-aa8d98f0c436030e2833da7985bb4f51_720w.jpg",[],{"type":597,"tag":606,"props":28329,"children":28330},{},[28331,28333,28338,28340,28345],{"type":603,"value":28332},"当然你依然可以在层级任何位置添加 Convert To Entity (Stop), 其行为不会发生变化. 比如我在 Cube(1) 和 Cube(4) 上添加 stop, 那么我最终将得到 3 个 Entity: Cube(2) , 有",{"type":597,"tag":629,"props":28334,"children":28336},{"className":28335},[],[28337],{"type":603,"value":22727},{"type":603,"value":28339},"的Cube(3), 没有",{"type":597,"tag":629,"props":28341,"children":28343},{"className":28342},[],[28344],{"type":603,"value":22727},{"type":603,"value":28346},"Cube .",{"type":597,"tag":598,"props":28348,"children":28350},{"id":28349},"convert-and-inject-模式",[28351],{"type":603,"value":28352},"Convert and inject 模式",{"type":597,"tag":606,"props":28354,"children":28355},{},[28356],{"type":603,"value":28357},"假如:",{"type":597,"tag":1321,"props":28359,"children":28360},{},[28361,28366],{"type":597,"tag":807,"props":28362,"children":28363},{},[28364],{"type":603,"value":28365},"你想保留原始的 game object",{"type":597,"tag":807,"props":28367,"children":28368},{},[28369,28371,28376],{"type":603,"value":28370},"同时想在 conversion world 销毁之前导出 ",{"type":597,"tag":1080,"props":28372,"children":28373},{},[28374],{"type":603,"value":28375},"component objects",{"type":603,"value":28377}," 给 primary entity. (当然也包含转换过程中新增的 components)",{"type":597,"tag":606,"props":28379,"children":28380},{},[28381,28383,28388,28389,28394,28396,28401,28402,28407],{"type":603,"value":28382},"如前文中提到的, 我有",{"type":597,"tag":629,"props":28384,"children":28386},{"className":28385},[],[28387],{"type":603,"value":27736},{"type":603,"value":695},{"type":597,"tag":629,"props":28390,"children":28392},{"className":28391},[],[28393],{"type":603,"value":27158},{"type":603,"value":28395},"会被带进 conversion world , 但由于并没有conversion system会处理",{"type":597,"tag":629,"props":28397,"children":28399},{"className":28398},[],[28400],{"type":603,"value":27736},{"type":603,"value":695},{"type":597,"tag":629,"props":28403,"children":28405},{"className":28404},[],[28406],{"type":603,"value":27158},{"type":603,"value":28408},", 因此会在 conversion world 被销毁时也同时被销毁.",{"type":597,"tag":606,"props":28410,"children":28411},{},[28412],{"type":597,"tag":719,"props":28413,"children":28415},{"alt":719,"src":28414},"/images/2020-10-19-game-object-conversion-and-subscene/v2-310140196c94a5d298a09d2551b3382f_720w.jpg",[],{"type":597,"tag":606,"props":28417,"children":28418},{},[28419],{"type":603,"value":28420},"但在\"Convert and inject\"模式下, 这两者就可以被保留:",{"type":597,"tag":606,"props":28422,"children":28423},{},[28424],{"type":597,"tag":719,"props":28425,"children":28427},{"alt":719,"src":28426},"/images/2020-10-19-game-object-conversion-and-subscene/v2-3a5a13b66d3362a1fbf6e30aa20a6223_720w.jpg",[],{"type":597,"tag":606,"props":28429,"children":28430},{},[28431],{"type":597,"tag":719,"props":28432,"children":28434},{"alt":719,"src":28433},"/images/2020-10-19-game-object-conversion-and-subscene/v2-b635d5f273e58223e298b87a1edebc82_720w.jpg",[],{"type":597,"tag":606,"props":28436,"children":28437},{},[28438,28440,28445,28447,28452,28453,28458,28459,28464,28466,28472,28474,28480],{"type":603,"value":28439},"这样, 我像之前一样正常得到了",{"type":597,"tag":629,"props":28441,"children":28443},{"className":28442},[],[28444],{"type":603,"value":22560},{"type":603,"value":28446}," , 但同时我也得到了",{"type":597,"tag":629,"props":28448,"children":28450},{"className":28449},[],[28451],{"type":603,"value":26224},{"type":603,"value":4731},{"type":597,"tag":629,"props":28454,"children":28456},{"className":28455},[],[28457],{"type":603,"value":27736},{"type":603,"value":695},{"type":597,"tag":629,"props":28460,"children":28462},{"className":28461},[],[28463],{"type":603,"value":27158},{"type":603,"value":28465},", 这意味着你得到了一个可以追溯回原始 GameObject 的 Entity. 如果我们在别处 destroy 这个 GameObject, 那么 ECS 侧的",{"type":597,"tag":629,"props":28467,"children":28469},{"className":28468},[],[28470],{"type":603,"value":28471},"em.GetComponentObject\u003CTransform/LineRenderer>",{"type":603,"value":28473}," 也相应回返回 ",{"type":597,"tag":629,"props":28475,"children":28477},{"className":28476},[],[28478],{"type":603,"value":28479},"null",{"type":603,"value":9674},{"type":597,"tag":606,"props":28482,"children":28483},{},[28484],{"type":603,"value":28485},"现在你应该明白了, 销毁或者不销毁原始 Gameobject 两种模式都有各自的意义 (前者是为了避免重复, 后者为了访问 component objects).",{"type":597,"tag":606,"props":28487,"children":28488},{},[28489,28491,28496,28497,28502],{"type":603,"value":28490},"这意味着如果我有一个关联",{"type":597,"tag":629,"props":28492,"children":28494},{"className":28493},[],[28495],{"type":603,"value":27410},{"type":603,"value":695},{"type":597,"tag":629,"props":28498,"children":28500},{"className":28499},[],[28501],{"type":603,"value":26232},{"type":603,"value":28503},"的方块同时又选择了inject模式, 我会得到渲染在同一位置的两个方块. 如下图, 一个方块是 2 * 6 * 2 = 24个 tris(额外 2个 tris是蓝色的背景所占用的), 如果使用 convert and destroy, 我依然会得到 26 个 tris并被Hybrid Renderer所用, 在但 inject 模式下, 会变为 50 个 tris, 因为转换前后的对象都被保留了:",{"type":597,"tag":606,"props":28505,"children":28506},{},[28507],{"type":597,"tag":719,"props":28508,"children":28510},{"alt":719,"src":28509},"/images/2020-10-19-game-object-conversion-and-subscene/v2-689301524050755bbcf6ed29b45330f0_720w.jpg",[],{"type":597,"tag":606,"props":28512,"children":28513},{},[28514],{"type":597,"tag":719,"props":28515,"children":28517},{"alt":719,"src":28516},"/images/2020-10-19-game-object-conversion-and-subscene/v2-3b37442f567073f3500c401bdadc285a_720w.jpg",[],{"type":597,"tag":606,"props":28519,"children":28520},{},[28521],{"type":603,"value":28522},"上面这个例子并不是 inject 模式的预期用法, 该模式是用于当你需要在 conversion 的结果上面回溯原有对象的情况下才有用, 而 Hybrid Renderer 显然无需回溯.",{"type":597,"tag":598,"props":28524,"children":28526},{"id":28525},"使用-ecs-的system-来管理传统的-monobehaviour",[28527],{"type":603,"value":28528},"使用 ECS 的System 来管理传统的 MonoBehaviour",{"type":597,"tag":606,"props":28530,"children":28531},{},[28532,28534,28539],{"type":603,"value":28533},"inject 模式最酷的在于, 从现在开始, 你就可以制作 hybrid ECS 游戏了. 你可以把 inject 模式视作将对象转化为 ECS system 可访问的对象, 甚至在你没有 conversion system 的时候. 仅仅是保留 component objects 以及是非常有用了. 你完全可以用 ",{"type":597,"tag":629,"props":28535,"children":28537},{"className":28536},[],[28538],{"type":603,"value":26859},{"type":603,"value":28540},"进行组件的开发, 然后用 system 来控制它们.",{"type":597,"tag":606,"props":28542,"children":28543},{},[28544,28546,28551,28553,28558,28560,28565,28567,28572,28574,28579,28581,28587],{"type":603,"value":28545},"你可以在 ",{"type":597,"tag":629,"props":28547,"children":28549},{"className":28548},[],[28550],{"type":603,"value":22708},{"type":603,"value":28552}," 上就如同",{"type":597,"tag":629,"props":28554,"children":28556},{"className":28555},[],[28557],{"type":603,"value":26908},{"type":603,"value":28559},"一般添加 ",{"type":597,"tag":629,"props":28561,"children":28563},{"className":28562},[],[28564],{"type":603,"value":26859},{"type":603,"value":28566},", \"tag 用途的",{"type":597,"tag":629,"props":28568,"children":28570},{"className":28569},[],[28571],{"type":603,"value":26859},{"type":603,"value":28573},"\" 也是完全可行的. 不过过去常见的",{"type":597,"tag":629,"props":28575,"children":28577},{"className":28576},[],[28578],{"type":603,"value":26859},{"type":603,"value":28580},"继承模式在ECS的世界里, 你可能需要考虑用组合模式来替代了, 一如 ECS 里常用的",{"type":597,"tag":629,"props":28582,"children":28584},{"className":28583},[],[28585],{"type":603,"value":28586},"struct",{"type":603,"value":28588}," 并不能继承.",{"type":597,"tag":606,"props":28590,"children":28591},{},[28592],{"type":603,"value":28593},"虽然并没有性能上的提升, 但是依托 ECS 的查询能力可以获得 system 设计上极佳的灵活性.",{"type":597,"tag":606,"props":28595,"children":28596},{},[28597,28599,28605,28607,28613,28615,28620],{"type":603,"value":28598},"或许你过去常常使用一种\"manager优化\"手段, 就是你去掉移除对象的",{"type":597,"tag":629,"props":28600,"children":28602},{"className":28601},[],[28603],{"type":603,"value":28604},"Update",{"type":603,"value":28606}," 方法, 然后让一个 Manager 来追踪该对象的",{"type":597,"tag":629,"props":28608,"children":28610},{"className":28609},[],[28611],{"type":603,"value":28612},"List",{"type":603,"value":28614},"来统一地 ",{"type":597,"tag":629,"props":28616,"children":28618},{"className":28617},[],[28619],{"type":603,"value":27190},{"type":603,"value":9674},{"type":597,"tag":606,"props":28622,"children":28623},{},[28624,28626,28632],{"type":603,"value":28625},"而用于操作 component object (monobehaviour) 的 system 正是和上述优化一模一样的玩意儿! 而且 ECS 在查询上更加灵活. 你可以不断添加查询不同种类 component object 的 system. 这样对于在团队中分割工作量更容易. 也可以通过 ",{"type":597,"tag":629,"props":28627,"children":28629},{"className":28628},[],[28630],{"type":603,"value":28631},"UpdateBefore/After",{"type":603,"value":28633}," 调整执行顺序, 而不是过去地狱般的 script execution order.",{"type":597,"tag":606,"props":28635,"children":28636},{},[28637,28639,28645],{"type":603,"value":28638},"举一个 UGUI 按钮的例子. 我想要用 system 来添加一段逻辑: 改变",{"type":597,"tag":629,"props":28640,"children":28642},{"className":28641},[],[28643],{"type":603,"value":28644},"interactable",{"type":603,"value":28646},"时按钮会在正常和禁用状态之间闪烁.",{"type":597,"tag":606,"props":28648,"children":28649},{},[28650],{"type":597,"tag":719,"props":28651,"children":28653},{"alt":719,"src":28652},"/images/2020-10-19-game-object-conversion-and-subscene/v2-691223f5e1d1debbb595f47a4b38c2ed_720w.jpg",[],{"type":597,"tag":606,"props":28655,"children":28656},{},[28657,28659,28665,28667,28672],{"type":603,"value":28658},"所有按钮都使用 convert and inject, 其中一个缺少",{"type":597,"tag":629,"props":28660,"children":28662},{"className":28661},[],[28663],{"type":603,"value":28664},"BlinkingButton",{"type":603,"value":28666},"\"tag\"",{"type":597,"tag":629,"props":28668,"children":28670},{"className":28669},[],[28671],{"type":603,"value":22708},{"type":603,"value":28673},". 目前还没有任何实际代码, 不过我想要用这些类型来进行查询.",{"type":597,"tag":606,"props":28675,"children":28676},{},[28677],{"type":603,"value":28678},"来看看 conversion 后的结果, 我们得到 2个 chunk, 其中一个有3个 entity (橙色的竖条往右边移动了一点, 意味着其包含 3/160 个 entity), 另一个则有一个 entity.",{"type":597,"tag":606,"props":28680,"children":28681},{},[28682],{"type":597,"tag":719,"props":28683,"children":28685},{"alt":719,"src":28684},"/images/2020-10-19-game-object-conversion-and-subscene/v2-f6a2d6ad3e349d49a3b6ef3d34b2aa44_720w.jpg",[],{"type":597,"tag":606,"props":28687,"children":28688},{},[28689,28691,28696,28698,28704],{"type":603,"value":28690},"下面的 system 则能自动到 ECS 的数据库里面查询 scene 里面所有带有 blinking 组件的按钮. 这种\"凭空\"查询",{"type":597,"tag":629,"props":28692,"children":28694},{"className":28693},[],[28695],{"type":603,"value":22708},{"type":603,"value":28697},"的能力让声明",{"type":597,"tag":629,"props":28699,"children":28701},{"className":28700},[],[28702],{"type":603,"value":28703},"GameObject[]",{"type":603,"value":28705},"成为了过去时. 即便你对 ECS 毫无兴趣, 这种查询能力也让其成为非常便捷的 Unity 开发工具.",{"type":597,"tag":621,"props":28707,"children":28710},{"className":28708,"code":28709,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing Unity.Jobs;\nusing UnityEngine.UI;\n\n[UpdateInGroup(typeof(PresentationSystemGroup))]\npublic class BlinkingButtonSystem : JobComponentSystem\n{\n    EntityQuery blinkingButtonQuery;\n    protected override void OnCreate()\n    {\n        base.OnCreate();\n        blinkingButtonQuery = GetEntityQuery(\n            ComponentType.ReadOnly\u003CButton>(),\n            ComponentType.ReadOnly\u003CBlinkingButton>()\n        );\n    }\n\n    //It is not a good idea to have data in system!\n    float collectTime;\n    bool on;\n    \n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        collectTime += Time.DeltaTime;\n        if (collectTime > 0.2f)\n        {\n            collectTime -= 0.2f;\n            on = !on;\n        }\n\n        Button[] buttons = blinkingButtonQuery.ToComponentArray\u003CButton>();\n        foreach (var b in buttons)\n        {\n            b.interactable = on;\n        }\n        return default;\n    }\n}\n",[28711],{"type":597,"tag":629,"props":28712,"children":28713},{"__ignoreMap":591},[28714],{"type":603,"value":28709},{"type":597,"tag":606,"props":28716,"children":28717},{},[28718],{"type":597,"tag":719,"props":28719,"children":28721},{"alt":719,"src":28720},"/images/2020-10-19-game-object-conversion-and-subscene/v2-5ed751beea434345f9972273619f2ed2_b.jpg",[],{"type":597,"tag":606,"props":28723,"children":28724},{},[28725,28731,28733,28739,28741,28747,28749,28755,28757,28763],{"type":597,"tag":629,"props":28726,"children":28728},{"className":28727},[],[28729],{"type":603,"value":28730},"Entities.ForEach",{"type":603,"value":28732},"也可以使用 component objects, 只不过这时候不能使用",{"type":597,"tag":629,"props":28734,"children":28736},{"className":28735},[],[28737],{"type":603,"value":28738},"ref",{"type":603,"value":28740},"或",{"type":597,"tag":629,"props":28742,"children":28744},{"className":28743},[],[28745],{"type":603,"value":28746},"in",{"type":603,"value":28748},"关键字, 同时为了防止使用 Burst, 你需要用",{"type":597,"tag":629,"props":28750,"children":28752},{"className":28751},[],[28753],{"type":603,"value":28754},"Run",{"type":603,"value":28756},"来替代",{"type":597,"tag":629,"props":28758,"children":28760},{"className":28759},[],[28761],{"type":603,"value":28762},"Schedule",{"type":603,"value":9674},{"type":597,"tag":621,"props":28765,"children":28768},{"className":28766,"code":28767,"language":8105,"meta":591},[8107],"Entities.WithAll\u003CBlinkingButton>()\n  .ForEach((Button b) => { b.interactable = on; }).WithoutBurst().Run(); \n",[28769],{"type":597,"tag":629,"props":28770,"children":28771},{"__ignoreMap":591},[28772],{"type":603,"value":28767},{"type":597,"tag":606,"props":28774,"children":28775},{},[28776],{"type":603,"value":28777},"这样完全或者部分移植到 ECS 的游戏, 也可以自由使用 system 了, 只需要 inject 模式, 你便拥有了基于 Entity 的查询能力.",{"type":597,"tag":598,"props":28779,"children":28781},{"id":28780},"inject-模式的-conversion-规则",[28782],{"type":603,"value":28783},"Inject 模式的 conversion 规则",{"type":597,"tag":606,"props":28785,"children":28786},{},[28787,28789,28795,28797,28802,28804,28810],{"type":603,"value":28788},"上文例子中将所有的",{"type":597,"tag":629,"props":28790,"children":28792},{"className":28791},[],[28793],{"type":603,"value":28794},"Button",{"type":603,"value":28796},"转换到 ECS 了, 那",{"type":597,"tag":629,"props":28798,"children":28800},{"className":28799},[],[28801],{"type":603,"value":28794},{"type":603,"value":28803}," 里的",{"type":597,"tag":629,"props":28805,"children":28807},{"className":28806},[],[28808],{"type":603,"value":28809},"Text",{"type":603,"value":28811},"怎么办呢?",{"type":597,"tag":606,"props":28813,"children":28814},{},[28815,28817,28822,28824,28829,28831,28836,28838,28843],{"type":603,"value":28816},"和会将所有子层级提交到 conversion world 的 destroy 模式",{"type":597,"tag":1080,"props":28818,"children":28819},{},[28820],{"type":603,"value":28821},"不同",{"type":603,"value":28823},", 这时所有的子层级将被忽略(即便你为它们添加了inject模式的",{"type":597,"tag":629,"props":28825,"children":28827},{"className":28826},[],[28828],{"type":603,"value":9207},{"type":603,"value":28830},"组件). 仅有顶层对象会正常convert and inject. 所以 ECS 不会为创建关联",{"type":597,"tag":629,"props":28832,"children":28834},{"className":28833},[],[28835],{"type":603,"value":28809},{"type":603,"value":28837},"component object的",{"type":597,"tag":629,"props":28839,"children":28841},{"className":28840},[],[28842],{"type":603,"value":28055},{"type":603,"value":9674},{"type":597,"tag":606,"props":28845,"children":28846},{},[28847,28849,28855],{"type":603,"value":28848},"为了更清晰地说明这条规则, 我试着 convert 更上层的",{"type":597,"tag":629,"props":28850,"children":28852},{"className":28851},[],[28853],{"type":603,"value":28854},"Canvas",{"type":603,"value":26943},{"type":597,"tag":606,"props":28857,"children":28858},{},[28859],{"type":597,"tag":719,"props":28860,"children":28862},{"alt":719,"src":28861},"/images/2020-10-19-game-object-conversion-and-subscene/v2-44014cd244f3d5aa39e4c0cf8d534e47_720w.jpg",[],{"type":597,"tag":606,"props":28864,"children":28865},{},[28866],{"type":597,"tag":719,"props":28867,"children":28869},{"alt":719,"src":28868},"/images/2020-10-19-game-object-conversion-and-subscene/v2-5b8285a1bdd4c30a3aa57bf7c8cd3f7f_720w.jpg",[],{"type":597,"tag":606,"props":28871,"children":28872},{},[28873],{"type":603,"value":28874},"这下我的 Button 并没出现在 ECS 的世界里, 而只得到了 Canvas, 如果我把模式切回 destroy, 则得到一堆 pure 的 entity 而不带任何 component objects:",{"type":597,"tag":606,"props":28876,"children":28877},{},[28878],{"type":597,"tag":719,"props":28879,"children":28881},{"alt":719,"src":28880},"/images/2020-10-19-game-object-conversion-and-subscene/v2-e573126980ccfb5cf19b281e234acbb4_720w.jpg",[],{"type":597,"tag":606,"props":28883,"children":28884},{},[28885],{"type":603,"value":28886},"可以看到, 所有在conversion world 中的 component objects 最终都被销毁了.",{"type":597,"tag":598,"props":28888,"children":28890},{"id":28889},"iconvertgameobjecttoentity",[28891],{"type":603,"value":28892},"IConvertGameObjectToEntity",{"type":597,"tag":606,"props":28894,"children":28895},{},[28896,28898,28903],{"type":603,"value":28897},"实现 conversion system(通过继承",{"type":597,"tag":629,"props":28899,"children":28901},{"className":28900},[],[28902],{"type":603,"value":27285},{"type":603,"value":28904},")可以让你自由控制conversion 的过程. 但如果你想按照具体类型来转换呢? 每当转换执行时, 应当相应地执行一些代码.",{"type":597,"tag":606,"props":28906,"children":28907},{},[28908,28910,28916,28918,28923,28925,28931,28933,28938,28940,28946],{"type":603,"value":28909},"Unity 内置了另一种名为",{"type":597,"tag":629,"props":28911,"children":28913},{"className":28912},[],[28914],{"type":603,"value":28915},"ConvertGameObjectToEntitySystem",{"type":603,"value":28917}," 的 conversion system. 该 system 会迭代 conversion world 中所有的",{"type":597,"tag":629,"props":28919,"children":28921},{"className":28920},[],[28922],{"type":603,"value":22708},{"type":603,"value":28924},", 接着使用",{"type":597,"tag":629,"props":28926,"children":28928},{"className":28927},[],[28929],{"type":603,"value":28930},"GetComponents",{"type":603,"value":28932}," 并判断是否实现",{"type":597,"tag":629,"props":28934,"children":28936},{"className":28935},[],[28937],{"type":603,"value":28892},{"type":603,"value":28939}," 接口, 然后再调用该接口的",{"type":597,"tag":629,"props":28941,"children":28943},{"className":28942},[],[28944],{"type":603,"value":28945},".Convert",{"type":603,"value":28947}," 方法. 你可以把任何逻辑都放在这里:",{"type":597,"tag":621,"props":28949,"children":28952},{"className":28950,"code":28951,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing UnityEngine;\n\npublic class BlinkingButton : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n    }\n}\n",[28953],{"type":597,"tag":629,"props":28954,"children":28955},{"__ignoreMap":591},[28956],{"type":603,"value":28951},{"type":597,"tag":606,"props":28958,"children":28959},{},[28960,28966,28968,28973,28975,28980,28982,28987,28989,28995,28997,29002,29004,29009],{"type":597,"tag":629,"props":28961,"children":28963},{"className":28962},[],[28964],{"type":603,"value":28965},"entity",{"type":603,"value":28967},"参数是 ",{"type":597,"tag":629,"props":28969,"children":28971},{"className":28970},[],[28972],{"type":603,"value":22708},{"type":603,"value":28974},"产生的 primary entity. 回忆一下前文提到\"primary entity\"与",{"type":597,"tag":629,"props":28976,"children":28978},{"className":28977},[],[28979],{"type":603,"value":22708},{"type":603,"value":28981}," 以及相应",{"type":597,"tag":629,"props":28983,"children":28985},{"className":28984},[],[28986],{"type":603,"value":26859},{"type":603,"value":28988}," 关联. ",{"type":597,"tag":629,"props":28990,"children":28992},{"className":28991},[],[28993],{"type":603,"value":28994},"dstManager",{"type":603,"value":28996},"参数则是 destination world 里的 ",{"type":597,"tag":629,"props":28998,"children":29000},{"className":28999},[],[29001],{"type":603,"value":26941},{"type":603,"value":29003},". 在这里你可以做任何相关联的事儿, 比如为每个",{"type":597,"tag":629,"props":29005,"children":29007},{"className":29006},[],[29008],{"type":603,"value":28664},{"type":603,"value":29010},"添加 500 个屁用没有的 Entity?当然可以!",{"type":597,"tag":606,"props":29012,"children":29013},{},[29014,29016,29022],{"type":603,"value":29015},"你可以利用这里的机会来使用",{"type":597,"tag":629,"props":29017,"children":29019},{"className":29018},[],[29020],{"type":603,"value":29021},"dstManager.Add / SetComponentData",{"type":603,"value":29023},"来初始化更多数据. 要注意这里有一丝\"遥控\" destination world 的味道(因为实际上你工作在 conversion world 层面). 所以重视这个参数名字, 因为确实有另一个属于 conversion world 的 manager.",{"type":597,"tag":606,"props":29025,"children":29026},{},[29027,29029,29034,29036,29041],{"type":603,"value":29028},"单独创建 conversion system 并使用",{"type":597,"tag":629,"props":29030,"children":29032},{"className":29031},[],[29033],{"type":603,"value":28730},{"type":603,"value":29035},"来初始化数据也许会更高效一些(因为你在这里使用 Burst 和 jobs). 但是 Convert 方法运行你获取到",{"type":597,"tag":629,"props":29037,"children":29039},{"className":29038},[],[29040],{"type":603,"value":26859},{"type":603,"value":29042},"中序列化的字段, 这样更加随心的修改每个 entity 关联的数据.",{"type":597,"tag":606,"props":29044,"children":29045},{},[29046,29052,29054,29060,29062,29067,29069,29074],{"type":597,"tag":629,"props":29047,"children":29049},{"className":29048},[],[29050],{"type":603,"value":29051},"conversionSystem",{"type":603,"value":29053},"参数则是调用",{"type":597,"tag":629,"props":29055,"children":29057},{"className":29056},[],[29058],{"type":603,"value":29059},"Convert",{"type":603,"value":29061},"方法的",{"type":597,"tag":629,"props":29063,"children":29065},{"className":29064},[],[29066],{"type":603,"value":28915},{"type":603,"value":29068},"本体, 但是强制被转换成了",{"type":597,"tag":629,"props":29070,"children":29072},{"className":29071},[],[29073],{"type":603,"value":27285},{"type":603,"value":29075}," 类型(小心名称有点易混). 其目的是让你可以使用 mapping system 中的方法.",{"type":597,"tag":598,"props":29077,"children":29078},{"id":22641},[29079],{"type":603,"value":22644},{"type":597,"tag":606,"props":29081,"children":29082},{},[29083,29088],{"type":597,"tag":629,"props":29084,"children":29086},{"className":29085},[],[29087],{"type":603,"value":22644},{"type":603,"value":22654},{"type":597,"tag":1321,"props":29090,"children":29091},{},[29092,29114,29135],{"type":597,"tag":807,"props":29093,"children":29094},{},[29095,29096,29101,29102,29107,29108,29113],{"type":603,"value":22662},{"type":597,"tag":629,"props":29097,"children":29099},{"className":29098},[],[29100],{"type":603,"value":4729},{"type":603,"value":22669},{"type":597,"tag":629,"props":29103,"children":29105},{"className":29104},[],[29106],{"type":603,"value":22644},{"type":603,"value":22676},{"type":597,"tag":629,"props":29109,"children":29111},{"className":29110},[],[29112],{"type":603,"value":22682},{"type":603,"value":22684},{"type":597,"tag":807,"props":29115,"children":29116},{},[29117,29118,29123,29124,29129,29130],{"type":603,"value":22662},{"type":597,"tag":629,"props":29119,"children":29121},{"className":29120},[],[29122],{"type":603,"value":4744},{"type":603,"value":22695},{"type":597,"tag":629,"props":29125,"children":29127},{"className":29126},[],[29128],{"type":603,"value":22644},{"type":603,"value":22702},{"type":597,"tag":629,"props":29131,"children":29133},{"className":29132},[],[29134],{"type":603,"value":22708},{"type":597,"tag":807,"props":29136,"children":29137},{},[29138,29139,29144,29145,29150,29151,29156,29157,29162],{"type":603,"value":22713},{"type":597,"tag":629,"props":29140,"children":29142},{"className":29141},[],[29143],{"type":603,"value":22719},{"type":603,"value":22721},{"type":597,"tag":629,"props":29146,"children":29148},{"className":29147},[],[29149],{"type":603,"value":22727},{"type":603,"value":22729},{"type":597,"tag":629,"props":29152,"children":29154},{"className":29153},[],[29155],{"type":603,"value":22644},{"type":603,"value":22736},{"type":597,"tag":629,"props":29158,"children":29160},{"className":29159},[],[29161],{"type":603,"value":22708},{"type":603,"value":22743},{"type":597,"tag":606,"props":29164,"children":29165},{},[29166,29167,29172,29173,29177],{"type":603,"value":22748},{"type":597,"tag":629,"props":29168,"children":29170},{"className":29169},[],[29171],{"type":603,"value":22644},{"type":603,"value":22755},{"type":597,"tag":1080,"props":29174,"children":29175},{},[29176],{"type":603,"value":22760},{"type":603,"value":22762},{"type":597,"tag":606,"props":29179,"children":29180},{},[29181,29182,29187,29188,29193,29194,29198,29199,29204],{"type":603,"value":22767},{"type":597,"tag":629,"props":29183,"children":29185},{"className":29184},[],[29186],{"type":603,"value":4729},{"type":603,"value":695},{"type":597,"tag":629,"props":29189,"children":29191},{"className":29190},[],[29192],{"type":603,"value":4737},{"type":603,"value":22780},{"type":597,"tag":1080,"props":29195,"children":29196},{},[29197],{"type":603,"value":22785},{"type":603,"value":22787},{"type":597,"tag":629,"props":29200,"children":29202},{"className":29201},[],[29203],{"type":603,"value":4744},{"type":603,"value":22794},{"type":597,"tag":606,"props":29206,"children":29207},{},[29208,29209,29214,29215,29220],{"type":603,"value":22799},{"type":597,"tag":629,"props":29210,"children":29212},{"className":29211},[],[29213],{"type":603,"value":22644},{"type":603,"value":13757},{"type":597,"tag":629,"props":29216,"children":29218},{"className":29217},[],[29219],{"type":603,"value":22552},{"type":603,"value":22812},{"type":597,"tag":598,"props":29222,"children":29223},{"id":22815},[29224],{"type":603,"value":22818},{"type":597,"tag":606,"props":29226,"children":29227},{},[29228,29229,29234,29235,29240,29241,29246,29247,29252],{"type":603,"value":22823},{"type":597,"tag":629,"props":29230,"children":29232},{"className":29231},[],[29233],{"type":603,"value":9207},{"type":603,"value":22830},{"type":597,"tag":629,"props":29236,"children":29238},{"className":29237},[],[29239],{"type":603,"value":22644},{"type":603,"value":22837},{"type":597,"tag":629,"props":29242,"children":29244},{"className":29243},[],[29245],{"type":603,"value":9207},{"type":603,"value":22844},{"type":597,"tag":629,"props":29248,"children":29250},{"className":29249},[],[29251],{"type":603,"value":22552},{"type":603,"value":22851},{"type":597,"tag":606,"props":29254,"children":29255},{},[29256],{"type":603,"value":22856},{"type":597,"tag":621,"props":29258,"children":29260},{"className":29259,"code":22859,"language":8105,"meta":591},[8107],[29261],{"type":597,"tag":629,"props":29262,"children":29263},{"__ignoreMap":591},[29264],{"type":603,"value":22859},{"type":597,"tag":606,"props":29266,"children":29267},{},[29268],{"type":603,"value":22870},{"type":597,"tag":621,"props":29270,"children":29272},{"className":29271,"code":22873,"language":8105,"meta":591},[8107],[29273],{"type":597,"tag":629,"props":29274,"children":29275},{"__ignoreMap":591},[29276],{"type":603,"value":22873},{"type":597,"tag":606,"props":29278,"children":29279},{},[29280],{"type":597,"tag":719,"props":29281,"children":29283},{"alt":719,"src":29282},"/images/2020-10-19-game-object-conversion-and-subscene/v2-fe2983f48e754c910758292e0a0dfc91_720w.jpg",[],{"type":597,"tag":606,"props":29285,"children":29286},{},[29287,29288,29293,29294,29299,29300,29305],{"type":603,"value":22891},{"type":597,"tag":629,"props":29289,"children":29291},{"className":29290},[],[29292],{"type":603,"value":22644},{"type":603,"value":22898},{"type":597,"tag":629,"props":29295,"children":29297},{"className":29296},[],[29298],{"type":603,"value":4729},{"type":603,"value":695},{"type":597,"tag":629,"props":29301,"children":29303},{"className":29302},[],[29304],{"type":603,"value":22910},{"type":603,"value":22912},{"type":597,"tag":606,"props":29307,"children":29308},{},[29309],{"type":597,"tag":719,"props":29310,"children":29312},{"alt":719,"src":29311},"/images/2020-10-19-game-object-conversion-and-subscene/v2-7d3ddcf06ebfd7b410dc38b6dd0d336a_720w.jpg",[],{"type":597,"tag":606,"props":29314,"children":29315},{},[29316,29318,29323],{"type":603,"value":29317},"Unity 也在其他一些地方执行这一过程, 比如在转换 prefab ",{"type":597,"tag":1080,"props":29319,"children":29320},{},[29321],{"type":603,"value":29322},"asset",{"type":603,"value":29324}," 的时候.(后文会讲)",{"type":597,"tag":598,"props":29326,"children":29328},{"id":29327},"尺寸警告",[29329],{"type":603,"value":29330},"尺寸警告!",{"type":597,"tag":606,"props":29332,"children":29333},{},[29334,29336,29341,29343,29348,29350,29355],{"type":603,"value":29335},"你可能觉得每个 chunk 16KB 非常多了, 你最多可以放进去 2000个 entity. 一旦你开始转换层级结构, ",{"type":597,"tag":629,"props":29337,"children":29339},{"className":29338},[],[29340],{"type":603,"value":22644},{"type":603,"value":29342},"和它那些朋友们(比如 ",{"type":597,"tag":629,"props":29344,"children":29346},{"className":29345},[],[29347],{"type":603,"value":28220},{"type":603,"value":29349}," )会很快耗光这些预算, 每一个 buffer 里的元素都是一个 8 bytes 的 ",{"type":597,"tag":629,"props":29351,"children":29353},{"className":29352},[],[29354],{"type":603,"value":28055},{"type":603,"value":9674},{"type":597,"tag":606,"props":29357,"children":29358},{},[29359,29361,29366],{"type":603,"value":29360},"下图中 12 个 chunks 中, 每个只能容纳 45 个 ",{"type":597,"tag":629,"props":29362,"children":29364},{"className":29363},[],[29365],{"type":603,"value":28055},{"type":603,"value":29367}," , 哪怕只是非常简单的层级结构和非常少量的 component, 远达不到我们的千个级别.",{"type":597,"tag":606,"props":29369,"children":29370},{},[29371],{"type":597,"tag":719,"props":29372,"children":29374},{"alt":719,"src":29373},"/images/2020-10-19-game-object-conversion-and-subscene/v2-398058d78c2ab70ef17a48f705fe5195_720w.jpg",[],{"type":597,"tag":606,"props":29376,"children":29377},{},[29378,29380,29386,29388,29394,29396,29402,29404,29409,29411,29417],{"type":603,"value":29379},"在 entities-0.5.1版本里, ",{"type":597,"tag":629,"props":29381,"children":29383},{"className":29382},[],[29384],{"type":603,"value":29385},"TypeManager.cs",{"type":603,"value":29387}," 源码中可看到, 任何没有",{"type":597,"tag":629,"props":29389,"children":29391},{"className":29390},[],[29392],{"type":603,"value":29393},"[InternalBufferCapacity]",{"type":603,"value":29395}," 的buffer 类型都会默认 ",{"type":597,"tag":629,"props":29397,"children":29399},{"className":29398},[],[29400],{"type":603,"value":29401},"128/size",{"type":603,"value":29403}," 的容量. ",{"type":597,"tag":629,"props":29405,"children":29407},{"className":29406},[],[29408],{"type":603,"value":22644},{"type":603,"value":29410},"里面装的是 entity, 因此其容量是 ",{"type":597,"tag":629,"props":29412,"children":29414},{"className":29413},[],[29415],{"type":603,"value":29416},"128/8 = 16",{"type":603,"value":27948},{"type":597,"tag":606,"props":29419,"children":29420},{},[29421],{"type":597,"tag":719,"props":29422,"children":29424},{"alt":719,"src":29423},"/images/2020-10-19-game-object-conversion-and-subscene/v2-fe0be3a9fca17f9a89108d85d8ba961c_720w.jpg",[],{"type":597,"tag":606,"props":29426,"children":29427},{},[29428],{"type":603,"value":29429},"这意味着:",{"type":597,"tag":1321,"props":29431,"children":29432},{},[29433,29450,29455,29474],{"type":597,"tag":807,"props":29434,"children":29435},{},[29436,29441,29443,29448],{"type":597,"tag":1080,"props":29437,"children":29438},{},[29439],{"type":603,"value":29440},"每个 Entity",{"type":603,"value":29442}," 关联的",{"type":597,"tag":629,"props":29444,"children":29446},{"className":29445},[],[29447],{"type":603,"value":22644},{"type":603,"value":29449},"(或者其他未指定 capacity 的buffer) 将占据 128 bytes. 这是 chunk 容积变小的原因.",{"type":597,"tag":807,"props":29451,"children":29452},{},[29453],{"type":603,"value":29454},"层级中超过16个子对象并不是什么好事, 一旦超过这个数量, 这些 linked entities 不得不从排列良好的 chunk 内存中挪到堆内存中. 可能 Unity 认为 16 是一个不太可能达到的值, 而 8 又太过于常见.",{"type":597,"tag":807,"props":29456,"children":29457},{},[29458,29460,29465,29467,29472],{"type":603,"value":29459},"除非显式调用, ",{"type":597,"tag":629,"props":29461,"children":29463},{"className":29462},[],[29464],{"type":603,"value":22644},{"type":603,"value":29466},"仅仅在 prefab 的 conversion 过程中被自动创建, 因此你只需要注意你的 prefab 里面嵌套的 ",{"type":597,"tag":629,"props":29468,"children":29470},{"className":29469},[],[29471],{"type":603,"value":22708},{"type":603,"value":29473}," 数量",{"type":597,"tag":807,"props":29475,"children":29476},{},[29477,29479,29484],{"type":603,"value":29478},"在运行时, 所有嵌套 prefab 和 prefab variant 工作流并不受影响, 系统内部只把它们看过一个单独的 prefab. 你无法把嵌套 prefab 从父 prefab 中拿出来, 并期望",{"type":597,"tag":629,"props":29480,"children":29482},{"className":29481},[],[29483],{"type":603,"value":22644},{"type":603,"value":29485},"正常工作.",{"type":597,"tag":606,"props":29487,"children":29488},{},[29489],{"type":603,"value":29490},"最后, 16kb 一个 chunk 意味着 1MB 大概包含 60 个 chunk. 如上例, 你能在 1MB 存储大约 2700 个转换后的GameObject , 这样看来或许45 的 chunk 容量也不用太担心了(当然具体情况具体分析).",{"type":597,"tag":598,"props":29492,"children":29494},{"id":29493},"创建额外的-entity",[29495],{"type":603,"value":29496},"创建额外的 entity",{"type":597,"tag":606,"props":29498,"children":29499},{},[29500],{"type":603,"value":29501},"一个常见的情况是一个 GameObject 对应一个 Entity, 也即 \"primary entity\". 在 mapping system 里面, 调用 CreateAdditionalEntity(gameObject)来创建更多的Entity .这些 entity 现在属于这个 game object 的 \"secondary entity\".",{"type":597,"tag":606,"props":29503,"children":29504},{},[29505],{"type":603,"value":29506},"设想我们的新设计是每当CubeMultiple 转换时将会创建额外的两个 entity:",{"type":597,"tag":621,"props":29508,"children":29511},{"className":29509,"code":29510,"language":8105,"meta":591},[8107],"public class CubeMultiple : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        Entity additional1 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional1, $\"{this.name}_Add1\");\n        Entity additional2 = conversionSystem.CreateAdditionalEntity(this.gameObject);\n        dstManager.SetName(additional2, $\"{this.name}_Add2\");\n    }\n}\n",[29512],{"type":597,"tag":629,"props":29513,"children":29514},{"__ignoreMap":591},[29515],{"type":603,"value":29510},{"type":597,"tag":606,"props":29517,"children":29518},{},[29519],{"type":603,"value":29520},"注意Convert调用是递归的, ConvertToEntity 附加在顶部的 CubeHead 上.",{"type":597,"tag":606,"props":29522,"children":29523},{},[29524],{"type":597,"tag":719,"props":29525,"children":29527},{"alt":719,"src":29526},"/images/2020-10-19-game-object-conversion-and-subscene/v2-9cbab2ea04976cef1e61cc2b365e71af_720w.jpg",[],{"type":597,"tag":606,"props":29529,"children":29530},{},[29531],{"type":603,"value":29532},"要注意额外的entity都是新增的, 且没有为它们添加 components, 这不像那些被默认转换的component objects (如 Transform), 注意下方拥有 2008 容量的 chunk:",{"type":597,"tag":606,"props":29534,"children":29535},{},[29536],{"type":597,"tag":719,"props":29537,"children":29539},{"alt":719,"src":29538},"/images/2020-10-19-game-object-conversion-and-subscene/v2-f1a5fb905599fc0439e0a6764dd09072_720w.jpg",[],{"type":597,"tag":606,"props":29541,"children":29542},{},[29543],{"type":603,"value":29544},"你可能意识的到使用 destination entity manager 的 dstManager.CreateEntity() 来做同样的事情, 下文你会看到这不只是处理方式的问题.",{"type":597,"tag":598,"props":29546,"children":29548},{"id":29547},"从单一源得到-entity",[29549],{"type":603,"value":29550},"从单一源得到 entity",{"type":597,"tag":606,"props":29552,"children":29553},{},[29554],{"type":603,"value":29555},"要这样做, 需要在 mapping system 里, 调用GetEntities(gameObject/component). 因为我们增加了额外的 entity, 让 conversion world 知道这些 entity 来自特定的东西, 这样让我们可以查询到它们. 比如, 如果我有一个GameObject CubeMultiple 的引用, 那么使用GetEntities 我就能得到 primary entity 和另外两个新增的 entity.",{"type":597,"tag":606,"props":29557,"children":29558},{},[29559],{"type":603,"value":29560},"你无需担心它们是否已经被创建了或者担心Convert 顺序, 因为这类调用会例行调用Convert . (这一点同样适用于GetPrimaryEntity )",{"type":597,"tag":598,"props":29562,"children":29564},{"id":29563},"如何影响-linked-entity-group",[29565],{"type":603,"value":29566},"如何影响 linked entity group",{"type":597,"tag":606,"props":29568,"children":29569},{},[29570],{"type":603,"value":29571},"回忆一下DeclareLinkedEntityGroup. 通过正确增加额外的 entity, conversion system 知道它们如何关联至 GameObject. 这些结果也会添加进 linked entity group.",{"type":597,"tag":606,"props":29573,"children":29574},{},[29575],{"type":603,"value":29576},"前面 CubeHead 的例子在自己身上调用DeclareLinkedEntityGroup , 结果是已经把额外增加的 entity 包含进来了:",{"type":597,"tag":606,"props":29578,"children":29579},{},[29580],{"type":597,"tag":719,"props":29581,"children":29583},{"alt":719,"src":29582},"/images/2020-10-19-game-object-conversion-and-subscene/v2-549d3983b0e3532643b81a2a3cecf79a_720w.jpg",[],{"type":597,"tag":606,"props":29585,"children":29586},{},[29587],{"type":603,"value":29588},"而只是单纯地通过dstManager 来创建 entity 则不会有这样的效果. 这样看起来转换CubeMultiple 更像是带着一些添加更多 Entity 到 destination world 的\"副作用\", 而不是它变成了多个 entity. 而这种模式也能配合 live link 的工作. (后文会解释)",{"type":597,"tag":598,"props":29590,"children":29592},{"id":29591},"声明-asset",[29593],{"type":603,"value":29594},"声明 Asset",{"type":597,"tag":606,"props":29596,"children":29597},{},[29598],{"type":603,"value":29599},"或许你也想通过 asset 而不仅仅是 scene 来生成 entity, 好消息是 primary entity 可以关联到 asset 上, 不只是GameObject (或MonoBehaviour), 如果你调用GetPrimaryEntity 时传入 asset, 最后会在 mapping system 里面注册, 并得到正确的 entity.",{"type":597,"tag":606,"props":29601,"children":29602},{},[29603],{"type":603,"value":29604},"因为你无法将ConvertToEntity放置到 asset 文件上, 你需要在 conversion 后某种\"声明\"它们是 entity的方法.",{"type":597,"tag":606,"props":29606,"children":29607},{},[29608],{"type":597,"tag":1080,"props":29609,"children":29610},{},[29611],{"type":603,"value":29612},"什么时候声明?",{"type":597,"tag":606,"props":29614,"children":29615},{},[29616],{"type":603,"value":29617},"答案是在 conversion 真实发生之前. 这被称之为 discovering 过程. 如果你在这个conversion过程之中试图添加, 声明的 API 就会报错. 在声明之后, 在 conversion 过程中, 你就可以使用 GetPrimaryEntity来传入 asset 的 primary entity了. 如果你不这样做, 那么查询它们将会有点困难.",{"type":597,"tag":606,"props":29619,"children":29620},{},[29621],{"type":597,"tag":1080,"props":29622,"children":29623},{},[29624],{"type":603,"value":29625},"IDeclareReferencedPrefabs",{"type":597,"tag":606,"props":29627,"children":29628},{},[29629],{"type":603,"value":29630},"在 discovering 阶段, 首先, 实现了IDeclareReferencedPrefabs组件接口的GameObject会被扫描, 在这里你可以通过添加 prefab asset (目前只支持 prefab 文件) 到相应的 list 中来进行声明. 你可以在inspector里通过序列化的 GameObject 字段来引用它们.",{"type":597,"tag":606,"props":29632,"children":29633},{},[29634],{"type":597,"tag":1080,"props":29635,"children":29636},{},[29637],{"type":603,"value":29638},"在conversion systems里面声明",{"type":597,"tag":606,"props":29640,"children":29641},{},[29642,29644],{"type":603,"value":29643},"在扫描了接口之后, 回忆一下我们前面提到的GameObjectExportGroup. 所有运行在第一个 GameObjectDeclareReferencedObjectsGroup 中的 conversion system 会被 update. 在这里, 你有另一个声明 asset 的机会, 这里支持 prefab 和",{"type":597,"tag":1080,"props":29645,"children":29646},{},[29647],{"type":603,"value":29648},"其他任意类型的 assets.",{"type":597,"tag":621,"props":29650,"children":29652},{"className":29651,"code":27479,"language":8105,"meta":591},[8107],[29653],{"type":597,"tag":629,"props":29654,"children":29655},{"__ignoreMap":591},[29656],{"type":603,"value":27479},{"type":597,"tag":606,"props":29658,"children":29659},{},[29660],{"type":603,"value":29661},"使用 conversion system 意味着你手边可以使用 mapping system. 其中有几个方法可以用来声明 asset. 接下来你将如何在 system 代码中获取到这些 asset 引用呢? 你可以在conversion world 中查询任意可能链接了 asset 的 component object (比如通过在可以在 inspector 中添加的字段). 当然可能某个时间点你会意识到不如最开始就使用IDeclareReferencedPrefabs , 因为反正你都得实现某种\"占位\"机制. 所以, 如非必要, 尽可能使用 IDeclareReferencedPrefabs 吧.",{"type":597,"tag":606,"props":29663,"children":29664},{},[29665],{"type":603,"value":29666},"接下来到了正常 conversion 的时候, 这时候你可以结合 IConvertGameObjectToEntity 来获取已经被转换好的 asset/prefab 的 Entity, 传入之前一样的引用即可:",{"type":597,"tag":621,"props":29668,"children":29671},{"className":29669,"code":29670,"language":8105,"meta":591},[8107],"public class BlinkingButton : MonoBehaviour, IDeclareReferencedPrefabs, IConvertGameObjectToEntity\n{\n    public GameObject myPrefab;\n    \n    //This first\n    public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n    {\n        referencedPrefabs.Add(myPrefab);\n    }\n    \n    // |\n    // V\n    \n    //Then GameObjectDeclareReferencedObjectsGroup \u003C- last chance to declare stuff\n    \n    //Then GameObjectBeforeConversionGroup\n    //Then GameObjectConversionGroup, which contains ConvertGameObjectToEntitySystem that run the following Convert\n\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        //Get primary entity of the prefab asset, to assign to primary entity converted from this component.\n        Entity prefabAssetEntity = conversionSystem.GetPrimaryEntity(myPrefab);\n        //Remember it, etc.\n    }\n    \n    // |\n    // V\n    \n    //Then GameObjectAfterConversionGroup\n}\n",[29672],{"type":597,"tag":629,"props":29673,"children":29674},{"__ignoreMap":591},[29675],{"type":603,"value":29670},{"type":597,"tag":606,"props":29677,"children":29678},{},[29679],{"type":603,"value":29680},"要注意 IConvertToGameObjectToEntity 的 Convert 被调用时你依然有机会使用 mapping system. (添加额外 entity, 遍历其他 primary entity 等等) 但如果你这时候使用 mapping system 来声明更多东西就太晚了会报错.",{"type":597,"tag":606,"props":29682,"children":29683},{},[29684],{"type":603,"value":29685},"以下就是完整的过程:",{"type":597,"tag":621,"props":29687,"children":29690},{"className":29688,"code":29689,"language":8105,"meta":591},[8107],"// ??? \u003C- IDeclareReferencedPrefabs 调用.\nGameObjectDeclareReferencedObjectsGroup.Update()\n// ??? \u003C- discovery 阶段结束, 无法再声明更多 asset.\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update()\nGameObjectAfterConversionGroup.Update()\n// ???\nGameObjectExportGroup.Update()\n",[29691],{"type":597,"tag":629,"props":29692,"children":29693},{"__ignoreMap":591},[29694],{"type":603,"value":29689},{"type":597,"tag":606,"props":29696,"children":29697},{},[29698],{"type":603,"value":29699},"顺便一提声明截至仅仅针对 asset/prefab, 你依然可以在conversion 过程中调用DeclareLinkedEntityGroup.",{"type":597,"tag":606,"props":29701,"children":29702},{},[29703],{"type":597,"tag":1080,"props":29704,"children":29705},{},[29706],{"type":603,"value":29707},"声明任意 asset",{"type":597,"tag":606,"props":29709,"children":29710},{},[29711,29713,29718],{"type":603,"value":29712},"在 mapping system 里 使用DeclareReferencedAsset , ",{"type":597,"tag":1080,"props":29714,"children":29715},{},[29716],{"type":603,"value":29717},"在 conversion world 里",{"type":603,"value":29719},", 你会得到一个关联 Asset conponent , 外加一个你声明的 asset 类型的 component object 的 Entity (注意并非 destination world).",{"type":597,"tag":606,"props":29721,"children":29722},{},[29723],{"type":603,"value":29724},"例如我可以通过DeclareReferencedAsset(mySpriteAtlas).来创建一个Entity+Asset+SpriteAtlas , 这时候 destination world 的 primary entity 依然是空的, 目前还不明白这个系统设计的目的, 也许是为了让你自己处理Asset的转换过程.",{"type":597,"tag":606,"props":29726,"children":29727},{},[29728],{"type":597,"tag":1080,"props":29729,"children":29730},{},[29731],{"type":603,"value":29732},"声明 prefab asset",{"type":597,"tag":606,"props":29734,"children":29735},{},[29736],{"type":603,"value":29737},"添加进IDeclareReferencedPrefabs 里的 list 就行. 对于 GameObjectDeclareReferencedObjectsGroup 里的 system 来讲, 则是使用 mapping system 的DeclareReferencedPrefab 方法.",{"type":597,"tag":606,"props":29739,"children":29740},{},[29741,29743,29748],{"type":603,"value":29742},"不过这一次和AssetandGameObject component object 不一样, 你会在 destination world 中得到一个真正的 ",{"type":597,"tag":1080,"props":29744,"children":29745},{},[29746],{"type":603,"value":29747},"prefab engity",{"type":603,"value":29749}," (而不是前面说到的空结果).",{"type":597,"tag":606,"props":29751,"children":29752},{},[29753],{"type":603,"value":29754},"接下来简单解释下什么是 Entityprefab. 如果你添加一个 Prefab 组件到任何 Entity, 除非你显式指定, 那么它将在默认 query 中隐身, 和Disabled组件的行为很相似. 使用 Instantiate方法则会将实例化出的 entity 将该prefab组件删掉. (毕竟你不太可能想要实例化另一个 prefab 出来...)",{"type":597,"tag":606,"props":29756,"children":29757},{},[29758],{"type":603,"value":29759},"不过该行为的目的又有所不同, 之所以在 query 中隐藏它们是并非主观上想要让它们处于 \"inactive\" 状态, 而是它们本就该是 \"inactive\". 它们只不过是用来快速创建新数据的蓝图. 因此, 在创建 query 时有两个不同的参数模式: \"include disabled\" 和 \"include prefabs\". 使用时注意语义上的区别 (如不要使用 Prefab 来隐藏 Entity).",{"type":597,"tag":606,"props":29761,"children":29762},{},[29763],{"type":603,"value":29764},"结合前面提到的LinkedEntityGroup , 现在ECS的实例化已经和传统 Unity 的实例化感觉一样了!",{"type":597,"tag":606,"props":29766,"children":29767},{},[29768],{"type":603,"value":29769},"通过声明 prefab asset, 你便同时添加了Prefab和LinkedEntityGroup 到目标primary entity上.",{"type":597,"tag":606,"props":29771,"children":29772},{},[29773,29775,29780],{"type":603,"value":29774},"要注意ConvertToEntity只是转换对象为普通的 Entity, 因为 scene 里的层级结构并不是 ",{"type":597,"tag":1080,"props":29776,"children":29777},{},[29778],{"type":603,"value":29779},"asset.",{"type":603,"value":29781}," 无论它们是不是蓝色的(即在scene里被实例化的 prefab), 我们都无法得到Prefab或LinkedEntityGroup.",{"type":597,"tag":606,"props":29783,"children":29784},{},[29785],{"type":603,"value":29786},"Prefab 本身则属于 asset 文件, 你无法在 Project panel 中粘贴ConvertToEntity运行. ECS 库通过查看它是不是位于 scene 中来决定它是不是一个 prefab, 显然可以粘贴ConvertToEntity 则意味着对象在 scene 中.",{"type":597,"tag":598,"props":29788,"children":29790},{"id":29789},"prefab-asset-conversion-过程",[29791],{"type":603,"value":29792},"Prefab asset conversion 过程",{"type":597,"tag":606,"props":29794,"children":29795},{},[29796],{"type":603,"value":29797},"上面的声明过程实际上会调用 convert 过程. 接下来我说说和转换 scene 中GameObject在细节上有哪些不同. 只要在 scene 层级中, 是否从 prefab 实例化就无关紧要, 只有在从 Project panel 处声明的 asset 被实例化时才会有区别:",{"type":597,"tag":606,"props":29799,"children":29800},{},[29801],{"type":597,"tag":1080,"props":29802,"children":29803},{},[29804],{"type":603,"value":29805},"为实例化准备的自动 LinkedEntityGroup",{"type":597,"tag":606,"props":29807,"children":29808},{},[29809],{"type":603,"value":29810},"如下所示的 prefab asset 设置:",{"type":597,"tag":606,"props":29812,"children":29813},{},[29814],{"type":597,"tag":719,"props":29815,"children":29817},{"alt":719,"src":29816},"/images/2020-10-19-game-object-conversion-and-subscene/v2-de0722a0a9b1b64f962e00c0655f6641_720w.jpg",[],{"type":597,"tag":606,"props":29819,"children":29820},{},[29821],{"type":597,"tag":719,"props":29822,"children":29824},{"alt":719,"src":29823},"/images/2020-10-19-game-object-conversion-and-subscene/v2-968dbba1c2b6b1579f9cd5d7b1083d42_720w.jpg",[],{"type":597,"tag":606,"props":29826,"children":29827},{},[29828],{"type":603,"value":29829},"要意识到 CubeHead 是一个 asset, 而不是 scene 对象.",{"type":597,"tag":621,"props":29831,"children":29834},{"className":29832,"code":29833,"language":8105,"meta":591},[8107],"[GenerateAuthoringComponent]\npublic struct PrefabConversion : IComponentData\n{\n    public Entity prefab;\n}\n",[29835],{"type":597,"tag":629,"props":29836,"children":29837},{"__ignoreMap":591},[29838],{"type":603,"value":29833},{"type":597,"tag":606,"props":29840,"children":29841},{},[29842],{"type":603,"value":29843},"我们会得到:",{"type":597,"tag":606,"props":29845,"children":29846},{},[29847],{"type":597,"tag":719,"props":29848,"children":29850},{"alt":719,"src":29849},"/images/2020-10-19-game-object-conversion-and-subscene/v2-eca8ecacce32b7cb618f690308873ba7_720w.jpg",[],{"type":597,"tag":1321,"props":29852,"children":29853},{},[29854,29859,29864,29869],{"type":597,"tag":807,"props":29855,"children":29856},{},[29857],{"type":603,"value":29858},"如果我们 convert 位于 scene 中的 CubeHead, 我们无法获取到LinkedEntityGroup. 该行为仅仅针对 prefab asset, 其目的显然是为了实例化. (链锁销毁行为也一样)",{"type":597,"tag":807,"props":29860,"children":29861},{},[29862],{"type":603,"value":29863},"LinkedEntityGroup 包含层级树下的所有对象以及自己, 包括 cube 3 和 cube 4. Conversion过程让 prefab \"线性化\"了, 实例化过程就无需递归调用了, 是需要遍历 LinkedEntityGroup即可.",{"type":597,"tag":807,"props":29865,"children":29866},{},[29867],{"type":603,"value":29868},"前文提到过, 之所以LinkedEntityGroup包含它自己是因为 SetEnable 可以一次性完成工作, 而不是一个接一个的调用.",{"type":597,"tag":807,"props":29870,"children":29871},{},[29872],{"type":603,"value":29873},"所有转换后的 entity 都会添加 Prefab组件, 但是我们只需要使用最顶层的那个 Entity 用于实例化. 事实上, 实例化过程没有Prefab 什么事儿, 主要是用LinkedEntityGroup 来完成工作. 实际上你可以实例化任何 entity.",{"type":597,"tag":606,"props":29875,"children":29876},{},[29877],{"type":597,"tag":1080,"props":29878,"children":29879},{},[29880],{"type":603,"value":29881},"为禁用功能准备的自动LinkedEntityGroup",{"type":597,"tag":606,"props":29883,"children":29884},{},[29885],{"type":603,"value":29886},"前文解释过 prefab 的顶层对象会得到LinkedEntityGroup 是因为需要实例化.",{"type":597,"tag":606,"props":29888,"children":29889},{},[29890],{"type":603,"value":29891},"额外地, 如果在 prefab 的任何位置发现了被禁用的GameObject,该位置的对象也会得到包含所有子级对象的LinkedEntityGroup .",{"type":597,"tag":606,"props":29893,"children":29894},{},[29895],{"type":603,"value":29896},"该行为的目的是为了你可以在已经被实例化的 Entity 上使用SetEnable 时能高效地添加 Disabled组件. 当然Disabled的 conversion 过程依然遵循相同的规则: 当 convert 一个非 asset 的GameObject , 会自动添加LinkedEntityGroup.",{"type":597,"tag":606,"props":29898,"children":29899},{},[29900],{"type":597,"tag":1080,"props":29901,"children":29902},{},[29903],{"type":603,"value":29904},"Can't stop won't stop",{"type":597,"tag":606,"props":29906,"children":29907},{},[29908],{"type":603,"value":29909},"你不能在 prefab 中使用 Convert To Entity (Stop), 没用.",{"type":597,"tag":606,"props":29911,"children":29912},{},[29913],{"type":597,"tag":1080,"props":29914,"children":29915},{},[29916],{"type":603,"value":29917},"来点小测验吧.",{"type":597,"tag":606,"props":29919,"children":29920},{},[29921],{"type":603,"value":29922},"依照目前这些 conversion 的规则, 来检查一下你是否能推算出上面例子正确的结果吧: Parent(还记得这是为 transform systems准备的么),Prefab,Disabled,LinkedEntityGroup(以及里面的 entity).Child和相关组件会根据Parent组件在一轮 transform systems 的update 之后被添加.",{"type":597,"tag":606,"props":29924,"children":29925},{},[29926],{"type":597,"tag":719,"props":29927,"children":29929},{"alt":719,"src":29928},"/images/2020-10-19-game-object-conversion-and-subscene/v2-081c8f1dcb6bece2eeb25a3e11620da6_720w.jpg",[],{"type":597,"tag":621,"props":29931,"children":29935},{"className":29932,"code":29934,"language":603,"meta":591},[29933],"language-text","Cube : Prefab, LinkedEntityGroup (Cube,1,2,3,4)\n1    : Prefab, Parent (Cube)\n2    : Prefab, Parent (Cube)\n3    : Prefab, Parent (2)\n4    : Prefab, Parent (2)\n",[29936],{"type":597,"tag":629,"props":29937,"children":29938},{"__ignoreMap":591},[29939],{"type":603,"value":29934},{"type":597,"tag":606,"props":29941,"children":29942},{},[29943],{"type":597,"tag":719,"props":29944,"children":29946},{"alt":719,"src":29945},"/images/2020-10-19-game-object-conversion-and-subscene/v2-f0ecb3bdbdef8bdba3b8ec63f994015c_720w.jpg",[],{"type":597,"tag":621,"props":29948,"children":29951},{"className":29949,"code":29950,"language":603,"meta":591},[29933],"Cube : Prefab, Prefab, LinkedEntityGroup (Cube,1,2,3,4)\n1    : Prefab, Parent (Cube)\n2    : Prefab, Parent (Cube), Disabled, LinkedEntityGroup (2,3,4)\n3    : Prefab, Parent (2), Disabled\n4    : Prefab, Parent (2), Disabled\n",[29952],{"type":597,"tag":629,"props":29953,"children":29954},{"__ignoreMap":591},[29955],{"type":603,"value":29950},{"type":597,"tag":606,"props":29957,"children":29958},{},[29959],{"type":603,"value":29960},"要记住LinkedEntityGroup 总是会包含它自己, 包括 disable 这种情况. 因此如果你在叶子对象上禁用了 GameObject , 你也会得到包含它自己的LinkedEntityGroup.(也许你觉得这无所谓, 但实际上这会让 chunks 的碎片变多).",{"type":597,"tag":606,"props":29962,"children":29963},{},[29964],{"type":597,"tag":719,"props":29965,"children":29967},{"alt":719,"src":29966},"/images/2020-10-19-game-object-conversion-and-subscene/v2-8abf5ccdb436f84aa87e0982f3eba30b_720w.jpg",[],{"type":597,"tag":621,"props":29969,"children":29972},{"className":29970,"code":29971,"language":603,"meta":591},[29933],"Cube : \n1    : Parent (Cube)\n2    : Parent (Cube)\n3    : Parent (2)\n4    : Parent (2)\n",[29973],{"type":597,"tag":629,"props":29974,"children":29975},{"__ignoreMap":591},[29976],{"type":603,"value":29971},{"type":597,"tag":606,"props":29978,"children":29979},{},[29980],{"type":597,"tag":719,"props":29981,"children":29983},{"alt":719,"src":29982},"/images/2020-10-19-game-object-conversion-and-subscene/v2-43536999ecd92ac2b1f1788ba43257c8_720w.jpg",[],{"type":597,"tag":621,"props":29985,"children":29987},{"className":29986,"code":29971,"language":603,"meta":591},[29933],[29988],{"type":597,"tag":629,"props":29989,"children":29990},{"__ignoreMap":591},[29991],{"type":603,"value":29971},{"type":597,"tag":606,"props":29993,"children":29994},{},[29995],{"type":603,"value":29996},"是否蓝色名字(说明它连接这 prefab asset)无所谓, 它不是 asset, 不会遵循LinkedEntityGroup的conversion 规则.",{"type":597,"tag":606,"props":29998,"children":29999},{},[30000],{"type":597,"tag":719,"props":30001,"children":30003},{"alt":719,"src":30002},"/images/2020-10-19-game-object-conversion-and-subscene/v2-9b32027c1ea133d6cc35ff6861ff544a_720w.jpg",[],{"type":597,"tag":621,"props":30005,"children":30008},{"className":30006,"code":30007,"language":603,"meta":591},[29933],"Cube : \n1    : Parent (Cube)\n2    : Parent (Cube), Disabled\n3    : Parent (2), Disabled\n4    : Parent (2), Disabled\n",[30009],{"type":597,"tag":629,"props":30010,"children":30011},{"__ignoreMap":591},[30012],{"type":603,"value":30007},{"type":597,"tag":606,"props":30014,"children":30015},{},[30016],{"type":603,"value":30017},"注意, 这时候你无法通过Cube (2) 连锁地禁用 Cube (3) 和 (4), 因为没有自动生成LinkedEntityGroup, 但你可以人工声明它.",{"type":597,"tag":606,"props":30019,"children":30020},{},[30021],{"type":597,"tag":1080,"props":30022,"children":30023},{},[30024],{"type":603,"value":30025},"prefab 实例化时的 Remapping 过程",{"type":597,"tag":606,"props":30027,"children":30028},{},[30029,30031,30036,30038,30045,30047,30051],{"type":603,"value":30030},"当在拥有LinkedEntityGroup的entity上调用Instantiate时, 会发生 ",{"type":597,"tag":1080,"props":30032,"children":30033},{},[30034],{"type":603,"value":30035},"entity remap",{"type":603,"value":30037}," 过程. (这里阅读更多内容: ",{"type":597,"tag":886,"props":30039,"children":30042},{"href":30040,"rel":30041},"https://link.zhihu.com/?target=https%3A//gametorrahod.com/entity-remapping/",[890],[30043],{"type":603,"value":30044},"https://gametorrahod.com/entity-remapping/",{"type":603,"value":30046},") 目前你只需要知道 convert 一个 prefab ",{"type":597,"tag":1080,"props":30048,"children":30049},{},[30050],{"type":603,"value":29322},{"type":603,"value":30052}," 让LinkedEntityGroup 能工作, 就行了.",{"type":597,"tag":606,"props":30054,"children":30055},{},[30056],{"type":597,"tag":1733,"props":30057,"children":30058},{},[30059],{"type":603,"value":30060},"(译注: entity id 在一个 world 当中是不可重复也不可被外部修改的, 当序列化存储 entity 时, 反序列化过程会因版本问题丢失掉 entity id 引用, 这一问题同样影响实例化过程, 而 entity remap 过程就为了解决这一问题而出现的)",{"type":597,"tag":606,"props":30062,"children":30063},{},[30064],{"type":603,"value":30065},"所以, \"烘焙\" Entity 值到 prefab entity 的 conversion 结果中是可行的, 当实例化时, 这些烘焙好的值又会\"活了过来\".",{"type":597,"tag":606,"props":30067,"children":30068},{},[30069],{"type":603,"value":30070},"在前例的情况中, 如果我添加了一个 conversion script 到 SpecialCube, 它的Convert 方法会在 CubeHead 被转换时调用, 该代码意图在于记住 Cube(3) 的 Entity:",{"type":597,"tag":606,"props":30072,"children":30073},{},[30074],{"type":597,"tag":719,"props":30075,"children":30076},{"alt":719,"src":29816},[],{"type":597,"tag":621,"props":30078,"children":30080},{"className":30079,"code":22950,"language":8105,"meta":591},[8107],[30081],{"type":597,"tag":629,"props":30082,"children":30083},{"__ignoreMap":591},[30084],{"type":603,"value":22950},{"type":597,"tag":606,"props":30086,"children":30087},{},[30088],{"type":597,"tag":719,"props":30089,"children":30091},{"alt":719,"src":30090},"/images/2020-10-19-game-object-conversion-and-subscene/v2-50abef20adb51226bd0af6bddba9e8bb_720w.jpg",[],{"type":597,"tag":606,"props":30093,"children":30094},{},[30095],{"type":603,"value":22968},{"type":597,"tag":606,"props":30097,"children":30098},{},[30099],{"type":603,"value":30100},"![img](data/svg+xml;utf8,)",{"type":597,"tag":606,"props":30102,"children":30103},{},[30104],{"type":603,"value":30105},"当你调用Instantiate时, 一旦它发现可以被 Remap 的情况(如LinkedEntityGroup) Remapping 就会发生. 因此在 conversion 把它变成 Prefab 之前, \"连接\" Entity 引用是非常有用的, 这样一旦你Instantiate 它, 里面包含的 Entity 关系就已经可用了.",{"type":597,"tag":606,"props":30107,"children":30108},{},[30109],{"type":603,"value":30110},"没有LinkedEntityGroup则 Remapping不会发生, 因为在那种情况下就没有同级对象需要 remapping Entity 的值了.",{"type":597,"tag":606,"props":30112,"children":30113},{},[30114],{"type":597,"tag":1080,"props":30115,"children":30116},{},[30117],{"type":603,"value":30118},"GameObjectExportGroup 是什么?",{"type":597,"tag":606,"props":30120,"children":30121},{},[30122,30124,30129],{"type":603,"value":30123},"前面 4 个我们都介绍了它们的作用, 来看看最后这一个. 前面介绍的过程你也许会发现不仅仅可以将 conversion 结果用作运行时, 也可以用来",{"type":597,"tag":1080,"props":30125,"children":30126},{},[30127],{"type":603,"value":30128},"导出",{"type":603,"value":30130},". 通常 export group 是不包含在conversion 流程中的, 仅当我们显式要求时才导出.",{"type":597,"tag":606,"props":30132,"children":30133},{},[30134],{"type":603,"value":30135},"如果你的 conversion system 运行在这里, 那么所有的 conversion 都已经完成, LinkedEntityGroup Prefab都已经准备就绪, 当然你不能在这时候继续 convert 了.",{"type":597,"tag":606,"props":30137,"children":30138},{},[30139],{"type":603,"value":30140},"目前究竟什么是\"导出(export)\"依然是个谜, 或许得等 Unity 团队写点我能看懂的文档. 目前你可以认为这个 Group 在你日常的 conversion 中用不太上. 而且猜想它一定和 Assetentity有某些关系.",{"type":597,"tag":621,"props":30142,"children":30145},{"className":30143,"code":30144,"language":8105,"meta":591},[8107],"// ??? \u003C- IDeclareReferencedPrefabs 调用.\nGameObjectDeclareReferencedObjectsGroup.Update()\n// ??? \u003C- discovery 阶段结束, 无法再声明更多 asset.\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update()\nGameObjectAfterConversionGroup.Update()\n// ??? \u003C- LinkedEntityGroup + Prefab 都已就绪.\nGameObjectExportGroup.Update()\n",[30146],{"type":597,"tag":629,"props":30147,"children":30148},{"__ignoreMap":591},[30149],{"type":603,"value":30144},{"type":597,"tag":606,"props":30151,"children":30152},{},[30153],{"type":597,"tag":1080,"props":30154,"children":30155},{},[30156],{"type":603,"value":30157},"mapping system 上的 DeclareDependency 是啥",{"type":597,"tag":606,"props":30159,"children":30160},{},[30161],{"type":603,"value":30162},"我们还漏掉了一个\"声明\". 但是我不清楚这是什么, 它看起来像是 live link 会用到的东西. (后文会解释 live link).",{"type":597,"tag":598,"props":30164,"children":30166},{"id":30165},"声明和使用-prefab-asset-的示例",[30167],{"type":603,"value":30168},"声明和使用 prefab asset 的示例",{"type":597,"tag":606,"props":30170,"children":30171},{},[30172],{"type":597,"tag":719,"props":30173,"children":30175},{"alt":719,"src":30174},"/images/2020-10-19-game-object-conversion-and-subscene/v2-88397d41a933c41fecc23cfdf0ca8e74_720w.jpg",[],{"type":597,"tag":606,"props":30177,"children":30178},{},[30179],{"type":603,"value":30180},"如果我 convert and destroy 上面这些 cubes 的 MeshFilter和MeshRenderer, 我会得到两个 chunk:",{"type":597,"tag":606,"props":30182,"children":30183},{},[30184],{"type":597,"tag":719,"props":30185,"children":30187},{"alt":719,"src":30186},"/images/2020-10-19-game-object-conversion-and-subscene/v2-7b1b82fa14a9c96763edcd0cc98fe34c_720w.jpg",[],{"type":597,"tag":606,"props":30189,"children":30190},{},[30191],{"type":597,"tag":719,"props":30192,"children":30194},{"alt":719,"src":30193},"/images/2020-10-19-game-object-conversion-and-subscene/v2-84ff4d8fe1120763c200837ec2c6e6fb_720w.jpg",[],{"type":597,"tag":606,"props":30196,"children":30197},{},[30198],{"type":603,"value":30199},"现在我将把它变成 prefab asset, 并从 scene 中删掉, 接着我会把该 prefab 转换为隐藏的 Prefab entity 以用于后面的 Instantiate.",{"type":597,"tag":606,"props":30201,"children":30202},{},[30203],{"type":603,"value":30204},"下面是我的计划: 做一个 SpawnHere 用于存储实例化位置 (\"tag\" 性质的MonoBehaviour).",{"type":597,"tag":606,"props":30206,"children":30207},{},[30208],{"type":597,"tag":719,"props":30209,"children":30211},{"alt":719,"src":30210},"/images/2020-10-19-game-object-conversion-and-subscene/v2-b92b5408db5a1d0c1b57c3bc876c1b63_720w.jpg",[],{"type":597,"tag":606,"props":30213,"children":30214},{},[30215],{"type":603,"value":30216},"不用担心上图中有3个GameObject声明了同一个 prefab, conversion system 知道如何处理重复情况, 下面是代码:",{"type":597,"tag":621,"props":30218,"children":30221},{"className":30219,"code":30220,"language":603,"meta":591},[29933],"using System.Collections.Generic;\nusing Unity.Entities;\nusing UnityEngine;\n\npublic class SpawnHere : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs\n{\n    public GameObject forDeclare;\n    \n    public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n    {\n        referencedPrefabs.Add(forDeclare);\n    }\n    \n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n    }\n}\n",[30222],{"type":597,"tag":629,"props":30223,"children":30224},{"__ignoreMap":591},[30225],{"type":603,"value":30220},{"type":597,"tag":606,"props":30227,"children":30228},{},[30229],{"type":603,"value":30230},"在 discovery 阶段 asset 的 primary entity 已经被创建了且包含了Prefab和LinkedEntityGroup, 能够正常用于实例化. (由于 Prefab 的存在, 虽然拥有 RenderMesh和LocalToWorld组件, 但 Cube entity 是对于查询隐藏的, 因此也没有在画面中显示)",{"type":597,"tag":606,"props":30232,"children":30233},{},[30234],{"type":597,"tag":719,"props":30235,"children":30237},{"alt":719,"src":30236},"/images/2020-10-19-game-object-conversion-and-subscene/v2-61b91e13ae93422ebf600817a3d04dd2_720w.jpg",[],{"type":597,"tag":606,"props":30239,"children":30240},{},[30241],{"type":597,"tag":719,"props":30242,"children":30244},{"alt":719,"src":30243},"/images/2020-10-19-game-object-conversion-and-subscene/v2-32ab362213045eb4e7f2b0e5668928d0_720w.jpg",[],{"type":597,"tag":606,"props":30246,"children":30247},{},[30248],{"type":603,"value":30249},"conversion 之后, 我就可以获取Prefab在 SpawnHere 所在的位置进行实例化了, 因为LocalToWorld或Translation很多 entity 都包含, 被销毁的SpawnHere 是无法被区分的.",{"type":597,"tag":606,"props":30251,"children":30252},{},[30253],{"type":597,"tag":719,"props":30254,"children":30256},{"alt":719,"src":30255},"/images/2020-10-19-game-object-conversion-and-subscene/v2-fcc91ab4bc4773a9cea287ca4ef89419_720w.jpg",[],{"type":597,"tag":606,"props":30258,"children":30259},{},[30260],{"type":603,"value":30261},"因此我们添加 SpawnHereEcs 当作 Tag 来使用:",{"type":597,"tag":621,"props":30263,"children":30266},{"className":30264,"code":30265,"language":8105,"meta":591},[8107],"using System.Collections.Generic;\nusing Unity.Entities;\nusing UnityEngine;\n\npublic struct SpawnHereEcs : IComponentData\n{\n}\n\npublic class SpawnHere : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs\n{\n    public GameObject forDeclare;\n    \n    public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n    {\n        referencedPrefabs.Add(forDeclare);\n    }\n    \n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponent\u003CSpawnHereEcs>(entity);\n    }\n}\n",[30267],{"type":597,"tag":629,"props":30268,"children":30269},{"__ignoreMap":591},[30270],{"type":603,"value":30265},{"type":597,"tag":606,"props":30272,"children":30273},{},[30274],{"type":603,"value":30275},"另外, 我们可以直接在 SpawnHereEcs 里面加上 prefab entity 的引用, 而获取该 entity 的方式就是前文提到的声明过程:",{"type":597,"tag":621,"props":30277,"children":30280},{"className":30278,"code":30279,"language":8105,"meta":591},[8107],"using System.Collections.Generic;\nusing Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Transforms;\nusing UnityEngine;\n\npublic struct SpawnHereEcs : IComponentData\n{\n    public Entity thatPrefabEntity;\n}\n\npublic class SpawnHere : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs\n{\n    public GameObject forDeclare;\n\n    public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n    {\n        referencedPrefabs.Add(forDeclare);\n    }\n\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        Entity prefabEntity = conversionSystem.GetPrimaryEntity(forDeclare);\n        dstManager.AddComponentData\u003CSpawnHereEcs>(entity, new SpawnHereEcs {thatPrefabEntity = prefabEntity});\n    }\n}\n",[30281],{"type":597,"tag":629,"props":30282,"children":30283},{"__ignoreMap":591},[30284],{"type":603,"value":30279},{"type":597,"tag":606,"props":30286,"children":30287},{},[30288],{"type":603,"value":30289},"然后我们的 system 将查询SpawnHereEcsentity 并在这些位置执行实例化, 之后再销毁SpawnHereEcs以避免重复实例化.",{"type":597,"tag":621,"props":30291,"children":30294},{"className":30292,"code":30293,"language":8105,"meta":591},[8107]," [UpdateInGroup(typeof(SimulationSystemGroup))]\npublic class SpawnSystem : JobComponentSystem\n{\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        Entities.ForEach(\n                (Entity e, in Translation t, in SpawnHereEcs she) =>\n                {\n                    Entity instantiated = EntityManager.Instantiate(she.thatPrefabEntity);\n                    //Set to the same translation.\n                    EntityManager.SetComponentData(instantiated, t);\n                    EntityManager.RemoveComponent\u003CSpawnHereEcs>(e);\n                })\n            .WithStructuralChanges().Run();\n        return default;\n    }\n}\n",[30295],{"type":597,"tag":629,"props":30296,"children":30297},{"__ignoreMap":591},[30298],{"type":603,"value":30293},{"type":597,"tag":606,"props":30300,"children":30301},{},[30302],{"type":603,"value":30303},"你可以按照 chunk 来批量RemoveComponent , 使用WithStoreEntityQueryInField 来导出 lambda 定义的 EntityQuery, 然后在 ForEach 之后使用 EntityManager.RemoveComponent 传入该EntityQuery.",{"type":597,"tag":606,"props":30305,"children":30306},{},[30307],{"type":603,"value":30308},"以下是我们的结果:",{"type":597,"tag":606,"props":30310,"children":30311},{},[30312],{"type":597,"tag":719,"props":30313,"children":30315},{"alt":719,"src":30314},"/images/2020-10-19-game-object-conversion-and-subscene/v2-a9888335c0aec5a24d809d2d49fd372c_720w.jpg",[],{"type":597,"tag":606,"props":30317,"children":30318},{},[30319],{"type":597,"tag":719,"props":30320,"children":30322},{"alt":719,"src":30321},"/images/2020-10-19-game-object-conversion-and-subscene/v2-d2fe910f9e5023e20a942675396ee977_720w.jpg",[],{"type":597,"tag":606,"props":30324,"children":30325},{},[30326],{"type":603,"value":30327},"和Prefab 一样我们实例化的结果也拥有LinkedEntityGroup, 你还可以注意到 debugger 现在支持 select 按钮来选中 entity.",{"type":597,"tag":606,"props":30329,"children":30330},{},[30331,30333,30338],{"type":603,"value":30332},"那么有没有可能在 conversion 阶段就能预先实例化呢? 这样我们就无需 SpawnHereEcstag 了, 因为我们知道TransformConversion完成的确切时间, 所以我们已经可以利用其 primary entity 来获取位置. 然后利用 dstManager来完成实例化. 看起来就像是SpawnHere MonoBehaviour",{"type":597,"tag":1080,"props":30334,"children":30335},{},[30336],{"type":603,"value":30337},"直接转化",{"type":603,"value":30339},"成了 prefab 实例, 而不是在运行时分开来完成这一切.",{"type":597,"tag":606,"props":30341,"children":30342},{},[30343],{"type":603,"value":30344},"你可以思考一下为什么这种方法无法正确工作然后再继续往下看",{"type":597,"tag":621,"props":30346,"children":30349},{"className":30347,"code":30348,"language":8105,"meta":591},[8107],"using System.Collections.Generic;\nusing Unity.Entities;\nusing Unity.Transforms;\nusing UnityEngine;\n\npublic class SpawnHere : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs\n{\n    public GameObject forDeclare;\n\n    public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n    {\n        referencedPrefabs.Add(forDeclare);\n    }\n\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        Entity prefabEntity = conversionSystem.GetPrimaryEntity(forDeclare);\n        \n        var spawnPosition = dstManager.GetComponentData\u003CTranslation>(entity);\n\n        Entity instantiated = dstManager.Instantiate(prefabEntity);\n        dstManager.SetComponentData\u003CTranslation>(instantiated, spawnPosition);\n    }\n}\n",[30350],{"type":597,"tag":629,"props":30351,"children":30352},{"__ignoreMap":591},[30353],{"type":603,"value":30348},{"type":597,"tag":606,"props":30355,"children":30356},{},[30357],{"type":597,"tag":719,"props":30358,"children":30360},{"alt":719,"src":30359},"/images/2020-10-19-game-object-conversion-and-subscene/v2-aa979cae836c032b9353451a6c1b3f31_720w.jpg",[],{"type":597,"tag":606,"props":30362,"children":30363},{},[30364,30369],{"type":597,"tag":1080,"props":30365,"children":30366},{},[30367],{"type":603,"value":30368},"几乎",{"type":603,"value":30370},"能够工作, 但是结果是只有三个cubes. 从图中可以知道, GetPrimaryEntity显然是能够正常工作的, 因为已经度过了 discovery 阶段. GetComponentData 也能正常工作, 因为Transform会在 GameObjectBeforeConversionGroup 阶段转换完成.",{"type":597,"tag":606,"props":30372,"children":30373},{},[30374],{"type":603,"value":30375},"但是回忆一下LinkedEntityGroup和Prefab 所涉及的声明过程:",{"type":597,"tag":621,"props":30377,"children":30380},{"className":30378,"code":30379,"language":8105,"meta":591},[8107],"// ??? \u003C- IDeclareReferencedPrefabs 调用.\nGameObjectDeclareReferencedObjectsGroup.Update()\n// ??? \u003C- discovery 阶段结束, 无法再声明更多 asset.\nGameObjectBeforeConversionGroup.Update()\nGameObjectConversionGroup.Update() \u003C-- 你的 Convert 方法在这时运行\nGameObjectAfterConversionGroup.Update()\n// ??? \u003C- LinkedEntityGroup + Prefab 都已就绪.\nGameObjectExportGroup.Update()\n",[30381],{"type":597,"tag":629,"props":30382,"children":30383},{"__ignoreMap":591},[30384],{"type":603,"value":30379},{"type":597,"tag":606,"props":30386,"children":30387},{},[30388],{"type":603,"value":30389},"LinkedEntityGroup和Prefab 并未就绪! 缺乏LinkedEntityGroup导致我们最终的结果里仅仅实例化了最顶层的那个 cube. 因此在conversion过程中你无法这样使用刚刚声明的 Prefab. 如果你不清楚 conversion 流程, 很难知道为什么会有这样的结果.",{"type":597,"tag":598,"props":30391,"children":30393},{"id":30392},"generateauthoringcomponent",[30394],{"type":603,"value":4782},{"type":597,"tag":606,"props":30396,"children":30397},{},[30398,30400],{"type":603,"value":30399},"SpawnHere->SpawnHereEcs 这种模式要求你有一个 MonoBehaviourcomponent 在 inspector 中暴露一些字段, 然后在 conversion 后转换为等价的数据. 我们把这个MonoBehaviour称为 ",{"type":597,"tag":1080,"props":30401,"children":30402},{},[30403],{"type":603,"value":30404},"authoring component.",{"type":597,"tag":606,"props":30406,"children":30407},{},[30408],{"type":603,"value":30409},"我们当然可以创建GameObjectConversionSystem来完成相同的工作. 但是使用IConvertGameObjectToEntity无疑是更精简的方式.",{"type":597,"tag":621,"props":30411,"children":30414},{"className":30412,"code":30413,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing UnityEngine;\n\n//The real ECS\npublic struct MyData : IComponentData\n{\n    public float data1;\n    public int data2;\n    public bool data3;\n}\n\n//For authoring\npublic class MyDataOnScene : MonoBehaviour, IConvertGameObjectToEntity\n{\n    // Ugly duplicated code\n    public float data1;\n    public int data2;\n    public bool data3;\n    \n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentData\u003CMyData>(entity, new MyData\n        {\n            // Tedious work\n            data1 = data1,\n            data2 = data2,\n            data3 = data3,\n        });\n    }\n}\n",[30415],{"type":597,"tag":629,"props":30416,"children":30417},{"__ignoreMap":591},[30418],{"type":603,"value":30413},{"type":597,"tag":606,"props":30420,"children":30421},{},[30422],{"type":597,"tag":719,"props":30423,"children":30425},{"alt":719,"src":30424},"/images/2020-10-19-game-object-conversion-and-subscene/v2-35431ad3689e54c311b7c1256e5cbe7f_720w.jpg",[],{"type":597,"tag":606,"props":30427,"children":30428},{},[30429],{"type":597,"tag":719,"props":30430,"children":30432},{"alt":719,"src":30431},"/images/2020-10-19-game-object-conversion-and-subscene/v2-4a05be4b1b63bd7fc675c8a697d36565_720w.jpg",[],{"type":597,"tag":606,"props":30434,"children":30435},{},[30436],{"type":603,"value":30437},"更棒的是, ECS 还有 IL 黑魔法来帮助你完成这个过程:",{"type":597,"tag":621,"props":30439,"children":30442},{"className":30440,"code":30441,"language":8105,"meta":591},[8107],"using Unity.Entities;\n\n[GenerateAuthoringComponent]\npublic struct MyData : IComponentData\n{\n    public float data1;\n    public int data2;\n    public bool data3;\n}\n",[30443],{"type":597,"tag":629,"props":30444,"children":30445},{"__ignoreMap":591},[30446],{"type":603,"value":30441},{"type":597,"tag":606,"props":30448,"children":30449},{},[30450],{"type":597,"tag":719,"props":30451,"children":30453},{"alt":719,"src":30452},"/images/2020-10-19-game-object-conversion-and-subscene/v2-29e1525831cf721dcee0618eff79b2ec_720w.jpg",[],{"type":597,"tag":606,"props":30455,"children":30456},{},[30457],{"type":603,"value":30458},"注意我们这里并没有定义 MonoBehaviour, 我们自动获取到了名为\"My Data Authoring\" 的组件, 甚至 \"My Data\" 也可以作为相同结果来添加. 这部分生成代码会和我们手写有类似 Convert 过程, 由于你无法查看生成的代码是什么, 这基本相当于魔法.",{"type":597,"tag":606,"props":30460,"children":30461},{},[30462],{"type":603,"value":30463},"目前要施放该魔法, ECS 字段必须定义为 public, 下面这样的代码并无法按你所设想的那样工作:",{"type":597,"tag":621,"props":30465,"children":30468},{"className":30466,"code":30467,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing UnityEngine;\n\n[GenerateAuthoringComponent]\npublic struct MyData : IComponentData\n{\n    [SerializeField] internal float data1;\n    [SerializeField] public int data2;\n    [SerializeField] public bool data3;\n}\n",[30469],{"type":597,"tag":629,"props":30470,"children":30471},{"__ignoreMap":591},[30472],{"type":603,"value":30467},{"type":597,"tag":606,"props":30474,"children":30475},{},[30476],{"type":597,"tag":719,"props":30477,"children":30479},{"alt":719,"src":30478},"/images/2020-10-19-game-object-conversion-and-subscene/v2-babbcac3eb118386ffd7120ee87295d2_720w.jpg",[],{"type":597,"tag":606,"props":30481,"children":30482},{},[30483,30485],{"type":603,"value":30484},"还有一个小技巧是可以生成 \"声明 prefab asset\" 模式功能的代码 (前面SpawnHereEcs的例子), ",{"type":597,"tag":1080,"props":30486,"children":30487},{},[30488],{"type":603,"value":30489},"仅需定义一个 Entity字段即可.",{"type":597,"tag":621,"props":30491,"children":30494},{"className":30492,"code":30493,"language":8105,"meta":591},[8107],"using Unity.Entities;\n\n[GenerateAuthoringComponent]\npublic struct MyData : IComponentData\n{\n    public Entity magic;\n}\n",[30495],{"type":597,"tag":629,"props":30496,"children":30497},{"__ignoreMap":591},[30498],{"type":603,"value":30493},{"type":597,"tag":606,"props":30500,"children":30501},{},[30502],{"type":597,"tag":719,"props":30503,"children":30505},{"alt":719,"src":30504},"/images/2020-10-19-game-object-conversion-and-subscene/v2-e3e22ca2eab52093ca323900d9d4ddd7_720w.jpg",[],{"type":597,"tag":606,"props":30507,"children":30508},{},[30509],{"type":603,"value":30510},"以上和以下代码是完全等同的",{"type":597,"tag":621,"props":30512,"children":30515},{"className":30513,"code":30514,"language":8105,"meta":591},[8107],"using System.Collections.Generic;\nusing Unity.Entities;\nusing UnityEngine;\n\n//[GenerateAuthoringComponent]\npublic struct MyData : IComponentData\n{\n    public Entity magic;\n}\n\npublic class MyDataAuthoring : MonoBehaviour, IDeclareReferencedPrefabs, IConvertGameObjectToEntity\n{\n    public GameObject magic;\n    \n    public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n    {\n        referencedPrefabs.Add(magic);\n    }\n\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        Entity primaryEntityOfDeclaredPrefab = conversionSystem.GetPrimaryEntity(magic);\n        dstManager.AddComponentData\u003CMyData>(entity, new MyData\n        {\n            magic = primaryEntityOfDeclaredPrefab\n        });\n    }\n}\n",[30516],{"type":597,"tag":629,"props":30517,"children":30518},{"__ignoreMap":591},[30519],{"type":603,"value":30514},{"type":597,"tag":606,"props":30521,"children":30522},{},[30523],{"type":603,"value":30524},"当然, 你可以正常混搭Entity或float字段在一起.",{"type":597,"tag":598,"props":30526,"children":30528},{"id":30527},"混用converttoentity的-destroy-和-inject-模式",[30529],{"type":603,"value":30530},"混用ConvertToEntity的 destroy 和 inject 模式",{"type":597,"tag":606,"props":30532,"children":30533},{},[30534],{"type":603,"value":30535},"inject 模式会产生太多的 component objectes, 而且也不能访问整个层级树. 同样的, destroy 模式也不能清晰完整地转换整个层级到 ECS 中去. 你可能会想要介于二者之间部分地\"inject\". \"stop\" 组件并没有满足需求 (因为你并不是要跳过转换).",{"type":597,"tag":606,"props":30537,"children":30538},{},[30539],{"type":603,"value":30540},"举个例子, 如果我用Transform,MeshFilter, 和MeshRenderer建造一个飞船, ConvertToEntity 在 destroy 模式下会被转换成LocalToWorld+RenderMesh",{"type":597,"tag":606,"props":30542,"children":30543},{},[30544],{"type":597,"tag":719,"props":30545,"children":30547},{"alt":719,"src":30546},"/images/2020-10-19-game-object-conversion-and-subscene/v2-64c6e9c8dcf9a4cbd9b6565c3308d9cf_720w.jpg",[],{"type":597,"tag":606,"props":30549,"children":30550},{},[30551],{"type":597,"tag":719,"props":30552,"children":30554},{"alt":719,"src":30553},"/images/2020-10-19-game-object-conversion-and-subscene/v2-c65c039ba549ed6676f01af4d00dd49c_720w.jpg",[],{"type":597,"tag":606,"props":30556,"children":30557},{},[30558],{"type":603,"value":30559},"之前我们的 bouncing system 对 Cube和 Translation有效, 如果添加Cube到飞船的根对象上, 应该也能工作. 当然我们可以继续使用魔法生成代码:",{"type":597,"tag":621,"props":30561,"children":30564},{"className":30562,"code":30563,"language":8105,"meta":591},[8107]," using Unity.Entities;\n\n[GenerateAuthoringComponent]\npublic struct Cube : IComponentData\n{\n}\n",[30565],{"type":597,"tag":629,"props":30566,"children":30567},{"__ignoreMap":591},[30568],{"type":603,"value":30563},{"type":597,"tag":606,"props":30570,"children":30571},{},[30572],{"type":597,"tag":719,"props":30573,"children":30575},{"alt":719,"src":30574},"/images/2020-10-19-game-object-conversion-and-subscene/v2-ead555ad6345028ebcfebc0546bbb150_b.jpg",[],{"type":597,"tag":606,"props":30577,"children":30578},{},[30579],{"type":603,"value":30580},"如果我们在排气孔位置增加一个粒子效果对象, 我想要的结果粒子随着飞船能上下弹跳:",{"type":597,"tag":606,"props":30582,"children":30583},{},[30584],{"type":597,"tag":719,"props":30585,"children":30587},{"alt":719,"src":30586},"/images/2020-10-19-game-object-conversion-and-subscene/v2-cc2adc78e27b72b13f67732d1cbab225_720w.jpg",[],{"type":597,"tag":606,"props":30589,"children":30590},{},[30591],{"type":603,"value":30592},"destroy 模式下, 当 ParticleSystem 这个 component object 进入 conversion world 后, 最终是会被销毁的.",{"type":597,"tag":606,"props":30594,"children":30595},{},[30596],{"type":603,"value":30597},"如果我添加 ConvertToEntity (Stop) 给它, 那么该对象会变成完全和 ECS 无关的东西.",{"type":597,"tag":606,"props":30599,"children":30600},{},[30601],{"type":603,"value":30602},"那么如果在 destroy 模式里面的子对象上添加 inject 模式呢? 这样做我确实会得到一个包含 ParticleSystem的 Entity . 但它是否和 destroy模式转换的飞船能关联起来呢?",{"type":597,"tag":606,"props":30604,"children":30605},{},[30606],{"type":597,"tag":719,"props":30607,"children":30609},{"alt":719,"src":30608},"/images/2020-10-19-game-object-conversion-and-subscene/v2-3c54d97e347fd5a0a340eba132b883bb_720w.jpg",[],{"type":597,"tag":606,"props":30611,"children":30612},{},[30613],{"type":603,"value":30614},"结果并不如我们所期望那样:",{"type":597,"tag":606,"props":30616,"children":30617},{},[30618],{"type":597,"tag":719,"props":30619,"children":30621},{"alt":719,"src":30620},"/images/2020-10-19-game-object-conversion-and-subscene/v2-291facdfb1aa6949c491128d172ea9ef_b.jpg",[],{"type":597,"tag":606,"props":30623,"children":30624},{},[30625],{"type":603,"value":30626},"但从 Entity Debugger 中我们可以看到, 这个对象确实是有destroy 模式下转换后的Parent和LocalToParent , 同时也有inject 模式下添加的ParticleSystem这个 component object. 你现在已经实现混用两种模式了!",{"type":597,"tag":606,"props":30628,"children":30629},{},[30630],{"type":597,"tag":719,"props":30631,"children":30633},{"alt":719,"src":30632},"/images/2020-10-19-game-object-conversion-and-subscene/v2-5e0a38c25b41d2feb69bbfcff52db36c_720w.jpg",[],{"type":597,"tag":606,"props":30635,"children":30636},{},[30637],{"type":603,"value":30638},"就我们目前所知, Parent会帮助我们计算最终的 LocalToWorld , 但是粒子没有上下弹跳是因为没有什么其他系统在使用它的LocalToWorld, 所以我们可以将它的值复制回原Transform 组件, 这可以通过copy transform to game object proxy 组件来实现, 这个组件同时也需要你添加 GameObjectEntity :",{"type":597,"tag":606,"props":30640,"children":30641},{},[30642],{"type":597,"tag":719,"props":30643,"children":30645},{"alt":719,"src":30644},"/images/2020-10-19-game-object-conversion-and-subscene/v2-a9447ea8f2906a1127dd652ceb9a313f_b.jpg",[],{"type":597,"tag":606,"props":30647,"children":30648},{},[30649,30651,30656],{"type":603,"value":30650},"注意如果飞船以 prefab asset 形式被实例化, 那么结果将会像仅使用了 destroy 模式, 也即这里的 ",{"type":597,"tag":1080,"props":30652,"children":30653},{},[30654],{"type":603,"value":30655},"particle system 会缺失",{"type":603,"value":9674},{"type":597,"tag":598,"props":30658,"children":30660},{"id":30659},"companion-game-object",[30661],{"type":603,"value":30662},"Companion Game Object",{"type":597,"tag":606,"props":30664,"children":30665},{},[30666],{"type":603,"value":30667},"前文所述的方案听起来像是 hack. Particle System 依然存在于 Hierachy 中, 像是它被\"胶粘\"在被转换后的 Entity 上进行移动.",{"type":597,"tag":606,"props":30669,"children":30670},{},[30671,30673,30678],{"type":603,"value":30672},"Companion game object 是一种更加\"干净\"的混合转换方式, 它会创建一个新的 game object 来**\"伴随\"(companion)",{"type":597,"tag":1080,"props":30674,"children":30675},{},[30676],{"type":603,"value":30677},"被转换的数据, 并用它来选择你想保留的组件. 这让它",{"type":603,"value":30679},"看起来像**是被完美 conversion 了.",{"type":597,"tag":606,"props":30681,"children":30682},{},[30683],{"type":603,"value":30684},"我们使用 mapping system 来实现该模式. 如下代码所示, 我没有增加太多非 ECS 内容, 只不过修改了一下转换相关的代码:",{"type":597,"tag":621,"props":30686,"children":30689},{"className":30687,"code":30688,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing UnityEngine;\n\npublic class Ship : MonoBehaviour, IConvertGameObjectToEntity\n{\n    public ParticleSystem particleCompanion;\n    public ParticleSystemRenderer rendererCompanion;\n    public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        conversionSystem.AddHybridComponent(particleCompanion);\n        conversionSystem.AddHybridComponent(rendererCompanion);\n    }\n}\n",[30690],{"type":597,"tag":629,"props":30691,"children":30692},{"__ignoreMap":591},[30693],{"type":603,"value":30688},{"type":597,"tag":606,"props":30695,"children":30696},{},[30697,30699,30704],{"type":603,"value":30698},"虽然这模式的名称叫 companion game object, 但你需要配置的其实是",{"type":597,"tag":1080,"props":30700,"children":30701},{},[30702],{"type":603,"value":30703},"components.",{"type":603,"value":30705}," AddHybridComponent 调用不仅指定了哪个GameObject应该\"伴随\", 同时也指定哪些组件会被保留.(primary entity 是按照组件来识别的). 因此我定义了组件的 public 字段而不是 GameObject字段.",{"type":597,"tag":606,"props":30707,"children":30708},{},[30709],{"type":603,"value":30710},"在下面这个 ParticleSystem 的例子里, 还隐含着一个 ParticleSystemRenderer, 如果缺失了 renderer, 那么最终的 companion game object 里就只有ParticleSystem 从而导致不会渲染结果. (但是 CPU 依然会运行粒子模拟)",{"type":597,"tag":606,"props":30712,"children":30713},{},[30714],{"type":597,"tag":719,"props":30715,"children":30717},{"alt":719,"src":30716},"/images/2020-10-19-game-object-conversion-and-subscene/v2-7fdcefe0ddf7884e12d264419ca52a92_720w.jpg",[],{"type":597,"tag":606,"props":30719,"children":30720},{},[30721],{"type":603,"value":30722},"可以看到, 之前那些 Hack 的内容现在全都不在了! (去掉了ConvertToEntity inject 模式, 去掉了 copy proxy, 去掉了 GameObjectEntity), 现在conversion 完全正常工作!",{"type":597,"tag":606,"props":30724,"children":30725},{},[30726],{"type":597,"tag":719,"props":30727,"children":30729},{"alt":719,"src":30728},"/images/2020-10-19-game-object-conversion-and-subscene/v2-9654b7da425abca92137e2cd44ff6e70_b.jpg",[],{"type":597,"tag":606,"props":30731,"children":30732},{},[30733],{"type":603,"value":30734},"可以看到现在 Hierarchy 窗口里没有 Particle System 了, 但在 Game view 窗口却正常显示着, 所以它是哪里来的?",{"type":597,"tag":606,"props":30736,"children":30737},{},[30738],{"type":603,"value":30739},"先来看看它对应的 primary entity 的 conversion 结果:",{"type":597,"tag":606,"props":30741,"children":30742},{},[30743],{"type":597,"tag":719,"props":30744,"children":30746},{"alt":719,"src":30745},"/images/2020-10-19-game-object-conversion-and-subscene/v2-2bc082bdb4447fc2ed9e59a18799f81f_720w.jpg",[],{"type":597,"tag":606,"props":30748,"children":30749},{},[30750],{"type":603,"value":30751},"调用AddHybridComponent方法让 companion 相关的组件自动添加到了GameObject的 primary entity (也即 Particle System entity) 上, 同时也加上了指定的ParticleSystem和ParticleSystemRenderer.",{"type":597,"tag":606,"props":30753,"children":30754},{},[30755],{"type":603,"value":30756},"其实这些 component object 仍然关联到 scene 中的对象, 只不过这些对象使用了HideFlags.HideInHierarchy 来隐藏自己. 而CompanionLink组件则指向了这个隐藏对象, 接下来 CompanionGameObjectUpdateTransformSystem 则负责将 transform 复制到 game object 当中.",{"type":597,"tag":606,"props":30758,"children":30759},{},[30760],{"type":603,"value":30761},"和我们上面的 hack 几乎是一致的过程, 但是更加简洁和官方, 和 conversion system 的衔接也更加无缝.",{"type":597,"tag":606,"props":30763,"children":30764},{},[30765],{"type":597,"tag":1080,"props":30766,"children":30767},{},[30768],{"type":603,"value":30769},"同时也兼容 prefab !",{"type":597,"tag":606,"props":30771,"children":30772},{},[30773,30775],{"type":603,"value":30774},"Companion 的另一个好处是, 它完全支持 Prefab 转换流程, 并能",{"type":597,"tag":1080,"props":30776,"children":30777},{},[30778],{"type":603,"value":30779},"正常地实例化.",{"type":597,"tag":606,"props":30781,"children":30782},{},[30783],{"type":603,"value":30784},"这意味着每次实例化时, 从 MeshFilter和MeshRenderer 中得到RenderMesh会被高效地处理, 而遇到 CompanionLink指定的 component object 则创建有HideFlag的 game object. 并关联好相应的 Entity",{"type":597,"tag":606,"props":30786,"children":30787},{},[30788],{"type":603,"value":30789},"基本上, 这感觉就和 EntityManager.Instantiate 一样, 完美地实现了 ECS 版本的ParticleSystem.",{"type":597,"tag":606,"props":30791,"children":30792},{},[30793],{"type":603,"value":30794},"具体来说, 我们将飞船先变成一个 prefab asset. 然后在 Ship 组件正常引用子对象里的组件即可.",{"type":597,"tag":606,"props":30796,"children":30797},{},[30798],{"type":597,"tag":719,"props":30799,"children":30801},{"alt":719,"src":30800},"/images/2020-10-19-game-object-conversion-and-subscene/v2-393b0c8128a558d1a8cf9825bb89a609_720w.jpg",[],{"type":597,"tag":606,"props":30803,"children":30804},{},[30805],{"type":603,"value":30806},"我继续使用前面说到的魔法:",{"type":597,"tag":621,"props":30808,"children":30811},{"className":30809,"code":30810,"language":8105,"meta":591},[8107],"using Unity.Entities;\n\n[GenerateAuthoringComponent]\npublic struct ShipAndCo : IComponentData\n{\n    public Entity shipPrefab;\n}\n",[30812],{"type":597,"tag":629,"props":30813,"children":30814},{"__ignoreMap":591},[30815],{"type":603,"value":30810},{"type":597,"tag":606,"props":30817,"children":30818},{},[30819],{"type":597,"tag":719,"props":30820,"children":30822},{"alt":719,"src":30821},"/images/2020-10-19-game-object-conversion-and-subscene/v2-c25ff43a9da4a6adce9ec3ae6f5d6d89_720w.jpg",[],{"type":597,"tag":606,"props":30824,"children":30825},{},[30826],{"type":603,"value":30827},"进入 play mode 时, 我已经在 ShipAndCo上拥有一个 就绪的Prefabentity了, 由于我知道ShipAndCo是一个 singleton, 我们用如下系统来玩一玩: 每次我按下 A 键, 在0~10之间的随机位置上实例化该 Entity.",{"type":597,"tag":621,"props":30829,"children":30832},{"className":30830,"code":30831,"language":8105,"meta":591},[8107],"using Unity.Entities;\nusing Unity.Jobs;\nusing Unity.Transforms;\nusing UnityEngine;\nusing Random = Unity.Mathematics.Random;\n\n[UpdateInGroup(typeof(SimulationSystemGroup))]\npublic class ShipAndCoSpawnerSystem : JobComponentSystem\n{\n    Random randomizer;\n\n    protected override void OnCreate()\n    {\n        base.OnCreate();\n        RequireSingletonForUpdate\u003CShipAndCo>();\n        randomizer = new Random();\n        randomizer.InitState(seed: 12345);\n    }\n\n    protected override JobHandle OnUpdate(JobHandle inputDeps)\n    {\n        if (Input.GetKeyDown(KeyCode.A))\n        {\n            var sac = GetSingleton\u003CShipAndCo>();\n            Entity prefabEntity = sac.shipPrefab;\n            Entity instantiated = EntityManager.Instantiate(prefabEntity);\n            EntityManager.SetComponentData\u003CTranslation>(instantiated, new Translation\n            {\n                Value = randomizer.NextFloat3() * 10\n            });\n        }\n\n        return default;\n    }\n}\n",[30833],{"type":597,"tag":629,"props":30834,"children":30835},{"__ignoreMap":591},[30836],{"type":603,"value":30831},{"type":597,"tag":606,"props":30838,"children":30839},{},[30840],{"type":603,"value":30841},"我得到了一个正常支持 Entity 实例化的 companion particle systems, 很酷吧:",{"type":597,"tag":606,"props":30843,"children":30844},{},[30845],{"type":597,"tag":719,"props":30846,"children":30848},{"alt":719,"src":30847},"/images/2020-10-19-game-object-conversion-and-subscene/v2-97834b5340ef86b4326a2390efef9da6_b.jpg",[],{"type":597,"tag":606,"props":30850,"children":30851},{},[30852],{"type":603,"value":30853},"截止到这里, companion game object 可以说是 conversion 过程的最后一块拼图了.",{"type":597,"tag":598,"props":30855,"children":30857},{"id":30856},"gameobjectconversionutility",[30858],{"type":603,"value":30859},"GameObjectConversionUtility",{"type":597,"tag":606,"props":30861,"children":30862},{},[30863],{"type":603,"value":30864},"如果前述的 convert and destroy 或者 convert and inject 规则你都不喜欢, 你完全可以使用下述static方法自行 convert.",{"type":597,"tag":621,"props":30866,"children":30869},{"className":30867,"code":30868,"language":8105,"meta":591},[8107],"public static Entity ConvertGameObjectHierarchy(GameObject root, GameObjectConversionSettings settings)\n",[30870],{"type":597,"tag":629,"props":30871,"children":30872},{"__ignoreMap":591},[30873],{"type":603,"value":30868},{"type":597,"tag":606,"props":30875,"children":30876},{},[30877,30879,30884],{"type":603,"value":30878},"但你得先拿到 GameObject才行. ConvertToEntity之所以方便是因为你添加时就选择了该对象, 另外还有它的子层级(根据模式的不同). 而现在你只能传入",{"type":597,"tag":1080,"props":30880,"children":30881},{},[30882],{"type":603,"value":30883},"一个",{"type":603,"value":30885},"GameObject 参数到这个方法中.",{"type":597,"tag":606,"props":30887,"children":30888},{},[30889],{"type":603,"value":30890},"root 自然是你想要 convert 的对象, 方法名字有 \"hierarchy\", 它知道如何处理这些情况:",{"type":597,"tag":1321,"props":30892,"children":30893},{},[30894,30899],{"type":597,"tag":807,"props":30895,"children":30896},{},[30897],{"type":603,"value":30898},"如果root 是 prefab asset, 那么你得到的结果和前述在 conversion 中声明 prefab 的结果一样. 如果你不喜欢声明和创建 prefab entity 绑定在一起, 那么你可以一个一个来.",{"type":597,"tag":807,"props":30900,"children":30901},{},[30902],{"type":603,"value":30903},"如果root 是 scene 中的对象, 它会和ConvertToEntity的工作模式类似, 要注意这个方法同时也会执行LinkedEntityGroup过程.",{"type":597,"tag":606,"props":30905,"children":30906},{},[30907],{"type":603,"value":30908},"settings可以通过 destination world 来获得:",{"type":597,"tag":621,"props":30910,"children":30913},{"className":30911,"code":30912,"language":8105,"meta":591},[8107]," public static GameObjectConversionSettings FromWorld(World destinationWorld, BlobAssetStore blobAssetStore)\n",[30914],{"type":597,"tag":629,"props":30915,"children":30916},{"__ignoreMap":591},[30917],{"type":603,"value":30912},{"type":597,"tag":606,"props":30919,"children":30920},{},[30921],{"type":603,"value":30922},"如非特殊, Destination world 通常是 World.DefaultGameObjectInjectionWorld. ConvertToEntity就会在内部默认使用该值.",{"type":597,"tag":606,"props":30924,"children":30925},{},[30926],{"type":603,"value":30927},"BlobAssetStore我猜测是当你需要产生某些有BlobAssetReference字段的component时需要用到的东西, 目前你可以传入 null 或者 new BlobAssetStore , 但是记得要Dispose.",{"type":597,"tag":606,"props":30929,"children":30930},{},[30931],{"type":597,"tag":1080,"props":30932,"children":30933},{},[30934],{"type":603,"value":30935},"GameObjectConversionUtility 其他有趣的方法",{"type":597,"tag":621,"props":30937,"children":30940},{"className":30938,"code":30939,"language":8105,"meta":591},[8107],"public static void ConvertScene(Scene scene, GameObjectConversionSettings settings)\n",[30941],{"type":597,"tag":629,"props":30942,"children":30943},{"__ignoreMap":591},[30944],{"type":603,"value":30939},{"type":597,"tag":606,"props":30946,"children":30947},{},[30948],{"type":603,"value":30949},"和ConvertGameObjectHierarchy几乎一样, 只不过针对的是 scene 中所有的东西. 它不会添加LinkedEntityGroupbuffer, 除非scene中有被禁用的对象. (禁用行为参考前文).",{"type":597,"tag":606,"props":30951,"children":30952},{},[30953],{"type":603,"value":30954},"这个方法比给每个 scene 对象都加上ConvertToEntity 要高级一些, 后者你无法得到disabled entity 作为结果. 有 ConvertToEntity且被禁用的GameObject 的 Awake 方法不会被调用, 也就完全不会有 conversion 过程.",{"type":597,"tag":621,"props":30956,"children":30959},{"className":30957,"code":30958,"language":8105,"meta":591},[8107],"public static World ConvertIncrementalInitialize(Scene scene, GameObjectConversionSettings settings)\npublic static void ConvertIncremental(World conversionWorld, IEnumerable\u003CGameObject> gameObjects, ConversionFlags flags)\n",[30960],{"type":597,"tag":629,"props":30961,"children":30962},{"__ignoreMap":591},[30963],{"type":603,"value":30958},{"type":597,"tag":606,"props":30965,"children":30966},{},[30967],{"type":603,"value":30968},"这两个方法是什么? 第一个返回 World, 看起来像是 scene 中的内容可能会变化, 你可以用还未销毁的 conversion world 增量地 convert scene中新增的内容.",{"type":597,"tag":606,"props":30970,"children":30971},{},[30972],{"type":603,"value":30973},"这两个方法在 live link 系统中有被用到, 后文会解释.",{"type":597,"tag":598,"props":30975,"children":30977},{"id":30976},"subscene",[30978],{"type":597,"tag":1080,"props":30979,"children":30980},{},[30981],{"type":603,"value":30982},"Subscene",{"type":597,"tag":606,"props":30984,"children":30985},{},[30986],{"type":603,"value":30987},"因为 subscene 还处于开发中, 用法随时可能改变, 所以我计划先写到这里, 不过我会大致解释一下, 然后等 entities package 正式发布.",{"type":597,"tag":606,"props":30989,"children":30990},{},[30991],{"type":603,"value":30992},"现在你已经可以使用 GameObject 来编辑游戏, 在 ECS 的环境里运行了, 那么还缺点啥?",{"type":597,"tag":1321,"props":30994,"children":30995},{},[30996,31008,31013,31025,31030],{"type":597,"tag":807,"props":30997,"children":30998},{},[30999,31001,31006],{"type":603,"value":31000},"你可能想要在",{"type":597,"tag":1080,"props":31002,"children":31003},{},[31004],{"type":603,"value":31005},"编辑模式",{"type":603,"value":31007},"时查看 conversion 的结果, 无论你多么小心地设计 conversion 过程都有可能出错.",{"type":597,"tag":807,"props":31009,"children":31010},{},[31011],{"type":603,"value":31012},"你太懒了, 不想复制粘贴ConvertToEntity, 或者使用 utility 里的 Scene 方法.",{"type":597,"tag":807,"props":31014,"children":31015},{},[31016,31018,31023],{"type":603,"value":31017},"你想在发布游戏时, 游戏能预先转换好(",{"type":597,"tag":1080,"props":31019,"children":31020},{},[31021],{"type":603,"value":31022},"pre-converted",{"type":603,"value":31024},"). 当加载 scene 时你就可以不用再重新运行转换过程, 而是加载 chunk 内存直接使用.",{"type":597,"tag":807,"props":31026,"children":31027},{},[31028],{"type":603,"value":31029},"你懒得点\"序列化 ECS 内存\" 按钮来保存play mode下的内存供运行时使用, 更懒得添加内存加载的代码.",{"type":597,"tag":807,"props":31031,"children":31032},{},[31033],{"type":603,"value":31034},"在 play mode 时, 你不想让这些 pure Entity 从 Hierarchy 窗口消失. (当然你也不想使用 inject 模式来实现, 这会导致重复绘制对象的问题). 在 inspector 快速查看和修改运行时的对象非常有用.",{"type":597,"tag":606,"props":31036,"children":31037},{},[31038],{"type":597,"tag":719,"props":31039,"children":31041},{"alt":719,"src":31040},"/images/2020-10-19-game-object-conversion-and-subscene/v2-c924c16e23d2b941e4058ae2a720f115_b.jpg",[],{"type":597,"tag":1321,"props":31043,"children":31044},{},[31045],{"type":597,"tag":807,"props":31046,"children":31047},{},[31048],{"type":603,"value":31049},"你可能想要一边修改内容, 一边实时 convert 这些数据. (比如调整Transform后里面更新到 LocalToWorld/Translation)",{"type":597,"tag":606,"props":31051,"children":31052},{},[31053],{"type":603,"value":31054},"好消息是, 以上内容在 Subscene 里都是可行的! subscene 并不是比scene \"少\" 些东西, 而是被设计为可以嵌套进普通 scene 中的工具. 它的能力甚至比普通的 scene 要更强.",{"type":597,"tag":606,"props":31056,"children":31057},{},[31058],{"type":603,"value":31059},"让我们开始吧, 先创建一个 GameObject并添加Subscenecomponent. 这时候你会被告知需要添加一个新的 Scene asset 用来存放 subscene 的内容.",{"type":597,"tag":606,"props":31061,"children":31062},{},[31063],{"type":597,"tag":719,"props":31064,"children":31066},{"alt":719,"src":31065},"/images/2020-10-19-game-object-conversion-and-subscene/v2-6d07337664d2fd541b8d1742f070e5e2_720w.jpg",[],{"type":597,"tag":606,"props":31068,"children":31069},{},[31070],{"type":603,"value":31071},"你可以点击 \"Edit\" 来添加内容, 或者双击 scene asset 来打开 scene 进行修改 (这和常规的 scene 操作是一样的). 这里我添加了 2 个cube GameObject , 不过我不再需要ConvertToEntity了, scene 中的所有内容偶会被自动 convert (甚至还会警告你把已经没用的 ConvertToEntity 删掉).",{"type":597,"tag":606,"props":31073,"children":31074},{},[31075],{"type":597,"tag":719,"props":31076,"children":31078},{"alt":719,"src":31077},"/images/2020-10-19-game-object-conversion-and-subscene/v2-cf47b079fde25956965c75cfafd062e8_720w.jpg",[],{"type":597,"tag":606,"props":31080,"children":31081},{},[31082],{"type":597,"tag":719,"props":31083,"children":31085},{"alt":719,"src":31084},"/images/2020-10-19-game-object-conversion-and-subscene/v2-6ca9f8540a1bf57028c0878103a3d4d6_720w.jpg",[],{"type":597,"tag":606,"props":31087,"children":31088},{},[31089],{"type":603,"value":31090},"现在当你进入 play mode, 两个\"世界\"的好处都能获得. Hybrid Renderer负责渲染, tris 数量正常, 没有重复的对象出现.",{"type":597,"tag":606,"props":31092,"children":31093},{},[31094],{"type":597,"tag":719,"props":31095,"children":31097},{"alt":719,"src":31096},"/images/2020-10-19-game-object-conversion-and-subscene/v2-b1487642fdc3ba9a7ab3fc3698c1d27b_720w.jpg",[],{"type":597,"tag":606,"props":31099,"children":31100},{},[31101,31103,31108,31110,31114],{"type":603,"value":31102},"而且, 它们是",{"type":597,"tag":1080,"props":31104,"children":31105},{},[31106],{"type":603,"value":31107},"可被选中",{"type":603,"value":31109},"的. 这意味着尽管已经被convert 并 ",{"type":597,"tag":1080,"props":31111,"children":31112},{},[31113],{"type":603,"value":27277},{"type":603,"value":31115}," 了, 但不知为何点击 Hierarchy 的对象依然可以选中转换前的状态.",{"type":597,"tag":606,"props":31117,"children":31118},{},[31119],{"type":603,"value":31120},"相应地, 如果你点击 scene view 你也可以选中 Hierarchy 中的对象!",{"type":597,"tag":606,"props":31122,"children":31123},{},[31124],{"type":603,"value":31125},"你可能注意到上图中橙色的轮廓线不见了, 这时因为我开启了下面的选项:",{"type":597,"tag":606,"props":31127,"children":31128},{},[31129],{"type":597,"tag":719,"props":31130,"children":31132},{"alt":719,"src":31131},"/images/2020-10-19-game-object-conversion-and-subscene/v2-720ebb51d4072e9b804c87a57b1bf758_720w.jpg",[],{"type":597,"tag":606,"props":31134,"children":31135},{},[31136,31141],{"type":597,"tag":1080,"props":31137,"children":31138},{},[31139],{"type":603,"value":31140},"SceneView : Live Game State",{"type":603,"value":31142}," 意思是让 scene view 里面显示已经 convert 过的内容. 因此这时候 scene view 在使用 Hybrid Renderer 来渲染结果, 也无法显示那些橙色的轮廓线.",{"type":597,"tag":606,"props":31144,"children":31145},{},[31146,31151],{"type":597,"tag":1080,"props":31147,"children":31148},{},[31149],{"type":603,"value":31150},"SceneView: Editing State",{"type":603,"value":31152}," 则是让 scene view 在 play mode 时依然保持在 edit mode 时的状态, 这时候橙色轮廓线就能够显示了. 当然 cube 依然和 MeshFilter+MeshRenderer=RenderMesh设计地那样一样绘制. 但是如果 conversion 过程中将cube 染成了绿色, scene view 中将无法感知这一修改, cube 依然呈灰色.",{"type":597,"tag":606,"props":31154,"children":31155},{},[31156],{"type":597,"tag":719,"props":31157,"children":31159},{"alt":719,"src":31158},"/images/2020-10-19-game-object-conversion-and-subscene/v2-a1038be6c110edc989089a85047257eb_720w.jpg",[],{"type":597,"tag":606,"props":31161,"children":31162},{},[31163,31165,31170,31172,31177,31179,31183],{"type":603,"value":31164},"最上面的 ",{"type":597,"tag":1080,"props":31166,"children":31167},{},[31168],{"type":603,"value":31169},"Live Conversion in Edit Mode",{"type":603,"value":31171}," 指示在 edit mode 时的行为, 你可以选中它然后在 edit mode 看到 convert 的状态. ",{"type":597,"tag":1080,"props":31173,"children":31174},{},[31175],{"type":603,"value":31176},"SceneView: Live Game State",{"type":603,"value":31178}," 开启而 ",{"type":597,"tag":1080,"props":31180,"children":31181},{},[31182],{"type":603,"value":31169},{"type":603,"value":31184}," 保持禁用这种情况没什么用, 因为你本想要在scene view + edit mode 查看实时的游戏状态, 而同时你又禁止它这样做.",{"type":597,"tag":606,"props":31186,"children":31187},{},[31188,31190],{"type":603,"value":31189},"如果你在 play mode 时移动 scene 中的 Transform (很可能因为 subscene 用预先转换的状态保持了 Hierarchy 的完整), 则会通过增量地重新转换(reconverted, diff-ed)无缝地更新到新状态, 这套机制就是 ",{"type":597,"tag":1080,"props":31191,"children":31192},{},[31193],{"type":603,"value":31194},"live link.",{"type":597,"tag":606,"props":31196,"children":31197},{},[31198],{"type":597,"tag":1080,"props":31199,"children":31200},{},[31201],{"type":603,"value":31202},"比较 ConvertToEntity 和 Subscene",{"type":597,"tag":606,"props":31204,"children":31205},{},[31206],{"type":597,"tag":719,"props":31207,"children":31209},{"alt":719,"src":31208},"/images/2020-10-19-game-object-conversion-and-subscene/v2-00f0364648daf575b2595c3583779473_720w.jpg",[],{"type":597,"tag":606,"props":31211,"children":31212},{},[31213],{"type":603,"value":31214},"下面两图中, 前者是通过 Subscene 进行转换, 后者则通过ConvertToEntity. 两者都是 destroy 模式, 所以MeshFilter这样的 component object 会被销毁:",{"type":597,"tag":606,"props":31216,"children":31217},{},[31218,31222],{"type":597,"tag":719,"props":31219,"children":31221},{"alt":719,"src":31220},"/images/2020-10-19-game-object-conversion-and-subscene/v2-f669be4df96944af4b995954d229e5b7_720w.jpg",[],{"type":603,"value":31223},"Subscene, 上方是 CubeInside, 下方是 Cube",{"type":597,"tag":606,"props":31225,"children":31226},{},[31227,31231],{"type":597,"tag":719,"props":31228,"children":31230},{"alt":719,"src":31229},"/images/2020-10-19-game-object-conversion-and-subscene/v2-a1d3fdd0f7bf0aa49578990dc5109b99_720w.jpg",[],{"type":603,"value":31232},"ConvertToEntity, 上下同理",{"type":597,"tag":606,"props":31234,"children":31235},{},[31236],{"type":603,"value":31237},"EditorRenderData,EntityGuid,SceneSection,SceneTag是这里最大的区别. 除了EntityGuid, 其他三者都是 ISharedComponentData. 所以基本不用操心 chunk 碎片的问题, 基本上所有 subscene 里的对象都会得到同样的结果.",{"type":597,"tag":606,"props":31239,"children":31240},{},[31241],{"type":603,"value":31242},"ConvertToEntity或 subscene 都不会为层级结构添加LinkedEntityGroupbuffer, 但是因为 subscene 与 ConvertScene 方法的规则相同, 因此如果有被 disabled 的对象时, 它会添加LinkedEntityGroup.",{"type":597,"tag":606,"props":31244,"children":31245},{},[31246],{"type":597,"tag":719,"props":31247,"children":31249},{"alt":719,"src":31248},"/images/2020-10-19-game-object-conversion-and-subscene/v2-fa31f3d1c34e5328ea654b88792039bd_720w.jpg",[],{"type":597,"tag":606,"props":31251,"children":31252},{},[31253],{"type":597,"tag":1080,"props":31254,"children":31255},{},[31256],{"type":603,"value":31257},"不是一次 conversion, 而是一个 scene!",{"type":597,"tag":606,"props":31259,"children":31260},{},[31261],{"type":603,"value":31262},"Unity 并不希望传达出\"subscene 是一堆ConvertToEntity的结果\"这样的观念, 这是一个真正的 scene.",{"type":597,"tag":606,"props":31264,"children":31265},{},[31266],{"type":603,"value":31267},"包括在调用SceneManager.LoadScene 时. 下面的例子中, GO 有一个ConvertToEntity, InSubScene1什么都没有但是位于 subscene 中:",{"type":597,"tag":606,"props":31269,"children":31270},{},[31271],{"type":597,"tag":719,"props":31272,"children":31274},{"alt":719,"src":31273},"/images/2020-10-19-game-object-conversion-and-subscene/v2-d03443f3982058272989d61a6fda8259_720w.jpg",[],{"type":597,"tag":606,"props":31276,"children":31277},{},[31278],{"type":603,"value":31279},"当进入 play mode 时, 两者都按照期望被转换了, Subscene 和ConvertToEntity 这时是等价的.",{"type":597,"tag":606,"props":31281,"children":31282},{},[31283],{"type":597,"tag":719,"props":31284,"children":31286},{"alt":719,"src":31285},"/images/2020-10-19-game-object-conversion-and-subscene/v2-0dd4504f76658d822b0c78eee4606300_720w.jpg",[],{"type":597,"tag":606,"props":31288,"children":31289},{},[31290],{"type":603,"value":31291},"但如果我们 SceneManager.LoadScene 改变当前的 scene:",{"type":597,"tag":606,"props":31293,"children":31294},{},[31295],{"type":597,"tag":719,"props":31296,"children":31298},{"alt":719,"src":31297},"/images/2020-10-19-game-object-conversion-and-subscene/v2-f26e95d0237f8cfb9753c38397a681d8_720w.jpg",[],{"type":597,"tag":606,"props":31300,"children":31301},{},[31302],{"type":603,"value":31303},"可以看到 subscene 里的 entity 同样被删除了, 但是正如ConvertToEntity名字所隐含的意义, 转换后就和 scene 没什么关系了, GO 依然存在. 这对于 entity 的生命周期管理很有帮助. ( 在进入 scene 前, 相关 system 无需做无用功)",{"type":597,"tag":606,"props":31305,"children":31306},{},[31307],{"type":603,"value":31308},"我猜想 DeclareDependency 应该对这个功能有所帮助.",{"type":597,"tag":606,"props":31310,"children":31311},{},[31312],{"type":597,"tag":719,"props":31313,"children":31315},{"alt":719,"src":31314},"/images/2020-10-19-game-object-conversion-and-subscene/v2-36bbe1659c6b2da765b54421090f2319_720w.jpg",[],{"title":591,"searchDepth":787,"depth":787,"links":31317},[31318,31319,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31344,31345,31346,31347,31348,31349],{"id":26187,"depth":787,"text":26187},{"id":26259,"depth":787,"text":26262},{"id":26379,"depth":787,"text":26382},{"id":26515,"depth":787,"text":26515},{"id":26643,"depth":787,"text":26646},{"id":26800,"depth":787,"text":26800},{"id":26869,"depth":787,"text":26872},{"id":27063,"depth":787,"text":27066},{"id":27282,"depth":787,"text":27285},{"id":27442,"depth":787,"text":27445},{"id":27565,"depth":787,"text":27568},{"id":27651,"depth":787,"text":27654},{"id":27964,"depth":787,"text":27967},{"id":28291,"depth":787,"text":28294},{"id":28349,"depth":787,"text":28352},{"id":28525,"depth":787,"text":28528},{"id":28780,"depth":787,"text":28783},{"id":28889,"depth":787,"text":28892},{"id":22641,"depth":787,"text":22644},{"id":22815,"depth":787,"text":22818},{"id":29327,"depth":787,"text":29330},{"id":29493,"depth":787,"text":29496},{"id":29547,"depth":787,"text":29550},{"id":29563,"depth":787,"text":29566},{"id":29591,"depth":787,"text":29594},{"id":29789,"depth":787,"text":29792},{"id":30165,"depth":787,"text":30168},{"id":30392,"depth":787,"text":4782},{"id":30527,"depth":787,"text":30530},{"id":30659,"depth":787,"text":30662},{"id":30856,"depth":787,"text":30859},{"id":30976,"depth":787,"text":30982},"content:unity:2020-10-19-game-object-conversion-and-subscene.md","unity/2020-10-19-game-object-conversion-and-subscene.md","2020-10-19",{"_path":496,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":495,"description":31354,"body":31355,"_type":791,"_id":32327,"_source":793,"_file":32328,"_extension":795,"date":32329},"General Purpose ComponentShared component data    不存储在chunk中,而是存储在sharedComponentManager,而chunk中存的是索引.. 若ForEach中包含了Share Component，那么必须调用WithoutBurst方法和使用Run来执行Chunk component data    相当于单例...更改后,会更改所有相关实体System State Components  类似一个标记..但是实体销毁时,并不会回收entity,只有当所有satecomponent移除后Dynamic buffer compo",{"type":594,"children":31356,"toc":32312},[31357,31385,31391,31403,31420,31432,31440,31466,31471,31476,31482,31495,31503,31515,31520,31527,31532,31598,31603,31610,31639,31644,31775,31786,31792,31803,31820,31851,31857,31862,31887,31893,31903,31922,31941,31946,31951,31956,31961,31966,31978,31996,32014,32046,32052,32063,32089,32130,32149,32154,32162,32175,32241,32246,32266,32277,32290,32299],{"type":597,"tag":1321,"props":31358,"children":31359},{},[31360,31365,31370,31375,31380],{"type":597,"tag":807,"props":31361,"children":31362},{},[31363],{"type":603,"value":31364},"General Purpose Component",{"type":597,"tag":807,"props":31366,"children":31367},{},[31368],{"type":603,"value":31369},"Shared component data    不存储在chunk中,而是存储在sharedComponentManager,而chunk中存的是索引.. 若ForEach中包含了Share Component，那么必须调用WithoutBurst方法和使用Run来执行",{"type":597,"tag":807,"props":31371,"children":31372},{},[31373],{"type":603,"value":31374},"Chunk component data    相当于单例...更改后,会更改所有相关实体",{"type":597,"tag":807,"props":31376,"children":31377},{},[31378],{"type":603,"value":31379},"System State Components  类似一个标记..但是实体销毁时,并不会回收entity,只有当所有satecomponent移除后",{"type":597,"tag":807,"props":31381,"children":31382},{},[31383],{"type":603,"value":31384},"Dynamic buffer components    可以理解为一个数组component",{"type":597,"tag":598,"props":31386,"children":31388},{"id":31387},"general-purpose-component普通用途组件",[31389],{"type":603,"value":31390},"General Purpose Component（普通用途组件）",{"type":597,"tag":606,"props":31392,"children":31393},{},[31394,31396,31401],{"type":603,"value":31395},"这里指的是最普通的组件，可以通过实现 ",{"type":597,"tag":629,"props":31397,"children":31399},{"className":31398},[],[31400],{"type":603,"value":26908},{"type":603,"value":31402}," 接口来创建。",{"type":597,"tag":606,"props":31404,"children":31405},{},[31406,31411,31413,31418],{"type":597,"tag":629,"props":31407,"children":31409},{"className":31408},[],[31410],{"type":603,"value":26908},{"type":603,"value":31412}," 不存储行为，只储存数据。",{"type":597,"tag":629,"props":31414,"children":31416},{"className":31415},[],[31417],{"type":603,"value":26908},{"type":603,"value":31419}," 还是一个结构体（Struct）而不是一个类（Class），这意味着被复制时默认是通过值而不是通过引用。",{"type":597,"tag":606,"props":31421,"children":31422},{},[31423,31425,31430],{"type":603,"value":31424},"通常我们会用下面的",{"type":597,"tag":1080,"props":31426,"children":31427},{},[31428],{"type":603,"value":31429},"模式",{"type":603,"value":31431},"来修改组件数据：",{"type":597,"tag":621,"props":31433,"children":31435},{"code":31434},"var transform = group.transform[index]; // Read\n    \ntransform.heading = playerInput.move; // Modify\ntransform.position += deltaTime * playerInput.move * settings.playerMoveSpeed;\n\ngroup.transform[index] = transform; // Write\n",[31436],{"type":597,"tag":629,"props":31437,"children":31438},{"__ignoreMap":591},[31439],{"type":603,"value":31434},{"type":597,"tag":606,"props":31441,"children":31442},{},[31443,31448,31450,31455,31457,31464],{"type":597,"tag":629,"props":31444,"children":31446},{"className":31445},[],[31447],{"type":603,"value":26908},{"type":603,"value":31449}," 结构不包含托管对象（managed objects）的引用，所有",{"type":597,"tag":629,"props":31451,"children":31453},{"className":31452},[],[31454],{"type":603,"value":26908},{"type":603,"value":31456}," 被存在无垃圾回收的",{"type":597,"tag":886,"props":31458,"children":31461},{"href":31459,"rel":31460},"https://docs.unity3d.com/Packages/com.unity.entities@0.0/manual/chunk_iteration.html",[890],[31462],{"type":603,"value":31463},"块内存（chunk memory）",{"type":603,"value":31465},"中。",{"type":597,"tag":606,"props":31467,"children":31468},{},[31469],{"type":603,"value":31470},"你可能还听过一种组件是不包含数据、只用来标记的“Tag”组件（Tag component），其用途也很广，例如我们可以轻易地给实体加标记来区分玩家和敌人，这样系统中能更容易通过组件的类型来筛选我们想要的实体。如果我们给一个内存块（Chunk）中的所有实体都添加\"Tag“组件的话，只有内存块中对应的原型会修改，不添加数据，因此官方也推荐利用好”Tag“组件。",{"type":597,"tag":606,"props":31472,"children":31473},{},[31474],{"type":603,"value":31475},"See file: /Packages/com.unity.entities/Unity.Entities/IComponentData.cs.",{"type":597,"tag":598,"props":31477,"children":31479},{"id":31478},"shared-components共享组件",[31480],{"type":603,"value":31481},"Shared components（共享组件）",{"type":597,"tag":606,"props":31483,"children":31484},{},[31485,31487,31493],{"type":603,"value":31486},"Shared components 是一种特殊的组件，你可以把某些特殊的需要共享的值放到 shared component 中，从而在实体中与其他组件划分开。例如有时候我们的实体需要共享一套材质，我们可以为需要共享的材质创建 ",{"type":597,"tag":629,"props":31488,"children":31490},{"className":31489},[],[31491],{"type":603,"value":31492},"Rendering.RenderMesh",{"type":603,"value":31494},"，再放到 shared components 中。原型中也可以定义 shared components，这一点和其他组件是一样的。",{"type":597,"tag":621,"props":31496,"children":31498},{"code":31497},"[System.Serializable]\npublic struct RenderMesh : ISharedComponentData\n{\n    public Mesh                 mesh;\n    public Material             material;\n\n    public ShadowCastingMode    castShadows;\n    public bool                 receiveShadows;\n}\n",[31499],{"type":597,"tag":629,"props":31500,"children":31501},{"__ignoreMap":591},[31502],{"type":603,"value":31497},{"type":597,"tag":606,"props":31504,"children":31505},{},[31506,31508,31513],{"type":603,"value":31507},"当你为一个实体添加一个 shared components 时， ",{"type":597,"tag":629,"props":31509,"children":31511},{"className":31510},[],[31512],{"type":603,"value":26941},{"type":603,"value":31514}," 会把所有带有同样 shared components 的实体放到一个同样的内存块中（Chunks）。shared components 允许我们的系统去一并处理相似的（有同样 shared components 的）实体。",{"type":597,"tag":1023,"props":31516,"children":31518},{"id":31517},"内存结构",[31519],{"type":603,"value":31517},{"type":597,"tag":606,"props":31521,"children":31522},{},[31523],{"type":597,"tag":719,"props":31524,"children":31526},{"alt":719,"src":31525},"/images/2020-10-18-unity-ecs-component/5d295d398f62598876.png",[],{"type":597,"tag":606,"props":31528,"children":31529},{},[31530],{"type":603,"value":31531},"每个内存块（Chunk）会有一个存放 shared components 索引的数组。这句话包含了几个要点：",{"type":597,"tag":803,"props":31533,"children":31534},{},[31535,31548,31574,31586],{"type":597,"tag":807,"props":31536,"children":31537},{},[31538,31540,31546],{"type":603,"value":31539},"对于实体来说，有同样 ",{"type":597,"tag":629,"props":31541,"children":31543},{"className":31542},[],[31544],{"type":603,"value":31545},"SharedComponentData",{"type":603,"value":31547}," 的实体会被一起放到同样的内存块（Chunk）中。",{"type":597,"tag":807,"props":31549,"children":31550},{},[31551,31553,31558,31560,31565,31567,31572],{"type":603,"value":31552},"如果我们有两个存储在同样的内存块中的两个实体，它们有同样的 ",{"type":597,"tag":629,"props":31554,"children":31556},{"className":31555},[],[31557],{"type":603,"value":31545},{"type":603,"value":31559}," 类型和值。我们修改其中一个实体的 ",{"type":597,"tag":629,"props":31561,"children":31563},{"className":31562},[],[31564],{"type":603,"value":31545},{"type":603,"value":31566}," 的值，这样会导致这个实体会被移动到一个新的内存块中，因为一个内存块共享同一个数组的 ",{"type":597,"tag":629,"props":31568,"children":31570},{"className":31569},[],[31571],{"type":603,"value":31545},{"type":603,"value":31573}," 索引。事实上，从一个实体中增加或者移除一个组件，或者改变 shared components 的值都会导致这种操作的发生。",{"type":597,"tag":807,"props":31575,"children":31576},{},[31577,31579,31584],{"type":603,"value":31578},"其索引存储在内存块而非实体中，因此 ",{"type":597,"tag":629,"props":31580,"children":31582},{"className":31581},[],[31583],{"type":603,"value":31545},{"type":603,"value":31585}," 对实体来说是低开销的。",{"type":597,"tag":807,"props":31587,"children":31588},{},[31589,31591,31596],{"type":603,"value":31590},"因为内存块只需要存其索引，",{"type":597,"tag":629,"props":31592,"children":31594},{"className":31593},[],[31595],{"type":603,"value":31545},{"type":603,"value":31597}," 的内存消耗几乎可以忽略不计。",{"type":597,"tag":606,"props":31599,"children":31600},{},[31601],{"type":603,"value":31602},"因为上面的第二个要点，我们不能滥用 shared components。滥用 shared components 将让 Unity 不能利用好内存块（Chunk），因此我们要避免添加不必要的数据或修改数据到 shared components 中。我们可以通过 Entity Debugger 来监测内存块的利用。",{"type":597,"tag":606,"props":31604,"children":31605},{},[31606],{"type":597,"tag":719,"props":31607,"children":31609},{"alt":719,"src":31608},"/images/2020-10-18-unity-ecs-component/5d295b6d78b7f51832.png",[],{"type":597,"tag":606,"props":31611,"children":31612},{},[31613,31615,31621,31623,31628,31630,31637],{"type":603,"value":31614},"拿上一段 RenderMesh 的例子来说，共享材质会更有效率，因为 shared components 有其自己的 ",{"type":597,"tag":629,"props":31616,"children":31618},{"className":31617},[],[31619],{"type":603,"value":31620},"manager",{"type":603,"value":31622}," 和哈希表。其中 ",{"type":597,"tag":629,"props":31624,"children":31626},{"className":31625},[],[31627],{"type":603,"value":31620},{"type":603,"value":31629}," 带有一个存储 shared components 数据的自由列表（",{"type":597,"tag":886,"props":31631,"children":31634},{"href":31632,"rel":31633},"https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%A1%A8",[890],[31635],{"type":603,"value":31636},"freelist",{"type":603,"value":31638},"），哈希表可以快速地找到相应的值。内存块里面存的是索引数组，需要找数据的时候就会从 Shared Component Manager 中找。",{"type":597,"tag":1023,"props":31640,"children":31642},{"id":31641},"其他要点",[31643],{"type":603,"value":31641},{"type":597,"tag":1321,"props":31645,"children":31646},{},[31647,31664,31699,31726,31758],{"type":597,"tag":807,"props":31648,"children":31649},{},[31650,31655,31657,31662],{"type":597,"tag":629,"props":31651,"children":31653},{"className":31652},[],[31654],{"type":603,"value":26353},{"type":603,"value":31656}," 可以迭代所有拥有相同 ",{"type":597,"tag":629,"props":31658,"children":31660},{"className":31659},[],[31661],{"type":603,"value":31545},{"type":603,"value":31663}," 的实体",{"type":597,"tag":807,"props":31665,"children":31666},{},[31667,31669,31675,31677,31682,31684,31690,31692,31697],{"type":603,"value":31668},"我们可以用 ",{"type":597,"tag":629,"props":31670,"children":31672},{"className":31671},[],[31673],{"type":603,"value":31674},"EntityQuery.SetFilter()",{"type":603,"value":31676}," 来迭代所有拥有某个特定 ",{"type":597,"tag":629,"props":31678,"children":31680},{"className":31679},[],[31681],{"type":603,"value":31545},{"type":603,"value":31683}," 的实体。这种操作开销十分低，因为 ",{"type":597,"tag":629,"props":31685,"children":31687},{"className":31686},[],[31688],{"type":603,"value":31689},"SetFilter",{"type":603,"value":31691}," 内部筛选的只是 int 的索引。前面说了每个内存块都有一个",{"type":597,"tag":629,"props":31693,"children":31695},{"className":31694},[],[31696],{"type":603,"value":31545},{"type":603,"value":31698}," 索引数组，因此对于每个内存块来说，筛选（filtering）的消耗都是可以忽略不计的。",{"type":597,"tag":807,"props":31700,"children":31701},{},[31702,31704,31709,31711,31717,31719,31724],{"type":603,"value":31703},"怎么样获取 ",{"type":597,"tag":629,"props":31705,"children":31707},{"className":31706},[],[31708],{"type":603,"value":31545},{"type":603,"value":31710}," 的值呢？",{"type":597,"tag":629,"props":31712,"children":31714},{"className":31713},[],[31715],{"type":603,"value":31716},"EntityManager.GetAllUniqueSharedComponentData\u003CT>",{"type":603,"value":31718}," 可以得到在存活的实体中（alive entities）的所有的泛型 T 类型的",{"type":597,"tag":629,"props":31720,"children":31722},{"className":31721},[],[31723],{"type":603,"value":31545},{"type":603,"value":31725}," 值，结果以参数中的列表返回，你也可以通过其重载的方法获得所有值的索引。其他获取值的方法可以参考 /Packages/com.unity.entities/Unity.Entities/EntityManagerAccessComponentData.cs。",{"type":597,"tag":807,"props":31727,"children":31728},{},[31729,31734,31736,31741,31743,31748,31750,31757],{"type":597,"tag":629,"props":31730,"children":31732},{"className":31731},[],[31733],{"type":603,"value":31545},{"type":603,"value":31735}," 是自动引用计数的，例如在没有任何内存块拥有某个",{"type":597,"tag":629,"props":31737,"children":31739},{"className":31738},[],[31740],{"type":603,"value":31545},{"type":603,"value":31742}," 索引的时候，引用计数会置零，从而知道要删除",{"type":597,"tag":629,"props":31744,"children":31746},{"className":31745},[],[31747],{"type":603,"value":31545},{"type":603,"value":31749}," 的数据 。这一点就能看出其在 ECS 的世界中是非常独特的存在，想要深入了解可以看这篇文章",{"type":597,"tag":886,"props":31751,"children":31754},{"href":31752,"rel":31753},"https://gametorrahod.com/everything-about-isharedcomponentdata/",[890],[31755],{"type":603,"value":31756},"《Everything about ISharedComponentData》",{"type":603,"value":758},{"type":597,"tag":807,"props":31759,"children":31760},{},[31761,31766,31768,31773],{"type":597,"tag":629,"props":31762,"children":31764},{"className":31763},[],[31765],{"type":603,"value":31545},{"type":603,"value":31767}," 应该尽量不去更改，因为更改 ",{"type":597,"tag":629,"props":31769,"children":31771},{"className":31770},[],[31772],{"type":603,"value":31545},{"type":603,"value":31774}," 会导致实体的组件数据需要复制到其他的内存块中。",{"type":597,"tag":606,"props":31776,"children":31777},{},[31778,31780,31785],{"type":603,"value":31779},"你也可以读读这篇更深入的文章",{"type":597,"tag":886,"props":31781,"children":31783},{"href":31752,"rel":31782},[890],[31784],{"type":603,"value":31756},{"type":603,"value":758},{"type":597,"tag":598,"props":31787,"children":31789},{"id":31788},"system-state-components系统状态组件",[31790],{"type":603,"value":31791},"System state components（系统状态组件）",{"type":597,"tag":606,"props":31793,"children":31794},{},[31795,31801],{"type":597,"tag":629,"props":31796,"children":31798},{"className":31797},[],[31799],{"type":603,"value":31800},"SystemStateComponentData",{"type":603,"value":31802}," 允许你跟踪系统（System）的资源，并允许你合适地创建和删除某些资源，这些过程中不依赖独立的回调（individual callback）。",{"type":597,"tag":617,"props":31804,"children":31805},{},[31806],{"type":597,"tag":606,"props":31807,"children":31808},{},[31809,31811,31818],{"type":603,"value":31810},"假设有一个网络同步 System State，其监控一个 Component A 的同步，则我只需要定义一个 SystemStateComponent SA。当 Entity [有 A，无 SA] 时，表示 A 刚添加，此时添加 SA。等到 Entity [无 A，有 SA] 时,表示 A 被删除（尝试销毁Entity 时也会删除 A）。\n",{"type":597,"tag":886,"props":31812,"children":31815},{"href":31813,"rel":31814},"https://zhuanlan.zhihu.com/p/51289405",[890],[31816],{"type":603,"value":31817},"《浅入浅出Unity ECS》",{"type":603,"value":31819}," BenzzZX",{"type":597,"tag":606,"props":31821,"children":31822},{},[31823,31828,31829,31835,31837,31843,31844,31849],{"type":597,"tag":629,"props":31824,"children":31826},{"className":31825},[],[31827],{"type":603,"value":31800},{"type":603,"value":13757},{"type":597,"tag":629,"props":31830,"children":31832},{"className":31831},[],[31833],{"type":603,"value":31834},"SystemStateSharedComponentData",{"type":603,"value":31836}," 这两个类型与 ",{"type":597,"tag":629,"props":31838,"children":31840},{"className":31839},[],[31841],{"type":603,"value":31842},"ComponentData",{"type":603,"value":13757},{"type":597,"tag":629,"props":31845,"children":31847},{"className":31846},[],[31848],{"type":603,"value":31545},{"type":603,"value":31850}," 十分相似，不同的是前者两个类型都是系统级别的，不会在实体删除的时候被删除。",{"type":597,"tag":1023,"props":31852,"children":31854},{"id":31853},"motivation诱因",[31855],{"type":603,"value":31856},"Motivation（诱因）",{"type":597,"tag":606,"props":31858,"children":31859},{},[31860],{"type":603,"value":31861},"System state components 有这样特殊的行为，是因为：",{"type":597,"tag":1321,"props":31863,"children":31864},{},[31865,31877,31882],{"type":597,"tag":807,"props":31866,"children":31867},{},[31868,31870,31875],{"type":603,"value":31869},"系统可能需要保持一个基于 ",{"type":597,"tag":629,"props":31871,"children":31873},{"className":31872},[],[31874],{"type":603,"value":31842},{"type":603,"value":31876}," 的内部状态。例如已经被分配的资源。",{"type":597,"tag":807,"props":31878,"children":31879},{},[31880],{"type":603,"value":31881},"系统需要通过值来管理这些状态，也需要管理其他系统所造成的的状态改变。例如在组件中的值改变的时候，或者在相关组件被添加或者被删除的时候。",{"type":597,"tag":807,"props":31883,"children":31884},{},[31885],{"type":603,"value":31886},"“没有回调”是 ECS 设计规则的重要元素。",{"type":597,"tag":1023,"props":31888,"children":31890},{"id":31889},"concept概念",[31891],{"type":603,"value":31892},"Concept（概念）",{"type":597,"tag":606,"props":31894,"children":31895},{},[31896,31901],{"type":597,"tag":629,"props":31897,"children":31899},{"className":31898},[],[31900],{"type":603,"value":31800},{"type":603,"value":31902}," 普遍用法是镜像一个用户组件，并提供内部状态。",{"type":597,"tag":606,"props":31904,"children":31905},{},[31906,31908,31913,31915,31921],{"type":603,"value":31907},"上面引用的网络同步的例子中，A 就是用户分配的 ",{"type":597,"tag":629,"props":31909,"children":31911},{"className":31910},[],[31912],{"type":603,"value":31842},{"type":603,"value":31914},"，SA 就是系统分配的 ",{"type":597,"tag":629,"props":31916,"children":31918},{"className":31917},[],[31919],{"type":603,"value":31920},"SystemComponentData",{"type":603,"value":758},{"type":597,"tag":606,"props":31923,"children":31924},{},[31925,31927,31932,31934,31939],{"type":603,"value":31926},"下面以 FooComponent （",{"type":597,"tag":629,"props":31928,"children":31930},{"className":31929},[],[31931],{"type":603,"value":31842},{"type":603,"value":31933},"）和 FooStateComponent（",{"type":597,"tag":629,"props":31935,"children":31937},{"className":31936},[],[31938],{"type":603,"value":31920},{"type":603,"value":31940},"）做主要用途的示例。前两个用途已经在前面的网络同步例子中呈现过。",{"type":597,"tag":3995,"props":31942,"children":31944},{"id":31943},"检测组件的添加",[31945],{"type":603,"value":31943},{"type":597,"tag":606,"props":31947,"children":31948},{},[31949],{"type":603,"value":31950},"如果用户添加 FooComponent 时，FooStateComponent 还不存在。FooSystem 会在 update 中查询，如果实体只有 FooComponent 而没有 FooStateComponent,，则可以判断这个实体是新添加的。这时候 FooSystem 会加上 FooStateComponent 组件和其他需要的内部状态。",{"type":597,"tag":3995,"props":31952,"children":31954},{"id":31953},"检测组件的删除",[31955],{"type":603,"value":31953},{"type":597,"tag":606,"props":31957,"children":31958},{},[31959],{"type":603,"value":31960},"如果用户删除 FooComponent 后，FooStateComponent 仍然存在。FooSystem 会在 update 中查询，如果实体没有 FooComponent 而有 FooStateComponent,，则可以判断 FooComponent 已经被删除了。这时候 FooSystem 会给删除 FooStateComponent 组件和修改其他需要的内部状态。",{"type":597,"tag":3995,"props":31962,"children":31964},{"id":31963},"监测实体的删除",[31965],{"type":603,"value":31963},{"type":597,"tag":606,"props":31967,"children":31968},{},[31969,31971,31976],{"type":603,"value":31970},"通常 ",{"type":597,"tag":629,"props":31972,"children":31974},{"className":31973},[],[31975],{"type":603,"value":4744},{"type":603,"value":31977}," 这个方法可以用来：",{"type":597,"tag":803,"props":31979,"children":31980},{},[31981,31986,31991],{"type":597,"tag":807,"props":31982,"children":31983},{},[31984],{"type":603,"value":31985},"找到所有由某个实体 ID 标记的所有组件",{"type":597,"tag":807,"props":31987,"children":31988},{},[31989],{"type":603,"value":31990},"删除那些组件",{"type":597,"tag":807,"props":31992,"children":31993},{},[31994],{"type":603,"value":31995},"回收实体 ID 以作重用",{"type":597,"tag":606,"props":31997,"children":31998},{},[31999,32001,32006,32008,32013],{"type":603,"value":32000},"然而，",{"type":597,"tag":629,"props":32002,"children":32004},{"className":32003},[],[32005],{"type":603,"value":4744},{"type":603,"value":32007}," 无法删除 ",{"type":597,"tag":629,"props":32009,"children":32011},{"className":32010},[],[32012],{"type":603,"value":31800},{"type":603,"value":19548},{"type":597,"tag":606,"props":32015,"children":32016},{},[32017,32019,32024,32025,32030,32032,32037,32039,32044],{"type":603,"value":32018},"在你删除实体时，",{"type":597,"tag":629,"props":32020,"children":32022},{"className":32021},[],[32023],{"type":603,"value":26941},{"type":603,"value":4731},{"type":597,"tag":1080,"props":32026,"children":32027},{},[32028],{"type":603,"value":32029},"不会",{"type":603,"value":32031},"移除任何 system state components，在它们没被删除的时候，",{"type":597,"tag":629,"props":32033,"children":32035},{"className":32034},[],[32036],{"type":603,"value":26941},{"type":603,"value":32038}," 也不会回收其实体的 ID 。这样允许系统（System）在一个实体被删除的时候，去整理内部的状态（internal state），也能清理关联着实体 ID 的相关的资源和状态。实体 ID 只会在所有 ",{"type":597,"tag":629,"props":32040,"children":32042},{"className":32041},[],[32043],{"type":603,"value":31800},{"type":603,"value":32045}," 被删除的时候才被重用。",{"type":597,"tag":598,"props":32047,"children":32049},{"id":32048},"dynamic-buffers动态缓冲",[32050],{"type":603,"value":32051},"Dynamic Buffers（动态缓冲）",{"type":597,"tag":606,"props":32053,"children":32054},{},[32055,32061],{"type":597,"tag":629,"props":32056,"children":32058},{"className":32057},[],[32059],{"type":603,"value":32060},"DynamicBuffer",{"type":603,"value":32062}," 也是组件的一种类型，它能把一个变量内存空间大小的弹性的缓冲（variable-sized, “stretchy” buffer）和一个实体关联起来。它内部存储着一定数量的元素，但如果内部所占内存空间太大，会额外划分一个堆内存（heap memory）来存储。",{"type":597,"tag":606,"props":32064,"children":32065},{},[32066,32068,32073,32075,32080,32082,32087],{"type":603,"value":32067},"动态缓冲的内存管理是全自动的。与 ",{"type":597,"tag":629,"props":32069,"children":32071},{"className":32070},[],[32072],{"type":603,"value":32060},{"type":603,"value":32074}," 关联的内存由 ",{"type":597,"tag":629,"props":32076,"children":32078},{"className":32077},[],[32079],{"type":603,"value":26941},{"type":603,"value":32081}," 来管理，这样当",{"type":597,"tag":629,"props":32083,"children":32085},{"className":32084},[],[32086],{"type":603,"value":32060},{"type":603,"value":32088}," 组件被删除的时候，所关联的堆内存空间也会自动释放掉。",{"type":597,"tag":606,"props":32090,"children":32091},{},[32092,32094,32099,32101,32106,32108,32113,32115,32121,32123,32128],{"type":603,"value":32093},"上面的解释可能略显苍白，实际上 ",{"type":597,"tag":629,"props":32095,"children":32097},{"className":32096},[],[32098],{"type":603,"value":32060},{"type":603,"value":32100}," 可以看成一个有默认大小的数组，其行为和性能都和 ",{"type":597,"tag":629,"props":32102,"children":32104},{"className":32103},[],[32105],{"type":603,"value":26328},{"type":603,"value":32107},"（在 ECS 中常用的无 GC 容器类型）差不多，但是存储数据超过默认大小也没关系，上文提到了会创建一个堆内存来存储多的数据。",{"type":597,"tag":629,"props":32109,"children":32111},{"className":32110},[],[32112],{"type":603,"value":32060},{"type":603,"value":32114}," 可以通过 ",{"type":597,"tag":629,"props":32116,"children":32118},{"className":32117},[],[32119],{"type":603,"value":32120},"ToNativeArray",{"type":603,"value":32122}," 转成 ",{"type":597,"tag":629,"props":32124,"children":32126},{"className":32125},[],[32127],{"type":603,"value":26328},{"type":603,"value":32129}," 类型，其中只是把指针重新指向缓冲，不会复制数据。",{"type":597,"tag":606,"props":32131,"children":32132},{},[32133,32140,32142,32147],{"type":597,"tag":886,"props":32134,"children":32137},{"href":32135,"rel":32136},"http://tsubakit1.hateblo.jp/entry/2018/11/07/234502",[890],[32138],{"type":603,"value":32139},"【Unity】ECSで配列を格納する Dynamic Buffers",{"type":603,"value":32141}," 这篇文章中，作者用",{"type":597,"tag":629,"props":32143,"children":32145},{"className":32144},[],[32146],{"type":603,"value":32060},{"type":603,"value":32148}," 来储存临近的圆柱体实体，从而更方便地与这些实体交互。",{"type":597,"tag":1023,"props":32150,"children":32152},{"id":32151},"定义缓冲",[32153],{"type":603,"value":32151},{"type":597,"tag":621,"props":32155,"children":32157},{"code":32156},"// 8 指的是缓冲中默认元素的数量，例如这例子中存的是 Integer 类型\n// 那么 8 integers （32 bytes）就是缓冲的默认大小\n// 64 位机器中则占 16 bytes\n[InternalBufferCapacity(8)]\npublic struct MyBufferElement : IBufferElementData\n{\n    // 下面的隐式转换是可选的，这样可以少写些代码\n    public static implicit operator int(MyBufferElement e) { return e.Value; }\n    public static implicit operator MyBufferElement(int e) { return new MyBufferElement { Value = e }; }\n\n    // 每个缓冲元素要存储的值\n    public int Value;\n}\n",[32158],{"type":597,"tag":629,"props":32159,"children":32160},{"__ignoreMap":591},[32161],{"type":603,"value":32156},{"type":597,"tag":606,"props":32163,"children":32164},{},[32165,32167,32173],{"type":603,"value":32166},"可能有点奇怪，我们要定义缓冲中元素的结构而不是 ",{"type":597,"tag":629,"props":32168,"children":32170},{"className":32169},[],[32171],{"type":603,"value":32172},"Buffer",{"type":603,"value":32174}," 缓冲本身，其实这样在 ECS 中有两个好处：",{"type":597,"tag":803,"props":32176,"children":32177},{},[32178,32205],{"type":597,"tag":807,"props":32179,"children":32180},{},[32181,32183,32189,32191,32196,32198,32204],{"type":603,"value":32182},"对于 ",{"type":597,"tag":629,"props":32184,"children":32186},{"className":32185},[],[32187],{"type":603,"value":32188},"float3",{"type":603,"value":32190}," 或者其他常见的值类型来说，这样能支持多种 ",{"type":597,"tag":629,"props":32192,"children":32194},{"className":32193},[],[32195],{"type":603,"value":32060},{"type":603,"value":32197}," 。我们可以重用已有的缓冲元素的结构，来定义其他的 ",{"type":597,"tag":629,"props":32199,"children":32201},{"className":32200},[],[32202],{"type":603,"value":32203},"Buffers",{"type":603,"value":758},{"type":597,"tag":807,"props":32206,"children":32207},{},[32208,32210,32215,32217,32223,32225,32231,32233,32239],{"type":603,"value":32209},"我们可以将 ",{"type":597,"tag":629,"props":32211,"children":32213},{"className":32212},[],[32214],{"type":603,"value":32172},{"type":603,"value":32216}," 的元素类型包含在 ",{"type":597,"tag":629,"props":32218,"children":32220},{"className":32219},[],[32221],{"type":603,"value":32222},"EntityArchetypes",{"type":603,"value":32224}," 中，这样它会表现得像拥有一个组件一样。例如用 ",{"type":597,"tag":629,"props":32226,"children":32228},{"className":32227},[],[32229],{"type":603,"value":32230},"AddBuffer()",{"type":603,"value":32232}," 方法，可以通过 ",{"type":597,"tag":629,"props":32234,"children":32236},{"className":32235},[],[32237],{"type":603,"value":32238},"entityManager.AddBuffer\u003CMyBufferElement>(entity);",{"type":603,"value":32240}," 来添加缓冲。",{"type":597,"tag":598,"props":32242,"children":32244},{"id":32243},"关于prefab到entity",[32245],{"type":603,"value":32243},{"type":597,"tag":1321,"props":32247,"children":32248},{},[32249],{"type":597,"tag":807,"props":32250,"children":32251},{},[32252,32257,32259,32264],{"type":597,"tag":629,"props":32253,"children":32255},{"className":32254},[],[32256],{"type":603,"value":29625},{"type":603,"value":32258}," ： 将prefab引用添加到Conversion World。在",{"type":597,"tag":629,"props":32260,"children":32262},{"className":32261},[],[32263],{"type":603,"value":28892},{"type":603,"value":32265},"中可以通过GameObjectConversionSystem根据prefab获取entity",{"type":597,"tag":621,"props":32267,"children":32272},{"code":32268,"language":32269,"meta":591,"className":32270},"public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs) => referencedPrefabs.Add(Prefab);\n","cpp",[32271],"language-cpp",[32273],{"type":597,"tag":629,"props":32274,"children":32275},{"__ignoreMap":591},[32276],{"type":603,"value":32268},{"type":597,"tag":1321,"props":32278,"children":32279},{},[32280],{"type":597,"tag":807,"props":32281,"children":32282},{},[32283,32288],{"type":597,"tag":629,"props":32284,"children":32286},{"className":32285},[],[32287],{"type":603,"value":28892},{"type":603,"value":32289},"：自动生成一个新的entity，然后自定义对entity的操作。",{"type":597,"tag":621,"props":32291,"children":32294},{"code":32292,"language":32269,"meta":591,"className":32293},"public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n    {\n        dstManager.AddComponentData(entity, new PeriodicSpawner\n        {\n            Prefab = conversionSystem.GetPrimaryEntity(Prefab),\n            SecondsBetweenSpawns = 1 / SpawnsPerSecond\n        });\n    }\n",[32271],[32295],{"type":597,"tag":629,"props":32296,"children":32297},{"__ignoreMap":591},[32298],{"type":603,"value":32292},{"type":597,"tag":1321,"props":32300,"children":32301},{},[32302],{"type":597,"tag":807,"props":32303,"children":32304},{},[32305],{"type":597,"tag":886,"props":32306,"children":32309},{"href":32307,"rel":32308},"https://github.com/Knightmore/MultiWorldBootstrap",[890],[32310],{"type":603,"value":32311},"Knightmore/MultiWorldBootstrap: Unity ICustomBootstrap extension for multiple custom world creation in ECS (github.com)",{"title":591,"searchDepth":787,"depth":787,"links":32313},[32314,32315,32319,32323,32326],{"id":31387,"depth":787,"text":31390},{"id":31478,"depth":787,"text":31481,"children":32316},[32317,32318],{"id":31517,"depth":1530,"text":31517},{"id":31641,"depth":1530,"text":31641},{"id":31788,"depth":787,"text":31791,"children":32320},[32321,32322],{"id":31853,"depth":1530,"text":31856},{"id":31889,"depth":1530,"text":31892},{"id":32048,"depth":787,"text":32051,"children":32324},[32325],{"id":32151,"depth":1530,"text":32151},{"id":32243,"depth":787,"text":32243},"content:unity:2020-10-18-unity-ecs-component.md","unity/2020-10-18-unity-ecs-component.md","2020-10-18",{"_path":493,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":492,"description":32331,"body":32332,"_type":791,"_id":32452,"_source":793,"_file":32453,"_extension":795,"date":32454},"不管NGUI还是UGUI，图集都是在制作期间就生成了的，运行时是一张大图，这样做的好处在于我们可以在一定程度上去合并批次，但是图集通常在制作过程中，会分成commonatlas和系统atlas两类，一个界面prefab至少会用到两张图集，就会出现ABA的图集穿插打断合批的情况。还有一种游戏内容多了以后，各种图片也相应的变多，类似图标、commonatlas这种图集，一张2048x2048可能就放不下了，这时候如果用到两张2048x2048，就又出现了之前说的ABA的情况，而且内存上也上去了。这时候就出现了新的解决方案：动态图集。",{"type":594,"children":32333,"toc":32450},[32334,32338,32343,32348,32353,32361,32366,32371,32379,32384,32391,32396,32403,32408,32415,32422,32427],{"type":597,"tag":606,"props":32335,"children":32336},{},[32337],{"type":603,"value":32331},{"type":597,"tag":606,"props":32339,"children":32340},{},[32341],{"type":603,"value":32342},"动态图集其实就是我们在打包的时候，图片是零散的，但是最后运行时，自动生成一张空白大图片，然后将界面上用到的零散的图片绘制在这个大图上，只将这个大图传入到gpu里头，达到合批的效果。由于手机界面制作过程中，标准分辨率往往是低于2048的，所以一张2048的动态图集就能完全解决一个界面的绘制工作了，但是动态图集也是有缺点的，动态图集因为将图集的生成过程延迟到了游戏运行时，所以必然会比静态图集多了图集生成的成本，当然这也是可以优化的。并且在目前的动态图集生成方案中，还没有出现公开的支持压缩的动态图集解决方案，所以动态图集目前看来只能是RGBA32的格式。还有一点，静态图集由于图片在生成过程中是确定的，可以将分配算法做得很好，图集的利用率也能做到很高。动态图集由于图片是动态生成的，在游戏运行过程中也会动态的增减图片，类似操作系统的内存分配算法，图集必然会出现碎片，图集的利用率也不可能做得很高。",{"type":597,"tag":606,"props":32344,"children":32345},{},[32346],{"type":603,"value":32347},"说了那么多 就做个demo来看看动态图集的威力吧。",{"type":597,"tag":606,"props":32349,"children":32350},{},[32351],{"type":603,"value":32352},"这个demo只是简单的演示一下动态图集的主要思路，图片分配算法也只是将大图片分成128x128的一个一个分区，每个分区采用引用计数开控制是否在使用图片，用于维护整个UI系统的话，这种算法并不适用，但是如果只是用于icon图标的话，由于icon图标是固定尺寸的，所以这套算法就很合适了。下面上源码：",{"type":597,"tag":621,"props":32354,"children":32356},{"code":32355},"\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n \npublic class NxSpriteInfo\n{\n    private int _x;\n    private int _y;\n    private Sprite _sprite;\n    private int _referenceCount;\n \n    private int _width;\n    private int _height;\n \n    public int x { get { return _x; } }\n    public int y { get { return _y; } }\n \n    public Sprite sprite\n    {\n        get { return _sprite; }\n    }\n \n    public NxSpriteInfo(int x, int y, Texture2D mainTexture, int startX, int startY, int width, int height)\n    {\n        _x = x;\n        _y = y;\n        _referenceCount = 0;\n \n        _width = width;\n        _height = height;\n \n        _sprite = Sprite.Create(mainTexture, new Rect(startX, startY, width, height), Vector2.one / 2f);\n    }\n \n    public bool IsEmpty()\n    {\n        return _referenceCount == 0;\n    }\n \n    public void AddReference()\n    {\n        ++_referenceCount;\n        Debug.Log(string.Format(\"[AddReference]Sprite:[{0},{1}] ref:{2}\", x, y, _referenceCount));\n    }\n \n    public void RemoveReference()\n    {\n        if (_referenceCount == 0) return;\n        --_referenceCount;\n \n        Debug.Log(string.Format(\"[RemoveReference]Sprite:[{0},{1}] ref:{2}\", x, y, _referenceCount));\n    }\n}\n \npublic class DynamicAtlas : MonoBehaviour\n{\n    private const int MAX_DYNAMIC_ATLAS_SIZE = 1024;\n    private const int DYNAMIC_ATLAS_CELL_SIZE = 128;\n    private const int DYNAMIC_ATLAS_CELL_COUNT = MAX_DYNAMIC_ATLAS_SIZE / DYNAMIC_ATLAS_CELL_SIZE;\n \n    [SerializeField]\n    private Texture2D _dynamicAtlasTex;\n \n    // 策略 分成格子\n    private List\u003CNxSpriteInfo> _spriteCacheList;\n    private Dictionary\u003Cint, int> _spriteRedirectMap = new Dictionary\u003Cint, int>();\n \n    private void Awake()\n    {\n        _dynamicAtlasTex = new Texture2D(MAX_DYNAMIC_ATLAS_SIZE, MAX_DYNAMIC_ATLAS_SIZE, TextureFormat.RGBA32, false);\n        _initCacheSprite();\n    }\n \n    private void _initCacheSprite()\n    {\n        int cellCount = DYNAMIC_ATLAS_CELL_COUNT;\n \n        _spriteCacheList = new List\u003CNxSpriteInfo>();\n        for (int i = 0; i \u003C cellCount; ++i)\n        {\n            for (int j = 0; j \u003C cellCount; ++j)\n            {\n                _spriteCacheList.Add(new NxSpriteInfo(i, j, \n                    _dynamicAtlasTex,\n                    i * DYNAMIC_ATLAS_CELL_SIZE, j * DYNAMIC_ATLAS_CELL_SIZE,\n                    DYNAMIC_ATLAS_CELL_SIZE, DYNAMIC_ATLAS_CELL_SIZE));\n            }\n        }\n    }\n \n    public Sprite GetOrLoadSprite(Sprite sprite)\n    {\n        // 拿缓存\n        var spriteInstanceID = sprite.GetInstanceID();\n        //Debug.Log(string.Format(\" name: {0} instanceid: {1}\", sprite.name, spriteInstanceID));\n        int index = -1;\n        if (_spriteRedirectMap.TryGetValue(spriteInstanceID, out index))\n        {\n            var newSprite = _spriteCacheList[index];\n            newSprite.AddReference();\n            return newSprite.sprite;\n        }\n \n        // 检查是不是本身就是动态生成的 如果是的话 什么都不用做\n        for (int i = 0; i \u003C _spriteCacheList.Count; ++i)\n        {\n            var sp = _spriteCacheList[i];\n            if (sp.sprite == sprite)\n            {\n                return sprite;\n            }\n        }\n \n        // 拿不到缓存就找个空格子新增\n        var emptySprite = GetEmptySprite();\n        if (emptySprite != null)\n        {\n            // GPU上直接操作 速度快 兼容性差\n            Graphics.CopyTexture(sprite.texture, 0, 0, (int)sprite.rect.x, (int)sprite.rect.y, (int)sprite.rect.width, (int)sprite.rect.height,\n                                _dynamicAtlasTex, 0, 0, (int)emptySprite.sprite.rect.x, (int)emptySprite.sprite.rect.y);\n \n            // 这里要先删除上一个的\n            index = GetIndex(emptySprite);\n            foreach (var redirect in _spriteRedirectMap)\n            {\n                if (redirect.Value == index)\n                {\n                    _spriteRedirectMap.Remove(redirect.Key);\n                    break;\n                }\n            }\n            _spriteRedirectMap.Add(spriteInstanceID, GetIndex(emptySprite));\n            emptySprite.AddReference();\n            emptySprite.sprite.name = sprite.name + \"(Dynamic)\";\n            return emptySprite.sprite;\n        }\n \n        // 找不到空格子就直接返回sprite\n        return sprite;\n    }\n \n    public void ReleaseSprite(Sprite sprite)\n    {\n        for (int i = 0; i \u003C _spriteCacheList.Count; ++i)\n        {\n            var sp = _spriteCacheList[i];\n            if (sp.sprite == sprite)\n            {\n                sp.RemoveReference();\n                break;\n            }\n        }\n    }\n \n    private NxSpriteInfo GetEmptySprite()\n    {\n        for (int i = 0; i \u003C _spriteCacheList.Count; ++i)\n        {\n            var sp = _spriteCacheList[i];\n            if (sp.IsEmpty())\n                return sp;\n        }\n        return null;\n    }\n \n    private int GetIndex(NxSpriteInfo sprite)\n    {\n        return sprite.x * DYNAMIC_ATLAS_CELL_COUNT + sprite.y;\n    }\n \n}\n",[32357],{"type":597,"tag":629,"props":32358,"children":32359},{"__ignoreMap":591},[32360],{"type":603,"value":32355},{"type":597,"tag":606,"props":32362,"children":32363},{},[32364],{"type":603,"value":32365},"关键代码都在GetOrLoadSprite这个函数里面了，其中最重要的一句就是Graphics.CopyTexture，这个是直接在GPU上操作图片，速度非常快，但是缺点是兼容性不是很好，也用备用方案，直接上内存copy再传到gpu上，会慢一些，demo这里就不做演示了，需要的自行查相关资料，我记得雨松似乎做过类似分享，当时应该是用于角色的贴图合并。",{"type":597,"tag":606,"props":32367,"children":32368},{},[32369],{"type":603,"value":32370},"另外配合这个DynamicAtlas，我也做了一个NxImage来配合它，简单继承了一下ugui的image，在awake和ondestory做了引用计数的加减，只是用于功能演示，真正用到项目中，应该会更加注重细节。",{"type":597,"tag":621,"props":32372,"children":32374},{"code":32373},"\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing UnityEngine.UI;\n \npublic class NxImage : Image\n{\n    protected override void Start()\n    {\n        base.Start();\n \n        if (Application.isPlaying && this.sprite != null)\n        {\n            var dynamicAtlasGo = GameObject.Find(\"DynamicAtlas\");\n            if (dynamicAtlasGo == null)\n            {\n                GameObject go = new GameObject();\n                go.name = \"DynamicAtlas\";\n                go.AddComponent\u003CDynamicAtlas>();\n                dynamicAtlasGo = go;\n            }\n \n            if (dynamicAtlasGo != null)\n            {\n                var dynamicAtlas = dynamicAtlasGo.GetComponent\u003CDynamicAtlas>();\n                if (dynamicAtlas != null)\n                {\n                    this.sprite = dynamicAtlas.GetOrLoadSprite(this.sprite);\n                }\n            }\n        }\n    }\n \n    public void SetNewSprite(Sprite sp)\n    {\n        var dynamicAtlasGo = GameObject.Find(\"DynamicAtlas\");\n        if (dynamicAtlasGo != null)\n        {\n            var dynamicAtlas = dynamicAtlasGo.GetComponent\u003CDynamicAtlas>();\n            if (dynamicAtlas != null)\n            {\n                if (this.sprite != null)\n                    dynamicAtlas.ReleaseSprite(this.sprite);\n                this.sprite = dynamicAtlas.GetOrLoadSprite(sp);\n            }\n        }\n    }\n \n    protected override void OnDestroy()\n    {\n        base.OnDestroy();\n \n        if (this.sprite != null)\n        {\n            var dynamicAtlasGo = GameObject.Find(\"DynamicAtlas\");\n            if (dynamicAtlasGo != null)\n            {\n                var dynamicAtlas = dynamicAtlasGo.GetComponent\u003CDynamicAtlas>();\n                if (dynamicAtlas != null)\n                {\n                    dynamicAtlas.ReleaseSprite(this.sprite);\n                }\n            }\n        }\n \n    }\n}\n",[32375],{"type":597,"tag":629,"props":32376,"children":32377},{"__ignoreMap":591},[32378],{"type":603,"value":32373},{"type":597,"tag":606,"props":32380,"children":32381},{},[32382],{"type":603,"value":32383},"简单挂了几个图片上去测试，效果如下：",{"type":597,"tag":606,"props":32385,"children":32386},{},[32387],{"type":597,"tag":719,"props":32388,"children":32390},{"alt":719,"src":32389},"/images/2020-10-17-runtime-spriteatlas/20190531235426813.png",[],{"type":597,"tag":606,"props":32392,"children":32393},{},[32394],{"type":603,"value":32395},"运行后：",{"type":597,"tag":606,"props":32397,"children":32398},{},[32399],{"type":597,"tag":719,"props":32400,"children":32402},{"alt":719,"src":32401},"/images/2020-10-17-runtime-spriteatlas/20190531235500426.png",[],{"type":597,"tag":606,"props":32404,"children":32405},{},[32406],{"type":603,"value":32407},"可以看到drawcall明显降低了，我们再看看合并后真正用到的图片：",{"type":597,"tag":606,"props":32409,"children":32410},{},[32411],{"type":597,"tag":719,"props":32412,"children":32414},{"alt":719,"src":32413},"/images/2020-10-17-runtime-spriteatlas/20190531235616604.png",[],{"type":597,"tag":606,"props":32416,"children":32417},{},[32418],{"type":597,"tag":719,"props":32419,"children":32421},{"alt":719,"src":32420},"/images/2020-10-17-runtime-spriteatlas/20190531235636594.png",[],{"type":597,"tag":606,"props":32423,"children":32424},{},[32425],{"type":603,"value":32426},"以上就是动态生成图集的简单思路 仅供参考",{"type":597,"tag":1321,"props":32428,"children":32429},{},[32430,32440],{"type":597,"tag":807,"props":32431,"children":32432},{},[32433],{"type":597,"tag":886,"props":32434,"children":32437},{"href":32435,"rel":32436},"https://github.com/DaVikingCode/UnityRuntimeSpriteSheetsGenerator",[890],[32438],{"type":603,"value":32439},"DaVikingCode/UnityRuntimeSpriteSheetsGenerator: Unity – generate SpriteSheets at runtime! (github.com)",{"type":597,"tag":807,"props":32441,"children":32442},{},[32443],{"type":597,"tag":886,"props":32444,"children":32447},{"href":32445,"rel":32446},"https://github.com/jintiao/RuntimeTextureAtlas",[890],[32448],{"type":603,"value":32449},"jintiao/RuntimeTextureAtlas: runtime texture atlas (github.com)",{"title":591,"searchDepth":787,"depth":787,"links":32451},[],"content:unity:2020-10-17-runtime-spriteatlas.md","unity/2020-10-17-runtime-spriteatlas.md","2020-10-17",{"_path":490,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":489,"description":32456,"body":32457,"_type":791,"_id":32838,"_source":793,"_file":32839,"_extension":795,"date":32840},"创建Job需要定义一个结构体，实现IJob接口。实现了IJob接口之后，就可以让这个Job和其他Job并行运行了。",{"type":594,"children":32458,"toc":32834},[32459,32465,32485,32497,32509,32514,32533,32538,32547,32553,32558,32570,32581,32597,32606,32612,32617,32623,32663,32674,32687,32696,32702,32736,32753,32758,32763,32772,32777,32786,32791],{"type":597,"tag":857,"props":32460,"children":32462},{"id":32461},"创建job",[32463],{"type":603,"value":32464},"创建Job",{"type":597,"tag":606,"props":32466,"children":32467},{},[32468,32470,32476,32478,32483],{"type":603,"value":32469},"创建Job需要定义一个结构体，实现",{"type":597,"tag":629,"props":32471,"children":32473},{"className":32472},[],[32474],{"type":603,"value":32475},"IJob",{"type":603,"value":32477},"接口。实现了",{"type":597,"tag":629,"props":32479,"children":32481},{"className":32480},[],[32482],{"type":603,"value":32475},{"type":603,"value":32484},"接口之后，就可以让这个Job和其他Job并行运行了。",{"type":597,"tag":606,"props":32486,"children":32487},{},[32488,32490,32495],{"type":603,"value":32489},"到这呢，就可以给Job一个真正的定义了：Job是一个统称，任何实现了",{"type":597,"tag":629,"props":32491,"children":32493},{"className":32492},[],[32494],{"type":603,"value":32475},{"type":603,"value":32496},"接口的结构体，都可以成为一个Job。",{"type":597,"tag":606,"props":32498,"children":32499},{},[32500,32502,32507],{"type":603,"value":32501},"创建Job的步骤如下：\n1、创建一个实现",{"type":597,"tag":629,"props":32503,"children":32505},{"className":32504},[],[32506],{"type":603,"value":32475},{"type":603,"value":32508},"接口的结构体\n2、给结构体添加所需的成员变量，可以使用blittable类型或者NativeContainer类型。\n3、在结构体中添加一个Execute方法，具体执行的任务在这个方法里实现。",{"type":597,"tag":606,"props":32510,"children":32511},{},[32512],{"type":603,"value":32513},"当执行Job时，Execute方法会在一个内核上执行完毕。",{"type":597,"tag":606,"props":32515,"children":32516},{},[32517,32519,32525,32527,32532],{"type":603,"value":32518},"注意：设计job时，记住job操作的是数据的拷贝，除非使用",{"type":597,"tag":629,"props":32520,"children":32522},{"className":32521},[],[32523],{"type":603,"value":32524},"NativeContainer",{"type":603,"value":32526},"。所以，在主线程访问job数据的唯一方法就是写入",{"type":597,"tag":629,"props":32528,"children":32530},{"className":32529},[],[32531],{"type":603,"value":32524},{"type":603,"value":758},{"type":597,"tag":606,"props":32534,"children":32535},{},[32536],{"type":603,"value":32537},"实例代码如下：",{"type":597,"tag":621,"props":32539,"children":32542},{"className":32540,"code":32541,"language":32269,"meta":591},[32271],"// 这个Job的功能：将两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray\u003Cfloat> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n",[32543],{"type":597,"tag":629,"props":32544,"children":32545},{"__ignoreMap":591},[32546],{"type":603,"value":32541},{"type":597,"tag":857,"props":32548,"children":32550},{"id":32549},"调度job",[32551],{"type":603,"value":32552},"调度Job",{"type":597,"tag":606,"props":32554,"children":32555},{},[32556],{"type":603,"value":32557},"创建Job后，如何执行一个Job呢？",{"type":597,"tag":606,"props":32559,"children":32560},{},[32561,32563,32568],{"type":603,"value":32562},"这时候需要调度Job，调度Job的步骤如下：\n1、实例化Job\n2、构造Job的数据\n3、调用",{"type":597,"tag":629,"props":32564,"children":32566},{"className":32565},[],[32567],{"type":603,"value":28762},{"type":603,"value":32569},"方法。",{"type":597,"tag":606,"props":32571,"children":32572},{},[32573,32574,32579],{"type":603,"value":22662},{"type":597,"tag":629,"props":32575,"children":32577},{"className":32576},[],[32578],{"type":603,"value":28762},{"type":603,"value":32580},"方法会将Job放到Job执行队列的适当位置。一旦安排了Job后，就不能再中断job执行了。",{"type":597,"tag":606,"props":32582,"children":32583},{},[32584,32589,32591,32596],{"type":597,"tag":1080,"props":32585,"children":32586},{},[32587],{"type":603,"value":32588},"注意",{"type":603,"value":32590},"：只能在主线程中调用",{"type":597,"tag":629,"props":32592,"children":32594},{"className":32593},[],[32595],{"type":603,"value":28762},{"type":603,"value":32569},{"type":597,"tag":621,"props":32598,"children":32601},{"className":32599,"code":32600,"language":32269,"meta":591},[32271],"// 创建一个长度为1的native array用来存储job执行后的结果\nNativeArray\u003Cfloat> result = new NativeArray\u003Cfloat>(1, Allocator.TempJob);\n\n// 设置job的数据\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// Schedule\nJobHandle handle = jobData.Schedule();\n\n// 等待job执行完毕\nhandle.Complete();\n\n// 获取result中的数据\nfloat aPlusB = result[0];\n\n// 一定要释放native array申请的内存\nresult.Dispose();\n",[32602],{"type":597,"tag":629,"props":32603,"children":32604},{"__ignoreMap":591},[32605],{"type":603,"value":32600},{"type":597,"tag":857,"props":32607,"children":32609},{"id":32608},"job的依赖关系",[32610],{"type":603,"value":32611},"Job的依赖关系",{"type":597,"tag":606,"props":32613,"children":32614},{},[32615],{"type":603,"value":32616},"很多时候，Job并不是独立运行的，需要依赖前一个Job的结果，这时候如何调度呢？",{"type":597,"tag":598,"props":32618,"children":32620},{"id":32619},"jobhandle",[32621],{"type":603,"value":32622},"JobHandle",{"type":597,"tag":606,"props":32624,"children":32625},{},[32626,32628,32633,32635,32640,32642,32647,32649,32654,32656,32661],{"type":603,"value":32627},"当调用",{"type":597,"tag":629,"props":32629,"children":32631},{"className":32630},[],[32632],{"type":603,"value":28762},{"type":603,"value":32634},"方法时，会返回一个",{"type":597,"tag":629,"props":32636,"children":32638},{"className":32637},[],[32639],{"type":603,"value":32622},{"type":603,"value":32641},"。你可以使用这个",{"type":597,"tag":629,"props":32643,"children":32645},{"className":32644},[],[32646],{"type":603,"value":32622},{"type":603,"value":32648},"作为其他job的依赖项。具体方法就是将第一个job的",{"type":597,"tag":629,"props":32650,"children":32652},{"className":32651},[],[32653],{"type":603,"value":32622},{"type":603,"value":32655},"传给第二个job调用",{"type":597,"tag":629,"props":32657,"children":32659},{"className":32658},[],[32660],{"type":603,"value":28762},{"type":603,"value":32662},"时的参数，例如：",{"type":597,"tag":621,"props":32664,"children":32669},{"className":32665,"code":32667,"language":32668,"meta":591},[32666],"language-undefined","JobHandle firstJobHandle = firstJob.Schedule();\nsecondJob.Schedule(firstJobHandle);\n","undefined",[32670],{"type":597,"tag":629,"props":32671,"children":32672},{"__ignoreMap":591},[32673],{"type":603,"value":32667},{"type":597,"tag":606,"props":32675,"children":32676},{},[32677,32679,32685],{"type":603,"value":32678},"那如果一个job有多个依赖项怎么办呢？这时候可以用",{"type":597,"tag":629,"props":32680,"children":32682},{"className":32681},[],[32683],{"type":603,"value":32684},"JobHandle.CombineDependencies",{"type":603,"value":32686},"方法合并他们。具体如下：",{"type":597,"tag":621,"props":32688,"children":32691},{"className":32689,"code":32690,"language":32269,"meta":591},[32271],"// 声明一个JobHandle的NativeArray数组\nNativeArray\u003CJobHandle> handles = new NativeArray\u003CJobHandle>(numJobs, Allocator.TempJob);\n\n// 将多个handles放到数组中\n\n// 将多个handles合并到一起\nJobHandle jh = JobHandle.CombineDependencies(handles);\n",[32692],{"type":597,"tag":629,"props":32693,"children":32694},{"__ignoreMap":591},[32695],{"type":603,"value":32690},{"type":597,"tag":857,"props":32697,"children":32699},{"id":32698},"等待job执行完毕",[32700],{"type":603,"value":32701},"等待Job执行完毕",{"type":597,"tag":606,"props":32703,"children":32704},{},[32705,32707,32712,32714,32720,32722,32727,32729,32734],{"type":603,"value":32706},"在主线程中如何等待Job执行完毕呢？可以调用",{"type":597,"tag":629,"props":32708,"children":32710},{"className":32709},[],[32711],{"type":603,"value":32622},{"type":603,"value":32713},"中的",{"type":597,"tag":629,"props":32715,"children":32717},{"className":32716},[],[32718],{"type":603,"value":32719},"Complete",{"type":603,"value":32721},"方法强制等待。",{"type":597,"tag":629,"props":32723,"children":32725},{"className":32724},[],[32726],{"type":603,"value":32719},{"type":603,"value":32728},"方法执行过后，你就可以在主线程中安全地访问job中使用的",{"type":597,"tag":629,"props":32730,"children":32732},{"className":32731},[],[32733],{"type":603,"value":32524},{"type":603,"value":32735},"了。",{"type":597,"tag":606,"props":32737,"children":32738},{},[32739,32743,32745,32751],{"type":597,"tag":1080,"props":32740,"children":32741},{},[32742],{"type":603,"value":32588},{"type":603,"value":32744},"\n当你调用job的Schedule方法后，job并不会立即开始执行。如果你在主线程中等待job执行完毕，并且你需要访问job使用的NativeContainer中的数据时，你可以调用",{"type":597,"tag":629,"props":32746,"children":32748},{"className":32747},[],[32749],{"type":603,"value":32750},"JobHandle.Complete",{"type":603,"value":32752},"方法。这个方法会启动job的执行。调用JobHandle的Complete方法后，会将job的NativeContainer所有权还给主线程。所以只有调用过JobHandle上的Complete方法后，主线程才能安全的访问NativeContainer中的数据。同理，也可以调用依赖此job的JobHandle上的Complete方法。例如，你可以调用jobA的Complete方法，也可以调用依赖jobA的JobB的Complete方法。这两种情况下，主线程都可以安全访问jobA使用的NativeContainer。",{"type":597,"tag":598,"props":32754,"children":32756},{"id":32755},"实例代码",[32757],{"type":603,"value":32755},{"type":597,"tag":606,"props":32759,"children":32760},{},[32761],{"type":603,"value":32762},"Job代码：",{"type":597,"tag":621,"props":32764,"children":32767},{"className":32765,"code":32766,"language":32269,"meta":591},[32271],"// Job：两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray\u003Cfloat> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n\n// Job：给一个值加一\npublic struct AddOneJob : IJob\n{\n    public NativeArray\u003Cfloat> result;\n    \n    public void Execute()\n    {\n        result[0] = result[0] + 1;\n    }\n}\n",[32768],{"type":597,"tag":629,"props":32769,"children":32770},{"__ignoreMap":591},[32771],{"type":603,"value":32766},{"type":597,"tag":606,"props":32773,"children":32774},{},[32775],{"type":603,"value":32776},"主线程代码：",{"type":597,"tag":621,"props":32778,"children":32781},{"className":32779,"code":32780,"language":32269,"meta":591},[32271],"// 创建存储结果的NativeArray\nNativeArray\u003Cfloat> result = new NativeArray\u003Cfloat>(1, Allocator.TempJob);\n\n// 设置job #1\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// 调度job1\nJobHandle firstHandle = jobData.Schedule();\n\n// 设置job2\nAddOneJob incJobData = new AddOneJob();\nincJobData.result = result;\n\n// 调度 job2，依赖job1\nJobHandle secondHandle = incJobData.Schedule(firstHandle);\n\n// 等待job2执行完毕\nsecondHandle.Complete();\n\n// 访问结果\nfloat aPlusB = result[0];\n\n// 释放内存\nresult.Dispose();\n",[32782],{"type":597,"tag":629,"props":32783,"children":32784},{"__ignoreMap":591},[32785],{"type":603,"value":32780},{"type":597,"tag":857,"props":32787,"children":32789},{"id":32788},"相关链接",[32790],{"type":603,"value":32788},{"type":597,"tag":1321,"props":32792,"children":32793},{},[32794,32804,32814,32824],{"type":597,"tag":807,"props":32795,"children":32796},{},[32797],{"type":597,"tag":886,"props":32798,"children":32801},{"href":32799,"rel":32800},"https://docs.unity3d.com/cn/2020.2/Manual/JobSystem.html",[890],[32802],{"type":603,"value":32803},"C# 作业系统 - Unity 手册 (unity3d.com)",{"type":597,"tag":807,"props":32805,"children":32806},{},[32807],{"type":597,"tag":886,"props":32808,"children":32811},{"href":32809,"rel":32810},"https://mp.weixin.qq.com/s/ZOVzDZQYBkfs6gAdrTMJUA",[890],[32812],{"type":603,"value":32813},"Job System介绍",{"type":597,"tag":807,"props":32815,"children":32816},{},[32817],{"type":597,"tag":886,"props":32818,"children":32821},{"href":32819,"rel":32820},"https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247495224&idx=1&sn=6da0b515c54aee71ae64166369ae2320&chksm=fe1dda93c96a53851da09775d9c4a8947a26b26dfdc4aba2775685efee3451c026a8d353a851&mpshare=1&scene=23&srcid=1026M4Dnvzb65VokHexArRV2#rd",[890],[32822],{"type":603,"value":32823},"深入解读Job System（1） ",{"type":597,"tag":807,"props":32825,"children":32826},{},[32827],{"type":597,"tag":886,"props":32828,"children":32831},{"href":32829,"rel":32830},"https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247495225&idx=1&sn=8c7212a747704da0b85d364529464509&chksm=fe1dda92c96a53848bca7cf95731ce8a9c853c80a4d3e7aa3f249c87d3a50620f30ce85254d6&mpshare=1&scene=23&srcid=1026HlBykd8qHTStfScE4ION#rd",[890],[32832],{"type":603,"value":32833},"深入解读Job system（2）",{"title":591,"searchDepth":787,"depth":787,"links":32835},[32836,32837],{"id":32619,"depth":787,"text":32622},{"id":32755,"depth":787,"text":32755},"content:unity:2020-10-16-unity-job.md","unity/2020-10-16-unity-job.md","2020-10-16",{"_path":487,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":486,"description":32842,"body":32843,"_type":791,"_id":33853,"_source":793,"_file":33854,"_extension":795,"date":33855},"DOTS面向数据栈编程ecs   在OOP方法中，数据不会被组织起来，而是会分散再整个内存中，这是因为使用了自动内存管理功能。job system 传统只使用了单线程,配合ecs提供了多线程解决方案brust compiler 将c#直接转换为汇编ECS核心概念这个图中，System读取了多个实体的Translation和Rotation组件，然后经过计算处理，将结果更新到LocalToWorld组件中。从图中你可以看到，实体A和B还有Renderer组件，但是C并没有。不过这并不会影响System的计算逻辑，因为这个系统不关心Renderer组件。原型 Archetypes多个组件的组合叫做",{"type":594,"children":32844,"toc":33838},[32845,32850,32868,32874,32881,32906,32919,32925,32930,32935,32942,32947,32952,32970,32975,32980,32987,32992,32997,33013,33018,33024,33029,33037,33042,33061,33081,33087,33092,33100,33108,33116,33124,33139,33147,33155,33163,33168,33183,33191,33205,33213,33221,33229,33235,33240,33260,33268,33273,33281,33286,33291,33296,33307,33312,33320,33328,33414,33419,33427,33438,33450,33458,33469,33489,33507,33513,33519,33589,33608,33612,33617,33650,33662,33668,33724,33729,33735,33755,33760,33765,33771,33775],{"type":597,"tag":606,"props":32846,"children":32847},{},[32848],{"type":603,"value":32849},"DOTS面向数据栈编程",{"type":597,"tag":1321,"props":32851,"children":32852},{},[32853,32858,32863],{"type":597,"tag":807,"props":32854,"children":32855},{},[32856],{"type":603,"value":32857},"ecs   在OOP方法中，数据不会被组织起来，而是会分散再整个内存中，这是因为使用了自动内存管理功能。",{"type":597,"tag":807,"props":32859,"children":32860},{},[32861],{"type":603,"value":32862},"job system 传统只使用了单线程,配合ecs提供了多线程解决方案",{"type":597,"tag":807,"props":32864,"children":32865},{},[32866],{"type":603,"value":32867},"brust compiler 将c#直接转换为汇编",{"type":597,"tag":857,"props":32869,"children":32871},{"id":32870},"ecs核心概念",[32872],{"type":603,"value":32873},"ECS核心概念",{"type":597,"tag":606,"props":32875,"children":32876},{},[32877],{"type":597,"tag":719,"props":32878,"children":32880},{"alt":719,"src":32879},"/images/2020-10-15-unity-ecs/ECSBlockDiagram.png",[],{"type":597,"tag":606,"props":32882,"children":32883},{},[32884,32886,32891,32892,32897,32899,32904],{"type":603,"value":32885},"这个图中，System读取了多个实体的",{"type":597,"tag":629,"props":32887,"children":32889},{"className":32888},[],[32890],{"type":603,"value":22523},{"type":603,"value":695},{"type":597,"tag":629,"props":32893,"children":32895},{"className":32894},[],[32896],{"type":603,"value":22530},{"type":603,"value":32898},"组件，然后经过计算处理，将结果更新到",{"type":597,"tag":629,"props":32900,"children":32902},{"className":32901},[],[32903],{"type":603,"value":22560},{"type":603,"value":32905},"组件中。",{"type":597,"tag":606,"props":32907,"children":32908},{},[32909,32911,32917],{"type":603,"value":32910},"从图中你可以看到，实体A和B还有Renderer组件，但是C并没有。不过这并不会影响System的计算逻辑，因为这个系统不关心",{"type":597,"tag":629,"props":32912,"children":32914},{"className":32913},[],[32915],{"type":603,"value":32916},"Renderer",{"type":603,"value":32918},"组件。",{"type":597,"tag":598,"props":32920,"children":32922},{"id":32921},"原型-archetypes",[32923],{"type":603,"value":32924},"原型 Archetypes",{"type":597,"tag":606,"props":32926,"children":32927},{},[32928],{"type":603,"value":32929},"多个组件的组合叫做一个原型。",{"type":597,"tag":606,"props":32931,"children":32932},{},[32933],{"type":603,"value":32934},"比如一个3D物体可能会包含用于transform的组件，包括移动、旋转、渲染，每个3D物体对应一个实体，但是他们都有同样的组件，所以ECS会把他们分类成是一类原型。",{"type":597,"tag":606,"props":32936,"children":32937},{},[32938],{"type":597,"tag":719,"props":32939,"children":32941},{"alt":719,"src":32940},"/images/2020-10-15-unity-ecs/ArchetypeDiagram.png",[],{"type":597,"tag":606,"props":32943,"children":32944},{},[32945],{"type":603,"value":32946},"在上图中，实体A和B的原型都是M，实体C的原型是N。",{"type":597,"tag":606,"props":32948,"children":32949},{},[32950],{"type":603,"value":32951},"你也可以通过在运行时添加或者移除component来改变一个实体的原型。例如：如果将实体B的Renderer组件移除，实体B的原型就会变成N。",{"type":597,"tag":606,"props":32953,"children":32954},{},[32955,32957,32962,32968],{"type":603,"value":32956},"一个实体的原型是什么，决定了ECS会将实体的components也就是数据存在什么地方。",{"type":597,"tag":1080,"props":32958,"children":32959},{},[32960],{"type":603,"value":32961},"ECS按块分配内存，每块用一个",{"type":597,"tag":629,"props":32963,"children":32965},{"className":32964},[],[32966],{"type":603,"value":32967},"ArchetypeChunk",{"type":603,"value":32969},"对象表示。",{"type":597,"tag":606,"props":32971,"children":32972},{},[32973],{"type":603,"value":32974},"一个块只包含一种原型，可以包含的多个实体的数据。如果一个块的内存满了，ECS会分配一个新的块来存储新的实体的components。",{"type":597,"tag":606,"props":32976,"children":32977},{},[32978],{"type":603,"value":32979},"如果你修改了实体的组件，那就相当于修改了实体的原型，这时候ECS会将实体的组件数据移到另外一个块中。",{"type":597,"tag":606,"props":32981,"children":32982},{},[32983],{"type":597,"tag":719,"props":32984,"children":32986},{"alt":719,"src":32985},"/images/2020-10-15-unity-ecs/ArchetypeChunkDiagram.png",[],{"type":597,"tag":606,"props":32988,"children":32989},{},[32990],{"type":603,"value":32991},"原型和内存块的关系是一对多的关系。这就意味着，如果想查询给定的一组component类型的所有实体，只需要在这些原型中搜索即可。这样会比在所有的实体中查找效率高很多。",{"type":597,"tag":606,"props":32993,"children":32994},{},[32995],{"type":603,"value":32996},"ECS在存储实体到内存块中没有特殊的排序，当创建一个实体或者实体的原型发生变化时，ECS会将它放到对应原型的第一个还有空间的内存块中。内存块中的数据会紧密排列。如果一个实体要被移出当前原型的内存块，这时候会有个空位，ECS会把这个内存块最后的实体数据移动到这个空位中。",{"type":597,"tag":606,"props":32998,"children":32999},{},[33000,33004,33006,33011],{"type":597,"tag":1080,"props":33001,"children":33002},{},[33003],{"type":603,"value":32588},{"type":603,"value":33005},"：原型中的",{"type":597,"tag":1080,"props":33007,"children":33008},{},[33009],{"type":603,"value":33010},"共享组件",{"type":603,"value":33012},"（后面会具体说这是个什么东东）的数据也会影响实体会被存在哪个内存块。同一个内存块中的所有实体的共享组件中的数据值都是相同的。如果你修改了共享组件中的数据，这个实体会被移到另外一个块中，有点类似修改了实体的原型。",{"type":597,"tag":606,"props":33014,"children":33015},{},[33016],{"type":603,"value":33017},"将共享组件的实体分到一个内存块中会提高处理他们的速度。比如Hybird Renderer（混合渲染）定义了RenderMesh组件来达成这个目的。",{"type":597,"tag":598,"props":33019,"children":33021},{"id":33020},"实体-entity",[33022],{"type":603,"value":33023},"实体 Entity",{"type":597,"tag":606,"props":33025,"children":33026},{},[33027],{"type":603,"value":33028},"在代码层面，你就可以了解到，实体非常非常的简单。它的核心部分：",{"type":597,"tag":621,"props":33030,"children":33032},{"code":33031},"public struct Entity\n{\n  public int Index;\n  public int Version; \n}\n",[33033],{"type":597,"tag":629,"props":33034,"children":33035},{"__ignoreMap":591},[33036],{"type":603,"value":33031},{"type":597,"tag":606,"props":33038,"children":33039},{},[33040],{"type":603,"value":33041},"Index表示这个实体的ID，和身份证一样用于实体与实体之间区分。Version用于描述这个实体的生命周期，由于实体是可以重用的，那么就需要用Version来区分这个Entity是新生实体，还是即将销毁的实体。",{"type":597,"tag":606,"props":33043,"children":33044},{},[33045,33047,33052,33054,33059],{"type":603,"value":33046},"ECS中有一个",{"type":597,"tag":629,"props":33048,"children":33050},{"className":33049},[],[33051],{"type":603,"value":26941},{"type":603,"value":33053},"类来管理一个World中的所有实体。",{"type":597,"tag":629,"props":33055,"children":33057},{"className":33056},[],[33058],{"type":603,"value":26941},{"type":603,"value":33060},"使用列表维护所有实体以及和实体关联的数据，以便达到最优的性能。",{"type":597,"tag":606,"props":33062,"children":33063},{},[33064,33066,33072,33074,33079],{"type":603,"value":33065},"虽然entity没有类型，但是可以根据entity关联的component将他们分组，也就是上一节讲的实体原型（EntityArchetype），EntityManager会持续跟踪这些实体原型。你可以使用已有的",{"type":597,"tag":629,"props":33067,"children":33069},{"className":33068},[],[33070],{"type":603,"value":33071},"EntityArchetype",{"type":603,"value":33073},"来创建entity，也可以提前创建",{"type":597,"tag":629,"props":33075,"children":33077},{"className":33076},[],[33078],{"type":603,"value":33071},{"type":603,"value":33080},"，以便后面的使用。",{"type":597,"tag":1023,"props":33082,"children":33084},{"id":33083},"创建entity",[33085],{"type":603,"value":33086},"创建Entity",{"type":597,"tag":606,"props":33088,"children":33089},{},[33090],{"type":603,"value":33091},"通过以下方法可以一次创建一个Entity：",{"type":597,"tag":1321,"props":33093,"children":33094},{},[33095],{"type":597,"tag":807,"props":33096,"children":33097},{},[33098],{"type":603,"value":33099},"使用ComponentType的数组来创建一个entity",{"type":597,"tag":621,"props":33101,"children":33103},{"code":33102},"EntityManager.CreateEntity(ComponentType[])\n",[33104],{"type":597,"tag":629,"props":33105,"children":33106},{"__ignoreMap":591},[33107],{"type":603,"value":33102},{"type":597,"tag":1321,"props":33109,"children":33110},{},[33111],{"type":597,"tag":807,"props":33112,"children":33113},{},[33114],{"type":603,"value":33115},"使用EntityArchetype来创建一个entity",{"type":597,"tag":621,"props":33117,"children":33119},{"code":33118},"EntityManager.CreateEntity(EntityArchetype)\n",[33120],{"type":597,"tag":629,"props":33121,"children":33122},{"__ignoreMap":591},[33123],{"type":603,"value":33118},{"type":597,"tag":1321,"props":33125,"children":33126},{},[33127],{"type":597,"tag":807,"props":33128,"children":33129},{},[33130,33131,33137],{"type":603,"value":27177},{"type":597,"tag":629,"props":33132,"children":33134},{"className":33133},[],[33135],{"type":603,"value":33136},"EntityManager.Instantiate",{"type":603,"value":33138},"复制一个已有的entity，包括它里面的数据",{"type":597,"tag":621,"props":33140,"children":33142},{"code":33141},"EntityManager.Instantiate(Entity srcEntity);\nEntityManager.Instantiate(NativeArray\u003CEntity> srcEntities, NativeArray\u003CEntity> outputEntities)\n",[33143],{"type":597,"tag":629,"props":33144,"children":33145},{"__ignoreMap":591},[33146],{"type":603,"value":33141},{"type":597,"tag":1321,"props":33148,"children":33149},{},[33150],{"type":597,"tag":807,"props":33151,"children":33152},{},[33153],{"type":603,"value":33154},"也可以创建一个空的Entity，在需要的时候在加上components。(您可以立即添加组件，也可以根据需要添加其他组件。)",{"type":597,"tag":621,"props":33156,"children":33158},{"code":33157},"var entity = EntityManager.CreateEntity();\nEntityManager.AddComponent(Entity entity, ComponentType componentType)\n",[33159],{"type":597,"tag":629,"props":33160,"children":33161},{"__ignoreMap":591},[33162],{"type":603,"value":33157},{"type":597,"tag":606,"props":33164,"children":33165},{},[33166],{"type":603,"value":33167},"你也可以通过下面的方法一次创建多个Entity：",{"type":597,"tag":1321,"props":33169,"children":33170},{},[33171],{"type":597,"tag":807,"props":33172,"children":33173},{},[33174,33175,33181],{"type":603,"value":8220},{"type":597,"tag":629,"props":33176,"children":33178},{"className":33177},[],[33179],{"type":603,"value":33180},"CreateEntity",{"type":603,"value":33182},"方法一次性填充多个新的Entity到一个NativeArry中，这些entity用同样的原型",{"type":597,"tag":621,"props":33184,"children":33186},{"code":33185},"EntityManager.CreateEntity(EntityArchetype archetype, NativeArray\u003CEntity> entities)\n",[33187],{"type":597,"tag":629,"props":33188,"children":33189},{"__ignoreMap":591},[33190],{"type":603,"value":33185},{"type":597,"tag":1321,"props":33192,"children":33193},{},[33194],{"type":597,"tag":807,"props":33195,"children":33196},{},[33197,33198,33203],{"type":603,"value":8220},{"type":597,"tag":629,"props":33199,"children":33201},{"className":33200},[],[33202],{"type":603,"value":4729},{"type":603,"value":33204},"方法一次性复制多个entity，包含数据",{"type":597,"tag":621,"props":33206,"children":33208},{"code":33207},"EntityManager.Instantiate(NativeArray\u003CEntity> srcEntities, NativeArray\u003CEntity> outputEntities)\n",[33209],{"type":597,"tag":629,"props":33210,"children":33211},{"__ignoreMap":591},[33212],{"type":603,"value":33207},{"type":597,"tag":1321,"props":33214,"children":33215},{},[33216],{"type":597,"tag":807,"props":33217,"children":33218},{},[33219],{"type":603,"value":33220},"显式创建使用指定数量的实体填充的块，并使用CreateChunk创建给定原型",{"type":597,"tag":621,"props":33222,"children":33224},{"code":33223},"EntityManager.CreateChunk(EntityArchetype, NativeArray\u003CArchetypeChunk>, Int32)\n",[33225],{"type":597,"tag":629,"props":33226,"children":33227},{"__ignoreMap":591},[33228],{"type":603,"value":33223},{"type":597,"tag":1023,"props":33230,"children":33232},{"id":33231},"添加删除-component",[33233],{"type":603,"value":33234},"添加/删除 component",{"type":597,"tag":606,"props":33236,"children":33237},{},[33238],{"type":603,"value":33239},"创建完Entity后，你可以添加或者移除component。注意添加或移除component时，entity的原型会发生变化，这时候EntityManager需要将entity移到其他内存块，并将当前内存块的空位补上。",{"type":597,"tag":606,"props":33241,"children":33242},{},[33243,33245,33250,33252,33258],{"type":603,"value":33244},"对实体的更改导致结构性更改-会造成Entity原型变化的操作不能在Job里面执行，比如添加移除component、修改",{"type":597,"tag":629,"props":33246,"children":33248},{"className":33247},[],[33249],{"type":603,"value":31545},{"type":603,"value":33251},"中的值、销毁entity。你可以将前面说的这几种操作放进",{"type":597,"tag":629,"props":33253,"children":33255},{"className":33254},[],[33256],{"type":603,"value":33257},"EntityCommandBuffer",{"type":603,"value":33259},"中，在job执行完成后执行这个command buffer。后面还会具体讲解CommandBuffer。",{"type":597,"tag":621,"props":33261,"children":33263},{"code":33262},"struct Lifetime : IComponentData\n{\n    public byte Value;\n}\n\nclass LifetimeSystem : SystemBase\n{\n    EndSimulationEntityCommandBufferSystem m_EndSimulationEcbSystem;\n    protected override void OnCreate()\n    {\n        base.OnCreate();\n        // 从World中获取ECS系统并且存起来\n        m_EndSimulationEcbSystem = World\n            .GetOrCreateSystem\u003CEndSimulationEntityCommandBufferSystem>();\n    }\n\n    protected override void OnUpdate()\n    {\n        // 请求一个ECB并且转换成可并行的\n        var ecb = m_EndSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter();\n        Entities\n            .ForEach((Entity entity, int entityInQueryIndex, ref Lifetime lifetime) =>\n        {\n            // 检测entity的lifetime，如果为0则销毁它\n            if (lifetime.Value == 0)\n            {\n                // 将entityInQueryIndex传给操作，这样ECS回放时能保证正确的顺序\n                ecb.DestroyEntity(entityInQueryIndex, entity);\n            }\n            else\n            {\n                lifetime.Value -= 1;\n            }\n        }).ScheduleParallel();\n\n        // 保证ECB system依赖当前这个Job\n        m_EndSimulationEcbSystem.AddJobHandleForProducer(this.Dependency);\n    }\n}\n",[33264],{"type":597,"tag":629,"props":33265,"children":33266},{"__ignoreMap":591},[33267],{"type":603,"value":33262},{"type":597,"tag":606,"props":33269,"children":33270},{},[33271],{"type":603,"value":33272},"EntityManager也提供了方法用来添加、移除单个entity中的组件，也可以移除一个entity的NativeArray中的组件。后面组件部分会详细说明。",{"type":597,"tag":621,"props":33274,"children":33276},{"code":33275},"EntityManager.AddComponent(Entity entity, ComponentType componentType)\n",[33277],{"type":597,"tag":629,"props":33278,"children":33279},{"__ignoreMap":591},[33280],{"type":603,"value":33275},{"type":597,"tag":1023,"props":33282,"children":33284},{"id":33283},"访问实体数据",[33285],{"type":603,"value":33283},{"type":597,"tag":606,"props":33287,"children":33288},{},[33289],{"type":603,"value":33290},"遍历实体和组件最有效的方式时在一个并行化的Job中按顺序处理组件 . 这利用了CPU的多核性能，并避免CPU的缓存丢失",{"type":597,"tag":606,"props":33292,"children":33293},{},[33294],{"type":603,"value":33295},"ECS API提供了多种遍历的方式，每个都有自己的性能影响和限制. 下面是方法:",{"type":597,"tag":3995,"props":33297,"children":33299},{"id":33298},"systembaseentitiesforeach",[33300],{"type":597,"tag":886,"props":33301,"children":33304},{"href":33302,"rel":33303},"https://docs.unity3d.com/Packages/com.unity.entities@0.14/api/Unity.Entities.SystemBase.html#Unity_Entities_SystemBase_Entities",[890],[33305],{"type":603,"value":33306},"SystemBase.Entities.ForEach",{"type":597,"tag":606,"props":33308,"children":33309},{},[33310],{"type":603,"value":33311},"使用一个job结构来有效的遍历实体.",{"type":597,"tag":621,"props":33313,"children":33315},{"code":33314},"       Entities\n           .WithName(\"Update_Position\") // Shown in error messages and profiler\n           .WithAll\u003CLocalToWorld>() // Require the LocalToWorld component\n           .ForEach(\n               // Write to Displacement (ref), read Velocity (in)\n               (ref Position position, in Velocity velocity) =>\n               {\n                   //Execute for each selected entity\n                   position = new Position()\n                   {\n                       // dT is a captured variable\n                       Value = position.Value + velocity.Value * dT\n                   };\n               }\n           )\n           .ScheduleParallel(); // Schedule as a parallel job\n           \n",[33316],{"type":597,"tag":629,"props":33317,"children":33318},{"__ignoreMap":591},[33319],{"type":603,"value":33314},{"type":597,"tag":606,"props":33321,"children":33322},{},[33323],{"type":597,"tag":1080,"props":33324,"children":33325},{},[33326],{"type":603,"value":33327},"实体查询",{"type":597,"tag":1321,"props":33329,"children":33330},{},[33331,33342,33353,33364,33384,33395],{"type":597,"tag":807,"props":33332,"children":33333},{},[33334,33340],{"type":597,"tag":629,"props":33335,"children":33337},{"className":33336},[],[33338],{"type":603,"value":33339},"WithAll\u003CT>",{"type":603,"value":33341}," — 一个实体必须具有所有这些组件类型 (除了在lambda参数列表中找到所有组件类型之外)",{"type":597,"tag":807,"props":33343,"children":33344},{},[33345,33351],{"type":597,"tag":629,"props":33346,"children":33348},{"className":33347},[],[33349],{"type":603,"value":33350},"WithAny\u003CT,U>",{"type":603,"value":33352}," — 一个实体必须有一个或多个这样的组件类型.注意，允许使用WithAny指定单个组件类型;但是，由于实体必须有一个或多个这样的“可选”组件类型供查询选择，因此使用带有单个类型的WithAny等同于将该类型放在WithAll语句中。",{"type":597,"tag":807,"props":33354,"children":33355},{},[33356,33362],{"type":597,"tag":629,"props":33357,"children":33359},{"className":33358},[],[33360],{"type":603,"value":33361},"WithNone\u003CT>",{"type":603,"value":33363}," — 实体不能具有任何这些组件类型",{"type":597,"tag":807,"props":33365,"children":33366},{},[33367,33373,33375,33382],{"type":597,"tag":629,"props":33368,"children":33370},{"className":33369},[],[33371],{"type":603,"value":33372},"WithChangeFilter\u003CT>",{"type":603,"value":33374}," — 只选择子上次 ",{"type":597,"tag":886,"props":33376,"children":33379},{"href":33377,"rel":33378},"https://docs.unity3d.com/Packages/com.unity.entities@0.6/api/Unity.Entities.JobComponentSystem.html",[890],[33380],{"type":603,"value":33381},"JobComponentSystem",{"type":603,"value":33383}," 更新以来，特性组件发生变化的实体",{"type":597,"tag":807,"props":33385,"children":33386},{},[33387,33393],{"type":597,"tag":629,"props":33388,"children":33390},{"className":33389},[],[33391],{"type":603,"value":33392},"WithSharedComponentFilter",{"type":603,"value":33394}," — 只选择拥有特定值的share component的块",{"type":597,"tag":807,"props":33396,"children":33397},{},[33398,33404,33406,33412],{"type":597,"tag":629,"props":33399,"children":33401},{"className":33400},[],[33402],{"type":603,"value":33403},"WithStoreEntityQueryInField",{"type":603,"value":33405}," — 把Entities.ForEach生成的 ",{"type":597,"tag":886,"props":33407,"children":33410},{"href":33408,"rel":33409},"https://docs.unity3d.com/Packages/com.unity.entities@0.6/api/Unity.Entities.EntityQuery.html",[890],[33411],{"type":603,"value":26353},{"type":603,"value":33413}," 对象存储在一个 EntityQuery 字段里. 您可以使用这个EntityQuery对象用于获取符合条件的实体的数量.注意，这个函数在创建JobComponentSystem时将EntityQuery实例分配给您的字段. 这意味着您可以在第一次执行lambda函数之前使用查询。",{"type":597,"tag":606,"props":33415,"children":33416},{},[33417],{"type":603,"value":33418},"不要使用WithAny\u003CT、U>或WithNone向查询添加参数列表中的组件。所有添加到lambda函数参数列表中的组件都会自动添加到实体查询的WithAll列表中;向WithAll列表和WithAny或WithNone列表添加组件会创建一个不合逻辑的查询。",{"type":597,"tag":621,"props":33420,"children":33422},{"code":33421}," Entities.WithAll\u003CLocalToWorld>()\n    .WithAny\u003CRotation, Translation, Scale>()\n    .WithNone\u003CLocalToParent>()\n    .ForEach((ref Destination outputData, in Source inputData) =>\n    {\n        /* do some work */\n    })\n    .Schedule(inputDeps);\n    \nEntities\n    .WithChangeFilter\u003CSource>()\n    .ForEach((ref Destination outputData,\n    in Source inputData) =>\n    {\n    /* Do work */\n    })\n    .Schedule(inputDeps);\n",[33423],{"type":597,"tag":629,"props":33424,"children":33425},{"__ignoreMap":591},[33426],{"type":603,"value":33421},{"type":597,"tag":3995,"props":33428,"children":33430},{"id":33429},"ijobchunk",[33431],{"type":597,"tag":886,"props":33432,"children":33435},{"href":33433,"rel":33434},"https://docs.unity3d.com/Packages/com.unity.entities@0.14/manual/chunk_iteration_job.html",[890],[33436],{"type":603,"value":33437},"IJobChunk",{"type":597,"tag":606,"props":33439,"children":33440},{},[33441,33443,33448],{"type":603,"value":33442},"遍历所有符合条件的内存块(called a ",{"type":597,"tag":1733,"props":33444,"children":33445},{},[33446],{"type":603,"value":33447},"Chunk",{"type":603,"value":33449},")，其中包含的是符合条件的实体 . Job Execute() 方法可以用for循环遍历所有的块中的元素，你可以使用 IJobChunk 来执行比 IJobForEach更复杂的操作,同时保持最高效率.",{"type":597,"tag":621,"props":33451,"children":33453},{"code":33452},"[BurstCompile]\nstruct UpdateJob : IJobChunk\n{\n    public ComponentTypeHandle\u003CInputA> InputATypeHandle;\n    public ComponentTypeHandle\u003CInputB> InputBTypeHandle;\n    [ReadOnly] public ComponentTypeHandle\u003COutput> OutputTypeHandle;\n    public uint LastSystemVersion;\n\n    public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n    {\n        var inputAChanged = chunk.DidChange(InputATypeHandle, LastSystemVersion);\n        var inputBChanged = chunk.DidChange(InputBTypeHandle, LastSystemVersion);\n\n        // If neither component changed, skip the current chunk\n        if (!(inputAChanged || inputBChanged))\n            return;\n\n        var inputAs = chunk.GetNativeArray(InputATypeHandle);\n        var inputBs = chunk.GetNativeArray(InputBTypeHandle);\n        var outputs = chunk.GetNativeArray(OutputTypeHandle);\n\n        for (var i = 0; i \u003C outputs.Length; i++)\n        {\n            outputs[i] = new Output { Value = inputAs[i].Value + inputBs[i].Value };\n        }\n    }\n}\n",[33454],{"type":597,"tag":629,"props":33455,"children":33456},{"__ignoreMap":591},[33457],{"type":603,"value":33452},{"type":597,"tag":3995,"props":33459,"children":33461},{"id":33460},"manual-iteration",[33462],{"type":597,"tag":886,"props":33463,"children":33466},{"href":33464,"rel":33465},"https://docs.unity3d.com/Packages/com.unity.entities@0.1/manual/manual_iteration.html",[890],[33467],{"type":603,"value":33468},"Manual iteration",{"type":597,"tag":606,"props":33470,"children":33471},{},[33472,33474,33479,33481,33487],{"type":603,"value":33473},"如果以前的方法不足, 您可以手动遍历实体或块.例如，您可以获得一个包含实体的",{"type":597,"tag":629,"props":33475,"children":33477},{"className":33476},[],[33478],{"type":603,"value":26328},{"type":603,"value":33480},"，或者您想要处理的实体的块，使用Job(比如",{"type":597,"tag":629,"props":33482,"children":33484},{"className":33483},[],[33485],{"type":603,"value":33486},"IJobParallelFor",{"type":603,"value":33488},")对它们进行遍历。",{"type":597,"tag":606,"props":33490,"children":33491},{},[33492,33498,33500,33505],{"type":597,"tag":886,"props":33493,"children":33496},{"href":33494,"rel":33495},"https://docs.unity3d.com/Packages/com.unity.entities@0.1/manual/ecs_entity_query.html",[890],[33497],{"type":603,"value":26353},{"type":603,"value":33499}," 类提供了一个构造一个你数据的视图方法，这个视图仅仅包含你算法或者程序中需要的特定的数据. 上面列表中的许多遍历方法都使用EntityQuery，无论是显式的还是内部的。就是可以通过 ",{"type":597,"tag":886,"props":33501,"children":33503},{"href":33494,"rel":33502},[890],[33504],{"type":603,"value":26353},{"type":603,"value":33506}," 来只遍历符合条件的实体或组件",{"type":597,"tag":598,"props":33508,"children":33510},{"id":33509},"系统-system",[33511],{"type":603,"value":33512},"系统 System",{"type":597,"tag":1023,"props":33514,"children":33516},{"id":33515},"disableautocreation",[33517],{"type":603,"value":33518},"DisableAutoCreation",{"type":597,"tag":1321,"props":33520,"children":33521},{},[33522,33561],{"type":597,"tag":807,"props":33523,"children":33524},{},[33525,33527,33533,33534,33540,33541,33546,33548,33554,33555],{"type":603,"value":33526},"如果只是单纯的createsystem,不会执行",{"type":597,"tag":629,"props":33528,"children":33530},{"className":33529},[],[33531],{"type":603,"value":33532},"OnStartRunning",{"type":603,"value":9688},{"type":597,"tag":629,"props":33535,"children":33537},{"className":33536},[],[33538],{"type":603,"value":33539},"OnStopRunning",{"type":603,"value":9688},{"type":597,"tag":629,"props":33542,"children":33544},{"className":33543},[],[33545],{"type":603,"value":27598},{"type":603,"value":33547},"..但是会执行",{"type":597,"tag":629,"props":33549,"children":33551},{"className":33550},[],[33552],{"type":603,"value":33553},"OnCreate",{"type":603,"value":9688},{"type":597,"tag":629,"props":33556,"children":33558},{"className":33557},[],[33559],{"type":603,"value":33560},"OnDestroy",{"type":597,"tag":807,"props":33562,"children":33563},{},[33564,33570,33572,33577,33578,33583,33584],{"type":597,"tag":629,"props":33565,"children":33567},{"className":33566},[],[33568],{"type":603,"value":33569},"AddSystemToUpdateList",{"type":603,"value":33571}," 且 Entities.ForEach中的query有结果才会执行",{"type":597,"tag":629,"props":33573,"children":33575},{"className":33574},[],[33576],{"type":603,"value":33532},{"type":603,"value":9688},{"type":597,"tag":629,"props":33579,"children":33581},{"className":33580},[],[33582],{"type":603,"value":33539},{"type":603,"value":9688},{"type":597,"tag":629,"props":33585,"children":33587},{"className":33586},[],[33588],{"type":603,"value":27598},{"type":597,"tag":606,"props":33590,"children":33591},{},[33592,33594,33599,33601,33606],{"type":603,"value":33593},"所以可以使用",{"type":597,"tag":629,"props":33595,"children":33597},{"className":33596},[],[33598],{"type":603,"value":33518},{"type":603,"value":33600},",但不",{"type":597,"tag":629,"props":33602,"children":33604},{"className":33603},[],[33605],{"type":603,"value":33569},{"type":603,"value":33607},"添加到循环列表中,把一个system当作工具类使用",{"type":597,"tag":1023,"props":33609,"children":33610},{"id":33327},[33611],{"type":603,"value":33327},{"type":597,"tag":606,"props":33613,"children":33614},{},[33615],{"type":603,"value":33616},"一个System根据什么来决定处理哪些实体呢？这时候会用到一个叫实体查询(Entity Query)的东西。实体查询首先需要一些组件类型，然后根据你传入的组件类型的组合，在包含这些组件的原型中查询符合要求的实体。查询时可以指定下面三种类型：",{"type":597,"tag":1321,"props":33618,"children":33619},{},[33620,33630,33640],{"type":597,"tag":807,"props":33621,"children":33622},{},[33623,33628],{"type":597,"tag":1080,"props":33624,"children":33625},{},[33626],{"type":603,"value":33627},"All",{"type":603,"value":33629}," 必须包含All中所有的组件类型",{"type":597,"tag":807,"props":33631,"children":33632},{},[33633,33638],{"type":597,"tag":1080,"props":33634,"children":33635},{},[33636],{"type":603,"value":33637},"Any",{"type":603,"value":33639}," 必须包含Any中至少一个组件类型",{"type":597,"tag":807,"props":33641,"children":33642},{},[33643,33648],{"type":597,"tag":1080,"props":33644,"children":33645},{},[33646],{"type":603,"value":33647},"None",{"type":603,"value":33649}," 不能包含None中任意一个组件类型",{"type":597,"tag":606,"props":33651,"children":33652},{},[33653,33655,33660],{"type":603,"value":33654},"一次实体查询的结果会返回所有符合查询要求的内存块，你可以使用",{"type":597,"tag":629,"props":33656,"children":33658},{"className":33657},[],[33659],{"type":603,"value":33437},{"type":603,"value":33661},"来迭代遍历所有的组件",{"type":597,"tag":1023,"props":33663,"children":33665},{"id":33664},"jobs-作业",[33666],{"type":603,"value":33667},"Jobs 作业",{"type":597,"tag":606,"props":33669,"children":33670},{},[33671,33673,33679,33681,33686,33688,33693,33695,33701,33702,33708,33710,33715,33717,33722],{"type":603,"value":33672},"之前说过，ECS配合Job使用才能发挥多线程的威力。ECS提供了",{"type":597,"tag":629,"props":33674,"children":33676},{"className":33675},[],[33677],{"type":603,"value":33678},"SystemBase",{"type":603,"value":33680},"类，其中包含",{"type":597,"tag":629,"props":33682,"children":33684},{"className":33683},[],[33685],{"type":603,"value":28730},{"type":603,"value":33687},"方法，还包含了",{"type":597,"tag":629,"props":33689,"children":33691},{"className":33690},[],[33692],{"type":603,"value":33437},{"type":603,"value":33694},"的",{"type":597,"tag":629,"props":33696,"children":33698},{"className":33697},[],[33699],{"type":603,"value":33700},"Schedule()",{"type":603,"value":695},{"type":597,"tag":629,"props":33703,"children":33705},{"className":33704},[],[33706],{"type":603,"value":33707},"ScheduleParallel()",{"type":603,"value":33709},"方法，可以在子线程中处理数据。",{"type":597,"tag":629,"props":33711,"children":33713},{"className":33712},[],[33714],{"type":603,"value":28730},{"type":603,"value":33716},"是最简单的方法，只需要几行代码就能实现。",{"type":597,"tag":629,"props":33718,"children":33720},{"className":33719},[],[33721],{"type":603,"value":33437},{"type":603,"value":33723},"可以用来处理比较复杂的情况。",{"type":597,"tag":606,"props":33725,"children":33726},{},[33727],{"type":603,"value":33728},"ECS会在主线程调度Job，根据System的顺序。当job调度后，ECS会追踪哪些job在读写哪些组件。需要读权限的job需要等待前面写权限的job执行完，反之亦然。Job调度器会使用job依赖来决定哪些job可以并行，哪些必须串行。",{"type":597,"tag":1023,"props":33730,"children":33732},{"id":33731},"system的组织",[33733],{"type":603,"value":33734},"System的组织",{"type":597,"tag":606,"props":33736,"children":33737},{},[33738,33740,33746,33747,33753],{"type":603,"value":33739},"ECS通过",{"type":597,"tag":629,"props":33741,"children":33743},{"className":33742},[],[33744],{"type":603,"value":33745},"World",{"type":603,"value":695},{"type":597,"tag":629,"props":33748,"children":33750},{"className":33749},[],[33751],{"type":603,"value":33752},"group",{"type":603,"value":33754},"来组织system。默认情况下，ECS会创建一个默认的World，包含一些预定义的group组。它会找到工程中所有的System，实例化他们，并添加到预定义的group中。",{"type":597,"tag":606,"props":33756,"children":33757},{},[33758],{"type":603,"value":33759},"你可以指定同一个group中system的Update的执行顺序。Group也是一种system，所以你可以将一个group添加到另外一个group中。如果你没有指定顺序，system的执行顺序会不太确定，并不会按照它们创建的顺序。不过，同一个group中的所有system都会比下一个group中的system先执行。",{"type":597,"tag":606,"props":33761,"children":33762},{},[33763],{"type":603,"value":33764},"System的Update是在主线程中执行的，不过可以使用Job将工作分配到子线程中。",{"type":597,"tag":598,"props":33766,"children":33768},{"id":33767},"组件-component",[33769],{"type":603,"value":33770},"组件 Component",{"type":597,"tag":857,"props":33772,"children":33773},{"id":32788},[33774],{"type":603,"value":32788},{"type":597,"tag":1321,"props":33776,"children":33777},{},[33778,33788,33798,33808,33818,33828],{"type":597,"tag":807,"props":33779,"children":33780},{},[33781],{"type":597,"tag":886,"props":33782,"children":33785},{"href":33783,"rel":33784},"https://docs.unity3d.com/Packages/com.unity.entities@0.14/manual/index.html",[890],[33786],{"type":603,"value":33787},"Entity Component System 官方文档",{"type":597,"tag":807,"props":33789,"children":33790},{},[33791],{"type":597,"tag":886,"props":33792,"children":33795},{"href":33793,"rel":33794},"https://www.bilibili.com/video/BV1sD4y1Q7an",[890],[33796],{"type":603,"value":33797},"DOTS从原理到应用",{"type":597,"tag":807,"props":33799,"children":33800},{},[33801],{"type":597,"tag":886,"props":33802,"children":33805},{"href":33803,"rel":33804},"https://www.bilibili.com/video/BV18J411t7G8",[890],[33806],{"type":603,"value":33807},"Unity DOTS技术详解",{"type":597,"tag":807,"props":33809,"children":33810},{},[33811],{"type":597,"tag":886,"props":33812,"children":33815},{"href":33813,"rel":33814},"https://connect.unity.com/u/enthervarope/column",[890],[33816],{"type":603,"value":33817},"Unity ECS简单示例",{"type":597,"tag":807,"props":33819,"children":33820},{},[33821],{"type":597,"tag":886,"props":33822,"children":33825},{"href":33823,"rel":33824},"https://blog.csdn.net/andrewfan/category_8967683.html",[890],[33826],{"type":603,"value":33827},"Unity中的ECS编程",{"type":597,"tag":807,"props":33829,"children":33830},{},[33831],{"type":597,"tag":886,"props":33832,"children":33835},{"href":33833,"rel":33834},"https://blog.csdn.net/lrh3025/category_9668656.html",[890],[33836],{"type":603,"value":33837},"Unity ECS_翻译",{"title":591,"searchDepth":787,"depth":787,"links":33839},[33840,33841,33846,33852],{"id":32921,"depth":787,"text":32924},{"id":33020,"depth":787,"text":33023,"children":33842},[33843,33844,33845],{"id":33083,"depth":1530,"text":33086},{"id":33231,"depth":1530,"text":33234},{"id":33283,"depth":1530,"text":33283},{"id":33509,"depth":787,"text":33512,"children":33847},[33848,33849,33850,33851],{"id":33515,"depth":1530,"text":33518},{"id":33327,"depth":1530,"text":33327},{"id":33664,"depth":1530,"text":33667},{"id":33731,"depth":1530,"text":33734},{"id":33767,"depth":787,"text":33770},"content:unity:2020-10-15-unity-ecs.md","unity/2020-10-15-unity-ecs.md","2020-10-15",{"_path":484,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":483,"description":33857,"body":33858,"_type":791,"_id":33866,"_source":793,"_file":33867,"_extension":795,"date":33868},"向量和点的区别\n向量的长度就是和000 点的距离\n点积的几何意义与游戏中的应用\n向量的单位向量，就是长度为1时的向量",{"type":594,"children":33859,"toc":33864},[33860],{"type":597,"tag":606,"props":33861,"children":33862},{},[33863],{"type":603,"value":33857},{"title":591,"searchDepth":787,"depth":787,"links":33865},[],"content:unity:2020-09-13-vector.md","unity/2020-09-13-vector.md","2020-09-13",{"_path":481,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":480,"description":33870,"body":33871,"_type":791,"_id":34051,"_source":793,"_file":34052,"_extension":795,"date":34053},"Addressables.InitializeAsync初始化并填充Addressables.ResourceLocatorsIResourceLocator资源目录,可以通过 代码加载额外的locatorvar  requestCatalog=Addressables.LoadContentCatalogAsync(\"http://192.168.100.100:51879/catalog_extra.json.json\", providerSuffix);\nvar locator = await requestCatalog.Task;\nAddressables.AddResourceLo",{"type":594,"children":33872,"toc":34044},[33873,33879,33884,33890,33895,33903,33908,33928,33952,33958,33964,33973,33982,33987,33992,34005,34010,34022,34034],{"type":597,"tag":598,"props":33874,"children":33876},{"id":33875},"addressablesinitializeasync",[33877],{"type":603,"value":33878},"Addressables.InitializeAsync",{"type":597,"tag":606,"props":33880,"children":33881},{},[33882],{"type":603,"value":33883},"初始化并填充Addressables.ResourceLocators",{"type":597,"tag":598,"props":33885,"children":33887},{"id":33886},"iresourcelocator",[33888],{"type":603,"value":33889},"IResourceLocator",{"type":597,"tag":606,"props":33891,"children":33892},{},[33893],{"type":603,"value":33894},"资源目录,可以通过 代码加载额外的locator",{"type":597,"tag":621,"props":33896,"children":33898},{"code":33897},"var  requestCatalog=Addressables.LoadContentCatalogAsync(\"http://192.168.100.100:51879/catalog_extra.json.json\", providerSuffix);\nvar locator = await requestCatalog.Task;\nAddressables.AddResourceLocator(locator);\n",[33899],{"type":597,"tag":629,"props":33900,"children":33901},{"__ignoreMap":591},[33902],{"type":603,"value":33897},{"type":597,"tag":606,"props":33904,"children":33905},{},[33906],{"type":603,"value":33907},"存储了一个IResourceLocation列表..根据不同的key(label,path)进行存储",{"type":597,"tag":606,"props":33909,"children":33910},{},[33911,33913,33919,33920,33926],{"type":603,"value":33912},"比如: 有个资源是ui.prefab,同时又lable",{"type":597,"tag":629,"props":33914,"children":33916},{"className":33915},[],[33917],{"type":603,"value":33918},"enter",{"type":603,"value":9688},{"type":597,"tag":629,"props":33921,"children":33923},{"className":33922},[],[33924],{"type":603,"value":33925},"main",{"type":603,"value":33927},"可能就会有三个IResourceLocation",{"type":597,"tag":1321,"props":33929,"children":33930},{},[33931,33936,33941],{"type":597,"tag":807,"props":33932,"children":33933},{},[33934],{"type":603,"value":33935},"enter为key的IResourceLocation",{"type":597,"tag":807,"props":33937,"children":33938},{},[33939],{"type":603,"value":33940},"main为key的IResourceLocation",{"type":597,"tag":807,"props":33942,"children":33943},{},[33944,33950],{"type":597,"tag":629,"props":33945,"children":33947},{"className":33946},[],[33948],{"type":603,"value":33949},"Assets/prefabs/ui/ui.prefab",{"type":603,"value":33951},"为key的IResourceLocation",{"type":597,"tag":598,"props":33953,"children":33955},{"id":33954},"iresourcelocation",[33956],{"type":603,"value":33957},"IResourceLocation",{"type":597,"tag":1023,"props":33959,"children":33961},{"id":33960},"mergemode",[33962],{"type":603,"value":33963},"MergeMode",{"type":597,"tag":606,"props":33965,"children":33966},{},[33967,33971],{"type":597,"tag":1080,"props":33968,"children":33969},{},[33970],{"type":603,"value":33963},{"type":603,"value":33972},"是什么呢？翻译过来是合并模式。",{"type":597,"tag":621,"props":33974,"children":33977},{"code":33975,"language":603,"meta":591,"className":33976},"public enum MergeMode\n{\n    None = 0,\n    UseFirst = 0,\n    Union,\n    Intersection\n}\n",[29933],[33978],{"type":597,"tag":629,"props":33979,"children":33980},{"__ignoreMap":591},[33981],{"type":603,"value":33975},{"type":597,"tag":606,"props":33983,"children":33984},{},[33985],{"type":603,"value":33986},"会去先查询每一个地址/标签对应的资源，然后再根据MergeMode进行最终结果的计算。",{"type":597,"tag":606,"props":33988,"children":33989},{},[33990],{"type":603,"value":33991},"举个栗子：",{"type":597,"tag":606,"props":33993,"children":33994},{},[33995,33997,34003],{"type":603,"value":33996},"比如传入的参数是",{"type":597,"tag":629,"props":33998,"children":34000},{"className":33999},[],[34001],{"type":603,"value":34002},"new List\u003Cobject>{\"cube\", \"red\"}",{"type":603,"value":34004},"，根据cube查询出来的资源有A、B、D，根据red查询出来的资源有C、D、E。",{"type":597,"tag":606,"props":34006,"children":34007},{},[34008],{"type":603,"value":34009},"那么MergeMode是Node或UseFirst时，会取第一个key查询到的资源：A、B、D；",{"type":597,"tag":606,"props":34011,"children":34012},{},[34013,34015,34020],{"type":603,"value":34014},"MergeMode是Union时，会取所有key查询到的资源的",{"type":597,"tag":1080,"props":34016,"children":34017},{},[34018],{"type":603,"value":34019},"并集",{"type":603,"value":34021},"：A、B、C、D、E；",{"type":597,"tag":606,"props":34023,"children":34024},{},[34025,34027,34032],{"type":603,"value":34026},"MergeMode是Intersection时，会取所有key查询到的资源的",{"type":597,"tag":1080,"props":34028,"children":34029},{},[34030],{"type":603,"value":34031},"交集",{"type":603,"value":34033},"：D。",{"type":597,"tag":606,"props":34035,"children":34036},{},[34037],{"type":597,"tag":886,"props":34038,"children":34041},{"href":34039,"rel":34040},"https://docs.unity3d.com/Packages/com.unity.addressables@1.15/manual/LoadingAddressableAssets.html",[890],[34042],{"type":603,"value":34043},"Addressables.LoadAsset(s)Async | Addressables | 1.15.1 (unity3d.com)",{"title":591,"searchDepth":787,"depth":787,"links":34045},[34046,34047,34048],{"id":33875,"depth":787,"text":33878},{"id":33886,"depth":787,"text":33889},{"id":33954,"depth":787,"text":33957,"children":34049},[34050],{"id":33960,"depth":1530,"text":33963},"content:unity:2020-09-12-Addressables.md","unity/2020-09-12-Addressables.md","2020-09-12",{"_path":478,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":477,"description":34055,"body":34056,"_type":791,"_id":35636,"_source":793,"_file":35637,"_extension":795,"date":35638},"堆与栈：有什么不同？栈，或多或少负责跟踪正在程序中运行的代码。堆，或多或少负责跟踪程序对象或数据。栈，把它想像成叠在一起的盒子(像搭积木一样)。每一次调用一个方法就会在最上面叠一个盒子，用来跟踪程序运行情况。我们只能使用栈中叠在最上面的盒子里的东西。当某一最上面的盒子里的代码执行完毕（如方法执行完成），就把它扔掉并继续去使用下一个盒子。堆，与栈类似，只是它是用来保存信息而不是跟踪执行。所以，堆里的任何信息都可以在任何时间被访问。有了堆，访问信息没有约束，而不像栈只能访问最上面的盒子。堆的情况就像你把一堆刚洗完的衣服放在床上还没有时间来的及收走，你可以迅速拿到你想要拿的衣服。栈的情况就像你叠在一",{"type":594,"children":34057,"toc":35611},[34058,34064,34074,34084,34089,34094,34099,34106,34111,34116,34121,34126,34131,34140,34216,34221,34230,34258,34263,34272,34277,34284,34289,34326,34331,34336,34341,34346,34355,34360,34365,34372,34377,34384,34389,34396,34401,34408,34413,34420,34425,34431,34443,34448,34453,34462,34467,34471,34480,34485,34492,34497,34504,34509,34516,34521,34526,34531,34536,34541,34546,34555,34565,34570,34579,34584,34593,34598,34603,34612,34619,34624,34629,34638,34645,34650,34656,34661,34666,34684,34692,34697,34704,34709,34714,34722,34727,34732,34741,34746,34753,34758,34765,34770,34777,34782,34787,34792,34801,34806,34815,34822,34827,34832,34840,34845,34852,34857,34862,34871,34879,34884,34889,34898,34903,34912,34919,34924,34933,34938,34945,34963,34968,34973,34978,34983,34992,34997,35006,35011,35016,35027,35032,35039,35074,35079,35084,35089,35094,35099,35108,35113,35120,35125,35134,35139,35150,35155,35160,35165,35174,35179,35188,35193,35200,35205,35210,35219,35224,35232,35237,35242,35251,35256,35264,35268,35277,35282,35289,35294,35299,35304,35313,35318,35327,35332,35340,35346,35358,35366,35371,35383,35393,35398,35416,35426,35434,35461,35466,35474,35485,35490,35505,35514,35519,35534,35542,35549,35554,35558],{"type":597,"tag":598,"props":34059,"children":34061},{"id":34060},"堆与栈有什么不同",[34062],{"type":603,"value":34063},"堆与栈：有什么不同？",{"type":597,"tag":606,"props":34065,"children":34066},{},[34067,34072],{"type":597,"tag":1080,"props":34068,"children":34069},{},[34070],{"type":603,"value":34071},"栈",{"type":603,"value":34073},"，或多或少负责跟踪正在程序中运行的代码。",{"type":597,"tag":606,"props":34075,"children":34076},{},[34077,34082],{"type":597,"tag":1080,"props":34078,"children":34079},{},[34080],{"type":603,"value":34081},"堆",{"type":603,"value":34083},"，或多或少负责跟踪程序对象或数据。",{"type":597,"tag":606,"props":34085,"children":34086},{},[34087],{"type":603,"value":34088},"栈，把它想像成叠在一起的盒子(像搭积木一样)。每一次调用一个方法就会在最上面叠一个盒子，用来跟踪程序运行情况。我们只能使用栈中叠在最上面的盒子里的东西。当某一最上面的盒子里的代码执行完毕（如方法执行完成），就把它扔掉并继续去使用下一个盒子。",{"type":597,"tag":606,"props":34090,"children":34091},{},[34092],{"type":603,"value":34093},"堆，与栈类似，只是它是用来保存信息而不是跟踪执行。所以，堆里的任何信息都可以在任何时间被访问。有了堆，访问信息没有约束，而不像栈只能访问最上面的盒子。",{"type":597,"tag":606,"props":34095,"children":34096},{},[34097],{"type":603,"value":34098},"堆的情况就像你把一堆刚洗完的衣服放在床上还没有时间来的及收走，你可以迅速拿到你想要拿的衣服。栈的情况就像你叠在一起的鞋盒子，你需要拿走最上面的盒子才能拿到下一个盒子。",{"type":597,"tag":606,"props":34100,"children":34101},{},[34102],{"type":597,"tag":719,"props":34103,"children":34105},{"alt":719,"src":34104},"/images/2020-09-11-stack-heap/20131125031529515",[],{"type":597,"tag":606,"props":34107,"children":34108},{},[34109],{"type":603,"value":34110},"上图并不上真正的内存运行情况，只是为了让大家区分堆和栈。",{"type":597,"tag":606,"props":34112,"children":34113},{},[34114],{"type":603,"value":34115},"栈，会自我管理，它有自己的内存管理机制。当最上面的盒子不再使用时，会自动被扔掉。",{"type":597,"tag":606,"props":34117,"children":34118},{},[34119],{"type":603,"value":34120},"堆，相反，我们要控制它的垃圾回收(GC)。我们要去管理堆是否干净，就像管理床上的脏衣服。你不手动扔掉它，就会在床上变臭。",{"type":597,"tag":598,"props":34122,"children":34124},{"id":34123},"什么在堆和栈里",[34125],{"type":603,"value":34123},{"type":597,"tag":606,"props":34127,"children":34128},{},[34129],{"type":603,"value":34130},"当程序执行时，我们主要有4种类型的东西放进堆和栈里：值类型，引用类型，指针，指令。",{"type":597,"tag":1023,"props":34132,"children":34134},{"id":34133},"值类型",[34135],{"type":597,"tag":1080,"props":34136,"children":34137},{},[34138],{"type":603,"value":34139},"值类型:",{"type":597,"tag":1321,"props":34141,"children":34142},{},[34143,34148,34153,34158,34163,34168,34173,34177,34182,34187,34192,34197,34201,34206,34211],{"type":597,"tag":807,"props":34144,"children":34145},{},[34146],{"type":603,"value":34147},"bool",{"type":597,"tag":807,"props":34149,"children":34150},{},[34151],{"type":603,"value":34152},"byte",{"type":597,"tag":807,"props":34154,"children":34155},{},[34156],{"type":603,"value":34157},"char",{"type":597,"tag":807,"props":34159,"children":34160},{},[34161],{"type":603,"value":34162},"decimal",{"type":597,"tag":807,"props":34164,"children":34165},{},[34166],{"type":603,"value":34167},"double",{"type":597,"tag":807,"props":34169,"children":34170},{},[34171],{"type":603,"value":34172},"enum",{"type":597,"tag":807,"props":34174,"children":34175},{},[34176],{"type":603,"value":685},{"type":597,"tag":807,"props":34178,"children":34179},{},[34180],{"type":603,"value":34181},"int",{"type":597,"tag":807,"props":34183,"children":34184},{},[34185],{"type":603,"value":34186},"long",{"type":597,"tag":807,"props":34188,"children":34189},{},[34190],{"type":603,"value":34191},"sbyte",{"type":597,"tag":807,"props":34193,"children":34194},{},[34195],{"type":603,"value":34196},"short",{"type":597,"tag":807,"props":34198,"children":34199},{},[34200],{"type":603,"value":28586},{"type":597,"tag":807,"props":34202,"children":34203},{},[34204],{"type":603,"value":34205},"uint",{"type":597,"tag":807,"props":34207,"children":34208},{},[34209],{"type":603,"value":34210},"ulong",{"type":597,"tag":807,"props":34212,"children":34213},{},[34214],{"type":603,"value":34215},"ushort",{"type":597,"tag":606,"props":34217,"children":34218},{},[34219],{"type":603,"value":34220},"它们都衍生于System.ValueType。",{"type":597,"tag":1023,"props":34222,"children":34224},{"id":34223},"引用类型",[34225],{"type":597,"tag":1080,"props":34226,"children":34227},{},[34228],{"type":603,"value":34229},"引用类型:",{"type":597,"tag":1321,"props":34231,"children":34232},{},[34233,34238,34243,34248,34253],{"type":597,"tag":807,"props":34234,"children":34235},{},[34236],{"type":603,"value":34237},"class",{"type":597,"tag":807,"props":34239,"children":34240},{},[34241],{"type":603,"value":34242},"interface",{"type":597,"tag":807,"props":34244,"children":34245},{},[34246],{"type":603,"value":34247},"delegate",{"type":597,"tag":807,"props":34249,"children":34250},{},[34251],{"type":603,"value":34252},"object",{"type":597,"tag":807,"props":34254,"children":34255},{},[34256],{"type":603,"value":34257},"string",{"type":597,"tag":606,"props":34259,"children":34260},{},[34261],{"type":603,"value":34262},"它们都衍生于System.Object。当然object就是System.Object。",{"type":597,"tag":1023,"props":34264,"children":34266},{"id":34265},"指针",[34267],{"type":597,"tag":1080,"props":34268,"children":34269},{},[34270],{"type":603,"value":34271},"指针:",{"type":597,"tag":606,"props":34273,"children":34274},{},[34275],{"type":603,"value":34276},"第三种被放于内存管理体制中的是类型的引用。这个引用通常被叫作指针。我们并不具体的使用指针，它们由CLR管理。一个指针（引用）是不同于引用类型的。我们定义它是一个引用类型，意味着我们可以通过指针访问它。一个指针占有一小块内存，这块内存指向另一块内存。指针占用在内存中的存储和其它的相同，只是存放的值既不是内存地址也不是空null。",{"type":597,"tag":606,"props":34278,"children":34279},{},[34280],{"type":597,"tag":719,"props":34281,"children":34283},{"alt":719,"src":34282},"/images/2020-09-11-stack-heap/20131125034525859",[],{"type":597,"tag":598,"props":34285,"children":34287},{"id":34286},"两个黄金规则",[34288],{"type":603,"value":34286},{"type":597,"tag":803,"props":34290,"children":34291},{},[34292,34297],{"type":597,"tag":807,"props":34293,"children":34294},{},[34295],{"type":603,"value":34296},"引用类型永远存储在堆里。",{"type":597,"tag":807,"props":34298,"children":34299},{},[34300,34305,34306,34311,34313,34318,34319,34324],{"type":597,"tag":629,"props":34301,"children":34303},{"className":34302},[],[34304],{"type":603,"value":34133},{"type":603,"value":695},{"type":597,"tag":629,"props":34307,"children":34309},{"className":34308},[],[34310],{"type":603,"value":34265},{"type":603,"value":34312},"永远存储在它们声明时所在的",{"type":597,"tag":629,"props":34314,"children":34316},{"className":34315},[],[34317],{"type":603,"value":34081},{"type":603,"value":28740},{"type":597,"tag":629,"props":34320,"children":34322},{"className":34321},[],[34323],{"type":603,"value":34071},{"type":603,"value":34325},"里。",{"type":597,"tag":598,"props":34327,"children":34329},{"id":34328},"栈工作原理",[34330],{"type":603,"value":34328},{"type":597,"tag":606,"props":34332,"children":34333},{},[34334],{"type":603,"value":34335},"栈，如第一节所说，在代码运行时负责跟踪每一个线程的所在(什么被调用了)。你可以把它想像成一个线程“状态”，而每一个线程都有它自己的栈。当我们的代码执行一次方法调用，线程开始执行寄存在方法(Method)表里的JIT编译过的指令，并且把该方法的参数存放到当前线程栈里。然后，随着代码的执行每遇见方法中的变量，该变量都会被放到栈的最上面，如此重复把所有变量都放到栈上(当然引用类型只存放指针)。",{"type":597,"tag":606,"props":34337,"children":34338},{},[34339],{"type":603,"value":34340},"为了方便理解，让我们看代码与图例。",{"type":597,"tag":606,"props":34342,"children":34343},{},[34344],{"type":603,"value":34345},"执行下面的方法：",{"type":597,"tag":621,"props":34347,"children":34350},{"code":34348,"language":8105,"meta":591,"className":34349},"public int AddFive(int pValue)\n{\n    int result;\n    result = pValue + 5;\n    return result;\n}\n",[8107],[34351],{"type":597,"tag":629,"props":34352,"children":34353},{"__ignoreMap":591},[34354],{"type":603,"value":34348},{"type":597,"tag":606,"props":34356,"children":34357},{},[34358],{"type":603,"value":34359},"下面是栈里发生的情况.  有必要提醒的是，我们现在假设当前代码产生的栈存储会放到所有既有项(栈里已经存储的数据)之上。一旦我们开始执行该方法，方法参数pValue会被放到栈上（以后的文章里会介绍参数传递）。",{"type":597,"tag":606,"props":34361,"children":34362},{},[34363],{"type":603,"value":34364},"注意：方法并不存在栈里，图只是为了阐述原理而放的引用。",{"type":597,"tag":606,"props":34366,"children":34367},{},[34368],{"type":597,"tag":719,"props":34369,"children":34371},{"alt":719,"src":34370},"/images/2020-09-11-stack-heap/20131126034830281",[],{"type":597,"tag":606,"props":34373,"children":34374},{},[34375],{"type":603,"value":34376},"下一步，控制(线程执行方法)被传递到寄存在方法类型表里的AddFive()方法对应的指令集中。如果方法是第一次被触发，会执行JIT编译。",{"type":597,"tag":606,"props":34378,"children":34379},{},[34380],{"type":597,"tag":719,"props":34381,"children":34383},{"alt":719,"src":34382},"/images/2020-09-11-stack-heap/20131126035529343",[],{"type":597,"tag":606,"props":34385,"children":34386},{},[34387],{"type":603,"value":34388},"随着方法的执行，栈会分配一块内存给变量result存放。",{"type":597,"tag":606,"props":34390,"children":34391},{},[34392],{"type":597,"tag":719,"props":34393,"children":34395},{"alt":719,"src":34394},"/images/2020-09-11-stack-heap/20131126035747203",[],{"type":597,"tag":606,"props":34397,"children":34398},{},[34399],{"type":603,"value":34400},"方法执行完成，返回result。",{"type":597,"tag":606,"props":34402,"children":34403},{},[34404],{"type":597,"tag":719,"props":34405,"children":34407},{"alt":719,"src":34406},"/images/2020-09-11-stack-heap/20131126035907203",[],{"type":597,"tag":606,"props":34409,"children":34410},{},[34411],{"type":603,"value":34412},"该次任务在栈里所占的所有内存将被清理，仅一个指针被移动到AddFive()开始时所在的可用内存地址上。接着会执行栈里AddFive()下面一个方法（图里看不到）。",{"type":597,"tag":606,"props":34414,"children":34415},{},[34416],{"type":597,"tag":719,"props":34417,"children":34419},{"alt":719,"src":34418},"/images/2020-09-11-stack-heap/20131126040806812",[],{"type":597,"tag":606,"props":34421,"children":34422},{},[34423],{"type":603,"value":34424},"在这个例子当中，变量result被放到了栈里。事实上，方法体内每次定义的值类型变量都会被放到栈里。",{"type":597,"tag":598,"props":34426,"children":34428},{"id":34427},"值类型会存储在堆里",[34429],{"type":603,"value":34430},"值类型会存储在堆里？",{"type":597,"tag":606,"props":34432,"children":34433},{},[34434,34436,34441],{"type":603,"value":34435},"是的，值类型有时候就是会存储在堆里。上一节中介绍的",{"type":597,"tag":1080,"props":34437,"children":34438},{},[34439],{"type":603,"value":34440},"黄金规则2:值类型和指针永远存储在它们声明时所在的堆或栈里",{"type":603,"value":34442},"。如果一个值类型不是在方法中定义的，而是在一个引用类型里，那么此值类型将会被放在这个引用类型里并存储在堆上。",{"type":597,"tag":598,"props":34444,"children":34446},{"id":34445},"代码图例",[34447],{"type":603,"value":34445},{"type":597,"tag":606,"props":34449,"children":34450},{},[34451],{"type":603,"value":34452},"我们定义一个引用类型：",{"type":597,"tag":621,"props":34454,"children":34457},{"code":34455,"language":8105,"meta":591,"className":34456},"public class MyInt\n{          \n    public int MyValue;\n}\n",[8107],[34458],{"type":597,"tag":629,"props":34459,"children":34460},{"__ignoreMap":591},[34461],{"type":603,"value":34455},{"type":597,"tag":606,"props":34463,"children":34464},{},[34465],{"type":603,"value":34466},"里面包含一个值类型MyValue。",{"type":597,"tag":606,"props":34468,"children":34469},{},[34470],{"type":603,"value":34345},{"type":597,"tag":621,"props":34472,"children":34475},{"code":34473,"language":8105,"meta":591,"className":34474},"public MyInt AddFive(int pValue)\n{\n    MyInt result = new MyInt();\n    result.MyValue = pValue + 5;\n    return result;\n}\n",[8107],[34476],{"type":597,"tag":629,"props":34477,"children":34478},{"__ignoreMap":591},[34479],{"type":603,"value":34473},{"type":597,"tag":606,"props":34481,"children":34482},{},[34483],{"type":603,"value":34484},"就像上一节介绍的一样，线程开始执行此方法，参数pValue将会被放到当前线程栈上。",{"type":597,"tag":606,"props":34486,"children":34487},{},[34488],{"type":597,"tag":719,"props":34489,"children":34491},{"alt":719,"src":34490},"/images/2020-09-11-stack-heap/20131126052252140",[],{"type":597,"tag":606,"props":34493,"children":34494},{},[34495],{"type":603,"value":34496},"接下来不同于上一节所介绍的是MyInt是一个引用类型，它将被放到堆上并在栈上放一个指针指向它在堆里的存储。",{"type":597,"tag":606,"props":34498,"children":34499},{},[34500],{"type":597,"tag":719,"props":34501,"children":34503},{"alt":719,"src":34502},"/images/2020-09-11-stack-heap/20131126052522859",[],{"type":597,"tag":606,"props":34505,"children":34506},{},[34507],{"type":603,"value":34508},"当AddFive()执行完成后，如上一节所讲栈开始清理。",{"type":597,"tag":606,"props":34510,"children":34511},{},[34512],{"type":597,"tag":719,"props":34513,"children":34515},{"alt":719,"src":34514},"/images/2020-09-11-stack-heap/20131126052806703",[],{"type":597,"tag":606,"props":34517,"children":34518},{},[34519],{"type":603,"value":34520},"现在是需要C#垃圾回收GC的时候了。当我们的程序所占内存到达临界值时(即将溢出)，我们会需要更多的堆空间，GC就会开始运行。GC停止所有当前运行线程(整体停止)，找到堆里所有主程序不会访问到的对象并删除它们。然后，GC会识别所有堆里剩下的对象并分配内存空间给它们，同时调整堆和栈里指向它们的指针。你可以想像这是非常耗资源的，这会影响到程序的性能。这就是为什么我们需要理解和注意堆栈的使用，进而写出高性能代码。",{"type":597,"tag":598,"props":34522,"children":34524},{"id":34523},"堆栈原理对代码的影响",[34525],{"type":603,"value":34523},{"type":597,"tag":606,"props":34527,"children":34528},{},[34529],{"type":603,"value":34530},"当我们使用引用类型时，我们在和指向引用类型的指针打交道，而不是引用类型本身。",{"type":597,"tag":606,"props":34532,"children":34533},{},[34534],{"type":603,"value":34535},"当我们使用值类型时，我们就是在和值类型本身打交道。",{"type":597,"tag":1023,"props":34537,"children":34539},{"id":34538},"代码图例-1",[34540],{"type":603,"value":34445},{"type":597,"tag":606,"props":34542,"children":34543},{},[34544],{"type":603,"value":34545},"假设执行方法：",{"type":597,"tag":621,"props":34547,"children":34550},{"code":34548,"language":8105,"meta":591,"className":34549},"public int ReturnValue()\n{\n    int x = new int();\n    x = 3;\n    int y = new int();\n    y = x;      \n    y = 4;         \n    return x;\n}\n",[8107],[34551],{"type":597,"tag":629,"props":34552,"children":34553},{"__ignoreMap":591},[34554],{"type":603,"value":34548},{"type":597,"tag":606,"props":34556,"children":34557},{},[34558,34560,34564],{"type":603,"value":34559},"我们会得到值 ",{"type":597,"tag":1080,"props":34561,"children":34562},{},[34563],{"type":603,"value":6462},{"type":603,"value":758},{"type":597,"tag":606,"props":34566,"children":34567},{},[34568],{"type":603,"value":34569},"使用引用类型：",{"type":597,"tag":621,"props":34571,"children":34574},{"code":34572,"language":8105,"meta":591,"className":34573},"public class MyInt\n{\n    public int MyValue;\n}\n",[8107],[34575],{"type":597,"tag":629,"props":34576,"children":34577},{"__ignoreMap":591},[34578],{"type":603,"value":34572},{"type":597,"tag":606,"props":34580,"children":34581},{},[34582],{"type":603,"value":34583},"如果执行方法：",{"type":597,"tag":621,"props":34585,"children":34588},{"code":34586,"language":8105,"meta":591,"className":34587},"public int ReturnValue2()\n{\n    MyInt x = new MyInt();\n    x.MyValue = 3;\n    MyInt y = new MyInt();\n    y = x;        \n    y.MyValue = 4;         \n    return x.MyValue;\n}\n",[8107],[34589],{"type":597,"tag":629,"props":34590,"children":34591},{"__ignoreMap":591},[34592],{"type":603,"value":34586},{"type":597,"tag":606,"props":34594,"children":34595},{},[34596],{"type":603,"value":34597},"我们得到的值是４而不是３！（译外话：这是很简单，但相信还是有很多人不知道原理的）",{"type":597,"tag":606,"props":34599,"children":34600},{},[34601],{"type":603,"value":34602},"第一个示例中：",{"type":597,"tag":621,"props":34604,"children":34607},{"code":34605,"language":8105,"meta":591,"className":34606},"public int ReturnValue()\n{\n    int x = 3;\n    int y = x;    \n    y = 4;\n    return x;\n}\n",[8107],[34608],{"type":597,"tag":629,"props":34609,"children":34610},{"__ignoreMap":591},[34611],{"type":603,"value":34605},{"type":597,"tag":606,"props":34613,"children":34614},{},[34615],{"type":597,"tag":719,"props":34616,"children":34618},{"alt":719,"src":34617},"/images/2020-09-11-stack-heap/20131128043217031",[],{"type":597,"tag":606,"props":34620,"children":34621},{},[34622],{"type":603,"value":34623},"x就是3，y就是4。操作两个不同对象。",{"type":597,"tag":606,"props":34625,"children":34626},{},[34627],{"type":603,"value":34628},"第二个示例：",{"type":597,"tag":621,"props":34630,"children":34633},{"code":34631,"language":8105,"meta":591,"className":34632},"public int ReturnValue2()\n{\n    MyInt x;\n    x.MyValue = 3;\n    MyInt y;\n    y = x;              \n    y.MyValue = 4;\n    return x.MyValue;\n}\n",[8107],[34634],{"type":597,"tag":629,"props":34635,"children":34636},{"__ignoreMap":591},[34637],{"type":603,"value":34631},{"type":597,"tag":606,"props":34639,"children":34640},{},[34641],{"type":597,"tag":719,"props":34642,"children":34644},{"alt":719,"src":34643},"/images/2020-09-11-stack-heap/20131128043332000",[],{"type":597,"tag":606,"props":34646,"children":34647},{},[34648],{"type":603,"value":34649},"得到的值是4不是3是因为我们操作栈里两个指针并且它们指向堆里同一个对象。",{"type":597,"tag":598,"props":34651,"children":34653},{"id":34652},"参数大画面",[34654],{"type":603,"value":34655},"参数，大画面",{"type":597,"tag":606,"props":34657,"children":34658},{},[34659],{"type":603,"value":34660},"下面是当代码运行时会产生的一个详细过程。上几节已经介绍过当一个方法被调用时会产生的基本情况，让我们来看一下更加详细的内容。",{"type":597,"tag":606,"props":34662,"children":34663},{},[34664],{"type":603,"value":34665},"当我们调用一个方法时会发生以下情形：",{"type":597,"tag":803,"props":34667,"children":34668},{},[34669,34674,34679],{"type":597,"tag":807,"props":34670,"children":34671},{},[34672],{"type":603,"value":34673},"栈会分配一块内存空间给程序执行所需要的信息(我们叫它栈结构Stack Frame)。一个栈结构包含方法调用地址(指针)，它以一个GOTO指令的形式存在栈里。因此，当程序执行完方法(method)时，它会知道怎么样返回进而曳继续执行代码。",{"type":597,"tag":807,"props":34675,"children":34676},{},[34677],{"type":603,"value":34678},"方法的所有参数将被复制到栈里，这是我们将要更加详细介绍的部分。",{"type":597,"tag":807,"props":34680,"children":34681},{},[34682],{"type":603,"value":34683},"控制被传递到JIT编译过的方法里，同时线程开始执行代码。此时，我们将有另一个方法呈现在栈结构的“回调栈”里。",{"type":597,"tag":621,"props":34685,"children":34687},{"code":34348,"language":8105,"meta":591,"className":34686},[8107],[34688],{"type":597,"tag":629,"props":34689,"children":34690},{"__ignoreMap":591},[34691],{"type":603,"value":34348},{"type":597,"tag":606,"props":34693,"children":34694},{},[34695],{"type":603,"value":34696},"栈像下图所示：",{"type":597,"tag":606,"props":34698,"children":34699},{},[34700],{"type":597,"tag":719,"props":34701,"children":34703},{"alt":719,"src":34702},"/images/2020-09-11-stack-heap/20131128042641203",[],{"type":597,"tag":606,"props":34705,"children":34706},{},[34707],{"type":603,"value":34708},"注意：ReturnValue方法不会存在栈上，图中把ReturnValue作为此栈结构的开始只是为了解释栈原理。",{"type":597,"tag":606,"props":34710,"children":34711},{},[34712],{"type":603,"value":34713},"像前几节介绍的，值类型和引用类型在栈里的存储是不同的。栈为任何值类型创建副本，栈也为任何引用类型的指针创建副本。",{"type":597,"tag":598,"props":34715,"children":34717},{"id":34716},"值类型传递",[34718],{"type":597,"tag":1080,"props":34719,"children":34720},{},[34721],{"type":603,"value":34716},{"type":597,"tag":606,"props":34723,"children":34724},{},[34725],{"type":603,"value":34726},"下面是值类型传递在栈里的内幕。",{"type":597,"tag":606,"props":34728,"children":34729},{},[34730],{"type":603,"value":34731},"首先，当我们传递一个值类型变量时，栈会为它分配一块内存空间并把值类型变量的值存储进去。看下面的代码：",{"type":597,"tag":621,"props":34733,"children":34736},{"code":34734,"language":8105,"meta":591,"className":34735},"class Class1  \n{  \n     public void Go()  \n     {  \n         int x = 5;  \n         AddFive(x);  \n         Console.WriteLine(x.ToString());  \n     }  \n     public int AddFive(int pValue)  \n     {  \n         pValue += 5;  \n         return pValue;  \n     }  \n} \n",[8107],[34737],{"type":597,"tag":629,"props":34738,"children":34739},{"__ignoreMap":591},[34740],{"type":603,"value":34734},{"type":597,"tag":606,"props":34742,"children":34743},{},[34744],{"type":603,"value":34745},"当代码执行时，栈为x分配一块内存空间并存储值5",{"type":597,"tag":606,"props":34747,"children":34748},{},[34749],{"type":597,"tag":719,"props":34750,"children":34752},{"alt":719,"src":34751},"/images/2020-09-11-stack-heap/20131127050637031",[],{"type":597,"tag":606,"props":34754,"children":34755},{},[34756],{"type":603,"value":34757},"然后，AddFive()被放到栈上，同时栈分配内存空间给参数pValue并复制x的值给它。",{"type":597,"tag":606,"props":34759,"children":34760},{},[34761],{"type":597,"tag":719,"props":34762,"children":34764},{"alt":719,"src":34763},"/images/2020-09-11-stack-heap/20131127051251531",[],{"type":597,"tag":606,"props":34766,"children":34767},{},[34768],{"type":603,"value":34769},"当AddFive()执行完成，线程被传递回Go()。同时因为AddFive()执行完，它的参数pValue也实质上被移除。",{"type":597,"tag":606,"props":34771,"children":34772},{},[34773],{"type":597,"tag":719,"props":34774,"children":34776},{"alt":719,"src":34775},"/images/2020-09-11-stack-heap/20131127051718640",[],{"type":597,"tag":606,"props":34778,"children":34779},{},[34780],{"type":603,"value":34781},"所以结果是5是合理的。关键点是任何被传递的值类型参数仅是一个碳复制，因为我们希望保护原始变量的值。",{"type":597,"tag":606,"props":34783,"children":34784},{},[34785],{"type":603,"value":34786},"有一点要记住的是，如果我们有一个非常庞大的值类型(如，庞大的struct类型)传递到栈里，当处理器循环复制它并循环占有栈空间时将会非常耗资源。栈没有无限的空间去使用，就像用水杯不断的接水早晚会溢出一样。Struct类型可以变得非常庞大，我们要小心并清醒的使用它。",{"type":597,"tag":606,"props":34788,"children":34789},{},[34790],{"type":603,"value":34791},"下面是一个比较大的struct结构类型：",{"type":597,"tag":621,"props":34793,"children":34796},{"code":34794,"language":8105,"meta":591,"className":34795},"public struct MyStruct  \n{  \n    long a, b, c, d, e, f, g, h, i, j, k, l, m;  \n}  \n",[8107],[34797],{"type":597,"tag":629,"props":34798,"children":34799},{"__ignoreMap":591},[34800],{"type":603,"value":34794},{"type":597,"tag":606,"props":34802,"children":34803},{},[34804],{"type":603,"value":34805},"让我们看看执行下面代码Go()方法时再到DoSomething()方法会发生的情况：",{"type":597,"tag":621,"props":34807,"children":34810},{"code":34808,"language":8105,"meta":591,"className":34809}," public void Go()  \n{  \n   MyStruct x = new MyStruct();  \n   DoSomething(x);  \n}  \npublic void DoSomething(MyStruct pValue)  \n{  \n   // DO SOMETHING HERE....  \n} \n",[8107],[34811],{"type":597,"tag":629,"props":34812,"children":34813},{"__ignoreMap":591},[34814],{"type":603,"value":34808},{"type":597,"tag":606,"props":34816,"children":34817},{},[34818],{"type":597,"tag":719,"props":34819,"children":34821},{"alt":719,"src":34820},"/images/2020-09-11-stack-heap/20131127054659921",[],{"type":597,"tag":606,"props":34823,"children":34824},{},[34825],{"type":603,"value":34826},"这可能会非常低效。想像一下如果我们传递MyStruct几千次，它会怎么样让程序死掉。",{"type":597,"tag":606,"props":34828,"children":34829},{},[34830],{"type":603,"value":34831},"那么，我们怎么才能回避这样的问题呢？那就是仅传递原始值类型的引用。",{"type":597,"tag":621,"props":34833,"children":34835},{"code":34834},"public void Go()  \n{  \n   MyStruct x = new MyStruct();  \n   DoSomething(ref x);  \n}  \n public struct MyStruct  \n {  \n     long a, b, c, d, e, f, g, h, i, j, k, l, m;  \n }  \n public void DoSomething(ref MyStruct pValue)  \n {  \n          // DO SOMETHING HERE....  \n } \n",[34836],{"type":597,"tag":629,"props":34837,"children":34838},{"__ignoreMap":591},[34839],{"type":603,"value":34834},{"type":597,"tag":606,"props":34841,"children":34842},{},[34843],{"type":603,"value":34844},"这样就能节省内存并提升内存使用效率",{"type":597,"tag":606,"props":34846,"children":34847},{},[34848],{"type":597,"tag":719,"props":34849,"children":34851},{"alt":719,"src":34850},"/images/2020-09-11-stack-heap/20131127055230375",[],{"type":597,"tag":606,"props":34853,"children":34854},{},[34855],{"type":603,"value":34856},"唯一需要注意的是传递引用时我们在访问原始变量x的值，任可对pValue的改变都会影响到x。",{"type":597,"tag":606,"props":34858,"children":34859},{},[34860],{"type":603,"value":34861},"下面的代码会将x改变成\"12345\"，因为pValue.a实际上指向原始x声明时所在的内存地址。",{"type":597,"tag":621,"props":34863,"children":34866},{"code":34864,"language":8105,"meta":591,"className":34865},"public void Go()  \n{  \n   MyStruct x = new MyStruct();  \n   x.a = 5;  \n   DoSomething(ref x);  \n   Console.WriteLine(x.a.ToString());  \n}  \npublic void DoSomething(ref MyStruct pValue)  \n{  \n         pValue.a = 12345;  \n}  \n",[8107],[34867],{"type":597,"tag":629,"props":34868,"children":34869},{"__ignoreMap":591},[34870],{"type":603,"value":34864},{"type":597,"tag":598,"props":34872,"children":34874},{"id":34873},"引用类型传递",[34875],{"type":597,"tag":1080,"props":34876,"children":34877},{},[34878],{"type":603,"value":34873},{"type":597,"tag":606,"props":34880,"children":34881},{},[34882],{"type":603,"value":34883},"传递引用类型跟上一节所示例中用引用的方式传递值类型相似。",{"type":597,"tag":606,"props":34885,"children":34886},{},[34887],{"type":603,"value":34888},"如果使用引用类型（原文可能笔误，写的是值类型）：",{"type":597,"tag":621,"props":34890,"children":34893},{"code":34891,"language":8105,"meta":591,"className":34892},"public class MyInt  \n{  \n    public int MyValue;  \n}  \n",[8107],[34894],{"type":597,"tag":629,"props":34895,"children":34896},{"__ignoreMap":591},[34897],{"type":603,"value":34891},{"type":597,"tag":606,"props":34899,"children":34900},{},[34901],{"type":603,"value":34902},"然后调用Go()方法，MyInt会被放到堆里因为它是一个引用类型。",{"type":597,"tag":621,"props":34904,"children":34907},{"code":34905,"language":8105,"meta":591,"className":34906},"public void Go()  \n{  \n   MyInt x = new MyInt();  \n}\n",[8107],[34908],{"type":597,"tag":629,"props":34909,"children":34910},{"__ignoreMap":591},[34911],{"type":603,"value":34905},{"type":597,"tag":606,"props":34913,"children":34914},{},[34915],{"type":597,"tag":719,"props":34916,"children":34918},{"alt":719,"src":34917},"/images/2020-09-11-stack-heap/20131127070913796",[],{"type":597,"tag":606,"props":34920,"children":34921},{},[34922],{"type":603,"value":34923},"如果执行下面代码中的Go()：",{"type":597,"tag":621,"props":34925,"children":34928},{"code":34926,"language":8105,"meta":591,"className":34927},"public void Go()  \n{  \n   MyInt x = new MyInt();  \n   x.MyValue = 2;  \n   DoSomething(x);  \n   Console.WriteLine(x.MyValue.ToString());  \n}  \n public void DoSomething(MyInt pValue)  \n {  \n     pValue.MyValue = 12345;  \n } \n",[8107],[34929],{"type":597,"tag":629,"props":34930,"children":34931},{"__ignoreMap":591},[34932],{"type":603,"value":34926},{"type":597,"tag":606,"props":34934,"children":34935},{},[34936],{"type":603,"value":34937},"会发生这种情况：",{"type":597,"tag":606,"props":34939,"children":34940},{},[34941],{"type":597,"tag":719,"props":34942,"children":34944},{"alt":719,"src":34943},"/images/2020-09-11-stack-heap/20131127071131421",[],{"type":597,"tag":803,"props":34946,"children":34947},{},[34948,34953,34958],{"type":597,"tag":807,"props":34949,"children":34950},{},[34951],{"type":603,"value":34952},"开始调用Go()，栈分配一块内存空间给x。",{"type":597,"tag":807,"props":34954,"children":34955},{},[34956],{"type":603,"value":34957},"执行行到DoSomething()，栈分配一块内在空间给pValue。",{"type":597,"tag":807,"props":34959,"children":34960},{},[34961],{"type":603,"value":34962},"x的值是堆中MyInt对应在栈里的内存地址，复制x给pValue。",{"type":597,"tag":606,"props":34964,"children":34965},{},[34966],{"type":603,"value":34967},"因此，我们用pValue改变MyInt的MyValue的值时，x最终也会获得这个改变的值\"12345“。",{"type":597,"tag":606,"props":34969,"children":34970},{},[34971],{"type":603,"value":34972},"如果我们用引用的方式传递一个引用类型变量呢？",{"type":597,"tag":598,"props":34974,"children":34976},{"id":34975},"用引用的方式传递引用类型",[34977],{"type":603,"value":34975},{"type":597,"tag":606,"props":34979,"children":34980},{},[34981],{"type":603,"value":34982},"我们有一个类Thing, 类Animal和Vegetables衍生于Thing：",{"type":597,"tag":621,"props":34984,"children":34987},{"code":34985,"language":8105,"meta":591,"className":34986},"public class Thing  \n{  \n}  \npublic class Animal:Thing  \n{  \n    public int Weight;  \n}  \npublic class Vegetable:Thing  \n{  \n    public int Length;  \n}  \n",[8107],[34988],{"type":597,"tag":629,"props":34989,"children":34990},{"__ignoreMap":591},[34991],{"type":603,"value":34985},{"type":597,"tag":606,"props":34993,"children":34994},{},[34995],{"type":603,"value":34996},"执行下面的Go()方法：",{"type":597,"tag":621,"props":34998,"children":35001},{"code":34999,"language":8105,"meta":591,"className":35000},"public void Go()  \n{  \n   Thing x = new Animal();  \n   Switcharoo(ref x);  \n    Console.WriteLine(  \n      \"x is Animal    :   \"  \n      + (x is Animal).ToString());  \n    Console.WriteLine(  \n        \"x is Vegetable :   \"  \n        + (x is Vegetable).ToString());  \n}  \n public void Switcharoo(ref Thing pValue)  \n {  \n     pValue = new Vegetable();  \n }  \n",[8107],[35002],{"type":597,"tag":629,"props":35003,"children":35004},{"__ignoreMap":591},[35005],{"type":603,"value":34999},{"type":597,"tag":606,"props":35007,"children":35008},{},[35009],{"type":603,"value":35010},"x最终变成Vegetable。",{"type":597,"tag":606,"props":35012,"children":35013},{},[35014],{"type":603,"value":35015},"打印结果：",{"type":597,"tag":621,"props":35017,"children":35022},{"code":35018,"language":35019,"meta":591,"className":35020},"x is Animal    :   False\nx is Vegetable :   True\n","yaml",[35021],"language-yaml",[35023],{"type":597,"tag":629,"props":35024,"children":35025},{"__ignoreMap":591},[35026],{"type":603,"value":35018},{"type":597,"tag":606,"props":35028,"children":35029},{},[35030],{"type":603,"value":35031},"让我们看看堆栈里到底发生了什么情况",{"type":597,"tag":606,"props":35033,"children":35034},{},[35035],{"type":597,"tag":719,"props":35036,"children":35038},{"alt":719,"src":35037},"/images/2020-09-11-stack-heap/20131127073852765",[],{"type":597,"tag":803,"props":35040,"children":35041},{},[35042,35047,35052,35057,35064,35069],{"type":597,"tag":807,"props":35043,"children":35044},{},[35045],{"type":603,"value":35046},"调用Go()方法，栈分配一块内存空间给x。",{"type":597,"tag":807,"props":35048,"children":35049},{},[35050],{"type":603,"value":35051},"堆分配一块内存空间给Animal。",{"type":597,"tag":807,"props":35053,"children":35054},{},[35055],{"type":603,"value":35056},"开始执行Switcharoo()方法，栈分配一块内存空间给pValue并指向x。",{"type":597,"tag":807,"props":35058,"children":35059},{},[35060],{"type":597,"tag":719,"props":35061,"children":35063},{"alt":719,"src":35062},"/images/2020-09-11-stack-heap/20131127074345953",[],{"type":597,"tag":807,"props":35065,"children":35066},{},[35067],{"type":603,"value":35068},"栈分配一块内存空间给Vegetable。",{"type":597,"tag":807,"props":35070,"children":35071},{},[35072],{"type":603,"value":35073},"pValue改变了x的值使其指向Vegetable的内在地址。",{"type":597,"tag":606,"props":35075,"children":35076},{},[35077],{"type":603,"value":35078},"如果我们不是用ref传递的，打印结果正相反。",{"type":597,"tag":598,"props":35080,"children":35082},{"id":35081},"复制不仅仅是复制",[35083],{"type":603,"value":35081},{"type":597,"tag":606,"props":35085,"children":35086},{},[35087],{"type":603,"value":35088},"为了更清晰的阐述这个问题，让我们测试一下在堆中存储值类型变量和引用类型变量时会产生的不同情况。",{"type":597,"tag":1023,"props":35090,"children":35092},{"id":35091},"值类型测试",[35093],{"type":603,"value":35091},{"type":597,"tag":606,"props":35095,"children":35096},{},[35097],{"type":603,"value":35098},"首先，我们看一下值类型。下面是一个类和一个结构类型(值类型)，Dude类包含一个Name元素和两个Shoe元素。我们有一个CopyDude()方法用来复制生成新Dude。",{"type":597,"tag":621,"props":35100,"children":35103},{"code":35101,"language":8105,"meta":591,"className":35102},"public struct Shoe{\n    public string Color;\n}\npublic class Dude\n{\n    public string Name;\n    public Shoe RightShoe;\n    public Shoe LeftShoe;\n    public Dude CopyDude()\n    {\n        Dude newPerson = new Dude();\n        newPerson.Name = Name;\n        newPerson.LeftShoe = LeftShoe;\n        newPerson.RightShoe = RightShoe;\n        return newPerson;\n    }\n    public override string ToString()\n    {\n        return (Name + \" : Dude!, I have a \" + RightShoe.Color + \" shoe on my right foot, and a \" + LeftShoe.Color + \" on my left foot.\");\n    }\n}\n",[8107],[35104],{"type":597,"tag":629,"props":35105,"children":35106},{"__ignoreMap":591},[35107],{"type":603,"value":35101},{"type":597,"tag":606,"props":35109,"children":35110},{},[35111],{"type":603,"value":35112},"Dude类是一个复杂类型，因为值 类型结构Shoe是它的成员， 它们都将存储在堆中。",{"type":597,"tag":606,"props":35114,"children":35115},{},[35116],{"type":597,"tag":719,"props":35117,"children":35119},{"alt":719,"src":35118},"/images/2020-09-11-stack-heap/20131128023045765",[],{"type":597,"tag":606,"props":35121,"children":35122},{},[35123],{"type":603,"value":35124},"当我们执行下面的方法时：",{"type":597,"tag":621,"props":35126,"children":35129},{"code":35127,"language":8105,"meta":591,"className":35128},"public static void Main()\n{\n    Class1 pgm = new Class1();\n    Dude Bill = new Dude();\n    Bill.Name = \"Bill\";\n    Bill.LeftShoe = new Shoe();\n    Bill.RightShoe = new Shoe();\n    Bill.LeftShoe.Color = Bill.RightShoe.Color = \"Blue\";\n    Dude Ted = Bill.CopyDude();\n    Ted.Name = \"Ted\";\n    Ted.LeftShoe.Color = Ted.RightShoe.Color = \"Red\";\n    Console.WriteLine(Bill.ToString());\n    Console.WriteLine(Ted.ToString());\n}\n",[8107],[35130],{"type":597,"tag":629,"props":35131,"children":35132},{"__ignoreMap":591},[35133],{"type":603,"value":35127},{"type":597,"tag":606,"props":35135,"children":35136},{},[35137],{"type":603,"value":35138},"我们得到了期望的结果：",{"type":597,"tag":621,"props":35140,"children":35145},{"code":35141,"language":35142,"meta":591,"className":35143},"Bill : Dude!, I have a Blue shoe on my right foot, and a Blue on my left foot.\nTed : Dude!, I have a Red shoe on my right foot, and a Red on my left foot.\n","vbscript",[35144],"language-vbscript",[35146],{"type":597,"tag":629,"props":35147,"children":35148},{"__ignoreMap":591},[35149],{"type":603,"value":35141},{"type":597,"tag":606,"props":35151,"children":35152},{},[35153],{"type":603,"value":35154},"如果我们把Shoe换成引用类型呢？",{"type":597,"tag":1023,"props":35156,"children":35158},{"id":35157},"引用类型测试",[35159],{"type":603,"value":35157},{"type":597,"tag":606,"props":35161,"children":35162},{},[35163],{"type":603,"value":35164},"当我们把Shoe改成引用类型时，问题就产生了。",{"type":597,"tag":621,"props":35166,"children":35169},{"code":35167,"language":8105,"meta":591,"className":35168},"public class Shoe{\n    public string Color;\n}\n",[8107],[35170],{"type":597,"tag":629,"props":35171,"children":35172},{"__ignoreMap":591},[35173],{"type":603,"value":35167},{"type":597,"tag":606,"props":35175,"children":35176},{},[35177],{"type":603,"value":35178},"执行同样上面的Main()方法，结果改变了，如下：",{"type":597,"tag":621,"props":35180,"children":35183},{"code":35181,"language":35142,"meta":591,"className":35182},"Bill : Dude!, I have a Red shoe on my right foot, and a Red on my left foot\nTed : Dude!, I have a Red shoe on my right foot, and a Red on my left foot\n",[35144],[35184],{"type":597,"tag":629,"props":35185,"children":35186},{"__ignoreMap":591},[35187],{"type":603,"value":35181},{"type":597,"tag":606,"props":35189,"children":35190},{},[35191],{"type":603,"value":35192},"这并不是我们期望的结果。很明显，出错了！看下面的图解：",{"type":597,"tag":606,"props":35194,"children":35195},{},[35196],{"type":597,"tag":719,"props":35197,"children":35199},{"alt":719,"src":35198},"/images/2020-09-11-stack-heap/20131128023756781",[],{"type":597,"tag":606,"props":35201,"children":35202},{},[35203],{"type":603,"value":35204},"因为现在Shoe是引用类型而不是值类型，当我们进行复制时仅是复制了指针，我们并没有复制指针真正对应的对象。这就需要我们做一些额外的工作使引用类型Shoe像值类型一样工作。",{"type":597,"tag":606,"props":35206,"children":35207},{},[35208],{"type":603,"value":35209},"很幸运，我们有一个接口可以帮我们实现：ICloneable。当Dude类实现它时，我们会声明一个Clone()方法用来产生新的Dude复制类。（译外话：复制类及其成员跟原始类不产生任何重叠，即我们所说的深复制)  看下面代码：\nICloneable consists of one method: Clone()",{"type":597,"tag":621,"props":35211,"children":35214},{"code":35212,"language":8105,"meta":591,"className":35213},"public object Clone()\n{\n}\n",[8107],[35215],{"type":597,"tag":629,"props":35216,"children":35217},{"__ignoreMap":591},[35218],{"type":603,"value":35212},{"type":597,"tag":606,"props":35220,"children":35221},{},[35222],{"type":603,"value":35223},"Here's how we'll implement it in the Shoe class:",{"type":597,"tag":621,"props":35225,"children":35227},{"code":35226},"public class Shoe : ICloneable\n{\n    public string Color;\n    #region ICloneable Members\n    public object Clone()\n    {\n        Shoe newShoe = new Shoe();\n        newShoe.Color = Color.Clone() as string;\n        return newShoe;\n    }\n    #endregion\n}\n",[35228],{"type":597,"tag":629,"props":35229,"children":35230},{"__ignoreMap":591},[35231],{"type":603,"value":35226},{"type":597,"tag":606,"props":35233,"children":35234},{},[35235],{"type":603,"value":35236},"在Clone()方法里，我们创建了一个新的Shoe，克隆所有引用类型变量，复制所有值类型变量，最后返回新的对象Shoe。有些既有类已经实现了ICloneable，我们直接使用即可，如String。因此，我们直接使用Color.Clone()。因为Clone()返回object对象，我们需要进行一下类型转换。",{"type":597,"tag":606,"props":35238,"children":35239},{},[35240],{"type":603,"value":35241},"下一步，我们在CopyDude()方法里，用克隆Clone()代替复制：",{"type":597,"tag":621,"props":35243,"children":35246},{"code":35244,"language":8105,"meta":591,"className":35245},"public Dude CopyDude()\n{\n    Dude newPerson = new Dude();\n    newPerson.Name = Name;\n    newPerson.LeftShoe = LeftShoe.Clone() as Shoe;\n    newPerson.RightShoe = RightShoe.Clone() as Shoe;\n    return newPerson;\n}\n",[8107],[35247],{"type":597,"tag":629,"props":35248,"children":35249},{"__ignoreMap":591},[35250],{"type":603,"value":35244},{"type":597,"tag":606,"props":35252,"children":35253},{},[35254],{"type":603,"value":35255},"再次执行主方法Main()：",{"type":597,"tag":621,"props":35257,"children":35259},{"code":35127,"language":8105,"meta":591,"className":35258},[8107],[35260],{"type":597,"tag":629,"props":35261,"children":35262},{"__ignoreMap":591},[35263],{"type":603,"value":35127},{"type":597,"tag":606,"props":35265,"children":35266},{},[35267],{"type":603,"value":35138},{"type":597,"tag":621,"props":35269,"children":35272},{"code":35270,"language":35142,"meta":591,"className":35271},"Bill : Dude!, I have a Blue shoe on my right foot, and a Blue on my left foot\nTed : Dude!, I have a Red shoe on my right foot, and a Red on my left foot\n",[35144],[35273],{"type":597,"tag":629,"props":35274,"children":35275},{"__ignoreMap":591},[35276],{"type":603,"value":35270},{"type":597,"tag":606,"props":35278,"children":35279},{},[35280],{"type":603,"value":35281},"下面是图解：",{"type":597,"tag":606,"props":35283,"children":35284},{},[35285],{"type":597,"tag":719,"props":35286,"children":35288},{"alt":719,"src":35287},"/images/2020-09-11-stack-heap/20131128030404656",[],{"type":597,"tag":1023,"props":35290,"children":35292},{"id":35291},"整理我们的代码",[35293],{"type":603,"value":35291},{"type":597,"tag":606,"props":35295,"children":35296},{},[35297],{"type":603,"value":35298},"在实践中，我们是希望克隆引用类型并复制值类型的。这会让你回避很多不易察觉的错误，就像上面演示的一样。这种错误有时不易被调试出来，会让你很头疼。",{"type":597,"tag":606,"props":35300,"children":35301},{},[35302],{"type":603,"value":35303},"因此，为了减轻头疼，让我们更进一步清理上面的代码。我们让Dude类实现IConeable代替使用CopyDude()方法：",{"type":597,"tag":621,"props":35305,"children":35308},{"code":35306,"language":8105,"meta":591,"className":35307},"public class Dude: ICloneable\n{\n    public string Name;\n    public Shoe RightShoe;\n    public Shoe LeftShoe;\n    public override string ToString()\n    {\n        return (Name + \" : Dude!, I have a \" + RightShoe.Color + \" shoe on my right foot, and a \" + LeftShoe.Color + \" on my left foot.\");\n    }\n    #region ICloneable Members\n    public object Clone()\n    {\n        Dude newPerson = new Dude();\n        newPerson.Name = Name.Clone() as string;\n        newPerson.LeftShoe = LeftShoe.Clone() as Shoe;\n        newPerson.RightShoe = RightShoe.Clone() as Shoe;\n        return newPerson;\n    }\n    #endregion\n}\n",[8107],[35309],{"type":597,"tag":629,"props":35310,"children":35311},{"__ignoreMap":591},[35312],{"type":603,"value":35306},{"type":597,"tag":606,"props":35314,"children":35315},{},[35316],{"type":603,"value":35317},"在主方法Main()使用Dude.Clone()：",{"type":597,"tag":621,"props":35319,"children":35322},{"code":35320,"language":8105,"meta":591,"className":35321},"public static void Main()\n{\n    Class1 pgm = new Class1();\n    Dude Bill = new Dude();\n    Bill.Name = \"Bill\";\n    Bill.LeftShoe = new Shoe();\n    Bill.RightShoe = new Shoe();\n    Bill.LeftShoe.Color = Bill.RightShoe.Color = \"Blue\";\n    Dude Ted = Bill.Clone() as Dude;\n    Ted.Name = \"Ted\";\n    Ted.LeftShoe.Color = Ted.RightShoe.Color = \"Red\";\n    Console.WriteLine(Bill.ToString());\n    Console.WriteLine(Ted.ToString());\n}\n",[8107],[35323],{"type":597,"tag":629,"props":35324,"children":35325},{"__ignoreMap":591},[35326],{"type":603,"value":35320},{"type":597,"tag":606,"props":35328,"children":35329},{},[35330],{"type":603,"value":35331},"最后得到期望的结果：",{"type":597,"tag":621,"props":35333,"children":35335},{"code":35141,"language":35142,"meta":591,"className":35334},[35144],[35336],{"type":597,"tag":629,"props":35337,"children":35338},{"__ignoreMap":591},[35339],{"type":603,"value":35141},{"type":597,"tag":1023,"props":35341,"children":35343},{"id":35342},"特殊引用类型string",[35344],{"type":603,"value":35345},"特殊引用类型String",{"type":597,"tag":606,"props":35347,"children":35348},{},[35349,35351,35356],{"type":603,"value":35350},"在C#中有趣的是，当System.String 使用操作符“=”时，实际上是进行了克隆(深复制)。你不必担心你只是在操作一个指针，它会在内存中创建一个新的对象。但是，你一定要注意内存的占用问题(",{"type":597,"tag":1080,"props":35352,"children":35353},{},[35354],{"type":603,"value":35355},"译外话：比如为什么在一定情况下我们使用StringBuilder代替String+String+String+String...前者速度稍慢初始化耗多点内存但在大字符串操作上节省内存，后者速度稍快初始化简单但在大字符串操作上耗内存",{"type":603,"value":35357},")。如果我们回头去看上面的图解中，你会发现Stirng类型在图中并不是一个针指向另一个内存对象，而是为了尽可能的简单，把它当成值类型来演示了。",{"type":597,"tag":606,"props":35359,"children":35360},{},[35361],{"type":597,"tag":1080,"props":35362,"children":35363},{},[35364],{"type":603,"value":35365},"绘图Graphing",{"type":597,"tag":606,"props":35367,"children":35368},{},[35369],{"type":603,"value":35370},"让我们站在GC的角度研究一下。如果我们负责“扔垃圾”，我们需要制定一个有效的“扔垃圾”计划。显然，我们需要判断哪些是垃圾，哪些不是。",{"type":597,"tag":606,"props":35372,"children":35373},{},[35374,35376,35381],{"type":603,"value":35375},"为了决定哪些需要保留，我们假设任何没有正在被使用的东西都是垃圾（如角落里堆积的破旧纸张，阁楼里一箱箱没有用的过时产品,柜子里不用的衣服）。想像一下我们跟两个好朋友生活在一起：JIT 和CLR。",{"type":597,"tag":1080,"props":35377,"children":35378},{},[35379],{"type":603,"value":35380},"JIT和CLR",{"type":603,"value":35382},"不断的跟踪他们正在使用的东西，并给我们一个他们需要保留的东西列表。这个初始列表我们叫它“根(root)”列表。因为我们用它做起点。我们将保持一个主列表去绘制一张图，图中分布着所有我们在房子中需要保留东西。任何与主列表中有关联的东西也被画入图中。如，我们保留电视就不要扔掉电视遥控器，所以电视遥控器也会被画入图中。我们保留电脑就不能扔掉显示器键盘鼠标，同样也把它们画入图中。",{"type":597,"tag":606,"props":35384,"children":35385},{},[35386,35388],{"type":603,"value":35387},"这就是GC怎么决定去保留对象的。",{"type":597,"tag":1080,"props":35389,"children":35390},{},[35391],{"type":603,"value":35392},"GC会保留从JIT和CLR那收到的一个根(root)对象引用列表，然后递归搜索对象引用并决定什么需要保留。",{"type":597,"tag":606,"props":35394,"children":35395},{},[35396],{"type":603,"value":35397},"这个根的构成如下：",{"type":597,"tag":1321,"props":35399,"children":35400},{},[35401,35406,35411],{"type":597,"tag":807,"props":35402,"children":35403},{},[35404],{"type":603,"value":35405},"全局/静态 指针。通过以静态变量的方式保持对象的引用，来确保对象不会被GC回收。",{"type":597,"tag":807,"props":35407,"children":35408},{},[35409],{"type":603,"value":35410},"栈里的指针。为了程序的执行，我们不想扔掉那些程序线程始终需要的对象。",{"type":597,"tag":807,"props":35412,"children":35413},{},[35414],{"type":603,"value":35415},"CPU寄存器指针。托管堆里任何被CPU内存地址指向的对象都需要被保留。",{"type":597,"tag":606,"props":35417,"children":35418},{},[35419,35424],{"type":597,"tag":719,"props":35420,"children":35423},{"alt":35421,"src":35422},"在这里插入图片描述","/images/2020-09-11-stack-heap/20190919173037464.png",[],{"type":603,"value":35425},"\n在上面的图中，托管堆中的对象1，5被根Roots引用，3被1引用。对象1，5是被直接引用，3是通过递归查询找到。如果关联到我们之前的假设，对象1是我们的电视，对象3则是电视遥控器。当所有对象画完后，我们开始进行下一阶段：垃圾清理。",{"type":597,"tag":606,"props":35427,"children":35428},{},[35429],{"type":597,"tag":1080,"props":35430,"children":35431},{},[35432],{"type":603,"value":35433},"GC垃圾清理Compacting",{"type":597,"tag":606,"props":35435,"children":35436},{},[35437,35439,35443,35445,35449,35451,35455,35459],{"type":603,"value":35438},"现在我们有了一张需要保留对象的关系图，接下来进行GC的清理。\n",{"type":597,"tag":719,"props":35440,"children":35442},{"alt":35421,"src":35441},"/images/2020-09-11-stack-heap/20190919173106186.png",[],{"type":603,"value":35444},"\n图中对象2和4被认定为垃圾将被清理。清理对象2，复制（memcpy ）对象3到2的位置。\n",{"type":597,"tag":719,"props":35446,"children":35448},{"alt":35421,"src":35447},"/images/2020-09-11-stack-heap/20190919173121251.png",[],{"type":603,"value":35450},"\n由于对象3的地址变了，GC需要修复指针（红色箭头）。然后清理对象4，复制（memcpy ）对象5到原来3的位置（译外话：GC原则：堆中对象之间是没有间隙的，以后会有文章专门介绍GC原理）。\n",{"type":597,"tag":719,"props":35452,"children":35454},{"alt":35421,"src":35453},"/images/2020-09-11-stack-heap/20190919173159935.png",[],{"type":597,"tag":719,"props":35456,"children":35458},{"alt":35421,"src":35457},"/images/2020-09-11-stack-heap/20190919173215230.png",[],{"type":603,"value":35460},"\n最后清理完毕，新对象将被放到对象5的上面(译外话：GC对一直管理一个指针指向新对象将被放置的地址，如黄色箭头，以后会有文章专门介绍)。",{"type":597,"tag":606,"props":35462,"children":35463},{},[35464],{"type":603,"value":35465},"了解GC原理可以帮助我们理解GC清理(复制memcpy ，指针修复等)是怎么消耗掉很多资源的。很明显，减少托管堆里对象的移动（复制memcpy ）可以提高GC清理的效率。",{"type":597,"tag":606,"props":35467,"children":35468},{},[35469],{"type":597,"tag":1080,"props":35470,"children":35471},{},[35472],{"type":603,"value":35473},"托管堆之外的终止化队列Finalization Queue和终止化-可达队列Freachable Queue",{"type":597,"tag":606,"props":35475,"children":35476},{},[35477,35479,35483],{"type":603,"value":35478},"有些情况下，GC需要执行特定代码去清理非托管资源，如文件操作，数据库连接，网络连接等。一种可行性方案是使用析构函数（终结器）：\n",{"type":597,"tag":719,"props":35480,"children":35482},{"alt":35421,"src":35481},"/images/2020-09-11-stack-heap/20190919173419800.png",[],{"type":603,"value":35484},"\n译外话：析构函数会被内部转换成终结器override Finializer()",{"type":597,"tag":606,"props":35486,"children":35487},{},[35488],{"type":603,"value":35489},"有终结器的对象在创建时，同时在Finalization Queue里创建指向它们的指针（更正原文说的把对象放到Finalization Queue里）：",{"type":597,"tag":606,"props":35491,"children":35492},{},[35493,35497,35499,35503],{"type":597,"tag":719,"props":35494,"children":35496},{"alt":35421,"src":35495},"/images/2020-09-11-stack-heap/20190919173504552.png",[],{"type":603,"value":35498},"\n上图对象1,4,5实现了终结器，因此在Finalization Queue里创建指向它们的指针。让我们看一下，当对象2和4没有被程序引用要被GC清理时会发生什么情况。\n对象2会被以常规模式清理掉(见文章开始部分)。GC发现对象4有终结器，则会把Finalization Queue里指向它的指针移到Freachable Queue中，如下图：\n",{"type":597,"tag":719,"props":35500,"children":35502},{"alt":35421,"src":35501},"/images/2020-09-11-stack-heap/20190919173647141.png",[],{"type":603,"value":35504},"\n但是对象4并不被清理掉。有一个专门处理Freachable Queue的线程，当它处理完对象4在Freachable Queue里的指针后，会把它移除。",{"type":597,"tag":606,"props":35506,"children":35507},{},[35508,35512],{"type":597,"tag":719,"props":35509,"children":35511},{"alt":35421,"src":35510},"/images/2020-09-11-stack-heap/20190919173729593.png",[],{"type":603,"value":35513},"\n这时对象4可以被清理了。当下次GC清理时会把它移除掉。换句话说，至少执行两次GC清理才能把对象4清理掉，显然会影响程序性能。",{"type":597,"tag":606,"props":35515,"children":35516},{},[35517],{"type":603,"value":35518},"创建终结器，意味着创建了更多的工作给GC，也就会消耗更多资源影响程序性能。因此，当你使用终结器时一定要确保你确实需要使用它。\n更好的方法是使用IDisposable接口。",{"type":597,"tag":606,"props":35520,"children":35521},{},[35522,35526,35528,35532],{"type":597,"tag":719,"props":35523,"children":35525},{"alt":35421,"src":35524},"/images/2020-09-11-stack-heap/20190919173836793.png",[],{"type":603,"value":35527},"\n实现IDisposable接口的对象可以使用using关键字：\n",{"type":597,"tag":719,"props":35529,"children":35531},{"alt":35421,"src":35530},"/images/2020-09-11-stack-heap/20190919173851233.png",[],{"type":603,"value":35533},"\n变量rec的作用域是大括号内，大括号外不可访问。",{"type":597,"tag":606,"props":35535,"children":35536},{},[35537],{"type":597,"tag":1080,"props":35538,"children":35539},{},[35540],{"type":603,"value":35541},"静态变量",{"type":597,"tag":606,"props":35543,"children":35544},{},[35545],{"type":597,"tag":719,"props":35546,"children":35548},{"alt":35421,"src":35547},"/images/2020-09-11-stack-heap/20190919174039786.png",[],{"type":597,"tag":606,"props":35550,"children":35551},{},[35552],{"type":603,"value":35553},"如果你初始化了TryoutRunners，那么它将永远不会被GC清理，因为有静态指针一直指向初始化的对象。一旦调用了Runner里GetStats()方法，因为GetStats()里面没有文件关闭操作，它将永远被打开也不会被GC清理。我们可以看到程序的崩溃即将来临。",{"type":597,"tag":857,"props":35555,"children":35556},{"id":24947},[35557],{"type":603,"value":24947},{"type":597,"tag":1321,"props":35559,"children":35560},{},[35561,35571,35581,35591,35601],{"type":597,"tag":807,"props":35562,"children":35563},{},[35564],{"type":597,"tag":886,"props":35565,"children":35568},{"href":35566,"rel":35567},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i/",[890],[35569],{"type":603,"value":35570},"C# Heap(ing) Vs Stack(ing) In .NET - Part One (c-sharpcorner.com)",{"type":597,"tag":807,"props":35572,"children":35573},{},[35574],{"type":597,"tag":886,"props":35575,"children":35578},{"href":35576,"rel":35577},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-ii/",[890],[35579],{"type":603,"value":35580},"C# Heap(ing) Vs Stack(ing) In .NET - Part Two (c-sharpcorner.com)",{"type":597,"tag":807,"props":35582,"children":35583},{},[35584],{"type":597,"tag":886,"props":35585,"children":35588},{"href":35586,"rel":35587},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-iii/",[890],[35589],{"type":603,"value":35590},"C# Heap(ing) Vs Stack(ing) In .NET - Part Three (c-sharpcorner.com)",{"type":597,"tag":807,"props":35592,"children":35593},{},[35594],{"type":597,"tag":886,"props":35595,"children":35598},{"href":35596,"rel":35597},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-iv/",[890],[35599],{"type":603,"value":35600},"C# Heap(ing) Vs Stack(ing) In .NET - Part Four (c-sharpcorner.com)",{"type":597,"tag":807,"props":35602,"children":35603},{},[35604],{"type":597,"tag":886,"props":35605,"children":35608},{"href":35606,"rel":35607},"https://www.bilibili.com/video/BV1Tt4y1X7f6",[890],[35609],{"type":603,"value":35610},"Unite Now - （中文字幕）性能优化技巧（上）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili",{"title":591,"searchDepth":787,"depth":787,"links":35612},[35613,35614,35619,35620,35621,35622,35623,35626,35627,35628,35629,35630],{"id":34060,"depth":787,"text":34063},{"id":34123,"depth":787,"text":34123,"children":35615},[35616,35617,35618],{"id":34133,"depth":1530,"text":34139},{"id":34223,"depth":1530,"text":34229},{"id":34265,"depth":1530,"text":34271},{"id":34286,"depth":787,"text":34286},{"id":34328,"depth":787,"text":34328},{"id":34427,"depth":787,"text":34430},{"id":34445,"depth":787,"text":34445},{"id":34523,"depth":787,"text":34523,"children":35624},[35625],{"id":34538,"depth":1530,"text":34445},{"id":34652,"depth":787,"text":34655},{"id":34716,"depth":787,"text":34716},{"id":34873,"depth":787,"text":34873},{"id":34975,"depth":787,"text":34975},{"id":35081,"depth":787,"text":35081,"children":35631},[35632,35633,35634,35635],{"id":35091,"depth":1530,"text":35091},{"id":35157,"depth":1530,"text":35157},{"id":35291,"depth":1530,"text":35291},{"id":35342,"depth":1530,"text":35345},"content:unity:2020-09-11-stack-heap.md","unity/2020-09-11-stack-heap.md","2020-09-11",{"_path":475,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":474,"description":35640,"body":35641,"_type":791,"_id":37049,"_source":793,"_file":37050,"_extension":795,"date":37051},"首先第一部分.我们要注意在平时工作中需要注意哪些地方养成一套流程规范.避免出现已经被总结出来的问题",{"type":594,"children":35642,"toc":37027},[35643,35648,35652,35657,35671,35678,35689,35694,35699,35705,35865,35871,35901,35907,35985,35990,35995,36008,36013,36080,36086,36091,36103,36134,36146,36203,36214,36223,36235,36245,36255,36271,36276,36281,36286,36291,36296,36305,36310,36333,36339,36362,36367,36457,36462,36503,36508,36514,36532,36538,36581,36587,36625,36630,36658,36663,36669,36675,36680,36713,36719,36724,36730,36735,36740,36746,36754,36759,36764,36772,36777,36782,36800,36805,36813,36836,36841,36849,36854,36859,36882,36890,36895,36900,36905,36910,36915,36928,36933,36940,36945,36950,36955,36960,36973,36982,36989,37008,37013],{"type":597,"tag":857,"props":35644,"children":35646},{"id":35645},"资源检查",[35647],{"type":603,"value":35645},{"type":597,"tag":606,"props":35649,"children":35650},{},[35651],{"type":603,"value":35640},{"type":597,"tag":598,"props":35653,"children":35655},{"id":35654},"代码",[35656],{"type":603,"value":35654},{"type":597,"tag":606,"props":35658,"children":35659},{},[35660,35662,35669],{"type":603,"value":35661},"Unity 的垃圾收集（使用 ",{"type":597,"tag":886,"props":35663,"children":35666},{"href":35664,"rel":35665},"https://en.wikipedia.org/wiki/Boehm_garbage_collector",[890],[35667],{"type":603,"value":35668},"Boehm GC 算法",{"type":603,"value":35670},"）是非分代的，也是非压缩的。“非分代”意味着 GC 在执行每遍收集时必须扫描整个堆，因此随着堆的扩展，其性能会下降。“非压缩”意味着不会为内存中的对象重新分配内存地址来消除对象之间的间隙。",{"type":597,"tag":606,"props":35672,"children":35673},{},[35674],{"type":597,"tag":719,"props":35675,"children":35677},{"alt":719,"src":35676},"/images/2020-09-10-optimizing-for-performance/UnderstandingPerformanceinUnity-AssetAuditingSection_image_1.png",[],{"type":597,"tag":606,"props":35679,"children":35680},{},[35681,35683,35687],{"type":603,"value":35682},"上图为内存碎片化示例。释放对象时，将释放其内存。但是，释放的空间",{"type":597,"tag":1080,"props":35684,"children":35685},{},[35686],{"type":603,"value":32029},{"type":603,"value":35688},"整合成为整个“可用内存”池的一部分。位于释放的对象两侧的对象可能仍在使用中。因此，释放的空间成为其他内存段之间的“间隙”（该间隙由上图中的红色圆圈指示）。因此，新释放的空间仅可用于存储与释放相同大小或更小的对象的数据。",{"type":597,"tag":606,"props":35690,"children":35691},{},[35692],{"type":603,"value":35693},"分配对象时，请注意对象在内存空间中的分配地址必须始终为连续空间块。",{"type":597,"tag":606,"props":35695,"children":35696},{},[35697],{"type":603,"value":35698},"这导致了内存碎片化这个核心问题：虽然堆中的可用空间总量可能很大，但是可能其中的部分或全部的可分配空间对象之间存在小的“间隙”。这种情况下，即使可用空间总量高于要分配的空间量，托管堆可能也找不到足够大的连续内存块来满足该分配需求。",{"type":597,"tag":1023,"props":35700,"children":35702},{"id":35701},"cpu",[35703],{"type":603,"value":35704},"CPU",{"type":597,"tag":803,"props":35706,"children":35707},{},[35708,35731,35771,35776,35781,35817,35845,35850,35855,35860],{"type":597,"tag":807,"props":35709,"children":35710},{},[35711,35713,35720,35722,35729],{"type":603,"value":35712},"Unity 不使用字符串名称对 Animator、Material 和 Shader 属性进行内部寻址。为了加快速度，所有属性名称都经过哈希处理为属性 ID，实际上正是这些 ID 用于寻址属性。",{"type":597,"tag":886,"props":35714,"children":35717},{"href":35715,"rel":35716},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Animator.StringToHash.html",[890],[35718],{"type":603,"value":35719},"Animator.StringToHash",{"type":603,"value":35721}," 是用于 Animator 属性名称的对应 API，",{"type":597,"tag":886,"props":35723,"children":35726},{"href":35724,"rel":35725},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Shader.PropertyToID.html",[890],[35727],{"type":603,"value":35728},"Shader.PropertyToID",{"type":603,"value":35730}," 是用于 Material 和 Shader 属性名称的对应 API。",{"type":597,"tag":807,"props":35732,"children":35733},{},[35734,35736,35743,35745,35752,35754,35761,35762,35769],{"type":603,"value":35735},"将 ",{"type":597,"tag":886,"props":35737,"children":35740},{"href":35738,"rel":35739},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.RaycastAll.html",[890],[35741],{"type":603,"value":35742},"RaycastAll",{"type":603,"value":35744}," 调用替换为 ",{"type":597,"tag":886,"props":35746,"children":35749},{"href":35747,"rel":35748},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.RaycastNonAlloc.html",[890],[35750],{"type":603,"value":35751},"RaycastNonAlloc",{"type":603,"value":35753},"，将 ",{"type":597,"tag":886,"props":35755,"children":35758},{"href":35756,"rel":35757},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.SphereCastAll.html",[890],[35759],{"type":603,"value":35760},"SphereCastAll",{"type":603,"value":35744},{"type":597,"tag":886,"props":35763,"children":35766},{"href":35764,"rel":35765},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.SphereCastNonAlloc.html",[890],[35767],{"type":603,"value":35768},"SphereCastNonAlloc",{"type":603,"value":35770},"，以此类推。对于 2D 应用程序，也存在所有 Physics2D 查询 API 的非分配版本。",{"type":597,"tag":807,"props":35772,"children":35773},{},[35774],{"type":603,"value":35775},"请避免在紧凑循环中或每帧运行的代码中进行UnityEngine.Object 子类和 Null 比较。Il2cpp中此过程必须执行查找和验证以便将脚本引用转换为对原生代码的引用。",{"type":597,"tag":807,"props":35777,"children":35778},{},[35779],{"type":603,"value":35780},"整数数学比浮点数学更快，而浮点数学比矢量、矩阵或四元数运算更快。每当交换或关联算术允许时，请尝试最小化单个数学运算的成本",{"type":597,"tag":807,"props":35782,"children":35783},{},[35784,35786,35792,35793,35799,35801,35807,35809,35815],{"type":603,"value":35785},"最好完全避免在生产代码中使用 ",{"type":597,"tag":629,"props":35787,"children":35789},{"className":35788},[],[35790],{"type":603,"value":35791},"Object.Find",{"type":603,"value":13757},{"type":597,"tag":629,"props":35794,"children":35796},{"className":35795},[],[35797],{"type":603,"value":35798},"Object.FindObjectOfType",{"type":603,"value":35800},"。还有",{"type":597,"tag":629,"props":35802,"children":35804},{"className":35803},[],[35805],{"type":603,"value":35806},"Camera.main",{"type":603,"value":35808},"也使用了",{"type":597,"tag":629,"props":35810,"children":35812},{"className":35811},[],[35813],{"type":603,"value":35814},"FindGameObjectsWithTag",{"type":603,"value":35816},",由于此类 API 要求 Unity 遍历内存中的所有游戏对象和组件，因此它们会随着项目规模的扩大而产生性能问题。(除了单例,因为有缓存)",{"type":597,"tag":807,"props":35818,"children":35819},{},[35820,35822,35828,35829,35835,35837],{"type":603,"value":35821},"在紧凑循环中尽量少用",{"type":597,"tag":629,"props":35823,"children":35825},{"className":35824},[],[35826],{"type":603,"value":35827},"属性(get,set)",{"type":603,"value":695},{"type":597,"tag":629,"props":35830,"children":35832},{"className":35831},[],[35833],{"type":603,"value":35834},"方法",{"type":603,"value":35836},",调用的每个方法都必须在内存中找到该方法的地址，并将另一个帧推入栈。所有这些操作都是有成本的，但在大多数代码中，它们都小到可以忽略不计.但是，在紧凑循环中运行较小的方法时，因引入额外方法调用而增加的开销可能会变得非常显著，甚至占主导地位。.例如",{"type":597,"tag":621,"props":35838,"children":35840},{"code":35839},"int Accum { get; set; }\nAccum = 0;\n\nfor(int i = 0;\n       i \u003C myList.Count;    // myList.Count 调用 Count 属性上的 get 方法\n       i++) {\n    Accum       // 通过 set 将加法运算的结果分配给 Accum\n+=      // 通过 get 检索 Accum 的当前值，以便将其传递给加法运算\nmyList[i];  // [] 运算符调用列表的 get_Value 方法来检索列表特定索引位置的项值。\n",[35841],{"type":597,"tag":629,"props":35842,"children":35843},{"__ignoreMap":591},[35844],{"type":603,"value":35839},{"type":597,"tag":807,"props":35846,"children":35847},{},[35848],{"type":603,"value":35849},"移除空的MonoBehaviour方法start update awake..理由同上",{"type":597,"tag":807,"props":35851,"children":35852},{},[35853],{"type":603,"value":35854},"不要在运行时使用AddComponent将组件添加到GameObjects可能是一项非常昂贵的操作。因为他会先看组件有没有DisallowMultipleComponent的设置,然后又重复上述的检查一次最后还需要调用所有被加入的monobehaviour的awake方法,这些所有步骤都发生在堆内存上",{"type":597,"tag":807,"props":35856,"children":35857},{},[35858],{"type":603,"value":35859},"不要使用Texture2D.SetPixels() ,使用Texture2D.SetPixels32() 或者 GetRawTextureData()/Apply() 代替",{"type":597,"tag":807,"props":35861,"children":35862},{},[35863],{"type":603,"value":35864},"尽量避免调用Object.Instantiate再经常更新的代码。这里可以使用poolmanager代替",{"type":597,"tag":1023,"props":35866,"children":35868},{"id":35867},"gpu",[35869],{"type":603,"value":35870},"GPU",{"type":597,"tag":803,"props":35872,"children":35873},{},[35874,35879,35884,35889],{"type":597,"tag":807,"props":35875,"children":35876},{},[35877],{"type":603,"value":35878},"meshreander->lighting -> cast shadows关闭阴影投射",{"type":597,"tag":807,"props":35880,"children":35881},{},[35882],{"type":603,"value":35883},"尽可能少的light,然后只对特定曾有用",{"type":597,"tag":807,"props":35885,"children":35886},{},[35887],{"type":603,"value":35888},"过高的分辨率会造成手机发热..可以使用Screen.SetResolution(width,height,false)",{"type":597,"tag":807,"props":35890,"children":35891},{},[35892,35894],{"type":603,"value":35893},"启用GPU实例化,",{"type":597,"tag":886,"props":35895,"children":35898},{"href":35896,"rel":35897},"https://docs.unity3d.com/cn/2020.2/Manual/GPUInstancing.html",[890],[35899],{"type":603,"value":35900},"GPU 实例化 - Unity 手册 (unity3d.com)",{"type":597,"tag":1023,"props":35902,"children":35904},{"id":35903},"ui",[35905],{"type":603,"value":35906},"UI",{"type":597,"tag":803,"props":35908,"children":35909},{},[35910,35915,35920,35925,35930,35935,35940,35945,35950,35955,35960,35965,35970,35975,35980],{"type":597,"tag":807,"props":35911,"children":35912},{},[35913],{"type":603,"value":35914},"将对象隐藏起来,而不是移动到屏幕外边..因为摄像机依然能看到这些对象,依然会被渲染",{"type":597,"tag":807,"props":35916,"children":35917},{},[35918],{"type":603,"value":35919},"如果UI元素改变数值或是位置,会影响批次处理,造成对Gpu发送更多drawcall,所以将更新频率不同的ui分再不同的画布上",{"type":597,"tag":807,"props":35921,"children":35922},{},[35923],{"type":603,"value":35924},"同张画布中的ui元素要有一样的z值",{"type":597,"tag":807,"props":35926,"children":35927},{},[35928],{"type":603,"value":35929},"ui元素必须拥有一样的材质和纹理",{"type":597,"tag":807,"props":35931,"children":35932},{},[35933],{"type":603,"value":35934},"对象拥有一样的clipping rect(矩形裁剪范围)",{"type":597,"tag":807,"props":35936,"children":35937},{},[35938],{"type":603,"value":35939},"去掉不需要的Graphic Raycaster,每次当用户点击触发事件时,系统就会遍历所有可能接收输入事件的ui元素,这会造成多次\"点落再矩形中\"检查,来判断对象是否该做出反应",{"type":597,"tag":807,"props":35941,"children":35942},{},[35943],{"type":603,"value":35944},"如果打开了全屏ui,把渲染3d场景的摄像机关掉",{"type":597,"tag":807,"props":35946,"children":35947},{},[35948],{"type":603,"value":35949},"如果打开了全屏ui,隐藏其他被遮蔽的ui,如果可以,建议你关闭canvas组件,而不是游戏对象本身,这样能减少画布再次出现的时间.禁用canvase组件会阻止画布向Gpu发起绘图调用,所以该画布不再可见,然后,此时该画布不会丢弃它的顶点缓冲区,它会保留所有网格和顶点,当重新启用时,不会触发重构过程,它只会重新绘制画布内容.此外禁用canvas组件不会触发canvas层级上性能消耗较大的ondisable/onenable回调,禁用子组件时要小心,注意它是否运行性能消耗较大的每帧代码.",{"type":597,"tag":807,"props":35951,"children":35952},{},[35953],{"type":603,"value":35954},"尽可能的降低帧率,如果有个静态的ui,就没有必要设置帧率到60",{"type":597,"tag":807,"props":35956,"children":35957},{},[35958],{"type":603,"value":35959},"如果texture是中心镂空且切图为九宫格时，可以去除fill center，以减少over draw。",{"type":597,"tag":807,"props":35961,"children":35962},{},[35963],{"type":603,"value":35964},"使用Empty4Raycast代替空的image",{"type":597,"tag":807,"props":35966,"children":35967},{},[35968],{"type":603,"value":35969},"不要使用ugui的outline和shadow,他时把原来的顶点copy多份进行实现的..可以使用shader进行实现",{"type":597,"tag":807,"props":35971,"children":35972},{},[35973],{"type":603,"value":35974},"mask会增加一个drawcall,并且mask里面的图片不会和外面的图片合批,",{"type":597,"tag":807,"props":35976,"children":35977},{},[35978],{"type":603,"value":35979},"Scroll Rect 组件对应的Content填加 Canvas 组件 ，因为对应的Mask 子元素依然参与全局的Depth排序，避免因拖动打乱原有的Depth排序，造成合批失败",{"type":597,"tag":807,"props":35981,"children":35982},{},[35983],{"type":603,"value":35984},"尽量不要使用layout,因为会从变动节点递归向上调用GetComponents",{"type":597,"tag":3995,"props":35986,"children":35988},{"id":35987},"图集整理",[35989],{"type":603,"value":35987},{"type":597,"tag":606,"props":35991,"children":35992},{},[35993],{"type":603,"value":35994},"为什么使用图集?",{"type":597,"tag":803,"props":35996,"children":35997},{},[35998,36003],{"type":597,"tag":807,"props":35999,"children":36000},{},[36001],{"type":603,"value":36002},"图片尺寸为2的次幂时，GPU处理起来会快很多，小图自己是做不到每张图都是2的次幂的，但打成一张大图就可以（浪费一点也无所谓）；",{"type":597,"tag":807,"props":36004,"children":36005},{},[36006],{"type":603,"value":36007},"CPU在传送资源信息给GPU时，只需要传一张大图就可以了，因为GPU可以在这张图中的不同区域进行采样，然后拼出对应的界面。注意，这就是为什么需要用同一个Source Image图集的原因，是Batch的关键，因为一个Drawcall就把所有原材料传过去了，GPU你画去吧",{"type":597,"tag":606,"props":36009,"children":36010},{},[36011],{"type":603,"value":36012},"但是显然把所有图片打成一张图集是不合理的，因为这张图可能非常大，所以就要按照一定规则将图片进行分类。在分类思路上，我们希望做到Drawcall尽可能少，同时资源量也尽可能少（多些重用），但这两者某种程度上是互斥的，所以折衷一下，可以遵循以下思路：",{"type":597,"tag":1321,"props":36014,"children":36015},{},[36016,36028,36039],{"type":597,"tag":807,"props":36017,"children":36018},{},[36019,36021,36026],{"type":603,"value":36020},"设计UI时要考虑重用性，如一些边框、按钮等，这些作为共享资源，放在1~3张大图集中，称为",{"type":597,"tag":1080,"props":36022,"children":36023},{},[36024],{"type":603,"value":36025},"重用图集",{"type":603,"value":36027},"；",{"type":597,"tag":807,"props":36029,"children":36030},{},[36031,36033,36038],{"type":603,"value":36032},"其它非重用UI按照功能模块进行划分，每个模块使用1~2张图集，为",{"type":597,"tag":1080,"props":36034,"children":36035},{},[36036],{"type":603,"value":36037},"功能图集",{"type":603,"value":36027},{"type":597,"tag":807,"props":36040,"children":36041},{},[36042,36044,36048,36050,36054,36056,36060,36062,36066,36068,36072,36074,36078],{"type":603,"value":36043},"对于一些UI，如果同时用到",{"type":597,"tag":1080,"props":36045,"children":36046},{},[36047],{"type":603,"value":36037},{"type":603,"value":36049},"与",{"type":597,"tag":1080,"props":36051,"children":36052},{},[36053],{"type":603,"value":36025},{"type":603,"value":36055},"，但是其",{"type":597,"tag":1080,"props":36057,"children":36058},{},[36059],{"type":603,"value":36037},{"type":603,"value":36061},"剩下的“空位”较多，则可以考虑将用到的",{"type":597,"tag":1080,"props":36063,"children":36064},{},[36065],{"type":603,"value":36025},{"type":603,"value":36067},"中的元素单独拎出来，合入",{"type":597,"tag":1080,"props":36069,"children":36070},{},[36071],{"type":603,"value":36037},{"type":603,"value":36073},"中，从而做到让UI只依赖于",{"type":597,"tag":1080,"props":36075,"children":36076},{},[36077],{"type":603,"value":36037},{"type":603,"value":36079},"。也就是通过一定的冗余，来达到性能的提升。",{"type":597,"tag":3995,"props":36081,"children":36083},{"id":36082},"ugui层级合并规则与批次生成规则",[36084],{"type":603,"value":36085},"UGUI层级合并规则与批次生成规则",{"type":597,"tag":606,"props":36087,"children":36088},{},[36089],{"type":603,"value":36090},"UGUI的层叠顺序是按照Hierarchy中的顺序从上往下进行的，也就是越靠上的组件，就会被画在越底部。",{"type":597,"tag":606,"props":36092,"children":36093},{},[36094,36096,36101],{"type":603,"value":36095},"所以UI就是这样一层一层地叠上去画出来的。当然这样一个一个地画效率肯定是不能接受的，所以要合并，要Batch，Unity自身就提供了一个算法去决定哪些层应该合并到一起，并以什么样的顺序进行绘制。",{"type":597,"tag":1080,"props":36097,"children":36098},{},[36099],{"type":603,"value":36100},"所有相邻层的可Batch的UI元素将会在一个Drawcall完成",{"type":603,"value":36102},"。接下来就来讨论一下Unity的层级合并与计算算法。",{"type":597,"tag":606,"props":36104,"children":36105},{},[36106,36108,36113,36115,36119,36121,36126,36128,36132],{"type":603,"value":36107},"Unity的UI渲染顺序的确定有2个步骤，第一步计算每个UI元素的",{"type":597,"tag":1080,"props":36109,"children":36110},{},[36111],{"type":603,"value":36112},"层级号",{"type":603,"value":36114},"；第二步合并相同",{"type":597,"tag":1080,"props":36116,"children":36117},{},[36118],{"type":603,"value":36112},{"type":603,"value":36120},"中可以Batch的元素作为一个",{"type":597,"tag":1080,"props":36122,"children":36123},{},[36124],{"type":603,"value":36125},"批次",{"type":603,"value":36127},"，并对",{"type":597,"tag":1080,"props":36129,"children":36130},{},[36131],{"type":603,"value":36125},{"type":603,"value":36133},"进行排序；",{"type":597,"tag":606,"props":36135,"children":36136},{},[36137,36139,36144],{"type":603,"value":36138},"先从直观的角度来解释",{"type":597,"tag":1080,"props":36140,"children":36141},{},[36142],{"type":603,"value":36143},"计算层级号的算法",{"type":603,"value":36145},"：",{"type":597,"tag":1321,"props":36147,"children":36148},{},[36149,36154,36165,36176,36187],{"type":597,"tag":807,"props":36150,"children":36151},{},[36152],{"type":603,"value":36153},"如果有一个UI元素，它所占的屏幕范围内（通常是矩形），",{"type":597,"tag":807,"props":36155,"children":36156},{},[36157,36159,36163],{"type":603,"value":36158},"如果没有任何UI在它的底下，那么它的",{"type":597,"tag":1080,"props":36160,"children":36161},{},[36162],{"type":603,"value":36112},{"type":603,"value":36164},"就是0（最底下）；",{"type":597,"tag":807,"props":36166,"children":36167},{},[36168,36170,36174],{"type":603,"value":36169},"如果有一个UI在其底下且该UI可以和它Batch，那它的",{"type":597,"tag":1080,"props":36171,"children":36172},{},[36173],{"type":603,"value":36112},{"type":603,"value":36175},"与底下的UI层级一样；",{"type":597,"tag":807,"props":36177,"children":36178},{},[36179,36181,36185],{"type":603,"value":36180},"如果有一个UI在其底下但是无法与它Batch，那它的",{"type":597,"tag":1080,"props":36182,"children":36183},{},[36184],{"type":603,"value":36112},{"type":603,"value":36186},"为底下的UI的层级+1；",{"type":597,"tag":807,"props":36188,"children":36189},{},[36190,36192,36196,36198,36202],{"type":603,"value":36191},"如果有多个UI都在其下面，那么按前两种方式遍历计算所有的",{"type":597,"tag":1080,"props":36193,"children":36194},{},[36195],{"type":603,"value":36112},{"type":603,"value":36197},"，其中最大的那个作为自己的",{"type":597,"tag":1080,"props":36199,"children":36200},{},[36201],{"type":603,"value":36112},{"type":603,"value":758},{"type":597,"tag":606,"props":36204,"children":36205},{},[36206,36208,36212],{"type":603,"value":36207},"这里也给一下伪代码，假设所有UI元素（抛弃层级关系）都按从上往下的顺序被装在一个list中，那么每个UI元素对应的",{"type":597,"tag":1080,"props":36209,"children":36210},{},[36211],{"type":603,"value":36112},{"type":603,"value":36213},"计算可以参考以下：",{"type":597,"tag":621,"props":36215,"children":36218},{"code":36216,"language":8105,"meta":591,"className":36217},"function CalLayer(List UIEleLst)\n  if(UIEleLst.Count == 0 ) return;\n  //Initial the first UI Element as layer 0\n  UIEleLst[0].layer = 0;\n  for(i = 1 ~ UIEleLst.Count){\n    var IsCollideWithElements = false; \n    //Compare with all elements beneath\n    for(j = i-1 ~ 0){\n      //If Element-i collide with Element-j\n      if(UIEleLst[i].Rect.CollideWith(UIEleLst[j].Rect)){\n        IsCollideWithElements = true;\n        //If Element-i can be batched with Element-j, same layer as Element-j\n        if(UIEleLst[i].QualifyToBatchWith(UIEleLst[j])){\n          UIEleLst[i].layer = UIEleLst[j].layer;\n        }\n        else{\n          //Or else the layer is larger \n          UIEleLst[i].layer = UIEleLst[j].layer + 1;\n        }\n      }\n    }\n    //If not collide with any elements beneath, set layer to 0\n    if(!IsCollideWithElements)\n    {\n      UIEleLst[i].layer = 0;\n    }\n  }\n\n \n",[8107],[36219],{"type":597,"tag":629,"props":36220,"children":36221},{"__ignoreMap":591},[36222],{"type":603,"value":36216},{"type":597,"tag":606,"props":36224,"children":36225},{},[36226,36228,36233],{"type":603,"value":36227},"有了层级号之后，就要",{"type":597,"tag":1080,"props":36229,"children":36230},{},[36231],{"type":603,"value":36232},"合并批次",{"type":603,"value":36234},"了，",{"type":597,"tag":606,"props":36236,"children":36237},{},[36238,36240,36244],{"type":603,"value":36239},"此时，Unity会将每一层的所有元素进行一个排序（按照材质、纹理等信息），合并掉可以Batch的元素成为一个",{"type":597,"tag":1080,"props":36241,"children":36242},{},[36243],{"type":603,"value":36125},{"type":603,"value":9343},{"type":597,"tag":606,"props":36246,"children":36247},{},[36248,36253],{"type":597,"tag":1080,"props":36249,"children":36250},{},[36251],{"type":603,"value":36252},"目前已知的排序规则是，Text组件会排在Image组件之前渲染",{"type":603,"value":36254},"，而同一类组件的情况下排序规则未知（好像并没什么规则）。",{"type":597,"tag":606,"props":36256,"children":36257},{},[36258,36263,36265,36270],{"type":597,"tag":1080,"props":36259,"children":36260},{},[36261],{"type":603,"value":36262},"经过以上排序，就可以得到一个有序的批次序列了",{"type":603,"value":36264},"。这时，",{"type":597,"tag":1080,"props":36266,"children":36267},{},[36268],{"type":603,"value":36269},"Unity会再做一个优化，即如果相邻间的两个批次正好可以Batch的话就会进行Batch",{"type":603,"value":758},{"type":597,"tag":606,"props":36272,"children":36273},{},[36274],{"type":603,"value":36275},"举个栗子，一个层级为0的ImageA，一个层级为1的ImageB（2个Image可Batch）和一个层级为0的TextC，",{"type":597,"tag":606,"props":36277,"children":36278},{},[36279],{"type":603,"value":36280},"Unity排序后的批次为TextC->ImageA->ImageB，后两个批次可以合并，所以是2个Drawcall。",{"type":597,"tag":606,"props":36282,"children":36283},{},[36284],{"type":603,"value":36285},"再举个栗子，一个层级为0的TextD，一个层级为1的TextE（2个Text可Batch）和一个层级为0的ImageF，",{"type":597,"tag":606,"props":36287,"children":36288},{},[36289],{"type":603,"value":36290},"Unity排序后的批次为TextD->ImageF->TextE，这时就需要3个Drawcall了！（是不是有点晕，再回顾下黑体字）",{"type":597,"tag":606,"props":36292,"children":36293},{},[36294],{"type":603,"value":36295},"以下的伪代码有些偷懒，实在懒得写排序、合并之类的，一长串也不好读，几个步骤列一下，其它诸位看上面那段文字脑补下吧...",{"type":597,"tag":621,"props":36297,"children":36300},{"code":36298,"language":8105,"meta":591,"className":36299},"function MergeBatch(List UIEleLst)\n{\n  //Order the UI Elements by their layers and batch-keys, \n  //batch-key is a combination of its component type, \n  //texture and material info\n  UIEleLst.OrderBy(\n   (uiElement)=>{return this.layer > uiElement.layer\n   || this.BatchKey() > uiElement.BatchKey()} \n  );\n\n  //Merge the UI Elements with same layer and batch-key as a batch\n  var BatchLst = UIEleLst.MergeSameElementsAsBatch();\n\n  //Make adjacent batches with same batch-key merged\n  BatchLst.MergeAdjacentBatches();\n\n  return BatchLst;\n}\n",[8107],[36301],{"type":597,"tag":629,"props":36302,"children":36303},{"__ignoreMap":591},[36304],{"type":603,"value":36298},{"type":597,"tag":606,"props":36306,"children":36307},{},[36308],{"type":603,"value":36309},"根据以上规则，就可以得出一些“摆UI”的技巧：",{"type":597,"tag":1321,"props":36311,"children":36312},{},[36313,36318,36323,36328],{"type":597,"tag":807,"props":36314,"children":36315},{},[36316],{"type":603,"value":36317},"有相同材质和纹理的UI元素是可以Batch的，可以Batch的UI上下叠在一块不会影响性能，但是如果不能Batch的UI元素叠在一块，就会增加Drawcall开销。",{"type":597,"tag":807,"props":36319,"children":36320},{},[36321],{"type":603,"value":36322},"要注意UI元素间的层叠关系，建议用“T”工具查看其矩形大小，因为有些图片透明，但是却叠在其它UI上面了，然后又无法Batch的话，就会无故多许多Drawcall；",{"type":597,"tag":807,"props":36324,"children":36325},{},[36326],{"type":603,"value":36327},"UI中出现最多的就是Image与Text组件，当Text叠在Image上面（如Button)，然后Text上又叠了一个图片时，就会至少多2个Drawcall，可以考虑将字体直接印在下面的图片上；",{"type":597,"tag":807,"props":36329,"children":36330},{},[36331],{"type":603,"value":36332},"有些情况可以考虑人为增加层级从而减少Drawcall，比如一个Text的层级为0，另一个可Batch的Text叠在一个图片A上，层级为1，那此时2个Text因为层级不同会安排2个Drawcall，但如果在第一个Text下放一个透明的图片（与图片A可Batch），那两个Text的层级就一致了，Drawcall就可以减少一个。",{"type":597,"tag":3995,"props":36334,"children":36336},{"id":36335},"ui优化参考",[36337],{"type":603,"value":36338},"UI优化参考",{"type":597,"tag":1321,"props":36340,"children":36341},{},[36342,36352],{"type":597,"tag":807,"props":36343,"children":36344},{},[36345],{"type":597,"tag":886,"props":36346,"children":36349},{"href":36347,"rel":36348},"https://www.jianshu.com/p/061e67308e5f",[890],[36350],{"type":603,"value":36351},"Unity GUI(uGUI)使用心得与性能总结 - 简书 (jianshu.com)",{"type":597,"tag":807,"props":36353,"children":36354},{},[36355],{"type":597,"tag":886,"props":36356,"children":36359},{"href":36357,"rel":36358},"https://unity3d.com/how-to/unity-ui-optimization-tips?_ga=2.147783095.1436155110.1558584716-746267689.1557026511",[890],[36360],{"type":603,"value":36361},"Some of the best optimization tips for Unity UI - Unity (unity3d.com)",{"type":597,"tag":1023,"props":36363,"children":36365},{"id":36364},"内存",[36366],{"type":603,"value":36364},{"type":597,"tag":803,"props":36368,"children":36369},{},[36370,36375,36380,36385,36406,36419,36439,36444],{"type":597,"tag":807,"props":36371,"children":36372},{},[36373],{"type":603,"value":36374},"不要再update中重复实例化对象,使用了ecs同样注意,因为他也是执行在update中",{"type":597,"tag":807,"props":36376,"children":36377},{},[36378],{"type":603,"value":36379},"不要使用闭包和匿名方法,因为闭包和匿名方法都会都是引用类型(c#将生成一个匿名类)会在堆上进行分配",{"type":597,"tag":807,"props":36381,"children":36382},{},[36383],{"type":603,"value":36384},"避免装箱..虽然 Unity 的分配器实际会使用不同的内存池进行小型和大型分配，但 Unity 的垃圾回收器“不是”分代的，因此无法有效清除由装箱生成的小型、频繁的临时分配。",{"type":597,"tag":807,"props":36386,"children":36387},{},[36388,36390,36396,36398,36404],{"type":603,"value":36389},"不要用foreach, Unity 的 C# 编译器生成的 IL 会构造一个通用值类型的枚举器来遍历值集合,而且通过枚举器遍历集合的方法调用成本更高，通常比通过 ",{"type":597,"tag":629,"props":36391,"children":36393},{"className":36392},[],[36394],{"type":603,"value":36395},"for",{"type":603,"value":36397}," 或 ",{"type":597,"tag":629,"props":36399,"children":36401},{"className":36400},[],[36402],{"type":603,"value":36403},"while",{"type":603,"value":36405}," 循环进行的手动迭代慢得多。",{"type":597,"tag":807,"props":36407,"children":36408},{},[36409,36411,36417],{"type":603,"value":36410},"unityapi.. mesh.vertices和 Input.touches,每次访问 ",{"type":597,"tag":629,"props":36412,"children":36414},{"className":36413},[],[36415],{"type":603,"value":36416},".touches",{"type":603,"value":36418}," 这些属性时都会发生分配。所以不要在循环和update中使用",{"type":597,"tag":807,"props":36420,"children":36421},{},[36422,36424,36430,36431,36437],{"type":603,"value":36423},"避免使用",{"type":597,"tag":629,"props":36425,"children":36427},{"className":36426},[],[36428],{"type":603,"value":36429},"GetComponentsInChildren()",{"type":603,"value":9688},{"type":597,"tag":629,"props":36432,"children":36434},{"className":36433},[],[36435],{"type":603,"value":36436},"GetComponentsInParent()",{"type":603,"value":36438},",而是使用GetComponentsInChildren(bool includeInactive, List result);前者会分配托管内存,后者可以传入一个你保存的数组避免重新分配",{"type":597,"tag":807,"props":36440,"children":36441},{},[36442],{"type":603,"value":36443},"不要使用linq因为会分配大量的托管内存",{"type":597,"tag":807,"props":36445,"children":36446},{},[36447,36449,36455],{"type":603,"value":36448},"不要使用Texture2D.GetPixels() ,使用",{"type":597,"tag":629,"props":36450,"children":36452},{"className":36451},[],[36453],{"type":603,"value":36454},"Texture2D.GetRawTextureData()",{"type":603,"value":36456},"代替此方法返回像素数据的NativeArray,前者会有大量的托管内存",{"type":597,"tag":606,"props":36458,"children":36459},{},[36460],{"type":603,"value":36461},"参考 :",{"type":597,"tag":1321,"props":36463,"children":36464},{},[36465,36475,36485,36495],{"type":597,"tag":807,"props":36466,"children":36467},{},[36468],{"type":597,"tag":886,"props":36469,"children":36472},{"href":36470,"rel":36471},"https://docs.unity3d.com/cn/2020.2/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html",[890],[36473],{"type":603,"value":36474},"了解托管堆 - Unity 手册 (unity3d.com)",{"type":597,"tag":807,"props":36476,"children":36477},{},[36478],{"type":597,"tag":886,"props":36479,"children":36482},{"href":36480,"rel":36481},"https://docs.unity3d.com/cn/2020.2/Manual/UnderstandingAutomaticMemoryManagement.html",[890],[36483],{"type":603,"value":36484},"了解自动内存管理 - Unity 手册 (unity3d.com)",{"type":597,"tag":807,"props":36486,"children":36487},{},[36488],{"type":597,"tag":886,"props":36489,"children":36492},{"href":36490,"rel":36491},"https://docs.unity3d.com/cn/2020.2/Manual/BestPracticeUnderstandingPerformanceInUnity7.html",[890],[36493],{"type":603,"value":36494},"一般优化 - Unity 手册 (unity3d.com)",{"type":597,"tag":807,"props":36496,"children":36497},{},[36498],{"type":597,"tag":886,"props":36499,"children":36501},{"href":35606,"rel":36500},[890],[36502],{"type":603,"value":35610},{"type":597,"tag":598,"props":36504,"children":36506},{"id":36505},"资源",[36507],{"type":603,"value":36505},{"type":597,"tag":1023,"props":36509,"children":36511},{"id":36510},"animation",[36512],{"type":603,"value":36513},"Animation",{"type":597,"tag":803,"props":36515,"children":36516},{},[36517,36527],{"type":597,"tag":807,"props":36518,"children":36519},{},[36520,36522,36525],{"type":603,"value":36521},"动画曲线精度过高会增加动画占用内存; 此规则仅面向以文本格式序列化的*.anim文件中的浮点精度Custom Parameters: precision : 5",{"type":597,"tag":1595,"props":36523,"children":36524},{},[],{"type":603,"value":36526},"用文本编辑器打开.anim动画文件，修改m_EditorCurves::curve::m_Curve下的float值的精度。建议用脚本直接将此文件中所有float精度都调小。",{"type":597,"tag":807,"props":36528,"children":36529},{},[36530],{"type":603,"value":36531},"场景中Animator组件的cullingMode是AlwaysAnimate会增加CPU使用率。",{"type":597,"tag":1023,"props":36533,"children":36535},{"id":36534},"audio",[36536],{"type":603,"value":36537},"Audio",{"type":597,"tag":1321,"props":36539,"children":36540},{},[36541,36546,36551,36556,36561,36566,36571,36576],{"type":597,"tag":807,"props":36542,"children":36543},{},[36544],{"type":603,"value":36545},"如果不需要立体声,将音频文件设置为 Force To Mono,这样能省下一半的磁盘和内存",{"type":597,"tag":807,"props":36547,"children":36548},{},[36549],{"type":603,"value":36550},"降低文件比特率",{"type":597,"tag":807,"props":36552,"children":36553},{},[36554],{"type":603,"value":36555},"ios下使用adpcm和mp3格式",{"type":597,"tag":807,"props":36557,"children":36558},{},[36559],{"type":603,"value":36560},"安卓下使用vorbis格式",{"type":597,"tag":807,"props":36562,"children":36563},{},[36564],{"type":603,"value":36565},"如果小型文件\u003C200kb,load type设置成Decompress on Load,",{"type":597,"tag":807,"props":36567,"children":36568},{},[36569],{"type":603,"value":36570},"如果中型文件>=200kb,load type 设置成Compressed in Memory",{"type":597,"tag":807,"props":36572,"children":36573},{},[36574],{"type":603,"value":36575},"大型文件,如背景音乐,load type设置成streaming",{"type":597,"tag":807,"props":36577,"children":36578},{},[36579],{"type":603,"value":36580},"如果时静音模式则销毁audiosourceComponent组件,如果设置成0的话,其实还是会造成不必要的内存与cpu占用",{"type":597,"tag":1023,"props":36582,"children":36584},{"id":36583},"editorsetting",[36585],{"type":603,"value":36586},"EditorSetting",{"type":597,"tag":803,"props":36588,"children":36589},{},[36590,36595,36600,36605,36610,36615,36620],{"type":597,"tag":807,"props":36591,"children":36592},{},[36593],{"type":603,"value":36594},"禁用 Accelerometer Frequency 陀螺仪",{"type":597,"tag":807,"props":36596,"children":36597},{},[36598],{"type":603,"value":36599},"尝试开启graphicJobs并测试 检查Editor -> Project Settings -> PlayerSettings -> Graphic Jobs(Experimental)*的设置",{"type":597,"tag":807,"props":36601,"children":36602},{},[36603],{"type":603,"value":36604},"如果在项目中启用了physics, 可以考虑开启Prebake Collision Meshes选项 检查Editor -> Project Settings -> PlayerSettings -> PreBake Collision Meshes的设置,这项设置可以减少加载/初始化的时间, 虽然会增加一些构建时间和包体积",{"type":597,"tag":807,"props":36606,"children":36607},{},[36608],{"type":603,"value":36609},"在Physics设置中LayerCollisionMatrix中的格子不应该都勾选上,这会增加CPU的负担, 应该取消勾选那些没有必要的格子 检查Editor -> Project Settings -> Physics -> Layer Collision Matrix的设置",{"type":597,"tag":807,"props":36611,"children":36612},{},[36613],{"type":603,"value":36614},"在Physics2D设置中LayerCollisionMatrix中的格子不应该都勾选上 同上",{"type":597,"tag":807,"props":36616,"children":36617},{},[36618],{"type":603,"value":36619},"检查Graphics中StandardShaderQuality设置,这会增加编译时间和包体积, 除非你想要支持很多性能跨度很大的设备,检查Editor -> Project Settings -> Graphics -> Tiers -> Standard Shader Quality的设置,StandardShaderQuality选项在所有Graphics Tier中应相同",{"type":597,"tag":807,"props":36621,"children":36622},{},[36623],{"type":603,"value":36624},"检查Android的ManagedStrippingLevel设置 检查Editor -> Project Settings -> PlayerSettings -> Managed Stripping Level的设置,Android设置中的ManagedStrippingLevel选项应为Medium或者High",{"type":597,"tag":1023,"props":36626,"children":36628},{"id":36627},"mesh",[36629],{"type":603,"value":26293},{"type":597,"tag":1321,"props":36631,"children":36632},{},[36633,36638,36643,36648,36653],{"type":597,"tag":807,"props":36634,"children":36635},{},[36636],{"type":603,"value":36637},"开启mesh compression,来减少磁盘容量",{"type":597,"tag":807,"props":36639,"children":36640},{},[36641],{"type":603,"value":36642},"尽量关闭read/write enabled 选项,如果开启unity会存储两份mesh",{"type":597,"tag":807,"props":36644,"children":36645},{},[36646],{"type":603,"value":36647},"如果没有使用动画,关闭Rigs,如石头或者房子",{"type":597,"tag":807,"props":36649,"children":36650},{},[36651],{"type":603,"value":36652},"如果没有用到Blendshapes,ye关闭",{"type":597,"tag":807,"props":36654,"children":36655},{},[36656],{"type":603,"value":36657},"Normals and Tangents..法向量和切线信息,如果材质没用到.也关闭",{"type":597,"tag":1023,"props":36659,"children":36661},{"id":36660},"prefab",[36662],{"type":603,"value":22682},{"type":597,"tag":1023,"props":36664,"children":36666},{"id":36665},"scene",[36667],{"type":603,"value":36668},"Scene",{"type":597,"tag":1023,"props":36670,"children":36672},{"id":36671},"texture",[36673],{"type":603,"value":36674},"Texture",{"type":597,"tag":606,"props":36676,"children":36677},{},[36678],{"type":603,"value":36679},"导入大小需要设置maxsize和compression,否则将导致文件过大.打包的时候会占体积",{"type":597,"tag":1321,"props":36681,"children":36682},{},[36683,36688,36693,36698,36703,36708],{"type":597,"tag":807,"props":36684,"children":36685},{},[36686],{"type":603,"value":36687},"max size 尽可能的设置到最小",{"type":597,"tag":807,"props":36689,"children":36690},{},[36691],{"type":603,"value":36692},"pot(大小为2的幂次方) or atlas",{"type":597,"tag":807,"props":36694,"children":36695},{},[36696],{"type":603,"value":36697},"移除背景纹理和其他不透明纹理的alpha通道",{"type":597,"tag":807,"props":36699,"children":36700},{},[36701],{"type":603,"value":36702},"关闭read/write,以减少内存使用",{"type":597,"tag":807,"props":36704,"children":36705},{},[36706],{"type":603,"value":36707},"如果16bit color足够用了就不要使用 32bit",{"type":597,"tag":807,"props":36709,"children":36710},{},[36711],{"type":603,"value":36712},"如果不需要使用mipmaps 则禁用,例如 ui和sprites,或者相对于z值不会又任何变化的元素",{"type":597,"tag":1023,"props":36714,"children":36716},{"id":36715},"resources文件夹",[36717],{"type":603,"value":36718},"Resources文件夹",{"type":597,"tag":606,"props":36720,"children":36721},{},[36722],{"type":603,"value":36723},"尽量不要使用resources文件夹.它会打包到包体中.且在启动时会全部加载..",{"type":597,"tag":598,"props":36725,"children":36727},{"id":36726},"assetbundle",[36728],{"type":603,"value":36729},"AssetBundle",{"type":597,"tag":606,"props":36731,"children":36732},{},[36733],{"type":603,"value":36734},"资源包冗余检测",{"type":597,"tag":857,"props":36736,"children":36738},{"id":36737},"工具检测",[36739],{"type":603,"value":36737},{"type":597,"tag":598,"props":36741,"children":36743},{"id":36742},"drawcall",[36744],{"type":603,"value":36745},"DrawCall",{"type":597,"tag":606,"props":36747,"children":36748},{},[36749],{"type":597,"tag":1080,"props":36750,"children":36751},{},[36752],{"type":603,"value":36753},"一、什么是DrawCall？",{"type":597,"tag":606,"props":36755,"children":36756},{},[36757],{"type":603,"value":36758},"​    在unity中，每次CPU准备数据并通知GPU的过程就称之为一个DrawCall。",{"type":597,"tag":606,"props":36760,"children":36761},{},[36762],{"type":603,"value":36763},"​    具体过程就是：设置颜色-->绘图方式-->顶点坐标-->绘制-->结束，所以在绘制过程中，如果能在一次DrawCall完成所有绘制就会大大提高运行效率，进而达到优化的目的。",{"type":597,"tag":606,"props":36765,"children":36766},{},[36767],{"type":597,"tag":1080,"props":36768,"children":36769},{},[36770],{"type":603,"value":36771},"二、DrawCall为什么会影响游戏运行效率？",{"type":597,"tag":606,"props":36773,"children":36774},{},[36775],{"type":603,"value":36776},"说道为什么会影响效率，就首先要了解一下他的工作原理：为了CPU和GPU可以进行并行工作，就需要一个命令缓冲区，就是由CPU向其中添加命令，然后又GPU从中读取命令，这样就实现了通过CPU准备数据，通知GPU进行渲染。",{"type":597,"tag":606,"props":36778,"children":36779},{},[36780],{"type":603,"value":36781},"在每次调用DrawCall之前，CPU需要向GPU发送很多内容，主要是包括数据，渲染状态（就是设置对象需要的材质纹理等），命令等。CPU进行的操作具体就是：",{"type":597,"tag":1321,"props":36783,"children":36784},{},[36785,36790,36795],{"type":597,"tag":807,"props":36786,"children":36787},{},[36788],{"type":603,"value":36789},"准备渲染对象，然后将渲染对象从硬盘加载到内存，然后从内存加载到显存，进而方便GPU高速处理",{"type":597,"tag":807,"props":36791,"children":36792},{},[36793],{"type":603,"value":36794},"设置每个对象的渲染状态，也就是设置对象的材质、纹理、着色器等",{"type":597,"tag":807,"props":36796,"children":36797},{},[36798],{"type":603,"value":36799},"输出渲染图元，然后向GPU发送DrawCall命令，并将渲染图元传递给GPU",{"type":597,"tag":606,"props":36801,"children":36802},{},[36803],{"type":603,"value":36804},"所以如果DrawCall数量过多就会导致CPU进行大量计算，进而导致CPU的过载，影响游戏运行效率。",{"type":597,"tag":606,"props":36806,"children":36807},{},[36808],{"type":597,"tag":1080,"props":36809,"children":36810},{},[36811],{"type":603,"value":36812},"三、批处理",{"type":597,"tag":803,"props":36814,"children":36815},{},[36816,36821,36826,36831],{"type":597,"tag":807,"props":36817,"children":36818},{},[36819],{"type":603,"value":36820},"批处理的目的就是为了减少DrawCall。DrawCall即CPU命令GPU去绘制。",{"type":597,"tag":807,"props":36822,"children":36823},{},[36824],{"type":603,"value":36825},"如果我们需要渲染一千个三角形，那么把它们按一千个单独的网格进行渲染所花费的时间要远大于直接渲染一个包含了一千个三角形的网格。",{"type":597,"tag":807,"props":36827,"children":36828},{},[36829],{"type":603,"value":36830},"要想使用批处理，需要物体有相同的材质。这是因为，对于使用同一个材质的物体，它们的不同仅仅在于顶点数据的差别，我们可以把这些顶点数据合并在一起，再一起发送给GPU，就可以完成一次批处理。",{"type":597,"tag":807,"props":36832,"children":36833},{},[36834],{"type":603,"value":36835},"在unity中，有两种批处理：一是动态批处理，二是静态批处理。",{"type":597,"tag":606,"props":36837,"children":36838},{},[36839],{"type":603,"value":36840},"对于动态批处理，unity会自动完成，不需要我们进行操作，而且物体是可以移动的，但是动态批处理有许多限制条件。\n对于静态批处理，物体不可移动，但是限制条件很少。",{"type":597,"tag":606,"props":36842,"children":36843},{},[36844],{"type":597,"tag":1080,"props":36845,"children":36846},{},[36847],{"type":603,"value":36848},"四、动态批处理",{"type":597,"tag":606,"props":36850,"children":36851},{},[36852],{"type":603,"value":36853},"原理：每一帧把可以进行批处理的模型网格进行合并，再把合并后模型数据传递给GPU，然后使用同一个材质对其渲染。",{"type":597,"tag":606,"props":36855,"children":36856},{},[36857],{"type":603,"value":36858},"限制：",{"type":597,"tag":803,"props":36860,"children":36861},{},[36862,36867,36872,36877],{"type":597,"tag":807,"props":36863,"children":36864},{},[36865],{"type":603,"value":36866},"顶点属性要小于900。例如，如果shader中需要使用顶点位置、法线和纹理坐标这三个顶点属性，那么要想让模型能够被动态批处理，它的顶点数目不能超过300。因此，优化策略就是shader的优化，少使用顶点属性，或者模型顶点数要尽可能少。",{"type":597,"tag":807,"props":36868,"children":36869},{},[36870],{"type":603,"value":36871},"多Pass的shader会中断批处理。",{"type":597,"tag":807,"props":36873,"children":36874},{},[36875],{"type":603,"value":36876},"在unity5中，动态批处理对于模型缩放的限制已经不存在了。",{"type":597,"tag":807,"props":36878,"children":36879},{},[36880],{"type":603,"value":36881},"使用光照纹理的物体需要小心处理。为了让这些物体可以被动态批处理，需要保证它们指向光照纹理中的同一位置。",{"type":597,"tag":606,"props":36883,"children":36884},{},[36885],{"type":597,"tag":1080,"props":36886,"children":36887},{},[36888],{"type":603,"value":36889},"五、静态批处理",{"type":597,"tag":606,"props":36891,"children":36892},{},[36893],{"type":603,"value":36894},"原理：只在运行开始阶段，把需要进行静态批处理的模型合并到一个新的网格中，这意味着这些模型数据不可以在运行时刻被移动。",{"type":597,"tag":606,"props":36896,"children":36897},{},[36898],{"type":603,"value":36899},"优点：因为它只需要进行一次合并操作，因此比动态批处理更加高效。",{"type":597,"tag":606,"props":36901,"children":36902},{},[36903],{"type":603,"value":36904},"缺点：需要占用更多的内存来存储合并后的几何结构。",{"type":597,"tag":606,"props":36906,"children":36907},{},[36908],{"type":603,"value":36909},"操作：将Inspector面板右上角的Static勾选(实际上只需要勾选Batching Static即可)",{"type":597,"tag":606,"props":36911,"children":36912},{},[36913],{"type":603,"value":36914},"参考链接:",{"type":597,"tag":1321,"props":36916,"children":36917},{},[36918],{"type":597,"tag":807,"props":36919,"children":36920},{},[36921],{"type":597,"tag":886,"props":36922,"children":36925},{"href":36923,"rel":36924},"https://connect.unity.com/p/dong-tai-he-pi-yuan-li-ji-ru-he-cheng-gong-he-pi?app=true",[890],[36926],{"type":603,"value":36927},"动态合批原理及如何成功合批 - Unity Connect",{"type":597,"tag":598,"props":36929,"children":36931},{"id":36930},"渲染统计窗口",[36932],{"type":603,"value":36930},{"type":597,"tag":606,"props":36934,"children":36935},{},[36936],{"type":597,"tag":719,"props":36937,"children":36939},{"alt":719,"src":36938},"/images/2020-09-10-optimizing-for-performance/20160721173928287",[],{"type":597,"tag":606,"props":36941,"children":36942},{},[36943],{"type":603,"value":36944},"Batches：相当于DrawCall",{"type":597,"tag":606,"props":36946,"children":36947},{},[36948],{"type":603,"value":36949},"Saved by batching：通过批处理节省的DrawCall",{"type":597,"tag":606,"props":36951,"children":36952},{},[36953],{"type":603,"value":36954},"SetPass calls：跟Shader中Pass的数量有关，Pass越多这个越大...它大致代表的是摄像机照射范围内，所有GameObject所包含的Material种类数量。（不完全准确，但是这样说易于理解）。假如有30种material，那这个SetpassCall的数值也会离这个30比较接近。这个值越大，肯定会使draw call 越来越大。",{"type":597,"tag":606,"props":36956,"children":36957},{},[36958],{"type":603,"value":36959},"影响DrawCall的因素：",{"type":597,"tag":803,"props":36961,"children":36962},{},[36963,36968],{"type":597,"tag":807,"props":36964,"children":36965},{},[36966],{"type":603,"value":36967},"Pass越多DrawCall越大。可以通过FrameDebugger来查看DrawCall，当然也可以用Profiler，但后者不能查看DrawCall的具体情况。",{"type":597,"tag":807,"props":36969,"children":36970},{},[36971],{"type":603,"value":36972},"不同材质的物体，无法通过静态批处理减少DC。但是静态批处理可以通过合并网格来提高性能。",{"type":597,"tag":598,"props":36974,"children":36976},{"id":36975},"unity-profiler",[36977],{"type":597,"tag":1080,"props":36978,"children":36979},{},[36980],{"type":603,"value":36981},"Unity Profiler",{"type":597,"tag":606,"props":36983,"children":36984},{},[36985],{"type":597,"tag":719,"props":36986,"children":36988},{"alt":719,"src":36987},"/images/2020-09-10-optimizing-for-performance/20180715180958140",[],{"type":597,"tag":606,"props":36990,"children":36991},{},[36992,36994,36999,37001,37006],{"type":603,"value":36993},"在面板的下半部分显示了我们选中的profilers当前帧的详细内容，我们可以通过选择列标题，通过这一列的信息值来排序。\n在CPU usage profiler中的列表题分别为：\nTotal:当前任务的时间消耗占当前帧cpu消耗的时间比例。\nSelf:任务自身时间消耗占当前帧cpu消耗的时间比例。\nCalls:当前任务在当前帧内被调用的次数。\nGC Alloc:当前任务在当前帧内进行过内存回收和分配的次数。   ",{"type":597,"tag":1080,"props":36995,"children":36996},{},[36997],{"type":603,"value":36998},"注意每帧都具有20B以上内存分配的选项 。",{"type":603,"value":37000},"\nTime ms:当前任务在当前帧内的耗时总时间。   ",{"type":597,"tag":1080,"props":37002,"children":37003},{},[37004],{"type":603,"value":37005},"注意占用5ms以上的选项",{"type":603,"value":37007},"\nSelf ms:当前任务自身(不包含内部的子任务)时间消耗。",{"type":597,"tag":606,"props":37009,"children":37010},{},[37011],{"type":603,"value":37012},"在 Unity 的 CPU 性能分析器中，Overview 表有一个“GC Alloc”列。此列显示了在特定帧中的托管堆上分配的字节数(4)（__注意：__这与给定帧期间临时分配的字节数不同。性能分析器会显示特定帧中分配的字节数，不考虑在后续帧中是否重用了部分/全部已分配的内存）。启用“Deep Profiling”选项后，可以跟踪执行这些分配的方法。",{"type":597,"tag":606,"props":37014,"children":37015},{},[37016,37018,37025],{"type":603,"value":37017},"**Unity Profiler 不会跟踪在主线程之外发生的分配。**因此，“GC Alloc”列不能用于统计用户创建的线程中发生的托管分配。请将代码执行从单独线程切换到主线程以进行调试，或使用 ",{"type":597,"tag":886,"props":37019,"children":37022},{"href":37020,"rel":37021},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Profiling.Profiler.BeginThreadProfiling.html",[890],[37023],{"type":603,"value":37024},"BeginThreadProfiling",{"type":603,"value":37026}," API 在时间轴性能分析器 (Timeline Profiler) 中显示例程。",{"title":591,"searchDepth":787,"depth":787,"links":37028},[37029,37035,37045,37046,37047,37048],{"id":35654,"depth":787,"text":35654,"children":37030},[37031,37032,37033,37034],{"id":35701,"depth":1530,"text":35704},{"id":35867,"depth":1530,"text":35870},{"id":35903,"depth":1530,"text":35906},{"id":36364,"depth":1530,"text":36364},{"id":36505,"depth":787,"text":36505,"children":37036},[37037,37038,37039,37040,37041,37042,37043,37044],{"id":36510,"depth":1530,"text":36513},{"id":36534,"depth":1530,"text":36537},{"id":36583,"depth":1530,"text":36586},{"id":36627,"depth":1530,"text":26293},{"id":36660,"depth":1530,"text":22682},{"id":36665,"depth":1530,"text":36668},{"id":36671,"depth":1530,"text":36674},{"id":36715,"depth":1530,"text":36718},{"id":36726,"depth":787,"text":36729},{"id":36742,"depth":787,"text":36745},{"id":36930,"depth":787,"text":36930},{"id":36975,"depth":787,"text":36981},"content:unity:2020-09-10-optimizing-for-performance.md","unity/2020-09-10-optimizing-for-performance.md","2020-09-10",{"_path":472,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":471,"description":37053,"body":37054,"_type":791,"_id":37271,"_source":793,"_file":37272,"_extension":795,"date":37273},"在显示一帧画面时，显卡先从显示缓冲取数据刷新到显示器存储器上，然后，显示器从左上到右下，逐行显示到屏幕上。",{"type":594,"children":37055,"toc":37269},[37056,37061,37065,37070,37075,37080,37085,37090,37095,37100,37105,37110,37115,37120,37125,37127,37151,37156,37161,37166,37167,37191,37196,37201,37206,37211,37219,37224,37238,37243],{"type":597,"tag":857,"props":37057,"children":37059},{"id":37058},"垂直同步",[37060],{"type":603,"value":37058},{"type":597,"tag":606,"props":37062,"children":37063},{},[37064],{"type":603,"value":37053},{"type":597,"tag":606,"props":37066,"children":37067},{},[37068],{"type":603,"value":37069},"显示器每画完一行发出一个水平同步信号，画完所有行发出一个垂直同步信号。",{"type":597,"tag":606,"props":37071,"children":37072},{},[37073],{"type":603,"value":37074},"若显示器刷新率是75，那么发出一个垂直同步信号后会等待1/75秒，然后重新执行上述步骤。",{"type":597,"tag":606,"props":37076,"children":37077},{},[37078],{"type":603,"value":37079},"游戏中的开启垂直同步，意思是指显卡等待到一个垂直同步信号后才开始工作，向显示缓冲绘制数据。",{"type":597,"tag":606,"props":37081,"children":37082},{},[37083],{"type":603,"value":37084},"如果我们选择等待垂直同步信号（也就是我们平时所说的垂直同步打开），那么在游戏中或许强劲的显卡迅速的绘制完一屏的图像，但是没有垂直同步信号的到达，显卡无法绘制下一屏，只有等75单位的信号到达，才可以绘制。这样FPS自然要受到操作系统刷新率运行值的制约。",{"type":597,"tag":606,"props":37086,"children":37087},{},[37088],{"type":603,"value":37089},"而如果我们选择不等待垂直同步信号（也就是我们平时所说的关闭垂直同步），那么游戏中作完一屏画面，显卡和显示器无需等待垂直同步信号就可以开始下一屏图像的绘制，自然可以完全发挥显卡的实力。但是不要忘记，正是因为垂直同步的存在，才能使得游戏进程和显示器刷新率同步，使得画面更加平滑和稳定。取消了垂直同步信号，固然可以换来更快的速度，但是在图像的连续性上势必打折扣。这也正是很多朋友抱怨关闭垂直后发现画面不连续的理论原因。",{"type":597,"tag":606,"props":37091,"children":37092},{},[37093],{"type":603,"value":37094},"开启垂直同步时",{"type":597,"tag":606,"props":37096,"children":37097},{},[37098],{"type":603,"value":37099},"若游戏的实际显示帧速大于60，显卡就可以在显示器等待的1/60内完成绘制，显示一个无撕裂的画面。此时，游戏的帧速被限制为60。",{"type":597,"tag":606,"props":37101,"children":37102},{},[37103],{"type":603,"value":37104},"若游戏的实际显示帧速小于60，显卡无法在在显示器等待的1/60内完成绘制，假如游戏帧速50，那么显卡每2个显示器帧才向显示器刷新一次数据，此时，游戏帧速掉为30。",{"type":597,"tag":606,"props":37106,"children":37107},{},[37108],{"type":603,"value":37109},"关闭垂直同步时",{"type":597,"tag":606,"props":37111,"children":37112},{},[37113],{"type":603,"value":37114},"若游戏的实际显示帧速大于60，显卡刷新显示缓冲的速度比显示器快，出现跳帧以及撕裂。",{"type":597,"tag":606,"props":37116,"children":37117},{},[37118],{"type":603,"value":37119},"（1）画面撕裂",{"type":597,"tag":606,"props":37121,"children":37122},{},[37123],{"type":603,"value":37124},"假设游戏中有一面黑白相间的栅栏墙高速向左运动，显示器设定的刷新率是100Hz，游戏运行速度为200FPS，则显示器扫描第1帧图像至屏幕垂直方向中点时，显卡已经将第2帧图像送了过来，由于栅栏墙高速向左运动，第2帧图像已经左移了一段距离，最终显示的图像如图（图01）。",{"type":603,"value":37126},"\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":37128,"children":37129},{},[37130,37141],{"type":597,"tag":1941,"props":37131,"children":37132},{},[37133],{"type":597,"tag":1945,"props":37134,"children":37135},{},[37136],{"type":597,"tag":1949,"props":37137,"children":37138},{},[37139],{"type":603,"value":37140},"![获得完美游戏效果解析显卡垂直同步设置(/images/2020-09-05-unity-vSyncCount/1520729748.JPG)",{"type":597,"tag":1963,"props":37142,"children":37143},{},[37144],{"type":597,"tag":1945,"props":37145,"children":37146},{},[37147],{"type":597,"tag":1970,"props":37148,"children":37149},{},[37150],{"type":603,"value":21142},{"type":597,"tag":606,"props":37152,"children":37153},{},[37154],{"type":603,"value":37155},"CS 1.5、Quake等大多数PC游戏在关闭垂直同步后都会有这种现象产生。如果你的电脑上装有CS 1.5游戏，不妨自己证实一下：关闭垂直同步后进入游戏，按下键盘上的左箭头\"←\"让视角匀速转动，是不是看到了\"画面撕裂\"的现象？打开垂直同步后做相同的测试，画面是不是清爽了许多？",{"type":597,"tag":606,"props":37157,"children":37158},{},[37159],{"type":603,"value":37160},"（2）跳帧",{"type":597,"tag":606,"props":37162,"children":37163},{},[37164],{"type":603,"value":37165},"假如显示器设定的刷新率是80Hz，显卡以100FPS循环显示0-9数字，那么，在开始的0.1秒内，显卡显示了10个数字而显示器只刷新了8次，最终你看到的图像很可能是这样的：（表格如图02）\n可见，由于显示器刷新率跟不上游戏的FPS，只能舍弃一部分画面，这种现象表现在游戏里就是跳帧。鬼武者3等一些移植到PC上的游戏在关闭垂直同步时通常会出现这种问题。",{"type":603,"value":37126},{"type":597,"tag":1937,"props":37168,"children":37169},{},[37170,37181],{"type":597,"tag":1941,"props":37171,"children":37172},{},[37173],{"type":597,"tag":1945,"props":37174,"children":37175},{},[37176],{"type":597,"tag":1949,"props":37177,"children":37178},{},[37179],{"type":603,"value":37180},"![获得完美游戏效果解析显卡垂直同步设置(/images/2020-09-05-unity-vSyncCount/1536901270.JPG)",{"type":597,"tag":1963,"props":37182,"children":37183},{},[37184],{"type":597,"tag":1945,"props":37185,"children":37186},{},[37187],{"type":597,"tag":1970,"props":37188,"children":37189},{},[37190],{"type":603,"value":21174},{"type":597,"tag":606,"props":37192,"children":37193},{},[37194],{"type":603,"value":37195},"通过以上的了解，我们认识到，要想在游戏中获得更好的画质，垂直同步一定要开！正是由于垂直同步的存在，游戏才会有完整、稳速、不跳帧的画面。套用一句广告语来说：\"自从开了垂直同步后，画不破了，帧不跳了，头也不眩晕了。\"",{"type":597,"tag":857,"props":37197,"children":37199},{"id":37198},"省电发热优化",[37200],{"type":603,"value":37198},{"type":597,"tag":606,"props":37202,"children":37203},{},[37204],{"type":603,"value":37205},"如果你的游戏跑到60帧,手机很热..这个时候首先想到的是降低帧率,",{"type":597,"tag":606,"props":37207,"children":37208},{},[37209],{"type":603,"value":37210},"安卓上:",{"type":597,"tag":621,"props":37212,"children":37214},{"code":37213},"1. [QualitySettings](https://docs.unity3d.com/2020.2/Documentation/ScriptReference/QualitySettings.html).vSyncCount = 0 关闭垂直同步..手动设置帧率..    Application.targetFrameRate = 30;  注意这样可能出现跳帧\n2. [QualitySettings](https://docs.unity3d.com/2020.2/Documentation/ScriptReference/QualitySettings.html).vSyncCount = 1 这个时候 Application.targetFrameRate无效...每帧等待垂直同步\n3. [QualitySettings](https://docs.unity3d.com/2020.2/Documentation/ScriptReference/QualitySettings.html).vSyncCount = 2 这个时候 Application.targetFrameRate无效...每一秒内等待垂直同步??不好翻译..大概意思是如果平台的默认渲染速率是每秒60帧，而vSyncCount设置为2，则游戏将以每秒30帧为目标。\n",[37215],{"type":597,"tag":629,"props":37216,"children":37217},{"__ignoreMap":591},[37218],{"type":603,"value":37213},{"type":597,"tag":606,"props":37220,"children":37221},{},[37222],{"type":603,"value":37223},"iOS:",{"type":597,"tag":606,"props":37225,"children":37226},{},[37227,37229,37236],{"type":603,"value":37228},"iOS忽略",{"type":597,"tag":886,"props":37230,"children":37233},{"href":37231,"rel":37232},"https://docs.unity3d.com/2020.2/Documentation/ScriptReference/QualitySettings.html",[890],[37234],{"type":603,"value":37235},"QualitySettings",{"type":603,"value":37237},".vSyncCount,ios是根据vblank(垂直同步)显示帧(如果有的话)..他的意思就是如果ios的垂直同步是每秒60帧...在刷新垂直同步的时候,如果存在显卡的帧的时候则会显示帧..不存在.则不显示...所以 Application.targetFrameRate是起作用的",{"type":597,"tag":606,"props":37239,"children":37240},{},[37241],{"type":603,"value":37242},"以上仅参考文档推测...未进行验证....如有意外概不负责",{"type":597,"tag":1321,"props":37244,"children":37245},{},[37246,37256,37266],{"type":597,"tag":807,"props":37247,"children":37248},{},[37249],{"type":597,"tag":886,"props":37250,"children":37253},{"href":37251,"rel":37252},"https://docs.unity3d.com/2020.2/Documentation/ScriptReference/Application-targetFrameRate.html",[890],[37254],{"type":603,"value":37255},"Unity - Scripting API: Application.targetFrameRate (unity3d.com)",{"type":597,"tag":807,"props":37257,"children":37258},{},[37259],{"type":597,"tag":886,"props":37260,"children":37263},{"href":37261,"rel":37262},"https://docs.unity3d.com/2020.2/Documentation/ScriptReference/QualitySettings-vSyncCount.html",[890],[37264],{"type":603,"value":37265},"Unity - Scripting API: QualitySettings.vSyncCount (unity3d.com)",{"type":597,"tag":807,"props":37267,"children":37268},{},[],{"title":591,"searchDepth":787,"depth":787,"links":37270},[],"content:unity:2020-09-05-unity-vSyncCount.md","unity/2020-09-05-unity-vSyncCount.md","2020-09-05",{"_path":10,"_dir":11891,"_draft":590,"_partial":590,"_locale":591,"title":9,"description":37275,"body":37276,"_type":791,"_id":37396,"_source":793,"_file":37397,"_extension":795,"date":37398},"1、首先打开PS软件，然后在PS中打开需要处理的图片。",{"type":594,"children":37277,"toc":37393},[37278,37282,37289,37294,37301,37306,37313,37318,37325,37330,37337,37341,37346,37354,37359,37365,37370,37375],{"type":597,"tag":606,"props":37279,"children":37280},{},[37281],{"type":603,"value":37275},{"type":597,"tag":606,"props":37283,"children":37284},{},[37285],{"type":597,"tag":719,"props":37286,"children":37288},{"alt":591,"src":37287},"/images/2020-09-03-ps-ronghe-pics/55e736d12f2eb93848c1edf4db628535e5dd6f0c",[],{"type":597,"tag":606,"props":37290,"children":37291},{},[37292],{"type":603,"value":37293},"2、接下来将另一张图片拖入PS中，使其位于第一张图片上方，根据自己的的需要调整位置。",{"type":597,"tag":606,"props":37295,"children":37296},{},[37297],{"type":597,"tag":719,"props":37298,"children":37300},{"alt":591,"src":37299},"/images/2020-09-03-ps-ronghe-pics/8ad4b31c8701a18be32d8549902f07082938fef6",[],{"type":597,"tag":606,"props":37302,"children":37303},{},[37304],{"type":603,"value":37305},"3、接下来在页面右下方选择“添加矢量蒙版”小图标，点击小图标给第二张图片加上矢量蒙版。",{"type":597,"tag":606,"props":37307,"children":37308},{},[37309],{"type":597,"tag":719,"props":37310,"children":37312},{"alt":591,"src":37311},"/images/2020-09-03-ps-ronghe-pics/b58f8c5494eef01fde1c8ec3eefe9925bc317da8",[],{"type":597,"tag":606,"props":37314,"children":37315},{},[37316],{"type":603,"value":37317},"4、然后在左边工具栏中选择“渐变工具”，在上方工具栏中按下图红色箭头所指从设置。",{"type":597,"tag":606,"props":37319,"children":37320},{},[37321],{"type":597,"tag":719,"props":37322,"children":37324},{"alt":591,"src":37323},"/images/2020-09-03-ps-ronghe-pics/f2deb48f8c5494ee13da991f23f5e0fe99257e38",[],{"type":597,"tag":606,"props":37326,"children":37327},{},[37328],{"type":603,"value":37329},"5、最后在图片上按住鼠标从左向右拉到另一个位置松开，就可以将两张图边缘融合在一起了。",{"type":597,"tag":606,"props":37331,"children":37332},{},[37333],{"type":597,"tag":719,"props":37334,"children":37336},{"alt":591,"src":37335},"/images/2020-09-03-ps-ronghe-pics/342ac65c103853434bee16279d13b07eca808897",[],{"type":597,"tag":857,"props":37338,"children":37339},{"id":23745},[37340],{"type":603,"value":23745},{"type":597,"tag":606,"props":37342,"children":37343},{},[37344],{"type":603,"value":37345},"蒙版，其实就是ps运用黑、白和不同程度的灰色来控制画面显示的程度，就好像拿一块板子蒙着你的眼睛一样，黑色是完全不透光的木板，白色是一块玻璃板，灰色是一块半透明的玻璃板，黑色你完全看不到后面的情况，白色你会完全看到后面，而半透明玻璃你能看到后面，但是是不清晰的.",{"type":597,"tag":606,"props":37347,"children":37348},{},[37349],{"type":597,"tag":1080,"props":37350,"children":37351},{},[37352],{"type":603,"value":37353},"蒙版根据黑白灰,将图片处理成透明,半透明,和不透明.",{"type":597,"tag":606,"props":37355,"children":37356},{},[37357],{"type":603,"value":37358},"所以除了渐变工具.还可以用画笔工具.只要涂抹为黑白就可以.",{"type":597,"tag":1023,"props":37360,"children":37362},{"id":37361},"应用图层蒙版是不能执行的",[37363],{"type":603,"value":37364},"应用图层蒙版是不能执行的?",{"type":597,"tag":606,"props":37366,"children":37367},{},[37368],{"type":603,"value":37369},"因为你的图层是智能图层，你先要栅格化之后，才能执行你需要的操作~",{"type":597,"tag":857,"props":37371,"children":37373},{"id":37372},"去色",[37374],{"type":603,"value":37372},{"type":597,"tag":803,"props":37376,"children":37377},{},[37378,37383,37388],{"type":597,"tag":807,"props":37379,"children":37380},{},[37381],{"type":603,"value":37382},"使用色彩范围或者其他东西.先去除大部分的黑色",{"type":597,"tag":807,"props":37384,"children":37385},{},[37386],{"type":603,"value":37387},"然后周边肯定有一部分的灰色去除不掉的..然后再将这些颜色使用替换颜色..改成白色",{"type":597,"tag":807,"props":37389,"children":37390},{},[37391],{"type":603,"value":37392},"最后再用工具将图片平滑一下",{"title":591,"searchDepth":787,"depth":787,"links":37394},[37395],{"id":37361,"depth":1530,"text":37364},"content:art:2020-09-03-ps-ronghe-pics.md","art/2020-09-03-ps-ronghe-pics.md","2020-09-03",{"_path":321,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":320,"description":37400,"body":37401,"_type":791,"_id":37610,"_source":793,"_file":37611,"_extension":795,"date":37612},"如何发现的？查看C盘存储打开所有设置->系统->存储->选择C盘\n查看C盘使用情况，可以查看“其他”中情况\n发现.nuget文件夹占用的空间很大，这是由于VS的默认nuget包路径：C:\\Users{UserName}.nuget\\packages如何解决？NuGet 的行为由一个或多个 NuGet.Config (XML) 文件（可存在于项目范围、用户范围和计算机范围的级别）中的累积设置驱动。在解决方案文件夹中，设置应用于子文件夹中的所有项目。 请注意，如果配置文件位于项目文件夹中，则对该项目没有任何影响设置应用于所有操作，但可被任何项目级的设置替代。\nWindows：%appdata%\\N",{"type":594,"children":37402,"toc":37608},[37403,37409,37415,37442,37448,37453,37536,37541,37546,37551,37559,37572,37580,37585],{"type":597,"tag":857,"props":37404,"children":37406},{"id":37405},"如何发现的",[37407],{"type":603,"value":37408},"如何发现的？",{"type":597,"tag":3995,"props":37410,"children":37412},{"id":37411},"查看c盘存储",[37413],{"type":603,"value":37414},"查看C盘存储",{"type":597,"tag":803,"props":37416,"children":37417},{},[37418,37428,37437],{"type":597,"tag":807,"props":37419,"children":37420},{},[37421,37423],{"type":603,"value":37422},"打开所有设置->系统->存储->选择C盘\n",{"type":597,"tag":719,"props":37424,"children":37427},{"alt":37425,"src":37426},"image.png","/images/2020-08-30-nuget-is-big/7777310-8ce825574a3c0e8b.png",[],{"type":597,"tag":807,"props":37429,"children":37430},{},[37431,37433],{"type":603,"value":37432},"查看C盘使用情况，可以查看“其他”中情况\n",{"type":597,"tag":719,"props":37434,"children":37436},{"alt":37425,"src":37435},"/images/2020-08-30-nuget-is-big/7777310-b854451afc8d311b.png",[],{"type":597,"tag":807,"props":37438,"children":37439},{},[37440],{"type":603,"value":37441},"发现.nuget文件夹占用的空间很大，这是由于VS的默认nuget包路径：C:\\Users{UserName}.nuget\\packages",{"type":597,"tag":857,"props":37443,"children":37445},{"id":37444},"如何解决",[37446],{"type":603,"value":37447},"如何解决？",{"type":597,"tag":606,"props":37449,"children":37450},{},[37451],{"type":603,"value":37452},"NuGet 的行为由一个或多个 NuGet.Config (XML) 文件（可存在于项目范围、用户范围和计算机范围的级别）中的累积设置驱动。",{"type":597,"tag":803,"props":37454,"children":37455},{},[37456,37461,37487],{"type":597,"tag":807,"props":37457,"children":37458},{},[37459],{"type":603,"value":37460},"在解决方案文件夹中，设置应用于子文件夹中的所有项目。 请注意，如果配置文件位于项目文件夹中，则对该项目没有任何影响",{"type":597,"tag":807,"props":37462,"children":37463},{},[37464,37466,37472,37474,37480,37481],{"type":603,"value":37465},"设置应用于所有操作，但可被任何项目级的设置替代。\nWindows：",{"type":597,"tag":629,"props":37467,"children":37469},{"className":37468},[],[37470],{"type":603,"value":37471},"%appdata%\\NuGet\\NuGet.Config",{"type":603,"value":37473},"\nMac/Linux：",{"type":597,"tag":629,"props":37475,"children":37477},{"className":37476},[],[37478],{"type":603,"value":37479},"~/.config/NuGet/NuGet.Config",{"type":603,"value":36397},{"type":597,"tag":629,"props":37482,"children":37484},{"className":37483},[],[37485],{"type":603,"value":37486},"~/.nuget/NuGet/NuGet.Config",{"type":597,"tag":807,"props":37488,"children":37489},{},[37490,37492,37498,37499,37505,37507,37512,37514,37519,37521,37527,37528,37534],{"type":603,"value":37491},"设置虽然适用于计算机上的所有操作，但会被任何用户级或项目级设置覆盖。\nWindows：",{"type":597,"tag":629,"props":37493,"children":37495},{"className":37494},[],[37496],{"type":603,"value":37497},"%ProgramFiles(x86)%\\NuGet\\Config",{"type":603,"value":37473},{"type":597,"tag":629,"props":37500,"children":37502},{"className":37501},[],[37503],{"type":603,"value":37504},"$XDG_DATA_HOME",{"type":603,"value":37506},"。 Mac/Linux: ",{"type":597,"tag":629,"props":37508,"children":37510},{"className":37509},[],[37511],{"type":603,"value":37504},{"type":603,"value":37513},". 如果 ",{"type":597,"tag":629,"props":37515,"children":37517},{"className":37516},[],[37518],{"type":603,"value":37504},{"type":603,"value":37520}," 的值是 null 或为空，将使用 ",{"type":597,"tag":629,"props":37522,"children":37524},{"className":37523},[],[37525],{"type":603,"value":37526},"~/.local/share",{"type":603,"value":36397},{"type":597,"tag":629,"props":37529,"children":37531},{"className":37530},[],[37532],{"type":603,"value":37533},"/usr/local/share",{"type":603,"value":37535},"（因 OS 版本而异）",{"type":597,"tag":606,"props":37537,"children":37538},{},[37539],{"type":603,"value":37540},"发现占用空间资源比较大的时用户级别的nuget包..我们只要把这个文件夹移动到其他驱动器就可以.",{"type":597,"tag":606,"props":37542,"children":37543},{},[37544],{"type":603,"value":37545},"以下两种方法都行,建议第二种.因为nuget.exe还需要安装",{"type":597,"tag":606,"props":37547,"children":37548},{},[37549],{"type":603,"value":37550},"1.可以直接使用命令行",{"type":597,"tag":621,"props":37552,"children":37554},{"code":37553},"nuget config -set repositoryPath=D:\\Users\\zhepama\\.nuget\\packages\n",[37555],{"type":597,"tag":629,"props":37556,"children":37557},{"__ignoreMap":591},[37558],{"type":603,"value":37553},{"type":597,"tag":606,"props":37560,"children":37561},{},[37562,37564,37570],{"type":603,"value":37563},"2.直接修改配置文件",{"type":597,"tag":629,"props":37565,"children":37567},{"className":37566},[],[37568],{"type":603,"value":37569},"C:\\Users\\{user}\\AppData\\Roaming\\NuGet\\NuGet.Config",{"type":603,"value":37571},"添加globalPackagesFolder节点",{"type":597,"tag":621,"props":37573,"children":37575},{"code":37574},"\u003C?xml version=\"1.0\" encoding=\"utf-8\"?>\n\u003Cconfiguration>\n  \u003CpackageSources>\n      \u003Cadd key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n  \u003C/packageSources>\n  \u003Cconfig> \n      \u003Cadd key=\"globalPackagesFolder\" value=\"D:\\Users\\zhepama\\.nuget\\packages\" />\n  \u003C/config>\n\u003C/configuration>\n",[37576],{"type":597,"tag":629,"props":37577,"children":37578},{"__ignoreMap":591},[37579],{"type":603,"value":37574},{"type":597,"tag":857,"props":37581,"children":37583},{"id":37582},"参考连接",[37584],{"type":603,"value":37582},{"type":597,"tag":1321,"props":37586,"children":37587},{},[37588,37598],{"type":597,"tag":807,"props":37589,"children":37590},{},[37591],{"type":597,"tag":886,"props":37592,"children":37595},{"href":37593,"rel":37594},"https://docs.microsoft.com/zh-cn/nuget/consume-packages/configuring-nuget-behavior",[890],[37596],{"type":603,"value":37597},"常见的 NuGet 配置 | Microsoft Docs",{"type":597,"tag":807,"props":37599,"children":37600},{},[37601],{"type":597,"tag":886,"props":37602,"children":37605},{"href":37603,"rel":37604},"https://docs.microsoft.com/zh-cn/nuget/reference/nuget-config-file",[890],[37606],{"type":603,"value":37607},"nuget.config 文件引用 | Microsoft Docs",{"title":591,"searchDepth":787,"depth":787,"links":37609},[],"content:tool:2020-08-30-nuget-is-big.md","tool/2020-08-30-nuget-is-big.md","2020-08-30",{"_path":469,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":468,"description":37614,"body":37615,"_type":791,"_id":37711,"_source":793,"_file":37712,"_extension":795,"date":37612},"全部的\nshared模块+contract模块+Odin模块+Json模块+dothassunity模块\nshared模块+contract模块+Odin模块+Json模块\nshared模块+contract模块+Odin模块\nshared模块+contract模块\n只有shared模块空项目\n我们看到包含了form等模块c# - Can I remove System.Windows.Forms.dll referenced by protobuf-net - Stack Overflow (stackoverflow.com)不过不用担心,使用il2cpp都会被切割",{"type":594,"children":37616,"toc":37709},[37617,37627,37637,37647,37657,37667,37672,37680,37689,37694,37704],{"type":597,"tag":606,"props":37618,"children":37619},{},[37620,37622],{"type":603,"value":37621},"全部的\n",{"type":597,"tag":719,"props":37623,"children":37626},{"alt":37624,"src":37625},"Snipaste_2020-08-30_02-12-13","/images/2020-08-30-unity-dll-check/Snipaste_2020-08-30_02-12-13.png",[],{"type":597,"tag":606,"props":37628,"children":37629},{},[37630,37632],{"type":603,"value":37631},"shared模块+contract模块+Odin模块+Json模块+dothassunity模块\n",{"type":597,"tag":719,"props":37633,"children":37636},{"alt":37634,"src":37635},"Snipaste_2020-08-30_02-16-34--noentity-no-p","/images/2020-08-30-unity-dll-check/Snipaste_2020-08-30_02-16-34--noentity-no-p.png",[],{"type":597,"tag":606,"props":37638,"children":37639},{},[37640,37642],{"type":603,"value":37641},"shared模块+contract模块+Odin模块+Json模块\n",{"type":597,"tag":719,"props":37643,"children":37646},{"alt":37644,"src":37645},"Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity","/images/2020-08-30-unity-dll-check/Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity.png",[],{"type":597,"tag":606,"props":37648,"children":37649},{},[37650,37652],{"type":603,"value":37651},"shared模块+contract模块+Odin模块\n",{"type":597,"tag":719,"props":37653,"children":37656},{"alt":37654,"src":37655},"Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity-no-json","/images/2020-08-30-unity-dll-check/Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity-no-json.png",[],{"type":597,"tag":606,"props":37658,"children":37659},{},[37660,37662],{"type":603,"value":37661},"shared模块+contract模块\n",{"type":597,"tag":719,"props":37663,"children":37666},{"alt":37664,"src":37665},"Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity-no-json-no-odin","/images/2020-08-30-unity-dll-check/Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity-no-json-no-odin.png",[],{"type":597,"tag":606,"props":37668,"children":37669},{},[37670],{"type":603,"value":37671},"只有shared模块",{"type":597,"tag":606,"props":37673,"children":37674},{},[37675],{"type":597,"tag":719,"props":37676,"children":37679},{"alt":37677,"src":37678},"Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity-no-json-no-odin-no-contract","/images/2020-08-30-unity-dll-check/Snipaste_2020-08-30_02-16-34--noentity-no-p-no-dothassunity-no-json-no-odin-no-contract.png",[],{"type":597,"tag":606,"props":37681,"children":37682},{},[37683,37685],{"type":603,"value":37684},"空项目\n",{"type":597,"tag":719,"props":37686,"children":37688},{"alt":9215,"src":37687},"/images/2020-08-30-unity-dll-check/none.png",[],{"type":597,"tag":606,"props":37690,"children":37691},{},[37692],{"type":603,"value":37693},"我们看到包含了form等模块",{"type":597,"tag":606,"props":37695,"children":37696},{},[37697],{"type":597,"tag":886,"props":37698,"children":37701},{"href":37699,"rel":37700},"https://stackoverflow.com/questions/39161798/can-i-remove-system-windows-forms-dll-referenced-by-protobuf-net",[890],[37702],{"type":603,"value":37703},"c# - Can I remove System.Windows.Forms.dll referenced by protobuf-net - Stack Overflow (stackoverflow.com)",{"type":597,"tag":606,"props":37705,"children":37706},{},[37707],{"type":603,"value":37708},"不过不用担心,使用il2cpp都会被切割",{"title":591,"searchDepth":787,"depth":787,"links":37710},[],"content:unity:2020-08-30-unity-dll-check.md","unity/2020-08-30-unity-dll-check.md",{"_path":466,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":465,"description":37714,"body":37715,"_type":791,"_id":37935,"_source":793,"_file":37936,"_extension":795,"date":37937},"Screen.safeArea会返回移动平台安全区的Rect。例如，iPhoneX（2436x1125px）横屏时，Screen.safeArea返回的值为Rect（132，63，2172，1062）。如图：",{"type":594,"children":37716,"toc":37931},[37717,37721,37728,37733,37738,37745,37750,37755,37762,37767,37772,37779,37786,37791,37801,37807,37812,37883,37887,37895,37900,37908,37913,37918,37926],{"type":597,"tag":606,"props":37718,"children":37719},{},[37720],{"type":603,"value":37714},{"type":597,"tag":606,"props":37722,"children":37723},{},[37724],{"type":597,"tag":719,"props":37725,"children":37727},{"alt":719,"src":37726},"/images/2020-08-29-Notch-Solution/v2-2381f8819f70e7cd357662188e2616b6_720w.jpg",[],{"type":597,"tag":606,"props":37729,"children":37730},{},[37731],{"type":603,"value":37732},"适配思路：以界面为单位，打开界面时，获取当前设备的safeArea，调整界面的锚点，进行适配。以下利用SafeArea.cs脚本，对当前window进行适配。主要考虑三种情况：",{"type":597,"tag":606,"props":37734,"children":37735},{},[37736],{"type":603,"value":37737},"情况1：UI中没有全屏背景",{"type":597,"tag":606,"props":37739,"children":37740},{},[37741],{"type":597,"tag":719,"props":37742,"children":37744},{"alt":719,"src":37743},"/images/2020-08-29-Notch-Solution/v2-b472160ce00e02f830c3e09dd2bc5747_720w.jpg",[],{"type":597,"tag":606,"props":37746,"children":37747},{},[37748],{"type":603,"value":37749},"解决思路：直接调整当前window的锚点，进行适配。",{"type":597,"tag":606,"props":37751,"children":37752},{},[37753],{"type":603,"value":37754},"情况2：UI中有全屏背景",{"type":597,"tag":606,"props":37756,"children":37757},{},[37758],{"type":597,"tag":719,"props":37759,"children":37761},{"alt":719,"src":37760},"/images/2020-08-29-Notch-Solution/v2-baffbbebb247c6466fcf5f0b9ddd1a95_720w.jpg",[],{"type":597,"tag":606,"props":37763,"children":37764},{},[37765],{"type":603,"value":37766},"解决思路：把背景分离到window之外，只对当前window进行适配，对背景不做处理。为了方便适配，我们可以把背景单独做成window，在UI框架中对window和背景进行分开管理。上图中，蓝色为背景图片，红色为适配的window。",{"type":597,"tag":606,"props":37768,"children":37769},{},[37770],{"type":603,"value":37771},"情况3：适配需要靠边的UI(例如侧边的聊天弹窗等)",{"type":597,"tag":606,"props":37773,"children":37774},{},[37775],{"type":597,"tag":719,"props":37776,"children":37778},{"alt":719,"src":37777},"/images/2020-08-29-Notch-Solution/v2-bb8467626340c8dac46c81adf176b1c3_720w.jpg",[],{"type":597,"tag":606,"props":37780,"children":37781},{},[37782],{"type":597,"tag":719,"props":37783,"children":37785},{"alt":719,"src":37784},"/images/2020-08-29-Notch-Solution/v2-615a71b2dfd94b07e4bed4d0fbcea2db_720w.jpg",[],{"type":597,"tag":606,"props":37787,"children":37788},{},[37789],{"type":603,"value":37790},"解决思路：把需要靠边的按钮拉伸到屏幕之外，达到适配效果。",{"type":597,"tag":606,"props":37792,"children":37793},{},[37794],{"type":597,"tag":886,"props":37795,"children":37798},{"href":37796,"rel":37797},"https://github.com/jirowang0409/Garena",[890],[37799],{"type":603,"value":37800},"jirowang0409/Garena: Projects in Garena (github.com)",{"type":597,"tag":857,"props":37802,"children":37804},{"id":37803},"notch-solution",[37805],{"type":603,"value":37806},"notch solution",{"type":597,"tag":606,"props":37808,"children":37809},{},[37810],{"type":603,"value":37811},"首先分为两个component.",{"type":597,"tag":1321,"props":37813,"children":37814},{},[37815,37834],{"type":597,"tag":807,"props":37816,"children":37817},{},[37818,37825,37827,37832],{"type":597,"tag":886,"props":37819,"children":37822},{"href":37820,"rel":37821},"https://exceed7.com/notch-solution/components/ui-behaviour/safe-padding.html",[890],[37823],{"type":603,"value":37824},"SafePadding",{"type":603,"value":37826},"Works with ",{"type":597,"tag":629,"props":37828,"children":37830},{"className":37829},[],[37831],{"type":603,"value":27144},{"type":603,"value":37833}," tree of the uGUI component system.",{"type":597,"tag":807,"props":37835,"children":37836},{},[37837,37844,37846,37853,37855,37860,37862,37868,37869,37875,37877,37882],{"type":597,"tag":886,"props":37838,"children":37841},{"href":37839,"rel":37840},"https://exceed7.com/notch-solution/components/adaptation/safe-adaptation.html",[890],[37842],{"type":603,"value":37843},"SafeAdaptation",{"type":603,"value":37845},"They are based on using ",{"type":597,"tag":886,"props":37847,"children":37850},{"href":37848,"rel":37849},"https://docs.unity3d.com/ScriptReference/Playables.Playable.html",[890],[37851],{"type":603,"value":37852},"Playables API",{"type":603,"value":37854}," to control ",{"type":597,"tag":629,"props":37856,"children":37858},{"className":37857},[],[37859],{"type":603,"value":22708},{"type":603,"value":37861}," with animation playables, therefore utilizing ",{"type":597,"tag":629,"props":37863,"children":37865},{"className":37864},[],[37866],{"type":603,"value":37867},"Animator",{"type":603,"value":16983},{"type":597,"tag":629,"props":37870,"children":37872},{"className":37871},[],[37873],{"type":603,"value":37874},"AnimationClip",{"type":603,"value":37876}," instead of ",{"type":597,"tag":629,"props":37878,"children":37880},{"className":37879},[],[37881],{"type":603,"value":27144},{"type":603,"value":9674},{"type":597,"tag":598,"props":37884,"children":37885},{"id":23745},[37886],{"type":603,"value":23745},{"type":597,"tag":621,"props":37888,"children":37890},{"code":37889},"        protected Rect SafeAreaRelative\n            => NotchSolutionUtility.ShouldUseNotchSimulatorValue ? storedSimulatedSafeAreaRelative : NotchSolutionUtility.ScreenSafeAreaRelative;\n",[37891],{"type":597,"tag":629,"props":37892,"children":37893},{"__ignoreMap":591},[37894],{"type":603,"value":37889},{"type":597,"tag":606,"props":37896,"children":37897},{},[37898],{"type":603,"value":37899},"我们看这句,如果是使用了模拟器,则使用simulatedSafeAreaRelative",{"type":597,"tag":621,"props":37901,"children":37903},{"code":37902},"        void INotchSimulatorTarget.SimulatorUpdate(Rect simulatedSafeAreaRelative, Rect[] simulatedCutoutsRelative)\n        {\n            this.storedSimulatedSafeAreaRelative = simulatedSafeAreaRelative;\n            this.storedSimulatedCutoutsRelative = simulatedCutoutsRelative;\n            UpdateRectBase();\n        }\n",[37904],{"type":597,"tag":629,"props":37905,"children":37906},{"__ignoreMap":591},[37907],{"type":603,"value":37902},{"type":597,"tag":606,"props":37909,"children":37910},{},[37911],{"type":603,"value":37912},"在Editor代码中如果改变了模拟器的环境.则会更改该值",{"type":597,"tag":606,"props":37914,"children":37915},{},[37916],{"type":603,"value":37917},"而生产环境中则会使用NotchSolutionUtility.ScreenSafeAreaRelative,他也是通过Screen.safeArea进行判断的",{"type":597,"tag":621,"props":37919,"children":37921},{"code":37920},"        internal static Rect ScreenSafeAreaRelative\n        {\n            get\n            {\n                Rect absolutePaddings = Screen.safeArea;\n                cachedScreenSafeAreaRelative = ToScreenRelativeRect(absolutePaddings);\n                cachedScreenSafeArea = absolutePaddings;\n                safeAreaRelativeCached = true;\n                return cachedScreenSafeAreaRelative;\n            }\n        }\n",[37922],{"type":597,"tag":629,"props":37923,"children":37924},{"__ignoreMap":591},[37925],{"type":603,"value":37920},{"type":597,"tag":598,"props":37927,"children":37929},{"id":37928},"safepadding",[37930],{"type":603,"value":37928},{"title":591,"searchDepth":787,"depth":787,"links":37932},[37933,37934],{"id":23745,"depth":787,"text":23745},{"id":37928,"depth":787,"text":37928},"content:unity:2020-08-29-Notch-Solution.md","unity/2020-08-29-Notch-Solution.md","2020-08-29",{"_path":125,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":124,"description":37939,"body":37940,"_type":791,"_id":38162,"_source":793,"_file":38163,"_extension":795,"date":38164},"ASP.NET Core引入了Options模式，使用类来表示相关的设置组。简单的来说，就是用强类型的类来表达配置项，这带来了很多好处。\n初学者会发现这个框架有3个主要的面向消费者的接口：IOptions、IOptionsMonitor以及IOptionsSnapshot。\n这三个接口初看起来很类似，所以很容易引起困惑，什么场景下该用哪个接口呢？",{"type":594,"children":37941,"toc":38160},[37942,37946,37950,37954,37959,37967,37972,37980,37985,37990,38000,38005,38012,38017,38022,38030,38035,38043,38048,38053,38061,38066,38074,38079,38087,38092,38097,38102,38107,38130,38135,38147,38155],{"type":597,"tag":857,"props":37943,"children":37944},{"id":3091},[37945],{"type":603,"value":3091},{"type":597,"tag":606,"props":37947,"children":37948},{},[37949],{"type":603,"value":37939},{"type":597,"tag":857,"props":37951,"children":37952},{"id":24011},[37953],{"type":603,"value":24011},{"type":597,"tag":606,"props":37955,"children":37956},{},[37957],{"type":603,"value":37958},"我们先从一小段代码着手（TestOptions类只有一个字符串属性Name，代码略）：",{"type":597,"tag":621,"props":37960,"children":37962},{"code":37961},"class Program\n{\n    static void Main(string[] args)\n    {\n        var builder = new ConfigurationBuilder();\n        builder.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true); //注意最后一个参数值，true表示配置文件更改时会重新加载。\n        var configuration = builder.Build();\n        var services = new ServiceCollection();\n        services.AddOptions();\n        services.Configure\u003CTestOptions>(configuration); //这里通过配置文件绑定TestOptions\n        var provider = services.BuildServiceProvider();\n        Console.WriteLine(\"修改前：\");\n        Print(provider);\n\n        Change(provider); //使用代码修改Options值。\n        Console.WriteLine(\"使用代码修改后：\");\n        Print(provider);\n\n        Console.WriteLine(\"请修改配置文件。\");\n        Console.ReadLine(); //等待手动修改appsettings.json配置文件。\n        Console.WriteLine(\"修改appsettings.json文件后：\");\n        Print(provider);\n    }\n\n    static void Print(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            var options1 = sp.GetRequiredService\u003CIOptions\u003CTestOptions>>();\n            var options2 = sp.GetRequiredService\u003CIOptionsMonitor\u003CTestOptions>>();\n            var options3 = sp.GetRequiredService\u003CIOptionsSnapshot\u003CTestOptions>>();\n            Console.WriteLine(\"IOptions值: {0}\", options1.Value.Name);\n            Console.WriteLine(\"IOptionsMonitor值: {0}\", options2.CurrentValue.Name);\n            Console.WriteLine(\"IOptionsSnapshot值: {0}\", options3.Value.Name);\n            Console.WriteLine();\n        }\n    }\n\n    static void Change(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            sp.GetRequiredService\u003CIOptions\u003CTestOptions>>().Value.Name = \"IOptions Test 1\";\n            sp.GetRequiredService\u003CIOptionsMonitor\u003CTestOptions>>().CurrentValue.Name = \"IOptionsMonitor Test 1\";\n            sp.GetRequiredService\u003CIOptionsSnapshot\u003CTestOptions>>().Value.Name = \"IOptionsSnapshot Test 1\";\n        }\n    }\n}\n",[37963],{"type":597,"tag":629,"props":37964,"children":37965},{"__ignoreMap":591},[37966],{"type":603,"value":37961},{"type":597,"tag":606,"props":37968,"children":37969},{},[37970],{"type":603,"value":37971},"appsettings.json文件：",{"type":597,"tag":621,"props":37973,"children":37975},{"code":37974},"{\n    \"Name\": \"Test 0\"\n}\n",[37976],{"type":597,"tag":629,"props":37977,"children":37978},{"__ignoreMap":591},[37979],{"type":603,"value":37974},{"type":597,"tag":606,"props":37981,"children":37982},{},[37983],{"type":603,"value":37984},"上面的代码，首先从appsettings.json文件读取配置，然后向容器注册依赖配置文件的TestOptions，接着分别打印IOptions\u003C>,IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>的值。",{"type":597,"tag":606,"props":37986,"children":37987},{},[37988],{"type":603,"value":37989},"接着通过代码来修改TestOptions的值，打印。\n然后通过修改appsettings.json文件来修改TestOptions的值，打印。",{"type":597,"tag":606,"props":37991,"children":37992},{},[37993,37995],{"type":603,"value":37994},"注意，",{"type":597,"tag":1080,"props":37996,"children":37997},{},[37998],{"type":603,"value":37999},"我们仅注册了一次TestOptions，却可以分别通过IOptions\u003C>,IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>接口来获取TestOptions的值。",{"type":597,"tag":606,"props":38001,"children":38002},{},[38003],{"type":603,"value":38004},"如果我们把appsettings.json文件中Name的值修改为Test 2，那么上面这段代码的输出是这样的：",{"type":597,"tag":606,"props":38006,"children":38007},{},[38008],{"type":597,"tag":719,"props":38009,"children":38011},{"alt":719,"src":38010},"/images/2020-08-17-netcore-options/94928-20200323160553644-291512622.png",[],{"type":597,"tag":857,"props":38013,"children":38015},{"id":38014},"分析",[38016],{"type":603,"value":38014},{"type":597,"tag":606,"props":38018,"children":38019},{},[38020],{"type":603,"value":38021},"我们可以看到第一次通过代码修改IOptions\u003C>和IOptionsMonitor\u003C>的值后，再次打印都被更新了，但是IOptionsSnapshot\u003C>没有，为什么呢？\n让我们从Options框架的源代码着手，理解为什么会这样。\n当我们需要使用Options模式时，我们都会调用定义在OptionsServiceCollectionExtensions类上的扩展方法AddOptions(this IServiceCollection services)。",{"type":597,"tag":621,"props":38023,"children":38025},{"code":38024},"var services = new ServiceCollection();\nservices.AddOptions();\n",[38026],{"type":597,"tag":629,"props":38027,"children":38028},{"__ignoreMap":591},[38029],{"type":603,"value":38024},{"type":597,"tag":606,"props":38031,"children":38032},{},[38033],{"type":603,"value":38034},"我们观察AddOptions方法的实现：",{"type":597,"tag":621,"props":38036,"children":38038},{"code":38037},"public static IServiceCollection AddOptions(this IServiceCollection services)\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptions\u003C>), typeof(OptionsManager\u003C>)));\n    services.TryAdd(ServiceDescriptor.Scoped(typeof(IOptionsSnapshot\u003C>), typeof(OptionsManager\u003C>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitor\u003C>), typeof(OptionsMonitor\u003C>)));\n    services.TryAdd(ServiceDescriptor.Transient(typeof(IOptionsFactory\u003C>), typeof(OptionsFactory\u003C>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitorCache\u003C>), typeof(OptionsCache\u003C>)));\n    return services;\n}\n",[38039],{"type":597,"tag":629,"props":38040,"children":38041},{"__ignoreMap":591},[38042],{"type":603,"value":38037},{"type":597,"tag":606,"props":38044,"children":38045},{},[38046],{"type":603,"value":38047},"从上面的代码我们可以得知，IOptions\u003C>和IOptionsMonitor\u003C>被注册为单例服务，而IOptionsSnapshot\u003C>被注册为范围服务。\n由于IOptions\u003C>和IOptionsMonitor\u003C>都被注册为单例服务，因此每次获取的都是同一个实例，所以更改了以后的值是保留的。\n而IOptionsSnapshot\u003C>被注册为范围服务，所以每次创建新范围时获取的都是一个新的值，外部的更改只对当次有效，不会保留到下次（不能跨范围，对于ASP.NET Core来说不能跨请求）。",{"type":597,"tag":606,"props":38049,"children":38050},{},[38051],{"type":603,"value":38052},"我们继续看第二次修改，第二次修改配置文件后IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>的值更新了，而IOptions\u003C>的值没有更新。\nIOptions\u003C>好理解，它被注册为单例服务，第一次访问的时候生成实例并加载配置文件中的值，此后再也不会读取配置文件，所以它的值不会更新。\nIOptionsSnapshot\u003C>被注册为范围服务，每次重新生成一个新的范围时，它都会从配置文件中获取值，因此它的值会更新。\n但是，IOptionsMonitor\u003C>呢，它被注册为单例，为什么也会更新呢？\n让我们回到AddOptions的源代码，我们留意到IOptionsMonitor\u003C>的实现是OptionsManager\u003C>。\n当我们打开OptionsManager的源代码时，一切都很清楚了。\n它的构造函数如下：",{"type":597,"tag":621,"props":38054,"children":38056},{"code":38055},"public OptionsMonitor(IOptionsFactory\u003CTOptions> factory, IEnumerable\u003CIOptionsChangeTokenSource\u003CTOptions>> sources, IOptionsMonitorCache\u003CTOptions> cache)\n{\n    _factory = factory;\n    _sources = sources;\n    _cache = cache;\n\n    foreach (var source in _sources)\n    {\n        var registration = ChangeToken.OnChange(\n                () => source.GetChangeToken(),\n                (name) => InvokeChanged(name),\n                source.Name);\n\n        _registrations.Add(registration);\n    }\n}\n",[38057],{"type":597,"tag":629,"props":38058,"children":38059},{"__ignoreMap":591},[38060],{"type":603,"value":38055},{"type":597,"tag":606,"props":38062,"children":38063},{},[38064],{"type":603,"value":38065},"原来OptionsMonitor的更新能力是从IOptionsChangeTokenSource而来，但是这个接口的实例又是谁呢？\n我们回到最开始的代码的第10行：",{"type":597,"tag":621,"props":38067,"children":38069},{"code":38068},"services.Configure\u003CTestOptions>(configuration);\n",[38070],{"type":597,"tag":629,"props":38071,"children":38072},{"__ignoreMap":591},[38073],{"type":603,"value":38068},{"type":597,"tag":606,"props":38075,"children":38076},{},[38077],{"type":603,"value":38078},"这是一个定义在Microsoft.Extensions.Options.ConfigurationExtensions.dll的扩展方法，最后实际调用的是它的一个重载方法，代码如下：",{"type":597,"tag":621,"props":38080,"children":38082},{"code":38081},"public static IServiceCollection Configure\u003CTOptions>(this IServiceCollection services, string name, IConfiguration config, Action\u003CBinderOptions> configureBinder)\n    where TOptions : class\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    if (config == null)\n    {\n        throw new ArgumentNullException(nameof(config));\n    }\n\n    services.AddOptions();\n    services.AddSingleton\u003CIOptionsChangeTokenSource\u003CTOptions>>(new ConfigurationChangeTokenSource\u003CTOptions>(name, config));\n    return services.AddSingleton\u003CIConfigureOptions\u003CTOptions>>(new NamedConfigureFromConfigurationOptions\u003CTOptions>(name, config, configureBinder));\n}\n",[38083],{"type":597,"tag":629,"props":38084,"children":38085},{"__ignoreMap":591},[38086],{"type":603,"value":38081},{"type":597,"tag":606,"props":38088,"children":38089},{},[38090],{"type":603,"value":38091},"秘密就在上面的第15行，ConfigurationChangeTokenSource，它引用了代表配置文件的对象config，所以配置文件更新，IOptionsMonitor就会跟着更新。",{"type":597,"tag":857,"props":38093,"children":38095},{"id":38094},"结论",[38096],{"type":603,"value":38094},{"type":597,"tag":606,"props":38098,"children":38099},{},[38100],{"type":603,"value":38101},"IOptions\u003C>是单例，因此一旦生成了，除非通过代码的方式更改，它的值是不会更新的。\nIOptionsMonitor\u003C>也是单例，但是它通过IOptionsChangeTokenSource\u003C> 能够和配置文件一起更新，也能通过代码的方式更改值。\nIOptionsSnapshot\u003C>是范围，所以在配置文件更新的下一次访问，它的值会更新，但是它不能跨范围通过代码的方式更改值，只能在当前范围（请求）内有效。",{"type":597,"tag":606,"props":38103,"children":38104},{},[38105],{"type":603,"value":38106},"官方文档是这样介绍的：\nIOptionsMonitor用于检索选项和管理TOptions实例的选项通知，它支持下面的场景：",{"type":597,"tag":1321,"props":38108,"children":38109},{},[38110,38115,38120,38125],{"type":597,"tag":807,"props":38111,"children":38112},{},[38113],{"type":603,"value":38114},"实例更新通知。",{"type":597,"tag":807,"props":38116,"children":38117},{},[38118],{"type":603,"value":38119},"命名实例。",{"type":597,"tag":807,"props":38121,"children":38122},{},[38123],{"type":603,"value":38124},"重新加载配置。",{"type":597,"tag":807,"props":38126,"children":38127},{},[38128],{"type":603,"value":38129},"选择性的让实例失效。",{"type":597,"tag":606,"props":38131,"children":38132},{},[38133],{"type":603,"value":38134},"IOptionsSnapshot在需要对每个请求重新计算选项的场景中非常有用。\nIOptions可以用来支持Options模式，但是它不支持前面两者所支持的场景，如果你不需要支持上面的场景，你可以继续使用IOptions。",{"type":597,"tag":606,"props":38136,"children":38137},{},[38138,38140,38145],{"type":603,"value":38139},"所以你应该根据你的实际使用场景来选择到底是用这三者中的哪一个。\n",{"type":597,"tag":1733,"props":38141,"children":38142},{},[38143],{"type":603,"value":38144},"一般来说，如果你依赖配置文件，那么首先考虑IOptionsMonitor\u003C>，如果不合适接着考虑IOptionsSnapshot\u003C>，最后考虑IOptions\u003C>。*",{"type":603,"value":38146},"\n***有一点需要注意，在ASP.NET Core应用中IOptionsMonitor可能会导致同一个请求中选项的值不一致——当你正在修改配置文件的时候——这可能会引发一些奇怪的bug。\n如果这个对你很重要，请使用IOptionsSnapshot，它可以保证同一个请求中的一致性，但是它可能会带来轻微的性能上的损失。\n如果你是在app启动的时候自己构造Options（比如在Startup类中）：",{"type":597,"tag":621,"props":38148,"children":38150},{"code":38149},"services.Configure\u003CTestOptions>(opt => opt.Name = \"Test 0\");\n",[38151],{"type":597,"tag":629,"props":38152,"children":38153},{"__ignoreMap":591},[38154],{"type":603,"value":38149},{"type":597,"tag":606,"props":38156,"children":38157},{},[38158],{"type":603,"value":38159},"IOptions\u003C>最简单，也许是一个不错的选择，Configure扩展方法还有其他重载可以满足你的更多需求。",{"title":591,"searchDepth":787,"depth":787,"links":38161},[],"content:dotnet:2020-08-17-netcore-options.md","dotnet/2020-08-17-netcore-options.md","2020-08-17",{"_path":122,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":121,"description":38166,"body":38167,"_type":791,"_id":38208,"_source":793,"_file":38209,"_extension":795,"date":38210},"ConcurrentDictionary主要用于要从多个线程（或异步任务）修改字典的情景中。如果来自单个线程，则可以根据需要使用尽可能多的代码使用标准Dictionary；）",{"type":594,"children":38168,"toc":38206},[38169,38173,38178,38183,38191,38196,38201],{"type":597,"tag":606,"props":38170,"children":38171},{},[38172],{"type":603,"value":38166},{"type":597,"tag":606,"props":38174,"children":38175},{},[38176],{"type":603,"value":38177},"如果您查看ConcurrentDictionary上的方法，则会发现一些有趣的方法，例如TryAdd，TryGetValue，TryUpdate和TryRemove。",{"type":597,"tag":606,"props":38179,"children":38180},{},[38181],{"type":603,"value":38182},"例如，若使用普通的Dictionary类时可能会看到下面的代码",{"type":597,"tag":621,"props":38184,"children":38186},{"code":38185},"// There are better ways to do this... but we need an example ;)\nif (!dictionary.ContainsKey(id))\n    dictionary.Add(id, value);\n    \n",[38187],{"type":597,"tag":629,"props":38188,"children":38189},{"__ignoreMap":591},[38190],{"type":603,"value":38185},{"type":597,"tag":606,"props":38192,"children":38193},{},[38194],{"type":603,"value":38195},"多线程中同时调用该段代码,并且使用相同的id来调用Add,它将引发异常。",{"type":597,"tag":606,"props":38197,"children":38198},{},[38199],{"type":603,"value":38200},"ConcurrentDictionary方法TryAdd为您处理该问题，并将返回true/false，告诉您是否已添加它（或该键是否已在字典中）。",{"type":597,"tag":606,"props":38202,"children":38203},{},[38204],{"type":603,"value":38205},"因此，除非您在代码的多线程部分中进行工作，否则您可能仅可以使用标准的Dictionary类。",{"title":591,"searchDepth":787,"depth":787,"links":38207},[],"content:dotnet:2020-08-16-ConcurrentDictionary.md","dotnet/2020-08-16-ConcurrentDictionary.md","2020-08-16",{"_path":119,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":118,"description":38212,"body":38213,"_type":791,"_id":38869,"_source":793,"_file":38870,"_extension":795,"date":38871},"Kestrel是http://ASP.NET Core框架内置的默认Web Server 什么是Web Server? 根据维基百科的定义: Web Server是可以处理来自客户端的HTTP协议请求并返回网页的软件或硬件。 因此Kestrel的主要功能就是接收来自网络客户端的HTTP请求，并根据请求返回对应的网页（数据也是一种网页）。",{"type":594,"children":38214,"toc":38852},[38215,38238,38257,38260,38297,38308,38317,38334,38389,38407,38418,38427,38490,38502,38532,38561,38567,38586,38595,38615,38628,38649,38661,38710,38728,38753,38762,38773,38785,38794,38813,38818,38828,38840],{"type":597,"tag":606,"props":38216,"children":38217},{},[38218,38220,38227,38229,38236],{"type":603,"value":38219},"Kestrel是",{"type":597,"tag":886,"props":38221,"children":38224},{"href":38222,"rel":38223},"https://link.zhihu.com/?target=http%3A//ASP.NET",[890],[38225],{"type":603,"value":38226},"http://ASP.NET",{"type":603,"value":38228}," Core框架内置的默认Web Server 什么是Web Server? 根据",{"type":597,"tag":886,"props":38230,"children":38233},{"href":38231,"rel":38232},"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Web_server",[890],[38234],{"type":603,"value":38235},"维基百科",{"type":603,"value":38237},"的定义: Web Server是可以处理来自客户端的HTTP协议请求并返回网页的软件或硬件。 因此Kestrel的主要功能就是接收来自网络客户端的HTTP请求，并根据请求返回对应的网页（数据也是一种网页）。",{"type":597,"tag":598,"props":38239,"children":38241},{"id":38240},"定义-iserverihttpapplicationtcontext",[38242,38244,38250,38251],{"type":603,"value":38243},"定义 - ",{"type":597,"tag":629,"props":38245,"children":38247},{"className":38246},[],[38248],{"type":603,"value":38249},"IServer",{"type":603,"value":687},{"type":597,"tag":629,"props":38252,"children":38254},{"className":38253},[],[38255],{"type":603,"value":38256},"IHttpApplication\u003CTContext>",{"type":597,"tag":3720,"props":38258,"children":38259},{},[],{"type":597,"tag":606,"props":38261,"children":38262},{},[38263,38268,38270,38275,38277,38282,38283,38288,38290,38295],{"type":597,"tag":886,"props":38264,"children":38266},{"href":38222,"rel":38265},[890],[38267],{"type":603,"value":38226},{"type":603,"value":38269}," Core定义了两个基本的接口",{"type":597,"tag":629,"props":38271,"children":38273},{"className":38272},[],[38274],{"type":603,"value":38249},{"type":603,"value":38276},"，及",{"type":597,"tag":629,"props":38278,"children":38280},{"className":38279},[],[38281],{"type":603,"value":38256},{"type":603,"value":9343},{"type":597,"tag":629,"props":38284,"children":38286},{"className":38285},[],[38287],{"type":603,"value":38249},{"type":603,"value":38289},"接口定义了Web Server的基本功能，",{"type":597,"tag":629,"props":38291,"children":38293},{"className":38292},[],[38294],{"type":603,"value":38256},{"type":603,"value":38296},"则定义了处理HTTP协议的应用程序的基本功能，我们首先来看下这两个定义:",{"type":597,"tag":598,"props":38298,"children":38300},{"id":38299},"web-服务器-iserver",[38301,38303],{"type":603,"value":38302},"Web 服务器 - ",{"type":597,"tag":629,"props":38304,"children":38306},{"className":38305},[],[38307],{"type":603,"value":38249},{"type":597,"tag":621,"props":38309,"children":38312},{"className":38310,"code":38311,"language":603,"meta":591},[29933],"namespace Microsoft.AspNetCore.Hosting.Server\n{\n    /// \u003Csummary>\n    /// Represents a server.\n    /// \u003C/summary>\n    public interface IServer : IDisposable\n    {\n        /// \u003Csummary>\n        /// A collection of HTTP features of the server.\n        /// \u003C/summary>\n        IFeatureCollection Features { get; }\n\n        /// \u003Csummary>\n        /// Start the server with an application.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"application\">An instance of \u003Csee cref=\"IHttpApplication{TContext}\"/>.\u003C/param>\n        /// \u003Ctypeparam name=\"TContext\">The context associated with the application.\u003C/typeparam>\n        /// \u003Cparam name=\"cancellationToken\">Indicates if the server startup should be aborted.\u003C/param>\n        Task StartAsync\u003CTContext>(IHttpApplication\u003CTContext> application, CancellationToken cancellationToken);\n\n        /// \u003Csummary>\n        /// Stop processing requests and shut down the server, gracefully if possible.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"cancellationToken\">Indicates if the graceful shutdown should be aborted.\u003C/param>\n        Task StopAsync(CancellationToken cancellationToken);\n    }\n}\n",[38313],{"type":597,"tag":629,"props":38314,"children":38315},{"__ignoreMap":591},[38316],{"type":603,"value":38311},{"type":597,"tag":606,"props":38318,"children":38319},{},[38320,38326,38328,38333],{"type":597,"tag":629,"props":38321,"children":38323},{"className":38322},[],[38324],{"type":603,"value":38325},"Features",{"type":603,"value":38327}," 是一个功能集合，其中可以包含所有应用程序需要的，用以处理HTTP协议各个阶段和组成部分的功能集，以接口的形式注入到",{"type":597,"tag":629,"props":38329,"children":38331},{"className":38330},[],[38332],{"type":603,"value":38325},{"type":603,"value":31465},{"type":597,"tag":606,"props":38335,"children":38336},{},[38337,38343,38345,38350,38351,38357,38359,38365,38367,38372,38374,38380,38382,38387],{"type":597,"tag":629,"props":38338,"children":38340},{"className":38339},[],[38341],{"type":603,"value":38342},"StartAsync",{"type":603,"value":38344},"方法可以启动IServer对象，用来接受用户请求。包含两个参数：",{"type":597,"tag":629,"props":38346,"children":38348},{"className":38347},[],[38349],{"type":603,"value":38256},{"type":603,"value":695},{"type":597,"tag":629,"props":38352,"children":38354},{"className":38353},[],[38355],{"type":603,"value":38356},"CancellationToken",{"type":603,"value":38358},"。 ",{"type":597,"tag":629,"props":38360,"children":38362},{"className":38361},[],[38363],{"type":603,"value":38364},"IHttpApplicatoin\u003CTContext>",{"type":603,"value":38366},"是最终处理HTTP请求的应用程序入口点，在ASP.NET Core应用程序中，默认的",{"type":597,"tag":629,"props":38368,"children":38370},{"className":38369},[],[38371],{"type":603,"value":38256},{"type":603,"value":38373},"实现是：",{"type":597,"tag":629,"props":38375,"children":38377},{"className":38376},[],[38378],{"type":603,"value":38379},"HostingApplication",{"type":603,"value":38381},"，我们会在稍后的部分进行详细的介绍。 而",{"type":597,"tag":629,"props":38383,"children":38385},{"className":38384},[],[38386],{"type":603,"value":38356},{"type":603,"value":38388},"用来响应中断应用程序启动的请求。",{"type":597,"tag":606,"props":38390,"children":38391},{},[38392,38398,38400,38405],{"type":597,"tag":629,"props":38393,"children":38395},{"className":38394},[],[38396],{"type":603,"value":38397},"StopAsync",{"type":603,"value":38399},"方法用来处理停止服务的请求，接受一个参数",{"type":597,"tag":629,"props":38401,"children":38403},{"className":38402},[],[38404],{"type":603,"value":38356},{"type":603,"value":38406},"，用来响应中断停止应用程序的请求。",{"type":597,"tag":598,"props":38408,"children":38410},{"id":38409},"http应用程序-ihttpapplicationtcontext",[38411,38413],{"type":603,"value":38412},"Http应用程序 - ",{"type":597,"tag":629,"props":38414,"children":38416},{"className":38415},[],[38417],{"type":603,"value":38256},{"type":597,"tag":621,"props":38419,"children":38422},{"className":38420,"code":38421,"language":603,"meta":591},[29933],"namespace Microsoft.AspNetCore.Hosting.Server\n{\n    /// \u003Csummary>\n    /// Represents an application.\n    /// \u003C/summary>\n    /// \u003Ctypeparam name=\"TContext\">The context associated with the application.\u003C/typeparam>\n    public interface IHttpApplication\u003CTContext>\n    {\n        /// \u003Csummary>\n        /// Create a TContext given a collection of HTTP features.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"contextFeatures\">A collection of HTTP features to be used for creating the TContext.\u003C/param>\n        /// \u003Creturns>The created TContext.\u003C/returns>\n        TContext CreateContext(IFeatureCollection contextFeatures);\n\n        /// \u003Csummary>\n        /// Asynchronously processes an TContext.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"context\">The TContext that the operation will process.\u003C/param>\n        Task ProcessRequestAsync(TContext context);\n\n        /// \u003Csummary>\n        /// Dispose a given TContext.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"context\">The TContext to be disposed.\u003C/param>\n        /// \u003Cparam name=\"exception\">The Exception thrown when processing did not complete successfully, otherwise null.\u003C/param>\n        void DisposeContext(TContext context, Exception exception);\n    }\n}\n",[38423],{"type":597,"tag":629,"props":38424,"children":38425},{"__ignoreMap":591},[38426],{"type":603,"value":38421},{"type":597,"tag":606,"props":38428,"children":38429},{},[38430,38435,38437,38443,38445,38451,38453,38459,38461,38466,38468,38473,38475,38481,38483,38488],{"type":597,"tag":629,"props":38431,"children":38433},{"className":38432},[],[38434],{"type":603,"value":38256},{"type":603,"value":38436},"接口的定义包含了三个方法： ",{"type":597,"tag":629,"props":38438,"children":38440},{"className":38439},[],[38441],{"type":603,"value":38442},"CreateContext",{"type":603,"value":38444},"方法用来创建处理请求的上下文中所需要的所有相关数据，组成",{"type":597,"tag":629,"props":38446,"children":38448},{"className":38447},[],[38449],{"type":603,"value":38450},"Context",{"type":603,"value":38452},"对象，由接口的实现自己定义类型， ",{"type":597,"tag":629,"props":38454,"children":38456},{"className":38455},[],[38457],{"type":603,"value":38458},"ProcessRequestAsync",{"type":603,"value":38460},"方法使用",{"type":597,"tag":629,"props":38462,"children":38464},{"className":38463},[],[38465],{"type":603,"value":38442},{"type":603,"value":38467},"方法创建的",{"type":597,"tag":629,"props":38469,"children":38471},{"className":38470},[],[38472],{"type":603,"value":38450},{"type":603,"value":38474},"对象处理本次请求。 ",{"type":597,"tag":629,"props":38476,"children":38478},{"className":38477},[],[38479],{"type":603,"value":38480},"DisposeContext",{"type":603,"value":38482},"方法在完成请求的处理后，负责释放",{"type":597,"tag":629,"props":38484,"children":38486},{"className":38485},[],[38487],{"type":603,"value":38450},{"type":603,"value":38489},"对象。",{"type":597,"tag":598,"props":38491,"children":38493},{"id":38492},"实现-kestrelserver",[38494,38496],{"type":603,"value":38495},"实现 - ",{"type":597,"tag":629,"props":38497,"children":38499},{"className":38498},[],[38500],{"type":603,"value":38501},"KestrelServer",{"type":597,"tag":606,"props":38503,"children":38504},{},[38505,38510,38512,38517,38518,38523,38525,38530],{"type":597,"tag":886,"props":38506,"children":38508},{"href":38222,"rel":38507},[890],[38509],{"type":603,"value":38226},{"type":603,"value":38511}," Core提供了默认的",{"type":597,"tag":629,"props":38513,"children":38515},{"className":38514},[],[38516],{"type":603,"value":38249},{"type":603,"value":36145},{"type":597,"tag":629,"props":38519,"children":38521},{"className":38520},[],[38522],{"type":603,"value":38501},{"type":603,"value":38524},"，下面我们就来看看",{"type":597,"tag":629,"props":38526,"children":38528},{"className":38527},[],[38529],{"type":603,"value":38501},{"type":603,"value":38531},"具体都做了些什么。",{"type":597,"tag":617,"props":38533,"children":38534},{},[38535],{"type":597,"tag":606,"props":38536,"children":38537},{},[38538,38543,38545,38552,38554],{"type":597,"tag":629,"props":38539,"children":38541},{"className":38540},[],[38542],{"type":603,"value":38501},{"type":603,"value":38544}," 定义在dotnet/aspnetcore项目中（",{"type":597,"tag":886,"props":38546,"children":38549},{"href":38547,"rel":38548},"https://link.zhihu.com/?target=https%3A//github.com/dotnet/aspnetcore",[890],[38550],{"type":603,"value":38551},"GITHUB REPO",{"type":603,"value":38553},"）。 项目名称为：Microsoft.AspNetCore.Server.Kestrel.Core 名称空间.AspNetCore.Server.Kestrel.Core ",{"type":597,"tag":886,"props":38555,"children":38558},{"href":38556,"rel":38557},"https://link.zhihu.com/?target=https%3A//github.com/dotnet/aspnetcore/blob/master/src/Servers/Kestrel/Core/src/KestrelServer.cs",[890],[38559],{"type":603,"value":38560},"源代码",{"type":597,"tag":598,"props":38562,"children":38564},{"id":38563},"服务器启动端口监听协议解析及请求处理",[38565],{"type":603,"value":38566},"服务器启动：端口监听，协议解析及请求处理。",{"type":597,"tag":606,"props":38568,"children":38569},{},[38570,38572,38577,38578,38584],{"type":603,"value":38571},"我们先看一下",{"type":597,"tag":629,"props":38573,"children":38575},{"className":38574},[],[38576],{"type":603,"value":38501},{"type":603,"value":9674},{"type":597,"tag":629,"props":38579,"children":38581},{"className":38580},[],[38582],{"type":603,"value":38583},"StartAsync()",{"type":603,"value":38585},"方法的代码实现：",{"type":597,"tag":621,"props":38587,"children":38590},{"className":38588,"code":38589,"language":603,"meta":591},[29933],"public async Task StartAsync\u003CTContext>(IHttpApplication\u003CTContext> application, CancellationToken cancellationToken)\n        {\n            try\n            {\n                if (!BitConverter.IsLittleEndian)\n                {\n                    throw new PlatformNotSupportedException(CoreStrings.BigEndianNotSupported);\n                }\n\n                ValidateOptions();\n\n                if (_hasStarted)\n                {\n                    // The server has already started and/or has not been cleaned up yet\n                    throw new InvalidOperationException(CoreStrings.ServerAlreadyStarted);\n                }\n                _hasStarted = true;\n\n                ServiceContext.Heartbeat?.Start();\n\n                async Task OnBind(ListenOptions options)\n                {\n                    // Add the HTTP middleware as the terminal connection middleware\n                    options.UseHttpServer(ServiceContext, application, options.Protocols);\n\n                    var connectionDelegate = options.Build();\n\n                    // Add the connection limit middleware\n                    if (Options.Limits.MaxConcurrentConnections.HasValue)\n                    {\n                        connectionDelegate = new ConnectionLimitMiddleware(connectionDelegate, Options.Limits.MaxConcurrentConnections.Value, Trace).OnConnectionAsync;\n                    }\n\n                    var connectionDispatcher = new ConnectionDispatcher(ServiceContext, connectionDelegate);\n                    var transport = await _transportFactory.BindAsync(options.EndPoint).ConfigureAwait(false);\n\n                    // Update the endpoint\n                    options.EndPoint = transport.EndPoint;\n                    var acceptLoopTask = connectionDispatcher.StartAcceptingConnections(transport);\n\n                    _transports.Add((transport, acceptLoopTask));\n                }\n\n                await AddressBinder.BindAsync(_serverAddresses, Options, Trace, OnBind).ConfigureAwait(false);\n            }\n            catch (Exception ex)\n            {\n                Trace.LogCritical(0, ex, \"Unable to start Kestrel.\");\n                Dispose();\n                throw;\n            }\n        }\n",[38591],{"type":597,"tag":629,"props":38592,"children":38593},{"__ignoreMap":591},[38594],{"type":603,"value":38589},{"type":597,"tag":606,"props":38596,"children":38597},{},[38598,38604,38606,38613],{"type":597,"tag":629,"props":38599,"children":38601},{"className":38600},[],[38602],{"type":603,"value":38603},"Kestrel",{"type":603,"value":38605},"首先会检查服务器的",{"type":597,"tag":886,"props":38607,"children":38610},{"href":38608,"rel":38609},"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%E5%AD%97%E8%8A%82%E5%BA%8F",[890],[38611],{"type":603,"value":38612},"字节序",{"type":603,"value":38614},"，目前是不支持大端序的。 然后检查最大请求长度限制的设置项，以及服务器是否已经启动。",{"type":597,"tag":606,"props":38616,"children":38617},{},[38618,38620,38626],{"type":603,"value":38619},"最后，通过",{"type":597,"tag":629,"props":38621,"children":38623},{"className":38622},[],[38624],{"type":603,"value":38625},"AddressBinder",{"type":603,"value":38627},"对预先配置的IP地址或终结点(EndPoint)名称进行监听，开始接受客户端的请求。",{"type":597,"tag":606,"props":38629,"children":38630},{},[38631,38633,38639,38641,38647],{"type":603,"value":38632},"当每有一个新的HTTP请求通过TCP协议或其他协议和服务器成功简历连接后，AddressBinder使用",{"type":597,"tag":629,"props":38634,"children":38636},{"className":38635},[],[38637],{"type":603,"value":38638},"ThreadPool.UnsafeQueueUserWorkItem()",{"type":603,"value":38640},"方法将",{"type":597,"tag":629,"props":38642,"children":38644},{"className":38643},[],[38645],{"type":603,"value":38646},"OnBind()",{"type":603,"value":38648},"方法添加到线程池中，等待线程池的调度。",{"type":597,"tag":606,"props":38650,"children":38651},{},[38652,38654,38659],{"type":603,"value":38653},"如果此时进程有可用的线程，就会调用",{"type":597,"tag":629,"props":38655,"children":38657},{"className":38656},[],[38658],{"type":603,"value":38646},{"type":603,"value":38660},"方法，处理用户的HTTP请求。",{"type":597,"tag":606,"props":38662,"children":38663},{},[38664,38669,38671,38677,38679,38685,38687,38693,38695,38701,38703,38708],{"type":597,"tag":629,"props":38665,"children":38667},{"className":38666},[],[38668],{"type":603,"value":38646},{"type":603,"value":38670},"方法默认使用",{"type":597,"tag":629,"props":38672,"children":38674},{"className":38673},[],[38675],{"type":603,"value":38676},"HttpConnectionMiddleware\u003CServiceContext>",{"type":603,"value":38678},"中间件，处理新接入的用户请求，当设置了",{"type":597,"tag":629,"props":38680,"children":38682},{"className":38681},[],[38683],{"type":603,"value":38684},"MaxConcurrentConnections",{"type":603,"value":38686},"值为",{"type":597,"tag":629,"props":38688,"children":38690},{"className":38689},[],[38691],{"type":603,"value":38692},"True",{"type":603,"value":38694},"时，则会默认使用",{"type":597,"tag":629,"props":38696,"children":38698},{"className":38697},[],[38699],{"type":603,"value":38700},"ConnectionLimitMiddleware",{"type":603,"value":38702},"中间件，限制最大可用连接数，如果当前请求数已经达到最大可接受连接数，则拒绝用户的请求并断开连接，否则调用",{"type":597,"tag":629,"props":38704,"children":38706},{"className":38705},[],[38707],{"type":603,"value":38676},{"type":603,"value":38709},"中间件，继续处理用户的请求。",{"type":597,"tag":598,"props":38711,"children":38713},{"id":38712},"处理http请求-httpconnectionmiddlewareservicecontexthttpconnection",[38714,38716,38721,38722],{"type":603,"value":38715},"处理HTTP请求 - ",{"type":597,"tag":629,"props":38717,"children":38719},{"className":38718},[],[38720],{"type":603,"value":38676},{"type":603,"value":687},{"type":597,"tag":629,"props":38723,"children":38725},{"className":38724},[],[38726],{"type":603,"value":38727},"HttpConnection",{"type":597,"tag":606,"props":38729,"children":38730},{},[38731,38736,38738,38744,38746,38751],{"type":597,"tag":629,"props":38732,"children":38734},{"className":38733},[],[38735],{"type":603,"value":38676},{"type":603,"value":38737},"中间件负责组装连接相关的上下文数据",{"type":597,"tag":629,"props":38739,"children":38741},{"className":38740},[],[38742],{"type":603,"value":38743},"HttpConnectionContext",{"type":603,"value":38745},"，并使用",{"type":597,"tag":629,"props":38747,"children":38749},{"className":38748},[],[38750],{"type":603,"value":38727},{"type":603,"value":38752},"类处理用户请求。",{"type":597,"tag":621,"props":38754,"children":38757},{"className":38755,"code":38756,"language":603,"meta":591},[29933],"internal class HttpConnectionMiddleware\u003CTContext>\n    {\n        private readonly ServiceContext _serviceContext;\n        private readonly IHttpApplication\u003CTContext> _application;\n        private readonly HttpProtocols _protocols;\n\n        public HttpConnectionMiddleware(ServiceContext serviceContext, IHttpApplication\u003CTContext> application, HttpProtocols protocols)\n        {\n            _serviceContext = serviceContext;\n            _application = application;\n            _protocols = protocols;\n        }\n\n        public Task OnConnectionAsync(ConnectionContext connectionContext)\n        {\n            var memoryPoolFeature = connectionContext.Features.Get\u003CIMemoryPoolFeature>();\n\n            var httpConnectionContext = new HttpConnectionContext\n            {\n                ConnectionId = connectionContext.ConnectionId,\n                ConnectionContext = connectionContext,\n                Protocols = _protocols,\n                ServiceContext = _serviceContext,\n                ConnectionFeatures = connectionContext.Features,\n                MemoryPool = memoryPoolFeature.MemoryPool,\n                Transport = connectionContext.Transport,\n                LocalEndPoint = connectionContext.LocalEndPoint as IPEndPoint,\n                RemoteEndPoint = connectionContext.RemoteEndPoint as IPEndPoint\n            };\n\n            var connection = new HttpConnection(httpConnectionContext);\n\n            return connection.ProcessRequestsAsync(_application);\n        }\n    }\n",[38758],{"type":597,"tag":629,"props":38759,"children":38760},{"__ignoreMap":591},[38761],{"type":603,"value":38756},{"type":597,"tag":1023,"props":38763,"children":38765},{"id":38764},"http版本控制-httpconnection",[38766,38768],{"type":603,"value":38767},"HTTP版本控制 - ",{"type":597,"tag":629,"props":38769,"children":38771},{"className":38770},[],[38772],{"type":603,"value":38727},{"type":597,"tag":606,"props":38774,"children":38775},{},[38776,38778,38783],{"type":603,"value":38777},"当用户创建",{"type":597,"tag":629,"props":38779,"children":38781},{"className":38780},[],[38782],{"type":603,"value":38727},{"type":603,"value":38784},"类时，在初始化过程中，会根据用户请求声明的HTTP协议版本，分别创建对应版本的Connection类，并使用该类处理用户请求：",{"type":597,"tag":621,"props":38786,"children":38789},{"className":38787,"code":38788,"language":603,"meta":591},[29933],"public async Task ProcessRequestsAsync\u003CTContext>(IHttpApplication\u003CTContext> httpApplication)\n        {\n            try\n            {\n                // Ensure TimeoutControl._lastTimestamp is initialized before anything that could set timeouts runs.\n                _timeoutControl.Initialize(_systemClock.UtcNowTicks);\n\n                IRequestProcessor requestProcessor = null;\n\n                switch (SelectProtocol())\n                {\n                    case HttpProtocols.Http1:\n                        // _http1Connection must be initialized before adding the connection to the connection manager\n                        requestProcessor = _http1Connection = new Http1Connection\u003CTContext>(_context);\n                        _protocolSelectionState = ProtocolSelectionState.Selected;\n                        break;\n                    case HttpProtocols.Http2:\n                        // _http2Connection must be initialized before yielding control to the transport thread,\n                        // to prevent a race condition where _http2Connection.Abort() is called just as\n                        // _http2Connection is about to be initialized.\n                        requestProcessor = new Http2Connection(_context);\n                        _protocolSelectionState = ProtocolSelectionState.Selected;\n                        break;\n                    case HttpProtocols.None:\n                        // An error was already logged in SelectProtocol(), but we should close the connection.\n                        break;\n                    default:\n                        // SelectProtocol() only returns Http1, Http2 or None.\n                        throw new NotSupportedException($\"{nameof(SelectProtocol)} returned something other than Http1, Http2 or None.\");\n                }\n\n                _requestProcessor = requestProcessor;\n\n                if (requestProcessor != null)\n                {\n                    var connectionHeartbeatFeature = _context.ConnectionFeatures.Get\u003CIConnectionHeartbeatFeature>();\n                    var connectionLifetimeNotificationFeature = _context.ConnectionFeatures.Get\u003CIConnectionLifetimeNotificationFeature>();\n\n                    // These features should never be null in Kestrel itself, if this middleware is ever refactored to run outside of kestrel,\n                    // we'll need to handle these missing.\n                    Debug.Assert(connectionHeartbeatFeature != null, nameof(IConnectionHeartbeatFeature) + \" is missing!\");\n                    Debug.Assert(connectionLifetimeNotificationFeature != null, nameof(IConnectionLifetimeNotificationFeature) + \" is missing!\");\n\n                    // Register the various callbacks once we're going to start processing requests\n\n                    // The heart beat for various timeouts\n                    connectionHeartbeatFeature?.OnHeartbeat(state => ((HttpConnection)state).Tick(), this);\n\n                    // Register for graceful shutdown of the server\n                    using var shutdownRegistration = connectionLifetimeNotificationFeature?.ConnectionClosedRequested.Register(state => ((HttpConnection)state).StopProcessingNextRequest(), this);\n\n                    // Register for connection close\n                    using var closedRegistration = _context.ConnectionContext.ConnectionClosed.Register(state => ((HttpConnection)state).OnConnectionClosed(), this);\n\n                    await requestProcessor.ProcessRequestsAsync(httpApplication);\n                }\n            }\n            catch (Exception ex)\n            {\n                Log.LogCritical(0, ex, $\"Unexpected exception in {nameof(HttpConnection)}.{nameof(ProcessRequestsAsync)}.\");\n            }\n            finally\n            {\n                if (_http1Connection?.IsUpgraded == true)\n                {\n                    _context.ServiceContext.ConnectionManager.UpgradedConnectionCount.ReleaseOne();\n                }\n            }\n        }\n",[38790],{"type":597,"tag":629,"props":38791,"children":38792},{"__ignoreMap":591},[38793],{"type":603,"value":38788},{"type":597,"tag":606,"props":38795,"children":38796},{},[38797,38799,38804,38806,38811],{"type":603,"value":38798},"HTTP1和HTTP2处理HTTP协议的方式有所不同，HTTP1协议解析完成后，会立即调用",{"type":597,"tag":629,"props":38800,"children":38802},{"className":38801},[],[38803],{"type":603,"value":38256},{"type":603,"value":38805},"处理请求，HTTP2协议解析完成后，会再次调用",{"type":597,"tag":629,"props":38807,"children":38809},{"className":38808},[],[38810],{"type":603,"value":38638},{"type":603,"value":38812},"方法等待线程池可用线程。",{"type":597,"tag":598,"props":38814,"children":38816},{"id":38815},"结束语",[38817],{"type":603,"value":38815},{"type":597,"tag":606,"props":38819,"children":38820},{},[38821,38826],{"type":597,"tag":629,"props":38822,"children":38824},{"className":38823},[],[38825],{"type":603,"value":38603},{"type":603,"value":38827},"服务的代码量并不下，其中主要是辅助接受用户请求和解析HTTP协议的代码，在这里不做详细的介绍，各位读者有兴趣的，可以详细阅读源代码。",{"type":597,"tag":606,"props":38829,"children":38830},{},[38831,38833,38838],{"type":603,"value":38832},"我们看到，",{"type":597,"tag":629,"props":38834,"children":38836},{"className":38835},[],[38837],{"type":603,"value":38603},{"type":603,"value":38839},"服务在接受和处理请求时，都用到了线程池，可以极大的提高服务器的吞吐量。",{"type":597,"tag":606,"props":38841,"children":38842},{},[38843,38845,38850],{"type":603,"value":38844},"后面，我们还会详细介绍系统默认的",{"type":597,"tag":629,"props":38846,"children":38848},{"className":38847},[],[38849],{"type":603,"value":38256},{"type":603,"value":38851},"实现，看看ASP.NET Core是如何将HTTP转发到Controller和Action，其中又有哪些精妙的代码呢。",{"title":591,"searchDepth":787,"depth":787,"links":38853},[38854,38856,38858,38860,38862,38863,38868],{"id":38240,"depth":787,"text":38855},"定义 - IServer、IHttpApplication\u003CTContext>",{"id":38299,"depth":787,"text":38857},"Web 服务器 - IServer",{"id":38409,"depth":787,"text":38859},"Http应用程序 - IHttpApplication\u003CTContext>",{"id":38492,"depth":787,"text":38861},"实现 - KestrelServer",{"id":38563,"depth":787,"text":38566},{"id":38712,"depth":787,"text":38864,"children":38865},"处理HTTP请求 - HttpConnectionMiddleware\u003CServiceContext>、HttpConnection",[38866],{"id":38764,"depth":1530,"text":38867},"HTTP版本控制 - HttpConnection",{"id":38815,"depth":787,"text":38815},"content:dotnet:2020-08-15-Kestrel-source-code.md","dotnet/2020-08-15-Kestrel-source-code.md","2020-08-15",{"_path":116,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":115,"description":38873,"body":38874,"_type":791,"_id":39050,"_source":793,"_file":39051,"_extension":795,"date":39052},"在 DotNetCore 当中不再像 MVC5 那样可以通过 HttpContext.Current 来获取到当前请求的上下文。",{"type":594,"children":38875,"toc":39048},[38876,38889,38894,38902,38907,38915,38928,38936,38949,38967,38972,38980,38985,38993,39011,39019,39043],{"type":597,"tag":606,"props":38877,"children":38878},{},[38879,38881,38887],{"type":603,"value":38880},"在 DotNetCore 当中不再像 MVC5 那样可以通过 ",{"type":597,"tag":629,"props":38882,"children":38884},{"className":38883},[],[38885],{"type":603,"value":38886},"HttpContext.Current",{"type":603,"value":38888}," 来获取到当前请求的上下文。",{"type":597,"tag":606,"props":38890,"children":38891},{},[38892],{"type":603,"value":38893},"不过微软提供了一个 IHttpContextAccessor 来让我们访问当前请求的 Http 上下文，其定义\n如下：",{"type":597,"tag":621,"props":38895,"children":38897},{"code":38896},"namespace Microsoft.AspNetCore.Http\n{\n    public interface IHttpContextAccessor\n    {\n        HttpContext HttpContext { get; set; }\n    }\n}\n",[38898],{"type":597,"tag":629,"props":38899,"children":38900},{"__ignoreMap":591},[38901],{"type":603,"value":38896},{"type":597,"tag":606,"props":38903,"children":38904},{},[38905],{"type":603,"value":38906},"需要使用的话需要将其添加到 Ioc 容器当中，在 Startup 类的 ConfigureService 我们可以将其默认实现注册到 Ioc 之中。",{"type":597,"tag":621,"props":38908,"children":38910},{"code":38909},"public void ConfigureService(IServiceCollection services) {\n    services.TryAddSingleton\u003CIHttpContextAccessor, HttpContextAccessor>();\n}\n",[38911],{"type":597,"tag":629,"props":38912,"children":38913},{"__ignoreMap":591},[38914],{"type":603,"value":38909},{"type":597,"tag":606,"props":38916,"children":38917},{},[38918,38920,38926],{"type":603,"value":38919},"那么我们可以来看看 ",{"type":597,"tag":629,"props":38921,"children":38923},{"className":38922},[],[38924],{"type":603,"value":38925},"HttpContextAccessor",{"type":603,"value":38927}," 的具体实现:",{"type":597,"tag":621,"props":38929,"children":38931},{"code":38930},"using System.Threading;\n\nnamespace Microsoft.AspNetCore.Http\n{\n    public class HttpContextAccessor : IHttpContextAccessor\n    {\n        private static AsyncLocal\u003CHttpContext> _httpContextCurrent = new AsyncLocal\u003CHttpContext>();\n\n        public HttpContext HttpContext\n        {\n            get\n            {\n                return _httpContextCurrent.Value;\n            }\n            set\n            {\n                _httpContextCurrent.Value = value;\n            }\n        }\n    }\n}\n",[38932],{"type":597,"tag":629,"props":38933,"children":38934},{"__ignoreMap":591},[38935],{"type":603,"value":38930},{"type":597,"tag":606,"props":38937,"children":38938},{},[38939,38941,38947],{"type":603,"value":38940},"在其内部主要是用了一个 ",{"type":597,"tag":629,"props":38942,"children":38944},{"className":38943},[],[38945],{"type":603,"value":38946},"AsyncLocal\u003CHttpContext>",{"type":603,"value":38948}," 来保存一个 HttpContext 实例，那么 Accessor 是什么时候被赋值的呢？答案就是在每次 HTTP 请求的时候会将其赋值。",{"type":597,"tag":606,"props":38950,"children":38951},{},[38952,38958,38960,38965],{"type":597,"tag":629,"props":38953,"children":38955},{"className":38954},[],[38956],{"type":603,"value":38957},"AsyncLocal\u003CT>",{"type":603,"value":38959}," 是什么东西？\n",{"type":597,"tag":629,"props":38961,"children":38963},{"className":38962},[],[38964],{"type":603,"value":38957},{"type":603,"value":38966}," 是在 .Net 4.6 之后推出的一个对象，该对象接受一个泛型参数，其主要作用是保存异步等待上下文中共享某个变量的值。\n而异步方法是基于 Task 的自动线程调度，在异步上下文切换的时候可能导致数据丢失。例如在 await 调用之前对某个变量进行了赋值，而这个变量是多个线程间共享的，当 await 调用返回之前的调用点的时候，可能调用点之后的代码还处在之前的线程上，也有可能被调度到其他线程上。",{"type":597,"tag":606,"props":38968,"children":38969},{},[38970],{"type":603,"value":38971},"举个例子：",{"type":597,"tag":621,"props":38973,"children":38975},{"code":38974},"static async Task TestMethod() {\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n    await Task.Delay(100);\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n}\n",[38976],{"type":597,"tag":629,"props":38977,"children":38978},{"__ignoreMap":591},[38979],{"type":603,"value":38974},{"type":597,"tag":606,"props":38981,"children":38982},{},[38983],{"type":603,"value":38984},"在 await 等待任务执行完成之后，后面的代码输出的 ID 与调用之前的 ID 不一样，说明发生了线程切换：",{"type":597,"tag":621,"props":38986,"children":38988},{"code":38987},"\nstatic void Main(string[] args) {\n    Action @delegate = async () => await TestMethod();\n\n    @delegate();\n    Console.ReadKey();\n}\n",[38989],{"type":597,"tag":629,"props":38990,"children":38991},{"__ignoreMap":591},[38992],{"type":603,"value":38987},{"type":597,"tag":606,"props":38994,"children":38995},{},[38996,39001,39003,39009],{"type":597,"tag":719,"props":38997,"children":39000},{"alt":38998,"src":38999},"Img","/images/2020-08-11-httpcontextaccessor-asynclocal/5b2f1c93755a0.png",[],{"type":603,"value":39002},"\n从代码上看他们似乎在同一个线程，但是在执行的时候就已经发生了线程切换的操作了。\n而我们在这里如果使用一个 ",{"type":597,"tag":629,"props":39004,"children":39006},{"className":39005},[],[39007],{"type":603,"value":39008},"ThreadLocal\u003CT>",{"type":603,"value":39010},"变量来存储的话，会发生什么事情呢？",{"type":597,"tag":621,"props":39012,"children":39014},{"code":39013},"static ThreadLocal\u003Cint> _threadLocal = new ThreadLocal\u003Cint>();\nstatic AsyncLocal\u003Cint> _asyncLocal = new AsyncLocal\u003Cint>();\n\nstatic void Main(string[] args) {\n    Action @delegate = async () => await TestMethod();\n\n    @delegate();\n    Console.ReadKey();\n}\n\nstatic async Task TestMethod() {\n    _threadLocal.Value = 1000;\n    _asyncLocal.Value = 2000;\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n    Console.WriteLine($\"{nameof(_threadLocal)}，值:{_threadLocal.Value}\");\n    Console.WriteLine($\"{nameof(_asyncLocal)}，值:{_asyncLocal.Value}\");\n    await Task.Delay(100);\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n    Console.WriteLine($\"{nameof(_threadLocal)}，值:{_threadLocal.Value}\");\n    Console.WriteLine($\"{nameof(_asyncLocal)}，值:{_asyncLocal.Value}\");\n}\n",[39015],{"type":597,"tag":629,"props":39016,"children":39017},{"__ignoreMap":591},[39018],{"type":603,"value":39013},{"type":597,"tag":606,"props":39020,"children":39021},{},[39022,39026,39028,39034,39036,39041],{"type":597,"tag":719,"props":39023,"children":39025},{"alt":38998,"src":39024},"/images/2020-08-11-httpcontextaccessor-asynclocal/5b2f1c938eec4.png",[],{"type":603,"value":39027},"\nSO，在这里解释一下， ",{"type":597,"tag":629,"props":39029,"children":39031},{"className":39030},[],[39032],{"type":603,"value":39033},"ThreadLocal",{"type":603,"value":39035}," 是用于为不同的线程保存不同的变量值的，即同一个变量在不同线程当中存储的值可以不一样。在这里使用是为了保证在 TestMethod 方法中变量的唯一性，这个在同步方法用是没问题的，但这里使用了 await 关键字导致等待异步调用结束后代码已经被调度到其他的线程了，所以这里没用。而 ",{"type":597,"tag":629,"props":39037,"children":39039},{"className":39038},[],[39040],{"type":603,"value":38957},{"type":603,"value":39042}," 正是为了这种情况而准备的。",{"type":597,"tag":606,"props":39044,"children":39045},{},[39046],{"type":603,"value":39047},"这就解释了为什么是单例却在每个线程是不同的值.",{"title":591,"searchDepth":787,"depth":787,"links":39049},[],"content:dotnet:2020-08-11-httpcontextaccessor-asynclocal.md","dotnet/2020-08-11-httpcontextaccessor-asynclocal.md","2020-08-11",{"_path":113,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":112,"description":39054,"body":39055,"_type":791,"_id":39072,"_source":793,"_file":39073,"_extension":795,"date":39074},"可以通过反射获取这些特性然后做处理class Program\n{\n    static void Main(string[] args)\n    {\n        var message = new MessageData {\n\n            Header=\"header...\",\n            Body=\"body....\",\n            Footer=\"footer...\",\n        };\n\n        Type objT = typeof(Program);\n        Type fromBodyT = typeof(FromBodyAt",{"type":594,"children":39056,"toc":39070},[39057,39062],{"type":597,"tag":606,"props":39058,"children":39059},{},[39060],{"type":603,"value":39061},"可以通过反射获取这些特性然后做处理",{"type":597,"tag":621,"props":39063,"children":39065},{"code":39064},"class Program\n{\n    static void Main(string[] args)\n    {\n        var message = new MessageData {\n\n            Header=\"header...\",\n            Body=\"body....\",\n            Footer=\"footer...\",\n        };\n\n        Type objT = typeof(Program);\n        Type fromBodyT = typeof(FromBodyAttribute);\n        MethodInfo method = objT.GetMethod(\"Test\");\n\n        ParameterInfo[] paramsInfo = method.GetParameters();\n        var parameters= new List\u003Cobject>(paramsInfo.Length);\n        foreach (ParameterInfo parameterInfo in paramsInfo)\n        {\n            var parameter = new object();\n            if (parameterInfo.CustomAttributes.Any(i => i.AttributeType == fromBodyT))\n                parameter = message.Body;\n            parameters.Add(parameter);\n        }\n\n\n        object result = method.Invoke(null, parameters.ToArray());\n        Console.WriteLine(result);\n\n\n    }\n    public class FromBodyAttribute : Attribute\n    {\n    }\n    public static string Test([FromBody] string body)\n    {\n        return body;\n    }\n    class MessageData\n    {\n\n        public string Body { get; set; }\n        public string Header { get; set; }\n        public string Footer { get; set; }\n\n    }\n\n}\n",[39066],{"type":597,"tag":629,"props":39067,"children":39068},{"__ignoreMap":591},[39069],{"type":603,"value":39064},{"title":591,"searchDepth":787,"depth":787,"links":39071},[],"content:dotnet:2020-08-10-param-attribute.md","dotnet/2020-08-10-param-attribute.md","2020-08-10",{"_path":110,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":109,"description":39076,"body":39077,"_type":791,"_id":39182,"_source":793,"_file":39183,"_extension":795,"date":39184},"grain激活体是单线程的，默认情况下，激活体会自始至终地处理完成每个请求后，才会处理下一个请求。\n可重入的激活体，可以在上一个请求尚未完成处理的情况下，开始执行另一个请求。执行仍然限于单个线程，因此激活体仍然一次执行一个回合，并且每个回合仅代表激活体的一个请求执行。\n可重入的grain代码永远不会并行运行多段grain代码（grain代码的执行将始终是单线程的），但是，可重入的grain可能会看到不同请求交错执行的代码。也就是说，来自不同请求的延续回合，是交错执行的。",{"type":594,"children":39078,"toc":39179},[39079,39084,39088,39093,39099,39104,39109,39114,39119,39127,39132,39140,39145,39150,39163,39167],{"type":597,"tag":857,"props":39080,"children":39082},{"id":39081},"重入",[39083],{"type":603,"value":39081},{"type":597,"tag":606,"props":39085,"children":39086},{},[39087],{"type":603,"value":39076},{"type":597,"tag":606,"props":39089,"children":39090},{},[39091],{"type":603,"value":39092},"因为访问grain一般是需要跨服务器的，所以可重入是很有必要的。。",{"type":597,"tag":857,"props":39094,"children":39096},{"id":39095},"无状态grain",[39097],{"type":603,"value":39098},"无状态Grain",{"type":597,"tag":606,"props":39100,"children":39101},{},[39102],{"type":603,"value":39103},"grain永远是运行在服务端的,包括无状态的.",{"type":597,"tag":857,"props":39105,"children":39107},{"id":39106},"time",[39108],{"type":603,"value":39106},{"type":597,"tag":606,"props":39110,"children":39111},{},[39112],{"type":603,"value":39113},"time是单线程的..",{"type":597,"tag":598,"props":39115,"children":39117},{"id":39116},"错误",[39118],{"type":603,"value":39116},{"type":597,"tag":621,"props":39120,"children":39122},{"code":39121},"        public override async Task OnActivateAsync()\n        {\n\n            if (this.TimerDisposable == null)\n            {\n                this.TimerDisposable = RegisterTimer(\n                            this.SaveChanges,\n                            \"timer\",\n                            TimeSpan.FromMilliseconds(0),\n                            TimeSpan.FromMilliseconds(1)\n                            );\n            }\n\n            await base.OnActivateAsync();\n        }\n\n\n\n        private Task SaveChanges(object arg)\n        {\n            this.persisitent.State.num++;\n\n            return this.persisitent.WriteStateAsync();\n        }\n\n        public async Task StartUp()\n        {\n            this.persisitent.State.num = 0;\n            await this.WriteStateAsync();\n        }\n        \n        \n           var grain = this.GrainFactory.GetGrain\u003CITimeTestGrain>(1000);\n\n            await grain.StartUp();\n        \n",[39123],{"type":597,"tag":629,"props":39124,"children":39125},{"__ignoreMap":591},[39126],{"type":603,"value":39121},{"type":597,"tag":606,"props":39128,"children":39129},{},[39130],{"type":603,"value":39131},"以上代码当duetime设置为0的时候,会有类型的错误",{"type":597,"tag":621,"props":39133,"children":39135},{"code":39134},"Orleans.Storage.InconsistentStateException: ETag mismatch - tried with ETag: a62ea0e1-a40d-43c3-a508-1e8615351443\n",[39136],{"type":597,"tag":629,"props":39137,"children":39138},{"__ignoreMap":591},[39139],{"type":603,"value":39134},{"type":597,"tag":606,"props":39141,"children":39142},{},[39143],{"type":603,"value":39144},"原因猜测,grain未激活完成的时候,如果为0的时候,这个时候time的callback(SaveChanges)还没有加入到任务队列,就调用了state,而之后也立即同时调用了state这个时候就会报错.",{"type":597,"tag":606,"props":39146,"children":39147},{},[39148],{"type":603,"value":39149},"解决方案:",{"type":597,"tag":1321,"props":39151,"children":39152},{},[39153,39158],{"type":597,"tag":807,"props":39154,"children":39155},{},[39156],{"type":603,"value":39157},"不要设置duetime为0",{"type":597,"tag":807,"props":39159,"children":39160},{},[39161],{"type":603,"value":39162},"或者不要在OnActivateAsync中RegisterTimer,在Activate后再RegisterTimer",{"type":597,"tag":857,"props":39164,"children":39165},{"id":32788},[39166],{"type":603,"value":32788},{"type":597,"tag":1321,"props":39168,"children":39169},{},[39170],{"type":597,"tag":807,"props":39171,"children":39172},{},[39173],{"type":597,"tag":886,"props":39174,"children":39177},{"href":39175,"rel":39176},"https://dotnet.github.io/orleans/Documentation/resources/Best_Practices.html",[890],[39178],{"type":603,"value":39175},{"title":591,"searchDepth":787,"depth":787,"links":39180},[39181],{"id":39116,"depth":787,"text":39116},"content:dotnet:2020-08-09-Orleans-Best-Practices.md","dotnet/2020-08-09-Orleans-Best-Practices.md","2020-08-09",{"_path":107,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":106,"description":39186,"body":39187,"_type":791,"_id":39569,"_source":793,"_file":39570,"_extension":795,"date":39571},"abp是依托与aspnetcore的.我们先来看看aspnetcore是怎么实现的",{"type":594,"children":39188,"toc":39558},[39189,39193,39197,39205,39210,39255,39266,39271,39280,39285,39294,39305,39310,39315,39320,39325,39336,39348,39355,39361,39425,39453,39458,39463,39471,39476,39484,39489,39494,39507,39532,39537,39545,39550],{"type":597,"tag":857,"props":39190,"children":39191},{"id":106},[39192],{"type":603,"value":106},{"type":597,"tag":606,"props":39194,"children":39195},{},[39196],{"type":603,"value":39186},{"type":597,"tag":621,"props":39198,"children":39200},{"code":39199},"\n    services.Configure\u003CRequestLocalizationOptions>(options =>\n        {\n            var supportedCultures = new List\u003CCultureInfo>\n            {\n                new CultureInfo(\"en-US\"),\n                new CultureInfo(\"en\"),\n                new CultureInfo(\"fr-FR\"),\n                new CultureInfo(\"fr\")\n            };\n\n            options.DefaultRequestCulture = new RequestCulture(\"en-US\");\n            options.SupportedCultures = supportedCultures;\n            options.SupportedUICultures = supportedCultures;\n        });\n        \n        \n        //中间件\n        app.UseRequestLocalization();\n",[39201],{"type":597,"tag":629,"props":39202,"children":39203},{"__ignoreMap":591},[39204],{"type":603,"value":39199},{"type":597,"tag":598,"props":39206,"children":39208},{"id":39207},"中间件request的语言判断",[39209],{"type":603,"value":39207},{"type":597,"tag":606,"props":39211,"children":39212},{},[39213,39215,39222,39223,39230,39232,39237,39239,39245,39247,39253],{"type":603,"value":39214},"在每次请求里 ",{"type":597,"tag":886,"props":39216,"children":39219},{"href":39217,"rel":39218},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNet/Localization/RequestLocalizationOptions/index.html",[890],[39220],{"type":603,"value":39221},"RequestLocalizationOptions",{"type":603,"value":26330},{"type":597,"tag":886,"props":39224,"children":39227},{"href":39225,"rel":39226},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/RequestCultureProvider/index.html",[890],[39228],{"type":603,"value":39229},"RequestCultureProvider",{"type":603,"value":39231}," 列表会被遍历，第一个provider 会被使用来判断请求使用的文化。默认的 provider 来自",{"type":597,"tag":629,"props":39233,"children":39235},{"className":39234},[],[39236],{"type":603,"value":39221},{"type":603,"value":39238}," 类,如果没有非空的 provider，",{"type":597,"tag":629,"props":39240,"children":39242},{"className":39241},[],[39243],{"type":603,"value":39244},"DefaultRequestCulture",{"type":603,"value":39246}," 被使用。所以如果发现语言不是按照逻辑顺序显示,先检查请求网址,再检查",{"type":597,"tag":629,"props":39248,"children":39250},{"className":39249},[],[39251],{"type":603,"value":39252},"cookie",{"type":603,"value":39254},"(很难注意到),最后检查acceptlanguage",{"type":597,"tag":1023,"props":39256,"children":39258},{"id":39257},"querystringrequestcultureprovider",[39259],{"type":597,"tag":886,"props":39260,"children":39263},{"href":39261,"rel":39262},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/QueryStringRequestCultureProvider/index.html",[890],[39264],{"type":603,"value":39265},"QueryStringRequestCultureProvider",{"type":597,"tag":606,"props":39267,"children":39268},{},[39269],{"type":603,"value":39270},"下面的例子指定了具体的区域性（语言和区域）设置为西班牙语/墨西哥：",{"type":597,"tag":606,"props":39272,"children":39273},{},[39274],{"type":597,"tag":886,"props":39275,"children":39278},{"href":39276,"rel":39277},"http://localhost:5000/?culture=es-MX&ui-culture=es-MX",[890],[39279],{"type":603,"value":39276},{"type":597,"tag":606,"props":39281,"children":39282},{},[39283],{"type":603,"value":39284},"如果你仅仅使用（culture 或者 ui-culture）中的一个参数进行传递，查询字符串 provider 将使用你传递一个值来设置这两个参数。例如，仅设置culture，将会同样设置 Culture 和 UICulture：",{"type":597,"tag":606,"props":39286,"children":39287},{},[39288],{"type":597,"tag":886,"props":39289,"children":39292},{"href":39290,"rel":39291},"http://localhost:5000/?culture=es-MX",[890],[39293],{"type":603,"value":39290},{"type":597,"tag":1023,"props":39295,"children":39297},{"id":39296},"cookierequestcultureprovider",[39298],{"type":597,"tag":886,"props":39299,"children":39302},{"href":39300,"rel":39301},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/CookieRequestCultureProvider/index.html",[890],[39303],{"type":603,"value":39304},"CookieRequestCultureProvider",{"type":597,"tag":606,"props":39306,"children":39307},{},[39308],{"type":603,"value":39309},"CookieRequestCultureProvider 的 DefaultCookieName 返回用于跟踪用户的首选区域性信息默认的 Cookie 名称。默认的 Cookie 名称是 “.AspNetCore.Culture”。",{"type":597,"tag":606,"props":39311,"children":39312},{},[39313],{"type":603,"value":39314},"cookie 的格式是 c=%LANGCODE%|uic=%LANGCODE%, c 为区域信息 和 uic 为 UI 区域信息，例如：",{"type":597,"tag":606,"props":39316,"children":39317},{},[39318],{"type":603,"value":39319},"c=’en-UK’|uic=’en-US’",{"type":597,"tag":606,"props":39321,"children":39322},{},[39323],{"type":603,"value":39324},"如果仅指定 culture 或 UI culture中的一个，指定的区域性信息将同时用于 culture和 UI culture。",{"type":597,"tag":1023,"props":39326,"children":39328},{"id":39327},"acceptlanguageheaderrequestcultureprovider",[39329],{"type":597,"tag":886,"props":39330,"children":39333},{"href":39331,"rel":39332},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/AcceptLanguageHeaderRequestCultureProvider/index.html",[890],[39334],{"type":603,"value":39335},"AcceptLanguageHeaderRequestCultureProvider",{"type":597,"tag":606,"props":39337,"children":39338},{},[39339,39341,39346],{"type":603,"value":39340},"这个一般是根据浏览器的设置进行访问的\n",{"type":597,"tag":719,"props":39342,"children":39345},{"alt":39343,"src":39344},"image-20200719113919074","/images/2020-07-15-abp-default-language/image-20200719113919074.png",[],{"type":603,"value":39347},"\n不同的浏览器默认语言不同,chrome浏览器可以再语言里设置",{"type":597,"tag":606,"props":39349,"children":39350},{},[39351],{"type":597,"tag":719,"props":39352,"children":39354},{"alt":719,"src":39353},"/images/2020-07-15-abp-default-language/c83d70cf3bc79f3d3ec73c6db4a1cd11728b294d.png",[],{"type":597,"tag":598,"props":39356,"children":39358},{"id":39357},"cultures",[39359],{"type":603,"value":39360},"Cultures",{"type":597,"tag":1321,"props":39362,"children":39363},{},[39364,39392],{"type":597,"tag":807,"props":39365,"children":39366},{},[39367,39373,39374,39381,39383,39390],{"type":597,"tag":629,"props":39368,"children":39370},{"className":39369},[],[39371],{"type":603,"value":39372},"SupportedCultures",{"type":603,"value":26330},{"type":597,"tag":886,"props":39375,"children":39378},{"href":39376,"rel":39377},"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo(v=vs.110).aspx",[890],[39379],{"type":603,"value":39380},"CultureInfo",{"type":603,"value":39382}," 对象决定了和文化相关的函数，如日期，时间，数字和货币格式的结果。同时决定了文字如何排序，大小写转换以及字符串比较。参考",{"type":597,"tag":886,"props":39384,"children":39387},{"href":39385,"rel":39386},"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.currentculture(v=vs.110).aspx",[890],[39388],{"type":603,"value":39389},"CultureInfo.CurrentCulture",{"type":603,"value":39391}," 获取更多关于服务器如何获取文化的信息。",{"type":597,"tag":807,"props":39393,"children":39394},{},[39395,39401,39403,39410,39412,39417,39419,39423],{"type":597,"tag":629,"props":39396,"children":39398},{"className":39397},[],[39399],{"type":603,"value":39400},"SupportedUICultures",{"type":603,"value":39402}," 决定如何通过 ",{"type":597,"tag":886,"props":39404,"children":39407},{"href":39405,"rel":39406},"https://msdn.microsoft.com/en-us/library/system.resources.resourcemanager(v=vs.110).aspx",[890],[39408],{"type":603,"value":39409},"ResourceManager",{"type":603,"value":39411}," 查找翻译字符串（从 ",{"type":597,"tag":1733,"props":39413,"children":39414},{},[39415],{"type":603,"value":39416},".resx",{"type":603,"value":39418}," 文件）。 ",{"type":597,"tag":1733,"props":39420,"children":39421},{},[39422],{"type":603,"value":39409},{"type":603,"value":39424}," 只是通过 CurrentUICulture 简单的查找指定文化的字符串。",{"type":597,"tag":606,"props":39426,"children":39427},{},[39428,39430,39436,39437,39443,39445,39451],{"type":603,"value":39429},".NET 的每个线程都会拥有 ",{"type":597,"tag":629,"props":39431,"children":39433},{"className":39432},[],[39434],{"type":603,"value":39435},"CurrentCulture",{"type":603,"value":12404},{"type":597,"tag":629,"props":39438,"children":39440},{"className":39439},[],[39441],{"type":603,"value":39442},"CurrentUICulture",{"type":603,"value":39444}," 对象。当 ASP.NET Core 在渲染与文化相关的函数的时候会检视这些对象值。例如，如果当前线程的区域性设置为 “en-US” （英语、美国）， ",{"type":597,"tag":629,"props":39446,"children":39448},{"className":39447},[],[39449],{"type":603,"value":39450},"DateTime.Now.ToLongDateString() \"Thursday, February 18, 2016\"",{"type":603,"value":39452}," ，但如果 CurrentCulture 设置为 “es-ES”（西班牙语、西班牙），输出将会是 “jueves, 18 de febrero de 2016”。",{"type":597,"tag":598,"props":39454,"children":39456},{"id":39455},"abp的实现",[39457],{"type":603,"value":39455},{"type":597,"tag":606,"props":39459,"children":39460},{},[39461],{"type":603,"value":39462},"Volo.Abp.AspNetCore项目中DefaultAbpRequestLocalizationOptionsProvider.cs",{"type":597,"tag":621,"props":39464,"children":39466},{"code":39465},"#GetLocalizationOptionsAsync()\n#根据设置获取默认语言,如果默认语言为en\nvar languages = await languageProvider.GetLanguagesAsync();\nvar defaultLanguage = await settingProvider.GetOrNullAsync(LocalizationSettingNames.DefaultLanguage);\n\nvar options = !languages.Any()\n? new RequestLocalizationOptions()\n: new RequestLocalizationOptions\n{\nDefaultRequestCulture = DefaultGetRequestCulture(defaultLanguage, languages),\n\nSupportedCultures = languages\n.Select(l => l.CultureName)\n.Distinct()\n.Select(c => new CultureInfo(c))\n.ToArray(),\n\nSupportedUICultures = languages\n.Select(l => l.UiCultureName)\n.Distinct()\n.Select(c => new CultureInfo(c))\n.ToArray()\n};\n\n#如果设置中的默认语言不存在,则选取第一个语言作为默认语言\nprivate static RequestCulture DefaultGetRequestCulture(string defaultLanguage, IReadOnlyList\u003CLanguageInfo> languages)\n{\n    if (defaultLanguage == null)\n    {\n    var firstLanguage = languages.First();\n    return new RequestCulture(firstLanguage.CultureName, firstLanguage.UiCultureName);\n    }\n\n    var (cultureName, uiCultureName) = LocalizationSettingHelper.ParseLanguageSetting(defaultLanguage);\n    return new RequestCulture(cultureName, uiCultureName);\n}\n",[39467],{"type":597,"tag":629,"props":39468,"children":39469},{"__ignoreMap":591},[39470],{"type":603,"value":39465},{"type":597,"tag":606,"props":39472,"children":39473},{},[39474],{"type":603,"value":39475},"然后中间件是",{"type":597,"tag":621,"props":39477,"children":39479},{"code":39478},"app.UseAbpRequestLocalization();\n",[39480],{"type":597,"tag":629,"props":39481,"children":39482},{"__ignoreMap":591},[39483],{"type":603,"value":39478},{"type":597,"tag":606,"props":39485,"children":39486},{},[39487],{"type":603,"value":39488},"中间件使用的是AbpRequestLocalizationMiddleware,其实它只是对aspnetcore的RequestLocalizationMiddleware进行了一层包装",{"type":597,"tag":1023,"props":39490,"children":39492},{"id":39491},"如何修改默认语言",[39493],{"type":603,"value":39491},{"type":597,"tag":606,"props":39495,"children":39496},{},[39497,39499,39505],{"type":603,"value":39498},"首先注意浏览器发送的中文的",{"type":597,"tag":629,"props":39500,"children":39502},{"className":39501},[],[39503],{"type":603,"value":39504},"accept-language",{"type":603,"value":39506},"的值与ABP值是不一样的:",{"type":597,"tag":1321,"props":39508,"children":39509},{},[39510,39521],{"type":597,"tag":807,"props":39511,"children":39512},{},[39513,39515],{"type":603,"value":39514},"浏览器(如Chrome)的值为",{"type":597,"tag":629,"props":39516,"children":39518},{"className":39517},[],[39519],{"type":603,"value":39520},"zh-CN",{"type":597,"tag":807,"props":39522,"children":39523},{},[39524,39526],{"type":603,"value":39525},"而ABP的简体中文的值为",{"type":597,"tag":629,"props":39527,"children":39529},{"className":39528},[],[39530],{"type":603,"value":39531},"zh-Hans",{"type":597,"tag":606,"props":39533,"children":39534},{},[39535],{"type":603,"value":39536},"首先修改配置文件appsettings.json",{"type":597,"tag":621,"props":39538,"children":39540},{"code":39539},"\"Settings\": {\n    \"Abp.Localization.DefaultLanguage\": \"zh-Hans\"\n}\n",[39541],{"type":597,"tag":629,"props":39542,"children":39543},{"__ignoreMap":591},[39544],{"type":603,"value":39539},{"type":597,"tag":606,"props":39546,"children":39547},{},[39548],{"type":603,"value":39549},"然后在中间件中删除AcceptLanguageHeaderRequestCultureProvider",{"type":597,"tag":621,"props":39551,"children":39553},{"code":39552},"app.UseAbpRequestLocalization(options =>\n    {\n        options.RequestCultureProviders.RemoveAll(provider => provider is AcceptLanguageHeaderRequestCultureProvider);\n    }\n);\n",[39554],{"type":597,"tag":629,"props":39555,"children":39556},{"__ignoreMap":591},[39557],{"type":603,"value":39552},{"title":591,"searchDepth":787,"depth":787,"links":39559},[39560,39565,39566],{"id":39207,"depth":787,"text":39207,"children":39561},[39562,39563,39564],{"id":39257,"depth":1530,"text":39265},{"id":39296,"depth":1530,"text":39304},{"id":39327,"depth":1530,"text":39335},{"id":39357,"depth":787,"text":39360},{"id":39455,"depth":787,"text":39455,"children":39567},[39568],{"id":39491,"depth":1530,"text":39491},"content:dotnet:2020-07-15-abp-default-language.md","dotnet/2020-07-15-abp-default-language.md","2020-07-15",{"_path":318,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":317,"description":39573,"body":39574,"_type":791,"_id":39639,"_source":793,"_file":39640,"_extension":795,"date":39641},"cmdcmd命令行:(不用socks5)(临时设置)(也可放置环境变量)\nset http_proxy=http://127.0.0.1:1080\nset https_proxy=http://127.0.0.1:1080\npowershell$env:http_proxy=\"http://127.0.0.1:1080\"\n$env:https_proxy=\"http://127.0.0.1:1080\"\ncurl -vv http://www.google.com\nlinuxexport http_proxy=127.0.0.1:1080\nexport ftp_proxy=127.0.0.1:1",{"type":594,"children":39575,"toc":39637},[39576,39581,39589,39594,39602,39610,39615,39623,39629],{"type":597,"tag":857,"props":39577,"children":39579},{"id":39578},"cmd",[39580],{"type":603,"value":39578},{"type":597,"tag":621,"props":39582,"children":39584},{"code":39583},"cmd命令行:(不用socks5)(临时设置)(也可放置环境变量)\nset http_proxy=http://127.0.0.1:1080\nset https_proxy=http://127.0.0.1:1080\n",[39585],{"type":597,"tag":629,"props":39586,"children":39587},{"__ignoreMap":591},[39588],{"type":603,"value":39583},{"type":597,"tag":857,"props":39590,"children":39592},{"id":39591},"powershell",[39593],{"type":603,"value":39591},{"type":597,"tag":621,"props":39595,"children":39597},{"code":39596},"$env:http_proxy=\"http://127.0.0.1:1080\"\n$env:https_proxy=\"http://127.0.0.1:1080\"\ncurl -vv http://www.google.com\n",[39598],{"type":597,"tag":629,"props":39599,"children":39600},{"__ignoreMap":591},[39601],{"type":603,"value":39596},{"type":597,"tag":606,"props":39603,"children":39604},{},[39605],{"type":597,"tag":719,"props":39606,"children":39609},{"alt":39607,"src":39608},"image-20200716004313442","/images/2020-07-13-cons/image-20200716004313442.png",[],{"type":597,"tag":857,"props":39611,"children":39613},{"id":39612},"linux",[39614],{"type":603,"value":39612},{"type":597,"tag":621,"props":39616,"children":39618},{"code":39617},"export http_proxy=127.0.0.1:1080\nexport ftp_proxy=127.0.0.1:1080\nexport https_proxy=127.0.0.1:1080\n",[39619],{"type":597,"tag":629,"props":39620,"children":39621},{"__ignoreMap":591},[39622],{"type":603,"value":39617},{"type":597,"tag":857,"props":39624,"children":39626},{"id":39625},"git",[39627],{"type":603,"value":39628},"GIT",{"type":597,"tag":621,"props":39630,"children":39632},{"code":39631},"git config --global https.proxy http://127.0.0.1:1080\ngit config --global https.proxy http://127.0.0.1:1080\n",[39633],{"type":597,"tag":629,"props":39634,"children":39635},{"__ignoreMap":591},[39636],{"type":603,"value":39631},{"title":591,"searchDepth":787,"depth":787,"links":39638},[],"content:tool:2020-07-13-terminal-proxy.md","tool/2020-07-13-terminal-proxy.md","2020-07-13",{"_path":315,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":314,"description":39643,"body":39644,"_type":791,"_id":39697,"_source":793,"_file":39698,"_extension":795,"date":39699},"使用hexo#安装hexo\nnpm install -g hexo-cli\nhexo -v\n\n# 初始化一个博客\ncd igiven.github.io\nhexo init\n\n#添加主题\ngit submodule add https://github.com/theme-next/hexo-theme-next themes/next\ngit submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus\n\n#添加插件https://github.com/sisyphsu/hexo-enhancer#",{"type":594,"children":39645,"toc":39694},[39646,39651,39659,39665,39670,39678,39686],{"type":597,"tag":857,"props":39647,"children":39649},{"id":39648},"使用hexo",[39650],{"type":603,"value":39648},{"type":597,"tag":621,"props":39652,"children":39654},{"code":39653},"#安装hexo\nnpm install -g hexo-cli\nhexo -v\n\n# 初始化一个博客\ncd igiven.github.io\nhexo init\n\n#添加主题\ngit submodule add https://github.com/theme-next/hexo-theme-next themes/next\ngit submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus\n\n#添加插件https://github.com/sisyphsu/hexo-enhancer#readme\n#如果不能生成,则删除db.json  ..或者hexo clean\nyarn add hexo-enhancer\nyarn add hexo-excerpt\n#本地服务器\nhexo s  \n",[39655],{"type":597,"tag":629,"props":39656,"children":39657},{"__ignoreMap":591},[39658],{"type":603,"value":39653},{"type":597,"tag":598,"props":39660,"children":39662},{"id":39661},"github-actions",[39663],{"type":603,"value":39664},"GITHUB ACTIONS",{"type":597,"tag":606,"props":39666,"children":39667},{},[39668],{"type":603,"value":39669},"添加此action前记得先添加分支gh-pages,并设置github的pages为该分支",{"type":597,"tag":621,"props":39671,"children":39673},{"code":39672},"git checkout --orphan gh-pages\n# .nojekyll 的空文件来禁用 Jekyll 构建过程，然后按照静态站点生成器的说明在 本地构建站点。\ntouch .nojekyll\n",[39674],{"type":597,"tag":629,"props":39675,"children":39676},{"__ignoreMap":591},[39677],{"type":603,"value":39672},{"type":597,"tag":606,"props":39679,"children":39680},{},[39681],{"type":597,"tag":719,"props":39682,"children":39685},{"alt":39683,"src":39684},"image-20200715164950805","/images/2020-07-12-hexo-github/image-20200715164950805.png",[],{"type":597,"tag":621,"props":39687,"children":39689},{"code":39688},"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装hexo\n      run : |\n        npm install -g hexo\n  \n    - name: 生成博客\n      run : |\n        cd main\n        npm install\n        hexo clean\n        hexo generate\n        ls\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/public/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n",[39690],{"type":597,"tag":629,"props":39691,"children":39692},{"__ignoreMap":591},[39693],{"type":603,"value":39688},{"title":591,"searchDepth":787,"depth":787,"links":39695},[39696],{"id":39661,"depth":787,"text":39664},"content:tool:2020-07-12-hexo-github.md","tool/2020-07-12-hexo-github.md","2020-07-12",{"_path":312,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":311,"description":39701,"body":39702,"_type":791,"_id":40507,"_source":793,"_file":40508,"_extension":795,"date":40509},"如果你是一个前端项目，可以使用 Node.js 的模板，点击 Set up this workflow",{"type":594,"children":39703,"toc":40505},[39704,39709,39728,39736,39749,39758,39786,39791,39812,39839,39847,39856,39899,40019,40036,40042,40068,40073,40107,40134,40155,40205,40218,40226,40231,40419,40424,40432,40438,40447,40455,40461,40469,40474,40482,40487,40496],{"type":597,"tag":857,"props":39705,"children":39707},{"id":39706},"快速开始",[39708],{"type":603,"value":39706},{"type":597,"tag":606,"props":39710,"children":39711},{},[39712,39714,39720,39722],{"type":603,"value":39713},"如果你是一个前端项目，可以使用 ",{"type":597,"tag":629,"props":39715,"children":39717},{"className":39716},[],[39718],{"type":603,"value":39719},"Node.js",{"type":603,"value":39721}," 的模板，点击 ",{"type":597,"tag":629,"props":39723,"children":39725},{"className":39724},[],[39726],{"type":603,"value":39727},"Set up this workflow",{"type":597,"tag":606,"props":39729,"children":39730},{},[39731],{"type":597,"tag":719,"props":39732,"children":39735},{"alt":39733,"src":39734},"v2-93f521330d963d903561c0575d2d8fac_720w","/images/2020-07-11-github-actions/v2-93f521330d963d903561c0575d2d8fac_720w.jpg",[],{"type":597,"tag":606,"props":39737,"children":39738},{},[39739,39741,39747],{"type":603,"value":39740},"此时生成了一个文件 ",{"type":597,"tag":629,"props":39742,"children":39744},{"className":39743},[],[39745],{"type":603,"value":39746},".github/workflows/nodejs.yaml",{"type":603,"value":39748},"，修改内容如下",{"type":597,"tag":621,"props":39750,"children":39753},{"code":39751,"language":603,"meta":591,"className":39752},"name: Git Action Test\n# on: 用来指定启动触发的事件，push 则表示在监听到 git push 到指定分支时触发。如此之外还可以是 pull_request。\non: [push]   \n\n#jobs:一个 CI/CD 的工作流有许多 jobs 组成，比如最典型的 job 是 lint，test，build 或者 deploy。\n#所有的 job 都是并行的,如果想顺序执行，可以这样 build-job: needs: test-job。\njobs:         \n  build:\n    #runs-on用来指定执行系统环境，不仅有常用的 Linux 发行版，还可以是 macOS 或 Windows。\n    runs-on: ubuntu-latest  \n    # steps 表示每个 job 需要执行的步骤，比如这里我分成了四步：拉取分支 → 安装 Node 环境 → 构建项目 → 上传 COS。\n    steps:  \n    #Action 是组成工作流最核心最基础的元素。每个 Action 可以看作封装的独立脚本，有自己的操作逻辑，我们只需要 uses 并通过 with 传入参数即可。\n    - uses: actions/checkout@v1 \n    - name: Use Node.js 10.x\n      uses: actions/setup-node@v1\n      with:\n        node-version: 10.x\n    - name: npm install, build\n      run: |\n        npm install\n        npm run build --if-present\n      env:\n        CI: true\n",[29933],[39754],{"type":597,"tag":629,"props":39755,"children":39756},{"__ignoreMap":591},[39757],{"type":603,"value":39751},{"type":597,"tag":606,"props":39759,"children":39760},{},[39761,39763,39769,39771,39777,39778,39784],{"type":603,"value":39762},"执行 ",{"type":597,"tag":629,"props":39764,"children":39766},{"className":39765},[],[39767],{"type":603,"value":39768},"git push",{"type":603,"value":39770}," 操作，此时可以在 ",{"type":597,"tag":629,"props":39772,"children":39774},{"className":39773},[],[39775],{"type":603,"value":39776},"github",{"type":603,"value":26330},{"type":597,"tag":629,"props":39779,"children":39781},{"className":39780},[],[39782],{"type":603,"value":39783},"Actions",{"type":603,"value":39785}," 标签页看到执行结果",{"type":597,"tag":857,"props":39787,"children":39789},{"id":39788},"安全相关",[39790],{"type":603,"value":39788},{"type":597,"tag":606,"props":39792,"children":39793},{},[39794,39796,39802,39804,39810],{"type":603,"value":39795},"如何在 ",{"type":597,"tag":629,"props":39797,"children":39799},{"className":39798},[],[39800],{"type":603,"value":39801},"github action",{"type":603,"value":39803}," 上访问敏感数据？如使用 ",{"type":597,"tag":629,"props":39805,"children":39807},{"className":39806},[],[39808],{"type":603,"value":39809},"ssh",{"type":603,"value":39811}," 登录时如何维护密码。",{"type":597,"tag":606,"props":39813,"children":39814},{},[39815,39817,39823,39825,39831,39833],{"type":603,"value":39816},"我们可以在 github repo 上依次点击 ",{"type":597,"tag":629,"props":39818,"children":39820},{"className":39819},[],[39821],{"type":603,"value":39822},"Settings",{"type":603,"value":39824}," -> ",{"type":597,"tag":629,"props":39826,"children":39828},{"className":39827},[],[39829],{"type":603,"value":39830},"Secrets",{"type":603,"value":39832}," 设置 ",{"type":597,"tag":629,"props":39834,"children":39836},{"className":39835},[],[39837],{"type":603,"value":39838},"secret",{"type":597,"tag":606,"props":39840,"children":39841},{},[39842],{"type":597,"tag":719,"props":39843,"children":39846},{"alt":39844,"src":39845},"v2-51c0ee11b4bc61312d8e1af14d906432_720w","/images/2020-07-11-github-actions/v2-51c0ee11b4bc61312d8e1af14d906432_720w.jpg",[],{"type":597,"tag":621,"props":39848,"children":39851},{"code":39849,"language":603,"meta":591,"className":39850},"- name: setup aliyun oss\n  uses: manyuanrong/setup-ossutil@master\n  with:\n    endpoint: oss-cn-beijing.aliyuncs.com\n    access-key-id: ${{ secrets.OSS_KEY_ID }}\n    access-key-secret: ${{ secrets.OSS_KEY_SECRET }}\n",[29933],[39852],{"type":597,"tag":629,"props":39853,"children":39854},{"__ignoreMap":591},[39855],{"type":603,"value":39849},{"type":597,"tag":606,"props":39857,"children":39858},{},[39859,39861,39866,39868,39874,39876,39882,39884,39890,39892,39897],{"type":603,"value":39860},"这里的 ",{"type":597,"tag":629,"props":39862,"children":39864},{"className":39863},[],[39865],{"type":603,"value":39838},{"type":603,"value":39867}," 就是一种 ",{"type":597,"tag":629,"props":39869,"children":39871},{"className":39870},[],[39872],{"type":603,"value":39873},"context",{"type":603,"value":39875},"，描述 CI/CD 一个 ",{"type":597,"tag":629,"props":39877,"children":39879},{"className":39878},[],[39880],{"type":603,"value":39881},"workflow",{"type":603,"value":39883}," 中的上下文信息，使用 ",{"type":597,"tag":629,"props":39885,"children":39887},{"className":39886},[],[39888],{"type":603,"value":39889},"${{ expression }}",{"type":603,"value":39891}," 语法表示。除了 ",{"type":597,"tag":629,"props":39893,"children":39895},{"className":39894},[],[39896],{"type":603,"value":39838},{"type":603,"value":39898},"，还有",{"type":597,"tag":1321,"props":39900,"children":39901},{},[39902,39950,39961,39993],{"type":597,"tag":807,"props":39903,"children":39904},{},[39905,39910,39912,39917,39919,39925,39927,39933,39935,39941,39942,39948],{"type":597,"tag":629,"props":39906,"children":39908},{"className":39907},[],[39909],{"type":603,"value":39776},{"type":603,"value":39911},": ",{"type":597,"tag":629,"props":39913,"children":39915},{"className":39914},[],[39916],{"type":603,"value":39881},{"type":603,"value":39918}," 的信息，如 ",{"type":597,"tag":629,"props":39920,"children":39922},{"className":39921},[],[39923],{"type":603,"value":39924},"github.sha",{"type":603,"value":39926}," 可以获取当前的 ",{"type":597,"tag":629,"props":39928,"children":39930},{"className":39929},[],[39931],{"type":603,"value":39932},"commit SHA",{"type":603,"value":39934},"，我们可以利用它为 ",{"type":597,"tag":629,"props":39936,"children":39938},{"className":39937},[],[39939],{"type":603,"value":39940},"sentry",{"type":603,"value":27152},{"type":597,"tag":629,"props":39943,"children":39945},{"className":39944},[],[39946],{"type":603,"value":39947},"docker image",{"type":603,"value":39949}," 打入版本号",{"type":597,"tag":807,"props":39951,"children":39952},{},[39953,39959],{"type":597,"tag":629,"props":39954,"children":39956},{"className":39955},[],[39957],{"type":603,"value":39958},"env",{"type":603,"value":39960},": 环境变量",{"type":597,"tag":807,"props":39962,"children":39963},{},[39964,39970,39972,39977,39978,39984,39986,39991],{"type":597,"tag":629,"props":39965,"children":39967},{"className":39966},[],[39968],{"type":603,"value":39969},"job",{"type":603,"value":39971},": 当前执行 ",{"type":597,"tag":629,"props":39973,"children":39975},{"className":39974},[],[39976],{"type":603,"value":39969},{"type":603,"value":39918},{"type":597,"tag":629,"props":39979,"children":39981},{"className":39980},[],[39982],{"type":603,"value":39983},"job.status",{"type":603,"value":39985}," 表示当前 ",{"type":597,"tag":629,"props":39987,"children":39989},{"className":39988},[],[39990],{"type":603,"value":39969},{"type":603,"value":39992}," 的执行状态",{"type":597,"tag":807,"props":39994,"children":39995},{},[39996,40002,40004,40010,40011,40017],{"type":597,"tag":629,"props":39997,"children":39999},{"className":39998},[],[40000],{"type":603,"value":40001},"matrix",{"type":603,"value":40003},": 描述一些构建信息，如 ",{"type":597,"tag":629,"props":40005,"children":40007},{"className":40006},[],[40008],{"type":603,"value":40009},"node",{"type":603,"value":25892},{"type":597,"tag":629,"props":40012,"children":40014},{"className":40013},[],[40015],{"type":603,"value":40016},"os",{"type":603,"value":40018}," 版本号",{"type":597,"tag":606,"props":40020,"children":40021},{},[40022,40024,40029,40031],{"type":603,"value":40023},"更多 ",{"type":597,"tag":629,"props":40025,"children":40027},{"className":40026},[],[40028],{"type":603,"value":39873},{"type":603,"value":40030}," 信息可以参考官方文档 ",{"type":597,"tag":1080,"props":40032,"children":40033},{},[40034],{"type":603,"value":40035},"Contexts and expression syntax for GitHub Actions[4]",{"type":597,"tag":857,"props":40037,"children":40039},{"id":40038},"自动创建项目release",[40040],{"type":603,"value":40041},"自动创建项目Release",{"type":597,"tag":606,"props":40043,"children":40044},{},[40045,40047,40053,40055,40061,40063],{"type":603,"value":40046},"有些项目在发布新版本时，一般都会创建一个",{"type":597,"tag":629,"props":40048,"children":40050},{"className":40049},[],[40051],{"type":603,"value":40052},"Github Release",{"type":603,"value":40054},"，并且把对应编译好之后的文件上传到",{"type":597,"tag":629,"props":40056,"children":40058},{"className":40057},[],[40059],{"type":603,"value":40060},"Release",{"type":603,"value":40062},"的资源列表中，例如：\n",{"type":597,"tag":719,"props":40064,"children":40067},{"alt":40065,"src":40066},"2659679572-62492fa02f19b6f9","/images/2020-07-11-github-actions/2659679572-62492fa02f19b6f9.png",[],{"type":597,"tag":606,"props":40069,"children":40070},{},[40071],{"type":603,"value":40072},"如果这个使用手动操作的话，不仅步骤重复又繁琐(每次都要编译出各个操作系统对应的发行包再进行上传)，而且最蛋疼的是对于国内的网络环境来说，上传文件速度简直不能忍，好不容易上传了一大半搞不好就因为网络原因又要重新上传，相信用过的人都深有体会。",{"type":597,"tag":606,"props":40074,"children":40075},{},[40076,40078,40084,40086,40091,40093,40098,40100,40105],{"type":603,"value":40077},"我就在想如果能用",{"type":597,"tag":629,"props":40079,"children":40081},{"className":40080},[],[40082],{"type":603,"value":40083},"Github Actions",{"type":603,"value":40085},"来创建",{"type":597,"tag":629,"props":40087,"children":40089},{"className":40088},[],[40090],{"type":603,"value":40060},{"type":603,"value":40092},",并且做对应的编译和上传，那上面的问题都可以迎刃而解了，于是在官方市场搜索了一下",{"type":597,"tag":629,"props":40094,"children":40096},{"className":40095},[],[40097],{"type":603,"value":40060},{"type":603,"value":40099},"关键字，果然已经有提供对应的",{"type":597,"tag":629,"props":40101,"children":40103},{"className":40102},[],[40104],{"type":603,"value":15807},{"type":603,"value":40106},"了：",{"type":597,"tag":1321,"props":40108,"children":40109},{},[40110,40122],{"type":597,"tag":807,"props":40111,"children":40112},{},[40113,40120],{"type":597,"tag":886,"props":40114,"children":40117},{"href":40115,"rel":40116},"https://github.com/actions/create-release",[890],[40118],{"type":603,"value":40119},"create-release",{"type":603,"value":40121},": 用于创建 release",{"type":597,"tag":807,"props":40123,"children":40124},{},[40125,40132],{"type":597,"tag":886,"props":40126,"children":40129},{"href":40127,"rel":40128},"https://github.com/actions/upload-release-asset",[890],[40130],{"type":603,"value":40131},"upload-release-asset",{"type":603,"value":40133},": 用于上传资源到对应的 release 中",{"type":597,"tag":606,"props":40135,"children":40136},{},[40137,40139,40145,40147,40153],{"type":603,"value":40138},"接着创建一个",{"type":597,"tag":629,"props":40140,"children":40142},{"className":40141},[],[40143],{"type":603,"value":40144},"Github仓库",{"type":603,"value":40146},"，我测试的仓库地址是",{"type":597,"tag":886,"props":40148,"children":40151},{"href":40149,"rel":40150},"https://github.com/monkeyWie/github-actions-demo",[890],[40152],{"type":603,"value":40149},{"type":603,"value":40154},"，项目用 go 语言写的，代码非常简单就是两个 hello world 级别的代码，里面包含了普通的 go 程序和 cgo 程序。",{"type":597,"tag":606,"props":40156,"children":40157},{},[40158,40160,40166,40168,40173,40175,40181,40183,40189,40190,40196,40198,40203],{"type":603,"value":40159},"项目的构建流程是在项目",{"type":597,"tag":629,"props":40161,"children":40163},{"className":40162},[],[40164],{"type":603,"value":40165},"git push --tags",{"type":603,"value":40167},"的时候，触发 workflow，通过",{"type":597,"tag":629,"props":40169,"children":40171},{"className":40170},[],[40172],{"type":603,"value":40083},{"type":603,"value":40174},"编译出来",{"type":597,"tag":629,"props":40176,"children":40178},{"className":40177},[],[40179],{"type":603,"value":40180},"Windows、Linux、macOS",{"type":603,"value":40182},"三个操作系统对应的 64 位可执行文件，再根据",{"type":597,"tag":629,"props":40184,"children":40186},{"className":40185},[],[40187],{"type":603,"value":40188},"tag name",{"type":603,"value":695},{"type":597,"tag":629,"props":40191,"children":40193},{"className":40192},[],[40194],{"type":603,"value":40195},"tag message",{"type":603,"value":40197},"来创建对应的",{"type":597,"tag":629,"props":40199,"children":40201},{"className":40200},[],[40202],{"type":603,"value":40052},{"type":603,"value":40204},"，并将编译好的文件上传。",{"type":597,"tag":606,"props":40206,"children":40207},{},[40208,40210,40216],{"type":603,"value":40209},"同样的创建一个",{"type":597,"tag":629,"props":40211,"children":40213},{"className":40212},[],[40214],{"type":603,"value":40215},".github/workflows/main.yml",{"type":603,"value":40217},"文件，内容如下：",{"type":597,"tag":621,"props":40219,"children":40221},{"code":40220},"name: CI\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - \"v*\" # Push events to matching v*, i.e. v1.0, v20.15.10\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n      - name: Use Golang\n        uses: actions/setup-go@v1\n        with:\n          go-version: \"1.13.x\"\n      - name: Build normal\n        run: |\n          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o normal-windows-x64.exe cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o normal-linux-x64 cmd/normal/main.go\n          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o normal-darwin-x64 cmd/normal/main.go\n          zip normal-windows-x64.zip normal-windows-x64.exe\n          zip normal-linux-x64.zip normal-linux-x64\n          zip normal-darwin-x64.zip normal-darwin-x64\n      - name: Build cgo\n        run: |\n          go get github.com/monkeyWie/xgo\n          ~/go/bin/xgo -targets=windows/amd64,linux/amd64,darwin/amd64 -ldflags=\"-w -s\" -pkg=cmd/cgo/main.go -out=cgo .\n          mv cgo-windows-* cgo-windows-x64.exe\n          mv cgo-linux-* cgo-linux-x64\n          mv cgo-darwin-* cgo-darwin-x64\n          zip cgo-windows-x64.zip cgo-windows-x64.exe\n          zip cgo-linux-x64.zip cgo-linux-x64\n          zip cgo-darwin-x64.zip cgo-darwin-x64\n      - name: Create Release\n        id: create_release\n        uses: monkeyWie/create-release@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release normal windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-windows-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-linux-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release normal darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./normal-darwin-x64.zip\n          asset_name: normal-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n\n      - name: Upload Release cgo windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-windows-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-windows-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-linux-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-linux-x64.zip\n          asset_content_type: application/zip\n      - name: Upload Release cgo darwin\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps\n          asset_path: ./cgo-darwin-x64.zip\n          asset_name: cgo-${{ steps.create_release.outputs.tag }}-darwin-x64.zip\n          asset_content_type: application/zip\n",[40222],{"type":597,"tag":629,"props":40223,"children":40224},{"__ignoreMap":591},[40225],{"type":603,"value":40220},{"type":597,"tag":606,"props":40227,"children":40228},{},[40229],{"type":603,"value":40230},"构建流程如下：",{"type":597,"tag":803,"props":40232,"children":40233},{},[40234,40247,40260,40272,40284,40295,40377],{"type":597,"tag":807,"props":40235,"children":40236},{},[40237,40239,40245],{"type":603,"value":40238},"监听 tag name 为",{"type":597,"tag":629,"props":40240,"children":40242},{"className":40241},[],[40243],{"type":603,"value":40244},"v",{"type":603,"value":40246},"开头的 push",{"type":597,"tag":807,"props":40248,"children":40249},{},[40250,40252,40258],{"type":603,"value":40251},"运行一个 job，在",{"type":597,"tag":629,"props":40253,"children":40255},{"className":40254},[],[40256],{"type":603,"value":40257},"ubuntu",{"type":603,"value":40259},"虚拟机环境下",{"type":597,"tag":807,"props":40261,"children":40262},{},[40263,40265,40271],{"type":603,"value":40264},"拉取源码，安装",{"type":597,"tag":629,"props":40266,"children":40268},{"className":40267},[],[40269],{"type":603,"value":40270},"golang 1.13.x",{"type":603,"value":6618},{"type":597,"tag":807,"props":40273,"children":40274},{},[40275,40276,40282],{"type":603,"value":8220},{"type":597,"tag":629,"props":40277,"children":40279},{"className":40278},[],[40280],{"type":603,"value":40281},"go build",{"type":603,"value":40283},"交叉编译出不同操作系统下 64 位可执行文件，并使用 zip 压缩",{"type":597,"tag":807,"props":40285,"children":40286},{},[40287,40288,40294],{"type":603,"value":8220},{"type":597,"tag":629,"props":40289,"children":40291},{"className":40290},[],[40292],{"type":603,"value":40293},"xgo",{"type":603,"value":40283},{"type":597,"tag":807,"props":40296,"children":40297},{},[40298,40299,40305,40307,40313,40315,40320,40322,40329,40331,40337,40338,40344,40346,40352,40354,40359,40360,40367,40369,40375],{"type":603,"value":8220},{"type":597,"tag":629,"props":40300,"children":40302},{"className":40301},[],[40303],{"type":603,"value":40304},"monkeyWie/create-release@master",{"type":603,"value":40306},"创建 Release，其中会用到",{"type":597,"tag":629,"props":40308,"children":40310},{"className":40309},[],[40311],{"type":603,"value":40312},"${{ secrets.GITHUB_TOKEN }}",{"type":603,"value":40314},"，这是",{"type":597,"tag":629,"props":40316,"children":40318},{"className":40317},[],[40319],{"type":603,"value":40083},{"type":603,"value":40321},"内置的一个",{"type":597,"tag":886,"props":40323,"children":40326},{"href":40324,"rel":40325},"https://help.github.com/en/github/automating-your-workflow-with-github-actions/virtual-environments-for-github-actions#github_token-secret",[890],[40327],{"type":603,"value":40328},"秘钥",{"type":603,"value":40330},"，用于授权访问你自己的 github 存储库，原理就是使用这个",{"type":597,"tag":629,"props":40332,"children":40334},{"className":40333},[],[40335],{"type":603,"value":40336},"TOKEN",{"type":603,"value":22662},{"type":597,"tag":629,"props":40339,"children":40341},{"className":40340},[],[40342],{"type":603,"value":40343},"Github API",{"type":603,"value":40345},"来进行创建 release，还有一个",{"type":597,"tag":629,"props":40347,"children":40349},{"className":40348},[],[40350],{"type":603,"value":40351},"${{ github.ref }}",{"type":603,"value":40353},"也是",{"type":597,"tag":629,"props":40355,"children":40357},{"className":40356},[],[40358],{"type":603,"value":40083},{"type":603,"value":40321},{"type":597,"tag":886,"props":40361,"children":40364},{"href":40362,"rel":40363},"https://help.github.com/en/github/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions#github-context",[890],[40365],{"type":603,"value":40366},"变量",{"type":603,"value":40368},"，然后通过 action 的",{"type":597,"tag":629,"props":40370,"children":40372},{"className":40371},[],[40373],{"type":603,"value":40374},"with",{"type":603,"value":40376},"进行参数传递。",{"type":597,"tag":807,"props":40378,"children":40379},{},[40380,40381,40387,40389,40395,40396,40402,40404,40410,40412,40417],{"type":603,"value":8220},{"type":597,"tag":629,"props":40382,"children":40384},{"className":40383},[],[40385],{"type":603,"value":40386},"actions/upload-release-asset@v1.0.1",{"type":603,"value":40388},"上传文件，这里使用了两个表达式",{"type":597,"tag":629,"props":40390,"children":40392},{"className":40391},[],[40393],{"type":603,"value":40394},"${{ steps.create_release.outputs.upload_url }}",{"type":603,"value":695},{"type":597,"tag":629,"props":40397,"children":40399},{"className":40398},[],[40400],{"type":603,"value":40401},"${{ steps.create_release.outputs.tag }}",{"type":603,"value":40403},"，可以获取到指定",{"type":597,"tag":629,"props":40405,"children":40407},{"className":40406},[],[40408],{"type":603,"value":40409},"action",{"type":603,"value":40411},"的输出，第一个是获取创建好的 release 对应的上传地址，第二个是获取对应的 tag(例如：v1.0.0)，这样就可以在把上传的文件带上版本号。因为这个",{"type":597,"tag":629,"props":40413,"children":40415},{"className":40414},[],[40416],{"type":603,"value":40409},{"type":603,"value":40418},"不支持多个文件上传，所以就写了多个 action 进行上传。",{"type":597,"tag":857,"props":40420,"children":40422},{"id":40421},"ssh命令",[40423],{"type":603,"value":40421},{"type":597,"tag":621,"props":40425,"children":40427},{"code":40426},"name: Publish\non: [push]\njobs:\n  build:\n    name: SSH command\n    runs-on: ubuntu-latest\n    steps:\n    - name: git fetch\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ secrets.SERVER_HOST }}\n        username: ${{ secrets.SERVER_USERNAME }}\n        password: ${{ secrets.SERVER_PASSWORD }}\n        command_timeout: 10m\n        script: |\n          git fetch --all\n          git reset --hard origin/master\n  build:\n    name: ...\n    runs-on: ...\n    ...\n",[40428],{"type":597,"tag":629,"props":40429,"children":40430},{"__ignoreMap":591},[40431],{"type":603,"value":40426},{"type":597,"tag":857,"props":40433,"children":40435},{"id":40434},"dotfx",[40436],{"type":603,"value":40437},"dotFx",{"type":597,"tag":606,"props":40439,"children":40440},{},[40441],{"type":597,"tag":886,"props":40442,"children":40445},{"href":40443,"rel":40444},"https://dotnet.github.io/docfx/tutorial/docfx_getting_started.html",[890],[40446],{"type":603,"value":40443},{"type":597,"tag":621,"props":40448,"children":40450},{"code":40449},"name: docfx build\non:\n  push:\n    branches:\n      - dev\njobs:\n  build:\n    name: Build\n    runs-on: windows-latest\n    steps:\n      # Check out the branch that triggered this workflow to the 'source' subdirectory\n      - name: Checkout Code\n        uses: actions/checkout@v2\n        with:\n          ref: dev\n          path: source\n      - name: install DocFX\n        run: \"& choco install docfx -y\"\n      # Run a build\n      - name: Build docs\n        run: \"& docfx ./docfx.json\"\n        working-directory: ./source\n      # Check out gh-pages branch to the 'docs' subdirectory\n      - name: Checkout docs\n        uses: actions/checkout@v2\n        with:\n          ref: gh-pages\n          path: docs\n      # Sync the site\n      - name: Clear docs repo\n        run: Get-ChildItem -Force -Exclude .git | ForEach-Object { Remove-Item -Recurse -Verbose -Force $_ }\n        working-directory: ./docs\n      - name: Sync new content\n        run: Copy-Item -Recurse -Verbose -Force \"$env:GITHUB_WORKSPACE/source/_site/*\" \"$env:GITHUB_WORKSPACE/docs\"\n        working-directory: ./docs\n        # update docs\n      - name: Commit to gh-pages and push\n        run: |\n          $ErrorActionPreference = \"Continue\"\n          git add -A\n          git diff HEAD --exit-code\n          if ($LASTEXITCODE -eq 0) {\n            Write-Host \"No changes to commit!\"\n          } else {\n            git config --global user.name \"github-actions-docfx[bot]\"\n            git config --global user.email \"weihanli@outlook.com\"\n            git commit -m \"Updated docs from commit $env:GITHUB_SHA on $env:GITHUB_REF\"\n            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}\n            git push origin gh-pages\n          }\n        working-directory: ./docs\n",[40451],{"type":597,"tag":629,"props":40452,"children":40453},{"__ignoreMap":591},[40454],{"type":603,"value":40449},{"type":597,"tag":857,"props":40456,"children":40458},{"id":40457},"hexo",[40459],{"type":603,"value":40460},"Hexo",{"type":597,"tag":621,"props":40462,"children":40464},{"code":40463},"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Hexo \n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装hexo\n      run : |\n        npm install -g hexo-cli\n  \n    - name: 生成博客\n      run : |\n        cd main\n        npm install\n        hexo clean\n        hexo generate\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/public/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n        \n",[40465],{"type":597,"tag":629,"props":40466,"children":40467},{"__ignoreMap":591},[40468],{"type":603,"value":40463},{"type":597,"tag":857,"props":40470,"children":40472},{"id":40471},"gitbook",[40473],{"type":603,"value":40471},{"type":597,"tag":621,"props":40475,"children":40477},{"code":40476},"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: GitBook\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [12.18.2]\n\n    steps:\n    - name: 迁出main\n      uses: actions/checkout@v2\n      with: \n        path: main\n        submodules: 'recursive'\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    \n    - name: 安装gitbook\n      run : |\n        npm install -g gitbook-cli\n  \n    - name: 生成书籍\n      run : |\n        cd main/Docs\n        gitbook install\n        gitbook build\n      \n    - name: 迁出gh-pages\n      uses: actions/checkout@v2\n      with:\n        path: gh-pages\n        ref: gh-pages\n        \n    - name: 部署到gh-pages\n      env:\n        TZ: Asia/Shanghai\n      run: |\n        cp -rf main/Docs/_book/* gh-pages\n        cd gh-pages\n        git config --global user.name \"zhepama\"\n        git config --global user.email \"zhepama@gmail.com\"\n        git add .\n        git commit -m \"Auto Delopy at `date +\"%Y-%m-%d %H:%M\"`\"\n        git push origin gh-pages\n",[40478],{"type":597,"tag":629,"props":40479,"children":40480},{"__ignoreMap":591},[40481],{"type":603,"value":40476},{"type":597,"tag":857,"props":40483,"children":40485},{"id":40484},"市场",[40486],{"type":603,"value":40484},{"type":597,"tag":606,"props":40488,"children":40489},{},[40490],{"type":597,"tag":886,"props":40491,"children":40494},{"href":40492,"rel":40493},"https://github.com/marketplace",[890],[40495],{"type":603,"value":40492},{"type":597,"tag":606,"props":40497,"children":40498},{},[40499],{"type":597,"tag":886,"props":40500,"children":40503},{"href":40501,"rel":40502},"https://docs.github.com/cn/actions/configuring-and-managing-workflows/using-environment-variables",[890],[40504],{"type":603,"value":40501},{"title":591,"searchDepth":787,"depth":787,"links":40506},[],"content:tool:2020-07-11-github-actions.md","tool/2020-07-11-github-actions.md","2020-07-11",{"_path":104,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":103,"description":40511,"body":40512,"_type":791,"_id":40698,"_source":793,"_file":40699,"_extension":795,"date":40700},"配置原理abp 使用拉的方式从github直接请求,然后存储到数据库作为缓存注意开发环境下,他会从github直接拉取而不会经过数据库缓存,所以会很慢关于版本当你写完书的时候.打个tag,然后把tag的版本号填入上方的..最新版本的分支名称即可关于多语言注意多语言abp使用了缓存..所以如果你更改了docs-langs.json,需要重启服务器,或者清空缓存{\n    \"Languages\":[\n      {\n        \"DisplayName\" : \"English\",\n        \"Code\" : \"en\",\n        \"IsDefault\": false\n      }",{"type":594,"children":40513,"toc":40696},[40514,40518,40526,40530,40535,40540,40545,40550,40555,40560,40568,40574,40579,40588,40593,40614,40622,40627,40635,40640,40648,40653,40661,40667,40672,40678,40683,40688],{"type":597,"tag":857,"props":40515,"children":40516},{"id":12032},[40517],{"type":603,"value":12032},{"type":597,"tag":606,"props":40519,"children":40520},{},[40521],{"type":597,"tag":719,"props":40522,"children":40525},{"alt":40523,"src":40524},"image-20200716181126415","/images/2020-07-10-abp-doc/image-20200716181126415.png",[],{"type":597,"tag":857,"props":40527,"children":40528},{"id":23745},[40529],{"type":603,"value":23745},{"type":597,"tag":606,"props":40531,"children":40532},{},[40533],{"type":603,"value":40534},"abp 使用拉的方式从github直接请求,然后存储到数据库作为缓存",{"type":597,"tag":606,"props":40536,"children":40537},{},[40538],{"type":603,"value":40539},"注意开发环境下,他会从github直接拉取而不会经过数据库缓存,所以会很慢",{"type":597,"tag":857,"props":40541,"children":40543},{"id":40542},"关于版本",[40544],{"type":603,"value":40542},{"type":597,"tag":606,"props":40546,"children":40547},{},[40548],{"type":603,"value":40549},"当你写完书的时候.打个tag,然后把tag的版本号填入上方的..最新版本的分支名称即可",{"type":597,"tag":857,"props":40551,"children":40553},{"id":40552},"关于多语言",[40554],{"type":603,"value":40552},{"type":597,"tag":606,"props":40556,"children":40557},{},[40558],{"type":603,"value":40559},"注意多语言abp使用了缓存..所以如果你更改了docs-langs.json,需要重启服务器,或者清空缓存",{"type":597,"tag":621,"props":40561,"children":40563},{"code":40562},"{\n    \"Languages\":[\n      {\n        \"DisplayName\" : \"English\",\n        \"Code\" : \"en\",\n        \"IsDefault\": false\n      },\n      {\n        \"DisplayName\" : \"简体中文\",\n        \"Code\" : \"zh\",\n        \"IsDefault\": true\n      }\n    ]\n  }\n",[40564],{"type":597,"tag":629,"props":40565,"children":40566},{"__ignoreMap":591},[40567],{"type":603,"value":40562},{"type":597,"tag":857,"props":40569,"children":40571},{"id":40570},"关于参数doc-params",[40572],{"type":603,"value":40573},"关于参数[doc-params]",{"type":597,"tag":606,"props":40575,"children":40576},{},[40577],{"type":603,"value":40578},"abp使用了scriban文本模板语言引擎.",{"type":597,"tag":606,"props":40580,"children":40581},{},[40582],{"type":597,"tag":886,"props":40583,"children":40586},{"href":40584,"rel":40585},"https://github.com/lunet-io/scriban",[890],[40587],{"type":603,"value":40584},{"type":597,"tag":606,"props":40589,"children":40590},{},[40591],{"type":603,"value":40592},"具体的示例参见:",{"type":597,"tag":1321,"props":40594,"children":40595},{},[40596,40605],{"type":597,"tag":807,"props":40597,"children":40598},{},[40599],{"type":597,"tag":886,"props":40600,"children":40603},{"href":40601,"rel":40602},"https://docs.abp.io/zh-Hans/abp/latest/Getting-Started?UI=MVC&DB=EF&Tiered=No",[890],[40604],{"type":603,"value":40601},{"type":597,"tag":807,"props":40606,"children":40607},{},[40608],{"type":597,"tag":886,"props":40609,"children":40612},{"href":40610,"rel":40611},"https://github.com/abpframework/abp/blob/master/docs/zh-Hans/Getting-Started.md",[890],[40613],{"type":603,"value":40610},{"type":597,"tag":621,"props":40615,"children":40617},{"code":40616},"{\n  \"parameters\": [\n    {\n      \"name\": \"UI\",\n      \"displayName\": \"UI\",\n      \"values\": {\n        \"MVC\": \"MVC / Razor Pages\",\n        \"NG\": \"Angular\"\n      }\n    },\n    {\n      \"name\": \"DB\",\n      \"displayName\": \"Database\",\n      \"values\": {\n        \"EF\": \"Entity Framework Core\",\n        \"Mongo\": \"MongoDB\"\n      }\n    },\n    {\n      \"name\": \"Tiered\",\n      \"displayName\": \"Tiered\",\n      \"values\": {\n        \"No\": \"Not Tiered\",\n        \"Yes\": \"Tiered\"\n      }\n    }\n  ]\n}\n",[40618],{"type":597,"tag":629,"props":40619,"children":40620},{"__ignoreMap":591},[40621],{"type":603,"value":40616},{"type":597,"tag":606,"props":40623,"children":40624},{},[40625],{"type":603,"value":40626},"markdow中使用",{"type":597,"tag":621,"props":40628,"children":40630},{"code":40629},"//[doc-params]\n{\n    \"UI\": [\"MVC\",\"NG\"],\n    \"DB\": [\"EF\", \"Mongo\"],\n    \"Tiered\": [\"Yes\", \"No\"]\n}\n本教程介绍了如何创建一个新的{{if UI == \"MVC\"}} ASP.NET Core MVC web {{else if UI == \"NG\"}} Angular {{end}}. 配置并运行它.\n",[40631],{"type":597,"tag":629,"props":40632,"children":40633},{"__ignoreMap":591},[40634],{"type":603,"value":40629},{"type":597,"tag":606,"props":40636,"children":40637},{},[40638],{"type":603,"value":40639},"生成的html",{"type":597,"tag":606,"props":40641,"children":40642},{},[40643],{"type":597,"tag":719,"props":40644,"children":40647},{"alt":40645,"src":40646},"image-20200718164036943","/images/2020-07-10-abp-doc/image-20200718164036943.png",[],{"type":597,"tag":606,"props":40649,"children":40650},{},[40651],{"type":603,"value":40652},"当切换ui的值后的显示,我们看到字符发生了改变",{"type":597,"tag":606,"props":40654,"children":40655},{},[40656],{"type":597,"tag":719,"props":40657,"children":40660},{"alt":40658,"src":40659},"image-20200718164137023","/images/2020-07-10-abp-doc/image-20200718164137023.png",[],{"type":597,"tag":857,"props":40662,"children":40664},{"id":40663},"关于doc-template",[40665],{"type":603,"value":40666},"关于[doc-template]",{"type":597,"tag":606,"props":40668,"children":40669},{},[40670],{"type":603,"value":40671},"还没看到如何用",{"type":597,"tag":857,"props":40673,"children":40675},{"id":40674},"_404",[40676],{"type":603,"value":40677},"404",{"type":597,"tag":606,"props":40679,"children":40680},{},[40681],{"type":603,"value":40682},"因为访问github如果超时就会出现404.",{"type":597,"tag":606,"props":40684,"children":40685},{},[40686],{"type":603,"value":40687},"所以建议控制台设置代理然后运行",{"type":597,"tag":621,"props":40689,"children":40691},{"code":40690},"$env:http_proxy=\"http://127.0.0.1:1080\"\n$env:https_proxy=\"http://127.0.0.1:1080\"\ndotnet run .\\IG.Www.Web.csproj\n",[40692],{"type":597,"tag":629,"props":40693,"children":40694},{"__ignoreMap":591},[40695],{"type":603,"value":40690},{"title":591,"searchDepth":787,"depth":787,"links":40697},[],"content:dotnet:2020-07-10-abp-doc.md","dotnet/2020-07-10-abp-doc.md","2020-07-10",{"_path":309,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":308,"description":40702,"body":40703,"_type":791,"_id":41110,"_source":793,"_file":41111,"_extension":795,"date":41112},"使用npm安装gitbook现在安装 Node.js 都会默认安装 npm（node 包管理工具），所以我们不用单独安装 npm，打开命令行，执行以下命令安装 GitBook：npm install -g gitbook-cli\n使用Git Bash操作如下图：好了，准备好了三件套工具之后，就是来看看怎么编写GitBook了。编写GitBook创建电子书的文件夹目录想象一下，现在你准备构建一本书籍，你在硬盘上新建了一个叫 mybook 的文件夹，按照以前的做法，你会新建一个 Word 文档，写上标题，然后开始巴滋巴滋地笔耕。初始化Gitbook但是现在有了 GitBook，你首先要做的是在 m",{"type":594,"children":40704,"toc":41099},[40705,40710,40715,40724,40735,40742,40753,40759,40764,40772,40779,40785,40793,40805,40812,40817,40830,40836,40841,40848,40853,40862,40867,40874,40880,40892,40899,40904,40911,40917,40939,40946,40953,40959,40964,40969,40980,40985,41027,41034,41054,41065,41076,41085,41090],{"type":597,"tag":1023,"props":40706,"children":40708},{"id":40707},"使用npm安装gitbook",[40709],{"type":603,"value":40707},{"type":597,"tag":606,"props":40711,"children":40712},{},[40713],{"type":603,"value":40714},"现在安装 Node.js 都会默认安装 npm（node 包管理工具），所以我们不用单独安装 npm，打开命令行，执行以下命令安装 GitBook：",{"type":597,"tag":621,"props":40716,"children":40719},{"className":40717,"code":40718,"language":32668,"meta":591},[32666],"npm install -g gitbook-cli\n",[40720],{"type":597,"tag":629,"props":40721,"children":40722},{"__ignoreMap":591},[40723],{"type":603,"value":40718},{"type":597,"tag":606,"props":40725,"children":40726},{},[40727,40728,40733],{"type":603,"value":8220},{"type":597,"tag":1080,"props":40729,"children":40730},{},[40731],{"type":603,"value":40732},"Git Bash",{"type":603,"value":40734},"操作如下图：",{"type":597,"tag":606,"props":40736,"children":40737},{},[40738],{"type":597,"tag":719,"props":40739,"children":40741},{"alt":719,"src":40740},"/images/2020-07-06-gitbook-use/13423234-3ef32e72168040b1.png",[],{"type":597,"tag":606,"props":40743,"children":40744},{},[40745,40747,40752],{"type":603,"value":40746},"好了，准备好了三件套工具之后，就是来看看怎么编写",{"type":597,"tag":1080,"props":40748,"children":40749},{},[40750],{"type":603,"value":40751},"GitBook",{"type":603,"value":32735},{"type":597,"tag":598,"props":40754,"children":40756},{"id":40755},"编写gitbook",[40757],{"type":603,"value":40758},"编写GitBook",{"type":597,"tag":1023,"props":40760,"children":40762},{"id":40761},"创建电子书的文件夹目录",[40763],{"type":603,"value":40761},{"type":597,"tag":617,"props":40765,"children":40766},{},[40767],{"type":597,"tag":606,"props":40768,"children":40769},{},[40770],{"type":603,"value":40771},"想象一下，现在你准备构建一本书籍，你在硬盘上新建了一个叫 mybook 的文件夹，按照以前的做法，你会新建一个 Word 文档，写上标题，然后开始巴滋巴滋地笔耕。",{"type":597,"tag":606,"props":40773,"children":40774},{},[40775],{"type":597,"tag":719,"props":40776,"children":40778},{"alt":719,"src":40777},"/images/2020-07-06-gitbook-use/13423234-4c42d4ea26ffe4d4.png",[],{"type":597,"tag":1023,"props":40780,"children":40782},{"id":40781},"初始化gitbook",[40783],{"type":603,"value":40784},"初始化Gitbook",{"type":597,"tag":617,"props":40786,"children":40787},{},[40788],{"type":597,"tag":606,"props":40789,"children":40790},{},[40791],{"type":603,"value":40792},"但是现在有了 GitBook，你首先要做的是在 mybook 文件夹下执行以下命令：",{"type":597,"tag":606,"props":40794,"children":40795},{},[40796,40797,40803],{"type":603,"value":8220},{"type":597,"tag":629,"props":40798,"children":40800},{"className":40799},[],[40801],{"type":603,"value":40802},"gitbook init",{"type":603,"value":40804},"初始化gitbook，操作如下：",{"type":597,"tag":606,"props":40806,"children":40807},{},[40808],{"type":597,"tag":719,"props":40809,"children":40811},{"alt":719,"src":40810},"/images/2020-07-06-gitbook-use/13423234-325fdbbe1bad6026.png",[],{"type":597,"tag":606,"props":40813,"children":40814},{},[40815],{"type":603,"value":40816},"执行完后，你会看到多了两个文件 —— README.md 和 SUMMARY.md，它们的作用如下：",{"type":597,"tag":1321,"props":40818,"children":40819},{},[40820,40825],{"type":597,"tag":807,"props":40821,"children":40822},{},[40823],{"type":603,"value":40824},"README.md —— 书籍的介绍写在这个文件里",{"type":597,"tag":807,"props":40826,"children":40827},{},[40828],{"type":603,"value":40829},"SUMMARY.md —— 书籍的目录结构在这里配置",{"type":597,"tag":1023,"props":40831,"children":40833},{"id":40832},"使用typora来编写框架内容",[40834],{"type":603,"value":40835},"使用Typora来编写框架内容",{"type":597,"tag":606,"props":40837,"children":40838},{},[40839],{"type":603,"value":40840},"这时候，我们启动恭候多时的 Typora 来编辑这两个文件了：",{"type":597,"tag":606,"props":40842,"children":40843},{},[40844],{"type":597,"tag":719,"props":40845,"children":40847},{"alt":719,"src":40846},"/images/2020-07-06-gitbook-use/13423234-637f36f709e63f81.png",[],{"type":597,"tag":606,"props":40849,"children":40850},{},[40851],{"type":603,"value":40852},"编辑 SUMMARY.md 文件，内容修改为：",{"type":597,"tag":621,"props":40854,"children":40857},{"className":40855,"code":40856,"language":25619,"meta":591},[25621],"# 目录\n\n* [前言](README.md)\n* [第一章](Chapter1/README.md)\n  * [第1节：衣](Chapter1/衣.md)\n  * [第2节：食](Chapter1/食.md)\n  * [第3节：住](Chapter1/住.md)\n  * [第4节：行](Chapter1/行.md)\n* [第二章](Chapter2/README.md)\n* [第三章](Chapter3/README.md)\n* [第四章](Chapter4/README.md)\n",[40858],{"type":597,"tag":629,"props":40859,"children":40860},{"__ignoreMap":591},[40861],{"type":603,"value":40856},{"type":597,"tag":606,"props":40863,"children":40864},{},[40865],{"type":603,"value":40866},"显示如下：",{"type":597,"tag":606,"props":40868,"children":40869},{},[40870],{"type":597,"tag":719,"props":40871,"children":40873},{"alt":719,"src":40872},"/images/2020-07-06-gitbook-use/13423234-a0e40da1d8ae2f1a.png",[],{"type":597,"tag":1023,"props":40875,"children":40877},{"id":40876},"重新使用gitbook根据目录初始化篇章",[40878],{"type":603,"value":40879},"重新使用gitbook根据目录，初始化篇章",{"type":597,"tag":606,"props":40881,"children":40882},{},[40883,40885,40890],{"type":603,"value":40884},"然后我们回到命令行，在 mybook 文件夹中再次执行 ",{"type":597,"tag":629,"props":40886,"children":40888},{"className":40887},[],[40889],{"type":603,"value":40802},{"type":603,"value":40891}," 命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。",{"type":597,"tag":606,"props":40893,"children":40894},{},[40895],{"type":597,"tag":719,"props":40896,"children":40898},{"alt":719,"src":40897},"/images/2020-07-06-gitbook-use/13423234-92aaec1127fbe9c8.png",[],{"type":597,"tag":606,"props":40900,"children":40901},{},[40902],{"type":603,"value":40903},"Typora 是所见即所得（实时渲染）的 Markdown 编辑器，这时候它是这样的：",{"type":597,"tag":606,"props":40905,"children":40906},{},[40907],{"type":597,"tag":719,"props":40908,"children":40910},{"alt":719,"src":40909},"/images/2020-07-06-gitbook-use/13423234-e1fb9ef8f3b32226.png",[],{"type":597,"tag":1023,"props":40912,"children":40914},{"id":40913},"启动服务预览书籍",[40915],{"type":603,"value":40916},"启动服务，预览书籍",{"type":597,"tag":606,"props":40918,"children":40919},{},[40920,40922,40928,40930,40937],{"type":603,"value":40921},"接着我们执行 ",{"type":597,"tag":629,"props":40923,"children":40925},{"className":40924},[],[40926],{"type":603,"value":40927},"gitbook serve",{"type":603,"value":40929}," 来预览这本书籍，执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，最后提示 “Serving book on ",{"type":597,"tag":886,"props":40931,"children":40934},{"href":40932,"rel":40933},"https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A4000%2F",[890],[40935],{"type":603,"value":40936},"http://localhost:4000",{"type":603,"value":40938},"”。嗯，打开浏览器看一下吧：",{"type":597,"tag":606,"props":40940,"children":40941},{},[40942],{"type":597,"tag":719,"props":40943,"children":40945},{"alt":719,"src":40944},"/images/2020-07-06-gitbook-use/13423234-a49ea1d4e0bdeb98.png",[],{"type":597,"tag":606,"props":40947,"children":40948},{},[40949],{"type":597,"tag":719,"props":40950,"children":40952},{"alt":719,"src":40951},"/images/2020-07-06-gitbook-use/13423234-ca03c52cfdc1ac64.png",[],{"type":597,"tag":598,"props":40954,"children":40956},{"id":40955},"结合-github-pages",[40957],{"type":603,"value":40958},"结合 GitHub Pages",{"type":597,"tag":606,"props":40960,"children":40961},{},[40962],{"type":603,"value":40963},"GitHub Pages 是 GitHub 提供的静态网站托管服务。",{"type":597,"tag":606,"props":40965,"children":40966},{},[40967],{"type":603,"value":40968},"GitHub 上的每个仓库都可以拥有一个 GitHub Pages，对应的 URL 如下：",{"type":597,"tag":621,"props":40970,"children":40975},{"className":40971,"code":40973,"language":40974,"meta":591},[40972],"language-xml","https://\u003Cusername>.github.io/\u003Crepository>/\n","xml",[40976],{"type":597,"tag":629,"props":40977,"children":40978},{"__ignoreMap":591},[40979],{"type":603,"value":40973},{"type":597,"tag":606,"props":40981,"children":40982},{},[40983],{"type":603,"value":40984},"GitHub Pages 的静态资源支持下面 3 个来源：",{"type":597,"tag":1321,"props":40986,"children":40987},{},[40988,40999,41017],{"type":597,"tag":807,"props":40989,"children":40990},{},[40991,40997],{"type":597,"tag":629,"props":40992,"children":40994},{"className":40993},[],[40995],{"type":603,"value":40996},"master",{"type":603,"value":40998}," 分支",{"type":597,"tag":807,"props":41000,"children":41001},{},[41002,41007,41009,41015],{"type":597,"tag":629,"props":41003,"children":41005},{"className":41004},[],[41006],{"type":603,"value":40996},{"type":603,"value":41008}," 分支的 ",{"type":597,"tag":629,"props":41010,"children":41012},{"className":41011},[],[41013],{"type":603,"value":41014},"/docs",{"type":603,"value":41016}," 目录",{"type":597,"tag":807,"props":41018,"children":41019},{},[41020,41026],{"type":597,"tag":629,"props":41021,"children":41023},{"className":41022},[],[41024],{"type":603,"value":41025},"gh-pages",{"type":603,"value":40998},{"type":597,"tag":606,"props":41028,"children":41029},{},[41030],{"type":597,"tag":719,"props":41031,"children":41033},{"alt":719,"src":41032},"/images/2020-07-06-gitbook-use/1624919-00837dbbb587799c.jpg",[],{"type":597,"tag":606,"props":41035,"children":41036},{},[41037,41039,41045,41047,41052],{"type":603,"value":41038},"执行下面命令，将 ",{"type":597,"tag":629,"props":41040,"children":41042},{"className":41041},[],[41043],{"type":603,"value":41044},"_book",{"type":603,"value":41046}," 目录推送到 GitHub 仓库的 ",{"type":597,"tag":629,"props":41048,"children":41050},{"className":41049},[],[41051],{"type":603,"value":41025},{"type":603,"value":41053}," 分支。",{"type":597,"tag":621,"props":41055,"children":41060},{"className":41056,"code":41058,"language":41059,"meta":591},[41057],"language-shell","$ git checkout --orphan gh-pages\n$ code .nojekyll\n","shell",[41061],{"type":597,"tag":629,"props":41062,"children":41063},{"__ignoreMap":591},[41064],{"type":603,"value":41058},{"type":597,"tag":606,"props":41066,"children":41067},{},[41068,41070],{"type":603,"value":41069},"或者在生成静态网页时，将保存的目录指定为 ",{"type":597,"tag":629,"props":41071,"children":41073},{"className":41072},[],[41074],{"type":603,"value":41075},"./docs",{"type":597,"tag":621,"props":41077,"children":41080},{"className":41078,"code":41079,"language":41059,"meta":591},[41057],"$ gitbook build ./ ./docs\n",[41081],{"type":597,"tag":629,"props":41082,"children":41083},{"__ignoreMap":591},[41084],{"type":603,"value":41079},{"type":597,"tag":606,"props":41086,"children":41087},{},[41088],{"type":603,"value":41089},"然后直接推送到 GitHub 仓库的。",{"type":597,"tag":621,"props":41091,"children":41094},{"className":41092,"code":41093,"language":41059,"meta":591},[41057],"$ git push origin master\n",[41095],{"type":597,"tag":629,"props":41096,"children":41097},{"__ignoreMap":591},[41098],{"type":603,"value":41093},{"title":591,"searchDepth":787,"depth":787,"links":41100},[41101,41102,41109],{"id":40707,"depth":1530,"text":40707},{"id":40755,"depth":787,"text":40758,"children":41103},[41104,41105,41106,41107,41108],{"id":40761,"depth":1530,"text":40761},{"id":40781,"depth":1530,"text":40784},{"id":40832,"depth":1530,"text":40835},{"id":40876,"depth":1530,"text":40879},{"id":40913,"depth":1530,"text":40916},{"id":40955,"depth":787,"text":40958},"content:tool:2020-07-06-gitbook-use.md","tool/2020-07-06-gitbook-use.md","2020-07-06",{"_path":101,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":100,"description":41114,"body":41115,"_type":791,"_id":41464,"_source":793,"_file":41465,"_extension":795,"date":41466},"abp的dbcontext是分成两种的,一个是程序运行的dbcontext,一个是数据迁移的dbcontext",{"type":594,"children":41116,"toc":41458},[41117,41122,41126,41135,41143,41152,41160,41165,41171,41196,41201,41206,41214,41219,41227,41238,41249,41257,41262,41270,41275,41283,41289,41295,41300,41309,41314,41319,41328,41336,41344,41352,41361,41369,41374,41382,41390,41395,41404,41412,41417,41444],{"type":597,"tag":857,"props":41118,"children":41120},{"id":41119},"数据迁移上下文",[41121],{"type":603,"value":41119},{"type":597,"tag":606,"props":41123,"children":41124},{},[41125],{"type":603,"value":41114},{"type":597,"tag":606,"props":41127,"children":41128},{},[41129],{"type":597,"tag":629,"props":41130,"children":41132},{"className":41131},[],[41133],{"type":603,"value":41134},"PlayGroundMigrationsDbContext.cs",{"type":597,"tag":621,"props":41136,"children":41138},{"code":41137},"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Include modules to your migration db context */\n\n            builder.ConfigurePermissionManagement();\n            builder.ConfigureSettingManagement();\n            builder.ConfigureBackgroundJobs();\n            builder.ConfigureAuditLogging();\n            builder.ConfigureIdentity();\n            builder.ConfigureIdentityServer();\n            builder.ConfigureFeatureManagement();\n            builder.ConfigureTenantManagement();\n\n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n            builder.ConfigureBlogging();\n        }\n",[41139],{"type":597,"tag":629,"props":41140,"children":41141},{"__ignoreMap":591},[41142],{"type":603,"value":41137},{"type":597,"tag":606,"props":41144,"children":41145},{},[41146],{"type":597,"tag":629,"props":41147,"children":41149},{"className":41148},[],[41150],{"type":603,"value":41151},"PlayGroundDbContext.cs",{"type":597,"tag":621,"props":41153,"children":41155},{"code":41154},"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Configure the shared tables (with included modules) here */\n\n            builder.Entity\u003CAppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n            });\n \n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n        }\n",[41156],{"type":597,"tag":629,"props":41157,"children":41158},{"__ignoreMap":591},[41159],{"type":603,"value":41154},{"type":597,"tag":606,"props":41161,"children":41162},{},[41163],{"type":603,"value":41164},"我们看到他们共同执行了 builder.ConfigurePlayGround();",{"type":597,"tag":598,"props":41166,"children":41168},{"id":41167},"为什么这样设计",[41169],{"type":603,"value":41170},"为什么这样设计?",{"type":597,"tag":1321,"props":41172,"children":41173},{},[41174,41185],{"type":597,"tag":807,"props":41175,"children":41176},{},[41177,41179],{"type":603,"value":41178},"为了模块间不产生依赖,例如用户表,迁移dbcontext中使用了IdentityUser,而运行的dbcontext使用了appuser进行了对其的映射,",{"type":597,"tag":886,"props":41180,"children":41183},{"href":41181,"rel":41182},"https://github.com/abpframework/abp/issues/1998",[890],[41184],{"type":603,"value":41181},{"type":597,"tag":807,"props":41186,"children":41187},{},[41188,41190],{"type":603,"value":41189},"如何为user添加属性.",{"type":597,"tag":886,"props":41191,"children":41194},{"href":41192,"rel":41193},"https://github.com/abpframework/abp/issues/2453",[890],[41195],{"type":603,"value":41192},{"type":597,"tag":857,"props":41197,"children":41199},{"id":41198},"如何共用user",[41200],{"type":603,"value":41198},{"type":597,"tag":606,"props":41202,"children":41203},{},[41204],{"type":603,"value":41205},"我们来看下定义的Iuser接口",{"type":597,"tag":621,"props":41207,"children":41209},{"code":41208},"    public interface IUser : IAggregateRoot\u003CGuid>, IMultiTenant\n    {\n        string UserName { get; }\n\n        [CanBeNull]\n        string Email { get; }\n\n        [CanBeNull]\n        string Name  { get; }\n\n        [CanBeNull]\n        string Surname { get; }\n\n        bool EmailConfirmed { get; }\n\n        [CanBeNull]\n        string PhoneNumber { get; }\n\n        bool PhoneNumberConfirmed { get; }\n    }\n",[41210],{"type":597,"tag":629,"props":41211,"children":41212},{"__ignoreMap":591},[41213],{"type":603,"value":41208},{"type":597,"tag":606,"props":41215,"children":41216},{},[41217],{"type":603,"value":41218},"dbcontext中的配置字段",{"type":597,"tag":621,"props":41220,"children":41222},{"code":41221},"        public static void ConfigureAbpUser\u003CTUser>(this EntityTypeBuilder\u003CTUser> b)\n            where TUser : class, IUser\n        {\n            b.Property(u => u.TenantId).HasColumnName(nameof(IUser.TenantId));\n            b.Property(u => u.UserName).IsRequired().HasMaxLength(AbpUserConsts.MaxUserNameLength).HasColumnName(nameof(IUser.UserName));\n            b.Property(u => u.Email).IsRequired().HasMaxLength(AbpUserConsts.MaxEmailLength).HasColumnName(nameof(IUser.Email));\n            b.Property(u => u.Name).HasMaxLength(AbpUserConsts.MaxNameLength).HasColumnName(nameof(IUser.Name));\n            b.Property(u => u.Surname).HasMaxLength(AbpUserConsts.MaxSurnameLength).HasColumnName(nameof(IUser.Surname));\n            b.Property(u => u.EmailConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.EmailConfirmed));\n            b.Property(u => u.PhoneNumber).HasMaxLength(AbpUserConsts.MaxPhoneNumberLength).HasColumnName(nameof(IUser.PhoneNumber));\n            b.Property(u => u.PhoneNumberConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.PhoneNumberConfirmed));\n        }\n",[41223],{"type":597,"tag":629,"props":41224,"children":41225},{"__ignoreMap":591},[41226],{"type":603,"value":41221},{"type":597,"tag":606,"props":41228,"children":41229},{},[41230,41232],{"type":603,"value":41231},"dbcontext中的user表是如何创建,更新和使用的..",{"type":597,"tag":629,"props":41233,"children":41235},{"className":41234},[],[41236],{"type":603,"value":41237},"UserLookupService.cs",{"type":597,"tag":606,"props":41239,"children":41240},{},[41241,41243],{"type":603,"value":41242},"先看下查找,其中",{"type":597,"tag":629,"props":41244,"children":41246},{"className":41245},[],[41247],{"type":603,"value":41248},"IdentityUserRepositoryExternalUserLookupServiceProvider : IExternalUserLookupServiceProvider,",{"type":597,"tag":621,"props":41250,"children":41252},{"code":41251}," public async Task\u003CTUser> FindByIdAsync(Guid id, CancellationToken cancellationToken = default)\n        {\n            var localUser = await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n\n            if (ExternalUserLookupServiceProvider == null)\n            {\n                return localUser;\n            }\n\n            if (SkipExternalLookupIfLocalUserExists && localUser != null)\n            {\n                return localUser;\n            }\n\n            IUserData externalUser;\n\n            try\n            {\n                externalUser = await ExternalUserLookupServiceProvider.FindByIdAsync(id, cancellationToken);\n                if (externalUser == null)\n                {\n                    if (localUser != null)\n                    {\n                        //TODO: Instead of deleting, should be make it inactive or something like that?\n                        await WithNewUowAsync(() => _userRepository.DeleteAsync(localUser, cancellationToken: cancellationToken));\n                    }\n\n                    return null;\n                }\n            }\n            catch (Exception ex)\n            {\n                Logger.LogException(ex);\n                return localUser;\n            }\n\n            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n\n            return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n        }\n",[41253],{"type":597,"tag":629,"props":41254,"children":41255},{"__ignoreMap":591},[41256],{"type":603,"value":41251},{"type":597,"tag":606,"props":41258,"children":41259},{},[41260],{"type":603,"value":41261},"根据上面代码可见,如果找不到该用户..会自动创建一个,如何继承了IUpdateUserData则会更新",{"type":597,"tag":621,"props":41263,"children":41265},{"code":41264},"            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n",[41266],{"type":597,"tag":629,"props":41267,"children":41268},{"__ignoreMap":591},[41269],{"type":603,"value":41264},{"type":597,"tag":606,"props":41271,"children":41272},{},[41273],{"type":603,"value":41274},"更新还可以通过eventbus",{"type":597,"tag":621,"props":41276,"children":41278},{"code":41277},"    public class BlogUserSynchronizer :\n        IDistributedEventHandler\u003CEntityUpdatedEto\u003CUserEto>>,\n        ITransientDependency\n    {\n        protected IBlogUserRepository UserRepository { get; }\n        protected IBlogUserLookupService UserLookupService { get; }\n\n        public BlogUserSynchronizer(\n            IBlogUserRepository userRepository, \n            IBlogUserLookupService userLookupService)\n        {\n            UserRepository = userRepository;\n            UserLookupService = userLookupService;\n        }\n\n        public async Task HandleEventAsync(EntityUpdatedEto\u003CUserEto> eventData)\n        {\n            var user = await UserRepository.FindAsync(eventData.Entity.Id);\n            if (user == null)\n            {\n                user = await UserLookupService.FindByIdAsync(eventData.Entity.Id);\n                if (user == null)\n                {\n                    return;\n                }\n            }\n\n            if (user.Update(eventData.Entity))\n            {\n                await UserRepository.UpdateAsync(user);\n            }\n        }\n    }\n",[41279],{"type":597,"tag":629,"props":41280,"children":41281},{"__ignoreMap":591},[41282],{"type":603,"value":41277},{"type":597,"tag":857,"props":41284,"children":41286},{"id":41285},"如何给identityuser添加额外的属性",[41287],{"type":603,"value":41288},"如何给IdentityUser添加额外的属性",{"type":597,"tag":598,"props":41290,"children":41292},{"id":41291},"extra-properties",[41293],{"type":603,"value":41294},"Extra Properties",{"type":597,"tag":606,"props":41296,"children":41297},{},[41298],{"type":603,"value":41299},"首先IdentityUser已经被定义,虽然我们可以通过dbcontext配置修改数据表的字段,,但是不能被映射,所以有了Extra Properties",{"type":597,"tag":606,"props":41301,"children":41302},{},[41303],{"type":597,"tag":886,"props":41304,"children":41307},{"href":41305,"rel":41306},"https://docs.abp.io/zh-Hans/abp/latest/Customizing-Application-Modules-Extending-Entities",[890],[41308],{"type":603,"value":41305},{"type":597,"tag":598,"props":41310,"children":41312},{"id":41311},"映射",[41313],{"type":603,"value":41311},{"type":597,"tag":606,"props":41315,"children":41316},{},[41317],{"type":603,"value":41318},"会在数据库中创建字段",{"type":597,"tag":606,"props":41320,"children":41321},{},[41322],{"type":597,"tag":629,"props":41323,"children":41325},{"className":41324},[],[41326],{"type":603,"value":41327},"AppUser.cs",{"type":597,"tag":621,"props":41329,"children":41331},{"code":41330},"        public virtual string Sex { get; private set; }\n\n        private AppUser()\n        {\n\n        }\n",[41332],{"type":597,"tag":629,"props":41333,"children":41334},{"__ignoreMap":591},[41335],{"type":603,"value":41330},{"type":597,"tag":606,"props":41337,"children":41338},{},[41339],{"type":597,"tag":629,"props":41340,"children":41342},{"className":41341},[],[41343],{"type":603,"value":41151},{"type":597,"tag":621,"props":41345,"children":41347},{"code":41346},"            builder.Entity\u003CAppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n\n                b.Property(x => x.Sex).HasMaxLength(128);\n            });\n",[41348],{"type":597,"tag":629,"props":41349,"children":41350},{"__ignoreMap":591},[41351],{"type":603,"value":41346},{"type":597,"tag":606,"props":41353,"children":41354},{},[41355],{"type":597,"tag":629,"props":41356,"children":41358},{"className":41357},[],[41359],{"type":603,"value":41360},"PlayGroundEfCoreEntityExtensionMappings.cs",{"type":597,"tag":621,"props":41362,"children":41364},{"code":41363},"       public static void Configure()\n        {\n            PlayGroundModulePropertyConfigurator.Configure();\n\n            OneTimeRunner.Run(() =>\n            {\n                /* You can configure entity extension properties for the\n                 * entities defined in the used modules.\n                 *\n                 * The properties defined here becomes table fields.\n                 * If you want to use the ExtraProperties dictionary of the entity\n                 * instead of creating a new field, then define the property in the\n                 * PlayGroundDomainObjectExtensions class.\n                 *\n                 * Example:\n                 *\n                 * ObjectExtensionManager.Instance\n                 *    .MapEfCoreProperty\u003CIdentityUser, string>(\n                 *        \"MyProperty\",\n                 *        b => b.HasMaxLength(128)\n                 *    );\n                 *\n                 * See the documentation for more:\n                 * https://docs.abp.io/en/abp/latest/Customizing-Application-Modules-Extending-Entities\n                 */\n\n                ObjectExtensionManager.Instance\n                      .MapEfCoreProperty\u003CIdentityUser, string>(\n                  nameof(AppUser.Sex),\n                  b => b.HasMaxLength(128)\n                      );\n            });\n        }\n",[41365],{"type":597,"tag":629,"props":41366,"children":41367},{"__ignoreMap":591},[41368],{"type":603,"value":41363},{"type":597,"tag":606,"props":41370,"children":41371},{},[41372],{"type":603,"value":41373},"我们来看看生成的迁移表",{"type":597,"tag":621,"props":41375,"children":41377},{"code":41376},"    public partial class Added_Sex_T_User : Migration\n    {\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.AddColumn\u003Cstring>(\n                name: \"Sex\",\n                table: \"AbpUsers\",\n                maxLength: 128,\n                nullable: true);\n        }\n\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropColumn(\n                name: \"Sex\",\n                table: \"AbpUsers\");\n        }\n    }\n",[41378],{"type":597,"tag":629,"props":41379,"children":41380},{"__ignoreMap":591},[41381],{"type":603,"value":41376},{"type":597,"tag":606,"props":41383,"children":41384},{},[41385],{"type":597,"tag":719,"props":41386,"children":41389},{"alt":41387,"src":41388},"image-20200714123314743","/images/2020-07-05-abp-database-migration/image-20200714123314743.png",[],{"type":597,"tag":606,"props":41391,"children":41392},{},[41393],{"type":603,"value":41394},"它时如何被添加到迁移dbcontext中的",{"type":597,"tag":606,"props":41396,"children":41397},{},[41398],{"type":597,"tag":629,"props":41399,"children":41401},{"className":41400},[],[41402],{"type":603,"value":41403},"AbpEntityTypeBuilderExtensions.cs",{"type":597,"tag":621,"props":41405,"children":41407},{"code":41406},"        public static void ConfigureByConvention(this EntityTypeBuilder b)\n        {\n            b.TryConfigureConcurrencyStamp();\n            b.TryConfigureExtraProperties();  //配置扩展属性,就是ExtraProperties字段\n            b.TryConfigureObjectExtensions();//就是这里对象扩展,ObjectExtensionManager.Instance添加属性,然后从这里再根据类型读取出来\n            b.TryConfigureMayHaveCreator();\n            b.TryConfigureMustHaveCreator();\n            b.TryConfigureSoftDelete();\n            b.TryConfigureDeletionTime();\n            b.TryConfigureDeletionAudited();\n            b.TryConfigureCreationTime();\n            b.TryConfigureLastModificationTime();\n            b.TryConfigureModificationAudited();\n            b.TryConfigureMultiTenant();\n        }\n",[41408],{"type":597,"tag":629,"props":41409,"children":41410},{"__ignoreMap":591},[41411],{"type":603,"value":41406},{"type":597,"tag":598,"props":41413,"children":41415},{"id":41414},"同步",[41416],{"type":603,"value":41414},{"type":597,"tag":606,"props":41418,"children":41419},{},[41420,41422,41427,41429,41435,41437,41442],{"type":603,"value":41421},"你可以创建",{"type":597,"tag":1080,"props":41423,"children":41424},{},[41425],{"type":603,"value":41426},"自己的表",{"type":603,"value":41428},"来存储属性,而不是创建新实体并映射到同一表. 你通常复制原始实体的一些值. 例如可以将 ",{"type":597,"tag":629,"props":41430,"children":41432},{"className":41431},[],[41433],{"type":603,"value":41434},"Name",{"type":603,"value":41436}," 字段添加到你自己的表中,它是原表中 ",{"type":597,"tag":629,"props":41438,"children":41440},{"className":41439},[],[41441],{"type":603,"value":41434},{"type":603,"value":41443}," 字段的副本.",{"type":597,"tag":606,"props":41445,"children":41446},{},[41447,41449,41456],{"type":603,"value":41448},"在这种情况下你不需要处理迁移问题,但是需要处理数据复制问题. 当重复的值发生变化时,你应该在表中同步相同的变化. 你可以使用本地或分布式",{"type":597,"tag":886,"props":41450,"children":41453},{"href":41451,"rel":41452},"https://docs.abp.io/zh-Hans/abp/latest/Event-Bus",[890],[41454],{"type":603,"value":41455},"事件总线",{"type":603,"value":41457},"订阅原始实体的更改事件. 这是根据来自另一个微服务的数据推荐的方法,特别是如果它们有单独的物理数据库(你可以在网络中搜索关于微服务设计的数据共享,这是一个广泛的主题).",{"title":591,"searchDepth":787,"depth":787,"links":41459},[41460,41461,41462,41463],{"id":41167,"depth":787,"text":41170},{"id":41291,"depth":787,"text":41294},{"id":41311,"depth":787,"text":41311},{"id":41414,"depth":787,"text":41414},"content:dotnet:2020-07-05-abp-database-user.md","dotnet/2020-07-05-abp-database-user.md","2020-07-05",{"_path":463,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":462,"description":41468,"body":41469,"_type":791,"_id":41516,"_source":793,"_file":41517,"_extension":795,"date":41518},"Unity官方API中说的渲染管线(Render Pipeline)有三种",{"type":594,"children":41470,"toc":41514},[41471,41475,41498,41502],{"type":597,"tag":606,"props":41472,"children":41473},{},[41474],{"type":603,"value":41468},{"type":597,"tag":1321,"props":41476,"children":41477},{},[41478,41483,41488,41493],{"type":597,"tag":807,"props":41479,"children":41480},{},[41481],{"type":603,"value":41482},"Built-in Render Pipeline(URP):内置渲染管线，自定义选项有限",{"type":597,"tag":807,"props":41484,"children":41485},{},[41486],{"type":603,"value":41487},"Universal Render Pipeline (URP)，可编程的轻量级(通用)渲染管线，前身是Lightweight Render Pipeline简称LWPR，在Unity2019.3版本中正式应用。",{"type":597,"tag":807,"props":41489,"children":41490},{},[41491],{"type":603,"value":41492},"High Definition Render Pipeline (HDRP) 可编程的高保真的渲染管线，有硬件要求",{"type":597,"tag":807,"props":41494,"children":41495},{},[41496],{"type":603,"value":41497},"sciprttable Render Pipeline (SRP) 名词，是一种实现可编程管线的一种方法(即通过C#代码，调用API来自己定义渲染顺序，相机工作方式顺序，光照特性等很多渲染相关的东西)，通过这种方法写出来的代码文件称之为SRP。",{"type":597,"tag":606,"props":41499,"children":41500},{},[41501],{"type":603,"value":32788},{"type":597,"tag":1321,"props":41503,"children":41504},{},[41505],{"type":597,"tag":807,"props":41506,"children":41507},{},[41508],{"type":597,"tag":886,"props":41509,"children":41512},{"href":41510,"rel":41511},"https://zhuanlan.zhihu.com/p/93203710",[890],[41513],{"type":603,"value":41510},{"title":591,"searchDepth":787,"depth":787,"links":41515},[],"content:unity:2020-07-04-unity-render-pipeline.md","unity/2020-07-04-unity-render-pipeline.md","2020-07-04",{"_path":460,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":459,"description":41520,"body":41521,"_type":791,"_id":42126,"_source":793,"_file":42127,"_extension":795,"date":42128},"title : \"Mesh renderer 和 Mesh 和 Mesh Filter\"基本概念Meshes 是Unity的主要图形基元。 它们定义对象的形状。Materials 通过包含对所用纹理的引用、平铺信息、颜色色调等来定义表面应使用的渲染方式。材质的可用选项取决于材质使用的着色器。Shaders 是一些包含数学计算和算法的小脚本，根据光照输入和材质配置来计算每个像素渲染的颜色。Textures 是位图图像。材质可包含对纹理的引用，因此材质的着色器可在计算游戏对象的表面颜色时使用纹理。除了游戏对象表面的基本颜色（反照率）之外，纹理还可表示材质表面的许多其他方面，例如其反射率或粗糙度。T",{"type":594,"children":41522,"toc":42121},[41523,41526,41532,41537,41580,41584,41591,41682,41686,41735,41740,41747,41752,41765,41770,41775,41783,41788,41796,41801,41806,41814,41826,41832,41837,41844,41849,41857,41862,41870,41875,41882,41887,41894,41901,41906,41913,41918,41925,41933,41939,41944,41949,41954,41959,41964,41969,41977,41982,41990,41995,42043,42047],{"type":597,"tag":3720,"props":41524,"children":41525},{},[],{"type":597,"tag":598,"props":41527,"children":41529},{"id":41528},"title-mesh-renderer-和-mesh-和-mesh-filter",[41530],{"type":603,"value":41531},"title : \"Mesh renderer 和 Mesh 和 Mesh Filter\"",{"type":597,"tag":857,"props":41533,"children":41535},{"id":41534},"基本概念",[41536],{"type":603,"value":41534},{"type":597,"tag":1321,"props":41538,"children":41539},{},[41540,41550,41560,41570],{"type":597,"tag":807,"props":41541,"children":41542},{},[41543,41548],{"type":597,"tag":1080,"props":41544,"children":41545},{},[41546],{"type":603,"value":41547},"Meshes",{"type":603,"value":41549}," 是Unity的主要图形基元。 它们定义对象的形状。",{"type":597,"tag":807,"props":41551,"children":41552},{},[41553,41558],{"type":597,"tag":1080,"props":41554,"children":41555},{},[41556],{"type":603,"value":41557},"Materials",{"type":603,"value":41559}," 通过包含对所用纹理的引用、平铺信息、颜色色调等来定义表面应使用的渲染方式。材质的可用选项取决于材质使用的着色器。",{"type":597,"tag":807,"props":41561,"children":41562},{},[41563,41568],{"type":597,"tag":1080,"props":41564,"children":41565},{},[41566],{"type":603,"value":41567},"Shaders",{"type":603,"value":41569}," 是一些包含数学计算和算法的小脚本，根据光照输入和材质配置来计算每个像素渲染的颜色。",{"type":597,"tag":807,"props":41571,"children":41572},{},[41573,41578],{"type":597,"tag":1080,"props":41574,"children":41575},{},[41576],{"type":603,"value":41577},"Textures",{"type":603,"value":41579}," 是位图图像。材质可包含对纹理的引用，因此材质的着色器可在计算游戏对象的表面颜色时使用纹理。除了游戏对象表面的基本颜色（反照率）之外，纹理还可表示材质表面的许多其他方面，例如其反射率或粗糙度。",{"type":597,"tag":598,"props":41581,"children":41582},{"id":36671},[41583],{"type":603,"value":36674},{"type":597,"tag":606,"props":41585,"children":41586},{},[41587],{"type":597,"tag":719,"props":41588,"children":41590},{"alt":23469,"src":41589},"/images/2020-07-03-unity-mesh/201808082025438",[],{"type":597,"tag":1321,"props":41592,"children":41593},{},[41594,41604,41616,41626,41636,41648,41660,41672],{"type":597,"tag":807,"props":41595,"children":41596},{},[41597],{"type":597,"tag":886,"props":41598,"children":41601},{"href":41599,"rel":41600},"https://docs.unity3d.com/Manual/TextureTypes.html#Default",[890],[41602],{"type":603,"value":41603},"Default",{"type":597,"tag":807,"props":41605,"children":41606},{},[41607,41614],{"type":597,"tag":886,"props":41608,"children":41611},{"href":41609,"rel":41610},"https://docs.unity3d.com/Manual/TextureTypes.html#NormalMap",[890],[41612],{"type":603,"value":41613},"Normal Map",{"type":603,"value":41615}," 法线贴图就是在原物体的凹凸表面的每个点上均作法线，通过RGB颜色通道来标记法线的方向，你可以把它理解成与原凹凸表面平行的另一个不同的表面，但实际上它又只是一个光滑的平面",{"type":597,"tag":807,"props":41617,"children":41618},{},[41619],{"type":597,"tag":886,"props":41620,"children":41623},{"href":41621,"rel":41622},"https://docs.unity3d.com/Manual/TextureTypes.html#Editor",[890],[41624],{"type":603,"value":41625},"Editor GUI and Legacy",{"type":597,"tag":807,"props":41627,"children":41628},{},[41629],{"type":597,"tag":886,"props":41630,"children":41633},{"href":41631,"rel":41632},"https://docs.unity3d.com/Manual/TextureTypes.html#Sprite",[890],[41634],{"type":603,"value":41635},"Sprite (2D and UI)",{"type":597,"tag":807,"props":41637,"children":41638},{},[41639,41646],{"type":597,"tag":886,"props":41640,"children":41643},{"href":41641,"rel":41642},"https://docs.unity3d.com/Manual/TextureTypes.html#Cursor",[890],[41644],{"type":603,"value":41645},"Cursor",{"type":603,"value":41647},"  光标文件",{"type":597,"tag":807,"props":41649,"children":41650},{},[41651,41658],{"type":597,"tag":886,"props":41652,"children":41655},{"href":41653,"rel":41654},"https://docs.unity3d.com/Manual/TextureTypes.html#Cookie",[890],[41656],{"type":603,"value":41657},"Cookie",{"type":603,"value":41659}," 聚光灯贴图",{"type":597,"tag":807,"props":41661,"children":41662},{},[41663,41670],{"type":597,"tag":886,"props":41664,"children":41667},{"href":41665,"rel":41666},"https://docs.unity3d.com/Manual/TextureTypes.html#Lightmap",[890],[41668],{"type":603,"value":41669},"Lightmap",{"type":603,"value":41671},"  光照贴图",{"type":597,"tag":807,"props":41673,"children":41674},{},[41675],{"type":597,"tag":886,"props":41676,"children":41679},{"href":41677,"rel":41678},"https://docs.unity3d.com/Manual/TextureTypes.html#SingleChannel",[890],[41680],{"type":603,"value":41681},"Single Channel",{"type":597,"tag":857,"props":41683,"children":41684},{"id":36627},[41685],{"type":603,"value":26293},{"type":597,"tag":1321,"props":41687,"children":41688},{},[41689,41694,41699,41711,41716,41730],{"type":597,"tag":807,"props":41690,"children":41691},{},[41692],{"type":603,"value":41693},"顶点坐标（vertex） 顶点坐标数组存放Mesh的每个顶点的空间坐标，假设某mesh有n个顶点，则vertex的size为n",{"type":597,"tag":807,"props":41695,"children":41696},{},[41697],{"type":603,"value":41698},"三角形序列（triangle） 每个mesh都由若干个三角形组成，而三角形的三个点就是顶点坐标里的点，三角形的数组的size = 三角形个数 * 3.",{"type":597,"tag":807,"props":41700,"children":41701},{},[41702,41704,41710],{"type":603,"value":41703},"法线（normal） 法线数组存放mesh每个顶点的法线，大小与顶点坐标对应，normal[i]对应顶点vertex[i]的法线.它不仅说明了",{"type":597,"tag":629,"props":41705,"children":41707},{"className":41706},[],[41708],{"type":603,"value":41709},"面片的朝向，还可用于计算光照模型",{"type":603,"value":758},{"type":597,"tag":807,"props":41712,"children":41713},{},[41714],{"type":603,"value":41715},"次法线 (subnormal)",{"type":597,"tag":807,"props":41717,"children":41718},{},[41719,41721,41728],{"type":603,"value":41720},"纹理坐标（uv） 它定义了图片上每个点的位置的信息. 这些点与3D模型是相互联系的, 以决定表面纹理贴图的位置. UV就是将",{"type":597,"tag":886,"props":41722,"children":41725},{"href":41723,"rel":41724},"http://baike.baidu.com/view/42116.htm",[890],[41726],{"type":603,"value":41727},"图像",{"type":603,"value":41729},"上每一个点精确对应到模型物体的表面. uv[i]对应vertex[i]",{"type":597,"tag":807,"props":41731,"children":41732},{},[41733],{"type":603,"value":41734},"切线 (tangent) 切线是垂直于法线的一条向量，由于垂直于法线的向量有无数条，所以切线最终规定为由UV坐标来决定朝向。",{"type":597,"tag":606,"props":41736,"children":41737},{},[41738],{"type":603,"value":41739},"例如：左图利用三个点绘制了一个三角形，而右图则通过两个三角形得到了一个四边形：",{"type":597,"tag":606,"props":41741,"children":41742},{},[41743],{"type":597,"tag":719,"props":41744,"children":41746},{"alt":719,"src":41745},"/images/2020-07-03-unity-mesh/20190805190859508.png",[],{"type":597,"tag":606,"props":41748,"children":41749},{},[41750],{"type":603,"value":41751},"注：这里需要注意的是，很明显从左图中给定的三个点，有两种方式可以得到三角图元，即",{"type":597,"tag":1321,"props":41753,"children":41754},{},[41755,41760],{"type":597,"tag":807,"props":41756,"children":41757},{},[41758],{"type":603,"value":41759},"顺时针旋转（也称左手螺旋）：p0->p1->p2",{"type":597,"tag":807,"props":41761,"children":41762},{},[41763],{"type":603,"value":41764},"逆时针旋转（右手螺旋）：p0->p2->p1",{"type":597,"tag":606,"props":41766,"children":41767},{},[41768],{"type":603,"value":41769},"它们的区别在哪里呢？类似于物理中左右手判断法则，拇指指示了三角图元的法线方向。法线其中一个作用是指明了三角图元的方向，如果从反方向看的话，这个图元是不可见的。而unity3d是左手坐标系在渲染时默认只渲染正面，背面是看不见的。",{"type":597,"tag":606,"props":41771,"children":41772},{},[41773],{"type":603,"value":41774},"那么要绘制上图中的三角形，即问题在于表达三个点的坐标，也就可以表示为下面的代码：",{"type":597,"tag":621,"props":41776,"children":41778},{"code":41777},"Vector2[] vertices = new Vector2[]{ \n    new Vector2( 0, 0 ),                            // p0\n    new Vector2( 0, 1 ),                            // p1\n    new Vector2( 1, 0 ),                            // p2\n };\n",[41779],{"type":597,"tag":629,"props":41780,"children":41781},{"__ignoreMap":591},[41782],{"type":603,"value":41777},{"type":597,"tag":606,"props":41784,"children":41785},{},[41786],{"type":603,"value":41787},"而如果要绘制四边形，也就需要六个点的坐标，如下面所示：",{"type":597,"tag":621,"props":41789,"children":41791},{"code":41790},"Vector2[] vertices = new Vector2[]{ \n    // 三角图元 0\n    new Vector2( 0, 0 ),                            // p0\n    new Vector2( 0, 1 ),                            // p1\n    new Vector2( 1, 0 ),                            // p2\n    // 三角图元 1\n    new Vector2( 0, 1 ),                            // p1\n    new Vector2( 1, 1 ),                            // p3\n    new Vector2( 1, 0 ),                            // p2\n };\n",[41792],{"type":597,"tag":629,"props":41793,"children":41794},{"__ignoreMap":591},[41795],{"type":603,"value":41790},{"type":597,"tag":606,"props":41797,"children":41798},{},[41799],{"type":603,"value":41800},"如果单纯使用顶点来表示（绘制）图形，是非常直观的——因为我们知道每一个顶点的位置信息，并且知道每三个点构成一个三角图元。然而从上面绘制四边形的数据中可以发现，三角图元1中有两个顶点的位置信息（p1和p3）和三角图元0是一样的。这也就增加了一些开销。",{"type":597,"tag":606,"props":41802,"children":41803},{},[41804],{"type":603,"value":41805},"总而言之，这个额外的存储开销是完全可以去除的，方法就是使用索引（Indices）。",{"type":597,"tag":621,"props":41807,"children":41809},{"code":41808},"Vector2[] vertices = new Vector2[]{ \n    new Vector2( 0, 0 ),                            // p0\n    new Vector2( 0, 1 ),                            // p1\n    new Vector2( 1, 0 ),                            // p2\n };\n int[] indices = new indices[]{\n    0, 1, 2                                         // 表示 0->1->2 构成一个三角图元\n };\n",[41810],{"type":597,"tag":629,"props":41811,"children":41812},{"__ignoreMap":591},[41813],{"type":603,"value":41808},{"type":597,"tag":606,"props":41815,"children":41816},{},[41817,41819,41825],{"type":603,"value":41818},"没错，indices就是这么一回事，原来是vertices数组中，每三个顶点表示一个三角图元，现在是indices数组中，每三个整型表示一个图元。这些整形不存储真正的数据，",{"type":597,"tag":629,"props":41820,"children":41822},{"className":41821},[],[41823],{"type":603,"value":41824},"只有用到时才从vertices中取出，也就是所谓的索引了",{"type":603,"value":758},{"type":597,"tag":857,"props":41827,"children":41829},{"id":41828},"submesh",[41830],{"type":603,"value":41831},"SubMesh",{"type":597,"tag":606,"props":41833,"children":41834},{},[41835],{"type":603,"value":41836},"面提到过，MeshRenderer负责对MeshFilter中的Mesh进行绘制，而绘制依赖于着色器，或者说着色器生成的材质（Material）。简单来说，材质具体描述了Mesh中的数据如何进行绘制。\nMaterial只负责一个Mesh的一次绘制，但是现在有一个要求是，Mesh的不同部分，要求使用不同的材质。例如上面所绘制的四边形，两个三角面片要求绘制出不同的颜色。这个时候就需要使用SubMesh了。\n从名字也能看出，SubMesh类似于Mesh，并且Mesh包含SubMesh。但是和Mesh不一样的是，SubMesh只有triangles信息，也就是说SubMesh使用自身的 triangles信息，索引找到 Mesh上的顶点信息（如vertices、 uv、normal等）后进行三角面片的绘制。它们的关系如下图所示：",{"type":597,"tag":606,"props":41838,"children":41839},{},[41840],{"type":597,"tag":719,"props":41841,"children":41843},{"alt":35421,"src":41842},"/images/2020-07-03-unity-mesh/20190806210636364.png",[],{"type":597,"tag":606,"props":41845,"children":41846},{},[41847],{"type":603,"value":41848},"这个设置的过程依赖于Mesh中的API是 SetTriangles，其函数原型为：",{"type":597,"tag":621,"props":41850,"children":41852},{"code":41851},"/*\n @parm triangles:           SubMesh的triangles\n @parm submesh:             属于Mesh中的第几个submesh\n @parm calculateBounds： 是否计算包围盒，默认为true。设置为false会使用当前存在的包围盒以减少CPU开销\n @parm baseVertex：          triangles中每一个元素的偏移值，默认为0；\n*/\npublic void SetTriangles(int[] triangles, int submesh, bool calculateBounds = true, int baseVertex = 0);\n",[41853],{"type":597,"tag":629,"props":41854,"children":41855},{"__ignoreMap":591},[41856],{"type":603,"value":41851},{"type":597,"tag":606,"props":41858,"children":41859},{},[41860],{"type":603,"value":41861},"用法如下：",{"type":597,"tag":621,"props":41863,"children":41865},{"code":41864},"Vector3[] vertices = new Vector3[]{\n         new Vector3( 0, 0, 0 ),\n         new Vector3( 0, 1, 0 ),\n         new Vector3( 1, 0, 0 ),\n         new Vector3( 1, 1, 0 ),\n    };\n    int[] subTriangles_0 = new int[]{\n        0, 1, 2\n    };\n    int[] subTriangles_1 = new int[]{\n        1, 3, 2\n    };\n    Mesh mesh = new Mesh();\n    mesh.vertices = vertices;\n    // 告诉 Mesh它将会有两个SubMesh\n    mesh.subMeshCount = 2;\n    mesh.SetTriangles( subTriangles_0 , 0 );\n    mesh.SetTriangles( subTriangles_1 , 1 );\n    // 重新计算normal信息，不然后面的 material会不起作用\n    mesh.RecaculateNormals();\n    // MeshFilter\n    MeshFilter meshFilter = GetComponent\u003CMeshFilter>();\n    if( meshFilter == null ) meshFilter = gameObject.AddComponent\u003CMeshFilter>();\n    meshFilter.mesh = mesh;\n    // MeshRenderer\n    MeshRenderer meshRenderer = GetComponent\u003CMeshRenderer>();\n    if( meshRenderer == null ) gameObject.AddComponent\u003CMeshRenderer>();\n",[41866],{"type":597,"tag":629,"props":41867,"children":41868},{"__ignoreMap":591},[41869],{"type":603,"value":41864},{"type":597,"tag":606,"props":41871,"children":41872},{},[41873],{"type":603,"value":41874},"将上述代码挂载到一个空节点上运行，可以得到以下结果：",{"type":597,"tag":606,"props":41876,"children":41877},{},[41878],{"type":597,"tag":719,"props":41879,"children":41881},{"alt":719,"src":41880},"/images/2020-07-03-unity-mesh/20190806223230787.png",[],{"type":597,"tag":606,"props":41883,"children":41884},{},[41885],{"type":603,"value":41886},"嗯？！难不成笔者在骗人，这里明明只有一个三角面片。莫慌，之前不是说过，要求两个三角面片使用不同的材质吗？如果运行时，将MeshRenderer的Material的Size设为2的话，你会发现另外一个三角图元也出现了：",{"type":597,"tag":606,"props":41888,"children":41889},{},[41890],{"type":597,"tag":719,"props":41891,"children":41893},{"alt":719,"src":41892},"/images/2020-07-03-unity-mesh/20190806223831570.png",[],{"type":597,"tag":606,"props":41895,"children":41896},{},[41897],{"type":597,"tag":719,"props":41898,"children":41900},{"alt":719,"src":41899},"/images/2020-07-03-unity-mesh/20190806223841210.png",[],{"type":597,"tag":606,"props":41902,"children":41903},{},[41904],{"type":603,"value":41905},"也就是说，有多少个SubMesh，就需要有多少个Material，并且它们的绘制关系是一一对应的。即第一个SubMesh使用第一个\nMaterial绘制，第二个SubMesh使用第二个Material绘制，以此类推。为了验证这个，接下来创建两个默认的Material，将它们的Albedo分别设置为红色和绿色，接着运行时将这两个 Material赋给MeshRenderer，将会得到如下图所示的运行结果：",{"type":597,"tag":606,"props":41907,"children":41908},{},[41909],{"type":597,"tag":719,"props":41910,"children":41912},{"alt":35421,"src":41911},"/images/2020-07-03-unity-mesh/2019080622511158.png",[],{"type":597,"tag":606,"props":41914,"children":41915},{},[41916],{"type":603,"value":41917},"另外，如果双击 MeshFilter的 Mesh属性，从下面的预览窗口，也能看到这个Mesh有两个SubMesh：",{"type":597,"tag":606,"props":41919,"children":41920},{},[41921],{"type":597,"tag":719,"props":41922,"children":41924},{"alt":35421,"src":41923},"/images/2020-07-03-unity-mesh/20190806225353486.png",[],{"type":597,"tag":617,"props":41926,"children":41927},{},[41928],{"type":597,"tag":606,"props":41929,"children":41930},{},[41931],{"type":603,"value":41932},"如何在unity显示线框图\n选择场景视图在其工具栏左侧的显示模式。前三个选项是阴影线框和阴影线框。",{"type":597,"tag":857,"props":41934,"children":41936},{"id":41935},"meshcombine",[41937],{"type":603,"value":41938},"MeshCombine",{"type":597,"tag":606,"props":41940,"children":41941},{},[41942],{"type":603,"value":41943},"MeshCombine，就是合并网格。",{"type":597,"tag":606,"props":41945,"children":41946},{},[41947],{"type":603,"value":41948},"为什么好好的模型要进行网格的合并呢？",{"type":597,"tag":606,"props":41950,"children":41951},{},[41952],{"type":603,"value":41953},"如果从应用的角度来看的话，通过网格合并可以实现游戏中的换装，你可能会说，更换的服装例如帽子好好的，为什么要合并到人物模型上？",{"type":597,"tag":606,"props":41955,"children":41956},{},[41957],{"type":603,"value":41958},"问题在于，如果游戏中不是所有人物模型都是标准的人型呢？例如魔兽世界中，不同种族的头部模型大小是不一致的，很容易出现穿模。当然可以同一顶帽子制作适配于不同种族的模型，反正这个工作是美术做的（溜）。但是从整体出发的话，这样做无疑增加了游戏容量的大小，也会减慢游戏开发的进度，同时一定程度上影响代码的简洁性。",{"type":597,"tag":606,"props":41960,"children":41961},{},[41962],{"type":603,"value":41963},"但是通过网格合并，将帽子的网格合并到人物模型上，并且蒙皮至人物头部的骨骼上。这样以后，由于骨骼的大小、旋转、位移信息会影响顶点，因此一旦这个帽子戴到别的人物模型身上时，由于它们头部骨骼的大小不一样，那么帽子也会自动变大。也就达到了同一个模型，适用于多个人物模型的目的。\n（关于骨骼、蒙皮、骨骼蒙皮动画，可以参考下面的扩展资料）",{"type":597,"tag":606,"props":41965,"children":41966},{},[41967],{"type":603,"value":41968},"关于网格合并，同样Unity在 Mesh提供了相关的API：",{"type":597,"tag":621,"props":41970,"children":41972},{"code":41971},"/*\n @parm combine:             要进行合并的CombineInstance实例\n @parm mergeSubMeshes:      是否将SubMesh进行合并，true为将SubMesh进行合并，false表示以SubMesh的形式存在\n @parm useMatrices:         是否应用定义在CombineInstance中的transform信息\n @hashLightmapData:         如果为true，则应用CombineInstance中的lightmapScaleOffset对mesh中的lightmapUV进行偏移\n*/\npublic void CombineMeshes(CombineInstance[] combine, bool mergeSubMeshes = true, bool useMatrices = true, bool hasLightmapData = false);\n",[41973],{"type":597,"tag":629,"props":41974,"children":41975},{"__ignoreMap":591},[41976],{"type":603,"value":41971},{"type":597,"tag":606,"props":41978,"children":41979},{},[41980],{"type":603,"value":41981},"要使用它也很简单，如下面的代码所示：",{"type":597,"tag":621,"props":41983,"children":41985},{"code":41984}," // 收集要合并的物体的所有Mesh信息\n        MeshFilter[] childMeshFilters = GetComponentsInChildren\u003CMeshFilter>();\n\n        CombineInstance[] destCombineInstances = new CombineInstance[childMeshFilters.Length];\n        for ( int i = 0; i \u003C childMeshFilters.Length; i++)\n        {\n            destCombineInstances[i] = new CombineInstance();\n            destCombineInstances[i].mesh = childMeshFilters[i].mesh;\n            destCombineInstances[i].transform = childMeshFilters[i].transform.localToWorldMatrix;\n\n            // 隐藏子物体，或者Destory\n            childMeshFilters[i].gameObject.SetActive(false);\n        }\n        Mesh destMesh = new Mesh();\n        // 进行合并\n        destMesh.CombineMeshes(destCombineInstances, true);\n        destMesh.RecalculateNormals();\n\n        // 将合并后的mesh赋给当前的MeshFilter\n        MeshFilter meshFilter = GetComponent\u003CMeshFilter>();\n        if (meshFilter == null) meshFilter = gameObject.AddComponent\u003CMeshFilter>();\n        meshFilter.mesh = destMesh;\n\n        MeshRenderer meshRenderer = GetComponent\u003CMeshRenderer>();\n        if( meshRenderer == null)\n        {\n            meshRenderer = gameObject.AddComponent\u003CMeshRenderer>();\n            // 设置MeshRenderer的material\n            Material material = new Material(Shader.Find(\"Standard\"));\n            meshRenderer.material = material;\n        }\n",[41986],{"type":597,"tag":629,"props":41987,"children":41988},{"__ignoreMap":591},[41989],{"type":603,"value":41984},{"type":597,"tag":598,"props":41991,"children":41993},{"id":41992},"mesh合并的优缺点",[41994],{"type":603,"value":41992},{"type":597,"tag":1321,"props":41996,"children":41997},{},[41998,42003,42008,42013],{"type":597,"tag":807,"props":41999,"children":42000},{},[42001],{"type":603,"value":42002},"静态批处理后，对内存的增加是非常大的，动则就是几十兆的内存",{"type":597,"tag":807,"props":42004,"children":42005},{},[42006],{"type":603,"value":42007},"动态批处理，对于合批要求挺多的，同时可能存在，动态合批消耗过大，得不偿失",{"type":597,"tag":807,"props":42009,"children":42010},{},[42011],{"type":603,"value":42012},"自己在逻辑代码里面进行动态合批，对于mesh的readwrite属性是要求开启的，这无疑也增大了内存的占用，复杂的合批处理可能会消耗更多的cpu时间",{"type":597,"tag":807,"props":42014,"children":42015},{},[42016,42018,42025,42027,42031,42033,42041],{"type":603,"value":42017},"GPU Instancing可以一次渲染(render)相同网格的多个副本，仅使用少量",{"type":597,"tag":886,"props":42019,"children":42022},{"href":42020,"rel":42021},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Manual/DrawCallBatching.html",[890],[42023],{"type":603,"value":42024},"DrawCalls",{"type":603,"value":42026},"。在渲染诸如建筑、树木、草等在场景中重复出现的事物时，GPU Instancing很有用。将这些静态的物件如植被等全部从场景中剔除，而保存其位置、缩放、uv偏移、",{"type":597,"tag":1733,"props":42028,"children":42029},{},[42030],{"type":603,"value":24581},{"type":603,"value":42032},"等相关信息，在需要渲染的时候，根据其保存的信息，通过",{"type":597,"tag":1733,"props":42034,"children":42035},{},[42036],{"type":597,"tag":1080,"props":42037,"children":42038},{},[42039],{"type":603,"value":42040},"Instance",{"type":603,"value":42042},"来渲染，这能够减少那些因为内存原因而不能合批的大批量相同物件的渲染时间",{"type":597,"tag":857,"props":42044,"children":42045},{"id":32788},[42046],{"type":603,"value":32788},{"type":597,"tag":1321,"props":42048,"children":42049},{},[42050,42059,42068,42077,42086,42095,42104,42112],{"type":597,"tag":807,"props":42051,"children":42052},{},[42053],{"type":597,"tag":886,"props":42054,"children":42057},{"href":42055,"rel":42056},"https://zhuanlan.zhihu.com/p/96084686",[890],[42058],{"type":603,"value":42055},{"type":597,"tag":807,"props":42060,"children":42061},{},[42062],{"type":597,"tag":886,"props":42063,"children":42066},{"href":42064,"rel":42065},"https://docs.unity.cn/cn/2018.4/Manual/class-Mesh.html",[890],[42067],{"type":603,"value":42064},{"type":597,"tag":807,"props":42069,"children":42070},{},[42071],{"type":597,"tag":886,"props":42072,"children":42075},{"href":42073,"rel":42074},"https://docs.unity.cn/cn/2020.1/Manual/Shaders.html",[890],[42076],{"type":603,"value":42073},{"type":597,"tag":807,"props":42078,"children":42079},{},[42080],{"type":597,"tag":886,"props":42081,"children":42084},{"href":42082,"rel":42083},"https://learnopengl-cn.github.io/",[890],[42085],{"type":603,"value":42082},{"type":597,"tag":807,"props":42087,"children":42088},{},[42089],{"type":597,"tag":886,"props":42090,"children":42093},{"href":42091,"rel":42092},"https://blog.csdn.net/Arkish/article/details/98482430",[890],[42094],{"type":603,"value":42091},{"type":597,"tag":807,"props":42096,"children":42097},{},[42098],{"type":597,"tag":886,"props":42099,"children":42102},{"href":42100,"rel":42101},"https://blog.csdn.net/tw_345/article/details/79771454",[890],[42103],{"type":603,"value":42100},{"type":597,"tag":807,"props":42105,"children":42106},{},[42107],{"type":597,"tag":886,"props":42108,"children":42110},{"href":42055,"rel":42109},[890],[42111],{"type":603,"value":42055},{"type":597,"tag":807,"props":42113,"children":42114},{},[42115],{"type":597,"tag":886,"props":42116,"children":42119},{"href":42117,"rel":42118},"https://blog.csdn.net/ecidevilin/category_9266800.html",[890],[42120],{"type":603,"value":42117},{"title":591,"searchDepth":787,"depth":787,"links":42122},[42123,42124,42125],{"id":41528,"depth":787,"text":41531},{"id":36671,"depth":787,"text":36674},{"id":41992,"depth":787,"text":41992},"content:unity:2020-07-03-unity-mesh.md","unity/2020-07-03-unity-mesh.md","2020-07-03",{"_path":306,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":305,"description":42130,"body":42131,"_type":791,"_id":42210,"_source":793,"_file":42211,"_extension":795,"date":42212},"添加应用到开始屏幕右键默认就有添加到开始屏幕备份与恢复默认布局位于 C:\\Users\\username\\AppData\\Local\\Microsoft\\Windows\\Shell\\ ..注意这是默认布局真实的布局是存在与注册表中Export-StartLayout –path c:\\start\\start.xml\nImport-StartLayout -layoutpath c:\\start\\start.xml -mountpath \"C:\\\"\n其他路径C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\ProgramsC:\\Users\\zhepama\\Ap",{"type":594,"children":42132,"toc":42206},[42133,42138,42143,42148,42153,42158,42166,42171,42176,42181,42185],{"type":597,"tag":857,"props":42134,"children":42136},{"id":42135},"添加应用到开始屏幕",[42137],{"type":603,"value":42135},{"type":597,"tag":606,"props":42139,"children":42140},{},[42141],{"type":603,"value":42142},"右键默认就有添加到开始屏幕",{"type":597,"tag":857,"props":42144,"children":42146},{"id":42145},"备份与恢复",[42147],{"type":603,"value":42145},{"type":597,"tag":606,"props":42149,"children":42150},{},[42151],{"type":603,"value":42152},"默认布局位于 C:\\Users\\username\\AppData\\Local\\Microsoft\\Windows\\Shell\\ ..注意这是默认布局",{"type":597,"tag":606,"props":42154,"children":42155},{},[42156],{"type":603,"value":42157},"真实的布局是存在与注册表中",{"type":597,"tag":621,"props":42159,"children":42161},{"code":42160},"Export-StartLayout –path c:\\start\\start.xml\nImport-StartLayout -layoutpath c:\\start\\start.xml -mountpath \"C:\\\"\n",[42162],{"type":597,"tag":629,"props":42163,"children":42164},{"__ignoreMap":591},[42165],{"type":603,"value":42160},{"type":597,"tag":598,"props":42167,"children":42169},{"id":42168},"其他路径",[42170],{"type":603,"value":42168},{"type":597,"tag":606,"props":42172,"children":42173},{},[42174],{"type":603,"value":42175},"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs",{"type":597,"tag":606,"props":42177,"children":42178},{},[42179],{"type":603,"value":42180},"C:\\Users\\zhepama\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs",{"type":597,"tag":598,"props":42182,"children":42183},{"id":32788},[42184],{"type":603,"value":32788},{"type":597,"tag":1321,"props":42186,"children":42187},{},[42188,42197],{"type":597,"tag":807,"props":42189,"children":42190},{},[42191],{"type":597,"tag":886,"props":42192,"children":42195},{"href":42193,"rel":42194},"https://docs.microsoft.com/zh-cn/windows/configuration/customize-and-export-start-layout#export-the-start-layout",[890],[42196],{"type":603,"value":42193},{"type":597,"tag":807,"props":42198,"children":42199},{},[42200],{"type":597,"tag":886,"props":42201,"children":42204},{"href":42202,"rel":42203},"https://docs.microsoft.com/en-us/powershell/module/startlayout/import-startlayout?view=win10-ps",[890],[42205],{"type":603,"value":42202},{"title":591,"searchDepth":787,"depth":787,"links":42207},[42208,42209],{"id":42168,"depth":787,"text":42168},{"id":32788,"depth":787,"text":32788},"content:tool:2020-07-02-win10-start-menu.md","tool/2020-07-02-win10-start-menu.md","2020-07-02",{"_path":457,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":456,"description":42214,"body":42215,"_type":791,"_id":42808,"_source":793,"_file":42809,"_extension":795,"date":42810},"一、前言刚开始接触 Unity3D 的时候，经常会被 Unity 中各种坐标系搞得昏头转向不知所措，毕竟是一个 3D 兼 2D 游戏开发殷勤，还要把 3D 作品最终发布到 2D 的桌面或者手机系统中，所以熟悉掌握 Unity3D 中的坐标系是非产重要的。其实如果仅仅只有 3D 坐标系还是很简单的，就目前来说我们所见过的三维建模软件或者游戏开发软件所用的坐标系分两种：左手坐标系和右手坐标系。怎么区别呢？大家看下图就知道了：区分坐标系可以按上图方法，这里我也有个简单的判断方法：用手握住 z 轴，大拇指朝向 z 轴正方向，然后用手的四指从 x 轴正方向握拳头，如果是左手 90 度就能把四指握到 y ",{"type":594,"children":42216,"toc":42803},[42217,42223,42228,42233,42241,42246,42251,42257,42262,42285,42293,42298,42306,42319,42330,42382,42390,42398,42403,42424,42432,42467,42480,42488,42496,42501,42580,42608,42616,42621,42629,42634,42642,42701,42709,42722,42731,42758,42770,42778,42783,42792,42798],{"type":597,"tag":598,"props":42218,"children":42220},{"id":42219},"一前言",[42221],{"type":603,"value":42222},"一、前言",{"type":597,"tag":606,"props":42224,"children":42225},{},[42226],{"type":603,"value":42227},"刚开始接触 Unity3D 的时候，经常会被 Unity 中各种坐标系搞得昏头转向不知所措，毕竟是一个 3D 兼 2D 游戏开发殷勤，还要把 3D 作品最终发布到 2D 的桌面或者手机系统中，所以熟悉掌握 Unity3D 中的坐标系是非产重要的。",{"type":597,"tag":606,"props":42229,"children":42230},{},[42231],{"type":603,"value":42232},"其实如果仅仅只有 3D 坐标系还是很简单的，就目前来说我们所见过的三维建模软件或者游戏开发软件所用的坐标系分两种：左手坐标系和右手坐标系。怎么区别呢？大家看下图就知道了：",{"type":597,"tag":606,"props":42234,"children":42235},{},[42236],{"type":597,"tag":719,"props":42237,"children":42240},{"alt":42238,"src":42239},"zggtdzunj4","/images/2020-07-01-unity-coordinate/zggtdzunj4.jpeg",[],{"type":597,"tag":606,"props":42242,"children":42243},{},[42244],{"type":603,"value":42245},"区分坐标系可以按上图方法，这里我也有个简单的判断方法：用手握住 z 轴，大拇指朝向 z 轴正方向，然后用手的四指从 x 轴正方向握拳头，如果是左手 90 度就能把四指握到 y 轴就是左手坐标系，如果是右手 90 度握紧后到了 y 轴就是右手坐标系。",{"type":597,"tag":606,"props":42247,"children":42248},{},[42249],{"type":603,"value":42250},"除了 3D 世界中的坐标系，还有其他的几个坐标系也非常常用，比如我们经常要把世界三维坐标系转换成我们最终屏幕中的二维坐标系，或者把手机屏幕的二维坐标系转化成游戏世界中的三维坐标系等，各个坐标系各有特别，不能混用，为了更好的学习 Unity 游戏开发，自己在此总结一下 Unity 当中的坐标系和相关用法，以作备忘和学习。",{"type":597,"tag":598,"props":42252,"children":42254},{"id":42253},"二坐标体系",[42255],{"type":603,"value":42256},"二、坐标体系",{"type":597,"tag":606,"props":42258,"children":42259},{},[42260],{"type":603,"value":42261},"Unity3D 当中基本的坐标体系主要有下面这四种：",{"type":597,"tag":803,"props":42263,"children":42264},{},[42265,42270,42275,42280],{"type":597,"tag":807,"props":42266,"children":42267},{},[42268],{"type":603,"value":42269},"世界坐标系 (World Space)",{"type":597,"tag":807,"props":42271,"children":42272},{},[42273],{"type":603,"value":42274},"屏幕坐标系 (Screen Space)",{"type":597,"tag":807,"props":42276,"children":42277},{},[42278],{"type":603,"value":42279},"视口坐标系 (Viewport Space)",{"type":597,"tag":807,"props":42281,"children":42282},{},[42283],{"type":603,"value":42284},"GUI界面坐标系 (GUI System)",{"type":597,"tag":606,"props":42286,"children":42287},{},[42288],{"type":597,"tag":719,"props":42289,"children":42292},{"alt":42290,"src":42291},"7ku2m8quf5","/images/2020-07-01-unity-coordinate/7ku2m8quf5.jpeg",[],{"type":597,"tag":606,"props":42294,"children":42295},{},[42296],{"type":603,"value":42297},"这四种坐标系可以说没有一个是完全相同的，各个坐标系所代表的意思也可以从字面含义中理解出来，它们之间都是可以相互转换的，不过 GUI 坐标体系除外，它比较特殊，也相对来说是最简单的，那么我们就从最简单的说起吧。",{"type":597,"tag":606,"props":42299,"children":42300},{},[42301],{"type":597,"tag":1080,"props":42302,"children":42303},{},[42304],{"type":603,"value":42305},"1. 绘制 GUI 界面的坐标体系",{"type":597,"tag":606,"props":42307,"children":42308},{},[42309,42311,42317],{"type":603,"value":42310},"我们在做 Unity 游戏开发的时候，经常会使用内置的 GUI 来做一些测试，比如显示一个按钮控制游戏，画一个文本显示相关信息等。它的代码全部控制在 ",{"type":597,"tag":629,"props":42312,"children":42314},{"className":42313},[],[42315],{"type":603,"value":42316},"OnGUI()",{"type":603,"value":42318}," 函数中：",{"type":597,"tag":621,"props":42320,"children":42325},{"className":42321,"code":42323,"language":42324,"meta":591},[42322],"language-javascript","private void OnGUI()\n{\n    if (GUI.Button(new Rect(0f, 0f, 160f, 40f), \"Click Me\"))\n    {\n        //button clicked and do something here...\n    }\n}\n","javascript",[42326],{"type":597,"tag":629,"props":42327,"children":42328},{"__ignoreMap":591},[42329],{"type":603,"value":42323},{"type":597,"tag":606,"props":42331,"children":42332},{},[42333,42335,42340,42342,42348,42350,42356,42358,42364,42366,42372,42374,42380],{"type":603,"value":42334},"这个按钮 ",{"type":597,"tag":629,"props":42336,"children":42338},{"className":42337},[],[42339],{"type":603,"value":28794},{"type":603,"value":42341}," 所在的坐标系就是 GUI 绘制坐标系。大家稍微测试一下就知道了，它的原点 ",{"type":597,"tag":629,"props":42343,"children":42345},{"className":42344},[],[42346],{"type":603,"value":42347},"(0, 0)",{"type":603,"value":42349}," 在最左上角，因为屏幕宽度是 ",{"type":597,"tag":629,"props":42351,"children":42353},{"className":42352},[],[42354],{"type":603,"value":42355},"Screen.width",{"type":603,"value":42357}," ，高度是 ",{"type":597,"tag":629,"props":42359,"children":42361},{"className":42360},[],[42362],{"type":603,"value":42363},"Screen.height",{"type":603,"value":42365}," ，所以 GUI 体系右下角的坐标为： ",{"type":597,"tag":629,"props":42367,"children":42369},{"className":42368},[],[42370],{"type":603,"value":42371},"(Screen.width, Screen.height)",{"type":603,"value":42373}," , 这是一个二维的坐标体系，坐标 ",{"type":597,"tag":629,"props":42375,"children":42377},{"className":42376},[],[42378],{"type":603,"value":42379},"z",{"type":603,"value":42381}," 的值都为 0 。大家可以看下图加深理解：",{"type":597,"tag":606,"props":42383,"children":42384},{},[42385],{"type":597,"tag":719,"props":42386,"children":42389},{"alt":42387,"src":42388},"ojb5jzsb2r","/images/2020-07-01-unity-coordinate/ojb5jzsb2r.jpeg",[],{"type":597,"tag":606,"props":42391,"children":42392},{},[42393],{"type":597,"tag":1080,"props":42394,"children":42395},{},[42396],{"type":603,"value":42397},"2. 视口 Viewport 坐标体系",{"type":597,"tag":606,"props":42399,"children":42400},{},[42401],{"type":603,"value":42402},"当我们使用多个相机，在同一个场景中显示多个视口的时候，我们就需要用上视口坐标系了。",{"type":597,"tag":606,"props":42404,"children":42405},{},[42406,42408,42414,42416,42422],{"type":603,"value":42407},"视口坐标系对于场景的显示非常重要，对于新手来说我们经常使用一个相机就够了，但是当需要使用到多个视口的时候，我们就必须关注视口坐标体系了，大家可以在相机 ",{"type":597,"tag":629,"props":42409,"children":42411},{"className":42410},[],[42412],{"type":603,"value":42413},"Camera",{"type":603,"value":42415}," 的属性中看到 ",{"type":597,"tag":629,"props":42417,"children":42419},{"className":42418},[],[42420],{"type":603,"value":42421},"Viewport Rect",{"type":603,"value":42423}," 就是视口坐标系的设置：",{"type":597,"tag":606,"props":42425,"children":42426},{},[42427],{"type":597,"tag":719,"props":42428,"children":42431},{"alt":42429,"src":42430},"x9myhu3k73","/images/2020-07-01-unity-coordinate/x9myhu3k73.jpeg",[],{"type":597,"tag":606,"props":42433,"children":42434},{},[42435,42437,42443,42445,42450,42452,42458,42460,42465],{"type":603,"value":42436},"一个相机对应一个视口，视口预览（ Camera Preview ）展示了相机所看到的所有物体，很显然，它默认大小是 ",{"type":597,"tag":629,"props":42438,"children":42440},{"className":42439},[],[42441],{"type":603,"value":42442},"(width = 1, height = 1)",{"type":603,"value":42444}," ，位置也是从 0 到 1 ，这个位置就是我们所讨论的坐标系：左下角为 ",{"type":597,"tag":629,"props":42446,"children":42448},{"className":42447},[],[42449],{"type":603,"value":42347},{"type":603,"value":42451}," ，右上角是 ",{"type":597,"tag":629,"props":42453,"children":42455},{"className":42454},[],[42456],{"type":603,"value":42457},"(1, 1)",{"type":603,"value":42459}," ，一般视口坐标系主要用在相机显示中，我们简单的进行 ",{"type":597,"tag":629,"props":42461,"children":42463},{"className":42462},[],[42464],{"type":603,"value":42421},{"type":603,"value":42466}," 的设置就可以了。",{"type":597,"tag":606,"props":42468,"children":42469},{},[42470,42472,42478],{"type":603,"value":42471},"另外，新手朋友们可以记住这么一个快捷键： ",{"type":597,"tag":629,"props":42473,"children":42475},{"className":42474},[],[42476],{"type":603,"value":42477},"Ctrl + Shift + F",{"type":603,"value":42479}," ，可以快速设置相机视口到当前场景窗口的视口位置。下图是视口坐标系和鼠标在屏幕上的坐标系的转换结果：",{"type":597,"tag":606,"props":42481,"children":42482},{},[42483],{"type":597,"tag":719,"props":42484,"children":42487},{"alt":42485,"src":42486},"6hkl5q24ft","/images/2020-07-01-unity-coordinate/6hkl5q24ft.jpeg",[],{"type":597,"tag":606,"props":42489,"children":42490},{},[42491],{"type":597,"tag":1080,"props":42492,"children":42493},{},[42494],{"type":603,"value":42495},"3. 屏幕 Screen 坐标体系",{"type":597,"tag":606,"props":42497,"children":42498},{},[42499],{"type":603,"value":42500},"嗯，非常重要！不管怎样，最终我们所有的成果都会发布到各个平台（屏幕）上，所以，任何坐标系的坐标和屏幕坐标系的转换都是非常重要的。比如我们经常需要处理鼠标的相关事件（鼠标位置、单击、双击事件等），或者手机上的触摸反馈，这些原始数据都是屏幕坐标系相关的。",{"type":597,"tag":606,"props":42502,"children":42503},{},[42504,42506,42512,42514,42519,42521,42526,42528,42533,42535,42540,42542,42547,42549,42554,42556,42562,42564,42570,42572,42578],{"type":603,"value":42505},"虽然重要，其实屏幕坐标系处理起来很简单直接， ",{"type":597,"tag":629,"props":42507,"children":42509},{"className":42508},[],[42510],{"type":603,"value":42511},"Input.mousePosition",{"type":603,"value":42513}," 获取的就是鼠标在屏幕中的位置坐标。大家可以测试一下，屏幕坐标系中原点 ",{"type":597,"tag":629,"props":42515,"children":42517},{"className":42516},[],[42518],{"type":603,"value":42347},{"type":603,"value":42520}," 位于左下角，那么右上角必然就是 ",{"type":597,"tag":629,"props":42522,"children":42524},{"className":42523},[],[42525],{"type":603,"value":42371},{"type":603,"value":42527}," ，对了，还有一个 ",{"type":597,"tag":629,"props":42529,"children":42531},{"className":42530},[],[42532],{"type":603,"value":42379},{"type":603,"value":42534}," 呢？都为 0 吗？答案是肯定的，既然是二维坐标系那么 ",{"type":597,"tag":629,"props":42536,"children":42538},{"className":42537},[],[42539],{"type":603,"value":42379},{"type":603,"value":42541}," 肯定是 0 了，和 GUI 坐标系一样，但是话又说回来，屏幕坐标系转换成世界坐标系 ",{"type":597,"tag":629,"props":42543,"children":42545},{"className":42544},[],[42546],{"type":603,"value":42379},{"type":603,"value":42548}," 还是 0 吗？其实不然，屏幕坐标转换成世界坐标后物体的 ",{"type":597,"tag":629,"props":42550,"children":42552},{"className":42551},[],[42553],{"type":603,"value":42379},{"type":603,"value":42555}," 值是取决于相机的，因此： ",{"type":597,"tag":629,"props":42557,"children":42559},{"className":42558},[],[42560],{"type":603,"value":42561},"gameObject.z = camera.z",{"type":603,"value":42563}," ，其实在上面视口坐标系介绍中的图中我已经把 ",{"type":597,"tag":629,"props":42565,"children":42567},{"className":42566},[],[42568],{"type":603,"value":42569},"Mouse Point",{"type":603,"value":42571}," 鼠标位置转换成世界坐标（ ",{"type":597,"tag":629,"props":42573,"children":42575},{"className":42574},[],[42576],{"type":603,"value":42577},"World Point",{"type":603,"value":42579}," ）了，大家应该注意到了吧。",{"type":597,"tag":606,"props":42581,"children":42582},{},[42583,42585,42590,42592,42598,42600,42606],{"type":603,"value":42584},"那么，除了坐标系的转换，还有什么值得注意的呢？这里我要告诉大家的是，我们在控制相机的时候，因为屏幕显示的就是相机所看到的内容，而",{"type":597,"tag":1080,"props":42586,"children":42587},{},[42588],{"type":603,"value":42589},"屏幕的宽高比直接影响了相机的显示",{"type":603,"value":42591},"，也就是 ",{"type":597,"tag":629,"props":42593,"children":42595},{"className":42594},[],[42596],{"type":603,"value":42597},"Aspect Ratio",{"type":603,"value":42599}," 的值，大家可以在 Game 面板中轻松地设置 ",{"type":597,"tag":629,"props":42601,"children":42603},{"className":42602},[],[42604],{"type":603,"value":42605},"Aspect",{"type":603,"value":42607}," 宽高比，查看对游戏画面的影响：",{"type":597,"tag":606,"props":42609,"children":42610},{},[42611],{"type":597,"tag":719,"props":42612,"children":42615},{"alt":42613,"src":42614},"cmpbepr0jw","/images/2020-07-01-unity-coordinate/cmpbepr0jw.jpeg",[],{"type":597,"tag":606,"props":42617,"children":42618},{},[42619],{"type":603,"value":42620},"如下图，相机的宽高比和屏幕宽高比一致，显示结果也一致：",{"type":597,"tag":606,"props":42622,"children":42623},{},[42624],{"type":597,"tag":719,"props":42625,"children":42628},{"alt":42626,"src":42627},"a0qyr11woq","/images/2020-07-01-unity-coordinate/a0qyr11woq.jpeg",[],{"type":597,"tag":606,"props":42630,"children":42631},{},[42632],{"type":603,"value":42633},"如果相机的宽高比设置的和屏幕宽高比不一样的话，显示结果就有点不同了：",{"type":597,"tag":606,"props":42635,"children":42636},{},[42637],{"type":597,"tag":719,"props":42638,"children":42641},{"alt":42639,"src":42640},"iadfp03ffu","/images/2020-07-01-unity-coordinate/iadfp03ffu.jpeg",[],{"type":597,"tag":606,"props":42643,"children":42644},{},[42645,42647,42653,42655,42661,42663,42669,42671,42677,42678,42684,42686,42692,42694,42699],{"type":603,"value":42646},"所以，在游戏开发中，**我们要重视相机的宽高比 **",{"type":597,"tag":629,"props":42648,"children":42650},{"className":42649},[],[42651],{"type":603,"value":42652},"Camera.aspect",{"type":603,"value":42654}," 的值，一般我们会保持相机宽高比不变，然后通过改变相机的视口尺寸 ",{"type":597,"tag":629,"props":42656,"children":42658},{"className":42657},[],[42659],{"type":603,"value":42660},"Camera.orthographicSize",{"type":603,"value":42662}," 来显示场景中需要显示的物体，关于这个主题我会在我的下一篇文章中提到，大家可以关注我的博客。如何通过宽高比获取摄像机视口尺寸呢？首先可以从上图中知道宽高比的计算方法： ",{"type":597,"tag":629,"props":42664,"children":42666},{"className":42665},[],[42667],{"type":603,"value":42668},"aspect = width / height",{"type":603,"value":42670}," ，当你同时获取到 ",{"type":597,"tag":629,"props":42672,"children":42674},{"className":42673},[],[42675],{"type":603,"value":42676},"width",{"type":603,"value":13757},{"type":597,"tag":629,"props":42679,"children":42681},{"className":42680},[],[42682],{"type":603,"value":42683},"height",{"type":603,"value":42685}," 的时候，你通过 ",{"type":597,"tag":629,"props":42687,"children":42689},{"className":42688},[],[42690],{"type":603,"value":42691},"Mathf.Max(height, width / aspect)",{"type":603,"value":42693}," 来得出最终的尺寸大小（",{"type":597,"tag":1733,"props":42695,"children":42696},{},[42697],{"type":603,"value":42698},"注意这个结果是 2 倍视口尺寸哦",{"type":603,"value":42700},"）。这个在游戏场景中应用的还是比较多的，比如你有这么个需求：两个玩家移动对战，你的相机要把两个移动的玩家随时放置在屏幕显示中。",{"type":597,"tag":606,"props":42702,"children":42703},{},[42704],{"type":597,"tag":1080,"props":42705,"children":42706},{},[42707],{"type":603,"value":42708},"4. 世界 World 三维坐标系",{"type":597,"tag":606,"props":42710,"children":42711},{},[42712,42714,42720],{"type":603,"value":42713},"最后，世界坐标系！世界坐标系不是最简单的，但却是我们最常用的坐标系。记住一点，任何情况下： ",{"type":597,"tag":629,"props":42715,"children":42717},{"className":42716},[],[42718],{"type":603,"value":42719},"transform.position",{"type":603,"value":42721}," 都是返回物体的世界坐标值，及时你所使用的是子物体！另外，从上面所讲的屏幕坐标系转换成世界坐标系也是非常简单的，它以当前相机为参考：",{"type":597,"tag":621,"props":42723,"children":42726},{"className":42724,"code":42725,"language":42324,"meta":591},[42322],"var position = Input.mousePosition;\nvar worldPoint = Camera.main.ScreenToWorldPoint(position);\n",[42727],{"type":597,"tag":629,"props":42728,"children":42729},{"__ignoreMap":591},[42730],{"type":603,"value":42725},{"type":597,"tag":606,"props":42732,"children":42733},{},[42734,42736,42741,42743,42749,42751,42756],{"type":603,"value":42735},"另一方面，我们在游戏开发过程中，经常要处理",{"type":597,"tag":1080,"props":42737,"children":42738},{},[42739],{"type":603,"value":42740},"子物体",{"type":603,"value":42742},"的相对 ",{"type":597,"tag":629,"props":42744,"children":42746},{"className":42745},[],[42747],{"type":603,"value":42748},"transform",{"type":603,"value":42750}," 值，这个时候我们就需要稍微动点脑子了，当然如何转变 Unity 已经帮我们预制好相应的函数方法了，你只要",{"type":597,"tag":1080,"props":42752,"children":42753},{},[42754],{"type":603,"value":42755},"把父物体当做世界，子物体当做世界中的物体",{"type":603,"value":42757},"，使用这些函数，换一下坐标就和处理绝对坐标一样了，不知道大家理解没有。我举个例子，我们在游戏开发中会遇到这种情况，你的相机如果直接放到世界中那么必然会需要调整它的旋转角度才能达到满意的视口位置，如何不让相机产生任何旋转就能把世界中的游戏物体放到合适的视口位置呢？",{"type":597,"tag":606,"props":42759,"children":42760},{},[42761,42763,42768],{"type":603,"value":42762},"办法就是：我们",{"type":597,"tag":1080,"props":42764,"children":42765},{},[42766],{"type":603,"value":42767},"把相机放到一个产生了合适旋转角度的父物体当中！这样做的效果就是：相机就相当于子物体，父物体旋转了，子物体就不需要额外旋转了，这时候相机的",{"type":603,"value":42769},"局部旋转就为 0 。这在有些场景中使用起来很方便，相机已经是父物体世界中的子物体了。",{"type":597,"tag":606,"props":42771,"children":42772},{},[42773],{"type":597,"tag":719,"props":42774,"children":42777},{"alt":42775,"src":42776},"cjali0ffbs","/images/2020-07-01-unity-coordinate/cjali0ffbs.jpeg",[],{"type":597,"tag":606,"props":42779,"children":42780},{},[42781],{"type":603,"value":42782},"怎么计算相对坐标呢？在 Unity 中都有相应的函数，使用比较简单：",{"type":597,"tag":621,"props":42784,"children":42787},{"className":42785,"code":42786,"language":42324,"meta":591},[42322],"//获取的是世界坐标\nvar childPosition = childObject.transform.position;\n//转化为父物体下的相对坐标，相当于位于父物体世界中\nvar relativePosition = parentObject.transform.InverseTransformPoint(childPosition);\n//转化为世界坐标，注意：这里不能传入 childPosition ，因为 childPosition 就是世界坐标\nvar worldPosition = parentObject.transform.TransformPoint(relativePosition);\n\n//所以，下面结果是相等的！\nprint(childPosition == worldPosition);\n",[42788],{"type":597,"tag":629,"props":42789,"children":42790},{"__ignoreMap":591},[42791],{"type":603,"value":42786},{"type":597,"tag":598,"props":42793,"children":42795},{"id":42794},"三总结",[42796],{"type":603,"value":42797},"三、总结",{"type":597,"tag":606,"props":42799,"children":42800},{},[42801],{"type":603,"value":42802},"当然，在使用坐标系过程中我们还要关注其他方方面面，比如欧拉角的旋转，万向锁，平滑过渡视野等等，这些我想我会在后面的文章总结中写道吧。这次就总结介绍了这几个坐标系，看上去有点复杂，总体来说还是挺很好理解的，有什么不对的或者可以加强的请给我留言，谢谢！",{"title":591,"searchDepth":787,"depth":787,"links":42804},[42805,42806,42807],{"id":42219,"depth":787,"text":42222},{"id":42253,"depth":787,"text":42256},{"id":42794,"depth":787,"text":42797},"content:unity:2020-07-01-unity-coordinate.md","unity/2020-07-01-unity-coordinate.md","2020-07-01",{"_path":303,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":302,"description":42812,"body":42813,"_type":791,"_id":43012,"_source":793,"_file":43013,"_extension":795,"date":43014},"作为程序员，最大的同性交友网站估计是大家的标配了，常常会苦恼于git clone某个项目的时候速度太慢，看着控制台那几K十一二K的速度，吐血！！",{"type":594,"children":42814,"toc":43003},[42815,42819,42833,42839,42860,42866,42877,42883,42889,42898,42903,42912,42917,42926,42932,42941,42946,42955,42960,42969,42975,42980,42989,42994],{"type":597,"tag":606,"props":42816,"children":42817},{},[42818],{"type":603,"value":42812},{"type":597,"tag":606,"props":42820,"children":42821},{},[42822,42824,42831],{"type":603,"value":42823},"原因很简单：github的",{"type":597,"tag":886,"props":42825,"children":42828},{"href":42826,"rel":42827},"https://cloud.tencent.com/product/cdn?from=10680",[890],[42829],{"type":603,"value":42830},"CDN",{"type":603,"value":42832},"被高高的墙屏蔽所致了。 所以解决方案也很简单，就是手动把 cdn 和IP地址绑定一下。",{"type":597,"tag":598,"props":42834,"children":42836},{"id":42835},"_1获取github地址",[42837],{"type":603,"value":42838},"1、获取github地址",{"type":597,"tag":606,"props":42840,"children":42841},{},[42842,42844,42850,42852,42858],{"type":603,"value":42843},"访问 ",{"type":597,"tag":886,"props":42845,"children":42848},{"href":42846,"rel":42847},"http://github.com.ipaddress.com/",[890],[42849],{"type":603,"value":42846},{"type":603,"value":42851}," 获取cdn域名以及ip地址..或者打开 ",{"type":597,"tag":886,"props":42853,"children":42856},{"href":42854,"rel":42855},"http://tool.chinaz.com/dns",[890],[42857],{"type":603,"value":42854},{"type":603,"value":42859}," ,这是一个查询域名映射关系的工具",{"type":597,"tag":598,"props":42861,"children":42863},{"id":42862},"_2获取-globalsslfastly地址",[42864],{"type":603,"value":42865},"2、获取 global.ssl.fastly地址",{"type":597,"tag":606,"props":42867,"children":42868},{},[42869,42875],{"type":597,"tag":886,"props":42870,"children":42873},{"href":42871,"rel":42872},"http://github.global.ssl.fastly.net.ipaddress.com/",[890],[42874],{"type":603,"value":42871},{"type":603,"value":42876}," 获取cdn域名以及ip地址",{"type":597,"tag":598,"props":42878,"children":42880},{"id":42879},"_3打开hosts映射",[42881],{"type":603,"value":42882},"3、打开hosts映射",{"type":597,"tag":1023,"props":42884,"children":42886},{"id":42885},"windows环境",[42887],{"type":603,"value":42888},"Windows环境",{"type":597,"tag":621,"props":42890,"children":42893},{"className":42891,"code":42892,"language":42324,"meta":591},[42322],"C:\\Windows\\System32\\drivers\\etc\\hosts\n",[42894],{"type":597,"tag":629,"props":42895,"children":42896},{"__ignoreMap":591},[42897],{"type":603,"value":42892},{"type":597,"tag":606,"props":42899,"children":42900},{},[42901],{"type":603,"value":42902},"最末尾添加两句话保存:",{"type":597,"tag":621,"props":42904,"children":42907},{"className":42905,"code":42906,"language":42324,"meta":591},[42322],"151.101.185.194 http://github.global.ssl.fastly.net \n192.30.253.112 http://github.com\n",[42908],{"type":597,"tag":629,"props":42909,"children":42910},{"__ignoreMap":591},[42911],{"type":603,"value":42906},{"type":597,"tag":606,"props":42913,"children":42914},{},[42915],{"type":603,"value":42916},"打开CMD刷新一下DNS就好了。",{"type":597,"tag":621,"props":42918,"children":42921},{"className":42919,"code":42920,"language":42324,"meta":591},[42322],"ipconfig /flushdns\n",[42922],{"type":597,"tag":629,"props":42923,"children":42924},{"__ignoreMap":591},[42925],{"type":603,"value":42920},{"type":597,"tag":1023,"props":42927,"children":42929},{"id":42928},"linux环境",[42930],{"type":603,"value":42931},"Linux环境",{"type":597,"tag":621,"props":42933,"children":42936},{"className":42934,"code":42935,"language":42324,"meta":591},[42322],"sudo vi /etc/hosts\n",[42937],{"type":597,"tag":629,"props":42938,"children":42939},{"__ignoreMap":591},[42940],{"type":603,"value":42935},{"type":597,"tag":606,"props":42942,"children":42943},{},[42944],{"type":603,"value":42945},"添加",{"type":597,"tag":621,"props":42947,"children":42950},{"className":42948,"code":42949,"language":42324,"meta":591},[42322],"192.30.253.112 https://github.com\n151.101.185.194 https://github.global.ssl.fastly.net \n",[42951],{"type":597,"tag":629,"props":42952,"children":42953},{"__ignoreMap":591},[42954],{"type":603,"value":42949},{"type":597,"tag":606,"props":42956,"children":42957},{},[42958],{"type":603,"value":42959},"保存,退出,并重启网络",{"type":597,"tag":621,"props":42961,"children":42964},{"className":42962,"code":42963,"language":42324,"meta":591},[42322],"systemctl restart network\n",[42965],{"type":597,"tag":629,"props":42966,"children":42967},{"__ignoreMap":591},[42968],{"type":603,"value":42963},{"type":597,"tag":598,"props":42970,"children":42972},{"id":42971},"速度对比",[42973],{"type":603,"value":42974},"速度对比:",{"type":597,"tag":606,"props":42976,"children":42977},{},[42978],{"type":603,"value":42979},"配置前",{"type":597,"tag":621,"props":42981,"children":42984},{"className":42982,"code":42983,"language":42324,"meta":591},[42322],"Receiving objects:  17% (151/883), 348.00 KiB | 18.00 KiB/s\n",[42985],{"type":597,"tag":629,"props":42986,"children":42987},{"__ignoreMap":591},[42988],{"type":603,"value":42983},{"type":597,"tag":606,"props":42990,"children":42991},{},[42992],{"type":603,"value":42993},"配置后",{"type":597,"tag":621,"props":42995,"children":42998},{"className":42996,"code":42997,"language":42324,"meta":591},[42322],"Receiving objects:  81% (86141/104384), 81.31Mib | 562.00 KiB/s\n",[42999],{"type":597,"tag":629,"props":43000,"children":43001},{"__ignoreMap":591},[43002],{"type":603,"value":42997},{"title":591,"searchDepth":787,"depth":787,"links":43004},[43005,43006,43007,43011],{"id":42835,"depth":787,"text":42838},{"id":42862,"depth":787,"text":42865},{"id":42879,"depth":787,"text":42882,"children":43008},[43009,43010],{"id":42885,"depth":1530,"text":42888},{"id":42928,"depth":1530,"text":42931},{"id":42971,"depth":787,"text":42974},"content:tool:2020-06-27-linux-github-slow.md","tool/2020-06-27-linux-github-slow.md","2020-06-27",{"_path":300,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":299,"description":43016,"body":43017,"_type":791,"_id":43069,"_source":793,"_file":43070,"_extension":795,"date":43071},"RSSMailer | https://rssmailer.app/",{"type":594,"children":43018,"toc":43067},[43019,43031,43043,43054,43059],{"type":597,"tag":606,"props":43020,"children":43021},{},[43022,43024],{"type":603,"value":43023},"RSSMailer | ",{"type":597,"tag":886,"props":43025,"children":43028},{"href":43026,"rel":43027},"https://link.zhihu.com/?target=https%3A//rssmailer.app/",[890],[43029],{"type":603,"value":43030},"https://rssmailer.app/",{"type":597,"tag":606,"props":43032,"children":43033},{},[43034,43036],{"type":603,"value":43035},"Tinyletter | ",{"type":597,"tag":886,"props":43037,"children":43040},{"href":43038,"rel":43039},"https://link.zhihu.com/?target=https%3A//tinyletter.com/",[890],[43041],{"type":603,"value":43042},"tinyletter",{"type":597,"tag":606,"props":43044,"children":43045},{},[43046,43048],{"type":603,"value":43047},"Mailchimp| ",{"type":597,"tag":886,"props":43049,"children":43052},{"href":43050,"rel":43051},"https://mailchimp.com/",[890],[43053],{"type":603,"value":43050},{"type":597,"tag":606,"props":43055,"children":43056},{},[43057],{"type":603,"value":43058},"相关推荐:",{"type":597,"tag":621,"props":43060,"children":43062},{"code":43061}," - https://zhuanlan.zhihu.com/p/111978933\n - https://zhuanlan.zhihu.com/p/119325491\n - https://sspai.com/post/60025\n",[43063],{"type":597,"tag":629,"props":43064,"children":43065},{"__ignoreMap":591},[43066],{"type":603,"value":43061},{"title":591,"searchDepth":787,"depth":787,"links":43068},[],"content:tool:2020-06-26-blog-mail-sub.md","tool/2020-06-26-blog-mail-sub.md","2020-06-26",{"_path":98,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":97,"description":43073,"stitle":43074,"body":43075,"_type":791,"_id":43270,"_source":793,"_file":43271,"_extension":795,"date":43272},"DotHass.Lobby.Domain\\IdentityServer\\IdentityServerDataSeedContributor.cs 中 CreateClientsAsync()","IdentityServer使用指南",{"type":594,"children":43076,"toc":43268},[43077,43081,43086,43091,43099,43116,43125,43156,43164,43169,43174,43182,43187,43195,43200,43211,43219,43227,43231,43239,43251,43263],{"type":597,"tag":606,"props":43078,"children":43079},{},[43080],{"type":603,"value":43073},{"type":597,"tag":606,"props":43082,"children":43083},{},[43084],{"type":603,"value":43085},"会在dataseed的时候生成默认数据",{"type":597,"tag":606,"props":43087,"children":43088},{},[43089],{"type":603,"value":43090},"When I try to send a HTTPS POST request from a desktop (Servers are in production environment) the following message is displayed inside the console :",{"type":597,"tag":621,"props":43092,"children":43094},{"code":43093},"Error: unable to verify the first certificate\n",[43095],{"type":597,"tag":629,"props":43096,"children":43097},{"__ignoreMap":591},[43098],{"type":603,"value":43093},{"type":597,"tag":606,"props":43100,"children":43101},{},[43102,43104,43110,43111],{"type":603,"value":43103},"After: ",{"type":597,"tag":629,"props":43105,"children":43107},{"className":43106},[],[43108],{"type":603,"value":43109},"Postman -> Preferences -> General -> SSL certificate validation -> OFF",{"type":603,"value":4731},{"type":597,"tag":1080,"props":43112,"children":43113},{},[43114],{"type":603,"value":43115},"it works",{"type":597,"tag":606,"props":43117,"children":43118},{},[43119],{"type":597,"tag":886,"props":43120,"children":43123},{"href":43121,"rel":43122},"https://localhost:5000/.well-known/openid-configuration",[890],[43124],{"type":603,"value":43121},{"type":597,"tag":803,"props":43126,"children":43127},{},[43128,43145],{"type":597,"tag":807,"props":43129,"children":43130},{},[43131,43137,43140],{"type":597,"tag":886,"props":43132,"children":43135},{"href":43133,"rel":43134},"http://localhost:5000/connect/token",[890],[43136],{"type":603,"value":43133},{"type":597,"tag":1595,"props":43138,"children":43139},{},[],{"type":597,"tag":719,"props":43141,"children":43144},{"alt":43142,"src":43143},"image-20200613165200371","/images/2020-06-11-IdentityServer-use/image-20200613165200371.png",[],{"type":597,"tag":807,"props":43146,"children":43147},{},[43148,43154],{"type":597,"tag":886,"props":43149,"children":43152},{"href":43150,"rel":43151},"http://localhost:5000/connect/userinfo",[890],[43153],{"type":603,"value":43150},{"type":603,"value":43155}," 将type设置成bearer token,token填入上面获得的access_token",{"type":597,"tag":606,"props":43157,"children":43158},{},[43159],{"type":597,"tag":719,"props":43160,"children":43163},{"alt":43161,"src":43162},"image-20200613165246959","/images/2020-06-11-IdentityServer-use/image-20200613165246959.png",[],{"type":597,"tag":606,"props":43165,"children":43166},{},[43167],{"type":603,"value":43168},"3.注意发布release后.配置表中的  ..如果配置错误将会认证失败",{"type":597,"tag":606,"props":43170,"children":43171},{},[43172],{"type":603,"value":43173},"appsettings.json",{"type":597,"tag":621,"props":43175,"children":43177},{"code":43176},"{\n  \"App\": {\n    \"SelfUrl\": \"http://localhost:5000\"\n  },\n  \"ConnectionStrings\": {\n    \"Default\": \"Server=localhost;User Id=root;Password=123456;Database=dothass.blog\"\n  },\n  \"AuthServer\": {\n    \"Authority\": \"http://localhost:5000\"\n  },\n  \"IdentityServer\": {\n    \"Clients\": {\n      \"Blog_App\": {\n        \"ClientId\": \"Blog_App\"\n      }\n    }\n  }\n}\n",[43178],{"type":597,"tag":629,"props":43179,"children":43180},{"__ignoreMap":591},[43181],{"type":603,"value":43176},{"type":597,"tag":606,"props":43183,"children":43184},{},[43185],{"type":603,"value":43186},"appsettings.Development.json",{"type":597,"tag":621,"props":43188,"children":43190},{"code":43189},"{\n  \"App\": {\n    \"SelfUrl\": \"https://localhost:44377\"\n  },\n  \"AuthServer\": {\n    \"Authority\": \"https://localhost:44377\"\n  }\n}\n",[43191],{"type":597,"tag":629,"props":43192,"children":43193},{"__ignoreMap":591},[43194],{"type":603,"value":43189},{"type":597,"tag":606,"props":43196,"children":43197},{},[43198],{"type":603,"value":43199},"还要注意请求的域名是否一样,127.0.0.1或者localhost...可能返回结果即使一样.但是不能授权.",{"type":597,"tag":606,"props":43201,"children":43202},{},[43203,43204],{"type":603,"value":8220},{"type":597,"tag":886,"props":43205,"children":43208},{"href":43206,"rel":43207},"http://jwt.calebb.net/%E8%A7%A3%E6%9E%90%E7%9C%8B%E4%B8%8Baccess_token",[890],[43209],{"type":603,"value":43210},"http://jwt.calebb.net/解析看下access_token",{"type":597,"tag":621,"props":43212,"children":43214},{"code":43213},"{\n alg: \"RS256\",\n kid: \"1oauLjO2TtmvAH-4A7CCLg\",\n typ: \"at+jwt\"\n}.\n{\n nbf: 1592054993,\n exp: 1623590993,\n iss: \"http://127.0.0.1:5000\",\n aud: \"Blog\",\n client_id: \"Blog_App\",\n sub: \"fa9626f7-0f6f-6158-2afd-39f5a7f6d03f\",\n auth_time: 1592054993,\n idp: \"local\",\n role: \"admin\",\n name: \"admin\",\n email: \"admin@abp.io\",\n email_verified: false,\n scope: [\n  \"address\",\n  \"email\",\n  \"openid\",\n  \"phone\",\n  \"profile\",\n  \"role\",\n  \"Blog\",\n  \"offline_access\"\n ],\n amr: [\n  \"pwd\"\n ]\n}.\n",[43215],{"type":597,"tag":629,"props":43216,"children":43217},{"__ignoreMap":591},[43218],{"type":603,"value":43213},{"type":597,"tag":621,"props":43220,"children":43222},{"code":43221},"    {\n alg: \"RS256\",\n kid: \"1oauLjO2TtmvAH-4A7CCLg\",\n typ: \"at+jwt\"\n}.\n{\n nbf: 1592055396,\n exp: 1623591396,\n iss: \"http://localhost:5000\",\n aud: \"Blog\",\n client_id: \"Blog_App\",\n sub: \"fa9626f7-0f6f-6158-2afd-39f5a7f6d03f\",\n auth_time: 1592055396,\n idp: \"local\",\n role: \"admin\",\n name: \"admin\",\n email: \"admin@abp.io\",\n email_verified: false,\n scope: [\n  \"address\",\n  \"email\",\n  \"openid\",\n  \"phone\",\n  \"profile\",\n  \"role\",\n  \"Blog\",\n  \"offline_access\"\n ],\n amr: [\n  \"pwd\"\n ]\n}.\n",[43223],{"type":597,"tag":629,"props":43224,"children":43225},{"__ignoreMap":591},[43226],{"type":603,"value":43221},{"type":597,"tag":857,"props":43228,"children":43229},{"id":39116},[43230],{"type":603,"value":39116},{"type":597,"tag":621,"props":43232,"children":43234},{"code":43233},"System.InvalidOperationException: IDX20803: Unable to obtain configuration from: '[PII is hidden. For more details, see https://aka.ms/IdentityModel/PII.]'.\n ---> System.IO.IOException: IDX20804: Unable to retrieve document from: '[PII is hidden. For more details, see https://aka.ms/IdentityModel/PII.]'.\n ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\n ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.\n   at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\n   at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\n   at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\n   at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\n",[43235],{"type":597,"tag":629,"props":43236,"children":43237},{"__ignoreMap":591},[43238],{"type":603,"value":43233},{"type":597,"tag":606,"props":43240,"children":43241},{},[43242,43244,43249],{"type":603,"value":43243},"可以看出来这些问题是和SSL证书有关，经过排查，发现IdentityServer4配置中：使用了",{"type":597,"tag":1080,"props":43245,"children":43246},{},[43247],{"type":603,"value":43248},"IP",{"type":603,"value":43250},"的形式配置的授权地址，但是SSL证书是以域名形式申请的，这就造成了SSL证书不能验证通过。",{"type":597,"tag":606,"props":43252,"children":43253},{},[43254,43256,43261],{"type":603,"value":43255},"解决方法：",{"type":597,"tag":1080,"props":43257,"children":43258},{},[43259],{"type":603,"value":43260},"将授权地址配置为域名:端口的形式",{"type":603,"value":43262},"，完美解决上述问题。注意域名为SSL证书申请时用到的域名。",{"type":597,"tag":606,"props":43264,"children":43265},{},[43266],{"type":603,"value":43267},"localhost使用的是开发证书,也是类似域名,127.0.0.1也是有问题的",{"title":591,"searchDepth":787,"depth":787,"links":43269},[],"content:dotnet:2020-06-11-IdentityServer-use.md","dotnet/2020-06-11-IdentityServer-use.md","2020-06-11",{"_path":95,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":94,"description":43274,"body":43275,"_type":791,"_id":43435,"_source":793,"_file":43436,"_extension":795,"date":43437},"替换数据库为mysql替换mysql,Dothass.Blog.EntityFrameworkCore项目中\u003CPackageReference Include=\"Volo.Abp.EntityFrameworkCore.MySQL\" Version=\"2.8.0\" />\n删除之前的迁移目录修改连接字符串 项目Dothass.Blog.DbMigrator和Dothass.Blog.Web.. //详情请见https://www.connectionstrings.com/mysql/\n \"ConnectionStrings\": {\n    \"Default\": server=localhost",{"type":594,"children":43276,"toc":43433},[43277,43282,43290,43298,43326,43334,43348,43356,43367,43372,43407,43415,43423,43428],{"type":597,"tag":857,"props":43278,"children":43280},{"id":43279},"替换数据库为mysql",[43281],{"type":603,"value":43279},{"type":597,"tag":803,"props":43283,"children":43284},{},[43285],{"type":597,"tag":807,"props":43286,"children":43287},{},[43288],{"type":603,"value":43289},"替换mysql,Dothass.Blog.EntityFrameworkCore项目中",{"type":597,"tag":621,"props":43291,"children":43293},{"code":43292},"\u003CPackageReference Include=\"Volo.Abp.EntityFrameworkCore.MySQL\" Version=\"2.8.0\" />\n",[43294],{"type":597,"tag":629,"props":43295,"children":43296},{"__ignoreMap":591},[43297],{"type":603,"value":43292},{"type":597,"tag":803,"props":43299,"children":43300},{},[43301,43306],{"type":597,"tag":807,"props":43302,"children":43303},{},[43304],{"type":603,"value":43305},"删除之前的迁移目录",{"type":597,"tag":807,"props":43307,"children":43308},{},[43309,43311,43317,43318,43324],{"type":603,"value":43310},"修改连接字符串 项目",{"type":597,"tag":629,"props":43312,"children":43314},{"className":43313},[],[43315],{"type":603,"value":43316},"Dothass.Blog.DbMigrator",{"type":603,"value":695},{"type":597,"tag":629,"props":43319,"children":43321},{"className":43320},[],[43322],{"type":603,"value":43323},"Dothass.Blog.Web",{"type":603,"value":43325},"..",{"type":597,"tag":621,"props":43327,"children":43329},{"code":43328}," //详情请见https://www.connectionstrings.com/mysql/\n \"ConnectionStrings\": {\n    \"Default\": server=localhost;port=3306;database=dothass.blog;uid=root;password=123456\"\n },\n",[43330],{"type":597,"tag":629,"props":43331,"children":43332},{"__ignoreMap":591},[43333],{"type":603,"value":43328},{"type":597,"tag":803,"props":43335,"children":43336},{},[43337],{"type":597,"tag":807,"props":43338,"children":43339},{},[43340,43342],{"type":603,"value":43341},"生成新的迁移,nuget包管理器.默认项目设置为",{"type":597,"tag":629,"props":43343,"children":43345},{"className":43344},[],[43346],{"type":603,"value":43347},"Dothass.Blog.EntityFrameworkCore.DbMigrations",{"type":597,"tag":621,"props":43349,"children":43351},{"code":43350},"Add-Migration Init\n",[43352],{"type":597,"tag":629,"props":43353,"children":43354},{"__ignoreMap":591},[43355],{"type":603,"value":43350},{"type":597,"tag":606,"props":43357,"children":43358},{},[43359,43361],{"type":603,"value":43360},"相关链接: ",{"type":597,"tag":886,"props":43362,"children":43365},{"href":43363,"rel":43364},"https://docs.abp.io/zh-Hans/abp/latest/Entity-Framework-Core-MySQL",[890],[43366],{"type":603,"value":43363},{"type":597,"tag":857,"props":43368,"children":43370},{"id":43369},"初始化项目",[43371],{"type":603,"value":43369},{"type":597,"tag":803,"props":43373,"children":43374},{},[43375,43388],{"type":597,"tag":807,"props":43376,"children":43377},{},[43378,43380,43386],{"type":603,"value":43379},"将三个项目copy到程序中.然后在web项目中添加依赖",{"type":597,"tag":629,"props":43381,"children":43383},{"className":43382},[],[43384],{"type":603,"value":43385},"typeof(AbpExtensionWebModule)",{"type":603,"value":43387},"即可",{"type":597,"tag":807,"props":43389,"children":43390},{},[43391,43393,43399,43401],{"type":603,"value":43392},"修改migrationservice,",{"type":597,"tag":629,"props":43394,"children":43396},{"className":43395},[],[43397],{"type":603,"value":43398},"DotHass.Blog.Domain",{"type":603,"value":43400},"项目下",{"type":597,"tag":629,"props":43402,"children":43404},{"className":43403},[],[43405],{"type":603,"value":43406},"BlogDbMigrationService",{"type":597,"tag":621,"props":43408,"children":43410},{"code":43409},"  private async Task SeedDataAsync(Tenant tenant = null)\n  {\n        Logger.LogInformation($\"Executing {(tenant == null ? \"host\" : tenant.Name + \" tenant\")} database seed...\");\n\n        //IdentityDataSeedContributor : IDataSeedContributor ---> IIdentityDataSeeder\n        //手动实例化上下文,来设置admin的email和密码..或者替换IIdentityDataSeeder的service\n        var seedContext = new DataSeedContext(tenant?.Id);\n        var configurationSection = _configuration.GetSection(\"Identity\");\n        seedContext.WithProperty(\"AdminEmail\", configurationSection[\"AdminEmail\"]);\n        seedContext.WithProperty(\"AdminPassword\", configurationSection[\"AdminPassword\"]);\n\n        //PermissionDataSeedContributor : IDataSeedContributor  --->IPermissionDataSeeder\n        //为amidn添加权限 -- 一般来说不用改什么,但是需要在BlogDbMigratorModule中引用你设置权限的模块依赖..否则找不到你添加的权限\n\n        await _dataSeeder.SeedAsync(seedContext);\n    }\n",[43411],{"type":597,"tag":629,"props":43412,"children":43413},{"__ignoreMap":591},[43414],{"type":603,"value":43409},{"type":597,"tag":803,"props":43416,"children":43417},{},[43418],{"type":597,"tag":807,"props":43419,"children":43420},{},[43421],{"type":603,"value":43422},"执行项目Dothass.Blog.DbMigrator初始化数据",{"type":597,"tag":857,"props":43424,"children":43426},{"id":43425},"关于客户端js",[43427],{"type":603,"value":43425},{"type":597,"tag":606,"props":43429,"children":43430},{},[43431],{"type":603,"value":43432},"执行 yarn & gulp 将所有包都会将自己的资源复制到wwwroot/libs文件夹中. 否则一些模块例如博客的js时不会起作用的",{"title":591,"searchDepth":787,"depth":787,"links":43434},[],"content:dotnet:2020-05-29-abp-start.md","dotnet/2020-05-29-abp-start.md","2020-05-29",{"_path":297,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":296,"description":43439,"body":43440,"_type":791,"_id":43665,"_source":793,"_file":43666,"_extension":795,"date":43667},"Each derived class must have its base class marked with [ProtoInclude(, typeof(ProtoBuff-Derived-Class))]. If not, all values will be NULL.",{"type":594,"children":43441,"toc":43663},[43442,43448,43452,43460,43466,43478,43486,43491,43499,43505,43510,43518,43523,43552,43558,43563,43571,43576,43581,43589,43595,43600,43608,43613,43621,43627,43635,43640,43653,43658],{"type":597,"tag":857,"props":43443,"children":43445},{"id":43444},"base-derived-classes",[43446],{"type":603,"value":43447},"Base / Derived Classes",{"type":597,"tag":606,"props":43449,"children":43450},{},[43451],{"type":603,"value":43439},{"type":597,"tag":621,"props":43453,"children":43455},{"code":43454},"[ProtoContract]\n[ProtoInclude(100, typeof(HomeFolders))]\n[ProtoInclude(200, typeof(PublicFolders))]\npublic class Folders\n{\n  [ProtoMember(1)]\n  public int ProtoMember1 { get; set; }\n\n  [ProtoMember(2)]\n  public int ProtoMember2 { get; set; }\n}\n\n[ProtoContract]\npublic class HomeFolders : Folders\n{\n  [ProtoMember(1)]\n  public int ProtoMember4 { get; set; }\n}\n\n[ProtoContract]\npublic class PublicFolders : Folders\n{\n  [ProtoMember(1)]\n  public int ProtoMember5 { get; set; }\n}\n",[43456],{"type":597,"tag":629,"props":43457,"children":43458},{"__ignoreMap":591},[43459],{"type":603,"value":43454},{"type":597,"tag":857,"props":43461,"children":43463},{"id":43462},"avoid-duplicate-property-tags",[43464],{"type":603,"value":43465},"Avoid duplicate property tags",{"type":597,"tag":606,"props":43467,"children":43468},{},[43469,43471,43476],{"type":603,"value":43470},"Using the same number for ProtoInclude and ProtoMember will generate an error about duplicate property tags. The example below is ",{"type":597,"tag":1080,"props":43472,"children":43473},{},[43474],{"type":603,"value":43475},"NOT",{"type":603,"value":43477}," correct.",{"type":597,"tag":621,"props":43479,"children":43481},{"code":43480},"[ProtoContract]\n[ProtoInclude(1, typeof(PublicFolders))]\npublic class Folders\n{\n  [ProtoMember(1)]\n  public int ProtoMember1 { get; set; }\n}\n",[43482],{"type":597,"tag":629,"props":43483,"children":43484},{"__ignoreMap":591},[43485],{"type":603,"value":43480},{"type":597,"tag":606,"props":43487,"children":43488},{},[43489],{"type":603,"value":43490},"So you need to use a different number for ProtoInclude. Corrected example:",{"type":597,"tag":621,"props":43492,"children":43494},{"code":43493},"[ProtoContract]\n[ProtoInclude(100, typeof(PublicFolders))]\npublic class Folders\n{\n  [ProtoMember(1)]\n  public int ProtoMember1 { get; set; }\n}\n",[43495],{"type":597,"tag":629,"props":43496,"children":43497},{"__ignoreMap":591},[43498],{"type":603,"value":43493},{"type":597,"tag":857,"props":43500,"children":43502},{"id":43501},"null-vs-empty-collections",[43503],{"type":603,"value":43504},"Null vs. Empty Collections",{"type":597,"tag":606,"props":43506,"children":43507},{},[43508],{"type":603,"value":43509},"ProtoBuf does not understand the difference between a collection (List, IEnumerable etc) being null versus empty (zero count). For example, if you put these objects into the cache,",{"type":597,"tag":621,"props":43511,"children":43513},{"code":43512},"List\u003Cint> list1 = new List\u003Cint>();\nList\u003Cint> list2 = null;\n",[43514],{"type":597,"tag":629,"props":43515,"children":43516},{"__ignoreMap":591},[43517],{"type":603,"value":43512},{"type":597,"tag":606,"props":43519,"children":43520},{},[43521],{"type":603,"value":43522},"after deserialization, both the lists will have the same value—that is NULL. There are two ways to solve this:",{"type":597,"tag":803,"props":43524,"children":43525},{},[43526,43539],{"type":597,"tag":807,"props":43527,"children":43528},{},[43529,43531],{"type":603,"value":43530},"Using a private field (we are using this):",{"type":597,"tag":621,"props":43532,"children":43534},{"code":43533},"[ProtoMember(12, OverwriteList = true)]\nprivate List _publicFolders;\npublic List publicFolders\n{\n  get\n  {\n    if (_publicFolders == null)\n    {\n      _publicFolders = new List();\n    }\n    return _publicFolders;\n  }\n  set\n  {\n    _publicFolders = value;\n  }\n}\n",[43535],{"type":597,"tag":629,"props":43536,"children":43537},{"__ignoreMap":591},[43538],{"type":603,"value":43533},{"type":597,"tag":807,"props":43540,"children":43541},{},[43542,43544],{"type":603,"value":43543},"Using the OnDeserialized attribute:",{"type":597,"tag":621,"props":43545,"children":43547},{"code":43546},"[ProtoMember(2, OverwriteList = true)]\nprivate PublicFolder[] publicFolders;\n[ProtoMember(3, OverwriteList = true)]\nprivate PrivateFolder[] privateFolder;\n[ProtoMember(4, OverwriteList = true)]\nprivate SecureFolder[] secureFolder;\n\n[OnDeserialized]\nprivate void HandleSerializationMismatch(StreamingContext context)\n{\n  publicFolders = publicFolders ?? new PublicFolders[0];\n  privateFolder = privateFolder ?? new PrivateFolder[0];\n  secureFolder = secureFolder ?? new SecureFolder[0];\n}\n",[43548],{"type":597,"tag":629,"props":43549,"children":43550},{"__ignoreMap":591},[43551],{"type":603,"value":43546},{"type":597,"tag":857,"props":43553,"children":43555},{"id":43554},"things-to-remember",[43556],{"type":603,"value":43557},"Things to Remember",{"type":597,"tag":606,"props":43559,"children":43560},{},[43561],{"type":603,"value":43562},"ProtoBuf ignores properties if the class inherits from a collection and the Items property for that collection is null. Example:",{"type":597,"tag":621,"props":43564,"children":43566},{"code":43565},"public class Folders : List\n{\n  public int value1 { get; set; }\n\n  public int value2 { get; set; }\n}\n\nFolders folders = new Folders() { value1 = 5; value2 = 6; };\n",[43567],{"type":597,"tag":629,"props":43568,"children":43569},{"__ignoreMap":591},[43570],{"type":603,"value":43565},{"type":597,"tag":606,"props":43572,"children":43573},{},[43574],{"type":603,"value":43575},"After deserialization, the value of the Folders object will be NULL, because the count of items on is 0.",{"type":597,"tag":606,"props":43577,"children":43578},{},[43579],{"type":603,"value":43580},"Classes that inherit from special collections are also not supported.",{"type":597,"tag":621,"props":43582,"children":43584},{"code":43583},"public class Folders : ReadOnlyCollection\n{\n  public int value1 { get; set; }\n\n  public int value2 { get; set; }\n}\n\nFolders folders = new Folders() { value1 = 5; value2 = 6; };\n",[43585],{"type":597,"tag":629,"props":43586,"children":43587},{"__ignoreMap":591},[43588],{"type":603,"value":43583},{"type":597,"tag":857,"props":43590,"children":43592},{"id":43591},"allowparseabletypes",[43593],{"type":603,"value":43594},"AllowParseableTypes",{"type":597,"tag":606,"props":43596,"children":43597},{},[43598],{"type":603,"value":43599},"AllowParseableTypes is a global switch that determines whether types with “.ToString()” and “Parse(string)” methods should be serialized as strings. We can use this setting for types that can’t be marked in the ProtoContract but can be parseable.",{"type":597,"tag":621,"props":43601,"children":43603},{"code":43602},"static ProtoBufClient()\n{\n  RuntimeTypeModel.Default.AllowParseableTypes = true;\n}\n",[43604],{"type":597,"tag":629,"props":43605,"children":43606},{"__ignoreMap":591},[43607],{"type":603,"value":43602},{"type":597,"tag":606,"props":43609,"children":43610},{},[43611],{"type":603,"value":43612},"For example, to solve the serialization problem with the Version type:",{"type":597,"tag":621,"props":43614,"children":43616},{"code":43615},"[Serializable]\n[ProtoContract(SkipConstructor = true)]\n[ProtoInclude(100, typeof(PrivateFolder))]\n[ProtoInclude(200, typeof(PublicFolder))]\n[ProtoInclude(300, typeof(SecureFolder))]\npublic abstract class FolderBase : Folder\n{\n  ...\n\n  [ProtoMember(3)]\n  private string name;\n  [ProtoMember(4)]\n  private Owner owner;\n\n  ...\n}\n",[43617],{"type":597,"tag":629,"props":43618,"children":43619},{"__ignoreMap":591},[43620],{"type":603,"value":43615},{"type":597,"tag":857,"props":43622,"children":43624},{"id":43623},"protobuf-net-generics-on-unity3d-il2cpp",[43625],{"type":603,"value":43626},"Protobuf-net Generics on Unity3D IL2CPP.",{"type":597,"tag":621,"props":43628,"children":43630},{"code":43629},"public class CustomCollectionBase\u003CTCollection, TElement, TKey>\n{\n    protected TCollection _collection;\n\n    protected SortedDictionary\u003CTKey, bool> _removed;\n\n    public CustomCollectionBase(TCollection collection)\n    {\n        _collection = collection;\n    }\n\n    protected byte[] _cBytes;\n\n    protected byte[] _rBytes;\n\n    protected void __PreSerialize()\n    {\n        using (MemoryStream stream = new MemoryStream())\n        {\n            Serializer.Serialize(stream, this._collection);\n            this._cBytes = stream.ToArray();\n        }\n\n        using (MemoryStream stream = new MemoryStream())\n        {\n            Serializer.Serialize(stream, this._removed);\n            this._rBytes = stream.ToArray();\n        }\n    }\n\n    protected void __PostDeserialize()\n    {\n        using (MemoryStream stream = new MemoryStream(this._cBytes))\n        {\n            this._collection = Serializer.Deserialize\u003CTCollection>(stream);\n        }\n\n        using (MemoryStream stream = new MemoryStream(this._rBytes))\n        {\n            this._removed = Serializer.Deserialize\u003CSortedDictionary\u003CTKey, bool>>(stream);\n        }\n    }\n}\n\n[ProtoContract]\npublic class CustomList\u003CTElement> : CustomCollectionBase\u003CList\u003CTElement>, TElement, int>\n{\n    public CustomList() : base( new List\u003CTElement>())\n    {\n    }\n\n    [ProtoMember(1)]\n    private byte[] _cProto\n    {\n        get { return base._cBytes; }\n        set { base._cBytes = value; }\n    }\n\n    [ProtoMember(2)]\n    private byte[] _rProto\n    {\n        get { return base._rBytes; }\n        set { base._rBytes = value; }\n    }\n\n    [ProtoBeforeSerialization]\n    private void __PreSerialize()\n    {\n        base.__PreSerialize();\n    }\n\n    [ProtoAfterDeserialization]\n    private void __PostDeserialize()\n    {\n        base.__PostDeserialize();\n    }\n}\n\n[ProtoContract]\npublic class CustomIntDictionary\u003CTElement> : CustomCollectionBase\u003CDictionary\u003Cint, TElement>, TElement, int>\n{\n    public CustomIntDictionary() : base(new Dictionary\u003Cint, TElement>())\n    {\n    }\n\n    [ProtoMember(1)]\n    private byte[] _cProto\n    {\n        get { return base._cBytes; }\n        set { base._cBytes = value; }\n    }\n\n    [ProtoMember(2)]\n    private byte[] _rProto\n    {\n        get { return base._rBytes; }\n        set { base._rBytes = value; }\n    }\n\n    [ProtoBeforeSerialization]\n    private void __PreSerialize()\n    {\n        base.__PreSerialize();\n    }\n\n    [ProtoAfterDeserialization]\n    private void __PostDeserialize()\n    {\n        base.__PostDeserialize();\n    }\n}\n\n[ProtoContract]\npublic class CustomStringDictionary\u003CTElement> : CustomCollectionBase\u003CDictionary\u003Cstring, TElement>, TElement, string>\n{\n    public CustomStringDictionary() : base(new Dictionary\u003Cstring, TElement>())\n    {\n    }\n\n    [ProtoMember(1)]\n    private byte[] _cProto\n    {\n        get { return base._cBytes; }\n        set { base._cBytes = value; }\n    }\n\n    [ProtoMember(2)]\n    private byte[] _rProto\n    {\n        get { return base._rBytes; }\n        set { base._rBytes = value; }\n    }\n\n    [ProtoBeforeSerialization]\n    private void __PreSerialize()\n    {\n        base.__PreSerialize();\n    }\n\n    [ProtoAfterDeserialization]\n    private void __PostDeserialize()\n    {\n        base.__PostDeserialize();\n    }\n}\n",[43631],{"type":597,"tag":629,"props":43632,"children":43633},{"__ignoreMap":591},[43634],{"type":603,"value":43629},{"type":597,"tag":606,"props":43636,"children":43637},{},[43638],{"type":603,"value":43639},"So basically there are two methods that are defined.",{"type":597,"tag":803,"props":43641,"children":43642},{},[43643,43648],{"type":597,"tag":807,"props":43644,"children":43645},{},[43646],{"type":603,"value":43647},"__PreSerialize – Converts the collection in to a byte array which becomes the proto member.",{"type":597,"tag":807,"props":43649,"children":43650},{},[43651],{"type":603,"value":43652},"__PostDeserialize – Converts the byte array back to the collection.",{"type":597,"tag":606,"props":43654,"children":43655},{},[43656],{"type":603,"value":43657},"We can completely avoid defining run time types for this generic type. Instead of protobuf-net being responsible of creating the type, we create the type by ourselves using the same protobuf Serializer.",{"type":597,"tag":606,"props":43659,"children":43660},{},[43661],{"type":603,"value":43662},"This kind of technique can be used for other generic types as well. Please comment your ideas about this approach.",{"title":591,"searchDepth":787,"depth":787,"links":43664},[],"content:tool:2020-03-25-protobuf-Empty-Collections.md","tool/2020-03-25-protobuf-Empty-Collections.md","2020-03-25",{"_path":454,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":453,"description":43669,"body":43670,"_type":791,"_id":44085,"_source":793,"_file":44086,"_extension":795,"date":44087},"性能分析：所有尝试优化的操作都是从发现问题开始的，在谈论性能时，这是非常重要的。对一个应用进行性能分析，第一步是根据性能分析的结果，找出它的瓶颈。然后再优化项目中的用到的技术和资源的结构。提示：本节性能分析中出现的方法名称，都是从unity5.3中提取的，方法名可能在以后的Unity版本中发生变化。工具：对于unity开发者来说，性能分析的工具有很多种。Unity有一系列的内置工具，比如CPU Profiler，Memory Profiler和5.3中新加的Memory Analyzer。然而最好的分析数据通常来自于特定平台的工具。其中包括：IOS:Instruments和XCode Fram",{"type":594,"children":43671,"toc":44082},[43672,43680,43685,43690,43698,43703,43708,43713,43718,43723,43728,43733,43738,43743,43753,43761,43766,43771,43778,43783,43788,43793,43798,43806,43811,43818,43823,43828,43833,43851,43856,43861,43866,43871,43881,43886,43891,43899,43904,43911,43916,43921,43926,43931,43939,43944,43951,43956,43961,43966,43971,43976,43986,43994,44063,44068,44073],{"type":597,"tag":606,"props":43673,"children":43674},{},[43675],{"type":597,"tag":1080,"props":43676,"children":43677},{},[43678],{"type":603,"value":43679},"性能分析：",{"type":597,"tag":606,"props":43681,"children":43682},{},[43683],{"type":603,"value":43684},"所有尝试优化的操作都是从发现问题开始的，在谈论性能时，这是非常重要的。对一个应用进行性能分析，第一步是根据性能分析的结果，找出它的瓶颈。然后再优化项目中的用到的技术和资源的结构。",{"type":597,"tag":606,"props":43686,"children":43687},{},[43688],{"type":603,"value":43689},"提示：本节性能分析中出现的方法名称，都是从unity5.3中提取的，方法名可能在以后的Unity版本中发生变化。",{"type":597,"tag":606,"props":43691,"children":43692},{},[43693],{"type":597,"tag":1080,"props":43694,"children":43695},{},[43696],{"type":603,"value":43697},"工具：",{"type":597,"tag":606,"props":43699,"children":43700},{},[43701],{"type":603,"value":43702},"对于unity开发者来说，性能分析的工具有很多种。Unity有一系列的内置工具，比如CPU Profiler，Memory Profiler和5.3中新加的Memory Analyzer。",{"type":597,"tag":606,"props":43704,"children":43705},{},[43706],{"type":603,"value":43707},"然而最好的分析数据通常来自于特定平台的工具。其中包括：",{"type":597,"tag":606,"props":43709,"children":43710},{},[43711],{"type":603,"value":43712},"IOS:Instruments和XCode Frame Debugger",{"type":597,"tag":606,"props":43714,"children":43715},{},[43716],{"type":603,"value":43717},"Android:Snapdragon Profiler",{"type":597,"tag":606,"props":43719,"children":43720},{},[43721],{"type":603,"value":43722},"运行因特尔CPU/GPU的平台：VTune和Intel GPA",{"type":597,"tag":606,"props":43724,"children":43725},{},[43726],{"type":603,"value":43727},"PS4:Razor系列",{"type":597,"tag":606,"props":43729,"children":43730},{},[43731],{"type":603,"value":43732},"Xbox：Pix工具",{"type":597,"tag":606,"props":43734,"children":43735},{},[43736],{"type":603,"value":43737},"这些工具通常能分析用IL2CPP打包出来的C++项目。这些本地代码版本中，能清晰的看到堆栈调用和各类方法的执行时间，如果用Mono编译，是做不到这些的。",{"type":597,"tag":606,"props":43739,"children":43740},{},[43741],{"type":603,"value":43742},"关于IOS设备上怎么进行性能分析，Unity官方有一个基本的介绍。请看：",{"type":597,"tag":606,"props":43744,"children":43745},{},[43746],{"type":597,"tag":886,"props":43747,"children":43750},{"href":43748,"rel":43749},"https://blogs.unity3d.com/cn/2016/02/01/profiling-with-instruments/%3F_ga%3D2.53202159.65875105.1532310232-165234103.1528100648",[890],[43751],{"type":603,"value":43752},"Profiling with Instruments – Unity Blogblogs.unity3d.com!",{"type":597,"tag":606,"props":43754,"children":43755},{},[43756],{"type":597,"tag":1080,"props":43757,"children":43758},{},[43759],{"type":603,"value":43760},"启动流程剖析：",{"type":597,"tag":606,"props":43762,"children":43763},{},[43764],{"type":603,"value":43765},"当查看启动流程的时间时，有两个方法需要注意。在那些影响启动时间的配置文件、资源和工程代码中，这两个方法起着重要的作用。",{"type":597,"tag":606,"props":43767,"children":43768},{},[43769],{"type":603,"value":43770},"在不同的平台上，启动时间是不同的。在大多数平台上，Splash Image显示的时间，就是启动的时间。",{"type":597,"tag":606,"props":43772,"children":43773},{},[43774],{"type":597,"tag":719,"props":43775,"children":43777},{"alt":719,"src":43776},"/images/2020-03-04-unity-startup/v2-e65aeff3106290ff9e3de0580ffa90ab_720w.jpg",[],{"type":597,"tag":606,"props":43779,"children":43780},{},[43781],{"type":603,"value":43782},"上面的截图来自于在iOS设备上运行的一个示例项目。在此平台的startUnity方法中，请注意UnityInitApplicationGraphics和UnityLoadApplication方法。",{"type":597,"tag":606,"props":43784,"children":43785},{},[43786],{"type":603,"value":43787},"UnityInitApplicationGraphics执行了大量的内部操作，例如设置图形设备和初始化许多Unity的内部系统。另外，为了初始化Resource系统，它必须加载Resource系统所包含下标的所有文件。每个名为“Resources”的文件夹中的每一个资源文件（注意：这只适用于项目“Assets”文件夹中名为“Resources”的文件夹，以及“Resources”文件夹中的所有子文件夹）都包含在Resource系统的数据中。因此，初始化Resource系统所需的时间与“Resource”文件夹中的文件数量至少呈线性关系。",{"type":597,"tag":606,"props":43789,"children":43790},{},[43791],{"type":603,"value":43792},"UnityLoadApplication包含加载和初始化第一个场景的方法。在项目中，这包括把需要在第一个场景里需要显示的所有数据进行反序列化和实例化。比如，编译着色器，上传贴图和实例化GameObjects。另外，第一个场景中，所有继承了MonoBehaviour脚本中的Awake方法都会在这个时候被回调。",{"type":597,"tag":606,"props":43794,"children":43795},{},[43796],{"type":603,"value":43797},"这些过程意味着，如果在项目的第一个场景中，在Awake方法中有长时间运行的代码，那么该代码就会增加项目的启动时间。为了避免这一问题，在Awake方法中不能放运行时间长的代码，或者把这些代码放到程序的其他其他生命周期里。",{"type":597,"tag":606,"props":43799,"children":43800},{},[43801],{"type":597,"tag":1080,"props":43802,"children":43803},{},[43804],{"type":603,"value":43805},"运行时流程分析：",{"type":597,"tag":606,"props":43807,"children":43808},{},[43809],{"type":603,"value":43810},"在初始化启动之后的性能分析中，最主要的是PlayerLoop方法。这个是Unity的主循环，并且每一帧都会被执行一次。",{"type":597,"tag":606,"props":43812,"children":43813},{},[43814],{"type":597,"tag":719,"props":43815,"children":43817},{"alt":719,"src":43816},"/images/2020-03-04-unity-startup/v2-5c6c95216621d4ab86b26636ff9a019a_720w.jpg",[],{"type":597,"tag":606,"props":43819,"children":43820},{},[43821],{"type":603,"value":43822},"上面的截图来自Unity5.4一个示例项目的性能分析。它展示了PlayerLoop中几个最有趣的方法。请注意，不同Unity版本之间，PlayerLoop中的方法名称可能有所不同。",{"type":597,"tag":606,"props":43824,"children":43825},{},[43826],{"type":603,"value":43827},"PlayerRender是运行在Unity渲染系统中的方法。它包括对象剔除，计算动态批次，向GPU提交绘制命令。任何的后处理效果（Image Effects）或基于渲染的脚本回调（比如OnWillRenderObject）也都在这里运行。通常来讲，在具有交互的项目中，这个方法也是最影响GPU性能的。",{"type":597,"tag":606,"props":43829,"children":43830},{},[43831],{"type":603,"value":43832},"BaseBehaviourManager调用了三个类型的CommonUpdate方法。它会调用当前场景中，挂在激活的物体上面的Monobehaviours里的特定方法。",{"type":597,"tag":1321,"props":43834,"children":43835},{},[43836,43841,43846],{"type":597,"tag":807,"props":43837,"children":43838},{},[43839],{"type":603,"value":43840},"CommonUpdate 回调 Update",{"type":597,"tag":807,"props":43842,"children":43843},{},[43844],{"type":603,"value":43845},"CommonUpdate 回调 LateUpdate",{"type":597,"tag":807,"props":43847,"children":43848},{},[43849],{"type":603,"value":43850},"CommonUpdate 如果勾选了物理系统，就会回调 FixedUpdate",{"type":597,"tag":606,"props":43852,"children":43853},{},[43854],{"type":603,"value":43855},"通常，检测BaseBehaviourManager::CommonUpdate这类方法是最有趣的，因为它是多数Unity项目脚本运行的入口。",{"type":597,"tag":606,"props":43857,"children":43858},{},[43859],{"type":603,"value":43860},"有几个其他的方法也可以注意一下：",{"type":597,"tag":606,"props":43862,"children":43863},{},[43864],{"type":603,"value":43865},"如果项目用到了Unity的UI系统，UI::CanvasManager就会回调几个不同的方法。包括Unity UI的批次计算和布局更新，在CanvasManager中，这两个方法也是比较常用并且比较重要的方法。",{"type":597,"tag":606,"props":43867,"children":43868},{},[43869],{"type":603,"value":43870},"DelayedCallManager::Update运行协程。这部分内容在之后的”Coroutines”的章节会详细的介绍（如果我能坚持的话，哈哈哈）或者参考官方文档",{"type":597,"tag":606,"props":43872,"children":43873},{},[43874],{"type":597,"tag":886,"props":43875,"children":43878},{"href":43876,"rel":43877},"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity3.html",[890],[43879],{"type":603,"value":43880},"Unity - Manual: Coroutinesdocs.unity3d.com!",{"type":597,"tag":606,"props":43882,"children":43883},{},[43884],{"type":603,"value":43885},"PhysicsManager::FixedUpdate执行PhysX物理引擎。它主要涉及到执行PhysX的内部代码，并且也手当前场景中物理对象数量的影响。比如Rigidbodies和Colliders。然而，基于物理的回调也会在OnTriggerStay和OnCollisionStay中出现。",{"type":597,"tag":606,"props":43887,"children":43888},{},[43889],{"type":603,"value":43890},"如果项目有用到2D物理系统。那么在Physics2DManager::FixedUpdate中也会出现类似的调用。",{"type":597,"tag":606,"props":43892,"children":43893},{},[43894],{"type":597,"tag":1080,"props":43895,"children":43896},{},[43897],{"type":603,"value":43898},"脚本方法剖析：",{"type":597,"tag":606,"props":43900,"children":43901},{},[43902],{"type":603,"value":43903},"当脚本用IL2CPP编译跨平台编译时，找到包含ScriptingInvocation对象这行。这是Unity为了执行脚本代码，从内部代码过渡到运行时脚本的一个时间点（注意：从技术上讲，通过运行IL2CPP，C#和JS脚本也变成了本地代码。然而，这种编译的代码主要通过IL2CPP运行时框架执行方法，这跟手写的C++代码不太相似）。",{"type":597,"tag":606,"props":43905,"children":43906},{},[43907],{"type":597,"tag":719,"props":43908,"children":43910},{"alt":719,"src":43909},"/images/2020-03-04-unity-startup/v2-ddde913f040c5de47824f8abaca2e978_720w.jpg",[],{"type":597,"tag":606,"props":43912,"children":43913},{},[43914],{"type":603,"value":43915},"上面的截图来自一个Unity5.4示例项目中的另一个的性能分析。RuntimeInvoker_Void这一行下面的所有方法都是C#脚本编译的，它们每帧都会被执行一次。",{"type":597,"tag":606,"props":43917,"children":43918},{},[43919],{"type":603,"value":43920},"分析报告阅读起来比较容易：每一个都是类名+“_”+方法名。在上图中，我们可以看到EventSysten.Update，PlayerShooting.Update和几个其他的Update方法，这些是大多数MonoBehaviours脚本中比较标准的Unity Update回调。",{"type":597,"tag":606,"props":43922,"children":43923},{},[43924],{"type":603,"value":43925},"展开这些方法，可以清楚的看到那些正在占用CPU的方法。其中也会包括项目中被用到的Unity API和C#类库的方法。",{"type":597,"tag":606,"props":43927,"children":43928},{},[43929],{"type":603,"value":43930},"上图的分析中，也显示了StandaloneInputModule.Process，这个方法会在每一帧都用射线穿过整个UI，为了检测是否有点击事件或者滑动事件触发。这个对性能的主要影响是需要遍历所有的UI元素，并且监测鼠标的位置是否在UI元素的边界内。",{"type":597,"tag":606,"props":43932,"children":43933},{},[43934],{"type":597,"tag":1080,"props":43935,"children":43936},{},[43937],{"type":603,"value":43938},"资源加载：",{"type":597,"tag":606,"props":43940,"children":43941},{},[43942],{"type":603,"value":43943},"资源加载主要是通过SerializedFile::ReadObject方法来实现的。在对CPU性能分析时，就可以找到这个方法。SerializedFile::ReadObject通过Transfer方法，把文件的二进制数据关联到Unity的序列化系统。所有的Asset类型中，都能找到这个Transfer方法，比如Texttures，MonoBehaviours 和Particle Systems。",{"type":597,"tag":606,"props":43945,"children":43946},{},[43947],{"type":597,"tag":719,"props":43948,"children":43950},{"alt":719,"src":43949},"/images/2020-03-04-unity-startup/v2-05563390f8cb569523e89841537c0e8f_720w.jpg",[],{"type":597,"tag":606,"props":43952,"children":43953},{},[43954],{"type":603,"value":43955},"在上面的截图中，一个场景正在被加载。SerializedFile::ReadObject下面调用的不同Transfer方法表明了Unity正在读取并且反序列化场景中所有的Assets。",{"type":597,"tag":606,"props":43957,"children":43958},{},[43959],{"type":603,"value":43960},"通常，如果运行时遇到了性能问题，在加载资源时帧率下降，并且通过性能分析是由于SerializedFile::ReadObject这个方法造成的。请注意，在多数情况下，只有当通过SceneManager, Resources 或者 AssetBundle API进行同步加载资源时，SerializedFile::ReadObject才会出现在主线程里。",{"type":597,"tag":606,"props":43962,"children":43963},{},[43964],{"type":603,"value":43965},"避免出现这种性能问题，常规的做法是：你可以使用异步加载资源（这就把大量的ReadObject操作丢给了工作线程），或者提前加载好比较大的资源。",{"type":597,"tag":606,"props":43967,"children":43968},{},[43969],{"type":603,"value":43970},"注意，当克隆objects时，Transfer也会被调用（在性能分析时出现的CloneObject就是）。如果CloneObject方法下面出现了Transfer方法，这说明资源不是正在从储存器上加载，而是在克隆老的对象。这个过程是：Unity先把老对象序列化，再反序列化数据作为新的对象。",{"type":597,"tag":606,"props":43972,"children":43973},{},[43974],{"type":603,"value":43975},"本文翻译自Unity官方文档：",{"type":597,"tag":606,"props":43977,"children":43978},{},[43979],{"type":597,"tag":886,"props":43980,"children":43983},{"href":43981,"rel":43982},"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity1.html",[890],[43984],{"type":603,"value":43985},"Unity - Manual: Profilingdocs.unity3d.com!",{"type":597,"tag":606,"props":43987,"children":43988},{},[43989],{"type":597,"tag":1080,"props":43990,"children":43991},{},[43992],{"type":603,"value":43993},"Q1：第一次启动项目会有冷启动时间过长的情况，请问该怎么优化？",{"type":597,"tag":617,"props":43995,"children":43996},{},[43997,44002,44007,44012,44043,44048,44053],{"type":597,"tag":606,"props":43998,"children":43999},{},[44000],{"type":603,"value":44001},"首先肯定是判断游戏在冷启动过程中是在做什么事情消耗了时间，然后针对性地优化。还有就是定义好冷启动的界限，从点击游戏到Unity的闪屏出现这段时间通常定义为冷启动的时间，但是我们项目后来发现在做启动的优化的时候还有很长时间花费在游戏启动之后的一些资源初始化方面。",{"type":597,"tag":606,"props":44003,"children":44004},{},[44005],{"type":603,"value":44006},"我在优化启动时间的过程中没有使用什么特别多的工具，主要是基于mlogcat.exe查看设备上输出信息的log，结合自己加入的一些log来做问题的排查。",{"type":597,"tag":606,"props":44008,"children":44009},{},[44010],{"type":603,"value":44011},"纯粹的冷启动时间过长，会和Resources目录下的资源有关系，越多越慢。我们是以AssetBundle的方式为主，所以这块注意了下，清理了一些插件引入的确定不需要的资源（直接看打包好的apk里的内容来排查）。另外搜索下还有一些文章说相关问题，可以关注下，这里不赘述。",{"type":597,"tag":606,"props":44013,"children":44014},{},[44015,44022,44029,44036],{"type":597,"tag":886,"props":44016,"children":44019},{"href":44017,"rel":44018},"https://blog.csdn.net/qq_34307432/article/details/84023894",[890],[44020],{"type":603,"value":44021},"Unity 冷启动简介",{"type":597,"tag":886,"props":44023,"children":44026},{"href":44024,"rel":44025},"http://gad.qq.com/article/detail/32076",[890],[44027],{"type":603,"value":44028},"Unity3D游戏如何加快冷启动时间",{"type":597,"tag":886,"props":44030,"children":44033},{"href":44031,"rel":44032},"https://www.zhihu.com/question/55441136",[890],[44034],{"type":603,"value":44035},"如何改进Unity3d手游启动速度？",{"type":597,"tag":886,"props":44037,"children":44040},{"href":44038,"rel":44039},"https://www.jianshu.com/p/4366da6dd4a1",[890],[44041],{"type":603,"value":44042},"Unity启动耗时优化",{"type":597,"tag":606,"props":44044,"children":44045},{},[44046],{"type":603,"value":44047},"说一下我们遇到的游戏启动时间过长时解决过的几个问题。我们定义启动时间是从点击app图标到进入游戏Patch界面（即游戏逻辑接管）这段时间。\n1）Shader编译时长。如果只有游戏安装之后第一次启动时间过长，一个很大的可能是shader编译，之后游戏启动因为有了Cache所以会快很多。这种情况的话建议查看下Always Include的Shader内容和变体，使用shadervariantcollection等方案替代。",{"type":597,"tag":606,"props":44049,"children":44050},{},[44051],{"type":603,"value":44052},"2）Tolua绑定和Lua资源加载。这种是每次游戏启动都会有的，ToLua接口绑定需要一定的时间，我们在确保前期不会使用Lua的情况下采用多线程的方式进行绑定和加载，保证主线程不会卡住。",{"type":597,"tag":606,"props":44054,"children":44055},{},[44056,44058],{"type":603,"value":44057},"3）注意设置Web请求的超时时长。我们在游戏启动的时候做了一些hook的事情，会有Web请求，后来我们遇到一个情况是在很多机器上会黑屏等待30s甚至60s这样的时长，后来发现是因为这个Web请求没有设置超时时间，于是使用了机器默认的超时时间，在不同设备上不同，比如红米2A上会有接近1分钟的超时限制。这个很坑，只是因为那个非必须的Web服务没有正确开启，导致排查了很长时间。\nNative层增加界面，减少黑屏等待，提升玩家体验。这个并不能真正解决问题，只是一种缓解手段，等到优化做到位了，其实也就不需要了。\n说的内容大都是启动时间而非冷启动，供题主参考。建议题主多看看Unity进程的输出log，可能会有意外发现，通常情况下，不使用Resources的方式的话，在没Bug的情况下冷启动时间应该不会很长，我们因为没怎么用这种方式，所以不是很清楚。这个链接可以参考下：",{"type":597,"tag":886,"props":44059,"children":44061},{"href":44038,"rel":44060},[890],[44062],{"type":603,"value":44038},{"type":597,"tag":598,"props":44064,"children":44066},{"id":44065},"脚本编译顺序",[44067],{"type":603,"value":44065},{"type":597,"tag":606,"props":44069,"children":44070},{},[44071],{"type":603,"value":44072},"对于大型项目来说，这确实是大家经常遇到的情况。一般来说，Unity Editor会按照脚本的依赖关系编译代码，其主要分为以下四个步骤：\n编译Standard Assets、Pro Standard Assets和Plugins文件夹中的Runtime Script；\n编译以上三个文件夹中Editor文件夹下的Script；\n编译项目中所有剩余的Runtime Script（Editor文件夹以外Script；\n编译剩余Script（即Editor文件夹中Script）。\n知道了Unity编辑器的脚本编译特性后，我们则建议研发团队可以将一些长时间不需要改动的脚本代码（比如各种插件代码）放入到Standard Assets、Pro Standard Assets或Plugins文件夹中，这样这些代码只需要编译一次，后续的时间就都能节省下来。有朋友做过测试，在他们的项目中经过上面的改动，原来项目每次的编译时间从23s下降到7s。想想看，这将节省你和你的团队多少时间！",{"type":597,"tag":606,"props":44074,"children":44075},{},[44076],{"type":597,"tag":886,"props":44077,"children":44080},{"href":44078,"rel":44079},"https://docs.unity3d.com/Manual/ScriptCompileOrderFolders.html",[890],[44081],{"type":603,"value":44078},{"title":591,"searchDepth":787,"depth":787,"links":44083},[44084],{"id":44065,"depth":787,"text":44065},"content:unity:2020-03-04-unity-startup.md","unity/2020-03-04-unity-startup.md","2020-03-04",{"_path":451,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":450,"description":44089,"body":44090,"_type":791,"_id":44340,"_source":793,"_file":44341,"_extension":795,"date":44342},"s怎么启动调试都无法关联到unity，后来发现自己应该是不小心把attach editor勾选掉了，",{"type":594,"children":44091,"toc":44336},[44092,44098,44102,44109,44114,44120,44141,44148,44153,44158,44163,44164,44271,44286,44291,44296,44301,44306,44314,44321,44329],{"type":597,"tag":857,"props":44093,"children":44095},{"id":44094},"vs2019-调试unity失效",[44096],{"type":603,"value":44097},"vs2019 调试unity失效",{"type":597,"tag":606,"props":44099,"children":44100},{},[44101],{"type":603,"value":44089},{"type":597,"tag":606,"props":44103,"children":44104},{},[44105],{"type":597,"tag":719,"props":44106,"children":44108},{"alt":719,"src":44107},"/images/2020-03-01-unity-debug/v2-8a3a1f8d3c6ed7317f18e2ac89620a38_1440w.jpg",[],{"type":597,"tag":606,"props":44110,"children":44111},{},[44112],{"type":603,"value":44113},"注意这里要重启unity才会生效。勾选上之后就可以调试了。",{"type":597,"tag":857,"props":44115,"children":44117},{"id":44116},"unity3d-编辑器调试无响应问题",[44118],{"type":603,"value":44119},"Unity3D 编辑器调试无响应问题",{"type":597,"tag":606,"props":44121,"children":44122},{},[44123,44125,44131,44133,44139],{"type":603,"value":44124},"使用 VS 在 Unity 编辑器中调试代码，点击 VS 的 ",{"type":597,"tag":629,"props":44126,"children":44128},{"className":44127},[],[44129],{"type":603,"value":44130},"附加到 Unity",{"type":603,"value":44132},"，Unity 编辑器按下 ",{"type":597,"tag":629,"props":44134,"children":44136},{"className":44135},[],[44137],{"type":603,"value":44138},"Play",{"type":603,"value":44140}," 之后，就会一直等待并且无其他响应，只能结束 Unity 进程。",{"type":597,"tag":606,"props":44142,"children":44143},{},[44144],{"type":597,"tag":719,"props":44145,"children":44147},{"alt":719,"src":44146},"/images/2020-03-01-unity-debug/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%ADUnity%E6%97%A0%E5%93%8D%E5%BA%94.png",[],{"type":597,"tag":598,"props":44149,"children":44151},{"id":44150},"原因分析",[44152],{"type":603,"value":44150},{"type":597,"tag":606,"props":44154,"children":44155},{},[44156],{"type":603,"value":44157},"经过分析与测试，发现去掉代码中一个单例类的析构方法中的断点即可调试了，具体原因未知。",{"type":597,"tag":606,"props":44159,"children":44160},{},[44161],{"type":603,"value":44162},"再测试了一下，在那个单例类的构造、析构方法中分别打断点，如下表：",{"type":603,"value":2680},{"type":597,"tag":1937,"props":44165,"children":44166},{},[44167,44193],{"type":597,"tag":1941,"props":44168,"children":44169},{},[44170],{"type":597,"tag":1945,"props":44171,"children":44172},{},[44173,44178,44183,44188],{"type":597,"tag":1949,"props":44174,"children":44175},{},[44176],{"type":603,"value":44177},"测试",{"type":597,"tag":1949,"props":44179,"children":44180},{},[44181],{"type":603,"value":44182},"构造",{"type":597,"tag":1949,"props":44184,"children":44185},{},[44186],{"type":603,"value":44187},"析构",{"type":597,"tag":1949,"props":44189,"children":44190},{},[44191],{"type":603,"value":44192},"结果",{"type":597,"tag":1963,"props":44194,"children":44195},{},[44196,44214,44233,44252],{"type":597,"tag":1945,"props":44197,"children":44198},{},[44199,44203,44206,44209],{"type":597,"tag":1970,"props":44200,"children":44201},{},[44202],{"type":603,"value":6421},{"type":597,"tag":1970,"props":44204,"children":44205},{},[],{"type":597,"tag":1970,"props":44207,"children":44208},{},[],{"type":597,"tag":1970,"props":44210,"children":44211},{},[44212],{"type":603,"value":44213},"可调试",{"type":597,"tag":1945,"props":44215,"children":44216},{},[44217,44221,44226,44229],{"type":597,"tag":1970,"props":44218,"children":44219},{},[44220],{"type":603,"value":2070},{"type":597,"tag":1970,"props":44222,"children":44223},{},[44224],{"type":603,"value":44225},"*",{"type":597,"tag":1970,"props":44227,"children":44228},{},[],{"type":597,"tag":1970,"props":44230,"children":44231},{},[44232],{"type":603,"value":44213},{"type":597,"tag":1945,"props":44234,"children":44235},{},[44236,44240,44243,44247],{"type":597,"tag":1970,"props":44237,"children":44238},{},[44239],{"type":603,"value":6462},{"type":597,"tag":1970,"props":44241,"children":44242},{},[],{"type":597,"tag":1970,"props":44244,"children":44245},{},[44246],{"type":603,"value":44225},{"type":597,"tag":1970,"props":44248,"children":44249},{},[44250],{"type":603,"value":44251},"无响应",{"type":597,"tag":1945,"props":44253,"children":44254},{},[44255,44259,44263,44267],{"type":597,"tag":1970,"props":44256,"children":44257},{},[44258],{"type":603,"value":6483},{"type":597,"tag":1970,"props":44260,"children":44261},{},[44262],{"type":603,"value":44225},{"type":597,"tag":1970,"props":44264,"children":44265},{},[44266],{"type":603,"value":44225},{"type":597,"tag":1970,"props":44268,"children":44269},{},[44270],{"type":603,"value":44251},{"type":597,"tag":617,"props":44272,"children":44273},{},[44274],{"type":597,"tag":606,"props":44275,"children":44276},{},[44277,44279,44284],{"type":603,"value":44278},"表中 ",{"type":597,"tag":629,"props":44280,"children":44282},{"className":44281},[],[44283],{"type":603,"value":44225},{"type":603,"value":44285}," 代表打断点",{"type":597,"tag":606,"props":44287,"children":44288},{},[44289],{"type":603,"value":44290},"可发现只要在那个单例类的析构中打断点就会造成 Unity 无响应。",{"type":597,"tag":598,"props":44292,"children":44294},{"id":44293},"解决办法",[44295],{"type":603,"value":44293},{"type":597,"tag":606,"props":44297,"children":44298},{},[44299],{"type":603,"value":44300},"删除析构方法中的断点，或者所有断点，再调试。",{"type":597,"tag":857,"props":44302,"children":44304},{"id":44303},"关于如何进行unity远程debugger",[44305],{"type":603,"value":44303},{"type":597,"tag":1321,"props":44307,"children":44308},{},[44309],{"type":597,"tag":807,"props":44310,"children":44311},{},[44312],{"type":603,"value":44313},"首先打开unity的debug模式",{"type":597,"tag":606,"props":44315,"children":44316},{},[44317],{"type":597,"tag":719,"props":44318,"children":44320},{"alt":591,"src":44319},"/images/2020-03-01-unity-debug/2019-06-21-18-19-45.png",[],{"type":597,"tag":1321,"props":44322,"children":44323},{},[44324],{"type":597,"tag":807,"props":44325,"children":44326},{},[44327],{"type":603,"value":44328},"开启visual sudio中找到attach unity debugger",{"type":597,"tag":606,"props":44330,"children":44331},{},[44332],{"type":597,"tag":719,"props":44333,"children":44335},{"alt":591,"src":44334},"/images/2020-03-01-unity-debug/2019-06-21-18-20-01.png",[],{"title":591,"searchDepth":787,"depth":787,"links":44337},[44338,44339],{"id":44150,"depth":787,"text":44150},{"id":44293,"depth":787,"text":44293},"content:unity:2020-03-01-unity-debug.md","unity/2020-03-01-unity-debug.md","2020-03-01",{"_path":448,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":447,"description":44344,"body":44345,"_type":791,"_id":44397,"_source":793,"_file":44398,"_extension":795,"date":44399},"自己写了个shader，并且是从代码里面来进行加载，编辑器中并没有引用。在编辑器中运行项目没有问题，但是当我发布到iso和android平台之后发现游戏中并不能找到我自己的shader，猜想是unity在打包过程中进行了一些优化，没有用到的shader不会被打到游戏包内。",{"type":594,"children":44346,"toc":44395},[44347,44351,44356,44361,44366,44371,44376,44383,44390],{"type":597,"tag":606,"props":44348,"children":44349},{},[44350],{"type":603,"value":44344},{"type":597,"tag":606,"props":44352,"children":44353},{},[44354],{"type":603,"value":44355},"我找到了2个解决办法",{"type":597,"tag":606,"props":44357,"children":44358},{},[44359],{"type":603,"value":44360},"1.随意创建一个物体并添加使用了此shader的材质。并不推荐此方法，正确的方法应该是第二种。",{"type":597,"tag":606,"props":44362,"children":44363},{},[44364],{"type":603,"value":44365},"2.在GraphicsSettings中添加上此shader：",{"type":597,"tag":606,"props":44367,"children":44368},{},[44369],{"type":603,"value":44370},"选择Edit->ProjectSettings->Graphics （不同的unity版本可能有所不同，我的版本是5.6）",{"type":597,"tag":606,"props":44372,"children":44373},{},[44374],{"type":603,"value":44375},"将shader拖入到Always Included Shaders数组中：",{"type":597,"tag":606,"props":44377,"children":44378},{},[44379],{"type":597,"tag":719,"props":44380,"children":44382},{"alt":719,"src":44381},"/images/2020-02-20-shader-lost/20180309110801448.png",[],{"type":597,"tag":606,"props":44384,"children":44385},{},[44386],{"type":597,"tag":719,"props":44387,"children":44389},{"alt":719,"src":44388},"/images/2020-02-20-shader-lost/20180309110915442.png",[],{"type":597,"tag":606,"props":44391,"children":44392},{},[44393],{"type":603,"value":44394},"这样我们重新打包之后，就可以正常找到shader了。",{"title":591,"searchDepth":787,"depth":787,"links":44396},[],"content:unity:2020-02-20-shader-lost.md","unity/2020-02-20-shader-lost.md","2020-02-20",{"_path":445,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":444,"description":44401,"body":44402,"_type":791,"_id":44683,"_source":793,"_file":44684,"_extension":795,"date":44685},"当创建对象、字符串或数组时，存储它所需的内存将从称为堆的中央池中分配。当项目不再使用时，它曾经占用的内存可以被回收并用于别的东西。在过去，通常由程序员通过适当的函数调用明确地分配和释放这些堆内存块。如今，像Unity的Mono引擎这样的运行时系统会自动为您管理内存。自动内存管理需要比显式分配/释放更少的编码工作，并大大降低内存泄漏（内存被分配但从未随后释放的情况）的可能性。",{"type":594,"children":44403,"toc":44672},[44404,44408,44413,44418,44423,44443,44448,44453,44461,44490,44498,44503,44511,44516,44524,44529,44537,44542,44547,44552,44557,44562,44570,44575,44580,44585,44593,44598,44606,44611,44616,44621,44626,44657],{"type":597,"tag":606,"props":44405,"children":44406},{},[44407],{"type":603,"value":44401},{"type":597,"tag":598,"props":44409,"children":44411},{"id":44410},"值类型和引用类型",[44412],{"type":603,"value":44410},{"type":597,"tag":606,"props":44414,"children":44415},{},[44416],{"type":603,"value":44417},"当调用一个函数时，它的参数值将被复制到一个保留特定调用的内存区域。只占用几个字节的数据类型可以非常快速方便地复制。然而，对象、字符串和数组要大得多，如果这些类型的数据被定期复制，那将是非常低效的。幸运的是，这是不必要的；大项目的实际存储空间是从堆中分配的，一个小的“指针”值用来记住它的位置。从那时起，只有指针在参数传递过程中需要被复制。只要运行时系统能够定位指针标识的项，就可以经常使用数据的一个副本。\n在参数传递期间直接存储和复制的类型称为值类型。这些包括整数，浮点数，布尔和Unity的结构类型（例如Color和Vector3）。分配在堆上然后通过指针访问的类型称为引用类型，因为存储在变量中的值仅仅是“引用”到真实数据。引用类型的示例包括对象，字符串和数组。",{"type":597,"tag":598,"props":44419,"children":44421},{"id":44420},"内存分配和垃圾收集",[44422],{"type":603,"value":44420},{"type":597,"tag":606,"props":44424,"children":44425},{},[44426,44428,44434,44436,44441],{"type":603,"value":44427},"内存管理器跟踪它知道未被使用的堆中的区域。当请求一个新的内存块时（例如当一个对象被实例化时），管理器选择一个未使用的区域，从中分配该块，然后从已知的未使用的空间中移除分配的内存。后续请求以相同的方式处理，直到没有足够大的空闲区域分配所需的块大小。在这一点上，从堆中分配的所有内存仍然在使用中是非常不可能的。只要还存在可以找到它的引用变量，就只能访问堆上的引用项。如果对内存块的所有引用都消失了（即，引用变量已被重新分配，或者它们是现在超出范围的局部变量），则它占用的内存可以安全地重新分配。\n为了确定哪些堆块不再被使用，内存管理器会搜索所有当前活动的引用变量，并将它们所指的块标记为",{"type":597,"tag":629,"props":44429,"children":44431},{"className":44430},[],[44432],{"type":603,"value":44433},"live",{"type":603,"value":44435},"。在搜索结束时，内存管理器认为这些",{"type":597,"tag":629,"props":44437,"children":44439},{"className":44438},[],[44440],{"type":603,"value":44433},{"type":603,"value":44442},"块之间的任何空间都是空的，并且可用于后续分配。由于显而易见的原因，定位和释放未使用的内存的过程被称为垃圾回收（或简称GC）。",{"type":597,"tag":598,"props":44444,"children":44446},{"id":44445},"优化",[44447],{"type":603,"value":44445},{"type":597,"tag":606,"props":44449,"children":44450},{},[44451],{"type":603,"value":44452},"垃圾收集对程序员来说是自动的、不可见的，但是收集过程实际上需要大量的CPU时间。如果正确使用，自动内存管理通常会等于或击败手动分配的整体性能。但是，对于程序员来说，重要的是要避免那些比实际需要触发更多次收集器和在执行中引入暂停的错误。有一些臭名昭著的算法，可能是GC噩梦，尽管他们乍一看是无辜的。重复字符串连接是一个典型的例子：",{"type":597,"tag":621,"props":44454,"children":44456},{"code":44455},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    void ConcatExample(int[] intArray) {\n        string line = intArray[0].ToString();\n        \n        for (i = 1; i \u003C intArray.Length; i++) {\n            line += \", \" + intArray[i].ToString();\n        }\n        \n        return line;\n    }\n}\n\n//JS script example\nfunction ConcatExample(intArray: int[]) {\n    var line = intArray[0].ToString();\n    \n    for (i = 1; i \u003C intArray.Length; i++) {\n        line += \", \" + intArray[i].ToString();\n    }\n    \n    return line;\n}\n",[44457],{"type":597,"tag":629,"props":44458,"children":44459},{"__ignoreMap":591},[44460],{"type":603,"value":44455},{"type":597,"tag":606,"props":44462,"children":44463},{},[44464,44466,44472,44474,44479,44481,44488],{"type":603,"value":44465},"这里的关键细节是，新的部分不会被一个接一个地添加到字符串中。实际情况是，每次循环",{"type":597,"tag":629,"props":44467,"children":44469},{"className":44468},[],[44470],{"type":603,"value":44471},"line",{"type":603,"value":44473},"变量的前一个内容都会变死——一个完整的新字符串被分配到包含原来的部分，再在最后加上新的部分。由于字符串随着",{"type":597,"tag":629,"props":44475,"children":44477},{"className":44476},[],[44478],{"type":603,"value":20686},{"type":603,"value":44480},"值的增加而变得更长，所以所消耗的堆空间数量也增加了，因此每次调用这个函数时都很容易消耗数百字节的空闲堆空间。如果你需要连接多个字符串，那么一个更好的选择是Mono库的",{"type":597,"tag":886,"props":44482,"children":44485},{"href":44483,"rel":44484},"https://msdn.microsoft.com/en-gb/library/system.text.stringbuilder.aspx",[890],[44486],{"type":603,"value":44487},"System.Text.StringBuilder",{"type":603,"value":44489},"类。然而，即使反复连接也不会引起太多麻烦，除非它被频繁调用，而在Unity中通常意味着帧更新。就像是：",{"type":597,"tag":621,"props":44491,"children":44493},{"code":44492},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    public GUIText scoreBoard;\n    public int score;\n    \n    void Update() {\n        string scoreText = \"Score: \" + score.ToString();\n        scoreBoard.text = scoreText;\n    }\n}\n\n\n//JS script example\nvar scoreBoard: GUIText;\nvar score: int;\n\nfunction Update() {\n    var scoreText: String = \"Score: \" + score.ToString();\n    scoreBoard.text = scoreText;\n}\n",[44494],{"type":597,"tag":629,"props":44495,"children":44496},{"__ignoreMap":591},[44497],{"type":603,"value":44492},{"type":597,"tag":606,"props":44499,"children":44500},{},[44501],{"type":603,"value":44502},"...每次调用Update将分配新字符串，并不断生成的新垃圾。大多数情况下，只有当分数变化时才更新文本：",{"type":597,"tag":621,"props":44504,"children":44506},{"code":44505},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    public GUIText scoreBoard;\n    public string scoreText;\n    public int score;\n    public int oldScore;\n    \n    void Update() {\n        if (score != oldScore) {\n            scoreText = \"Score: \" + score.ToString();\n            scoreBoard.text = scoreText;\n            oldScore = score;\n        }\n    }\n}\n\n\n//JS script example\nvar scoreBoard: GUIText;\nvar scoreText: String;\nvar score: int;\nvar oldScore: int;\n\nfunction Update() {\n    if (score != oldScore) {\n        scoreText = \"Score: \" + score.ToString();\n        scoreBoard.text = scoreText;\n        oldScore = score;\n    }\n}\n",[44507],{"type":597,"tag":629,"props":44508,"children":44509},{"__ignoreMap":591},[44510],{"type":603,"value":44505},{"type":597,"tag":606,"props":44512,"children":44513},{},[44514],{"type":603,"value":44515},"当函数返回数组值时，会发生另一个潜在的问题：",{"type":597,"tag":621,"props":44517,"children":44519},{"code":44518},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    float[] RandomList(int numElements) {\n        var result = new float[numElements];\n        \n        for (int i = 0; i \u003C numElements; i++) {\n            result[i] = Random.value;\n        }\n        \n        return result;\n    }\n}\n\n\n//JS script example\nfunction RandomList(numElements: int) {\n    var result = new float[numElements];\n    \n    for (i = 0; i \u003C numElements; i++) {\n        result[i] = Random.value;\n    }\n    \n    return result;\n}\n",[44520],{"type":597,"tag":629,"props":44521,"children":44522},{"__ignoreMap":591},[44523],{"type":603,"value":44518},{"type":597,"tag":606,"props":44525,"children":44526},{},[44527],{"type":603,"value":44528},"当创建一个充满值的新数组时，这种函数非常优雅和方便。但是，如果反复调用，那么每次都会分配新的内存。由于数组可能非常大，可用空间可能会迅速消耗，从而导致垃圾收集频繁。避免这个问题的一个方法是利用数组是引用类型的事实。作为参数传递给函数的数组可以在该函数内修改，结果将在函数返回后保留。\n像上面这样的功能通常可以被替换成：",{"type":597,"tag":621,"props":44530,"children":44532},{"code":44531},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    void RandomList(float[] arrayToFill) {\n        for (int i = 0; i \u003C arrayToFill.Length; i++) {\n            arrayToFill[i] = Random.value;\n        }\n    }\n}\n\n\n//JS script example\nfunction RandomList(arrayToFill: float[]) {\n    for (i = 0; i \u003C arrayToFill.Length; i++) {\n        arrayToFill[i] = Random.value;\n    }\n}\n",[44533],{"type":597,"tag":629,"props":44534,"children":44535},{"__ignoreMap":591},[44536],{"type":603,"value":44531},{"type":597,"tag":606,"props":44538,"children":44539},{},[44540],{"type":603,"value":44541},"这只是用新值替换数组的现有内容。虽然这需要在调用代码中完成数组的初始分配（这似乎有些不雅），但是在调用该函数时不会产生任何新的垃圾。",{"type":597,"tag":598,"props":44543,"children":44545},{"id":44544},"主动请求垃圾收集",[44546],{"type":603,"value":44544},{"type":597,"tag":606,"props":44548,"children":44549},{},[44550],{"type":603,"value":44551},"如上所述，最好尽量避免分配。然而，鉴于它们不能被完全消除，您可以使用两种主要策略来最大限度地减少其入侵游戏：",{"type":597,"tag":1023,"props":44553,"children":44555},{"id":44554},"小堆垃圾收集快速可频繁收集",[44556],{"type":603,"value":44554},{"type":597,"tag":606,"props":44558,"children":44559},{},[44560],{"type":603,"value":44561},"这个策略通常最适合长期游戏的游戏，其中平滑的帧速率是主要的关注点。这样的游戏通常会频繁地分配小块，但这些块将仅在短时间内使用。在iOS上使用此策略时，典型的堆大小约为200KB，iPhone 3G上的垃圾收集大约需要5ms。如果堆增加到1MB，则收集大约需要7ms。因此，有时候可以以规则的帧间隔请求垃圾回收。这通常会使垃圾收集发生的次数比严格的需要的更多，但是它们将被快速处理，对游戏的影响最小：",{"type":597,"tag":621,"props":44563,"children":44565},{"code":44564},"if (Time.frameCount % 30 == 0)\n{\n   System.GC.Collect();\n}\n",[44566],{"type":597,"tag":629,"props":44567,"children":44568},{"__ignoreMap":591},[44569],{"type":603,"value":44564},{"type":597,"tag":606,"props":44571,"children":44572},{},[44573],{"type":603,"value":44574},"但是，您应该谨慎使用此技术，并检查profiler统计信息，以确保它真正减少了游戏的收集时间。",{"type":597,"tag":1023,"props":44576,"children":44578},{"id":44577},"大堆垃圾收集缓慢且不可频繁收集",[44579],{"type":603,"value":44577},{"type":597,"tag":606,"props":44581,"children":44582},{},[44583],{"type":603,"value":44584},"这个策略对于分配（和因此收集）相对不频繁并可以在游戏暂停期间处理的游戏最适用。对于堆来说，尽可能大，而不是因为系统内存太少而导致操作系统杀死你的应用程序。但是，如果可能，Mono运行时会自动避免扩展堆。您可以通过在启动期间预先分配一些占位符空间来手动扩展堆（即，您实例化一个纯粹用于对内存管理器产生影响的“无用”对象）：",{"type":597,"tag":621,"props":44586,"children":44588},{"code":44587},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    void Start() {\n        var tmp = new System.Object[1024];\n        \n        // make allocations in smaller blocks to avoid them to be treated in a special way, which is designed for large blocks\n        for (int i = 0; i \u003C 1024; i++)\n            tmp[i] = new byte[1024];\n        \n        // release reference\n        tmp = null;\n    }\n}\n\n\n//JS script example\nfunction Start() {\n    var tmp = new System.Object[1024];\n\n    // make allocations in smaller blocks to avoid them to be treated in a special way, which is designed for large blocks\n        for (var i : int = 0; i \u003C 1024; i++)\n        tmp[i] = new byte[1024];\n\n    // release reference\n        tmp = null;\n}\n",[44589],{"type":597,"tag":629,"props":44590,"children":44591},{"__ignoreMap":591},[44592],{"type":603,"value":44587},{"type":597,"tag":606,"props":44594,"children":44595},{},[44596],{"type":603,"value":44597},"一个足够大的堆不应该在游戏中的暂停期间完全被填满，这样可以容纳一次收集。当发生这样的暂停时，您可以显式地请求垃圾收集：",{"type":597,"tag":621,"props":44599,"children":44601},{"code":44600},"System.GC.Collect();\n",[44602],{"type":597,"tag":629,"props":44603,"children":44604},{"__ignoreMap":591},[44605],{"type":603,"value":44600},{"type":597,"tag":606,"props":44607,"children":44608},{},[44609],{"type":603,"value":44610},"同样，在使用此策略时应该小心，并注意Profiler统计数据，而不是仅仅假定它具有所期望的效果。",{"type":597,"tag":598,"props":44612,"children":44614},{"id":44613},"可重复使用的对象池",[44615],{"type":603,"value":44613},{"type":597,"tag":606,"props":44617,"children":44618},{},[44619],{"type":603,"value":44620},"很多情况下，只要减少创建和销毁对象的数量，就可以避免生成垃圾。游戏中存在着某些类型的物体，如抛射体，尽管一次只会有少量的物体在游戏中，但它们可能会被反复地遇到。在这种情况下，常常可以重用对象，而不是破坏旧对象，并用新的对象替换它们。",{"type":597,"tag":598,"props":44622,"children":44624},{"id":44623},"更多信息",[44625],{"type":603,"value":44623},{"type":597,"tag":606,"props":44627,"children":44628},{},[44629,44631,44638,44640,44647,44648,44655],{"type":603,"value":44630},"内存管理是一个微妙而复杂的课题，它已经投入了大量的学术研究。如果您有兴趣了解更多信息，那么",{"type":597,"tag":886,"props":44632,"children":44635},{"href":44633,"rel":44634},"http://www.memorymanagement.org/",[890],[44636],{"type":603,"value":44637},"memorymanagement.org",{"type":603,"value":44639},"是一个很好的资源，列出了许多出版物和在线文章。有关对象池的更多信息可以在",{"type":597,"tag":886,"props":44641,"children":44644},{"href":44642,"rel":44643},"https://en.wikipedia.org/wiki/Object_pool_pattern",[890],[44645],{"type":603,"value":44646},"维基百科页面",{"type":603,"value":695},{"type":597,"tag":886,"props":44649,"children":44652},{"href":44650,"rel":44651},"https://sourcemaking.com/design_patterns/object_pool",[890],[44653],{"type":603,"value":44654},"Sourcemaking.com",{"type":603,"value":44656},"上找到。",{"type":597,"tag":617,"props":44658,"children":44659},{},[44660],{"type":597,"tag":606,"props":44661,"children":44662},{},[44663,44665],{"type":603,"value":44664},"原文链接：",{"type":597,"tag":886,"props":44666,"children":44669},{"href":44667,"rel":44668},"https://docs.unity3d.com/Manual/UnderstandingAutomaticMemoryManagement.html",[890],[44670],{"type":603,"value":44671},"Understanding Automatic Memory Management",{"title":591,"searchDepth":787,"depth":787,"links":44673},[44674,44675,44676,44677,44681,44682],{"id":44410,"depth":787,"text":44410},{"id":44420,"depth":787,"text":44420},{"id":44445,"depth":787,"text":44445},{"id":44544,"depth":787,"text":44544,"children":44678},[44679,44680],{"id":44554,"depth":1530,"text":44554},{"id":44577,"depth":1530,"text":44577},{"id":44613,"depth":787,"text":44613},{"id":44623,"depth":787,"text":44623},"content:unity:2020-02-19-UnderstandingAutomaticMemoryManagement.md","unity/2020-02-19-UnderstandingAutomaticMemoryManagement.md","2020-02-19",{"_path":442,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":441,"description":44687,"body":44688,"_type":791,"_id":45877,"_source":793,"_file":45878,"_extension":795,"date":45879},"另一个Unity开发者面对的普遍问题是托管堆的意外扩展。在Unity中，托管堆的扩张比收缩更加容易。进一步说，Unity的垃圾回收策略倾向于碎片化内存，这可以防止收缩出来一个大的堆。",{"type":594,"children":44689,"toc":45870},[44690,44694,44697,44703,44708,44715,44720,44725,44738,44745,44750,44755,44760,44767,44772,44777,44782,44785,44790,44795,44800,44805,44810,44815,44820,44823,44828,44833,44838,44843,44850,44855,44860,44865,44870,44875,44880,44885,44888,44893,44898,44901,44906,44911,44944,44949,44954,44989,44994,44997,45002,45007,45012,45017,45022,45045,45050,45075,45080,45085,45090,45095,45098,45104,45109,45114,45119,45124,45129,45134,45139,45144,45147,45152,45157,45162,45180,45185,45190,45195,45198,45203,45208,45213,45218,45223,45228,45231,45236,45241,45246,45251,45256,45274,45279,45284,45324,45329,45332,45338,45343,45348,45353,45375,45380,45620,45625,45630,45635,45638,45650,45655,45660,45706,45711,45759,45764,45769,45795,45800,45830,45835,45840,45843,45848,45853,45858],{"type":597,"tag":606,"props":44691,"children":44692},{},[44693],{"type":603,"value":44687},{"type":597,"tag":3720,"props":44695,"children":44696},{},[],{"type":597,"tag":598,"props":44698,"children":44700},{"id":44699},"技术细节托管堆怎样运行以及为什么它会扩张",[44701],{"type":603,"value":44702},"技术细节：托管堆怎样运行以及为什么它会扩张",{"type":597,"tag":606,"props":44704,"children":44705},{},[44706],{"type":603,"value":44707},"​    托管堆是内存中被项目脚本运行时（Mono或者IL2CPP）的内存管理器自动管理的部分。在托管代码中创造的所有对象必须被分配在托管堆上（请注意：严格的说，所有非空引用类型的对象和所有被装箱的值类型对象都必须被分配到托管堆上）。",{"type":597,"tag":606,"props":44709,"children":44710},{},[44711],{"type":597,"tag":719,"props":44712,"children":44714},{"alt":719,"src":44713},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_0.png",[],{"type":597,"tag":606,"props":44716,"children":44717},{},[44718],{"type":603,"value":44719},"​    在上面的图表中，白色的方块表示分配到托管堆的内存量，它里面有颜色的方块表示托管堆内存空间中存储的数据值。当另外的值被需要时，将会从托管堆中分配更多空间。",{"type":597,"tag":606,"props":44721,"children":44722},{},[44723],{"type":603,"value":44724},"​    垃圾收集器周期运行（请注意：具体时间取决于不同的平台）。会清扫堆上的所有对象，检查那些不再被引用的对象并标记。然后删除没有被引用的对象，释放内存。",{"type":597,"tag":606,"props":44726,"children":44727},{},[44728,44730,44736],{"type":603,"value":44729},"​    至关重要的是，Unity的垃圾收集是，采用",{"type":597,"tag":886,"props":44731,"children":44733},{"href":35664,"rel":44732},[890],[44734],{"type":603,"value":44735},"Boehm GC算法",{"type":603,"value":44737},"，是非世代和非压缩的。非世代意味着当执行一次收集的时候，GC必须清扫全部的托管堆，并且性能会随着堆的扩张而降低。非压缩意味着内存中的对象不会重新移动位置来使对象间的空隙关闭。",{"type":597,"tag":606,"props":44739,"children":44740},{},[44741],{"type":597,"tag":719,"props":44742,"children":44744},{"alt":719,"src":44743},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_1.png",[],{"type":597,"tag":606,"props":44746,"children":44747},{},[44748],{"type":603,"value":44749},"​    上面的图显示了一个内存片段的例子。当一个对象被释放时，其内存也会被清空。但是被释放的空间不会变成一个大的可用内存池的一部分。被释放对象两边的对象仍然被使用。由于这个原因，被释放的内存变成了其他内存段中间的空隙（这个空隙在上图中由红圈标明）。这个新释放的空间只能用于存储与它完全相同或者更小大小的对象。",{"type":597,"tag":606,"props":44751,"children":44752},{},[44753],{"type":603,"value":44754},"​    当分配一个对象时，请记住在内存中对象必须总是占用一段连续的空间。",{"type":597,"tag":606,"props":44756,"children":44757},{},[44758],{"type":603,"value":44759},"​    这导致了内存碎片的核心问题，虽然堆中的总可用空间是非常大的，但是可能一部分或者所有这些可用空间是被分配对象间的小空隙。在这种情况下，尽管可能会有足够的总空间来容纳一个确定大小的分配，但是托管堆找不到一块足够大的连续内存来适配这次分配。",{"type":597,"tag":606,"props":44761,"children":44762},{},[44763],{"type":597,"tag":719,"props":44764,"children":44766},{"alt":719,"src":44765},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_2.png",[],{"type":597,"tag":606,"props":44768,"children":44769},{},[44770],{"type":603,"value":44771},"​    然而，如果一个大的对象被分配，并且没有足够的连续空间来容纳这个对象，如同上图所示，那么Unity的内存管理器将执行两个操作。",{"type":597,"tag":606,"props":44773,"children":44774},{},[44775],{"type":603,"value":44776},"​    首先，如果垃圾收集器还没有运行，那么它就会运行。尝试释放足够的空间来填充内存分配的需求。",{"type":597,"tag":606,"props":44778,"children":44779},{},[44780],{"type":603,"value":44781},"​    如果，GC运行完毕，仍然没有可以满足需求的连续内存空间，那么托管堆将会被扩大。托管堆扩大的具体大小由平台决定；然而，大多数Unity平台将托管堆扩大一倍。",{"type":597,"tag":3720,"props":44783,"children":44784},{},[],{"type":597,"tag":598,"props":44786,"children":44788},{"id":44787},"托管堆的关键问题",[44789],{"type":603,"value":44787},{"type":597,"tag":606,"props":44791,"children":44792},{},[44793],{"type":603,"value":44794},"​    托管堆的核心问题是其扩张是以两倍进行的：",{"type":597,"tag":606,"props":44796,"children":44797},{},[44798],{"type":603,"value":44799},"​    ·当托管堆扩张时，Unity并不总是释放分配到托管堆的内存页，它采取一个优化策略，保持扩张的托管堆，即使托管堆大部分是空的。这用来避免当有更大的内存分配发生时需要重新扩大托管堆。",{"type":597,"tag":606,"props":44801,"children":44802},{},[44803],{"type":603,"value":44804},"​    ·在大多数平台上，Unity最终会将托管堆上那部分空的内存页释放回操作系统。这个发生的间隔时间是不能保证的，并且也不能被依靠。",{"type":597,"tag":606,"props":44806,"children":44807},{},[44808],{"type":603,"value":44809},"​    ·用于托管堆的地址空间（栈）不再会被返还给操作系统。",{"type":597,"tag":606,"props":44811,"children":44812},{},[44813],{"type":603,"value":44814},"​    ·对于32位程序来说，如果托管堆扩张收缩多次，这会导致地址空间（栈）耗尽。如果一个程序可用内存的地址空间（栈）被耗尽，操作系统将会终止这个程序。",{"type":597,"tag":606,"props":44816,"children":44817},{},[44818],{"type":603,"value":44819},"​    ·对于64位程序来说，地址空间（栈）足够大，这对于运行时间不超过人类平均寿命的程序来说基本不会发生。",{"type":597,"tag":3720,"props":44821,"children":44822},{},[],{"type":597,"tag":598,"props":44824,"children":44826},{"id":44825},"临时分配",[44827],{"type":603,"value":44825},{"type":597,"tag":606,"props":44829,"children":44830},{},[44831],{"type":603,"value":44832},"​    许多Unity项目都发现每帧有几十或几百kb的临时数据分配到托管堆处理。这通常对项目性能是非常有害的。考虑下面的计算：",{"type":597,"tag":606,"props":44834,"children":44835},{},[44836],{"type":603,"value":44837},"​    如果一个程序每帧分配1kb的临时内存，运行在每秒60帧的情况下，那么它每秒就会分配60kb的内存。在一分钟之内，这在内存中增加了3.6mb的垃圾。每秒执行一次垃圾回收器会降低性能，但是尝试在低内存设备上运行时每分钟分配3.6mb内存是有问题的。",{"type":597,"tag":606,"props":44839,"children":44840},{},[44841],{"type":603,"value":44842},"​    进一步说，考虑到加载操作。如果在一个繁重的资源加载过程中生成了大量的临时对象，并且这些对象被引用到该操作完成，那么垃圾回收器则不能释放这些临时对象并且托管堆需要扩张——即使托管堆中包含的许多这些对象马上就会被释放。",{"type":597,"tag":606,"props":44844,"children":44845},{},[44846],{"type":597,"tag":719,"props":44847,"children":44849},{"alt":719,"src":44848},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_3.png",[],{"type":597,"tag":606,"props":44851,"children":44852},{},[44853],{"type":603,"value":44854},"​    保持对托管内存分配的追踪非常简单。在Unity的CPU Profiler中，概述写着“GC Alloc”那一列。这一行显示着在某一帧分配到托管堆的比特数。（请注意：这个数字与在制定帧分配的临时比特数不相同。分析器显示的事在特定帧被分配的比特数量，即使这些被分配内存的一些或全部在随后的帧中被复用。）将“Deep Profiling”选项打开，这就可以追踪这些内存分配是在哪些函数中发生的。",{"type":597,"tag":606,"props":44856,"children":44857},{},[44858],{"type":603,"value":44859},"​    Unity Profiler不会追踪那些没有发生在主线程的内存分配。因此，“GC Alloc”列就不能用来测量在用户自己创建的线程中的托管内存分配。可以把其他线程中的代码切换到主线程中执行来进行调试，或使用BeginThreadProfiling这个API来在Profiler的TimeLine选项卡中来显示样本。",{"type":597,"tag":606,"props":44861,"children":44862},{},[44863],{"type":603,"value":44864},"​    在目标设备上使用开发模式构建可以分析托管内存分配。",{"type":597,"tag":606,"props":44866,"children":44867},{},[44868],{"type":603,"value":44869},"​    请注意：一些脚本函数在Editor中运行会导致内存分配，但是当项目构建后就不会再产生内存分配。GetComponent就是最普遍的例子，这个函数在Editor中运行时总是会产生内存分配，但是在构建好的项目中就不会。",{"type":597,"tag":606,"props":44871,"children":44872},{},[44873],{"type":603,"value":44874},"​    总体来说，我们强烈的建议所有开发者当项目在交互状态时最小化托管堆内存分配。如果内存分配发生在没有交互操作的时候，比如说场景加载时，问题较少。",{"type":597,"tag":606,"props":44876,"children":44877},{},[44878],{"type":603,"value":44879},"​    Jetbrains Resharper这个Visual Studio插件可以帮助定位代码中的内存分配。",{"type":597,"tag":606,"props":44881,"children":44882},{},[44883],{"type":603,"value":44884},"​    使用Unity的深度分析模式来定位托管内存分配的特定原因。在深度分析模式，所有的函数的调用都被独立记录，在函数调用树中提供一个清晰界面来显示托管内存分配是在哪里发生的。请注意，深度分析模式不止在编辑器中，也可以使用命令行参数-deepprofiling在安卓和桌面上使用。在分析过程中深度分析器按钮保持灰色。",{"type":597,"tag":3720,"props":44886,"children":44887},{},[],{"type":597,"tag":598,"props":44889,"children":44891},{"id":44890},"基础内存维护",[44892],{"type":603,"value":44890},{"type":597,"tag":606,"props":44894,"children":44895},{},[44896],{"type":603,"value":44897},"​    有一些相对简单的技术来使托管堆内存分配降低。",{"type":597,"tag":3720,"props":44899,"children":44900},{},[],{"type":597,"tag":3995,"props":44902,"children":44904},{"id":44903},"容器和数组重用",[44905],{"type":603,"value":44903},{"type":597,"tag":606,"props":44907,"children":44908},{},[44909],{"type":603,"value":44910},"​    当使用C#的容器类或者数组时，如果可能考虑重用或者缓存分配的容器或者数组。容器类暴露了一个Clear函数，当清除容器的值时不会释放分配给容器的内存。",{"type":597,"tag":617,"props":44912,"children":44913},{},[44914,44919,44924,44929,44934,44939],{"type":597,"tag":606,"props":44915,"children":44916},{},[44917],{"type":603,"value":44918},"void Update() {",{"type":597,"tag":606,"props":44920,"children":44921},{},[44922],{"type":603,"value":44923},"List nearestNeighbors = new List();",{"type":597,"tag":606,"props":44925,"children":44926},{},[44927],{"type":603,"value":44928},"findDistancesToNearestNeighbors(nearestNeighbors);",{"type":597,"tag":606,"props":44930,"children":44931},{},[44932],{"type":603,"value":44933},"nearestNeighbors.Sort();",{"type":597,"tag":606,"props":44935,"children":44936},{},[44937],{"type":603,"value":44938},"// … use the sorted list somehow …",{"type":597,"tag":606,"props":44940,"children":44941},{},[44942],{"type":603,"value":44943},"}",{"type":597,"tag":606,"props":44945,"children":44946},{},[44947],{"type":603,"value":44948},"​    当给一个复杂计算分配临时的“帮助性”容器时尤其好用。下面的代码是一个非常简单的例子：",{"type":597,"tag":606,"props":44950,"children":44951},{},[44952],{"type":603,"value":44953},"​    在这个例子中，nearestNeighbors列表每帧被分配一次，用于存储一些数据点。可以把这个列表非常简单的从这个函数中提出来放入函数所在的类中，这避免了每帧分配一个新的列表：",{"type":597,"tag":617,"props":44955,"children":44956},{},[44957,44962,44966,44971,44976,44981,44985],{"type":597,"tag":606,"props":44958,"children":44959},{},[44960],{"type":603,"value":44961},"List m_NearestNeighbors = new List();",{"type":597,"tag":606,"props":44963,"children":44964},{},[44965],{"type":603,"value":44918},{"type":597,"tag":606,"props":44967,"children":44968},{},[44969],{"type":603,"value":44970},"m_NearestNeighbors.Clear();",{"type":597,"tag":606,"props":44972,"children":44973},{},[44974],{"type":603,"value":44975},"findDistancesToNearestNeighbors(NearestNeighbors);",{"type":597,"tag":606,"props":44977,"children":44978},{},[44979],{"type":603,"value":44980},"m_NearestNeighbors.Sort();",{"type":597,"tag":606,"props":44982,"children":44983},{},[44984],{"type":603,"value":44938},{"type":597,"tag":606,"props":44986,"children":44987},{},[44988],{"type":603,"value":44943},{"type":597,"tag":606,"props":44990,"children":44991},{},[44992],{"type":603,"value":44993},"​    在这个版本中，每帧列表的内存会被保持和重用。只有当列表需要被扩大时内存才会被分配。",{"type":597,"tag":3720,"props":44995,"children":44996},{},[],{"type":597,"tag":3995,"props":44998,"children":45000},{"id":44999},"闭包和匿名函数",[45001],{"type":603,"value":44999},{"type":597,"tag":606,"props":45003,"children":45004},{},[45005],{"type":603,"value":45006},"​    当使用闭包和匿名函数时，有两点需要考虑。",{"type":597,"tag":606,"props":45008,"children":45009},{},[45010],{"type":603,"value":45011},"​    首先，所有函数引用在C#中都是引用类型，因此分配到了托管堆。临时内存分配可以通过作为一个参数传递函数引用很简单的创建。这个内存分配不管是使用匿名函数或者是预先定义好的函数来传递都会发生。",{"type":597,"tag":606,"props":45013,"children":45014},{},[45015],{"type":603,"value":45016},"​    其次，转换一个匿名函数为闭包显著增加了需要传递闭包到函数接收的内存量。",{"type":597,"tag":606,"props":45018,"children":45019},{},[45020],{"type":603,"value":45021},"​    考虑下面的代码：",{"type":597,"tag":617,"props":45023,"children":45024},{},[45025,45030,45035,45040],{"type":597,"tag":606,"props":45026,"children":45027},{},[45028],{"type":603,"value":45029},"List listOfNumbers = createListOfRandomNumbers();",{"type":597,"tag":606,"props":45031,"children":45032},{},[45033],{"type":603,"value":45034},"listOfNumbers.Sort( (x, y) =>",{"type":597,"tag":606,"props":45036,"children":45037},{},[45038],{"type":603,"value":45039},"(int)x.CompareTo((int)(y/2))",{"type":597,"tag":606,"props":45041,"children":45042},{},[45043],{"type":603,"value":45044},");",{"type":597,"tag":606,"props":45046,"children":45047},{},[45048],{"type":603,"value":45049},"​    这段代码使用了一个简单的匿名函数来控制第一行创建的列表成员的排序方式。可是，如果一个程序员想要重用这段代码，可以考虑使用一个局部变量来代替常量2，像下面这样：",{"type":597,"tag":617,"props":45051,"children":45052},{},[45053,45057,45062,45066,45071],{"type":597,"tag":606,"props":45054,"children":45055},{},[45056],{"type":603,"value":45029},{"type":597,"tag":606,"props":45058,"children":45059},{},[45060],{"type":603,"value":45061},"int desiredDivisor = getDesiredDivisor();",{"type":597,"tag":606,"props":45063,"children":45064},{},[45065],{"type":603,"value":45034},{"type":597,"tag":606,"props":45067,"children":45068},{},[45069],{"type":603,"value":45070},"(int)x.CompareTo((int)(y/desiredDivisor))",{"type":597,"tag":606,"props":45072,"children":45073},{},[45074],{"type":603,"value":45044},{"type":597,"tag":606,"props":45076,"children":45077},{},[45078],{"type":603,"value":45079},"​    现在匿名函数需要在此函数作用范围之外获取一个变量的状态，所以变成了一个闭包。desiredDivisor变量必须通过某种方式传进闭包中，以便被闭包中的实际代码所使用。",{"type":597,"tag":606,"props":45081,"children":45082},{},[45083],{"type":603,"value":45084},"​    为了实现这个需求，C#生成了一个匿名类，用来保存闭包需要的超过作用范围的对象。当闭包被传入Sort函数时，将生成一个此类的副本，并且这个类的副本通过整数desiredDivisor的值来初始化。",{"type":597,"tag":606,"props":45086,"children":45087},{},[45088],{"type":603,"value":45089},"​    由于执行闭包需要实例化一个生成它的类的拷贝，在C#中所有类都是引用类型，那么执行一个闭包需要在托管堆中分配一个对象。",{"type":597,"tag":606,"props":45091,"children":45092},{},[45093],{"type":603,"value":45094},"​    总体来说，如果可能最好避免在C#中使用闭包。在性能敏感的代码中应该尽量最小化使用匿名函数和函数引用，尤其是在基于每帧执行的代码中。",{"type":597,"tag":3720,"props":45096,"children":45097},{},[],{"type":597,"tag":3995,"props":45099,"children":45101},{"id":45100},"il2cpp下的匿名函数",[45102],{"type":603,"value":45103},"IL2CPP下的匿名函数",{"type":597,"tag":606,"props":45105,"children":45106},{},[45107],{"type":603,"value":45108},"​    目前，检查通过IL2CPP生成的代码，显示简单的声明以及指定一个System.Function类型的变量会分配一个新的对象。无论这个变量是显式（在一个函数或类中声明）或是隐式（作为一个函数的参数声明）都会这样。",{"type":597,"tag":606,"props":45110,"children":45111},{},[45112],{"type":603,"value":45113},"​    所以，在IL2CPP脚本后端下所有使用匿名函数的情况都会分配托管堆内存。Mono脚本后端不是这种情况。",{"type":597,"tag":606,"props":45115,"children":45116},{},[45117],{"type":603,"value":45118},"​    进一步说，在IL2CPP中，由于函数参数声明方式的不同，会有显著不同的托管堆内存分配量级的不同。正如预期的那样，闭包在每次调用中分配最多的内存。",{"type":597,"tag":606,"props":45120,"children":45121},{},[45122],{"type":603,"value":45123},"​    不直观的说，在IL2CPP脚本后端下，当作为一个参数传递预定义的函数时，分配近似于闭包的内存量。匿名函数在托管堆上生成最少量的暂时垃圾，这是通过一个或多个量级的指令实现的。",{"type":597,"tag":606,"props":45125,"children":45126},{},[45127],{"type":603,"value":45128},"​    所以，如果一个项目想要在IL2CPP脚本后端上发布，有三的关键点需要注意：",{"type":597,"tag":606,"props":45130,"children":45131},{},[45132],{"type":603,"value":45133},"​    ·采取不需要传递函数作为参数的的编码风格",{"type":597,"tag":606,"props":45135,"children":45136},{},[45137],{"type":603,"value":45138},"​    ·当这种情况不可避免时，采用匿名函数而不是预定义函数",{"type":597,"tag":606,"props":45140,"children":45141},{},[45142],{"type":603,"value":45143},"​    ·避免闭包，不管用什么脚本后端",{"type":597,"tag":3720,"props":45145,"children":45146},{},[],{"type":597,"tag":598,"props":45148,"children":45150},{"id":45149},"装箱",[45151],{"type":603,"value":45149},{"type":597,"tag":606,"props":45153,"children":45154},{},[45155],{"type":603,"value":45156},"​    装箱是Unity项目中最普遍的意识不到的临时内存分配的原。它发生在当一个值类型被当做引用类型使用时；这通常发生在传递原始的值类型变量（比如int和float）到对象类型的函数中。",{"type":597,"tag":606,"props":45158,"children":45159},{},[45160],{"type":603,"value":45161},"​    在这个极度简单的例子中，为了要传递到object.Equals函数中，整数x被装箱，由于object的Equals函数要求传入的是一个object作为参数。",{"type":597,"tag":617,"props":45163,"children":45164},{},[45165,45170,45175],{"type":597,"tag":606,"props":45166,"children":45167},{},[45168],{"type":603,"value":45169},"int x = 1;",{"type":597,"tag":606,"props":45171,"children":45172},{},[45173],{"type":603,"value":45174},"object y = new object();",{"type":597,"tag":606,"props":45176,"children":45177},{},[45178],{"type":603,"value":45179},"y.Equals(x);",{"type":597,"tag":606,"props":45181,"children":45182},{},[45183],{"type":603,"value":45184},"​    C#的IDE和编译器通常不会对装箱发出警告，即使其导致了无意识的内存分配。这是因为C#语言是在小的临时内存分配会被世代的垃圾回收器和分配大小敏感的内存池有效率处理的假设下开发的。",{"type":597,"tag":606,"props":45186,"children":45187},{},[45188],{"type":603,"value":45189},"​    由于Unity的内存分配器使用不区分内存分配大小的内存池，并且Unity的垃圾回收器也不是世代的，因此其不能有效率的清除由装箱带来的小的，频率的临时内存分配。",{"type":597,"tag":606,"props":45191,"children":45192},{},[45193],{"type":603,"value":45194},"​    在Unity运行时使用C#编码时，应该尽量避免装箱。",{"type":597,"tag":3720,"props":45196,"children":45197},{},[],{"type":597,"tag":3995,"props":45199,"children":45201},{"id":45200},"识别装箱",[45202],{"type":603,"value":45200},{"type":597,"tag":606,"props":45204,"children":45205},{},[45206],{"type":603,"value":45207},"​    基于正在使用的脚本后端，装箱在CPU跟踪数据中显示为一些函数的调用。它们通常采用下面的这些形式之一，是一些其他类或者结构体的名字，...是一些参数的数量：",{"type":597,"tag":606,"props":45209,"children":45210},{},[45211],{"type":603,"value":45212},"​    ·::Box(…)",{"type":597,"tag":606,"props":45214,"children":45215},{},[45216],{"type":603,"value":45217},"​    ·Box(…)",{"type":597,"tag":606,"props":45219,"children":45220},{},[45221],{"type":603,"value":45222},"​    ·_Box(…)",{"type":597,"tag":606,"props":45224,"children":45225},{},[45226],{"type":603,"value":45227},"​    它可以通过搜索反编译器或者IL查看器的输出来定位，例如ReSharper中内置的IL查看器或者dotPeek反编译器，IL指令是“box”。",{"type":597,"tag":3720,"props":45229,"children":45230},{},[],{"type":597,"tag":3995,"props":45232,"children":45234},{"id":45233},"字典和枚举",[45235],{"type":603,"value":45233},{"type":597,"tag":606,"props":45237,"children":45238},{},[45239],{"type":603,"value":45240},"​    一个普遍的造成装箱的问题是使用枚举类型来作为字典的键。声明一个枚举创建了一个新的值类型，在后台被作为像一个整数来对待，但是在编译时强制执行类型安全原则。",{"type":597,"tag":606,"props":45242,"children":45243},{},[45244],{"type":603,"value":45245},"​    默认情况下，调用Dictionary.add(key, value)的结果是调用Object.getHashCode(Object)。这个函数用于为字典的键获得合适的散列码，并且用于所有接受key的函数：Dictionary.tryGetValue, Dictionary.remove等等。",{"type":597,"tag":606,"props":45247,"children":45248},{},[45249],{"type":603,"value":45250},"​    Object.getHashCode函数是一个引用类型，但是枚举值始终是一个值类型。因此，对于枚举作为键的字典来说，每次函数调用都会至少一次对键进行装箱。",{"type":597,"tag":606,"props":45252,"children":45253},{},[45254],{"type":603,"value":45255},"​    下面的代码片段举出了一个简单的例子展示了装箱的问题：",{"type":597,"tag":617,"props":45257,"children":45258},{},[45259,45264,45269],{"type":597,"tag":606,"props":45260,"children":45261},{},[45262],{"type":603,"value":45263},"enum MyEnum { a, b, c };",{"type":597,"tag":606,"props":45265,"children":45266},{},[45267],{"type":603,"value":45268},"var myDictionary = new Dictionary\u003CMyEnum, object>();",{"type":597,"tag":606,"props":45270,"children":45271},{},[45272],{"type":603,"value":45273},"myDictionary.Add(MyEnum.a, new object());",{"type":597,"tag":606,"props":45275,"children":45276},{},[45277],{"type":603,"value":45278},"​    要解决这个问题，有必要写一个自定义的类实现IEqualityComparer接口，并且传递这个类的实例到字典的比较器中（请注意：这个对象通常是无状态的，所里可以被不同的字典重用以节省内存）。",{"type":597,"tag":606,"props":45280,"children":45281},{},[45282],{"type":603,"value":45283},"​    下面的是一个对上面代片段实现IEqualityComparer的简单例子。",{"type":597,"tag":617,"props":45285,"children":45286},{},[45287,45292,45297,45302,45306,45311,45316,45320],{"type":597,"tag":606,"props":45288,"children":45289},{},[45290],{"type":603,"value":45291},"public class MyEnumComparer : IEqualityComparer {",{"type":597,"tag":606,"props":45293,"children":45294},{},[45295],{"type":603,"value":45296},"public bool Equals(MyEnum x, MyEnum y) {",{"type":597,"tag":606,"props":45298,"children":45299},{},[45300],{"type":603,"value":45301},"​    return x == y;",{"type":597,"tag":606,"props":45303,"children":45304},{},[45305],{"type":603,"value":44943},{"type":597,"tag":606,"props":45307,"children":45308},{},[45309],{"type":603,"value":45310},"public int GetHashCode(MyEnum x) {",{"type":597,"tag":606,"props":45312,"children":45313},{},[45314],{"type":603,"value":45315},"​    return (int)x;",{"type":597,"tag":606,"props":45317,"children":45318},{},[45319],{"type":603,"value":44943},{"type":597,"tag":606,"props":45321,"children":45322},{},[45323],{"type":603,"value":44943},{"type":597,"tag":606,"props":45325,"children":45326},{},[45327],{"type":603,"value":45328},"​    可以将上面类的实例传递给字典的构造函数。",{"type":597,"tag":3720,"props":45330,"children":45331},{},[],{"type":597,"tag":3995,"props":45333,"children":45335},{"id":45334},"foreach循环",[45336],{"type":603,"value":45337},"Foreach循环",{"type":597,"tag":606,"props":45339,"children":45340},{},[45341],{"type":603,"value":45342},"​    在Unity版本的Mono的C#编译器中，使用foreach循环会在每次循环结束时强制Unity去装箱一个值（请注意：在每次循环整个结束的时候这个值会被装箱一次。在这个循环中每次迭代不会装箱，所以不论循环两次还是两百次内存使用都是相同的）。这是因为通过Unity的C#编译器生成的IL构造了一个通用的值类型枚举器以迭代值类型的容器。",{"type":597,"tag":606,"props":45344,"children":45345},{},[45346],{"type":603,"value":45347},"​    这个枚举器实现的IDisposable接口，其肯定会在循环终止时被调用。然而，在值类型对象（比如结构体和枚举器）上调用接口函数需要把它们装箱。",{"type":597,"tag":606,"props":45349,"children":45350},{},[45351],{"type":603,"value":45352},"​    检查下面非常简单的代码例子：",{"type":597,"tag":617,"props":45354,"children":45355},{},[45356,45361,45366,45371],{"type":597,"tag":606,"props":45357,"children":45358},{},[45359],{"type":603,"value":45360},"int accum = 0;",{"type":597,"tag":606,"props":45362,"children":45363},{},[45364],{"type":603,"value":45365},"foreach(int x in myList) {",{"type":597,"tag":606,"props":45367,"children":45368},{},[45369],{"type":603,"value":45370},"accum += x;",{"type":597,"tag":606,"props":45372,"children":45373},{},[45374],{"type":603,"value":44943},{"type":597,"tag":606,"props":45376,"children":45377},{},[45378],{"type":603,"value":45379},"​    上面的代码，当通过Unity的C#编译器运行时，产生下面的中间语言：",{"type":597,"tag":617,"props":45381,"children":45382},{},[45383,45388,45393,45398,45403,45408,45413,45418,45423,45427,45432,45437,45442,45447,45452,45457,45470,45475,45480,45484,45489,45494,45499,45511,45516,45521,45526,45531,45536,45541,45546,45551,45556,45561,45566,45571,45576,45580,45585,45590,45595,45600,45605,45610,45615],{"type":597,"tag":606,"props":45384,"children":45385},{},[45386],{"type":603,"value":45387},".method private hidebysig instance void",{"type":597,"tag":606,"props":45389,"children":45390},{},[45391],{"type":603,"value":45392},"ILForeach() cil managed",{"type":597,"tag":606,"props":45394,"children":45395},{},[45396],{"type":603,"value":45397},"{",{"type":597,"tag":606,"props":45399,"children":45400},{},[45401],{"type":603,"value":45402},".maxstack 8",{"type":597,"tag":606,"props":45404,"children":45405},{},[45406],{"type":603,"value":45407},".locals init (",{"type":597,"tag":606,"props":45409,"children":45410},{},[45411],{"type":603,"value":45412},"[0] int32 num,",{"type":597,"tag":606,"props":45414,"children":45415},{},[45416],{"type":603,"value":45417},"[1] int32 current,",{"type":597,"tag":606,"props":45419,"children":45420},{},[45421],{"type":603,"value":45422},"[2] valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator V_2",{"type":597,"tag":606,"props":45424,"children":45425},{},[45426],{"type":603,"value":3748},{"type":597,"tag":606,"props":45428,"children":45429},{},[45430],{"type":603,"value":45431},"// [67 5 - 67 16]",{"type":597,"tag":606,"props":45433,"children":45434},{},[45435],{"type":603,"value":45436},"IL_0000: ldc.i4.0",{"type":597,"tag":606,"props":45438,"children":45439},{},[45440],{"type":603,"value":45441},"IL_0001: stloc.0   // num",{"type":597,"tag":606,"props":45443,"children":45444},{},[45445],{"type":603,"value":45446},"// [68 5 - 68 74]",{"type":597,"tag":606,"props":45448,"children":45449},{},[45450],{"type":603,"value":45451},"IL_0002: ldarg.0   // this",{"type":597,"tag":606,"props":45453,"children":45454},{},[45455],{"type":603,"value":45456},"IL_0003: ldfld    class [mscorlib]System.Collections.Generic.List`1 test::myList",{"type":597,"tag":606,"props":45458,"children":45459},{},[45460,45462,45468],{"type":603,"value":45461},"IL_0008: callvirt   instance valuetype [mscorlib]System.Collections.Generic.List",{"type":597,"tag":629,"props":45463,"children":45465},{"className":45464},[],[45466],{"type":603,"value":45467},"1/Enumerator\u003C!0/*int32*/> class [mscorlib]System.Collections.Generic.List",{"type":603,"value":45469},"1::GetEnumerator()",{"type":597,"tag":606,"props":45471,"children":45472},{},[45473],{"type":603,"value":45474},"IL_000d: stloc.2   // V_2",{"type":597,"tag":606,"props":45476,"children":45477},{},[45478],{"type":603,"value":45479},".try",{"type":597,"tag":606,"props":45481,"children":45482},{},[45483],{"type":603,"value":45397},{"type":597,"tag":606,"props":45485,"children":45486},{},[45487],{"type":603,"value":45488},"IL_000e: br      IL_001f",{"type":597,"tag":606,"props":45490,"children":45491},{},[45492],{"type":603,"value":45493},"// [72 9 - 72 41]",{"type":597,"tag":606,"props":45495,"children":45496},{},[45497],{"type":603,"value":45498},"IL_0013: ldloca.s   V_2",{"type":597,"tag":606,"props":45500,"children":45501},{},[45502,45504,45509],{"type":603,"value":45503},"IL_0015: call     instance !0/",{"type":597,"tag":1733,"props":45505,"children":45506},{},[45507],{"type":603,"value":45508},"int32",{"type":603,"value":45510},"/ valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator::get_Current()",{"type":597,"tag":606,"props":45512,"children":45513},{},[45514],{"type":603,"value":45515},"IL_001a: stloc.1   // current",{"type":597,"tag":606,"props":45517,"children":45518},{},[45519],{"type":603,"value":45520},"// [73 9 - 73 23]",{"type":597,"tag":606,"props":45522,"children":45523},{},[45524],{"type":603,"value":45525},"IL_001b: ldloc.0   // num",{"type":597,"tag":606,"props":45527,"children":45528},{},[45529],{"type":603,"value":45530},"IL_001c: ldloc.1   // current",{"type":597,"tag":606,"props":45532,"children":45533},{},[45534],{"type":603,"value":45535},"IL_001d: add",{"type":597,"tag":606,"props":45537,"children":45538},{},[45539],{"type":603,"value":45540},"IL_001e: stloc.0   // num",{"type":597,"tag":606,"props":45542,"children":45543},{},[45544],{"type":603,"value":45545},"// [70 7 - 70 36]",{"type":597,"tag":606,"props":45547,"children":45548},{},[45549],{"type":603,"value":45550},"IL_001f: ldloca.s   V_2",{"type":597,"tag":606,"props":45552,"children":45553},{},[45554],{"type":603,"value":45555},"IL_0021: call     instance bool valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator::MoveNext()",{"type":597,"tag":606,"props":45557,"children":45558},{},[45559],{"type":603,"value":45560},"IL_0026: brtrue    IL_0013",{"type":597,"tag":606,"props":45562,"children":45563},{},[45564],{"type":603,"value":45565},"IL_002b: leave    IL_003c",{"type":597,"tag":606,"props":45567,"children":45568},{},[45569],{"type":603,"value":45570},"} // end of .try",{"type":597,"tag":606,"props":45572,"children":45573},{},[45574],{"type":603,"value":45575},"finally",{"type":597,"tag":606,"props":45577,"children":45578},{},[45579],{"type":603,"value":45397},{"type":597,"tag":606,"props":45581,"children":45582},{},[45583],{"type":603,"value":45584},"IL_0030: ldloc.2   // V_2",{"type":597,"tag":606,"props":45586,"children":45587},{},[45588],{"type":603,"value":45589},"IL_0031: box     valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator",{"type":597,"tag":606,"props":45591,"children":45592},{},[45593],{"type":603,"value":45594},"IL_0036: callvirt   instance void [mscorlib]System.IDisposable::Dispose()",{"type":597,"tag":606,"props":45596,"children":45597},{},[45598],{"type":603,"value":45599},"IL_003b: endfinally",{"type":597,"tag":606,"props":45601,"children":45602},{},[45603],{"type":603,"value":45604},"} // end of finally",{"type":597,"tag":606,"props":45606,"children":45607},{},[45608],{"type":603,"value":45609},"IL_003c: ret",{"type":597,"tag":606,"props":45611,"children":45612},{},[45613],{"type":603,"value":45614},"} // end of method test::ILForeach",{"type":597,"tag":606,"props":45616,"children":45617},{},[45618],{"type":603,"value":45619},"} // end of class test",{"type":597,"tag":606,"props":45621,"children":45622},{},[45623],{"type":603,"value":45624},"​    最有关系的代码是靠近最后的__finally { … }__语句块。callvirt指令在执行这个函数前在内存中发现IDisposable.Dispose方法的定位，并且要求这个枚举器被装箱。",{"type":597,"tag":606,"props":45626,"children":45627},{},[45628],{"type":603,"value":45629},"​    总体来说，在Unity中应该避免使用foreach循环。不全是因为装箱，还有是通过枚举器实现的容器迭代的函数调用消耗比常规的for或者while循环的迭代要慢的多。",{"type":597,"tag":606,"props":45631,"children":45632},{},[45633],{"type":603,"value":45634},"​    请注意在Unity5.5中C#编译器有了重大升级，增强了Unity生成IL的能力。特别是，装箱操作已经从foreach循环中消除。然而，由于函数调用的开销，与基于数组的等价代码相比CPU性能差距依旧存在。",{"type":597,"tag":3720,"props":45636,"children":45637},{},[],{"type":597,"tag":3995,"props":45639,"children":45641},{"id":45640},"有数组值的unity-api译者已查在unity官方文档中会明确表明这些api有临时内存分配",[45642,45644,45649],{"type":603,"value":45643},"有数组值的Unity API(",{"type":597,"tag":1733,"props":45645,"children":45646},{},[45647],{"type":603,"value":45648},"译者已查，在Unity官方文档中，会明确表明这些API有临时内存分配",{"type":603,"value":3748},{"type":597,"tag":606,"props":45651,"children":45652},{},[45653],{"type":603,"value":45654},"​    一个更有害且难于发现的是由于重复使用Unity返回数组的API造成的虚拟的数组内存分配。所有返回数组的Unity的API都会在每次它们被访问时返回一个该数组新的拷贝。在没有必要的情况下经常访问有数组值的Unity的API效果非常不理想。",{"type":597,"tag":606,"props":45656,"children":45657},{},[45658],{"type":603,"value":45659},"​    举个例子，下面的代码在vertices数组的每次迭代中虚拟的创造了四份拷贝。内存分配在每次.vertices属性被访问时发生。",{"type":597,"tag":617,"props":45661,"children":45662},{},[45663,45668,45672,45677,45682,45687,45692,45697,45702],{"type":597,"tag":606,"props":45664,"children":45665},{},[45666],{"type":603,"value":45667},"for(int i = 0; i \u003C mesh.vertices.Length; i++)",{"type":597,"tag":606,"props":45669,"children":45670},{},[45671],{"type":603,"value":45397},{"type":597,"tag":606,"props":45673,"children":45674},{},[45675],{"type":603,"value":45676},"float x, y, z;",{"type":597,"tag":606,"props":45678,"children":45679},{},[45680],{"type":603,"value":45681},"x = mesh.vertices[i].x;",{"type":597,"tag":606,"props":45683,"children":45684},{},[45685],{"type":603,"value":45686},"y = mesh.vertices[i].y;",{"type":597,"tag":606,"props":45688,"children":45689},{},[45690],{"type":603,"value":45691},"z = mesh.vertices[i].z;",{"type":597,"tag":606,"props":45693,"children":45694},{},[45695],{"type":603,"value":45696},"// ...",{"type":597,"tag":606,"props":45698,"children":45699},{},[45700],{"type":603,"value":45701},"DoSomething(x, y, z);",{"type":597,"tag":606,"props":45703,"children":45704},{},[45705],{"type":603,"value":44943},{"type":597,"tag":606,"props":45707,"children":45708},{},[45709],{"type":603,"value":45710},"​    这可以通过普通的重构来使其只有一次数组内存分配，不论循环迭代多少次。这是通过在进入循环前存储vertices数组来实现的。",{"type":597,"tag":617,"props":45712,"children":45713},{},[45714,45719,45724,45728,45732,45737,45742,45747,45751,45755],{"type":597,"tag":606,"props":45715,"children":45716},{},[45717],{"type":603,"value":45718},"var vertices = mesh.vertices;",{"type":597,"tag":606,"props":45720,"children":45721},{},[45722],{"type":603,"value":45723},"for(int i = 0; i \u003C vertices.Length; i++)",{"type":597,"tag":606,"props":45725,"children":45726},{},[45727],{"type":603,"value":45397},{"type":597,"tag":606,"props":45729,"children":45730},{},[45731],{"type":603,"value":45676},{"type":597,"tag":606,"props":45733,"children":45734},{},[45735],{"type":603,"value":45736},"x = vertices[i].x;",{"type":597,"tag":606,"props":45738,"children":45739},{},[45740],{"type":603,"value":45741},"y = vertices[i].y;",{"type":597,"tag":606,"props":45743,"children":45744},{},[45745],{"type":603,"value":45746},"z = vertices[i].z;",{"type":597,"tag":606,"props":45748,"children":45749},{},[45750],{"type":603,"value":45696},{"type":597,"tag":606,"props":45752,"children":45753},{},[45754],{"type":603,"value":45701},{"type":597,"tag":606,"props":45756,"children":45757},{},[45758],{"type":603,"value":44943},{"type":597,"tag":606,"props":45760,"children":45761},{},[45762],{"type":603,"value":45763},"​    虽然CPU的消耗在访问一个属性一次时并不是非常高，在持续的循环中重复的访问它们会导致性能热点。进一步来讲，没必要的重复访问会导致托管堆的扩张。",{"type":597,"tag":606,"props":45765,"children":45766},{},[45767],{"type":603,"value":45768},"​    这个问题再移动设备上非常普遍，因为Input.touches这个API的行为与上述类似。这在包含下面的类似代码的项目中也非常普遍，内存分配发生在每次访问.touches属性时。",{"type":597,"tag":617,"props":45770,"children":45771},{},[45772,45777,45781,45786,45791],{"type":597,"tag":606,"props":45773,"children":45774},{},[45775],{"type":603,"value":45776},"for ( int i = 0; i \u003C Input.touches.Length; i++ )",{"type":597,"tag":606,"props":45778,"children":45779},{},[45780],{"type":603,"value":45397},{"type":597,"tag":606,"props":45782,"children":45783},{},[45784],{"type":603,"value":45785},"Touch touch = Input.touches[i];",{"type":597,"tag":606,"props":45787,"children":45788},{},[45789],{"type":603,"value":45790},"// …",{"type":597,"tag":606,"props":45792,"children":45793},{},[45794],{"type":603,"value":44943},{"type":597,"tag":606,"props":45796,"children":45797},{},[45798],{"type":603,"value":45799},"​    然而，现在有很多Unity的API有不会造成内存分配的新版本。当使用这些时，应该是更有利的。",{"type":597,"tag":617,"props":45801,"children":45802},{},[45803,45808,45813,45817,45822,45826],{"type":597,"tag":606,"props":45804,"children":45805},{},[45806],{"type":603,"value":45807},"int touchCount = Input.touchCount;",{"type":597,"tag":606,"props":45809,"children":45810},{},[45811],{"type":603,"value":45812},"for ( int i = 0; i \u003C touchCount; i++ )",{"type":597,"tag":606,"props":45814,"children":45815},{},[45816],{"type":603,"value":45397},{"type":597,"tag":606,"props":45818,"children":45819},{},[45820],{"type":603,"value":45821},"Touch touch = Input.GetTouch(i);",{"type":597,"tag":606,"props":45823,"children":45824},{},[45825],{"type":603,"value":45790},{"type":597,"tag":606,"props":45827,"children":45828},{},[45829],{"type":603,"value":44943},{"type":597,"tag":606,"props":45831,"children":45832},{},[45833],{"type":603,"value":45834},"​    转换上面的例子到Touch API 无内存分配的版本是非常简单的：",{"type":597,"tag":606,"props":45836,"children":45837},{},[45838],{"type":603,"value":45839},"​    请注意：这个属性的访问(Input.touchCount)仍旧要放在循环条件的外面，这是为了节省CPU在执行属性get方法时的消耗。",{"type":597,"tag":3720,"props":45841,"children":45842},{},[],{"type":597,"tag":3995,"props":45844,"children":45846},{"id":45845},"空数组重用",[45847],{"type":603,"value":45845},{"type":597,"tag":606,"props":45849,"children":45850},{},[45851],{"type":603,"value":45852},"​    一些团队在一个数组返回值的函数需要返回一个空值时，倾向于用返回一个空数组来代替null。这种编码模式在许多托管语言中非常常见，尤其是C#和Java。",{"type":597,"tag":606,"props":45854,"children":45855},{},[45856],{"type":603,"value":45857},"​    总体来说，当一个函数返回一个长度为0的数组时，返回一个预先分配好的长度为0的数组的单例实例比重复创造空数组被认为更有效率。（请注意：当然，一个例外情况要考虑那就是当返回的数组需要改变长度时）",{"type":597,"tag":1321,"props":45859,"children":45860},{},[45861],{"type":597,"tag":807,"props":45862,"children":45863},{},[45864],{"type":597,"tag":886,"props":45865,"children":45868},{"href":45866,"rel":45867},"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html",[890],[45869],{"type":603,"value":45866},{"title":591,"searchDepth":787,"depth":787,"links":45871},[45872,45873,45874,45875,45876],{"id":44699,"depth":787,"text":44702},{"id":44787,"depth":787,"text":44787},{"id":44825,"depth":787,"text":44825},{"id":44890,"depth":787,"text":44890},{"id":45149,"depth":787,"text":45149},"content:unity:2020-02-18-BestPracticeUnderstandingPerformanceInUnity.md","unity/2020-02-18-BestPracticeUnderstandingPerformanceInUnity.md","2020-02-18",{"_path":439,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":438,"description":45881,"body":45882,"_type":791,"_id":45952,"_source":793,"_file":45953,"_extension":795,"date":45954},"https://www.cnblogs.com/Renyi-Fan/p/9569090.html",{"type":594,"children":45883,"toc":45950},[45884,45892,45901,45908,45916,45924,45932,45941],{"type":597,"tag":606,"props":45885,"children":45886},{},[45887],{"type":597,"tag":886,"props":45888,"children":45890},{"href":45881,"rel":45889},[890],[45891],{"type":603,"value":45881},{"type":597,"tag":606,"props":45893,"children":45894},{},[45895],{"type":597,"tag":886,"props":45896,"children":45899},{"href":45897,"rel":45898},"https://www.gameres.com/797311.html",[890],[45900],{"type":603,"value":45897},{"type":597,"tag":606,"props":45902,"children":45903},{},[45904],{"type":597,"tag":719,"props":45905,"children":45907},{"alt":23469,"src":45906},"/images/2020-02-17-character-states/20161103213426625",[],{"type":597,"tag":621,"props":45909,"children":45911},{"code":45910},"public abstract class Attribute\n        {\n            public int Hp { get; set; }\n            public int Mp { get; set; }\n            public int HpTotal { get; set; }\n            public int MpTotal { get; set; }\n\n            private Attribute m_Parent;\n            private string m_Name;\n            public Attribute(int hp, int mp)\n            {\n                this.Hp = hp;\n                this.Mp = mp;\n\n            }\n\n            public Attribute(int hp, int mp, string name) : this(hp, mp)\n            {\n                this.m_Name = name;\n            }\n\n            public abstract void Calc();\n            public abstract int ChildCount();\n            protected void SetParent(Attribute child)\n            {\n                child.m_Parent = this;\n            }\n\n            public Attribute GetParent()\n            {\n                return this.m_Parent;\n            }\n\n            public void Show()\n            {\n                Calc();\n                Console.WriteLine(string.Format(\"{0} 属性为： HP {1} MP {2}\",this.m_Name, this.HpTotal, this.MpTotal));\n            }\n        }\n",[45912],{"type":597,"tag":629,"props":45913,"children":45914},{"__ignoreMap":591},[45915],{"type":603,"value":45910},{"type":597,"tag":621,"props":45917,"children":45919},{"code":45918},"public class AttributeComponent:Attribute\n        {\n            private List\u003CAttribute> m_AttributeList = new List\u003CAttribute>();\n\n            public AttributeComponent(int hp, int mp) : base(hp, mp)\n            {\n            }\n\n            public AttributeComponent(int hp, int mp, string name) : base(hp, mp, name) { }\n\n            public override void Calc()\n            {\n                this.HpTotal = this.Hp;\n                this.MpTotal = this.Mp;\n\n                foreach (Attribute item in m_AttributeList)\n                {\n                    //递归计算属性和\n                    if (item.ChildCount() > 0)\n                        item.Calc();\n\n                    this.HpTotal += item.HpTotal;\n                    this.MpTotal += item.MpTotal;\n                }\n            }\n\n            public override int ChildCount()\n            {\n                return m_AttributeList.Count;\n            }\n\n            public void AddAttribute(Attribute attribute)\n            {\n                SetParent(attribute);\n                this.m_AttributeList.Add(attribute);\n            }\n\n            public void RemoveAttribute(Attribute attribute)\n            {\n                m_AttributeList.Remove(attribute);\n            }\n        }\n",[45920],{"type":597,"tag":629,"props":45921,"children":45922},{"__ignoreMap":591},[45923],{"type":603,"value":45918},{"type":597,"tag":621,"props":45925,"children":45927},{"code":45926},"\npublic void TestMethod1()\n        {\n            AttributeComponent basic = new AttributeComponent(50, 100, \"Ali\");\n            AttributeComponent lvUp = new AttributeComponent(50, 100, \"升级增加\");\n            AttributeComponent weapon = new AttributeComponent(10, 20, \"无级弓\");\n            AttributeComponent weaponEnchanting = new AttributeComponent(5, 5, \"附魔增加\");\n\n            basic.Show();\n            Console.WriteLine(\"升级啦\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            lvUp.Show();\n            basic.AddAttribute(lvUp);\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"装备了武器\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            weapon.Show();\n            basic.AddAttribute(weapon);\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"武器附魔\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            weaponEnchanting.Show();\n            weapon.AddAttribute(weaponEnchanting);\n            weapon.Show();\n            basic.Show();\n            Console.WriteLine();\n            Console.WriteLine(\"卸载装备\");\n            Console.WriteLine(\"---------------------------------------------------\");\n            basic.RemoveAttribute(weapon);\n            basic.Show();\n        }\n",[45928],{"type":597,"tag":629,"props":45929,"children":45930},{"__ignoreMap":591},[45931],{"type":603,"value":45926},{"type":597,"tag":606,"props":45933,"children":45934},{},[45935],{"type":597,"tag":886,"props":45936,"children":45939},{"href":45937,"rel":45938},"https://blog.csdn.net/alistair_chow/article/details/53029909",[890],[45940],{"type":603,"value":45937},{"type":597,"tag":606,"props":45942,"children":45943},{},[45944],{"type":597,"tag":886,"props":45945,"children":45948},{"href":45946,"rel":45947},"https://blog.csdn.net/alistair_chow/article/details/53026375",[890],[45949],{"type":603,"value":45946},{"title":591,"searchDepth":787,"depth":787,"links":45951},[],"content:unity:2020-02-17-character-states.md","unity/2020-02-17-character-states.md","2020-02-17",{"_path":436,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":435,"description":45956,"body":45957,"_type":791,"_id":46193,"_source":793,"_file":46194,"_extension":795,"date":46195},"内部运算\n1、是否包含技能效果？（提高/降低 攻击 命中 闪避 移动速度 群体伤害 替换技能ID 等 ）\n2、是否包含阶段效果？（BUFF分为多个阶段，不同的阶段有不同的效果，比如影之哀伤）\n3、是否包含计时器？（持续时长计算、叠加时长计算 总之所有关于持续性时间的问题 都丢这里）\n4、是否包含计数器？（用来计算阶段、剩余生效次数、比如影之哀伤 LOL电刀）\n5、是否具备分类规则？（魔法效果 诅咒效果 中毒效果 用于进行归类 方便程序进行的 驱散筛选判断）\n6、是否可以被驱散？ （魔法效果只能用祛除魔法解除 中毒效果只能用解药祛除）\n7、是否具备优先级？（附加优先级，低等级BUFF会被高等级BUFF替换，低等级BUFF无法附加给高等级怪）\n8、是否保留母体信息？（比如传染性的DEBUFF，感染者传播一次，母体会获得额外巴拉巴拉。。。多个项）\n9、是否共享同步规则？（比如多个角色共享一个BUFF状态，一个人的BUFF被祛除则其他人也被祛除）\n10、以上功能可以进行再补充，没有需求则可以逐个剔除。",{"type":594,"children":45958,"toc":46191},[45959,45963,45968,45973,45978,45986,45991,45999,46004,46012,46017,46025,46030,46038,46043,46051,46056,46064,46069,46074,46079,46084,46089,46094,46099,46104,46109,46114,46119,46124,46129,46134,46139,46144,46149,46154,46159,46164,46175,46179],{"type":597,"tag":606,"props":45960,"children":45961},{},[45962],{"type":603,"value":45956},{"type":597,"tag":606,"props":45964,"children":45965},{},[45966],{"type":603,"value":45967},"外部表现\n1、是否显示BUFF图标？（传奇里道士的BUFF是不显示图标的）\n2、是否不同阶段表现不同的图标？\n3、是否显示计时器？\n4、是否显示计数器？\n5、是否显示BUFF文字说明？（对BUFF类型、效果的描述）\n6、是否改变角色外形？（DNF里的冰冻、WOW里的变形）\n7、以上表现功能可以进行再补充，同上。",{"type":597,"tag":606,"props":45969,"children":45970},{},[45971],{"type":603,"value":45972},"首先我想说的是，这是一套机制，并不是单独的一个系统，所谓机制就是一种从逻辑思想到代码实现的小窍门的组合，只有当你把它运用到一个实际项目中去了，它才能帮助你建立一个系统。我不敢说它是最好的，但这套东西帮我完成了一个又一个项目的制作，我觉得现在可以简单的拿出来和大家分享下思维。事实上这也并不是什么很玄乎的东西，我的Buff的机制更像是Flash的Dispatch机制。更简单的说，你可以把它理解为一种回调机制，在必要的时候进行逻辑回调。我想这一句话应该是可以概括整个机制的工作原理了。",{"type":597,"tag":606,"props":45974,"children":45975},{},[45976],{"type":603,"value":45977},"举个简单的例子来说明，作为一个设计师，在设计系统的同时应当思考好这个游戏的系统中的各个回调点，而他们也正是Buff系统发挥能量的地方，Buff回调点有哪些（当然我可能会把它歪到WoW，毕竟这最早的设计灵感来自WOW）？我简单列一些：",{"type":597,"tag":606,"props":45979,"children":45980},{},[45981],{"type":597,"tag":1080,"props":45982,"children":45983},{},[45984],{"type":603,"value":45985},"1，BuffOccur",{"type":597,"tag":606,"props":45987,"children":45988},{},[45989],{"type":603,"value":45990},"我认为这是最核心的回调点之一，应该说你把这套机制运用在任何游戏中他都必须由这个时间点，就是当任何情况Buff被添加到一个角色身上的时候（可能来自技能、可能来自道具、可能来自GM命令，等等等等），往往他最杰出的作用就是改变角色的属性、或者是被控制状态。之所以说这是机制是思维方式，因为它并不关心你的游戏有哪些状态或者属性，但是这里有一点比较容易搞混的就是初级策划往往会认为昏迷就是一个Buff(debuff)，可是事实上昏迷是一种组合状态，他在LoL里面的形态是剥夺移动能力、剥夺攻击能力、剥夺商店使用能力的组合（我不知道是不是真的，但是我在做起凡三国争霸2的时候是这么做的，这套机制最早运用的游戏就是那个，虽然我离开起凡后这套系统的代码被删除了）。因此在BuffOccur这个回调点，有着很多的事情会需要做，那么同样的，BuffRemoved回调点也就有了同样的职责。",{"type":597,"tag":606,"props":45992,"children":45993},{},[45994],{"type":597,"tag":1080,"props":45995,"children":45996},{},[45997],{"type":603,"value":45998},"2，BuffOnTick",{"type":597,"tag":606,"props":46000,"children":46001},{},[46002],{"type":603,"value":46003},"也就是通常我们最常见的，每3秒造成伤害、治疗；或者我们可以做每3秒制造一个AOE，甚至每3秒为自己添加一个护盾等等，他的核心在于没一定时间触发一次，但请你注意不是所有的游戏都适用这个回调点。",{"type":597,"tag":606,"props":46005,"children":46006},{},[46007],{"type":597,"tag":1080,"props":46008,"children":46009},{},[46010],{"type":603,"value":46011},"3，BuffRemoved",{"type":597,"tag":606,"props":46013,"children":46014},{},[46015],{"type":603,"value":46016},"在移除Buff的时候，重新计算属性等肯定是需要在这个时间点工作一次的，那么事实上还有很多的效果也可以在这个时间点被调用，典型的是痛苦无常和生命绽放（都来自WOW），痛苦无常是当驱散的时候对驱散者造成伤害并且沉默，因此我们需要传入导致buff终结的人（可能是null）和BuffRemove的时候剩余时间，由此判断是否真的完成了，那么剩余时间越多造成伤害越高也就成了可能的设计；而生命绽放则更加简单，在Removed时候给持有者进行治疗就可以了。",{"type":597,"tag":606,"props":46018,"children":46019},{},[46020],{"type":597,"tag":1080,"props":46021,"children":46022},{},[46023],{"type":603,"value":46024},"4，BuffBeHurt",{"type":597,"tag":606,"props":46026,"children":46027},{},[46028],{"type":603,"value":46029},"在受到攻击的时候触发，大多盾类技能由此而生，这个回调点应当Return一个Int或者Float，用于传递给下一环，已获得新的伤害，而当所有的执行完毕之后，造成的最终伤害就会是这个数字，那么把受到的伤害变成治疗是多么简单的事情？可是否应该有，还得看游戏的Patterns。",{"type":597,"tag":606,"props":46031,"children":46032},{},[46033],{"type":597,"tag":1080,"props":46034,"children":46035},{},[46036],{"type":603,"value":46037},"5，BuffOnHit",{"type":597,"tag":606,"props":46039,"children":46040},{},[46041],{"type":603,"value":46042},"在攻击的时候产生，虽说字面上是OnHit，你仍然可以把isHit像isCrit一样传给回调函数，战士的压制（老版本）在攻击被闪躲时可以发动，更早的猎人在闪避攻击后可以提高招架？其实都是这个时间点来做的。",{"type":597,"tag":606,"props":46044,"children":46045},{},[46046],{"type":597,"tag":1080,"props":46047,"children":46048},{},[46049],{"type":603,"value":46050},"6，BuffBeforeKilled",{"type":597,"tag":606,"props":46052,"children":46053},{},[46054],{"type":603,"value":46055},"很多时候BuffBeHurt并不能完成一些设计，比如说必定能杀死目标的伤害被完全吸收（贼爷爷的假死），这时候我们要确定这个角色原本应该死了，因此就需要设定出这样一个回调点。",{"type":597,"tag":606,"props":46057,"children":46058},{},[46059],{"type":597,"tag":1080,"props":46060,"children":46061},{},[46062],{"type":603,"value":46063},"7，BuffAfterKilled",{"type":597,"tag":606,"props":46065,"children":46066},{},[46067],{"type":603,"value":46068},"当杀死一个角色的时候，恢复自身X%的HP，这时候你就需要这个回调点，精确的在角色死亡后发生。",{"type":597,"tag":606,"props":46070,"children":46071},{},[46072],{"type":603,"value":46073},"机制始终是机制，或者说是思维方式，他真正的运行还是取决于游戏本身，回调点我只是随便举个例子而已，事实上根据游戏不同，完全可以增加或者删除回调点，比如一个MT卡牌游戏他就完全不需要onTick这样的回调点，但他可以有BeforeMove（角色行动前）等回调点，这取决于游戏本身机制。同样的每一个视觉特效都可以在每一个回调点去播放，你可以设计好这样的规则不是吗？",{"type":597,"tag":606,"props":46075,"children":46076},{},[46077],{"type":603,"value":46078},"接下来，我们就在这个机制的基础上分析一下LoL的一些技能，我印象最深的那些，我已经很久不玩LoL了：",{"type":597,"tag":606,"props":46080,"children":46081},{},[46082],{"type":603,"value":46083},"1，蛮王的6秒真男人，一个Buff，在BeforeKilled时候调用，Return1作为最后设定的HP，并被写在回调代码的最后。",{"type":597,"tag":606,"props":46085,"children":46086},{},[46087],{"type":603,"value":46088},"2，盲僧、瑞文的连续技能，事实上这也是你肉眼看不到的Buff（机制正是如此奇妙，未必被直接运用，正如我所说，他是一种思路），当有Buff的时候技能A变成技能B，移除后恢复，OnSkillCast的回调点（往往技能施展中会需要回调点，因此回调点还是根据游戏具体分析出来的）。",{"type":597,"tag":606,"props":46090,"children":46091},{},[46092],{"type":603,"value":46093},"3，火男的昏迷，火男的法术会为目标添加一个Buff，而法术在OnHit的时候会检查如果存在这个Buff则执行XX效果导致昏迷，否则普通效果。",{"type":597,"tag":606,"props":46095,"children":46096},{},[46097],{"type":603,"value":46098},"4，安妮的昏迷，你如果有仔细看了2并思考了，这不是问题。",{"type":597,"tag":606,"props":46100,"children":46101},{},[46102],{"type":603,"value":46103},"5，大嘴的自爆，在角色死亡的时候产生免疫性Buff，Buff结束时产生AOE，如果你这么思考，这会简单很多。",{"type":597,"tag":606,"props":46105,"children":46106},{},[46107],{"type":603,"value":46108},"这套机制在实际工作中，我们需要如何去分工呢？事实上已经很清晰了：",{"type":597,"tag":606,"props":46110,"children":46111},{},[46112],{"type":603,"value":46113},"策划：需要设计出所有的回调点，事实上策划如果完全不了解程序的效率等问题是无法设计好的，最好还能大概了解所谓回调机制，因为除了回调点意外，你还需要设计出回调时候传的参数，以及返回给程序的参数及其工作顺序，除此之外一些基础的表象也需要去制作，如buff的名称，那么在做表的时候会有2种风格，在起凡的时候我可以不用太关心，因为每个人都会用Lua写回调函数，但之后的项目中，我是用了我常推荐的Tag机制，比如策划填写一个Buff效果些daze_60之类的我就可以把它分析为60%几率昏迷目标等。在设计这些东西的时候为了更有效地避免夸夸其谈，策划对于实现的了解还是非常重要的，而事实上我们这里已经是策划动手写逻辑代码了，这问题就相对好办些。策划除此之外还应该归纳出特效播放点、数据同步时间点等等和游戏核心机制相结合的东西。这世界上也有很多好的创意，但你必需知道机制士兵不能帮你实现的，更重要的是你要知道自己想做什么和怎么去做，因此设计buff的时候切勿滥用机制，机制用的不好反而弄巧成拙，而合理的拆分Buff的效果也是一个策划的价值所在。",{"type":597,"tag":606,"props":46115,"children":46116},{},[46117],{"type":603,"value":46118},"程序：程序的工作则是优化好回调点和策划可能滥用到家的循环，这是非常头疼的事情，因此很可能需要更好的机制替他们实现一些该死的逻辑优化，可是这并不是最重要的，最主要的工作还是完成一些底层接口功能，比如在某个绑点上播放某个特效之类的，这些是策划都是即使会写逻辑代码也写不好的东西，也正是程序员强势所在（因此我并不认为游戏程序员非得精通游戏，但必须了解一二，才能大概思考一些优化、渲染的逻辑）。",{"type":597,"tag":606,"props":46120,"children":46121},{},[46122],{"type":603,"value":46123},"美术：视觉特效肯定少不了你的，搞不好还得弄动作，音乐跑的了音效跑不了，做吧，策划会整理出大量的需求列表的，如果上面说做那就做了。",{"type":597,"tag":606,"props":46125,"children":46126},{},[46127],{"type":603,"value":46128},"在你了解了Buff的工作机制之后，你才有资格进一步的谈创意，不然都是胡扯蛋，你都不知道怎么去做，你怎么去创造呢？那么假如让我把吕布加入到LoL中，我会给他设计什么样的被动技能呢？就让我们一起YY下（确切的说知道实现方式的YY才是有价值的）：",{"type":597,"tag":606,"props":46130,"children":46131},{},[46132],{"type":603,"value":46133},"被动：人中吕布，任何普通攻击（我想LoL的普通攻击应该也是有标记的，起凡当时是skillId==28近战、30远程，事实上我不太赞成这样的skillId特殊标记法）的时候会为吕布添加1层“人中吕布”（另外一个buff）\n“人中吕布”到15层、25层、35层、45层、50层时更换视觉特效(BuffOccur BuffRemoved)。人中吕的特性是15层开始普通攻击有几率造成双倍伤害，25层开始受到伤害有几率减少20%，35层开始释放技能获得导致目标昏迷2秒，45层开始释放技能恢复自身25%生命，50层时技能对20%生命以下目标一击必杀，死亡是损失一半层数(beKilled)。这么牛逼的效果？是啊，中国人当然应该牛逼了。慢来，才YY开始，这算设计好了？早呢，为了这些效果，你需要在“人中吕布”Occur Remove中去根据当前层数添加删除Buff：",{"type":597,"tag":606,"props":46135,"children":46136},{},[46137],{"type":603,"value":46138},"人中吕布_双倍伤害，普通攻击OnHit投随机数决定是否伤害x2。",{"type":597,"tag":606,"props":46140,"children":46141},{},[46142],{"type":603,"value":46143},"人中吕布_几率免伤，BeHurt时候投随机数决定是否降低一定的伤害。",{"type":597,"tag":606,"props":46145,"children":46146},{},[46147],{"type":603,"value":46148},"人中吕布_强力攻击，Onhit判断不是普通攻击则给目标一个2秒的Buff1层。",{"type":597,"tag":606,"props":46150,"children":46151},{},[46152],{"type":603,"value":46153},"强力攻击_昏迷，Occur携带者昏迷属性为true，Remove就不需要设置false了，因为他可能还有别的buff让他昏迷，但是Remove和Occur的时候都要重新计算一次属性状态就对了。说到这里，这个Buff互相堆叠又是很讨厌的逻辑，2个SS可以给同一个目标释放腐蚀术，产生2个，但是自己却只能对1个目标上1个，等等等等。",{"type":597,"tag":606,"props":46155,"children":46156},{},[46157],{"type":603,"value":46158},"人中吕布_技能恢复，OnCast的时候（事实上LoL应该只有OnHit，这也可以），判断不是普通攻击则回复生命。",{"type":597,"tag":606,"props":46160,"children":46161},{},[46162],{"type":603,"value":46163},"人中吕布_斩杀，OnHit判断目标生命比，决定是否造成999999伤害。",{"type":597,"tag":606,"props":46165,"children":46166},{},[46167,46169,46173],{"type":603,"value":46168},"其实如你楼下一层说的，这个机制的最大优势在于，它可以实现很多难以预料的功能，如果策划足够给力的话。\n实际的经验是，一个项目中产生很多沟通问题的本质是，策划并不能归纳出自己想要什么，而程序员更不可能提早知道你想做什么，预判是一道鸿沟，无法跨越，因为我们都不是先知，而年轻的策划很多神奇的想法更是无法预判的，但如果放弃这些想法中的一些精化会非常可惜。因此在项目开发中尽可能去做一些能够更有“包容性”的设计，是非常重要的事情，这解决了后期的很多问题。\n你可以发现我提倡的很多机制或者想法都具有“包容性”或者说“预判性”，包括Tag机制本身，很多年轻的策划或者程序并不能理解为什么明明我们可以用id数字分段做的事情非要想的如此复杂，但事实是当你需要把你的分段规则详细的说给后来的人知道的时候，你甚至需要花费几周时间，还未必能说清楚，更糟糕的是，也许你自己都忘了当初的约定。\nBuff机制也是如此，它的优势在于程序员、包括策划自己并不需要一开始就知道我要具体做什么，但是我们可以先把框架搭起来或者说可以开始动手制作项目了，而后期灵感突发的时候，并不是非得“放到下一个项目”的。\n而技能机制，在我看来反而只是一个辅助的体系，因为它只是一套简单的流程，作为一个入行的新人都应该轻松的完成他的开发，但是很多不太好的做法却是把技能的效果复杂化了，以至于程序员被误导，后期很难对技能维护。因此技能的效果，事实上就是Hp_Dmg（这么多年了我都用这个函数来造成伤害，因为名字很有趣），CreateBuffObj，CreateAoEObj，就是这么简单，一个技能的效果可以同时调用多条这样的功能，但只限于这样的功能。至于花哨的东西，就让Buff系统去完成。\n因此这里还说了一个重点，对于策划来说，研发最大的技巧就是“拆”，如何把你的想法拆成最基础的元素，这样大家在实现的时候就不会有很多不必要的麻烦，在之后的debug中也会方便很多——比如我说的昏迷插法。一个优秀的程序员（至少我不是）他/她一定是把心思放在读书上，至少在学习计算机编程的时候他/她们非常棒，这也导致了他们不太可能像我们策划一样了解游戏，因此不应该把一些“难以理解”的东西拿来去塞给程序员做（事实上难以理解本身是因为它有太多的“专业名词”和超乎自然的地方，这也是游戏魅力所在），你也许没见过把“沉默”做成了“禁言”功能的程序员，他认为法师释放了一个沉默法术后，对方玩家就不能发送聊天内容了，因为被“沉默”了。\n降低研发成本，从设计师角度来说主要还是沟通成本，现在已经成为了很多公司必须面对的课题了，明明一个简单到10小时能完成的逻辑，在很多公司居然能花费好几个人用好几十天去做，并且没能完成（因为策划总是在添加和改变想法，而程序员却陪太子读书了）。\n“猴子”这个称呼并不适合一个200多斤的人",{"type":597,"tag":719,"props":46170,"children":46172},{"alt":719,"src":46171},"/images/2020-02-16-buff-system/lol.gif",[],{"type":603,"value":46174},"，龙与地下城——欧美人眼中最强的生物和它的巢穴，都是字母D开头中间用and连接，它骨子里是一套分析世界的数学模型，骰子实现了世界上很多所谓运气的东西；猴与花果山，它应该是中国人的DND，猴象征着欧美人眼中的中国人，也是孙悟空的表现，花果山则是孙悟空的住所，Monkey and Mountain，前后2个M，就是巧妙的地方，15年前我想做一套中国人的DnD，但至今没法实现，很多原因导致我们在娱乐方面缺少类似骰子这样的基础文化。",{"type":597,"tag":606,"props":46176,"children":46177},{},[46178],{"type":603,"value":32788},{"type":597,"tag":1321,"props":46180,"children":46181},{},[46182],{"type":597,"tag":807,"props":46183,"children":46184},{},[46185],{"type":597,"tag":886,"props":46186,"children":46189},{"href":46187,"rel":46188},"https://zhuanlan.zhihu.com/p/150812545",[890],[46190],{"type":603,"value":46187},{"title":591,"searchDepth":787,"depth":787,"links":46192},[],"content:unity:2020-02-16-buff-system.md","unity/2020-02-16-buff-system.md","2020-02-16",{"_path":433,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":432,"description":46197,"body":46198,"_type":791,"_id":47090,"_source":793,"_file":47091,"_extension":795,"date":47092},"从架构上说,主动技能都可以拆分为释放条件检测->释放->目标选择->产生效果\n但是里面很多细节,比如子弹初始位置设置,做成什么样子组合出更多的设计形式,同时可以兼容更多的有效需求\n比如一个回合制卡牌游戏,要啥飞行子弹,区域只要相对和绝对位置2大类,然后直接填坐标就好了示例1:\n玩家释放技能1->释放子弹1对自身加免疫buff,释放子弹2在1秒后对身前范围最近1个友方击中->命中后对自身释放子弹->命令自身对目标释放技能2\n释放技能1后选择对身前最近一个友方追加释放技能2示例2:\n被动技能->获得buff->buff触发器每2秒在自身位置释放单体子弹1清除buff1,aoe子弹击中敌人->每命中",{"type":594,"children":46199,"toc":47067},[46200,46207,46212,46222,46232,46242,46252,46262,46267,46272,46279,46284,46289,46322,46328,46333,46342,46348,46353,46358,46363,46369,46374,46379,46397,46402,46407,46413,46418,46431,46437,46442,46447,46452,46457,46462,46467,46474,46479,46484,46489,46492,46500,46505,46510,46515,46520,46525,46528,46534,46539,46557,46563,46568,46573,46578,46584,46589,46595,46600,46605,46610,46615,46621,46626,46631,46636,46641,46646,46651,46656,46661,46667,46672,46677,46682,46687,46692,46697,46703,46708,46717,46722,46728,46733,46738,46743,46756,46761,46768,46772,46777,46785,46793,46799,46804,46810,46823,46828,46833,46838,46856,46861,46869,46875,46880,46886,46891,46896,46924,46929,46934,46942,46947,46952,46965,46971,46976,46981,46986,46995,47000,47005,47011,47016,47024,47029,47034,47044,47049,47054,47058],{"type":597,"tag":606,"props":46201,"children":46202},{},[46203],{"type":597,"tag":719,"props":46204,"children":46206},{"alt":719,"src":46205},"/images/2020-02-15-skill-system/20180602102244475.png",[],{"type":597,"tag":606,"props":46208,"children":46209},{},[46210],{"type":603,"value":46211},"从架构上说,主动技能都可以拆分为释放条件检测->释放->目标选择->产生效果\n但是里面很多细节,比如子弹初始位置设置,做成什么样子组合出更多的设计形式,同时可以兼容更多的有效需求\n比如一个回合制卡牌游戏,要啥飞行子弹,区域只要相对和绝对位置2大类,然后直接填坐标就好了",{"type":597,"tag":606,"props":46213,"children":46214},{},[46215,46220],{"type":597,"tag":1080,"props":46216,"children":46217},{},[46218],{"type":603,"value":46219},"示例1:",{"type":603,"value":46221},"\n玩家释放技能1->释放子弹1对自身加免疫buff,释放子弹2在1秒后对身前范围最近1个友方击中->命中后对自身释放子弹->命令自身对目标释放技能2\n释放技能1后选择对身前最近一个友方追加释放技能2",{"type":597,"tag":606,"props":46223,"children":46224},{},[46225,46230],{"type":597,"tag":1080,"props":46226,"children":46227},{},[46228],{"type":603,"value":46229},"示例2:",{"type":603,"value":46231},"\n被动技能->获得buff->buff触发器每2秒在自身位置释放单体子弹1清除buff1,aoe子弹击中敌人->每命中一个敌人对自身叠加1层buff1\n实际效果:周围敌人越多自身获得越多层buff1",{"type":597,"tag":606,"props":46233,"children":46234},{},[46235,46240],{"type":597,"tag":1080,"props":46236,"children":46237},{},[46238],{"type":603,"value":46239},"示例3:",{"type":603,"value":46241},"\n玩家释放技能1->释放子弹1对自身周围友方和敌方击中->对命中的目标释放3个子弹:子弹1筛选敌人产生伤害,子弹2筛选友方30%血以上造成治疗,子弹3筛选敌人血量大于80%命中后产生子弹4对自身添加buff\n实际效果:对周围友方残血造成治疗,对敌人造成伤害,如果击中的敌人血量较高,自身获得增益",{"type":597,"tag":606,"props":46243,"children":46244},{},[46245,46250],{"type":597,"tag":1080,"props":46246,"children":46247},{},[46248],{"type":603,"value":46249},"示例4",{"type":603,"value":46251},"\n玩家有被动技能获得buff1->buff触发器效果为暴击击中时若双方距离>300则对目标发射子弹1和子弹2->子弹1对自身添加buff,子弹2筛选有buff2的敌人\n技能效果:暴击击中距离自身较远的敌人使自身获得增益,触发时若敌人有buff2,则造成额外效果",{"type":597,"tag":606,"props":46253,"children":46254},{},[46255,46260],{"type":597,"tag":1080,"props":46256,"children":46257},{},[46258],{"type":603,"value":46259},"示例5",{"type":603,"value":46261},"\n玩家释放主动技能->发射子弹使自身获得6层buff1\nbuff1附带3个触发器\n触发器1->释放技能清除所有层数buff1\n触发器2->受到攻击失去1层\n触发器3->buff1消失时自身获得buff2\nbuff2->触发器每1秒对自身附近发射子弹筛选1个敌人->令目标对自身发射子弹添加增益\n技能效果:主动隐身,受到攻击失去1层,释放技能后解除隐身,隐身结束后一段时间内受到伤害转移给附近一个敌人",{"type":597,"tag":606,"props":46263,"children":46264},{},[46265],{"type":603,"value":46266},"基础内容有这么几个部分：\n1、Actor，这个是角色本身，它不属于技能系统，但是它要给技能系统开放足够的接口，比如播放动画、播放声音、控制位移、造成伤害、添加buff等等\n2、Skill，这个就是技能本身，它在合适的时机调用脚本中的相应函数，脚本中可以在OnCreate  OnHit  OnDeath  OnHeroDeath  OnSoldierDeath等事件中写相应代码。由于是脚本，所以代码非常灵活，而由于限定了只处理技能相关功能，所以代码也不会很复杂，有经验的策划绝对搞的定。\n3、Buff，这个是技能效果的核心。它可以是有时限的，也可以是被动无时限的。在它对应的脚本中，定义了这个Buff会影响哪些角色属性（如血量、暴击、攻击力等等）或者角色状态（如眩晕、隐身、沉默等等），同样，buff脚本也支持事件机制，在脚本的相应事件处理其逻辑功能，可以实现非常丰富的效果。\n4、Modifier，这个是一个技能修改器。技能修改器可以修改技能的流程和效果（比如技能伤害增加、火球击中人会爆炸等等），具体可以参考风暴英雄中的技能天赋系统。技能修改器并没有脚本与之对应，一个技能如果支持某个修改器，需要在脚本中处理相应功能。",{"type":597,"tag":606,"props":46268,"children":46269},{},[46270],{"type":603,"value":46271},"技能的基类是RoleSkill，然后分近战和远程两个大类，记得不要根据职业来分，而是根据功能来抽象，近战的技能是通过武器来产生伤害，而远程技能是通过发射物来伤害。近战技能可以继续分为：近距离接触攻击单人，近距离范围内接触攻击多人等；远程技能可以分为：单发射物攻击单人，远距离范围内非接触攻击多人等。",{"type":597,"tag":606,"props":46273,"children":46274},{},[46275],{"type":597,"tag":719,"props":46276,"children":46278},{"alt":719,"src":46277},"https://github.com/dongweiPeng/SkillSystem/raw/master/Assets/%E6%8A%80%E8%83%BD%E6%B5%81%E7%A8%8B.png",[],{"type":597,"tag":606,"props":46280,"children":46281},{},[46282],{"type":603,"value":46283},"广义的的说，和战斗结算相关的内容都算技能系统，包括技能信息管理、技能调用接口、技能目标查找、技能表现、技能结算、技能创生体（buff/法术场/弹道）管理，此外还涉及的模块包括：AI模块（技能调用者）、动作模块、寻路/移动模块以及人物属性和伤害数值结算等。",{"type":597,"tag":606,"props":46285,"children":46286},{},[46287],{"type":603,"value":46288},"先说下技能模块每个部分的职责和原理：",{"type":597,"tag":1321,"props":46290,"children":46291},{},[46292,46297,46302,46307,46312,46317],{"type":597,"tag":807,"props":46293,"children":46294},{},[46295],{"type":603,"value":46296},"技能信息管理：管理unit所拥有的技能以及技能的等级、cd等。在我们游戏中，这里还需要负责管理符文，符文会对技能信息进行修改。",{"type":597,"tag":807,"props":46298,"children":46299},{},[46300],{"type":603,"value":46301},"技能调用接口：AI或者UI操作触发技能，触发技能时可能选择了一个目标（AI），也可能并没有目标。",{"type":597,"tag":807,"props":46303,"children":46304},{},[46305],{"type":603,"value":46306},"技能流程管理：一个技能可能由多个子技能以移动的执行模式组合而成，而每一个最终执行的技能执行过程也存在一个流程，一般包括：前摇过程-结算点-后摇过程。技能在前摇结束时进入技能真正的结算流程，结算流程可能创建子弹，也可能触发buf或者创建法术场。",{"type":597,"tag":807,"props":46308,"children":46309},{},[46310],{"type":603,"value":46311},"技能目标查找：若技能触发时已经设置了技能目标unit(如怪物AI释放技能)，则直接将其作为目标unit，否则需要根据一定的策略选择一个目标。此外，技能释放的时候还需要释放方向和释放位置等信息，也通过这个模块获取。",{"type":597,"tag":807,"props":46313,"children":46314},{},[46315],{"type":603,"value":46316},"技能表现：技能释放过程中，需要创建相应的特效以及执行相应的动作。",{"type":597,"tag":807,"props":46318,"children":46319},{},[46320],{"type":603,"value":46321},"技能创生体（buf/弹道/法术场）管理：buf挂在unit身上，可能影响unit的一些行为和状态；法术场一般由场景管理，影响场景中某范围内的unit；弹道就是技能创建的一个子弹，这个子弹可能以不同的路线移动（直线／抛物线／直接命中等）",{"type":597,"tag":598,"props":46323,"children":46325},{"id":46324},"_0技能表",[46326],{"type":603,"value":46327},"0技能表",{"type":597,"tag":606,"props":46329,"children":46330},{},[46331],{"type":603,"value":46332},"首先说下实现技能的基本思路。实现技能的基本思路就是通过策划填写表格，来配制成某些技能，在执行某个技能的时候，分别去根据这些表格中的内容，确定技能如何表现。基本的逻辑是：",{"type":597,"tag":621,"props":46334,"children":46337},{"className":46335,"code":46336,"language":8105,"meta":591},[8107],"if skillTable.get(\"技能动作\"):\n     paly 动作\nif skillTable.get(\"特效\"):\n     播放特效\nif skillTable.get(\"法术场\"):\n    创建法术场\n....\n",[46338],{"type":597,"tag":629,"props":46339,"children":46340},{"__ignoreMap":591},[46341],{"type":603,"value":46336},{"type":597,"tag":598,"props":46343,"children":46345},{"id":46344},"_1-技能信息管理",[46346],{"type":603,"value":46347},"1 技能信息管理",{"type":597,"tag":606,"props":46349,"children":46350},{},[46351],{"type":603,"value":46352},"unit创建时，此模块管理unit可使用哪些技能，比如游戏中玩家可以选择使用哪些技能。",{"type":597,"tag":606,"props":46354,"children":46355},{},[46356],{"type":603,"value":46357},"游戏中技能的升级、技能加点、技能池管理都在这个模块。",{"type":597,"tag":606,"props":46359,"children":46360},{},[46361],{"type":603,"value":46362},"此模块还需要管理技能等级／符文／装备等外部模块对技能参数的修改。",{"type":597,"tag":598,"props":46364,"children":46366},{"id":46365},"_2-技能调用接口",[46367],{"type":603,"value":46368},"2 技能调用接口",{"type":597,"tag":606,"props":46370,"children":46371},{},[46372],{"type":603,"value":46373},"提供技能调用的接口供AI或玩家操作调用，调用时可以提供一个目标unit，也可以不提供让技能自己查找。",{"type":597,"tag":606,"props":46375,"children":46376},{},[46377],{"type":603,"value":46378},"提供三个接口：",{"type":597,"tag":1321,"props":46380,"children":46381},{},[46382,46387,46392],{"type":597,"tag":807,"props":46383,"children":46384},{},[46385],{"type":603,"value":46386},"技能开始skill_enter：开始执行技能，若技能不循环进行，则技能可以自动结束。",{"type":597,"tag":807,"props":46388,"children":46389},{},[46390],{"type":603,"value":46391},"技能结束skill_exit：有的技能不能自己结束，比如某些循环技能，对于循环技能玩家可以按住按钮一直释放。当玩家松开按钮，调用技能结束接口，告诉当前技能使其结束，此时技能到达后摇点时，技能不再继续执行。",{"type":597,"tag":807,"props":46393,"children":46394},{},[46395],{"type":603,"value":46396},"技能停止skill_stop：当技能被强制打断时，如被攻击、晕眩、蓝不足等，技能会被强制停止。",{"type":597,"tag":606,"props":46398,"children":46399},{},[46400],{"type":603,"value":46401},"此外，当前一个技能正在执行时新的技能调用启动，此时新的技能调用信息会被保存。一般来说，并不会把所有新的技能调用信息保存下来，那样就成了一个技能执行的序列。我们游戏仅保存一个新的技能调用信息。",{"type":597,"tag":606,"props":46403,"children":46404},{},[46405],{"type":603,"value":46406},"总的来说，技能模块提供尽量少的接口供AI/UI等上层逻辑使用，这样可以有效的与AI和UI进行解耦。",{"type":597,"tag":598,"props":46408,"children":46410},{"id":46409},"_3-技能流程管理",[46411],{"type":603,"value":46412},"3 技能流程管理",{"type":597,"tag":606,"props":46414,"children":46415},{},[46416],{"type":603,"value":46417},"技能流程这里分两点讨论：",{"type":597,"tag":803,"props":46419,"children":46420},{},[46421,46426],{"type":597,"tag":807,"props":46422,"children":46423},{},[46424],{"type":603,"value":46425},"一个技能可能由多个子技能以一定的模式组合起来。\n一个技能常常由多个子技能以一定的模式组合而成，比如三段击、比如冲锋斩（先冲锋、后斩）等，甚至还存在根据不同的环境选择执行不同的子技能。分析策划需求发现，技能可以分成一个树形结构，这个树形结构非常类似行为树，同样可以将节点分为控制节点和执行节点，甚至可以包括condition节点。为此，我们项目引入一个技能树概念来描述这种数据结构。",{"type":597,"tag":807,"props":46427,"children":46428},{},[46429],{"type":603,"value":46430},"一个具体的技能（技能树执行节点）也有一个固定的执行流程。这个流程一般为：前摇过程、前摇过程结束=技能结算时间点、后摇时间点。",{"type":597,"tag":1023,"props":46432,"children":46434},{"id":46433},"_31-技能树",[46435],{"type":603,"value":46436},"3.1 技能树",{"type":597,"tag":606,"props":46438,"children":46439},{},[46440],{"type":603,"value":46441},"技能树参考传统行为树的设计，使用树形结构控制技能的执行流程。",{"type":597,"tag":606,"props":46443,"children":46444},{},[46445],{"type":603,"value":46446},"技能树和行为树在结构上比较类似，但是在运行逻辑上有很大的不同。",{"type":597,"tag":606,"props":46448,"children":46449},{},[46450],{"type":603,"value":46451},"首先，技能树的重点并不是根据上下文选择一个合适的节点执行，而是以一定的策略将技能树从头到尾遍历执行一遍。",{"type":597,"tag":606,"props":46453,"children":46454},{},[46455],{"type":603,"value":46456},"其次，技能树没有tick的概念，而是基于回调的，比如一个顺序节点，顺序节点中一个子节点执行完毕后，马上通知顺序节点，顺序节点执行下一个子节点，直至顺序节点的最后一个子节点执行完毕，顺序节点就会通知父节点（如果有）它已经执行完毕。",{"type":597,"tag":606,"props":46458,"children":46459},{},[46460],{"type":603,"value":46461},"此外，为了完成技能的一些需求，控制节点往往存储更多的控制信息来控制子节点的执行流程。具体的信息根据策划需求设置，比如顺序结点包括原子属性和循环属性。如果一个顺序节点具有原子属性，则这个顺树节点在执行的过程中并不会被end，只有全部子节点执行结束才可以end。",{"type":597,"tag":606,"props":46463,"children":46464},{},[46465],{"type":603,"value":46466},"以我们游戏中战士普攻三段击为例：",{"type":597,"tag":606,"props":46468,"children":46469},{},[46470],{"type":597,"tag":719,"props":46471,"children":46473},{"alt":719,"src":46472},"https:////upload-images.jianshu.io/upload_images/36361-5ec18bbce4b863ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/544/format/webp",[],{"type":597,"tag":606,"props":46475,"children":46476},{},[46477],{"type":603,"value":46478},"Paste_Image.png",{"type":597,"tag":606,"props":46480,"children":46481},{},[46482],{"type":603,"value":46483},"三段击本身是一个顺序节点，当技能开始时，此节点顺序执行三个子节点。对于第一个子节点，它依然是一个顺序节点，首先冲锋至目标单位身前，然后对目标单位进行挥砍。但是冲锋节点还包括了一个condition，若和目标的距离很近，则跳过冲锋节点，直接挥砍。",{"type":597,"tag":606,"props":46485,"children":46486},{},[46487],{"type":603,"value":46488},"普攻是一个循环技能，这个技能只要玩家点着按钮不放开，技能就会一直执行，因此根节点（普攻）是一个具有循环属性的顺序节点。而对于子技能1（控制节点），他是一个具有原子属性的顺序技能，即当单位正在冲锋时，玩家松开按钮，单位也会执行完挥砍后才会推出技能。",{"type":597,"tag":3720,"props":46490,"children":46491},{},[],{"type":597,"tag":606,"props":46493,"children":46494},{},[46495],{"type":597,"tag":1080,"props":46496,"children":46497},{},[46498],{"type":603,"value":46499},"！关于技能树的使用和思考",{"type":597,"tag":606,"props":46501,"children":46502},{},[46503],{"type":603,"value":46504},"技能树开始的设计思路是，有些技能的执行流程和行为树类似，比如以一定的顺序执行一系列子技能，比如根据不同的上下文确定技能的执行流程。简单的说，技能树的引入有以下好处：1.使技能模块可以获得部分AI的能力，从而将和技能强相关的AI逻辑放在技能模块使技能模块和AI模块降低耦合，2.可以清晰的描述技能流程，3.使用树增加拓展性，策划可以设计出各种各样复杂的技能。",{"type":597,"tag":606,"props":46506,"children":46507},{},[46508],{"type":603,"value":46509},"关于好处1，举个例子：屠夫boss的勾子技能可以将玩家拉过来，若成功的拉过来，boss会执行一个攻击子技能，否则不执行。通过这样可以将勾人和攻击作为两个子技能构成技能树，攻击子技能有一个condition过程，即判断上一个子技能是否成功。",{"type":597,"tag":606,"props":46511,"children":46512},{},[46513],{"type":603,"value":46514},"技能树在使用后慢慢发现一些问题，首先，技能树的同步要求每个树节点都进行同步，增加同步负担，其次，技能本身并不会有太复杂的控制结构。",{"type":597,"tag":606,"props":46516,"children":46517},{},[46518],{"type":603,"value":46519},"为此，后来我们对技能树进行了优化：\n1.简化同步信息，不再同步所有节点的enter/exit信息（具体参考文章《技能模块的同步》）。\n2.取消并行节点，通过拓展表头实现一个技能同时执行多件事情。",{"type":597,"tag":606,"props":46521,"children":46522},{},[46523],{"type":603,"value":46524},"最终的技能树基本上是只有顺序／随机两种控制类型节点，节点拥有较轻度的condition功能。",{"type":597,"tag":3720,"props":46526,"children":46527},{},[],{"type":597,"tag":1023,"props":46529,"children":46531},{"id":46530},"_32-执行节点的技能流程",[46532],{"type":603,"value":46533},"3.2 执行节点的技能流程",{"type":597,"tag":606,"props":46535,"children":46536},{},[46537],{"type":603,"value":46538},"一般来说，技能的执行流程包括：",{"type":597,"tag":1321,"props":46540,"children":46541},{},[46542,46547,46552],{"type":597,"tag":807,"props":46543,"children":46544},{},[46545],{"type":603,"value":46546},"前摇时间：技能开始，但是技能真正的结算流程还没开始。技能开始以后，机能相关的特效和动作就开始播放。",{"type":597,"tag":807,"props":46548,"children":46549},{},[46550],{"type":603,"value":46551},"前摇时间结束：技能前摇结束时技能开始真正的释放以及结算，等技能前摇结束以后，技能真正的释放并结算。释放包括创建相应的弹道／法术场和buff。",{"type":597,"tag":807,"props":46553,"children":46554},{},[46555],{"type":603,"value":46556},"技能后摇点：技能播放到后摇点时间时，技能真正的结束。这时，技能对应的特效以及人物动作可能还会继续播放，但是技能流程已经正式结束了。也就是说，下一个技能可以执行。",{"type":597,"tag":598,"props":46558,"children":46560},{"id":46559},"_4-技能目标查找",[46561],{"type":603,"value":46562},"4 技能目标查找",{"type":597,"tag":606,"props":46564,"children":46565},{},[46566],{"type":603,"value":46567},"技能释放时，目标可能已经由AI传给了技能模块，也有可能没有一个目标，如玩家控制单位。",{"type":597,"tag":606,"props":46569,"children":46570},{},[46571],{"type":603,"value":46572},"技能在释放法术场、弹道的时候，重要的是技能的方向而不是技能目标一般来说，技能获得一个目标对象以后，技能的方向就是释法者到目标的方向。",{"type":597,"tag":606,"props":46574,"children":46575},{},[46576],{"type":603,"value":46577},"此外，技能方向可能需要一些配置，如前摇锁定（前摇过程中目标移动，技能方向不变），UI可控制（技能释放过程中，玩家可以通过控制UI控制技能的释放方向）。",{"type":597,"tag":598,"props":46579,"children":46581},{"id":46580},"_5技能表现",[46582],{"type":603,"value":46583},"5技能表现",{"type":597,"tag":606,"props":46585,"children":46586},{},[46587],{"type":603,"value":46588},"技能的表现包括动作、特效、shader、音效等。其中，特效比较复杂，需要配置的内容也比较多。比如，有些特效挂在模型上，有的特效挂在场景里。对于法术场的特效，分别可以分为法术场开始、结算、结束特效，分别在法术场开始时、结算时、结束时显示。对于buff也类似。",{"type":597,"tag":598,"props":46590,"children":46592},{"id":46591},"_6-弹道法术场和buff等技能创生体",[46593],{"type":603,"value":46594},"6 弹道、法术场和buff等技能创生体",{"type":597,"tag":606,"props":46596,"children":46597},{},[46598],{"type":603,"value":46599},"狭义的来说，技能只是负责技能的执行流程（技能树管理以及技能流程管理），而技能真正的结算主要是由其创生体结算的。当技能前摇结束开始生效时，技能创建相应的弹道和法术场，法术场弹道击中敌人时又有可能产生相应的buff。",{"type":597,"tag":606,"props":46601,"children":46602},{},[46603],{"type":603,"value":46604},"一般来说，法术场是一个场景的某块检测区域，每隔一段时间法术场检测此区域的敌人，并对其攻击结算。\n弹道是一类子弹移动路径的抽象，创建一个弹道就表示一个子弹特效沿这个弹道移动并检测路径上的敌人。\nbuff就是挂在单位身上的一个具有持续时间的状态，状态对单位产生一些正面或者负面的影响，并且在此段时间内，每隔一段时间进行一次伤害结算 。",{"type":597,"tag":606,"props":46606,"children":46607},{},[46608],{"type":603,"value":46609},"对于技能、法术场、buff之间的功能界定并不是很固定，比如技能能否直接对单位造成伤害，法术场能否对单位造成伤害，甚至技能只能创建法术场，法术场只能检测目标不能造成伤害，只能挂buff，而所有的伤害都是通过buff来结算。当然，这样并不一定好，一般来说，技能和法术场都可以对单位造成伤害。",{"type":597,"tag":606,"props":46611,"children":46612},{},[46613],{"type":603,"value":46614},"总之，创生体功能的界定需要根据策划需求、效率考虑等因素调整。",{"type":597,"tag":598,"props":46616,"children":46618},{"id":46617},"_61-buff状态",[46619],{"type":603,"value":46620},"6.1 Buff状态",{"type":597,"tag":606,"props":46622,"children":46623},{},[46624],{"type":603,"value":46625},"Buff就是挂在单位身上持续一定时间的有益或者有害的状态，这里状态＝buff。",{"type":597,"tag":606,"props":46627,"children":46628},{},[46629],{"type":603,"value":46630},"Buff模块有个需要注意的是Buff之间的相互关系，如排斥（A状态在，B状态挂不上去），清除（A状态挂上去同时导致B状态消失）等。",{"type":597,"tag":606,"props":46632,"children":46633},{},[46634],{"type":603,"value":46635},"为了实现以上功能，最简单的方式是在状态A中直接填写状态关系状态字段，如状态A排斥状态B/C/D/E...，A状态清除状态X/Y/Z...。",{"type":597,"tag":606,"props":46637,"children":46638},{},[46639],{"type":603,"value":46640},"以上的实现方式有个问题，等游戏做到后期，我们有成千上万个buff状态，那么一个魔法免疫状态，策划需要填表的排斥状态可能成千上万。",{"type":597,"tag":606,"props":46642,"children":46643},{},[46644],{"type":603,"value":46645},"为了解决这个问题，可以使用分类的思想解决。定义某类状态和另一类状态之间的规则。\n基于以上思想，引入一个叫buff原子状态的概念，原子状态表示一类状态，如减速、禁魔、魔免、悬空、晕眩、变羊等等等。",{"type":597,"tag":606,"props":46647,"children":46648},{},[46649],{"type":603,"value":46650},"在给单位挂一个新的buff的之前，查询此buff持有的原子状态和单位身上已经有的原子状态之间的关系，根据单位身上已有的原子状态判定新的原子状态应该使用何种行为处理。",{"type":597,"tag":606,"props":46652,"children":46653},{},[46654],{"type":603,"value":46655},"此处的何种行为，代表的就是原子状态之间的规则，如排斥等。这些规则可以让策划填一个名字叫“原子状态关系”的表，此表是一个n*n的二维数组，n为游戏中所有的原子状态的数量。",{"type":597,"tag":606,"props":46657,"children":46658},{},[46659],{"type":603,"value":46660},"原子状态的数量远远小于buff的数量，所以可以很容易的定义这些规则。",{"type":597,"tag":1023,"props":46662,"children":46664},{"id":46663},"_62-法术场",[46665],{"type":603,"value":46666},"6.2 法术场",{"type":597,"tag":606,"props":46668,"children":46669},{},[46670],{"type":603,"value":46671},"法术场描述对一块区域的影响，这块区域可以每隔一段时间进行一次检测，检测这块区域内的单位并且对单位进行结算。",{"type":597,"tag":606,"props":46673,"children":46674},{},[46675],{"type":603,"value":46676},"法术场需要注意一个问题，就是一个法术场每次结算可能使用不同的参数进行结算，比如一个技能，第一次结算对每个单位进行晕眩，第二次结算对单位进行伤害。",{"type":597,"tag":606,"props":46678,"children":46679},{},[46680],{"type":603,"value":46681},"解决这种问题比较直接的方式是技能直接创建两个法术场，每个法术场结算一次，第二个法术场创建具有延迟时间。但是这种方式有个问题，有可能策划需求做一个结算十次而且每次结算的参数都不同的法术场。那么，一个技能以一定的时间间隔创建是个法术场，同时法术场的管理具有一定的成本，从而导致效率的降低。",{"type":597,"tag":606,"props":46683,"children":46684},{},[46685],{"type":603,"value":46686},"为解决这个问题，我们优化了法术场结算的实现机制，增加了一种新的法术场：序列法术场。这类法术场策划可以配置法术场每次结算之间的时间间隔以及每次结算所使用的法术场参数。",{"type":597,"tag":606,"props":46688,"children":46689},{},[46690],{"type":603,"value":46691},"这里所说的技能模块包括：技能流程、法术场、弹道和buff。",{"type":597,"tag":606,"props":46693,"children":46694},{},[46695],{"type":603,"value":46696},"首先介绍authority和proxy的概念，这两个概念是基于单位unit的基础上进行的区分。\nauthority表示单位的主控端，即此单位是由客户端和还是服务端控制。对于玩家avatar，玩家本地的客户端就是主控端。而对于怪物，他们的行为由服务端控制，主控端就是服务端。\nproxy表示代理端，表示被主控端控制。如对于怪物来说，所有的客户端都是proxy；对于玩家A来说，服务端和其他玩家的客户端都是proxy。",{"type":597,"tag":598,"props":46698,"children":46700},{"id":46699},"_0-技能同步的原则",[46701],{"type":603,"value":46702},"0 技能同步的原则",{"type":597,"tag":606,"props":46704,"children":46705},{},[46706],{"type":603,"value":46707},"1.客户端先行\n对于玩家控制的单位来说，玩家点击按钮释放一个技能，客户端首先响应，单位播放动作以及相应的技能特效。",{"type":597,"tag":621,"props":46709,"children":46712},{"className":46710,"code":46711,"language":32668,"meta":591},[32666],"据我了解，有的已上线游戏并没有做客户端先行，而是所有的技能执行请求都发给服务端，然后由服务端发起。\n这种模式技能流程控制会比较简单，但是在网络环境差的情况下，体验可能差一些。但是，目测也是可以接受的。\n",[46713],{"type":597,"tag":629,"props":46714,"children":46715},{"__ignoreMap":591},[46716],{"type":603,"value":46711},{"type":597,"tag":606,"props":46718,"children":46719},{},[46720],{"type":603,"value":46721},"2.技能流程以authority为发起端\n玩家单位技能发起是由她的客户端，怪物的技能发起是由AI也就是服务端。\n3.技能结算在服务端发起。\n技能真正的结算，比如法术场检测、buff结算、伤害结算等，统一在服务端处理。",{"type":597,"tag":598,"props":46723,"children":46725},{"id":46724},"_1-技能执行流程的同步",[46726],{"type":603,"value":46727},"1 技能执行流程的同步",{"type":597,"tag":606,"props":46729,"children":46730},{},[46731],{"type":603,"value":46732},"这里所说的技能执行流程指的是技能树的一个执行节点的流程。",{"type":597,"tag":606,"props":46734,"children":46735},{},[46736],{"type":603,"value":46737},"技能流程负责动作、特效以及技能结算，其中技能结算包括：释放法术场、弹道或buff。",{"type":597,"tag":606,"props":46739,"children":46740},{},[46741],{"type":603,"value":46742},"一个技能执行节点的执行流程中，需要同步的有两个时间点：",{"type":597,"tag":1321,"props":46744,"children":46745},{},[46746,46751],{"type":597,"tag":807,"props":46747,"children":46748},{},[46749],{"type":603,"value":46750},"技能开始：技能开始播放动作",{"type":597,"tag":807,"props":46752,"children":46753},{},[46754],{"type":603,"value":46755},"技能结算：前摇结束，即能进入结算逻辑。这类同步消息往往并不是由技能本身去同步，而是技能生成了法术场、弹道等，他们去做相应的同步。",{"type":597,"tag":606,"props":46757,"children":46758},{},[46759],{"type":603,"value":46760},"以玩家点击技能按钮开始释放技能为例介绍技能同步流程，如图所示：",{"type":597,"tag":606,"props":46762,"children":46763},{},[46764],{"type":597,"tag":719,"props":46765,"children":46767},{"alt":719,"src":46766},"https:////upload-images.jianshu.io/upload_images/36361-392299771fc34192.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/492/format/webp",[],{"type":597,"tag":606,"props":46769,"children":46770},{},[46771],{"type":603,"value":46478},{"type":597,"tag":606,"props":46773,"children":46774},{},[46775],{"type":603,"value":46776},"1.主控端点击技能按钮，技能开始播放动作，主控端告诉服务端技能开始。\n2.服务端广播给所有的客户端(多玩家场景)，告知其他所有的客户端此玩家开始执行技能。其他客户端收到指令后可是播放技能表现。\n3.服务端延迟一段时间后，服务端开始进行技能结算，并且将结算结果通知客户端。",{"type":597,"tag":617,"props":46778,"children":46779},{},[46780],{"type":597,"tag":606,"props":46781,"children":46782},{},[46783],{"type":603,"value":46784},"延迟时间=技能前摇时间-上行-下行，下行一半不能确定，所以默认为上行=下行",{"type":597,"tag":617,"props":46786,"children":46787},{},[46788],{"type":597,"tag":606,"props":46789,"children":46790},{},[46791],{"type":603,"value":46792},"另一种中庸的计算方式是：延迟时间=技能前摇时间-上行，防止要求技能前摇时间过长",{"type":597,"tag":1023,"props":46794,"children":46796},{"id":46795},"使用此同步流程的表现为",[46797],{"type":603,"value":46798},"使用此同步流程的表现为：",{"type":597,"tag":606,"props":46800,"children":46801},{},[46802],{"type":603,"value":46803},"1.要求技能前摇时间>2*网络延迟，若前摇时间短，则延迟时间=0，效果可能差一些\n2.authority客户端表现完美。\n3.proxy client表现一般，即玩家A看玩家B的效果为：玩家B刚开始执行技能动作，没到前摇时间就进行了技能结算。但是因为玩家一般也不会过分关注其他玩家的动作，所以是可以接受的。",{"type":597,"tag":598,"props":46805,"children":46807},{"id":46806},"_2-技能树的同步",[46808],{"type":603,"value":46809},"2 技能树的同步",{"type":597,"tag":606,"props":46811,"children":46812},{},[46813,46815,46821],{"type":603,"value":46814},"我上篇文章",{"type":597,"tag":886,"props":46816,"children":46819},{"href":46817,"rel":46818},"https://www.jianshu.com/p/551f02f95727",[890],[46820],{"type":603,"value":432},{"type":603,"value":46822},"已经介绍，我们游戏使用的是技能树来管理技能流程。那么就面临一个问题，技能树如何同步。",{"type":597,"tag":606,"props":46824,"children":46825},{},[46826],{"type":603,"value":46827},"最简单最暴力的方式，是客户端和服务端同时管理技能树，并且将其状态同步。这样，客户端和服务端的技能树状态统一、完备。",{"type":597,"tag":606,"props":46829,"children":46830},{},[46831],{"type":603,"value":46832},"后来发现，对于proxy端，并不需要完备的技能树信息，最节省的方式是proxy根本不接受技能树同步信息，只是接受播放动作、技能结算等信息。但这样需要告诉其他proxy播放什么动作、特效等。",{"type":597,"tag":606,"props":46834,"children":46835},{},[46836],{"type":603,"value":46837},"在我们系统中，技能同步包括三类同步消息:",{"type":597,"tag":1321,"props":46839,"children":46840},{},[46841,46846,46851],{"type":597,"tag":807,"props":46842,"children":46843},{},[46844],{"type":603,"value":46845},"技能根节点enter (root_enter): 表示一个大技能的进入",{"type":597,"tag":807,"props":46847,"children":46848},{},[46849],{"type":603,"value":46850},"技能叶子节点enter(action_enter): 表示一个技能树的执行节点的进入。",{"type":597,"tag":807,"props":46852,"children":46853},{},[46854],{"type":603,"value":46855},"根节点exit(root_exit) ：表示大技能结束",{"type":597,"tag":606,"props":46857,"children":46858},{},[46859],{"type":603,"value":46860},"根节点保存一个完整技能的信息，需要和技能模块外部交互，因此需要知道技能的开始和结束。\n叶子节点的执行代表着技能真正的执行逻辑，也需要同步。\n而对于其他节点，作为流程控制节点，只需要在主端确保技能流程无误即可",{"type":597,"tag":617,"props":46862,"children":46863},{},[46864],{"type":597,"tag":606,"props":46865,"children":46866},{},[46867],{"type":603,"value":46868},"后来这里进行了进一步的优化，对于纯根节点，主控端（玩家控制的客户端）将信息同步给服务端，服务端不再同步给其他客户端。有的技能树只有一个节点，那么按照叶子节点的策略，主控端同步给服务端，服务端广播给所有的其他客户端。",{"type":597,"tag":598,"props":46870,"children":46872},{"id":46871},"_3-技能结算的同步",[46873],{"type":603,"value":46874},"3 技能结算的同步",{"type":597,"tag":606,"props":46876,"children":46877},{},[46878],{"type":603,"value":46879},"技能结算包括创建法术场、buff、弹道、技能直接伤害等。",{"type":597,"tag":3995,"props":46881,"children":46883},{"id":46882},"法术场弹道的同步",[46884],{"type":603,"value":46885},"法术场、弹道的同步",{"type":597,"tag":606,"props":46887,"children":46888},{},[46889],{"type":603,"value":46890},"法术场、弹道的同步比较类似，他们都作为一个entity（网络同步单元）在服务端创建，创建以后使用entity管理机制服务端通知客户端他们的创建和销毁。",{"type":597,"tag":606,"props":46892,"children":46893},{},[46894],{"type":603,"value":46895},"以法术场为例，法术场的执行和同步流程：",{"type":597,"tag":803,"props":46897,"children":46898},{},[46899,46904,46909,46914,46919],{"type":597,"tag":807,"props":46900,"children":46901},{},[46902],{"type":603,"value":46903},"服务端发起创建一个法术场，并且通知客户端",{"type":597,"tag":807,"props":46905,"children":46906},{},[46907],{"type":603,"value":46908},"法术场每隔一段时间结算一次，注意，法术场结算并不需要同步，每隔一段时间服务端执行检测逻辑，客户端播放结算特效等。两个逻辑互不依赖，也不要求时间一致。",{"type":597,"tag":807,"props":46910,"children":46911},{},[46912],{"type":603,"value":46913},"当法术场结算时检测到攻击目标时，服务端计算攻击伤害等信息，并将攻击信息发给客户端。",{"type":597,"tag":807,"props":46915,"children":46916},{},[46917],{"type":603,"value":46918},"客户端收到伤害信息，客户端播放相应的表现，如法术场受击特效等。此处还包括属于通用模块的跳字等。",{"type":597,"tag":807,"props":46920,"children":46921},{},[46922],{"type":603,"value":46923},"当服务端的法术场时间到了进行destroy时，使用entity的管理机制通知所有客户端destroy法术场。",{"type":597,"tag":606,"props":46925,"children":46926},{},[46927],{"type":603,"value":46928},"弹道的同步类似，唯一的区别就是法术场在某一位置使用攻击盒检测目标，而弹道是一个移动的子弹，客户端表现是一个特效在飞，而服务端每隔一段时间根据飞行速度等使用胶囊攻击盒去检测目标碰撞。",{"type":597,"tag":606,"props":46930,"children":46931},{},[46932],{"type":603,"value":46933},"由以上可以发现，法术场作为一个entity他的管理成本是比较高的，所以若策划想出一些需求需要使用多个法术场实现，一般通过拓展法术场功能使用一个法术场来实现。",{"type":597,"tag":617,"props":46935,"children":46936},{},[46937],{"type":597,"tag":606,"props":46938,"children":46939},{},[46940],{"type":603,"value":46941},"比如，策划要做一个冰火两重天法术场，即法术场在每次结算时使用不同的参数，第一次结算使用火焰，第二次结算是冰霜。若这种需求较少，可以使用两个法术场，但是如果要冰火雷毒水电风魔奥术神圣***N重天，则代价太大。一般可以让法术场支持每次使用不同的结算参数来结算即可。",{"type":597,"tag":3995,"props":46943,"children":46945},{"id":46944},"buff同步",[46946],{"type":603,"value":46944},{"type":597,"tag":606,"props":46948,"children":46949},{},[46950],{"type":603,"value":46951},"buff是附加在unit身上的东西（没有unit就没有buff，但是没有unit可能有法术场），所以不需要使用entity来同步。",{"type":597,"tag":803,"props":46953,"children":46954},{},[46955,46960],{"type":597,"tag":807,"props":46956,"children":46957},{},[46958],{"type":603,"value":46959},"服务端确定buff是否可以挂在unit上面。",{"type":597,"tag":807,"props":46961,"children":46962},{},[46963],{"type":603,"value":46964},"客户端和服务端都维护一个buff管理器，挂buff的消息通知所有客户端，客户端负责表现，服务端负责结算即可。",{"type":597,"tag":598,"props":46966,"children":46968},{"id":46967},"_4-伤害属性的同步",[46969],{"type":603,"value":46970},"4 伤害、属性的同步",{"type":597,"tag":606,"props":46972,"children":46973},{},[46974],{"type":603,"value":46975},"主要介绍下伤害的同步，顺便附带介绍下属性同步。",{"type":597,"tag":606,"props":46977,"children":46978},{},[46979],{"type":603,"value":46980},"对于伤害结算来说，技能、buff、法术场和弹道都可能造成伤害，当服务端发现造成伤害时，服务端首先根据技能信息计算伤害值，计算以后将信息通过技能模块发送给所有客户端，所有客户端接到信息后首先播放技能伤害相关的表现，如受击特效等，然后播放跳字等通用伤害客户端表现。",{"type":597,"tag":606,"props":46982,"children":46983},{},[46984],{"type":603,"value":46985},"buff可能修改单位属性，如攻击力、攻击速度等。单位的属性由基础成长属性+装备属性+buff属性构成，前两个属性为面板属性，属于玩家信息。而buff属性只在战斗中有效，在面板中并没有表现。\n因此装备属性的同步需要通知逻辑服务器（真正的服务器），而buff并不需要通知逻辑服务器。",{"type":597,"tag":857,"props":46987,"children":46989},{"id":46988},"技能说穿了只是一个流程而不该是一个实体",[46990],{"type":597,"tag":1080,"props":46991,"children":46992},{},[46993],{"type":603,"value":46994},"技能，说穿了只是一个流程，而不该是一个实体",{"type":597,"tag":606,"props":46996,"children":46997},{},[46998],{"type":603,"value":46999},"1、表的作用实际不是定义流程，而是提供流程中需要的数据。因此不管流程需要数据的是前端还是后端，他们都应该从一个表中调用。\n2、并不是因为把技能作为实体才导致它的混乱，真正导致混乱是的技能实体的范围扩大化了（从这个意义上说，把技能做为一个流程也没什么错，技能的承载内容应该仅仅是这个流程本身），把后续效果剥离出来会好很多。",{"type":597,"tag":606,"props":47001,"children":47002},{},[47003],{"type":603,"value":47004},"我个人的经验，不评价好坏，大概是这样的：技能的表象数据必须要有，技能效果相应的数据应该仅限于这个技能释放条件和它的直接效果（这个与表象共享技能id，所以最好也放在一起）；直接效果之外的触发效果，单独建立BUFF表，为此建立一套单独的流程，供技能调用（也就是技能效果应该是触发了某个buff）",{"type":597,"tag":598,"props":47006,"children":47008},{"id":47007},"就skill和buff的边界问题",[47009],{"type":603,"value":47010},"就skill和buff的边界问题，",{"type":597,"tag":606,"props":47012,"children":47013},{},[47014],{"type":603,"value":47015},"恰好新的项目里里面我进行了一个比较新的尝试，就是抹除这个边界。 在这次的项目中，因为技能需求足够复杂，所以采用了以前一直只想没实践的想法，就是取消技能在逻辑中的的概念，或者说在基础逻辑中没有技能的设计，技能只在数据层和讨论的概念中出现。 具体的描述也很简单，所谓的技能我们都理解为 施法者一组行为和数据的组合，它包含了技能的icon，类型，动作等一系列和战斗逻辑有直接关系但没有本质关系的概念与数据的总和，用来在游戏概念中定义一个技能的所有特征。 但是在战斗中，真正发挥作用的是buff，在新的设计中，所有的参与战斗逻辑的实体都是buff。 比如 如果要实现一个火球，那么实现方式是技能数据告诉我会播放什么样的施法动画，同时丢出一个弹道，而这个弹道上附着一个buff，叫做燃烧，该buff附带特效火焰和200点的碰撞伤害（在弹道命中敌人时候）。 而这个一整个流程，在概念里，被定义为 施法者释放了一个技能，映射到现实逻辑，就是某人拿起一个石头，点燃，然后把石头丢出去砸到了某人。 至此，核心的技能结算逻辑里，彻底干掉了skill这个类，技能变成了只在概念讨论里才出现的词汇。战斗结算中，不再存在skill的概念。",{"type":597,"tag":606,"props":47017,"children":47018},{},[47019],{"type":597,"tag":1080,"props":47020,"children":47021},{},[47022],{"type":603,"value":47023},"表与脚本混合.",{"type":597,"tag":606,"props":47025,"children":47026},{},[47027],{"type":603,"value":47028},"又有两种分支,",{"type":597,"tag":606,"props":47030,"children":47031},{},[47032],{"type":603,"value":47033},"**分支一:主表副脚本,**脚本作为字段绑定于表里.表的某个字段就是技能的脚本路径.技能的主流程,框架逻辑有表的字段来决定.",{"type":597,"tag":606,"props":47035,"children":47036},{},[47037,47042],{"type":597,"tag":1080,"props":47038,"children":47039},{},[47040],{"type":603,"value":47041},"分支二:主脚本副表",{"type":603,"value":47043},",主逻辑,流程都是有脚本实现.技能的主流程由脚本实现.脚本读表获取数据,进行技能的操作.",{"type":597,"tag":606,"props":47045,"children":47046},{},[47047],{"type":603,"value":47048},"优点:增加奇怪技能,很方便,直接写脚本就可以了.",{"type":597,"tag":606,"props":47050,"children":47051},{},[47052],{"type":603,"value":47053},"缺点:批量处理工作量大,既要改表,又要改技能.每个技能对应独立的脚本,技能越多,脚本越多.批量处理的时候,工作量大.",{"type":597,"tag":857,"props":47055,"children":47056},{"id":32788},[47057],{"type":603,"value":32788},{"type":597,"tag":606,"props":47059,"children":47060},{},[47061],{"type":597,"tag":886,"props":47062,"children":47065},{"href":47063,"rel":47064},"https://zhuanlan.zhihu.com/p/147681650",[890],[47066],{"type":603,"value":47063},{"title":591,"searchDepth":787,"depth":787,"links":47068},[47069,47070,47071,47072,47076,47077,47078,47079,47082,47083,47086,47087,47088,47089],{"id":46324,"depth":787,"text":46327},{"id":46344,"depth":787,"text":46347},{"id":46365,"depth":787,"text":46368},{"id":46409,"depth":787,"text":46412,"children":47073},[47074,47075],{"id":46433,"depth":1530,"text":46436},{"id":46530,"depth":1530,"text":46533},{"id":46559,"depth":787,"text":46562},{"id":46580,"depth":787,"text":46583},{"id":46591,"depth":787,"text":46594},{"id":46617,"depth":787,"text":46620,"children":47080},[47081],{"id":46663,"depth":1530,"text":46666},{"id":46699,"depth":787,"text":46702},{"id":46724,"depth":787,"text":46727,"children":47084},[47085],{"id":46795,"depth":1530,"text":46798},{"id":46806,"depth":787,"text":46809},{"id":46871,"depth":787,"text":46874},{"id":46967,"depth":787,"text":46970},{"id":47007,"depth":787,"text":47010},"content:unity:2020-02-15-skill-system.md","unity/2020-02-15-skill-system.md","2020-02-15",{"_path":92,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":91,"description":47094,"body":47095,"_type":791,"_id":47776,"_source":793,"_file":47777,"_extension":795,"date":47778},"用C#编写的源代码被编译为一种符合CLI规范的中间语言（IL）。IL代码与资源（例如位图和字符串）一起作为一种称为程序集的可执行文件存储在磁盘上，通常具有的扩展名为.exe（应用程序）或.dll（库）。程序集包含清单，它提供有关程序集的类型、版本、区域性和安全要求等信息。",{"type":594,"children":47096,"toc":47766},[47097,47101,47106,47117,47124,47129,47141,47178,47186,47253,47258,47266,47279,47284,47295,47300,47318,47324,47338,47343,47392,47398,47403,47424,47430,47435,47440,47446,47458,47476,47489,47494,47499,47504,47512,47519,47524,47529,47534,47539,47547,47552,47560,47565,47570,47575,47580,47585,47590,47597,47602,47607,47612,47620,47625,47630,47638,47643,47648,47653,47658,47663,47668,47673,47678,47686,47693,47702,47707,47712,47717,47722,47727],{"type":597,"tag":606,"props":47098,"children":47099},{},[47100],{"type":603,"value":47094},{"type":597,"tag":606,"props":47102,"children":47103},{},[47104],{"type":603,"value":47105},"执行C#程序时，程序集将加载到CLR中，它可能会根据清单中的信息执行不同的操作。然后，如果符合安全要求，CLR就会执行实时（JIT）编译以将IL代码转换为本机机器指令。CLR还提供与自动垃圾回收、异常处理和资源管理有关的其他服务。由CLR执行的代码有时会称为“托管代码”。",{"type":597,"tag":606,"props":47107,"children":47108},{},[47109,47110,47115],{"type":603,"value":19113},{"type":597,"tag":719,"props":47111,"children":47114},{"alt":47112,"src":47113},"什么是C#语言？作用有哪些？","/images/2020-02-13-csharp-run/094920_15170513.gif",[],{"type":603,"value":47116},"]",{"type":597,"tag":606,"props":47118,"children":47119},{},[47120],{"type":597,"tag":719,"props":47121,"children":47123},{"alt":719,"src":47122},"/images/2020-02-13-csharp-run/v2-757e0e6e8813e7441cd758121e564729_1440w.jpg",[],{"type":597,"tag":598,"props":47125,"children":47127},{"id":47126},"编译器",[47128],{"type":603,"value":47126},{"type":597,"tag":606,"props":47130,"children":47131},{},[47132,47139],{"type":597,"tag":886,"props":47133,"children":47136},{"href":47134,"rel":47135},"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/",[890],[47137],{"type":603,"value":47138},"CSC.exe",{"type":603,"value":47140},"是C＃编译器，可以编译您的C＃代码并生成可执行（.exe）文件，动态链接库（.dll）或代码模块（.netmodule）。",{"type":597,"tag":606,"props":47142,"children":47143},{},[47144,47151,47153,47160,47162,47168,47170,47177],{"type":597,"tag":886,"props":47145,"children":47148},{"href":47146,"rel":47147},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/msbuild",[890],[47149],{"type":603,"value":47150},"MSBuild",{"type":603,"value":47152},"是Microsoft Build Engine，可用于从Visual Studio生成",{"type":597,"tag":886,"props":47154,"children":47157},{"href":47155,"rel":47156},"https://docs.microsoft.com/zh-cn/visualstudio/ide/solutions-and-projects-in-visual-studio",[890],[47158],{"type":603,"value":47159},"项目和解决方案",{"type":603,"value":47161}," 。 此外，即使我编写了一些.cs文件和一个自定义项目文件（.xxproj）来构建它们，我们也可以使用msbuild.exe并使用",{"type":597,"tag":629,"props":47163,"children":47165},{"className":47164},[],[47166],{"type":603,"value":47167},"msbuild xxx.xxproj",{"type":603,"value":47169},"类的命令来构建它们。 请参阅",{"type":597,"tag":886,"props":47171,"children":47174},{"href":47172,"rel":47173},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/walkthrough-creating-an-msbuild-project-file-from-scratch",[890],[47175],{"type":603,"value":47176},"本文档",{"type":603,"value":19548},{"type":597,"tag":606,"props":47179,"children":47180},{},[47181],{"type":597,"tag":1080,"props":47182,"children":47183},{},[47184],{"type":603,"value":47185},"它们之间的关系：",{"type":597,"tag":803,"props":47187,"children":47188},{},[47189,47211,47248],{"type":597,"tag":807,"props":47190,"children":47191},{},[47192,47194,47201,47203,47209],{"type":603,"value":47193},"如果我只有几个.cs文件，并且想要编译它们以输出.exe及其它内容，那么csc.exe就足够了。 ",{"type":597,"tag":886,"props":47195,"children":47198},{"href":47196,"rel":47197},"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe",[890],[47199],{"type":603,"value":47200},"在命令行中",{"type":603,"value":47202}," （ ",{"type":597,"tag":629,"props":47204,"children":47206},{"className":47205},[],[47207],{"type":603,"value":47208},"by cmd.exe or other things",{"type":603,"value":47210}," ） 使用它来编译代码。",{"type":597,"tag":807,"props":47212,"children":47213},{},[47214,47216,47223,47225,47231,47233,47239,47241,47247],{"type":603,"value":47215},"如果创建项目文件（.xxproj）以更好地控制资源，.cs文件和其他文件，则可以",{"type":597,"tag":886,"props":47217,"children":47220},{"href":47218,"rel":47219},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/msbuild-command-line-reference",[890],[47221],{"type":603,"value":47222},"在命令行中使用msbuild",{"type":603,"value":47224},"来构建它们以输出.exe或其他内容。 我们应该知道的一点是，msbuild.exe不仅可以构建C＃代码，而且还可以构建",{"type":597,"tag":629,"props":47226,"children":47228},{"className":47227},[],[47229],{"type":603,"value":47230},"VB.net, C++, F#",{"type":603,"value":47232}," ...当我使用msbuild使用",{"type":597,"tag":629,"props":47234,"children":47236},{"className":47235},[],[47237],{"type":603,"value":47238},"msbuild xx.csproj",{"type":603,"value":47240},"类的命令来构建C＃代码时，它将",{"type":597,"tag":629,"props":47242,"children":47244},{"className":47243},[],[47245],{"type":603,"value":47246},"call csc.exe to compile C# code and pass parameters read from the .csproj file to it",{"type":603,"value":19548},{"type":597,"tag":807,"props":47249,"children":47250},{},[47251],{"type":603,"value":47252},"尽管msbuild是Visual Studio中的构建系统，但它并不依赖于Visual Studio。",{"type":597,"tag":606,"props":47254,"children":47255},{},[47256],{"type":603,"value":47257},"您可能想知道msbuild传递给特定构建的csc的信息。 在这种情况下，只需使用msbuild的详细程度开关即可：",{"type":597,"tag":621,"props":47259,"children":47261},{"code":47260},"msbuild MyProject.csproj /target:rebuild /verbosity:diag\n",[47262],{"type":597,"tag":629,"props":47263,"children":47264},{"__ignoreMap":591},[47265],{"type":603,"value":47260},{"type":597,"tag":606,"props":47267,"children":47268},{},[47269,47271,47278],{"type":603,"value":47270},"请参阅",{"type":597,"tag":886,"props":47272,"children":47275},{"href":47273,"rel":47274},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/obtaining-build-logs-with-msbuild?view=vs-2015&redirectedfrom=MSDN",[890],[47276],{"type":603,"value":47277},"使用MSBuild获取构建日志",{"type":603,"value":19548},{"type":597,"tag":1023,"props":47280,"children":47282},{"id":47281},"mono系列",[47283],{"type":603,"value":47281},{"type":597,"tag":606,"props":47285,"children":47286},{},[47287,47289],{"type":603,"value":47288},"Mono C＃编译器被认为是C＃1.0，C＃2.0，C＃3.0，C＃4.0，C＃5.0和C＃6.0（ECMA）的完整功能，并且部分支持C＃7。",{"type":597,"tag":886,"props":47290,"children":47293},{"href":47291,"rel":47292},"https://www.mono-project.com/docs/about-mono/languages/csharp/",[890],[47294],{"type":603,"value":47291},{"type":597,"tag":606,"props":47296,"children":47297},{},[47298],{"type":603,"value":47299},"从历史上看，存在相同编译器的各种版本。",{"type":597,"tag":1321,"props":47301,"children":47302},{},[47303,47308,47313],{"type":597,"tag":807,"props":47304,"children":47305},{},[47306],{"type":603,"value":47307},"gmcs：编译器以2.0 mscorlib为目标。引用2.0概要文件库（在.NET 2.0和.NET 3.5中定义的API）并公开完整的C＃3.0语言。",{"type":597,"tag":807,"props":47309,"children":47310},{},[47311],{"type":603,"value":47312},"smcs：以2.1 mscorlib为目标的编译器，以构建Moonlight应用程序。 引用2.1概要文件库（为Silverlight定义的API）并公开完整的C＃3.0语言。这是用于创建Silverlight / Moonlight应用程序的编译器。",{"type":597,"tag":807,"props":47314,"children":47315},{},[47316],{"type":603,"value":47317},"dmcs：编译器针对4.0 mscorlib。引用4.0概要文件库（.NET 4.0中定义的API）并支持C＃4.0。",{"type":597,"tag":598,"props":47319,"children":47321},{"id":47320},"编译为-msil",[47322],{"type":603,"value":47323},"编译为 MSIL",{"type":597,"tag":606,"props":47325,"children":47326},{},[47327,47329,47336],{"type":603,"value":47328},"编译为托管代码时，编译器将源代码转换为 Microsoft 中间语言 (MSIL)，这是一组独立于 CPU 且可以有效地转换为本机代码的说明。 MSIL 包括有关加载、存储、初始化和调用对象方法的说明，以及有关算术和逻辑运算、控制流、直接内存访问、异常处理和其他操作的说明。 代码可以运行之前，必须将 MSIL 转换为特定于 CPU 的代码，通常通过 ",{"type":597,"tag":886,"props":47330,"children":47333},{"href":47331,"rel":47332},"https://docs.microsoft.com/zh-cn/dotnet/standard/managed-execution-process?redirectedfrom=MSDN#compiling_msil_to_native_code",[890],[47334],{"type":603,"value":47335},"实时 (JIT) 编译器",{"type":603,"value":47337},"实现。 由于公共语言运行时为其支持的每个计算机基础结构提供一个或多个 JIT 编译器，同一组的 MSIL 可以在任何受支持的基础结构上进行 JIT 编译和运行。",{"type":597,"tag":606,"props":47339,"children":47340},{},[47341],{"type":603,"value":47342},"当编译器生成 MSIL 时，它还生成元数据。 元数据描述代码中的类型，包括每种类型的定义、每种类型的成员的签名、代码引用的成员以及运行时在执行时间使用的其他数据。 MSIL 和元数据包含在一个可移植的可执行 (PE) 文件中，该文件基于且扩展已发布的 Microsoft PE 和历来用于可执行内容的通用对象文件格式 (COFF)。 容纳 MSIL 或本机代码以及元数据的这种文件格式使操作系统能够识别公共语言运行时映像。 文件中元数据的存在以及 MSIL 使代码能够描述自身，这意味着将不需要类型库或接口定义语言 (IDL)。 运行时在执行期间会根据需要从文件中查找并提取元数据。",{"type":597,"tag":617,"props":47344,"children":47345},{},[47346,47354,47377,47382,47387],{"type":597,"tag":606,"props":47347,"children":47348},{},[47349],{"type":597,"tag":1080,"props":47350,"children":47351},{},[47352],{"type":603,"value":47353},"什么是非托管代码(unmanaged code)？",{"type":597,"tag":606,"props":47355,"children":47356},{},[47357,47362,47372],{"type":597,"tag":1080,"props":47358,"children":47359},{},[47360],{"type":603,"value":47361},"非托管代码，直接编译成目标计算机码，在",{"type":597,"tag":886,"props":47363,"children":47366},{"href":47364,"rel":47365},"http://baike.baidu.com/view/159628.htm",[890],[47367],{"type":597,"tag":1080,"props":47368,"children":47369},{},[47370],{"type":603,"value":47371},"公共语言运行库",{"type":597,"tag":1080,"props":47373,"children":47374},{},[47375],{"type":603,"value":47376},"环境的外部，由操作系统直接执行的代码，代码必须自己提供垃圾回收，类型检查，安全支持等服务。如需要内存管理等服务，必须显示调用操作系统的接口，通常调用Windows SDK所提供的API来实现内存管理。",{"type":597,"tag":606,"props":47378,"children":47379},{},[47380],{"type":603,"value":47381},"当项目选择名字以MFC，ATL，Win32开头的项目类型，那么这个项目所产生的就是非托管程序。",{"type":597,"tag":606,"props":47383,"children":47384},{},[47385],{"type":603,"value":47386},"非托管代码就是在Visual Studio .NET 2002发布之前所创建的代码。例如Visual Basic 6, Visual C++ 6, 最糟糕的是，连那些依然残存在你的硬盘中、拥有超过15年历史的陈旧C编译器所产生的代码都是非托管代码。托管代码直接编译成目标计算机的机械码，这些代码只能运行在编译出它们的计算机上，或者是其它相同处理器或者几乎一样处理器的计算机上。非托管代码不能享受一些运行库所提供的服务，例如安全和内存管理等。如果非托管代码需要进行内存管理等服务，就必须显式地调用操作系统的接口，通常来说，它们会调用Windows SDK所提供的API来实现。就最近的情况来看，非托管程序会通过COM接口来获取操作系统服务。",{"type":597,"tag":606,"props":47388,"children":47389},{},[47390],{"type":603,"value":47391},"跟Visual Studio平台的其他编程语言不一样，Visual C++可以创建非托管程序。当你创建一个项目，并且选择名字以M FC，ATL或者Win32开头的项目类型，那么这个项目所产生的就是非托管程序。",{"type":597,"tag":598,"props":47393,"children":47395},{"id":47394},"将-msil-编译为本机代码",[47396],{"type":603,"value":47397},"将 MSIL 编译为本机代码",{"type":597,"tag":606,"props":47399,"children":47400},{},[47401],{"type":603,"value":47402},"运行 Microsoft 中间语言 (MSIL) 前，必须根据CLR公共语言运行时将其编译为目标计算机基础结构的本机代码。 .NET Framework 提供两种方法来执行此转换：",{"type":597,"tag":1321,"props":47404,"children":47405},{},[47406,47411],{"type":597,"tag":807,"props":47407,"children":47408},{},[47409],{"type":603,"value":47410},".NET Framework 实时 (JIT) 编译器。",{"type":597,"tag":807,"props":47412,"children":47413},{},[47414,47416,47423],{"type":603,"value":47415},".NET Framework ",{"type":597,"tag":886,"props":47417,"children":47420},{"href":47418,"rel":47419},"https://docs.microsoft.com/zh-cn/dotnet/framework/tools/ngen-exe-native-image-generator",[890],[47421],{"type":603,"value":47422},"Ngen.exe（本机映像生成器）",{"type":603,"value":758},{"type":597,"tag":1023,"props":47425,"children":47427},{"id":47426},"由-jit-编译器编译",[47428],{"type":603,"value":47429},"由 JIT 编译器编译",{"type":597,"tag":606,"props":47431,"children":47432},{},[47433],{"type":603,"value":47434},"在加载和执行程序集的内容时，JIT 编译在应用程序运行时按需将 MSIL 转换为本机代码。 由于公共语言运行时为每个受支持的 CPU 基础结构提供 JIT 编译器，开发人员可以构建一组 MSIL 程序集，这些程序集可以进行 JIT 编译并可在具有不同计算机基础结构的不同计算机上运行。 但是，如果你的托管代码调用特定于平台的本机 API 或特定于平台的类库，它将仅在该操作系统上运行。",{"type":597,"tag":606,"props":47436,"children":47437},{},[47438],{"type":603,"value":47439},"JIT 编译将执行期间可能永远不会调用的某些代码的可能性考虑在内。 它根据需要在执行期间转换 MSIL，而不是使用时间和内存来将 PE 文件中所有 MSIL 转换为本机代码，并在内存中存储生成的本机代码，以便该进程上下文中的后续调用可以对其进行访问。 加载类型并将其初始化时，加载程序创建并将存根附加到类型中的每个方法。 第一次调用某个方法时，存根将控件传递给 JIT 编译器，后者将该方法的 MSIL 转换为本机代码，并将存根修改为直接指向生成的本机代码。 因此，对 JIT 编译的方法的后续调用会直接转到本机代码。",{"type":597,"tag":1023,"props":47441,"children":47443},{"id":47442},"使用-ngenexe-的安装时代码生成",[47444],{"type":603,"value":47445},"使用 NGen.exe 的安装时代码生成",{"type":597,"tag":606,"props":47447,"children":47448},{},[47449,47451,47456],{"type":603,"value":47450},"由于在调用该程序集中定义的各个方法时，JIT 编译器将程序集的 MSIL 转换为本机代码，因此它在运行时中对性能产生负面影响。 在大多数情况下，这种性能降低的程度是可以接受的。 更为重要的是，由 JIT 编译器生成的代码会绑定到触发编译的进程上。 它无法在多个进程之间进行共享。 若要允许生成的代码跨应用程序的多个调用或跨共享一组程序集的多个进程进行共享，则公共语言运行时支持预编译模式。 这种预编译模式使用 ",{"type":597,"tag":886,"props":47452,"children":47454},{"href":47418,"rel":47453},[890],[47455],{"type":603,"value":47422},{"type":603,"value":47457},"将 MSIL 程序集转换为本机代码，非常类似 JIT 编译器执行的操作。 但是，Ngen.exe 的操作在三个方面不同于 JIT 编译器的操作：",{"type":597,"tag":1321,"props":47459,"children":47460},{},[47461,47466,47471],{"type":597,"tag":807,"props":47462,"children":47463},{},[47464],{"type":603,"value":47465},"它在运行应用程序之前而非运行该应用程序时，将 MSIL 转换为本机代码。",{"type":597,"tag":807,"props":47467,"children":47468},{},[47469],{"type":603,"value":47470},"它一次编译整个程序集，而不是一次编译一种方法。",{"type":597,"tag":807,"props":47472,"children":47473},{},[47474],{"type":603,"value":47475},"它将本机映像缓存中生成的代码作为磁盘上的文件保存。",{"type":597,"tag":617,"props":47477,"children":47478},{},[47479,47484],{"type":597,"tag":606,"props":47480,"children":47481},{},[47482],{"type":603,"value":47483},"基本上每个人都知道的是，所有.Net语言都将被编译成为一个叫做IL汇编的中间语言。但是计算机是如何执行这个中间代码的，却是很多人不知道，甚至理解错误了的。JIT是.NET程序运行的重要部件之一，全称是即时编译器。很多人都以为JIT其实就是跟Java VM差不多的东西，是一个Interpreter，在运行时读取IL汇编代码，然后模拟成x86代码（也就是俗称的虚拟机）。但是事实上，.NET使用的是更为高级的技术。 .Net程序被加载入内存以后，当某段IL代码被第一次运行的时候，JIT编译器就会将这段IL代码，全部编译成本地代码，然后再执行。这也就是为什么.NET程序第一次运行都启动很慢的原因！ 随.NET库，微软还附带了一个工具，可以事先将.NET程序所有的IL代码都编译成本地代码并保存在缓存区中，这样一来，这个程序就跟c++编译的一模一样了，没有任何区别，运行时也可以脱离JIT了（这里不要混淆了，这里不是说可以脱离.NET库，而是说不需要在进行即时编译这个过程了）。所以，请不要将.NET和Java混为一谈，两个的运行效率根本不是一个等级的！",{"type":597,"tag":606,"props":47485,"children":47486},{},[47487],{"type":603,"value":47488},"JIT的优化指的是可以针对本地CPU，在编译时进行优化。传统程序在编译时，为了保证兼容性，通常使用最通用的指令集（比如古老的386指令集）来编译。而JIT知道CPU的具体类型，可以充分利用这些附加指令集进行编译，这样的性能提升是很可观的。",{"type":597,"tag":857,"props":47490,"children":47492},{"id":47491},"运行",[47493],{"type":603,"value":47491},{"type":597,"tag":606,"props":47495,"children":47496},{},[47497],{"type":603,"value":47498},"PE（Portable Execute）文件是Windows下可执行文件的总称，常见的有DLL，EXE，OCX，SYS等，事实上，一个文件是否是PE文件与其扩展名无关，PE文件可以是任何扩展名。那Windows是怎么区分可执行文件和非可执行文件的呢？我们调用LoadLibrary传递了一个文件名，系统是如何判断这个文件是一个合法的动态库呢？这就涉及到PE文件结构了",{"type":597,"tag":606,"props":47500,"children":47501},{},[47502],{"type":603,"value":47503},"C#生成的exe既然是window下可执行文件，那也就是标准的PE文件，和普通win32的exe文件格式一样。我们来看下exe文件的格式：",{"type":597,"tag":617,"props":47505,"children":47506},{},[47507],{"type":597,"tag":606,"props":47508,"children":47509},{},[47510],{"type":603,"value":47511},"dll文件本质上和exe一样，只是少了入口函数。",{"type":597,"tag":606,"props":47513,"children":47514},{},[47515],{"type":597,"tag":719,"props":47516,"children":47518},{"alt":719,"src":47517},"/images/2020-02-13-csharp-run/884430-20160313213206835-2135598609.png",[],{"type":597,"tag":606,"props":47520,"children":47521},{},[47522],{"type":603,"value":47523},"MS-DOC MZ Header和MS-DOS Stub是为了兼容DOS系统存在的，目的是使这个exe在DOS下执行时弹出一个提示\"This program cannot be run in DOS mode\"。",{"type":597,"tag":606,"props":47525,"children":47526},{},[47527],{"type":603,"value":47528},"PE Header包含了这个文件的一些信息，如：文件创建日期，文件类型，Section的数量，Optional Header的大小等等。详细可以参考Winnt.h里的结构_IMAGE_FILE_HEADER。",{"type":597,"tag":606,"props":47530,"children":47531},{},[47532],{"type":603,"value":47533},"PE Optional Header则包含了文件的版本号以及重要的基地址和AddressOfEntryPoint（RVA-Relative Virtual Address)，这是程序执行的入口地址，双击exe后就从这里开始执行。对C#程序来说，这里指向的是.net的核心库MsCorEE.dll的_CorExeMain()函数。当然这是针对XP系统的，XP以后的系统，OS Loader已经可以判断出这个PE是否包含CLR头来决定是否运行MsCorEE.dll的_CorExeMain()函数。",{"type":597,"tag":606,"props":47535,"children":47536},{},[47537],{"type":603,"value":47538},"Section有很多，包括代码节，数据节等，C#程序会把CLR头，元数据，IL放在这里面。",{"type":597,"tag":617,"props":47540,"children":47541},{},[47542],{"type":597,"tag":606,"props":47543,"children":47544},{},[47545],{"type":603,"value":47546},"CLR是什么呢，全称Common Language Runtime，公共语言运行时，CLR主要是管理程序集，托管堆内存，异常处理和线程同步等等。",{"type":597,"tag":606,"props":47548,"children":47549},{},[47550],{"type":603,"value":47551},"CLR头具体可以参考CorHdr.h中的IMAGE_COR20_HEADER结构，如下：",{"type":597,"tag":621,"props":47553,"children":47555},{"code":47554},"typedef struct IMAGE_COR20_HEADER\n    {\n        // CLR版本信息\n        ULONG cb;\n        USHORT MajorRuntimeVersion;\n        USHORT MinorRuntimeVersion;\n\n        IMAGE_DATA_DIRECTORY MetaData; //元数据\n        ULONG Flags;\n        ULONG EntryPointToken;  //入口函数Main的标识\n\n\n        IMAGE_DATA_DIRECTORY Resources;  //资源\n        IMAGE_DATA_DIRECTORY StrongNameSignature;  //强名称标识\n\n\n        // Regular fixup and binding information\n        IMAGE_DATA_DIRECTORY CodeManagerTable;\n        IMAGE_DATA_DIRECTORY VTableFixups;\n        IMAGE_DATA_DIRECTORY ExportAddressTableJumps;\n\n        // Precompiled image info (internal use only - set to zero)\n        IMAGE_DATA_DIRECTORY ManagedNativeHeader;\n\n    }\n    IMAGE_COR20_HEADER;\n",[47556],{"type":597,"tag":629,"props":47557,"children":47558},{"__ignoreMap":591},[47559],{"type":603,"value":47554},{"type":597,"tag":606,"props":47561,"children":47562},{},[47563],{"type":603,"value":47564},"元数据很重要，验证代码类型安全，GC的对象引用跟踪还有我们常用的反射都需要用到元数据。",{"type":597,"tag":606,"props":47566,"children":47567},{},[47568],{"type":603,"value":47569},"元数据主要由定义表，引用表，清单表组成。",{"type":597,"tag":606,"props":47571,"children":47572},{},[47573],{"type":603,"value":47574},"定义表包括应用所有的类型，方法，字段，属性，参数，事件的定义,代码里任何的定义项都可以在这个表里找到，反射就是靠这个表只要一个名字就能得到属性或函数。运行时的类型安全检查也离不开它。",{"type":597,"tag":606,"props":47576,"children":47577},{},[47578],{"type":603,"value":47579},"引用表包括程序集，类型和成员的引用，我们知道GC在回收内存时先默认认为所有对象都是垃圾，然后通过线程栈上的根（cpu寄存器，局部变量，参数，静态变量）找引用的对象，能找到的说明还在使用就去掉垃圾标记，这个表可以让GC在回收内存时方便从根找到所有引用。",{"type":597,"tag":606,"props":47581,"children":47582},{},[47583],{"type":603,"value":47584},"清单表主要是程序集，文件，资源的定义。",{"type":597,"tag":606,"props":47586,"children":47587},{},[47588],{"type":603,"value":47589},"现在来看看双击后是怎样运行的：",{"type":597,"tag":606,"props":47591,"children":47592},{},[47593],{"type":597,"tag":719,"props":47594,"children":47596},{"alt":719,"src":47595},"/images/2020-02-13-csharp-run/884430-20160313222148397-1732805152.png",[],{"type":597,"tag":606,"props":47598,"children":47599},{},[47600],{"type":603,"value":47601},"双击文件后OS Loader加载PE文件并解析，在PE Optional Header里找到基地址和RVA，通过这两个确定了程序的入口地址，这个地址指向MsCorEE.dll的_CorExeMain()，执行它。_CorExeMain()开始执行，选择加载合适版本的CLR，CLR开始运行，CLR运行时会分配一个连续的地址空间用作托管堆，并用一个指针NextObjPtr指到开始位置，下次分配内存时就从指针指的位置开始。",{"type":597,"tag":606,"props":47603,"children":47604},{},[47605],{"type":603,"value":47606},"CLR运行后从CLR头里找到应用程序入口标识，也就是Main()方法的MethodDefToken，通过这个标识在元数据表MethodDef里找到Main方法的偏移位置，这样就可以找到Main()的IL代码。",{"type":597,"tag":606,"props":47608,"children":47609},{},[47610],{"type":603,"value":47611},"CLR检查Main方法里面是否有没加载的类型，没有的话就加载进来并在托管堆上建一个类型对象，类型对象包含静态字段，方法，基类的引用。然后给类型的方法表里每个方法一个存根，存根是用于标识是否被JIT编译过。",{"type":597,"tag":617,"props":47613,"children":47614},{},[47615],{"type":597,"tag":606,"props":47616,"children":47617},{},[47618],{"type":603,"value":47619},"JIT: just-in-time Compiler，即时编译器。",{"type":597,"tag":606,"props":47621,"children":47622},{},[47623],{"type":603,"value":47624},"JIT编译之前CLR会对Main方法的代码进行验证，确保类型安全且元数据正确，一切没问题后先检查类型方法表里这个方法的存根，不为空的话表示已经编译过就不需要再次编译，没有的话JIT把这段IL代码编译成本地代码保存到内存中并方法表的存根做上标记，然后JIT返回编译前的位置并把原来CLR指向JIT的地址修改为指向本地代码的地址，这样函数的本地代码开始执行。程序执行到哪里就编译到哪里，没有执行到的就不会加载和编译，同样的代码再次执行的话就直接在内存里拿了，这也是为什么第一次运行C#时比较慢而后面就快的原因。这样就开始陆续执行所有的代码，程序也就跑起来了。",{"type":597,"tag":606,"props":47626,"children":47627},{},[47628],{"type":603,"value":47629},"在内存上，运行线程会把函数的参数和局部变量压入线程栈上，栈上的空间默认是1M，方法的参数和局部变量都会压到函数的栈帧上，方法里的对象在托管堆NextObjPtr指向的位置分配内存并把内存地址存到栈上的局部变量里。CLR会给托管堆上的每个对象包括对象类型都添加两个字段，一个对象类型指针，一个同步块索引。",{"type":597,"tag":617,"props":47631,"children":47632},{},[47633],{"type":597,"tag":606,"props":47634,"children":47635},{},[47636],{"type":603,"value":47637},"说起栈帧，大家在调试代码时应该都喜欢用CallStack吧，这可以通过看调用栈很方便来定位出问题的具体原因，这个CallStack也就是方法的栈帧的具体显示，一级一级的。",{"type":597,"tag":606,"props":47639,"children":47640},{},[47641],{"type":603,"value":47642},"对象类型指针从字面上就很容易知道跟类型有关。CLR刚开始运行时就分配了一个Type的对象类型，他的对象类型指针指向自己，后面创建的对象类型的对象类型指针指针就指向这个Type，而new出来的对象的对象类型指针就指向它的类型，这样所有对象都能找到自己的类型使CLR在运行时能确保类型安全。",{"type":597,"tag":606,"props":47644,"children":47645},{},[47646],{"type":603,"value":47647},"同步块索引的格式是前6个标志位加后面26位内容（32位系统），作用则有好几个。",{"type":597,"tag":606,"props":47649,"children":47650},{},[47651],{"type":603,"value":47652},"\\1. 调用对象的gethashcode()后标志位改变一位，后26位会存储对象的hashcode，保证对象生命周期内hashcode的唯一；",{"type":597,"tag":606,"props":47654,"children":47655},{},[47656],{"type":603,"value":47657},"\\2. lock时用到，CLR会维护一个同步块数组，每项由一个指向同步块的指针和对象指针组成，lock时同样改变标识位，然后去同步块数组找一个闲置项，后26则变成这项在数组中的索引，有人要问了，刚才hashcode不是用了这26位吗，现在变了，hashcode岂不是丢了。确实，hashcode在lock之后不能直接存到索引了，不过同步块中专门准备了一个字段用来存hashcode，所以可以转移到同步块中，这样设计是为了节省内存，因为大部分情况下是不用lock的，也就不需要增加多余的同步块。",{"type":597,"tag":606,"props":47659,"children":47660},{},[47661],{"type":603,"value":47662},"另外为什么是索引而不是地址呢，因为同步块数组的大小不是固定的，随着对象的增多而变大，在内存上的位置可能会发生变化，所以用索引就不用管数组在哪个位置了。",{"type":597,"tag":606,"props":47664,"children":47665},{},[47666],{"type":603,"value":47667},"当线程进入lock后检查同步块的m_motion，发现没有标识则进入lock区域并把标识改变，如果已经有同一个线程进去则把计数器加1，如果已经有其他线程则等待。",{"type":597,"tag":606,"props":47669,"children":47670},{},[47671],{"type":603,"value":47672},"\\3. 垃圾回收时的标识，GC触发时首先认为所有的对象都是垃圾，由局部变量，寄存器，静态变量这些根向上找，凡是包含的对象都认为还有引用，在同步块索引上修改一位标识，当所有对象都遍历过后没有标识的对象就会被清掉，然后再是整理内存、修改引用地址等。",{"type":597,"tag":606,"props":47674,"children":47675},{},[47676],{"type":603,"value":47677},"看个简单的例子，只用于演示，不考虑合理性：",{"type":597,"tag":621,"props":47679,"children":47681},{"code":47680},"using System;\n\nnamespace Test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int height = 170;\n            int weight = 60;\n            People.Find();\n            People developer = new Developer()(height, weight);\n            bool isHealthyWeight = developer.IsHealthyWeight();\n            bool isRich = developer.IsRich();\n        }\n    }\n\n    class People\n    {\n        int _height;\n        int _weight;\n\n        public People(int height, int weight)\n        {\n            _height = height;\n            _weight = weight;\n        }\n\n        public virtual bool IsRich();\n\n        public bool IsHealthyWeight()\n        {\n            var healthyWeight = (Height - 80) * 0.7;\n            return Weight \u003C= healthyWeight * 1.1 && Weight >= healthyWeight * 0.9;\n        }\n\n        public static string Find(string id) { return \"\"; }\n    }\n\n    class Developer : People\n    {\n        public Developer(int height, int weight) : base(height, weight)\n        { }\n\n        public override bool IsRich()\n        {\n            return false;\n        }\n    }\n    \n}\n",[47682],{"type":597,"tag":629,"props":47683,"children":47684},{"__ignoreMap":591},[47685],{"type":603,"value":47680},{"type":597,"tag":606,"props":47687,"children":47688},{},[47689],{"type":597,"tag":719,"props":47690,"children":47692},{"alt":719,"src":47691},"/images/2020-02-13-csharp-run/884430-20160313222410850-1585024295.png",[],{"type":597,"tag":606,"props":47694,"children":47695},{},[47696,47697],{"type":603,"value":44225},{"type":597,"tag":1733,"props":47698,"children":47699},{},[47700],{"type":603,"value":47701},"图片不清楚可以放大看",{"type":597,"tag":606,"props":47703,"children":47704},{},[47705],{"type":603,"value":47706},"首先判断类型是否都加载，用到了int，bool，string，这些是在mscorlib.dll程序集的system命名空间下，所以先加载mscorlib.dll程序集，再把int，bool，string加到类型对象里。另外还有我们自己定义的Developer和People，也把类型对象创建好，另外也别忘了基类object，也要加载进来。（实际上还有double啊，这里就没画了）另外继承类的类型对象里面都有个字段指向基类，所以才能往上执行到基类方法表里的方法。",{"type":597,"tag":606,"props":47708,"children":47709},{},[47710],{"type":603,"value":47711},"局部变量都在线程栈上，Find()方法是静态方法，直接去People类型对象的方法表里去找，找到后看是否有存根标识，没有的话做JIT编译，有的话直接运行。",{"type":597,"tag":606,"props":47713,"children":47714},{},[47715],{"type":603,"value":47716},"developer的实例化虽然是用People定义的，但实例还是Developer，所以developer的类型对象指针指向Developer，对象里除了类型对象指针还有实例字段，包括基类的。内存分配在托管堆上，并把地址给到线程栈上的变量中。",{"type":597,"tag":606,"props":47718,"children":47719},{},[47720],{"type":603,"value":47721},"虚函数也一样，在运行时已经确定是Developer，所以会调用Developer方法表里的IsRich方法，一样先JIT，再运行。",{"type":597,"tag":606,"props":47723,"children":47724},{},[47725],{"type":603,"value":47726},"以上就是一个简单的C#程序的运行过程和在内存上的表现，本篇主要内容来自CLR via C#这本书",{"type":597,"tag":1321,"props":47728,"children":47729},{},[47730,47739,47748,47757],{"type":597,"tag":807,"props":47731,"children":47732},{},[47733],{"type":597,"tag":886,"props":47734,"children":47737},{"href":47735,"rel":47736},"https://www.cnblogs.com/brookshi/p/5273281.html",[890],[47738],{"type":603,"value":47735},{"type":597,"tag":807,"props":47740,"children":47741},{},[47742],{"type":597,"tag":886,"props":47743,"children":47746},{"href":47744,"rel":47745},"https://docs.microsoft.com/zh-cn/dotnet/standard/managed-execution-process?redirectedfrom=MSDN#compiling_to_msil",[890],[47747],{"type":603,"value":47744},{"type":597,"tag":807,"props":47749,"children":47750},{},[47751],{"type":597,"tag":886,"props":47752,"children":47755},{"href":47753,"rel":47754},"https://docs.microsoft.com/zh-cn/dotnet/standard/clr",[890],[47756],{"type":603,"value":47753},{"type":597,"tag":807,"props":47758,"children":47759},{},[47760],{"type":597,"tag":886,"props":47761,"children":47764},{"href":47762,"rel":47763},"https://www.cnblogs.com/qtiger/p/11176575.html",[890],[47765],{"type":603,"value":47762},{"title":591,"searchDepth":787,"depth":787,"links":47767},[47768,47771,47772],{"id":47126,"depth":787,"text":47126,"children":47769},[47770],{"id":47281,"depth":1530,"text":47281},{"id":47320,"depth":787,"text":47323},{"id":47394,"depth":787,"text":47397,"children":47773},[47774,47775],{"id":47426,"depth":1530,"text":47429},{"id":47442,"depth":1530,"text":47445},"content:dotnet:2020-02-13-csharp-run.md","dotnet/2020-02-13-csharp-run.md","2020-02-13",{"_path":89,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":88,"description":47780,"body":47781,"_type":791,"_id":48143,"_source":793,"_file":48144,"_extension":795,"date":48145},"1.什么是CLR？CLR（Common Language Runtime）即公共语言运行时，是一个由多种编程语言使用的“运行时”，我的理解是就是运行环境，类似于jvm虚拟机的东西，只不过CLR并不关心你用的语言是什么，无论你用的是C#，或者C++等，当通过编译器编译后，都会转换为CLR可以识别的中间语言IL2.CLR的工作方式CLR是不和模块工作的，它和程序集工作，如下当加载了公共语言运行时时，电脑必须安装了.NET Framework,同时CLR会检测目标平台，如32位Windows，或64位windows，然后决定创建对应的进程；如图1-2，托管程序集同时包含元数据和IL，当编译器把源代码",{"type":594,"children":47782,"toc":48141},[47783,47788,47793,47798,47803,47810,47815,47820,47827,47832,47837,47842,47847,47852,47857,47862,47867,47876,47881,47886,47891,47903,47914,47921,47926,47931,47938,47943,47948,47957,47962,47969,47974,47981,47986,47991,47996,48001,48006,48011,48016,48021,48026,48031,48038,48043,48052,48057,48066,48071,48079,48084,48096,48101,48106,48115,48120],{"type":597,"tag":606,"props":47784,"children":47785},{},[47786],{"type":603,"value":47787},"1.什么是CLR？",{"type":597,"tag":606,"props":47789,"children":47790},{},[47791],{"type":603,"value":47792},"CLR（Common Language Runtime）即公共语言运行时，是一个由多种编程语言使用的“运行时”，我的理解是就是运行环境，类似于jvm虚拟机的东西，只不过CLR并不关心你用的语言是什么，无论你用的是C#，或者C++等，当通过编译器编译后，都会转换为CLR可以识别的中间语言IL",{"type":597,"tag":606,"props":47794,"children":47795},{},[47796],{"type":603,"value":47797},"2.CLR的工作方式",{"type":597,"tag":606,"props":47799,"children":47800},{},[47801],{"type":603,"value":47802},"CLR是不和模块工作的，它和程序集工作，如下",{"type":597,"tag":606,"props":47804,"children":47805},{},[47806],{"type":597,"tag":719,"props":47807,"children":47809},{"alt":719,"src":47808},"/images/2020-02-12-netcore-mono-netframework/v2-5efca0f8c5f31440e6d17c766a6cc6b6_1440w.jpg",[],{"type":597,"tag":606,"props":47811,"children":47812},{},[47813],{"type":603,"value":47814},"当加载了公共语言运行时时，电脑必须安装了.NET Framework,同时CLR会检测目标平台，如32位Windows，或64位windows，然后决定创建对应的进程；",{"type":597,"tag":606,"props":47816,"children":47817},{},[47818],{"type":603,"value":47819},"如图1-2，托管程序集同时包含元数据和IL，当编译器把源代码转换为中间语言IL后，为了执行方法，CLR会把方法的IL转换为本机（native）CPU指令，即JIT（just in time“即时”）编译",{"type":597,"tag":606,"props":47821,"children":47822},{},[47823],{"type":597,"tag":719,"props":47824,"children":47826},{"alt":719,"src":47825},"/images/2020-02-12-netcore-mono-netframework/v2-e12d13ed3e967c0b7463fb2764034d87_1440w.jpg",[],{"type":597,"tag":606,"props":47828,"children":47829},{},[47830],{"type":603,"value":47831},"在方法执行前，CLR会检测代码引用的所有类型，然后分配一个内部数据结构来管理引用访问，在这个数据结构中每个方法会有一个对应的记录项，每个记录项都包含地址，根据地址找到函数的实现，CLR将每个记录项都设置成（指向）一个内部的未编档函数，即JITCompiler当方法首次调用WriteLine时，JITCompiler会被调用，将方法的IL代码编译为本机的CPU指令。当方法第一次被调用时，JIT编译器会验证IL代码，当第二次时，由于第一次已经完成了验证和编译，所以第二次会直接执行。",{"type":597,"tag":606,"props":47833,"children":47834},{},[47835],{"type":603,"value":47836},"1.Mono",{"type":597,"tag":606,"props":47838,"children":47839},{},[47840],{"type":603,"value":47841},"mono即基于.NET Framework 的开源实现，基于C#的ECMA标准，包含C#编译器和CLR。mono使C#拥有了跨平台的能力。",{"type":597,"tag":606,"props":47843,"children":47844},{},[47845],{"type":603,"value":47846},"2.为什么Mono能跨平台？",{"type":597,"tag":606,"props":47848,"children":47849},{},[47850],{"type":603,"value":47851},"因为它使用了CIL（Common Intermediate Language）的通用中间语言，也叫MSIL的指令集，CIL可以在任何支持CLI（Common Language Infrastructure）“通用语言基础结构”的环境下运行，由于CIL能运行在所有支持CLI的环境中，比如.net运行时或者mono运行时，也就是说和具体的平台或者CPU无关。",{"type":597,"tag":606,"props":47853,"children":47854},{},[47855],{"type":603,"value":47856},".net从一个抽象上来说其实是一个理念，即使得多种语言编写的程序能够通过一个通用的runtime运行在不同的操作系统以及硬件平台上。但光有理念不行，还需要实现，我们这里把对于.net里面的某个实现叫做.net platform（比如.net framework就是一个在windows上实现的.net platform，mono则是一个跨平台的.net platform）。一个.net platform想要达成.net的目标，就需要一些组件，比如上图中CLR通用语言运行时，比如FCL基础类库，比如各种语言的编译器，编译器编译出来的东西想要能在CLR中运行，那也需要遵循一定的标准，这就是CLI和CIL，CIL规定了编译输出的规则，而CLI规定了编译器输入语言的规则，只有符合这种标准的语言才能编译成CIL语言运行在CLR中。",{"type":597,"tag":606,"props":47858,"children":47859},{},[47860],{"type":603,"value":47861},"好了现在有了CIL和CLR，程序员可以用符合CLI的语言比如C#编写程序了，然后将其编译成CIL，最后在CLR中运行。但是问题来了，程序员开发程序的时候需要用到一些功能以及数据结构，不可能所有的功能细节都自己实现，不然开发成本也太高了，所以就需要提供一些基础类库，方便程序员进行开发，那么需要提供哪些基础类库呢？这也需要一个标准，而.Net Standard就是用于这个目的，它规定了某个.net platform需要提供哪些API给开发者。这样的话加入一个开发者在.net platform A（比如.net framework）上开发了一个项目，然后想迁移到.net platform B（比如Mono）上，那么只要两个platform实现了同一个.net standard那么源代码就无需修改可以直接编译运行。",{"type":597,"tag":606,"props":47863,"children":47864},{},[47865],{"type":603,"value":47866},"不过还有一个问题，假如我有一台机器，装了.net platform A（比如.net framework）和.net platform B（比如Mono），那么我在A上编译出来的一个.net程序放到B上可以运行么？理论上应该没问题，毕竟CIL是统一的，虽然一个是A的CLR一个是B的CLR，但是它们都是用来处理CIL程序，就像java代码编译出来既可以运行在JVM上也可以运行在delvik上一样。然而实际上不一定，因为CIL本身也不是一成不变的，它也有自己的版本，看下面这个文档：",{"type":597,"tag":606,"props":47868,"children":47869},{},[47870],{"type":597,"tag":886,"props":47871,"children":47874},{"href":47872,"rel":47873},"https://msdn.microsoft.com/en-us/library/bb822049.aspx",[890],[47875],{"type":603,"value":47872},{"type":597,"tag":606,"props":47877,"children":47878},{},[47879],{"type":603,"value":47880},"里面的表格详细说明了.net framework和CLR版本之间的关系，从.net framework 2.0到3.5使用的是CLR 2.0，.net framework 4.0以后使用的是CLR 4.0，中间没有CLR 3.0版本。这也就意味着CIL语言本身也在发生变化，面向CLR 4.0编译出来的程序自然是不能运行在CLR 2.0上的。",{"type":597,"tag":606,"props":47882,"children":47883},{},[47884],{"type":603,"value":47885},"说那到底什么是.net framework呢？个人理解从抽象角度说.net framework是对.net标准（这个标准具体包括CLI，CIL，.net standard等）在windows平台上的一套实现，具体上说.net framework包含一整套解决方案，包含许多字组件，比如编译器、CLR、FCL等等，其中每个组件都有自己的版本，比如编译器有自己的版本用于适应不同版本的语言，比如.net framework 3.5的编译器只支持到C# 3.0，最新已经到C# 7.0了；每个版本的.net framework提供的FCL也在不断丰富，比如System.LINQ到.net framework 3.5才有；CLR的版本也会不同，之前已经说过了。因此.net framework的版本其实就是其组件版本的一个集合，高版本的.net framework中的每个子组件都进行了一定的版本更新。",{"type":597,"tag":606,"props":47887,"children":47888},{},[47889],{"type":603,"value":47890},"其实正常来说.net framework只是对.net标准的一套实现而已，其他的对于.net标准的实现完全可以将各种不同版本的组件组合起来用，比如我一套.net platform提供了.net framework 4.0的FCL和面向C# 6.0的编译器，但用的是CLR 2.0的运行时，这并没有什么问题，只要编译器和运行时匹配就行了（mono就是这么干的）。但是由于.net是微软提出来的而且.net framework是微软开发的，那别的.net platform实现自然就已.net framework为标杆，每个版本的.net framework都提供了一些新的features，支持.net framework x.x就是说这个.net platform实现了x.x版本.net framework的特性，比如下面是mono主页上的文档：",{"type":597,"tag":606,"props":47892,"children":47893},{},[47894,47898,47899],{"type":597,"tag":719,"props":47895,"children":47897},{"alt":719,"src":47896},"/images/2020-02-12-netcore-mono-netframework/20170423144055880.png",[],{"type":603,"value":4731},{"type":597,"tag":719,"props":47900,"children":47902},{"alt":719,"src":47901},"/images/2020-02-12-netcore-mono-netframework/20170423144129490.png",[],{"type":597,"tag":606,"props":47904,"children":47905},{},[47906,47908],{"type":603,"value":47907},"可以看到上面说的是.net 4.6 4.5，这里表示的其实是.net framework，这个图片的意思就是最新版本的mono已经实现了.net framework 4.6中支持C# 6的特性，以及此外还可以发现只有.net 3.5和2.0是mono完全实现了其所有特性。准确的说其实是mono实现了.net framework的大部分feature，并且还提供了一些mono自己的class library。Mono和.net framework大致有一个对应关系，如这篇文章所说：",{"type":597,"tag":886,"props":47909,"children":47912},{"href":47910,"rel":47911},"http://www.cnblogs.com/zhaoqingqing/archive/2016/08/12/5762867.html",[890],[47913],{"type":603,"value":47910},{"type":597,"tag":606,"props":47915,"children":47916},{},[47917],{"type":597,"tag":719,"props":47918,"children":47920},{"alt":719,"src":47919},"/images/2020-02-12-netcore-mono-netframework/20170423144146834.png",[],{"type":597,"tag":606,"props":47922,"children":47923},{},[47924],{"type":603,"value":47925},"这个表似乎不完全正确，mono 2.0实现了System.LinQ组件，这个组件在.net 3.5中提供，所以mono 2.0对应的应该是.net 2.0/3.5，即两者之和。不过还是可以当做一个参考。所以说加入一个程序集是用.net framework 3.5构建的，引用了一些dll如system.core以及system.linq，那么要想把其导入mono项目中，就必须保证mono的版本高于2.0，不然会找不到相应的引用。",{"type":597,"tag":606,"props":47927,"children":47928},{},[47929],{"type":603,"value":47930},"还有一点需要注意，网上很多讲.net版本的时候讲.net framework version和CLR version混为一谈，有些时候说的.net 2.0指的其实是CLR 2.0。另外有些人把System.Environment.Version误以为是.ne framework版本，其实不是，msdn上说的很明确，这个值指的是CLR的版本：",{"type":597,"tag":606,"props":47932,"children":47933},{},[47934],{"type":597,"tag":719,"props":47935,"children":47937},{"alt":719,"src":47936},"/images/2020-02-12-netcore-mono-netframework/20170423144202709.png",[],{"type":597,"tag":606,"props":47939,"children":47940},{},[47941],{"type":603,"value":47942},"另外还有一点值得注意，在vs中构建一个.net framework 3.5的项目时是，引用的System.dll是在系统的.net v2.0目录下的，也就是说.net framework不是独立的，而是依赖于.net framework 2.0.不过.net 4.0以后的版本好像就不是这样了，每次新版本都是独立的。",{"type":597,"tag":606,"props":47944,"children":47945},{},[47946],{"type":603,"value":47947},"最后谈一下Unity，Unity为了跨平台使用了Mono，其使用的Mono版本可以通过代码或者命令行方式获得，unity forum上已经有牛人说明了：",{"type":597,"tag":606,"props":47949,"children":47950},{},[47951],{"type":597,"tag":886,"props":47952,"children":47955},{"href":47953,"rel":47954},"http://answers.unity3d.com/questions/259448/how-to-determine-mono-version-of-unity-.html",[890],[47956],{"type":603,"value":47953},{"type":597,"tag":606,"props":47958,"children":47959},{},[47960],{"type":603,"value":47961},"我自己的测试结果是mono 2.0",{"type":597,"tag":606,"props":47963,"children":47964},{},[47965],{"type":597,"tag":719,"props":47966,"children":47968},{"alt":719,"src":47967},"/images/2020-02-12-netcore-mono-netframework/20170423144215834.png",[],{"type":597,"tag":606,"props":47970,"children":47971},{},[47972],{"type":603,"value":47973},"查了一下mono官网，mono 2.0是08年的老古董（Unity居然还在用，貌似是版权问题，没有深究），而用vs打开一下Unity中的脚本，查看一下项目构建文件.csproj：",{"type":597,"tag":606,"props":47975,"children":47976},{},[47977],{"type":597,"tag":719,"props":47978,"children":47980},{"alt":719,"src":47979},"/images/2020-02-12-netcore-mono-netframework/20170423144232772.png",[],{"type":597,"tag":606,"props":47982,"children":47983},{},[47984],{"type":603,"value":47985},"可以看到Unity用的是.net 3.5，所以难道Unity的脚本是用.net framework 3.5构建的？显然不是。",{"type":597,"tag":606,"props":47987,"children":47988},{},[47989],{"type":603,"value":47990},"我们知道vs有一个东西叫VSTU，它最大的作用就是可以用vs的断点调试功能调试Unity Editor。Unity中的脚本在vs中打开的时候会构建一个VSTU项目。VSTU项目虽然跟普通VS项目看上去很像，但其实VSTU项目本质上并不是真正的vs项目，如果你右键项目->属性是没有反应的（VSTU 2.1以前有反应，之后就禁用了），而且右键项目中的引用也不会有添加引用选项，其实VSTU是把vs当做了一个功能强大的编辑器。",{"type":597,"tag":606,"props":47992,"children":47993},{},[47994],{"type":603,"value":47995},"但VSTU不只是利用了VS进行语法检查这么简单，它的另一个作用就是断点调试。在没有断点调试的情况下，Unity使用自己的编译器进行编译，生成Assembly-CSharp.dll（在/Library/目录中），点击Play按钮的时候用的是这个dll，而用VS进行断点调试的时候则会用VS的编译器编译出Assembly-CSharp.dll以及pdb文件，在\\Temp\\UnityVS_obj\\Debug\\目录中，此时点击Play用的就是这个dll。当然build出exe的时候用的还是自己的编译器。",{"type":597,"tag":606,"props":47997,"children":47998},{},[47999],{"type":603,"value":48000},"VSTU对项目进行了限制，不能直接在VS中添加新的dll，但可以拷贝到Unity项目的Asset目录下，这样Unity会重新构建VSTU项目，把拷进去的dll显示在引用列表里面。",{"type":597,"tag":606,"props":48002,"children":48003},{},[48004],{"type":603,"value":48005},"VSTU构建的项目是基于.net framework 3.5的。因为Unity用的是mono 2.0啊，mono 2.0实现的feature包括.net framework 2.0和3.5，而UnityEngine.dll引用了System.Core.dll，而这个dll在.net framework 3.5才有，如果是是基于.net framework 2.0构建，那么第一有些mono 2.0支持的feature在vs里面就会找不到，另外也无法断点调试，因为编译通不过。",{"type":597,"tag":606,"props":48007,"children":48008},{},[48009],{"type":603,"value":48010},"其实也可以在Unity的安装目录中寻找一些端倪，在windows下为：",{"type":597,"tag":606,"props":48012,"children":48013},{},[48014],{"type":603,"value":48015},"C:\\Program Files\\Unity\\Editor\\Data\\Mono\\lib\\mono\\2.0",{"type":597,"tag":606,"props":48017,"children":48018},{},[48019],{"type":603,"value":48020},"这个目录2.0目测就是mono的版本，目录中有很多dll，比如System.*.dll，这说明unity自带了mono项目，提供了mono 2.0中实现的基础类库。虽然Unity的脚本可以在像VS以及MonoDeveloper中打开，但是在build的时候用的还是Unity自带的Mono中的编译器，而Mono 2.0仅支持到C# 3.0，所以有些最新的语法在Unity里面是无法编译通过的（Unity 5.3.5 p8提供了一个新的编译器mono 4.4用于测试，但是似乎没有下文了）。",{"type":597,"tag":606,"props":48022,"children":48023},{},[48024],{"type":603,"value":48025},"总结一下就是，Unity使用的是mono 2.0，支持C# 3.0，提供与.net framework 3.5/2.0 API兼容的类库（mono 2.0实现了.net framework 2.0 + 3.5的feature，但是没有实现.net framework 3.0的WPF的feature，所以官网的说法是**.Net 2.0/3.5 framework profile**），使用了与CLR 2.0兼容的mono runtime，因此用vs构建Unity的dll需要.net framework 3.5以下，不然runtime不兼容；如果要用到UnityEngine等Unity的功能必须用.net framework 3.5这个版本，不然vs项目找不到System.Core.dll，无法通过编译，如果只是一些工具类，不需要引用UnityEngine.dll，那么用.net framework 2.0构建是可以的。vs只是一个第三方构建工具，想要构建出Unity能用的dll就不能使用Unity（Mono 2.0）不支持的feature。",{"type":597,"tag":606,"props":48027,"children":48028},{},[48029],{"type":603,"value":48030},"最后有一点之前一直在困扰我，但今天稍微有点想通了，就是Unity的Player Setting里面有个API compability Level：",{"type":597,"tag":606,"props":48032,"children":48033},{},[48034],{"type":597,"tag":719,"props":48035,"children":48037},{"alt":719,"src":48036},"/images/2020-02-12-netcore-mono-netframework/20170423144252210.png",[],{"type":597,"tag":606,"props":48039,"children":48040},{},[48041],{"type":603,"value":48042},"这个只有两个选项：.Net 2.0和.Net 2.0 Subnet，这个说实话让人很不解，从字面上讲是指API兼容，那兼容到.net 2.0难道是指兼容.net framework 2.0的FCL API？但Unity可以用到.net framework 3.5的一些库啊。网上找了一通以后发现了如下网址：",{"type":597,"tag":606,"props":48044,"children":48045},{},[48046],{"type":597,"tag":886,"props":48047,"children":48050},{"href":48048,"rel":48049},"https://docs.unity3d.com/412/Documentation/ScriptReference/MonoCompatibility.html",[890],[48051],{"type":603,"value":48048},{"type":597,"tag":606,"props":48053,"children":48054},{},[48055],{"type":603,"value":48056},"以及这个Question：",{"type":597,"tag":606,"props":48058,"children":48059},{},[48060],{"type":597,"tag":886,"props":48061,"children":48064},{"href":48062,"rel":48063},"https://forum.unity3d.com/threads/unity-supports-c-3-5-or-2-0.111440/",[890],[48065],{"type":603,"value":48062},{"type":597,"tag":606,"props":48067,"children":48068},{},[48069],{"type":603,"value":48070},"其中有一句话很关键：",{"type":597,"tag":606,"props":48072,"children":48073},{},[48074],{"type":597,"tag":1080,"props":48075,"children":48076},{},[48077],{"type":603,"value":48078},"The 2.0 there is likely a good reflection of what you have at least",{"type":597,"tag":606,"props":48080,"children":48081},{},[48082],{"type":603,"value":48083},"所以梳理一下就是.Net 2.0和.Net 2.0 Subnet是指编写的C#代码能够引用的函数集合的不同，如果选择了subset那么dll就不会被导入到项目中来。比如同一个项目用.Net 2.0和.Net 2.0 Subnet构建出来的目录如下，可以很明显看到两者的差别。",{"type":597,"tag":606,"props":48085,"children":48086},{},[48087,48091,48092],{"type":597,"tag":719,"props":48088,"children":48090},{"alt":719,"src":48089},"/images/2020-02-12-netcore-mono-netframework/20170423144306179.png",[],{"type":603,"value":23009},{"type":597,"tag":719,"props":48093,"children":48095},{"alt":719,"src":48094},"/images/2020-02-12-netcore-mono-netframework/20170423144321069.png",[],{"type":597,"tag":606,"props":48097,"children":48098},{},[48099],{"type":603,"value":48100},"当新建一个Unity项目时，只会有一些核心的dll会被导入到项目中，其他的dll需要从外部拷贝到项目的Asset文件夹下，VSTU项目中是不能直接添加引用的，个人感觉VSTU对项目的限制有点多，像是把开发者当成傻子，因为你在用Unity那么这些功能就给你禁用掉，不过目测可以通过修改.sln或者.csproj文件来实现一些特殊需要。那.net framework 3.5呢？其实Unity支持的是.net framework 2.0 + 3.5，跳过了3.0，因为3.0是WPF的，Unity不需要，.net 2.0指的是你至少可以用哪些feature。",{"type":597,"tag":606,"props":48102,"children":48103},{},[48104],{"type":603,"value":48105},"Unity最近因为加入了.Net基金会，出了几个用最新mono的测试版：",{"type":597,"tag":606,"props":48107,"children":48108},{},[48109],{"type":597,"tag":886,"props":48110,"children":48113},{"href":48111,"rel":48112},"https://forum.unity3d.com/threads/upgraded-mono-net-in-editor-on-5-5-0b4.433541/",[890],[48114],{"type":603,"value":48111},{"type":597,"tag":606,"props":48116,"children":48117},{},[48118],{"type":603,"value":48119},"Unity 5.5.0 b4里面API compability Level增加了一个4.6选项，其实是把原来的mono 2.0换成mono 4.6进行测试，mono 4.6支持C# 6.0，并且开发者可以使用.net 4.6的API写程序，然而也不知道什么时候能有稳定版。而且mono都快要被淘汰了，以后目测都是IL2CPP了。",{"type":597,"tag":1321,"props":48121,"children":48122},{},[48123,48132],{"type":597,"tag":807,"props":48124,"children":48125},{},[48126],{"type":597,"tag":886,"props":48127,"children":48130},{"href":48128,"rel":48129},"https://www.cnblogs.com/w-wfy/p/7450167.html",[890],[48131],{"type":603,"value":48128},{"type":597,"tag":807,"props":48133,"children":48134},{},[48135],{"type":597,"tag":886,"props":48136,"children":48139},{"href":48137,"rel":48138},"https://blog.csdn.net/wzjssssssssss/article/details/80196314",[890],[48140],{"type":603,"value":48137},{"title":591,"searchDepth":787,"depth":787,"links":48142},[],"content:dotnet:2020-02-12-netcore-mono-netframework.md","dotnet/2020-02-12-netcore-mono-netframework.md","2020-02-12",{"_path":86,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":85,"description":48147,"body":48148,"_type":791,"_id":48662,"_source":793,"_file":48663,"_extension":795,"date":48664},"对于垃圾收集（GC）, 我们需要考虑三件事情：哪些内存需要回收？如何判断是垃圾对象？垃圾回收算法有哪些？",{"type":594,"children":48149,"toc":48656},[48150,48154,48160,48168,48173,48178,48183,48191,48196,48201,48206,48212,48217,48223,48228,48233,48238,48243,48248,48253,48258,48263,48269,48274,48279,48286,48298,48306,48311,48316,48321,48326,48331,48339,48344,48349,48354,48359,48365,48371,48376,48381,48390,48395,48400,48405,48414,48419,48424,48433,48438,48443,48447,48452,48456,48461,48467,48476,48481,48486,48491,48496,48501,48506,48512,48517,48522,48527,48532,48537,48542,48547,48552,48558,48563,48572,48577,48582,48587,48592,48598,48603,48609,48614,48619,48627,48632,48637,48651],{"type":597,"tag":606,"props":48151,"children":48152},{},[48153],{"type":603,"value":48147},{"type":597,"tag":598,"props":48155,"children":48157},{"id":48156},"一gc的工作区域",[48158],{"type":603,"value":48159},"一、GC的工作区域",{"type":597,"tag":606,"props":48161,"children":48162},{},[48163],{"type":597,"tag":1080,"props":48164,"children":48165},{},[48166],{"type":603,"value":48167},"1、不是GC的工作区域",{"type":597,"tag":606,"props":48169,"children":48170},{},[48171],{"type":603,"value":48172},"(1)程序计数器、虚拟机栈和本地方法栈三个区域是线程私有的，随线程生而生，随线程灭而灭；",{"type":597,"tag":606,"props":48174,"children":48175},{},[48176],{"type":603,"value":48177},"(2)栈中的栈帧随着方法的进入和退出而进行入栈和出栈操作，每个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，因此这几个区域的内存分配和回收都具有确定性。",{"type":597,"tag":606,"props":48179,"children":48180},{},[48181],{"type":603,"value":48182},"在这几个区域不需要过多考虑回收的问题，因为方法结束或线程结束时，内存自然就跟随着回收了。",{"type":597,"tag":606,"props":48184,"children":48185},{},[48186],{"type":597,"tag":1080,"props":48187,"children":48188},{},[48189],{"type":603,"value":48190},"2、GC的工作区域（哪些内存需要GC回收？）",{"type":597,"tag":606,"props":48192,"children":48193},{},[48194],{"type":603,"value":48195},"(1)垃圾回收重点关注的是堆和方法区部分的内存。",{"type":597,"tag":606,"props":48197,"children":48198},{},[48199],{"type":603,"value":48200},"​    因为一个接口中的多个实现类需要的内存可能不一样，一个方法的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间才能知道会创建哪些对象，这部分内存的分",{"type":597,"tag":606,"props":48202,"children":48203},{},[48204],{"type":603,"value":48205},"配和回收都是动态的，所以垃圾回收器所关注的主要是这部分的内存。",{"type":597,"tag":598,"props":48207,"children":48209},{"id":48208},"二垃圾对象的判定",[48210],{"type":603,"value":48211},"二、垃圾对象的判定",{"type":597,"tag":606,"props":48213,"children":48214},{},[48215],{"type":603,"value":48216},"Java堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，哪些还活着。对象死去的时候才需要回收。",{"type":597,"tag":3995,"props":48218,"children":48220},{"id":48219},"_1引用计数法",[48221],{"type":603,"value":48222},"1、引用计数法",{"type":597,"tag":606,"props":48224,"children":48225},{},[48226],{"type":603,"value":48227},"引用计数法的逻辑是：在堆中存储对象时，在对象头处维护一个counter计数器，如果一个对象增加了一个引用与之相连，则将counter++。",{"type":597,"tag":606,"props":48229,"children":48230},{},[48231],{"type":603,"value":48232},"如果一个引用关系失效则counter–。如果一个对象的counter变为0，则说明该对象已经被废弃，不处于存活状态。",{"type":597,"tag":606,"props":48234,"children":48235},{},[48236],{"type":603,"value":48237},"优点",{"type":597,"tag":606,"props":48239,"children":48240},{},[48241],{"type":603,"value":48242},"1)可即刻回收垃圾，每个对象都知道自己的被引用数，当counter为0时，对象就会把自己作为空闲空间连接到空闲链表，也就是在对象变成垃圾的同时就会被回收.",{"type":597,"tag":606,"props":48244,"children":48245},{},[48246],{"type":603,"value":48247},"2）最大暂停时间短，每次通过指向mutator生成垃圾时，这部分垃圾都会被回收，大幅削减了mutator的最大暂停时间。",{"type":597,"tag":606,"props":48249,"children":48250},{},[48251],{"type":603,"value":48252},"缺点",{"type":597,"tag":606,"props":48254,"children":48255},{},[48256],{"type":603,"value":48257},"1)引用和去引用伴随加法和减法，影响性能",{"type":597,"tag":606,"props":48259,"children":48260},{},[48261],{"type":603,"value":48262},"2)很难处理循环引用",{"type":597,"tag":3995,"props":48264,"children":48266},{"id":48265},"_2可达性分析算法",[48267],{"type":603,"value":48268},"2、可达性分析算法",{"type":597,"tag":606,"props":48270,"children":48271},{},[48272],{"type":603,"value":48273},"这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，就证明此对象是不可用的。",{"type":597,"tag":606,"props":48275,"children":48276},{},[48277],{"type":603,"value":48278},"Java语言是通过可达性分析算法来判断对象是否存活的。",{"type":597,"tag":606,"props":48280,"children":48281},{},[48282],{"type":597,"tag":719,"props":48283,"children":48285},{"alt":719,"src":48284},"/images/2020-02-11-gc/1090617-20180621212836385-64372595.png",[],{"type":597,"tag":606,"props":48287,"children":48288},{},[48289,48291,48296],{"type":603,"value":48290},"C#与Java中，",{"type":597,"tag":1080,"props":48292,"children":48293},{},[48294],{"type":603,"value":48295},"GC采用的是GC Root 的链路可达性分析算法解决的GC标记问题",{"type":603,"value":48297},"。原理就是一个对象只要有GC Root引用，就不会释放",{"type":597,"tag":606,"props":48299,"children":48300},{},[48301],{"type":597,"tag":1080,"props":48302,"children":48303},{},[48304],{"type":603,"value":48305},".NET中可以当作GC Root的对象有如下几种：",{"type":597,"tag":606,"props":48307,"children":48308},{},[48309],{"type":603,"value":48310},"1、全局变量",{"type":597,"tag":606,"props":48312,"children":48313},{},[48314],{"type":603,"value":48315},"2、静态变量",{"type":597,"tag":606,"props":48317,"children":48318},{},[48319],{"type":603,"value":48320},"3、栈上的所有局部变量(JIT)",{"type":597,"tag":606,"props":48322,"children":48323},{},[48324],{"type":603,"value":48325},"4、栈上传入的参数变量",{"type":597,"tag":606,"props":48327,"children":48328},{},[48329],{"type":603,"value":48330},"5、寄存器中的变量",{"type":597,"tag":606,"props":48332,"children":48333},{},[48334],{"type":597,"tag":1080,"props":48335,"children":48336},{},[48337],{"type":603,"value":48338},"在Java中，可以当做GC Root的对象有以下几种：",{"type":597,"tag":606,"props":48340,"children":48341},{},[48342],{"type":603,"value":48343},"1、虚拟机（JVM）栈中的引用的对象",{"type":597,"tag":606,"props":48345,"children":48346},{},[48347],{"type":603,"value":48348},"2、方法区中的类静态属性引用的对象",{"type":597,"tag":606,"props":48350,"children":48351},{},[48352],{"type":603,"value":48353},"3、方法区中的常量引用的对象（主要指声明为final的常量值）",{"type":597,"tag":606,"props":48355,"children":48356},{},[48357],{"type":603,"value":48358},"4、本地方法栈中JNI的引用的对象",{"type":597,"tag":598,"props":48360,"children":48362},{"id":48361},"三垃圾回收算法",[48363],{"type":603,"value":48364},"三、垃圾回收算法",{"type":597,"tag":3995,"props":48366,"children":48368},{"id":48367},"_1标记-清除算法",[48369],{"type":603,"value":48370},"1、标记-清除算法",{"type":597,"tag":606,"props":48372,"children":48373},{},[48374],{"type":603,"value":48375},"简单来说有两个步骤：标记、清除。",{"type":597,"tag":606,"props":48377,"children":48378},{},[48379],{"type":603,"value":48380},"(1). 标记阶段：找到所有可访问的对象，做个标记",{"type":597,"tag":606,"props":48382,"children":48383},{},[48384,48386],{"type":603,"value":48385},"(2). 清除阶段：遍历堆，把未被标记的对象回收\n",{"type":597,"tag":719,"props":48387,"children":48389},{"alt":719,"src":48388},"/images/2020-02-11-gc/1090617-20180621213112064-1445464345.png",[],{"type":597,"tag":606,"props":48391,"children":48392},{},[48393],{"type":603,"value":48394},"缺 点",{"type":597,"tag":606,"props":48396,"children":48397},{},[48398],{"type":603,"value":48399},"(1)因为涉及大量的内存遍历工作，所以执行性能较低，这也会导致“stop the world”时间较长，java程序吞吐量降低；",{"type":597,"tag":606,"props":48401,"children":48402},{},[48403],{"type":603,"value":48404},"(2)对象被清除之后，被清除的对象留下内存的空缺位置会造成内存不连续，空间浪费。",{"type":597,"tag":3995,"props":48406,"children":48408},{"id":48407},"_2标记整理压缩算法",[48409],{"type":597,"tag":1080,"props":48410,"children":48411},{},[48412],{"type":603,"value":48413},"2、标记整理(压缩)算法",{"type":597,"tag":606,"props":48415,"children":48416},{},[48417],{"type":603,"value":48418},"标记-整理算法适合用于存活对象较多的场合，如老年代。它在标记-清除算法的基础上做了一些优化。",{"type":597,"tag":606,"props":48420,"children":48421},{},[48422],{"type":603,"value":48423},"(1)、标记阶段：它的第一个阶段与标记/清除算法是一模一样的。",{"type":597,"tag":606,"props":48425,"children":48426},{},[48427,48429],{"type":603,"value":48428},"(2)、整理阶段：移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。\n",{"type":597,"tag":719,"props":48430,"children":48432},{"alt":719,"src":48431},"/images/2020-02-11-gc/1090617-20180621213518377-283931527.png",[],{"type":597,"tag":606,"props":48434,"children":48435},{},[48436],{"type":603,"value":48437},"​    上图中可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲",{"type":597,"tag":606,"props":48439,"children":48440},{},[48441],{"type":603,"value":48442},"列表显然少了许多开销。",{"type":597,"tag":606,"props":48444,"children":48445},{},[48446],{"type":603,"value":48237},{"type":597,"tag":606,"props":48448,"children":48449},{},[48450],{"type":603,"value":48451},"标记/整理算法不仅可以弥补标记/清除算法当中，内存区域分散的缺点，也消除了复制算法当中，内存减半的高额代价。",{"type":597,"tag":606,"props":48453,"children":48454},{},[48455],{"type":603,"value":48252},{"type":597,"tag":606,"props":48457,"children":48458},{},[48459],{"type":603,"value":48460},"标记/整理算法唯一的缺点就是效率也不高。不仅要标记所有存活对象，还要整理所有存活对象的引用地址。从效率上来说，标记/整理算法要低于复制算法。",{"type":597,"tag":3995,"props":48462,"children":48464},{"id":48463},"_3复制算法",[48465],{"type":603,"value":48466},"3、复制算法",{"type":597,"tag":606,"props":48468,"children":48469},{},[48470,48472],{"type":603,"value":48471},"复制算法简单来说就是把内存一分为二，但只使用其中一份，在垃圾回收时，将正在使用的那份内存中存活的对象复制到另一份空白的内存中，最后将正在使用的内存空间的对象清除，完成垃圾回收。\n",{"type":597,"tag":719,"props":48473,"children":48475},{"alt":719,"src":48474},"/images/2020-02-11-gc/1090617-20180621213541943-2048983954.png",[],{"type":597,"tag":606,"props":48477,"children":48478},{},[48479],{"type":603,"value":48480},"优点\n复制算法使得每次都只对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。\n缺点\n复制算法的代价是将内存缩小为原来的一半，这个太要命了。",{"type":597,"tag":606,"props":48482,"children":48483},{},[48484],{"type":603,"value":48485},"注意（重要）",{"type":597,"tag":606,"props":48487,"children":48488},{},[48489],{"type":603,"value":48490},"​    现在的虚拟机使用复制算法来进行新生代的内存回收。因为在新生代中绝大多数的对象都是“朝生夕亡”，所以不需要将整个内存分为两个部分，而是分为三个部分，一块为Eden（伊面区）和两块较小的",{"type":597,"tag":606,"props":48492,"children":48493},{},[48494],{"type":603,"value":48495},"Survivor（幸存区）空间(默认比例->8:1:1)。每次使用Eden和其中的一块Survivor，垃圾回收时候将上述两块中存活的对象复制到另外一块Survivor上，同时清理上述Eden和Survivor。所以每次新生代就可以使用90%",{"type":597,"tag":606,"props":48497,"children":48498},{},[48499],{"type":603,"value":48500},"的内存。只有10%的内存是浪费的。(不能保证每次新生代都少于10%的对象存活，当在垃圾回收复制时候如果一块Survivor不够时候，需要老年代来分担，大对象直接进入老年代)",{"type":597,"tag":606,"props":48502,"children":48503},{},[48504],{"type":603,"value":48505},"总的来讲：复制算法不适用于存活对象较多的场合，如老年代（复制算法适合做新生代的GC）",{"type":597,"tag":3995,"props":48507,"children":48509},{"id":48508},"_4三种算法总结",[48510],{"type":603,"value":48511},"4、三种算法总结",{"type":597,"tag":606,"props":48513,"children":48514},{},[48515],{"type":603,"value":48516},"相同点",{"type":597,"tag":606,"props":48518,"children":48519},{},[48520],{"type":603,"value":48521},"(1)三个算法都基于根搜索算法去判断一个对象是否应该被回收，而支撑根搜索算法可以正常工作的理论依据，就是语法中变量作用域的相关内容。",{"type":597,"tag":606,"props":48523,"children":48524},{},[48525],{"type":603,"value":48526},"(2)在GC线程开启时，或者说GC过程开始时，它们都要暂停应用程序（stop the world）。",{"type":597,"tag":606,"props":48528,"children":48529},{},[48530],{"type":603,"value":48531},"区别",{"type":597,"tag":606,"props":48533,"children":48534},{},[48535],{"type":603,"value":48536},"三种算法比较：",{"type":597,"tag":606,"props":48538,"children":48539},{},[48540],{"type":603,"value":48541},"​    效率：复制算法>标记-整理算法>标记-清除算法；",{"type":597,"tag":606,"props":48543,"children":48544},{},[48545],{"type":603,"value":48546},"​    内存整齐度：复制算法=标记-整理算法>标记-清除算法",{"type":597,"tag":606,"props":48548,"children":48549},{},[48550],{"type":603,"value":48551},"​    内存利用率：标记-整理算法=标记-清除算法>复制算法",{"type":597,"tag":3995,"props":48553,"children":48555},{"id":48554},"_5分代收集算法",[48556],{"type":603,"value":48557},"5、分代收集算法",{"type":597,"tag":606,"props":48559,"children":48560},{},[48561],{"type":603,"value":48562},"首先这不是一种新算法，它是一种思想。现在使用的Java虚拟机并不是只是使用一种内存回收机制，而是分代收集的算法。就是将内存根据对象存活的周期划分为几块。一般是把堆分为新生代、和老年代。短命对",{"type":597,"tag":606,"props":48564,"children":48565},{},[48566,48568],{"type":603,"value":48567},"象存放在新生代中，长命对象放在老年代中。\n",{"type":597,"tag":719,"props":48569,"children":48571},{"alt":719,"src":48570},"/images/2020-02-11-gc/1090617-20180621214050767-1145517463.png",[],{"type":597,"tag":606,"props":48573,"children":48574},{},[48575],{"type":603,"value":48576},"这个图是我拷贝来的，但要记住java8以后，已经没有永久区了，之前永久区存放的东西基本上放到了元空间中。",{"type":597,"tag":606,"props":48578,"children":48579},{},[48580],{"type":603,"value":48581},"对于不同的代，采用不同的收集算法：",{"type":597,"tag":606,"props":48583,"children":48584},{},[48585],{"type":603,"value":48586},"​    新生代：由于存活的对象相对比较少，因此可以采用复制算法该算法效率比较快。",{"type":597,"tag":606,"props":48588,"children":48589},{},[48590],{"type":603,"value":48591},"​    老年代：由于存活的对象比较多哈，可以采用标记-清除算法或是标记-整理算法。",{"type":597,"tag":598,"props":48593,"children":48595},{"id":48594},"各平台gc算法",[48596],{"type":603,"value":48597},"各平台GC算法",{"type":597,"tag":606,"props":48599,"children":48600},{},[48601],{"type":603,"value":48602},"关于Mono和unity ，集成的是开源项目BOEHM ，BOEHM算法采用标记清除法,il2cpp也是实现了boehm算法",{"type":597,"tag":857,"props":48604,"children":48606},{"id":48605},"关于c和java中的循环引用",[48607],{"type":603,"value":48608},"关于c#和java中的循环引用",{"type":597,"tag":606,"props":48610,"children":48611},{},[48612],{"type":603,"value":48613},"循环引用指的是A引用了B，而B又引用了A。在写代码的时候，都难免会这样写：地图引用了战斗单位，战斗单位又引用了地图。。",{"type":597,"tag":606,"props":48615,"children":48616},{},[48617],{"type":603,"value":48618},"如图：（来源于国外大神的解释）",{"type":597,"tag":606,"props":48620,"children":48621},{},[48622],{"type":597,"tag":719,"props":48623,"children":48626},{"alt":48624,"src":48625},"小议C#引用类型对象在循环引用时会不会内存泄漏","/images/2020-02-11-mem/5b1933eb47c2a.png",[],{"type":597,"tag":606,"props":48628,"children":48629},{},[48630],{"type":603,"value":48631},"当A没有再被其他类引用，则A，B，C都应该被垃圾回收。如果判断该对象是否需要被回收的依据是基于引用计数的，那上面代码就会是这样：B被C和A引了，引用计数为2，C被B引了，引用计数为1，这样内存就泄露了。",{"type":597,"tag":606,"props":48633,"children":48634},{},[48635],{"type":603,"value":48636},"所以C#的GC并没有用引用计数。GC有一些“根”，对象都挂在上面。从“根”往其子结点进行遍历，就可以标注出哪些对象是被使用的。A对象没有被其他引用，A作为B，C的入口，所以A,B,C都变成了被回收的对象。",{"type":597,"tag":606,"props":48638,"children":48639},{},[48640,48642,48649],{"type":603,"value":48641},"只要是涉及到的对象不能从GC Roots",{"type":597,"tag":886,"props":48643,"children":48646},{"href":48644,"rel":48645},"https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/",[890],[48647],{"type":603,"value":48648},"强引用",{"type":603,"value":48650},"可到达，垃圾回收器都会进行清理来释放内存。",{"type":597,"tag":606,"props":48652,"children":48653},{},[48654],{"type":603,"value":48655},"综上，C#在做循环引用的时候是不会出现垃圾回收问题的。",{"title":591,"searchDepth":787,"depth":787,"links":48657},[48658,48659,48660,48661],{"id":48156,"depth":787,"text":48159},{"id":48208,"depth":787,"text":48211},{"id":48361,"depth":787,"text":48364},{"id":48594,"depth":787,"text":48597},"content:dotnet:2020-02-11-gc.md","dotnet/2020-02-11-gc.md","2020-02-11",{"_path":83,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":82,"description":48666,"body":48667,"_type":791,"_id":48950,"_source":793,"_file":48951,"_extension":795,"date":48952},"关于深浅复制大家可参考MSDN：https://msdn.microsoft.com/zh-cn/library/system.object.memberwiseclone.aspx",{"type":594,"children":48668,"toc":48945},[48669,48680,48685,48690,48695,48705,48711,48716,48724,48729,48734,48739,48744,48752,48757,48765,48773,48778,48786,48794,48799,48807,48815,48820,48828,48836,48844,48849,48857,48862,48871,48879,48887,48892,48900,48910,48919,48927,48932,48937],{"type":597,"tag":606,"props":48670,"children":48671},{},[48672,48674],{"type":603,"value":48673},"关于深浅复制大家可参考MSDN：",{"type":597,"tag":886,"props":48675,"children":48678},{"href":48676,"rel":48677},"https://msdn.microsoft.com/zh-cn/library/system.object.memberwiseclone.aspx",[890],[48679],{"type":603,"value":48676},{"type":597,"tag":606,"props":48681,"children":48682},{},[48683],{"type":603,"value":48684},"所谓深浅复制可解读为：",{"type":597,"tag":606,"props":48686,"children":48687},{},[48688],{"type":603,"value":48689},"浅复制：C#语言种的MemberwiseClone方法仅仅是再内存种创建一个新对象，然后将原有对象的所有字段直接复制过去，无论是值类型还是引用类型，是值类型的就复制值类型，是应用类型的就复制引用本身（而不会复制所引用的对象），因此，是浅拷贝。",{"type":597,"tag":606,"props":48691,"children":48692},{},[48693],{"type":603,"value":48694},"需要注意的是:  在利用MemberwiseClone()创建新对象的时候，不会像利用new的时候一样，也就是不会先执行字段的创建和构造方法条用的过程。",{"type":597,"tag":606,"props":48696,"children":48697},{},[48698,48700],{"type":603,"value":48699},"深复制：如果字段是值类型的，则对字段执行逐位复制，如果字段是引用类型的，则把引用类型的对象指向",{"type":597,"tag":1080,"props":48701,"children":48702},{},[48703],{"type":603,"value":48704},"一个全新的对象！",{"type":597,"tag":598,"props":48706,"children":48708},{"id":48707},"icloneable接口",[48709],{"type":603,"value":48710},"ICloneable接口",{"type":597,"tag":606,"props":48712,"children":48713},{},[48714],{"type":603,"value":48715},"ICloneable接口包含一个Clone方法，可以用来创建当前对象的拷贝。",{"type":597,"tag":621,"props":48717,"children":48719},{"code":48718},"public interface ICloneable \n{ \n    object Clone(); \n}\n",[48720],{"type":597,"tag":629,"props":48721,"children":48722},{"__ignoreMap":591},[48723],{"type":603,"value":48718},{"type":597,"tag":606,"props":48725,"children":48726},{},[48727],{"type":603,"value":48728},"ICloneable的问题是Clone方法并不会显式地指定是执行浅拷贝或深拷贝，因此调用者将无法确定实际情况。因此，有一些关于把ICloneable从.NET框架中淘汰的讨论。MSDN文档似乎暗示Clone方法是进行的深拷贝，但是文档没有明确的说明：",{"type":597,"tag":606,"props":48730,"children":48731},{},[48732],{"type":603,"value":48733},"ICloneable接口包含一个成员方法，Clone，意在支持超过MemberWiseClone所提供的功能... MemberWiseClone进行的是浅拷贝...",{"type":597,"tag":606,"props":48735,"children":48736},{},[48737],{"type":603,"value":48738},"类型安全的克隆",{"type":597,"tag":606,"props":48740,"children":48741},{},[48742],{"type":603,"value":48743},"ICloneable的另一个缺点是Clone方法返回的是一个对象，因此每次调用Clone都要进行一次强制类型转换。",{"type":597,"tag":621,"props":48745,"children":48747},{"code":48746},"Person joe = new Person(); \njoe.Name = \"Joe Smith\"; \nPerson joeClone = (Person)joe.Clone();\n",[48748],{"type":597,"tag":629,"props":48749,"children":48750},{"__ignoreMap":591},[48751],{"type":603,"value":48746},{"type":597,"tag":606,"props":48753,"children":48754},{},[48755],{"type":603,"value":48756},"一种可以避免进行强制类型转换的方式是提供你自己的类型安全的Clone方法。注意，你依然要提供ICloneable.Clone方法的以满足iCloneable接口的要求。",{"type":597,"tag":621,"props":48758,"children":48760},{"code":48759},"public class Person : ICloneable \n{ \n    public string Name; \n    object ICloneable.Clone() \n    { \n        return this.Clone(); \n    } \n    public Person Clone() \n    { \n        return (Person)this.MemberwiseClone(); \n    } \n}\n",[48761],{"type":597,"tag":629,"props":48762,"children":48763},{"__ignoreMap":591},[48764],{"type":603,"value":48759},{"type":597,"tag":803,"props":48766,"children":48767},{},[48768],{"type":597,"tag":807,"props":48769,"children":48770},{},[48771],{"type":603,"value":48772},"手工克隆",{"type":597,"tag":606,"props":48774,"children":48775},{},[48776],{"type":603,"value":48777},"一个能够保证对象完全按照你所想的那样进行克隆的方式是手工克隆对象的每一个域（field）。这种方式的缺点是麻烦而且容易出错：如果你在类中增 加了一个域，你很可能会忘记更新Clone方法。还要在克隆引用对象指向原始对象的时候，注意避免无限循环引用。下面是一个进行深拷贝的简单例子：",{"type":597,"tag":621,"props":48779,"children":48781},{"code":48780},"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        Person p = new Person(); \n        p.Name = this.Name; \n        if (this.Spouse != null) \n            p.Spouse = (Person)this.Spouse.Clone(); \n        return p; \n    } \n}\n",[48782],{"type":597,"tag":629,"props":48783,"children":48784},{"__ignoreMap":591},[48785],{"type":603,"value":48780},{"type":597,"tag":803,"props":48787,"children":48788},{},[48789],{"type":597,"tag":807,"props":48790,"children":48791},{},[48792],{"type":603,"value":48793},"使用MemberWiseClone方法",{"type":597,"tag":606,"props":48795,"children":48796},{},[48797],{"type":603,"value":48798},"MemberWiseClone是Object类的受保护方法，能够通过创建一个新对象，并把所有当前对象中的非静态域复制到新对象中，从而创建一 个浅拷贝。对于值类型的域，进行的是按位拷贝。对于引用类型的域，引用会被赋值而引用的对象则不会。因此，原始对象及其克隆都会引用同一个对象。注意，这 种方法对派生类都是有效的，也就是说，你只需在基类中定义一次Clone方法。下面是一个简单的例子：",{"type":597,"tag":621,"props":48800,"children":48802},{"code":48801},"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        return this.MemberwiseClone(); \n    } \n}\n",[48803],{"type":597,"tag":629,"props":48804,"children":48805},{"__ignoreMap":591},[48806],{"type":603,"value":48801},{"type":597,"tag":803,"props":48808,"children":48809},{},[48810],{"type":597,"tag":807,"props":48811,"children":48812},{},[48813],{"type":603,"value":48814},"用反射进行克隆",{"type":597,"tag":606,"props":48816,"children":48817},{},[48818],{"type":603,"value":48819},"用反射进行克隆是使用Activator.CreateInstance方法来创建一个相同类型的新对象，然后用反射对所有域进行浅拷贝。这种方法 的优点是它是全自动的，不需要在对象中添加或删除成员的时候修改克隆方法。另外它也能被写成提供深拷贝的方法。缺点是使用了反射，因此会比较慢，而且在部 分受信任的环境中是不可用的。示例代码",{"type":597,"tag":621,"props":48821,"children":48823},{"code":48822},"private static TOut TransReflection\u003CTIn, TOut>(TIn tIn)\n        {\n            TOut tOut = Activator.CreateInstance\u003CTOut>();\n            var tInType = tIn.GetType();\n            foreach (var itemOut in tOut.GetType().GetProperties())\n            {\n                var itemIn = tInType.GetProperty(itemOut.Name); ;\n                if (itemIn != null)\n                {\n                    itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n                }\n            }\n            return tOut;\n        }\n",[48824],{"type":597,"tag":629,"props":48825,"children":48826},{"__ignoreMap":591},[48827],{"type":603,"value":48822},{"type":597,"tag":606,"props":48829,"children":48830},{},[48831],{"type":597,"tag":1080,"props":48832,"children":48833},{},[48834],{"type":603,"value":48835},"调用一百万次耗时：2464毫秒",{"type":597,"tag":803,"props":48837,"children":48838},{},[48839],{"type":597,"tag":807,"props":48840,"children":48841},{},[48842],{"type":603,"value":48843},"使用序列化进行克隆",{"type":597,"tag":606,"props":48845,"children":48846},{},[48847],{"type":603,"value":48848},"克隆一个对象的最简单的方法是将它序列化并立刻反序列化为一个新对象。和反射方法一样，序列化方法是自动的，无需在对对象成员进行增删的时候做出修 改。缺点是序列化比其他方法慢，甚至比用反射还慢，所有引用的对象都必须是可序列化的（Serializable）。另外，取决于你所使用的序列化的类型 （XML，SOAP，二进制）的不同，私有成员可能不能像期望的那样被克隆。示例代码在这里，这里和这里。",{"type":597,"tag":621,"props":48850,"children":48852},{"code":48851},"StudentSecond ss= JsonConvert.DeserializeObject\u003CStudentSecond>(JsonConvert.SerializeObject(s));\n",[48853],{"type":597,"tag":629,"props":48854,"children":48855},{"__ignoreMap":591},[48856],{"type":603,"value":48851},{"type":597,"tag":606,"props":48858,"children":48859},{},[48860],{"type":603,"value":48861},"**调用一百万次耗时：**2984毫秒",{"type":597,"tag":606,"props":48863,"children":48864},{},[48865],{"type":597,"tag":886,"props":48866,"children":48869},{"href":48867,"rel":48868},"http://wiki.unity3d.com/index.php/ObjectCopier",[890],[48870],{"type":603,"value":48867},{"type":597,"tag":621,"props":48872,"children":48874},{"code":48873},"using System;\nusing System.Collections;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.IO;\n \n/// \u003Csummary>\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// \n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// \u003C/summary>\npublic static class ObjectCopier\n{\n    /// \u003Csummary>\n    /// Perform a deep Copy of the object.\n    /// \u003C/summary>\n    /// \u003Ctypeparam name=\"T\">The type of object being copied.\u003C/typeparam>\n    /// \u003Cparam name=\"source\">The object instance to copy.\u003C/param>\n    /// \u003Creturns>The copied object.\u003C/returns>\n    public static T Clone\u003CT>(this T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\"The type must be serializable.\", \"source\");\n        }\n \n        // Don't serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n \n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n     }\n}\n",[48875],{"type":597,"tag":629,"props":48876,"children":48877},{"__ignoreMap":591},[48878],{"type":603,"value":48873},{"type":597,"tag":803,"props":48880,"children":48881},{},[48882],{"type":597,"tag":807,"props":48883,"children":48884},{},[48885],{"type":603,"value":48886},"使用IL进行克隆",{"type":597,"tag":606,"props":48888,"children":48889},{},[48890],{"type":603,"value":48891},"一种罕见的解决方案是使用IL（中间语言）来进行对象克隆。这种方式创建一个动态方法（DynamicMethod），获取中间语言生成器 （ILGenerator），向方法中注入代码，把它编译成一个委托，然后执行这个委托。委托会被缓存，因此中间语言只在初次克隆的时候才会生成，后续的 克隆都不会重新生成一遍。尽管这种方法比使用反射快，但是这种方法难以理解和维护。示例代码",{"type":597,"tag":621,"props":48893,"children":48895},{"code":48894},"　 public static class TransExpV2\u003CTIn, TOut>\n    {\n\n        private static readonly Func\u003CTIn, TOut> cache = GetFunc();\n        private static Func\u003CTIn, TOut> GetFunc()\n        {\n            ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n            List\u003CMemberBinding> memberBindingList = new List\u003CMemberBinding>();\n\n            foreach (var item in typeof(TOut).GetProperties())\n            {\n　　　　　　　　　if (!item.CanWrite)\n　　　　　　　　　　    continue;\n\n                MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n                MemberBinding memberBinding = Expression.Bind(item, property);\n                memberBindingList.Add(memberBinding);\n            }\n\n            MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n            Expression\u003CFunc\u003CTIn, TOut>> lambda = Expression.Lambda\u003CFunc\u003CTIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n\n            return lambda.Compile();\n        }\n\n        public static TOut Trans(TIn tIn)\n        {\n            return cache(tIn);\n        }\n\n    }\n",[48896],{"type":597,"tag":629,"props":48897,"children":48898},{"__ignoreMap":591},[48899],{"type":603,"value":48894},{"type":597,"tag":606,"props":48901,"children":48902},{},[48903,48905],{"type":603,"value":48904},"调用：",{"type":597,"tag":1080,"props":48906,"children":48907},{},[48908],{"type":603,"value":48909},"StudentSecond ss= TransExpV2.Trans(s);",{"type":597,"tag":606,"props":48911,"children":48912},{},[48913,48914],{"type":603,"value":44225},{"type":597,"tag":1733,"props":48915,"children":48916},{},[48917],{"type":603,"value":48918},"调用一百万次耗时：107毫秒*",{"type":597,"tag":803,"props":48920,"children":48921},{},[48922],{"type":597,"tag":807,"props":48923,"children":48924},{},[48925],{"type":603,"value":48926},"使用扩展方法进行克隆",{"type":597,"tag":606,"props":48928,"children":48929},{},[48930],{"type":603,"value":48931},"Havard Stranden用扩展方法（extention method）创建了一个自定义的克隆框架。这个框架能够创建对象及其引用的对象的深拷贝，不管对象结构有多复杂。缺点是，这是一个不提供源代码的自定义 框架（更新：现在已经包括源代码了，参见本文评论），并且它不能在不使用无参数构造器的时候，拷贝由私有方法创建的对象。另一个问题，也是所有自动化的深 克隆方法共有的问题是，深拷贝通常需要灵活地处理不能进行简单自动化特殊情况（例如未受管理的资源）。",{"type":597,"tag":1023,"props":48933,"children":48935},{"id":48934},"一个测试类",[48936],{"type":603,"value":48934},{"type":597,"tag":621,"props":48938,"children":48940},{"code":48939},"\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\nnamespace dotnet_samples_test\n{\n\n    public class Person : ICloneable \n    {\n        public IdInfo IdInfo;\n        public int Age { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public List\u003Cstring> Phones { get; set; } = new List\u003Cstring>();\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public Person ShallowCopy()\n        {\n            return (Person)this.Clone();\n        }\n\n        public Person DeepCopy()\n        {\n            var result =  (Person)this.Clone();\n            result.IdInfo = result.IdInfo.DeepCopy();\n            result.Phones = result.Phones.ToList();\n            return result;\n        }\n    }\n\n\n    public class IdInfo\n    {\n        public int IdNumber;\n        public IdInfo(int IdNumber)\n        {\n            this.IdNumber = IdNumber;\n        }\n\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public IdInfo ShallowCopy()\n        {\n            return (IdInfo)this.Clone();\n        }\n\n        public IdInfo DeepCopy()\n        {\n            var result =  (IdInfo)this.Clone();\n\n            return result;\n        }\n\n    }\n\n\n\n\n\n    [TestClass]\n    public class CloneTest1\n    {\n        [TestMethod]\n        public void TestMethod1()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List\u003Cstring> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.ShallowCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            person2.Name=\"冈本伊朗\";\n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n                      Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n\n        [TestMethod]\n        public void TestMethod2()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List\u003Cstring> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.DeepCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            \n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n            Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n    }\n}\n",[48941],{"type":597,"tag":629,"props":48942,"children":48943},{"__ignoreMap":591},[48944],{"type":603,"value":48939},{"title":591,"searchDepth":787,"depth":787,"links":48946},[48947],{"id":48707,"depth":787,"text":48710,"children":48948},[48949],{"id":48934,"depth":1530,"text":48934},"content:dotnet:2020-02-10-Icloneable.md","dotnet/2020-02-10-Icloneable.md","2020-02-10",{"_path":80,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":79,"description":48954,"body":48955,"_type":791,"_id":48985,"_source":793,"_file":48986,"_extension":795,"date":48987},"https://www.jianshu.com/p/edc5d341956a",{"type":594,"children":48956,"toc":48983},[48957,48965,48974],{"type":597,"tag":606,"props":48958,"children":48959},{},[48960],{"type":597,"tag":886,"props":48961,"children":48963},{"href":48954,"rel":48962},[890],[48964],{"type":603,"value":48954},{"type":597,"tag":606,"props":48966,"children":48967},{},[48968],{"type":597,"tag":886,"props":48969,"children":48972},{"href":48970,"rel":48971},"https://blog.csdn.net/weixin_30876945/article/details/98079738?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task",[890],[48973],{"type":603,"value":48970},{"type":597,"tag":606,"props":48975,"children":48976},{},[48977],{"type":597,"tag":886,"props":48978,"children":48981},{"href":48979,"rel":48980},"https://blog.csdn.net/yekoufeng/article/details/80573857?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task",[890],[48982],{"type":603,"value":48979},{"title":591,"searchDepth":787,"depth":787,"links":48984},[],"content:dotnet:2020-02-09-room-elo.md","dotnet/2020-02-09-room-elo.md","2020-02-09",{"_path":77,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":76,"description":48989,"body":48990,"_type":791,"_id":49782,"_source":793,"_file":49783,"_extension":795,"date":49784},"为什么要进行视野管理？1.如果不进行视野管理，流量上来看，假设平均每秒5个移动包（80字节），1个技能包（160字节），单人每秒多少？500kb。2.客户端表现来看，客户端受屏幕大小影响，离得远的玩家看不见，没有必要发给客户端。客户端性能所限，玩家多，放各种 技能，当然会看。3.从性能上考虑，服务端不用遍历全场景对象…也会大大减少性能消耗。格子LandIncServer将每个场景看做是由n个land（块）组成，每个land就是一个大小固定的正方形，默认512 * 512。比如一个scene的尺寸为1200 * 700：则需要6个land来表示:PatchLand进一步被划分为若干个Patch（",{"type":594,"children":48991,"toc":49771},[48992,48998,49003,49008,49013,49018,49024,49029,49036,49041,49048,49054,49059,49066,49071,49082,49087,49094,49099,49107,49113,49118,49125,49148,49159,49164,49184,49195,49200,49205,49215,49223,49281,49286,49291,49296,49301,49306,49311,49318,49330,49351,49356,49361,49366,49371,49376,49381,49386,49391,49396,49426,49431,49469,49474,49479,49484,49489,49494,49499,49504,49509,49521,49529,49534,49542,49551,49556,49565,49570,49578,49595,49616,49624,49629,49637,49642,49647,49652,49657,49662,49667,49672,49677,49686,49694,49702,49711,49719,49728,49733],{"type":597,"tag":598,"props":48993,"children":48995},{"id":48994},"为什么要进行视野管理",[48996],{"type":603,"value":48997},"为什么要进行视野管理？",{"type":597,"tag":606,"props":48999,"children":49000},{},[49001],{"type":603,"value":49002},"1.如果不进行视野管理，流量上来看，假设平均每秒5个移动包（80字节），1个技能包（160字节），单人每秒多少？500kb。",{"type":597,"tag":606,"props":49004,"children":49005},{},[49006],{"type":603,"value":49007},"2.客户端表现来看，客户端受屏幕大小影响，离得远的玩家看不见，没有必要发给客户端。客户端性能所限，玩家多，放各种 技能，当然会看。",{"type":597,"tag":606,"props":49009,"children":49010},{},[49011],{"type":603,"value":49012},"3.从性能上考虑，服务端不用遍历全场景对象…也会大大减少性能消耗。",{"type":597,"tag":857,"props":49014,"children":49016},{"id":49015},"格子",[49017],{"type":603,"value":49015},{"type":597,"tag":598,"props":49019,"children":49021},{"id":49020},"land",[49022],{"type":603,"value":49023},"Land",{"type":597,"tag":606,"props":49025,"children":49026},{},[49027],{"type":603,"value":49028},"IncServer将每个场景看做是由n个land（块）组成，每个land就是一个大小固定的正方形，默认512 * 512。比如一个scene的尺寸为1200 * 700：",{"type":597,"tag":606,"props":49030,"children":49031},{},[49032],{"type":597,"tag":719,"props":49033,"children":49035},{"alt":719,"src":49034},"/images/2020-02-07-aoi/IncServer-Scene-RealScene.png",[],{"type":597,"tag":606,"props":49037,"children":49038},{},[49039],{"type":603,"value":49040},"则需要6个land来表示:",{"type":597,"tag":606,"props":49042,"children":49043},{},[49044],{"type":597,"tag":719,"props":49045,"children":49047},{"alt":719,"src":49046},"/images/2020-02-07-aoi/IncServer-Scene.png",[],{"type":597,"tag":598,"props":49049,"children":49051},{"id":49050},"patch",[49052],{"type":603,"value":49053},"Patch",{"type":597,"tag":606,"props":49055,"children":49056},{},[49057],{"type":603,"value":49058},"Land进一步被划分为若干个Patch（格子）。以patch为单位，land的边长是2的整数次幂。",{"type":597,"tag":606,"props":49060,"children":49061},{},[49062],{"type":597,"tag":719,"props":49063,"children":49065},{"alt":719,"src":49064},"/images/2020-02-07-aoi/IncServer-Scene-Patch.png",[],{"type":597,"tag":598,"props":49067,"children":49069},{"id":49068},"分块管理",[49070],{"type":603,"value":49068},{"type":597,"tag":606,"props":49072,"children":49073},{},[49074,49076,49081],{"type":603,"value":49075},"World对游戏对象的管理以patch为单位，",{"type":597,"tag":1080,"props":49077,"children":49078},{},[49079],{"type":603,"value":49080},"每个patch都对应有一个对象链表",{"type":603,"value":758},{"type":597,"tag":606,"props":49083,"children":49084},{},[49085],{"type":603,"value":49086},"整个world中所有的对象链表的链表头可依次存储于一个一维数组中，这样根据对象的世界坐标，即可方便的计算出其所属的patch以及对应的对象链表。",{"type":597,"tag":606,"props":49088,"children":49089},{},[49090],{"type":597,"tag":719,"props":49091,"children":49093},{"alt":719,"src":49092},"/images/2020-02-07-aoi/IncServer-Scene-ObjectLink.png",[],{"type":597,"tag":606,"props":49095,"children":49096},{},[49097],{"type":603,"value":49098},"假设对象的坐标为(x, z)，patch的边长为patch_size，land的边长为land_size，整个场景在x方向上有land_x个land，则对象所属的对象链表的索引计算方式为：",{"type":597,"tag":621,"props":49100,"children":49102},{"code":49101},"index = (z / patch_size) * (land_x * (land_size / patch_size)) + (x / patch_size);\n",[49103],{"type":597,"tag":629,"props":49104,"children":49105},{"__ignoreMap":591},[49106],{"type":603,"value":49101},{"type":597,"tag":1023,"props":49108,"children":49110},{"id":49109},"incserver的aoi",[49111],{"type":603,"value":49112},"IncServer的AOI",{"type":597,"tag":606,"props":49114,"children":49115},{},[49116],{"type":603,"value":49117},"与常见的九宫格不同，IncServer支持NEAR、MIDDLE、FAR、FULL四种视野范围：",{"type":597,"tag":606,"props":49119,"children":49120},{},[49121],{"type":597,"tag":719,"props":49122,"children":49124},{"alt":719,"src":49123},"/images/2020-02-07-aoi/IncServer-Scene-ViewRange.png",[],{"type":597,"tag":1321,"props":49126,"children":49127},{},[49128,49133,49138,49143],{"type":597,"tag":807,"props":49129,"children":49130},{},[49131],{"type":603,"value":49132},"NEAR：当前对象所位于的patch",{"type":597,"tag":807,"props":49134,"children":49135},{},[49136],{"type":603,"value":49137},"MIDDLE：与NEAR相邻的patch",{"type":597,"tag":807,"props":49139,"children":49140},{},[49141],{"type":603,"value":49142},"FAR：与MID相邻的patch（NEAR除外）",{"type":597,"tag":807,"props":49144,"children":49145},{},[49146],{"type":603,"value":49147},"FULL：NEAR + MIDDILE + FAR",{"type":597,"tag":606,"props":49149,"children":49150},{},[49151,49153,49158],{"type":603,"value":49152},"不过在实际开发中，所有对象的视野都是FULL，即每个对象都能看到以自己所在patch为中心前后左右各两个patch（总计25个patch）内的其他对象。之后的讨论均假设",{"type":597,"tag":1080,"props":49154,"children":49155},{},[49156],{"type":603,"value":49157},"所有游戏对象的视野范围均为FULL",{"type":603,"value":758},{"type":597,"tag":606,"props":49160,"children":49161},{},[49162],{"type":603,"value":49163},"如果对象B进入对象A的视野范围，则根据A对象类型，可能会触发不同的逻辑，比如：",{"type":597,"tag":1321,"props":49165,"children":49166},{},[49167,49179],{"type":597,"tag":807,"props":49168,"children":49169},{},[49170,49172,49177],{"type":603,"value":49171},"对象A是玩家：将B对象",{"type":597,"tag":1080,"props":49173,"children":49174},{},[49175],{"type":603,"value":49176},"序列化",{"type":603,"value":49178},"到对象A的客户端。",{"type":597,"tag":807,"props":49180,"children":49181},{},[49182],{"type":603,"value":49183},"对象B是怪物：执行对象进入怪物视野的逻辑，比如激活AI等。",{"type":597,"tag":606,"props":49185,"children":49186},{},[49187,49189,49194],{"type":603,"value":49188},"后文将以上情况称之为在对象A的视野中加载对象B，简称为",{"type":597,"tag":1080,"props":49190,"children":49191},{},[49192],{"type":603,"value":49193},"视野加载",{"type":603,"value":758},{"type":597,"tag":1023,"props":49196,"children":49198},{"id":49197},"九宫格",[49199],{"type":603,"value":49197},{"type":597,"tag":606,"props":49201,"children":49202},{},[49203],{"type":603,"value":49204},"让我们首先绘制一个2D的地图",{"type":597,"tag":606,"props":49206,"children":49207},{},[49208,49213],{"type":597,"tag":719,"props":49209,"children":49212},{"alt":49210,"src":49211}," 3.1 网络法实现AOI算法  - 图1","/images/2020-02-07-aoi/3276b001c9ca66df2fd93650fc75bc3d.jpeg",[],{"type":603,"value":49214},"我们给这个地图定义一些数值：",{"type":597,"tag":606,"props":49216,"children":49217},{},[49218],{"type":597,"tag":1080,"props":49219,"children":49220},{},[49221],{"type":603,"value":49222},"场景相关数值计算",{"type":597,"tag":1321,"props":49224,"children":49225},{},[49226,49231,49236,49241,49246,49251,49256,49261,49266,49271,49276],{"type":597,"tag":807,"props":49227,"children":49228},{},[49229],{"type":603,"value":49230},"场景大小： 250*250 ， w(x轴宽度) = 250，l(y轴长度) = 250",{"type":597,"tag":807,"props":49232,"children":49233},{},[49234],{"type":603,"value":49235},"x轴格子数量：nx = 5",{"type":597,"tag":807,"props":49237,"children":49238},{},[49239],{"type":603,"value":49240},"y轴格子数量：ny = 5",{"type":597,"tag":807,"props":49242,"children":49243},{},[49244],{"type":603,"value":49245},"格子宽度: dx = w / nx = 250 / 5 = 50",{"type":597,"tag":807,"props":49247,"children":49248},{},[49249],{"type":603,"value":49250},"格子长度: dy = l / ny = 250 / 5 = 50",{"type":597,"tag":807,"props":49252,"children":49253},{},[49254],{"type":603,"value":49255},"格子的x轴坐标：idx",{"type":597,"tag":807,"props":49257,"children":49258},{},[49259],{"type":603,"value":49260},"格子的y轴坐标：idy",{"type":597,"tag":807,"props":49262,"children":49263},{},[49264],{"type":603,"value":49265},"格子编号：id = idy *nx + idx (利用格子坐标得到格子编号)",{"type":597,"tag":807,"props":49267,"children":49268},{},[49269],{"type":603,"value":49270},"格子坐标：idx = id % nx , idy = id / nx (利用格子id得到格子坐标)",{"type":597,"tag":807,"props":49272,"children":49273},{},[49274],{"type":603,"value":49275},"格子的x轴坐标: idx = id % nx (利用格子id得到x轴坐标编号)",{"type":597,"tag":807,"props":49277,"children":49278},{},[49279],{"type":603,"value":49280},"格子的y轴坐标: idy = id / nx (利用格子id得到y轴坐标编号)",{"type":597,"tag":606,"props":49282,"children":49283},{},[49284],{"type":603,"value":49285},"以上几个数值，请参考图，简单过一下，就可以理解的，初中的几何计算而已。",{"type":597,"tag":606,"props":49287,"children":49288},{},[49289],{"type":603,"value":49290},"九宫格也是打格子的方式之一，把地图划分为很多小格子，每个格子记录格子内的玩家，每个玩家的aoi范围是以自己为中心范围内的九个格子，九个格子的大小略大于屏幕大小，同样的有三个主要的操作：enter,move,leave",{"type":597,"tag":606,"props":49292,"children":49293},{},[49294],{"type":603,"value":49295},"enter:根据玩家坐标，加入到所属的格子中，通过计算以这个格子的为中心的九个格子，这九个格子内的玩家就要被通知有新玩家初始化，同时这个新玩家初始化九个格子内的所有玩家。",{"type":597,"tag":606,"props":49297,"children":49298},{},[49299],{"type":603,"value":49300},"move:根据移动前位置的格子，计算出移动前的oldaoi集合，根据当前位置的格子，计算出当前的curaoi集合，如果oldaoi, curaoi为同一个格子，则通知格子内的所有玩家该玩家在移动。如果oldaoi,curaoi不是同一个格子，即发生了跨格子的操作，那么要将该玩家从旧格子移除，同时加入新格子。同时分别遍历oldaoi,curaoi,计算出需要通知玩家消失的格子集合，通知玩家出生的格子集合，以及通知玩家移动的格子集合。",{"type":597,"tag":606,"props":49302,"children":49303},{},[49304],{"type":603,"value":49305},"leave:玩家离开地图，将玩家从对应的格子里面删除，同时通知aoi集合有玩家离开。",{"type":597,"tag":606,"props":49307,"children":49308},{},[49309],{"type":603,"value":49310},"服务器大格子的大小，以3*3的格子要总比客户端显示范围要大一点为原则。比客户端大一点，是为了预留资源加载的时间。\n　　如下图所示，绿色表示手机客户端的显示区域，当角色A在格子6中时，他可以看到1,2,3,5,6,7,9,10,11这9个格子里的内容，那么当他的状态发生变化时，就需要同步给在这9个格子里的所有玩家；同样，当这9个格子里的有玩家或者怪物的状态改变时，也需要都同步给角色A。",{"type":597,"tag":606,"props":49312,"children":49313},{},[49314],{"type":597,"tag":719,"props":49315,"children":49317},{"alt":719,"src":49316},"/images/2020-02-07-aoi/1430365886_455802.jpg",[],{"type":597,"tag":606,"props":49319,"children":49320},{},[49321,49323,49328],{"type":603,"value":49322},"当角色A移动到角色B所在的格子(7)，则他将不再看到1,5,9这三个格子里的内容，同时他将新看到4,8,12这三个格子里的地图内容（玩家和怪物）。所以这个过程中，服务器要下发消息，删除角色A所在的客户端里的1,5,9这三个格子里的地图内容，同时下发消息新增4,8,12这三个格子里的地图内容（类型一）。\n　　推荐大格子具体的大小，按客户端iPhone4S的960",{"type":597,"tag":1733,"props":49324,"children":49325},{},[49326],{"type":603,"value":49327},"640分辨来制定，取屏幕长宽的1/2大一些，可以定为640",{"type":603,"value":49329},"360。",{"type":597,"tag":1321,"props":49331,"children":49332},{},[49333,49342],{"type":597,"tag":807,"props":49334,"children":49335},{},[49336],{"type":597,"tag":886,"props":49337,"children":49340},{"href":49338,"rel":49339},"https://github.com/artasccope/GameFW.AOI",[890],[49341],{"type":603,"value":49338},{"type":597,"tag":807,"props":49343,"children":49344},{},[49345],{"type":597,"tag":886,"props":49346,"children":49349},{"href":49347,"rel":49348},"https://www.bookstack.cn/read/zinx/78aa012966213643.md",[890],[49350],{"type":603,"value":49347},{"type":597,"tag":1023,"props":49352,"children":49354},{"id":49353},"灯塔法",[49355],{"type":603,"value":49353},{"type":597,"tag":606,"props":49357,"children":49358},{},[49359],{"type":603,"value":49360},"所谓灯塔法，即将大地图划分成有限的小格子，在每个小格子中间放一个灯塔，这个灯塔管理两个队列：一个是本格子内所有的对象集合，另一个是对本灯塔感兴趣的对象集合（简称观察者）。",{"type":597,"tag":606,"props":49362,"children":49363},{},[49364],{"type":603,"value":49365},"而地图上的每个对象，维护一个视野队列：该队列为其视野范围内的所有对象，即自身感兴趣的所有对象。",{"type":597,"tag":606,"props":49367,"children":49368},{},[49369],{"type":603,"value":49370},"一个对象在地图上面运动：分为三个操作：enter，move，leave.",{"type":597,"tag":606,"props":49372,"children":49373},{},[49374],{"type":603,"value":49375},"enter:当对象进入地图的时候，根据对象的当前位置和对象的感知距离，可以获取到该对象能观察到的所有灯塔，遍历这些灯塔，将该对象添加为其观察者。同时将这些对象添加到自己的视野队列中。",{"type":597,"tag":606,"props":49377,"children":49378},{},[49379],{"type":603,"value":49380},"move:当对象开始移动的时候，对象从一个点到另一个店，那么视野范围必然发生变化。此刻需要将对象从老的灯塔的观察者列表移除，同时将对象添加进新的灯塔的观察者列表。此外，还需要跟新玩家的视野队列，因为视野范围变化，视野内的对象也相应变化。",{"type":597,"tag":606,"props":49382,"children":49383},{},[49384],{"type":603,"value":49385},"leave:当对象离开的时候，将自身从附近灯塔的观察者队列中移除。",{"type":597,"tag":606,"props":49387,"children":49388},{},[49389],{"type":603,"value":49390},"通过灯塔法，每当物体发生变化，我们能马上根据其当前位置，定位到他的所在的灯塔，同时找到它视野范围内相关联的物体。这样避免了遍历地图上所有玩家进行处理的方式。",{"type":597,"tag":606,"props":49392,"children":49393},{},[49394],{"type":603,"value":49395},"当然灯塔的格子大小划分要因地制宜，格子越小，消耗内存越大，同时计算量变大。",{"type":597,"tag":1321,"props":49397,"children":49398},{},[49399,49408,49417],{"type":597,"tag":807,"props":49400,"children":49401},{},[49402],{"type":597,"tag":886,"props":49403,"children":49406},{"href":49404,"rel":49405},"https://github.com/Bestpoker/AOI",[890],[49407],{"type":603,"value":49404},{"type":597,"tag":807,"props":49409,"children":49410},{},[49411],{"type":597,"tag":886,"props":49412,"children":49415},{"href":49413,"rel":49414},"https://github.com/NetEase/pomelo-aoi",[890],[49416],{"type":603,"value":49413},{"type":597,"tag":807,"props":49418,"children":49419},{},[49420],{"type":597,"tag":886,"props":49421,"children":49424},{"href":49422,"rel":49423},"https://github.com/ahuangege/tower-aoi",[890],[49425],{"type":603,"value":49422},{"type":597,"tag":606,"props":49427,"children":49428},{},[49429],{"type":603,"value":49430},"前几天把pomelo中的tower aoi的js实现看了一遍，总结如下：",{"type":597,"tag":803,"props":49432,"children":49433},{},[49434,49439,49444,49449,49454,49459,49464],{"type":597,"tag":807,"props":49435,"children":49436},{},[49437],{"type":603,"value":49438},"js代码写得不是很好，发现了几个小问题；",{"type":597,"tag":807,"props":49440,"children":49441},{},[49442],{"type":603,"value":49443},"“对象(包括观察者)出现”“对象(包括观察者)消失”“对象(包括观察者)位置变化”“观察者位置变化”的回调通知(前三者通知对应灯塔区域的观察者，第四个通知观察者本身)没有可测试的样例，采用的话需要自己实现和测试；",{"type":597,"tag":807,"props":49445,"children":49446},{},[49447],{"type":603,"value":49448},"只考虑了起点和终点，移动路径上的玩家被忽视了，路径短的话也可能不是问题(长路径切分成多个短路径做位置更新)；",{"type":597,"tag":807,"props":49450,"children":49451},{},[49452],{"type":603,"value":49453},"观察者可能收到超出自己视野范围的消息；",{"type":597,"tag":807,"props":49455,"children":49456},{},[49457],{"type":603,"value":49458},"优点是可处理视野不同的观察者，相对于普通扫格子的实现在代码层面耦合度降低、效率提升不明显(把扫格子实现的地格看做一个灯塔区域，在地格上记录观察者就可以模拟这种灯塔模型，削去了遍历周边地格所有对象的逻辑)",{"type":597,"tag":807,"props":49460,"children":49461},{},[49462],{"type":603,"value":49463},"这里做的是四边形灯塔区域，云风提的那种六边形灯塔区域减少查询灯塔个数是特指视野半径\u003C=六边形边长的一半这种情况",{"type":597,"tag":807,"props":49465,"children":49466},{},[49467],{"type":603,"value":49468},"tower aoi其实就是处理地图视野的一个设计，类似于订阅-发布，我订阅某一块区域表示对这一块区域感兴趣，那么有对象在这一块区域出现消失移动你就通知我",{"type":597,"tag":857,"props":49470,"children":49472},{"id":49471},"十字链表法",[49473],{"type":603,"value":49471},{"type":597,"tag":606,"props":49475,"children":49476},{},[49477],{"type":603,"value":49478},"这里以2d游戏为例，3d游戏顺势扩展即可。",{"type":597,"tag":606,"props":49480,"children":49481},{},[49482],{"type":603,"value":49483},"所谓十字链表法，即维护两天链表，一条根据地图上所有物体的x坐标从小到大依次插入链表，一条根据地图上所有物体的y坐标从小到大依次插入链表，可以想象成一个十字架。这样便把地图上的所有对象按序分配到了x,y链表上。",{"type":597,"tag":606,"props":49485,"children":49486},{},[49487],{"type":603,"value":49488},"这里的链表为双向链表，双向链表的好处是，获取到链表中的一个节点，便可以向前和向后遍历。这样，当我们拿到一个对象时，要获取该对象的视野范围就变得非常简单。避免了从头到尾遍历所有对象。",{"type":597,"tag":606,"props":49490,"children":49491},{},[49492],{"type":603,"value":49493},"首先根据x坐标，在x链表上找到该节点，然后从该节点向前和向后遍历，根据x方向的视野范围找出需要识别的对象。",{"type":597,"tag":606,"props":49495,"children":49496},{},[49497],{"type":603,"value":49498},"然后根据y坐标，在y链表上找到该节点，然后从该节点向前和向后遍历，根据y方向的视野范围找出需要识别的对象。",{"type":597,"tag":606,"props":49500,"children":49501},{},[49502],{"type":603,"value":49503},"拿到x,y链表上需要关注的对象，然后取他们的交集，这便是玩家视野范围内的对象。",{"type":597,"tag":606,"props":49505,"children":49506},{},[49507],{"type":603,"value":49508},"对于对象在地图上的enter,move,leave 。根据前面的思路就变得非常简单",{"type":597,"tag":1321,"props":49510,"children":49511},{},[49512],{"type":597,"tag":807,"props":49513,"children":49514},{},[49515],{"type":597,"tag":886,"props":49516,"children":49519},{"href":49517,"rel":49518},"https://github.com/zhepama/AOI",[890],[49520],{"type":603,"value":49517},{"type":597,"tag":3995,"props":49522,"children":49524},{"id":49523},"十字链表基本原理",[49525],{"type":597,"tag":1080,"props":49526,"children":49527},{},[49528],{"type":603,"value":49523},{"type":597,"tag":606,"props":49530,"children":49531},{},[49532],{"type":603,"value":49533},"根据二维地图，将其分成x轴和y轴两个链表。如果是三维地图，则还需要维护多一个z轴的链表。将对象的坐标值按照从小到大相应的排列在相应的坐标轴上面。",{"type":597,"tag":1321,"props":49535,"children":49536},{},[49537],{"type":597,"tag":807,"props":49538,"children":49539},{},[49540],{"type":603,"value":49541},"添加到AOI（ADD）: 根据新增对象的X,Y坐标,依次遍历X,Y轴坐标链表,这里有两个目的,一个是获得这个新增对象的坐标在X,Y轴坐标的位置,另一方面获得该通知哪些结点.通知的范围,每个对象可以自己定制自己的通知范围。必须X,Y坐标同时都在通知范围内才可以进入通知集合，我们要按照从小到大进行插入。例如X轴坐标为:",{"type":597,"tag":606,"props":49543,"children":49544},{},[49545],{"type":597,"tag":629,"props":49546,"children":49548},{"className":49547},[],[49549],{"type":603,"value":49550},"a->b->c->d->e->f->g->h",{"type":597,"tag":606,"props":49552,"children":49553},{},[49554],{"type":603,"value":49555},"假设新增一个对象z,它最终所在的位置是c和d之间,需要重新在链表的头部开始遍历寻找z的位置，比如z的X轴位置是5：",{"type":597,"tag":606,"props":49557,"children":49558},{},[49559],{"type":597,"tag":629,"props":49560,"children":49562},{"className":49561},[],[49563],{"type":603,"value":49564},"a(0)->b(1)->c(2)->d(3)->e(4)-z(5)->f(6)->g(7)->h(8)",{"type":597,"tag":606,"props":49566,"children":49567},{},[49568],{"type":603,"value":49569},"但是这样会发现一个问题，如果需要管理的坐标少还可以。但如果有很多个坐标比如1W个坐标，那这个链表会很长，如果每次都需要从头部开始查找效率就很低。针对这样的插入方法目前大家常用的有快速排序、分治、按区域划分格子等方式。",{"type":597,"tag":3995,"props":49571,"children":49573},{"id":49572},"目前常用的排序算法",[49574],{"type":597,"tag":1080,"props":49575,"children":49576},{},[49577],{"type":603,"value":49572},{"type":597,"tag":1321,"props":49579,"children":49580},{},[49581],{"type":597,"tag":807,"props":49582,"children":49583},{},[49584,49586,49593],{"type":603,"value":49585},"快速排序（Quicksort）是对",{"type":597,"tag":886,"props":49587,"children":49590},{"href":49588,"rel":49589},"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306",[890],[49591],{"type":603,"value":49592},"冒泡排序",{"type":603,"value":49594},"的一种改进。",{"type":597,"tag":606,"props":49596,"children":49597},{},[49598,49600,49607,49609,49615],{"type":603,"value":49599},"快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以",{"type":597,"tag":886,"props":49601,"children":49604},{"href":49602,"rel":49603},"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%E9%80%92%E5%BD%92/1740695",[890],[49605],{"type":603,"value":49606},"递归",{"type":603,"value":49608},"进行，以此达到整个数据变成有序",{"type":597,"tag":886,"props":49610,"children":49613},{"href":49611,"rel":49612},"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%E5%BA%8F%E5%88%97/1302588",[890],[49614],{"type":603,"value":8253},{"type":603,"value":758},{"type":597,"tag":1321,"props":49617,"children":49618},{},[49619],{"type":597,"tag":807,"props":49620,"children":49621},{},[49622],{"type":603,"value":49623},"分治算法",{"type":597,"tag":606,"props":49625,"children":49626},{},[49627],{"type":603,"value":49628},"分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。即一种分目标完成程序算法，简单问题可用二分法完成。",{"type":597,"tag":1321,"props":49630,"children":49631},{},[49632],{"type":597,"tag":807,"props":49633,"children":49634},{},[49635],{"type":603,"value":49636},"按区域划分格子",{"type":597,"tag":606,"props":49638,"children":49639},{},[49640],{"type":603,"value":49641},"该方法是把区域划分成多个格子，比如X坐标1到X坐标4为一个格子我们（暂时称之为A格子），坐标5到X坐标9为一个格子（暂时称之为B格子）。这样做的好处是，当你插入的坐标是2的时候，我们只需要遍历A格子里面的数据找到自己位置就可以了。",{"type":597,"tag":606,"props":49643,"children":49644},{},[49645],{"type":603,"value":49646},"综合以上三种方法，大家一眼就看出来了。是的，按区域划分格子的方式是目前最佳的方式。从时间复杂度等等所有方便都是这个最佳，但是这个方法也有一个很大的问题，用这样的方式插入是很快了，但查找范围内的坐标就变的很困难了。大家可以仔细考虑一下或者自己写一个DEMO。你马上会发现，当我知道我的位置的情况下，我该如何查找周围玩家呢，是的。这样的话十字链就没有什么用了。",{"type":597,"tag":606,"props":49648,"children":49649},{},[49650],{"type":603,"value":49651},"当然会有人说我在每个格子之间用链表进行连接就可以了，那么问题又来了。该如何连接，肯定有很复杂的代码才可以完成这样逻辑。就算是你能完成这个链表的连接，但这些逻辑会提升了时间复杂度。",{"type":597,"tag":3995,"props":49653,"children":49655},{"id":49654},"快慢针",[49656],{"type":603,"value":49654},{"type":597,"tag":606,"props":49658,"children":49659},{},[49660],{"type":603,"value":49661},"所谓快慢针就是，总有一个指针快于一个指针。",{"type":597,"tag":606,"props":49663,"children":49664},{},[49665],{"type":603,"value":49666},"实现方式是，插入的时候把链表分成多份、比如链表长度为10，快的指针每次移动4个，然后对比当前节点如果位置小于的话，把慢指针指向快指针的位置，快指针继续向后面4个格子移动，直到找到大于的节点为止，这时候慢指针开始向前移动一个一个的对比位置就可以了。如果一直没有找到大于的节点，那就表示要插入的位置是当前链表最后的位置。",{"type":597,"tag":606,"props":49668,"children":49669},{},[49670],{"type":603,"value":49671},"相信大家已经看明白了，是的。这样的情况下效率就很高了，唯一的问题就是这个时间复杂度不稳定。使用这个方式，查找周围玩家直接前后查找移动就可以了。效率也非常高。",{"type":597,"tag":606,"props":49673,"children":49674},{},[49675],{"type":603,"value":49676},"快慢针实现：",{"type":597,"tag":621,"props":49678,"children":49681},{"code":49679,"language":603,"meta":591,"className":49680},"if (First == null)\n{\n      node.Link.YNode = AddFirst(AoiPool.Instance.Fetch\u003CLinkedListNode\u003CAoiNode>>(node).Value);\n}\nelse\n{\n       var slowCursor = First;\n\n       var skip = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(Count) /\n                     Convert.ToDouble(_skipCount)));\n\n       if (Last.Value.Position.Y > node.Position.Y)\n       {\n            for (var i = 0; i \u003C _skipCount; i++)\n            {\n                 // 移动快指针\n\n                 var fastCursor = FastCursor(i * skip, skip);\n\n                 // 如果快指针的值小于插入的值，把快指针赋给慢指针，当做当前指针。\n\n                 if (fastCursor.Value.Position.Y \u003C= node.Position.Y)\n                 {\n                       slowCursor = fastCursor;\n\n                            continue;\n                 }\n\n                 // 慢指针移动到快指针位置\n\n                 while (slowCursor != fastCursor)\n                 {\n                      if (slowCursor == null) break;\n\n                      if (slowCursor.Value.Position.Y >= node.Position.Y)\n                      {\n                           node.Link.YNode = AddBefore(slowCursor,\n                                    AoiPool.Instance.Fetch\u003CLinkedListNode\u003CAoiNode>>(node).Value);\n\n                           return;\n                        }\n\n                       slowCursor = slowCursor.Next;\n\n                        }\n                    }\n                }\n\nif (node.Link.YNode == null)\n{\n       node.Link.YNode = AddLast(AoiPool.Instance.Fetch\u003CLinkedListNode\u003CAoiNode>>(node).Value);\n}\n",[29933],[49682],{"type":597,"tag":629,"props":49683,"children":49684},{"__ignoreMap":591},[49685],{"type":603,"value":49679},{"type":597,"tag":3995,"props":49687,"children":49689},{"id":49688},"实现方式",[49690],{"type":597,"tag":1080,"props":49691,"children":49692},{},[49693],{"type":603,"value":49688},{"type":597,"tag":1321,"props":49695,"children":49696},{},[49697],{"type":597,"tag":807,"props":49698,"children":49699},{},[49700],{"type":603,"value":49701},"Move（当角色移动后通知AOI）：",{"type":597,"tag":621,"props":49703,"children":49706},{"code":49704,"language":603,"meta":591,"className":49705},"#region 移动X轴\n\n            if (Math.Abs(node.Position.X - x) > 0)\n            {\n                if (x > node.Position.X)\n                {\n                    var cur = node.Link.XNode.Next;\n\n                    while (cur != null)\n                    {\n                        if (x \u003C cur.Value.Position.X)\n                        {\n                            _xLinks.Remove(node.Link.XNode);\n\n                            node.Position.X = x;\n                            \n                            node.Link.XNode = _xLinks.AddBefore(cur, node);\n\n                            break;\n                        }\n                        else if (cur.Next == null)\n                        {\n                            _xLinks.Remove(node.Link.XNode);\n                            \n                            node.Position.X = x;\n                            \n                            node.Link.XNode = _xLinks.AddAfter(cur, node);\n\n                            break;\n                        }\n\n                        cur = cur.Next;\n                    }\n                }\n                else\n                {\n                    var cur = node.Link.XNode.Previous;\n\n                    while (cur != null)\n                    {\n                        if (x > cur.Value.Position.X)\n                        {\n                            _xLinks.Remove(node.Link.XNode);\n                            \n                            node.Position.X = x;\n                            \n                            node.Link.XNode = _xLinks.AddBefore(cur, node);\n\n                            break;\n                        }\n                        else if (cur.Previous == null)\n                        {\n                            _xLinks.Remove(node.Link.XNode);\n                            \n                            node.Position.X = x;\n                            \n                            node.Link.XNode = _xLinks.AddAfter(cur, node);\n\n                            break;\n                        }\n\n                        cur = cur.Previous;\n                    }\n                }\n            }\n\n            #endregion\n\n            #region 移动Y轴\n\n            if (Math.Abs(node.Position.Y - y) > 0)\n            {\n                if (y > node.Position.Y)\n                {\n                    var cur = node.Link.YNode.Next;\n\n                    while (cur != null)\n                    {\n                        if (y \u003C cur.Value.Position.Y)\n                        {\n                            _yLinks.Remove(node.Link.YNode);\n                            \n                            node.Position.Y = y;\n                            \n                            node.Link.YNode = _yLinks.AddBefore(cur, node);\n\n                            break;\n                        }\n                        else if (cur.Next == null)\n                        {\n                            _yLinks.Remove(node.Link.YNode);\n                            \n                            node.Position.Y = y;\n                            \n                            node.Link.YNode = _yLinks.AddAfter(cur, node);\n\n                            break;\n                        }\n\n                        cur = cur.Next;\n                    }\n                }\n                else\n                {\n                    var cur = node.Link.YNode.Previous;\n\n                    while (cur != null)\n                    {\n                        if (y > cur.Value.Position.Y)\n                        {\n                            _yLinks.Remove(node.Link.YNode);\n                            \n                            node.Position.Y = y;\n                            \n                            node.Link.YNode = _yLinks.AddBefore(cur, node);\n\n                            break;\n                        }\n                        else if (cur.Previous == null)\n                        {\n                            _yLinks.Remove(node.Link.YNode);\n                            \n                            node.Position.Y = y;\n                            \n                            node.Link.YNode = _yLinks.AddAfter(cur, node);\n\n                            break;\n                        }\n\n                        cur = cur.Previous;\n                    }\n                }\n            }\n\n            \n            #end-region\n",[29933],[49707],{"type":597,"tag":629,"props":49708,"children":49709},{"__ignoreMap":591},[49710],{"type":603,"value":49704},{"type":597,"tag":1321,"props":49712,"children":49713},{},[49714],{"type":597,"tag":807,"props":49715,"children":49716},{},[49717],{"type":603,"value":49718},"查找周围（按照指定的范围查找自己周围玩家）：",{"type":597,"tag":621,"props":49720,"children":49723},{"code":49721,"language":603,"meta":591,"className":49722},"for (var i = 0; i \u003C 2; i++)\n            {\n                var cur = i == 0 ? node.Link.XNode.Next : node.Link.XNode.Previous;\n\n                while (cur != null)\n                {\n                    if (Math.Abs(Math.Abs(cur.Value.Position.X) - Math.Abs(node.Position.X)) > area.X)\n                    {\n                        break;\n                    }\n                    else if (Math.Abs(Math.Abs(cur.Value.Position.Y) - Math.Abs(node.Position.Y)) \u003C= area.Y)\n                    {\n                        if (Distance(node.Position, cur.Value.Position) \u003C= area.X)\n                        {\n                            if (!node.AoiInfo.MovesSet.Contains(cur.Value.Id)) node.AoiInfo.MovesSet.Add(cur.Value.Id);\n                        }\n                    }\n\n                    cur = i == 0 ? cur.Next : cur.Previous;\n                }\n            }\n\n            for (var i = 0; i \u003C 2; i++)\n            {\n               var cur = i == 0 ? node.Link.YNode.Next : node.Link.YNode.Previous;\n\n                while (cur != null)\n                {\n                    if (Math.Abs(Math.Abs(cur.Value.Position.Y) - Math.Abs(node.Position.Y)) > area.Y)\n                    {\n                        break;\n                    }\n                    else if (Math.Abs(Math.Abs(cur.Value.Position.X) - Math.Abs(node.Position.X)) \u003C= area.X)\n                    {\n                        if (Distance(node.Position, cur.Value.Position) \u003C= area.Y)\n                        {\n                            if (!node.AoiInfo.MovesSet.Contains(cur.Value.Id)) node.AoiInfo.MovesSet.Add(cur.Value.Id);\n                        }\n                    }\n\n                    cur = i == 0 ? cur.Next :cur.Previous;\n                }\n            }\n",[29933],[49724],{"type":597,"tag":629,"props":49725,"children":49726},{"__ignoreMap":591},[49727],{"type":603,"value":49721},{"type":597,"tag":598,"props":49729,"children":49731},{"id":49730},"优缺点",[49732],{"type":603,"value":49730},{"type":597,"tag":1321,"props":49734,"children":49735},{},[49736,49753],{"type":597,"tag":807,"props":49737,"children":49738},{},[49739,49740],{"type":603,"value":49197},{"type":597,"tag":1321,"props":49741,"children":49742},{},[49743,49748],{"type":597,"tag":807,"props":49744,"children":49745},{},[49746],{"type":603,"value":49747},"优点: cpu消耗小",{"type":597,"tag":807,"props":49749,"children":49750},{},[49751],{"type":603,"value":49752},"缺点: 内存开销大,内存消耗不仅和实体数有关,还和场景大小成正比",{"type":597,"tag":807,"props":49754,"children":49755},{},[49756,49758],{"type":603,"value":49757},"十字链表",{"type":597,"tag":1321,"props":49759,"children":49760},{},[49761,49766],{"type":597,"tag":807,"props":49762,"children":49763},{},[49764],{"type":603,"value":49765},"优点: 内存开销小,内存消耗仅和实体数有关,和场景大小无关",{"type":597,"tag":807,"props":49767,"children":49768},{},[49769],{"type":603,"value":49770},"缺点: cpu消耗高,每次移动都需要计算视野差,当实体在小区域堆积严重时效率更差",{"title":591,"searchDepth":787,"depth":787,"links":49772},[49773,49774,49775,49776,49781],{"id":48994,"depth":787,"text":48997},{"id":49020,"depth":787,"text":49023},{"id":49050,"depth":787,"text":49053},{"id":49068,"depth":787,"text":49068,"children":49777},[49778,49779,49780],{"id":49109,"depth":1530,"text":49112},{"id":49197,"depth":1530,"text":49197},{"id":49353,"depth":1530,"text":49353},{"id":49730,"depth":787,"text":49730},"content:dotnet:2020-02-07-aoi.md","dotnet/2020-02-07-aoi.md","2020-02-07",{"_path":74,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":73,"description":49786,"body":49787,"_type":791,"_id":50091,"_source":793,"_file":50092,"_extension":795,"date":50093},"应用场景负载均衡和分布式场景随着业务的扩展，流量的剧增，单体项目逐渐划分为分布式系统。对于经常使用的数据，我们可以使用Redis作为缓存机制，减少数据层的压力。因此，重构后的系统架构如下图所示：\n优化最简单的策略就是，把常用的数据保存到Redis中，为了实现高可用使用了3台Redis（没有设置集群，集群至少要6台）。每次Redis请求会随机发送到其中一台，但是这种策略会引发如下两个问题：同一份数据可能在多个Redis数据库，造成数据冗余某一份数据在其中一台Redis数据库已存在，但是再次访问Redis数据库，并没有命中数据已存在的库。无法保证对相同的key的所有访问都发送到相同的Redis中要",{"type":594,"children":49788,"toc":50083},[49789,49794,49809,49819,49824,49837,49849,49854,49859,49864,49870,49878,49883,49893,49905,49910,49920,49926,49931,49937,49942,49950,49955,49961,49966,49976,49981,49987,49992,49997,50006,50024,50029,50037,50062],{"type":597,"tag":857,"props":49790,"children":49792},{"id":49791},"应用场景",[49793],{"type":603,"value":49791},{"type":597,"tag":606,"props":49795,"children":49796},{},[49797,49802,49803],{"type":597,"tag":629,"props":49798,"children":49800},{"className":49799},[],[49801],{"type":603,"value":1443},{"type":603,"value":695},{"type":597,"tag":629,"props":49804,"children":49806},{"className":49805},[],[49807],{"type":603,"value":49808},"分布式场景",{"type":597,"tag":606,"props":49810,"children":49811},{},[49812,49814],{"type":603,"value":49813},"随着业务的扩展，流量的剧增，单体项目逐渐划分为分布式系统。对于经常使用的数据，我们可以使用Redis作为缓存机制，减少数据层的压力。因此，重构后的系统架构如下图所示：\n",{"type":597,"tag":719,"props":49815,"children":49818},{"alt":49816,"src":49817},"简单架构","/images/2020-02-06-Consistent_Hash/3560038521-5c37267165ddf_articlex.png",[],{"type":597,"tag":606,"props":49820,"children":49821},{},[49822],{"type":603,"value":49823},"优化最简单的策略就是，把常用的数据保存到Redis中，为了实现高可用使用了3台Redis（没有设置集群，集群至少要6台）。每次Redis请求会随机发送到其中一台，但是这种策略会引发如下两个问题：",{"type":597,"tag":1321,"props":49825,"children":49826},{},[49827,49832],{"type":597,"tag":807,"props":49828,"children":49829},{},[49830],{"type":603,"value":49831},"同一份数据可能在多个Redis数据库，造成数据冗余",{"type":597,"tag":807,"props":49833,"children":49834},{},[49835],{"type":603,"value":49836},"某一份数据在其中一台Redis数据库已存在，但是再次访问Redis数据库，并没有命中数据已存在的库。无法保证对相同的key的所有访问都发送到相同的Redis中",{"type":597,"tag":606,"props":49838,"children":49839},{},[49840,49842,49847],{"type":603,"value":49841},"要解决上述的问题，我们需要稍稍改变一些key存入Redis的规则：",{"type":597,"tag":1080,"props":49843,"children":49844},{},[49845],{"type":603,"value":49846},"使用hash算法",{"type":603,"value":49848},"\n例如，有三台Redis，对于每次的访问都可以通过计算hash来求得hash值。\n如公式 h=hash(key)%3，我们把Redis编号设置成0,1,2来保存对应hash计算出来的值，h的值等于Redis对应的编号。\n但是hash算法也会面临容错性和扩展性的问题。容错性是指当系统中的某个服务出现问题时，不能影响其他系统。扩展性是指当加入新的服务器后，整个系统能正确高效运行。",{"type":597,"tag":606,"props":49850,"children":49851},{},[49852],{"type":603,"value":49853},"现假设有一台Redis服务器宕机了，那么为了填补空缺，要将宕机的服务器从编号列表中移除，后面的服务器按顺序前移一位并将其编号值减一，此时每个key就要按h = Hash(key) % 2重新计算。",{"type":597,"tag":606,"props":49855,"children":49856},{},[49857],{"type":603,"value":49858},"同样，如果新增一台服务器，规则也同样需要重新计算，h = Hash(key) % 4。因此，系统中如果有服务器更变，会直接影响到Hash值，大量的key会重定向到其他服务器中，造成缓存命中率降低，而这种情况在分布式系统中是十分糟糕的。",{"type":597,"tag":606,"props":49860,"children":49861},{},[49862],{"type":603,"value":49863},"一个设计良好的分布式哈希方案应该具有良好的单调性，即服务节点的变更不会造成大量的哈希重定位。一致性哈希算法由此而生~",{"type":597,"tag":598,"props":49865,"children":49867},{"id":49866},"_2-一致性哈希算法",[49868],{"type":603,"value":49869},"2 一致性哈希算法",{"type":597,"tag":617,"props":49871,"children":49872},{},[49873],{"type":597,"tag":606,"props":49874,"children":49875},{},[49876],{"type":603,"value":49877},"一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中K是关键字的数量， n是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。",{"type":597,"tag":606,"props":49879,"children":49880},{},[49881],{"type":603,"value":49882},"简单的说，一致性哈希是将整个哈希值空间组织成一个虚拟的圆环，如假设哈希函数H的值空间为0-2^32-1（哈希值是32位无符号整形），整个哈希空间环如下：",{"type":597,"tag":606,"props":49884,"children":49885},{},[49886,49891],{"type":597,"tag":719,"props":49887,"children":49890},{"alt":49888,"src":49889},"哈希环","/images/2020-02-06-Consistent_Hash/1926833502-5c372671647ce_articlex.png",[],{"type":603,"value":49892},"\n整个空间按顺时针方向组织，0和2^32-1在零点中方向重合。",{"type":597,"tag":606,"props":49894,"children":49895},{},[49896,49898,49903],{"type":603,"value":49897},"接下来，把服务器按照IP或主机名作为关键字进行哈希，这样就能确定其在哈希环的位置。\n",{"type":597,"tag":719,"props":49899,"children":49902},{"alt":49900,"src":49901},"哈希环2","/images/2020-02-06-Consistent_Hash/1992706399-5c37267165131_articlex.png",[],{"type":603,"value":49904},"\n然后，我们就可以使用哈希函数H计算值为key的数据在哈希环的具体位置h，根据h确定在环中的具体位置，从此位置沿顺时针滚动，遇到的第一台服务器就是其应该定位到的服务器。",{"type":597,"tag":606,"props":49906,"children":49907},{},[49908],{"type":603,"value":49909},"例如我们有A、B、C、D四个数据对象，经过哈希计算后，在环空间上的位置如下：",{"type":597,"tag":606,"props":49911,"children":49912},{},[49913,49918],{"type":597,"tag":719,"props":49914,"children":49917},{"alt":49915,"src":49916},"哈希环3","/images/2020-02-06-Consistent_Hash/2362548025-5c3726711599a_articlex.png",[],{"type":603,"value":49919},"\n根据一致性哈希算法，数据A会被定为到Server 1上，数据B被定为到Server 2上，而C、D被定为到Server 3上。",{"type":597,"tag":598,"props":49921,"children":49923},{"id":49922},"_3-容错性和扩展性",[49924],{"type":603,"value":49925},"3 容错性和扩展性",{"type":597,"tag":606,"props":49927,"children":49928},{},[49929],{"type":603,"value":49930},"那么使用一致性哈希算法的容错性和扩展性如何呢？",{"type":597,"tag":1023,"props":49932,"children":49934},{"id":49933},"_31-容错性",[49935],{"type":603,"value":49936},"3.1 容错性",{"type":597,"tag":606,"props":49938,"children":49939},{},[49940],{"type":603,"value":49941},"假如RedisService2宕机了，那么会怎样呢？",{"type":597,"tag":606,"props":49943,"children":49944},{},[49945],{"type":597,"tag":719,"props":49946,"children":49949},{"alt":49947,"src":49948},"Redis2宕机","/images/2020-02-06-Consistent_Hash/2142503411-5c37267117f14_articlex.png",[],{"type":597,"tag":606,"props":49951,"children":49952},{},[49953],{"type":603,"value":49954},"那么，数据B对应的节点保存到RedisService3中。因此，其中一台宕机后，干扰的只有前面的数据（原数据被保存到顺时针的下一个服务器），而不会干扰到其他的数据。",{"type":597,"tag":1023,"props":49956,"children":49958},{"id":49957},"_32-扩展性",[49959],{"type":603,"value":49960},"3.2 扩展性",{"type":597,"tag":606,"props":49962,"children":49963},{},[49964],{"type":603,"value":49965},"下面考虑另一种情况，假如增加一台服务器Redis4，具体位置如下图所示：",{"type":597,"tag":606,"props":49967,"children":49968},{},[49969,49974],{"type":597,"tag":719,"props":49970,"children":49973},{"alt":49971,"src":49972},"RedisServicee4","/images/2020-02-06-Consistent_Hash/1713186145-5c37267126a94_articlex.png",[],{"type":603,"value":49975},"\n原本数据C是保存到Redis3中，但由于增加了Redis4，数据C被保存到Redis4中。干扰的也只有Redis3而已，其他数据不会受到影响。",{"type":597,"tag":606,"props":49977,"children":49978},{},[49979],{"type":603,"value":49980},"因此，一致性哈希算法对于节点的增减都只需重定位换空间的一小部分即可，具有较好的容错性和可扩展性",{"type":597,"tag":598,"props":49982,"children":49984},{"id":49983},"_4-虚拟节点",[49985],{"type":603,"value":49986},"4 虚拟节点",{"type":597,"tag":606,"props":49988,"children":49989},{},[49990],{"type":603,"value":49991},"前面部分都是讲述到Redis节点较多和节点分布较为均衡的情况，如果节点较少就会出现节点分布不均衡造成数据倾斜问题。",{"type":597,"tag":606,"props":49993,"children":49994},{},[49995],{"type":603,"value":49996},"例如，我们的的系统有两台Redis，分布的环位置如下图所示：",{"type":597,"tag":606,"props":49998,"children":49999},{},[50000,50004],{"type":597,"tag":719,"props":50001,"children":50003},{"alt":49888,"src":50002},"/images/2020-02-06-Consistent_Hash/2099070812-5c37267114872_articlex.png",[],{"type":603,"value":50005},"\n这会产生一种情况，Redis4的hash范围比Redis3的hash范围大，导致数据大部分都存储在Redis4中，数据存储不平衡。",{"type":597,"tag":606,"props":50007,"children":50008},{},[50009,50011,50016,50018,50023],{"type":603,"value":50010},"为了解决这种数据存储不平衡的问题，一致性哈希算法引入了",{"type":597,"tag":1080,"props":50012,"children":50013},{},[50014],{"type":603,"value":50015},"虚拟节点机制",{"type":603,"value":50017},"，即对每个节点计算多个哈希值，每个计算结果位置都放置在对应节点中，这些节点",{"type":597,"tag":1080,"props":50019,"children":50020},{},[50021],{"type":603,"value":50022},"称为虚拟节点",{"type":603,"value":758},{"type":597,"tag":606,"props":50025,"children":50026},{},[50027],{"type":603,"value":50028},"具体做法可以在服务器IP或主机名的后面增加编号来实现，例如上面的情况，可以为每个服务节点增加三个虚拟节点，于是可以分为 RedisService1#1、 RedisService1#2、 RedisService1#3、 RedisService2#1、 RedisService2#2、 RedisService2#3，具体位置如下图所示：",{"type":597,"tag":606,"props":50030,"children":50031},{},[50032],{"type":597,"tag":719,"props":50033,"children":50036},{"alt":50034,"src":50035},"虚拟节点","/images/2020-02-06-Consistent_Hash/4164216256-5c3726711ca88_articlex.png",[],{"type":597,"tag":606,"props":50038,"children":50039},{},[50040,50042,50047,50049,50054,50056,50061],{"type":603,"value":50041},"对于数据定位的hash算法仍然不变，只是增加了虚拟节点到实际节点的映射。例如，数据C保存到虚拟节点Redis1#2，实际上数据保存到Redis1中。这样，就能解决服务节点少时数据不平均的问题。在实际应用中，通常将虚拟节点数设置为",{"type":597,"tag":1080,"props":50043,"children":50044},{},[50045],{"type":603,"value":50046},"32甚至更大",{"type":603,"value":50048},"，因此即使",{"type":597,"tag":1080,"props":50050,"children":50051},{},[50052],{"type":603,"value":50053},"很少的服务节点",{"type":603,"value":50055},"也能做到相对",{"type":597,"tag":1080,"props":50057,"children":50058},{},[50059],{"type":603,"value":50060},"均匀的数据分布",{"type":603,"value":758},{"type":597,"tag":1321,"props":50063,"children":50064},{},[50065,50074],{"type":597,"tag":807,"props":50066,"children":50067},{},[50068],{"type":597,"tag":886,"props":50069,"children":50072},{"href":50070,"rel":50071},"https://github.com/tg123/ConsistentSharp",[890],[50073],{"type":603,"value":50070},{"type":597,"tag":807,"props":50075,"children":50076},{},[50077],{"type":597,"tag":886,"props":50078,"children":50081},{"href":50079,"rel":50080},"https://en.wikipedia.org/wiki/Consistent_hashing",[890],[50082],{"type":603,"value":50079},{"title":591,"searchDepth":787,"depth":787,"links":50084},[50085,50086,50090],{"id":49866,"depth":787,"text":49869},{"id":49922,"depth":787,"text":49925,"children":50087},[50088,50089],{"id":49933,"depth":1530,"text":49936},{"id":49957,"depth":1530,"text":49960},{"id":49983,"depth":787,"text":49986},"content:dotnet:2020-02-06-Consistent_Hash.md","dotnet/2020-02-06-Consistent_Hash.md","2020-02-06",{"_path":294,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":293,"description":50095,"body":50096,"_type":791,"_id":50164,"_source":793,"_file":50165,"_extension":795,"date":50093},"在一些特定情况下，单元格中会出现文本形式存储的数字，例如从其他地方复制粘贴过来，或者是较长的数字想要完全显示，设置为文本格式。如果是这样的单元格，在左上角就会有一个绿色小标记。",{"type":594,"children":50097,"toc":50162},[50098,50102,50109,50114,50121,50126,50133,50138,50145,50150,50157],{"type":597,"tag":606,"props":50099,"children":50100},{},[50101],{"type":603,"value":50095},{"type":597,"tag":606,"props":50103,"children":50104},{},[50105],{"type":597,"tag":719,"props":50106,"children":50108},{"alt":719,"src":50107},"/images/2020-02-06-excel/v2-7f8eb44c9239a43b4835c12ba326c2d9_720w.jpg",[],{"type":597,"tag":606,"props":50110,"children":50111},{},[50112],{"type":603,"value":50113},"针对不同需求的单元格，进行数据处理的方式也不同。例如有些数字，在后面是需要进行公式计算的，就可以将单元格从文本转化为普通的数字形式。选中需要修改的单元格，如果在一个区域的话可以选中全部的，然后点击右上角浮动的感叹号，在菜单里面选择“转换为数字”。",{"type":597,"tag":606,"props":50115,"children":50116},{},[50117],{"type":597,"tag":719,"props":50118,"children":50120},{"alt":719,"src":50119},"/images/2020-02-06-excel/v2-b825acebee4b0d575dafcbbb9d85079e_720w.jpg",[],{"type":597,"tag":606,"props":50122,"children":50123},{},[50124],{"type":603,"value":50125},"这样一来，单元格格式就会变回常规，绿色小三角也会自动消失。",{"type":597,"tag":606,"props":50127,"children":50128},{},[50129],{"type":597,"tag":719,"props":50130,"children":50132},{"alt":719,"src":50131},"/images/2020-02-06-excel/v2-6be2034cecf7128cfdd94adfe2b89d21_720w.jpg",[],{"type":597,"tag":606,"props":50134,"children":50135},{},[50136],{"type":603,"value":50137},"有时候数字较长，例如手机号，也不需要进行公式运算。但是有一个绿色标志，希望去掉，也是可以进行操作的。",{"type":597,"tag":606,"props":50139,"children":50140},{},[50141],{"type":597,"tag":719,"props":50142,"children":50144},{"alt":719,"src":50143},"/images/2020-02-06-excel/v2-2b7e7de81faec0a733820a239dbff044_720w.jpg",[],{"type":597,"tag":606,"props":50146,"children":50147},{},[50148],{"type":603,"value":50149},"在菜单中选择“忽略错误”即可，这个绿色小三角就会消失了。",{"type":597,"tag":606,"props":50151,"children":50152},{},[50153],{"type":597,"tag":719,"props":50154,"children":50156},{"alt":719,"src":50155},"/images/2020-02-06-excel/v2-2d84b687d6c420607a09f8dd93146b62_720w.jpg",[],{"type":597,"tag":606,"props":50158,"children":50159},{},[50160],{"type":603,"value":50161},"但要注意的是，双击编辑过这个单元格以后，还是会出现绿色小三角标记的错误提示的。",{"title":591,"searchDepth":787,"depth":787,"links":50163},[],"content:tool:2020-02-06-excel-text-number.md","tool/2020-02-06-excel-text-number.md",{"_path":291,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":290,"description":50167,"body":50168,"_type":791,"_id":53739,"_source":793,"_file":53740,"_extension":795,"date":53741},"中英对照的网络游戏术语AC – Armor Class，盔甲等级、级别Account – 账号，与密码Password相对Add – 一只玩家加入到组队中，如果请求别人组队，可说Add me pls.AOE – Area Effect Damage，区域作用魔法，指的是一个可以伤害一个区域中的一群怪物的魔法，即所谓的群攻，现并非魔攻专用AE – Area Effect，区域作用伤害AFK – Away from Keyboard，暂时离开(键盘)，意味着玩家暂时不再操控游戏角色，通知其他玩家注意Aggro – 指一些敌对、主动攻击的怪物，当角色接近它时，它会试图攻击角色，这种行为成为Aggro",{"type":594,"children":50169,"toc":53737},[50170,50175,50180,50185,50190,50195,50200,50205,50210,50215,50220,50225,50230,50235,50240,50245,50250,50255,50260,50265,50270,50275,50280,50285,50290,50295,50300,50305,50310,50315,50320,50325,50330,50335,50340,50345,50350,50355,50360,50365,50370,50375,50380,50385,50390,50395,50400,50405,50410,50415,50420,50425,50430,50435,50440,50445,50450,50455,50460,50465,50470,50475,50480,50485,50490,50495,50500,50505,50510,50515,50520,50525,50530,50535,50540,50545,50550,50555,50560,50565,50570,50575,50580,50585,50590,50595,50600,50605,50610,50615,50620,50625,50630,50635,50640,50645,50650,50655,50660,50665,50670,50675,50680,50685,50690,50695,50700,50705,50710,50715,50720,50725,50730,50735,50740,50745,50750,50755,50760,50765,50770,50775,50780,50785,50790,50795,50800,50805,50810,50815,50820,50825,50830,50835,50840,50845,50850,50855,50860,50865,50870,50875,50880,50885,50890,50895,50900,50905,50910,50915,50920,50925,50930,50935,50940,50945,50950,50955,50960,50965,50970,50975,50980,50985,50990,50995,51000,51005,51010,51015,51020,51025,51030,51035,51040,51045,51050,51055,51060,51065,51070,51075,51080,51085,51090,51095,51100,51105,51110,51115,51120,51125,51130,51135,51140,51145,51150,51155,51160,51165,51170,51175,51180,51185,51190,51195,51200,51205,51210,51215,51220,51225,51230,51235,51240,51245,51250,51255,51260,51265,51270,51275,51280,51285,51290,51295,51300,51305,51310,51315,51320,51332,51337,51342,51347,51352,51357,51362,51367,51372,51377,51382,51387,51392,51397,51402,51407,51412,51417,51422,51427,51432,51437,51442,51447,51452,51457,51462,51467,51472,51477,51482,51487,51492,51497,51502,51507,51512,51517,51522,51527,51532,51537,51542,51547,51552,51557,51562,51567,51572,51577,51582,51587,51592,51597,51602,51607,51612,51617,51622,51627,51632,51637,51642,51647,51652,51657,51662,51667,51672,51677,51682,51687,51692,51697,51702,51707,51712,51717,51722,51727,51732,51737,51742,51747,51752,51757,51762,51767,51772,51777,51782,51787,51792,51797,51802,51807,51812,51817,51822,51827,51832,51837,51842,51847,51852,51857,51862,51867,51872,51877,51882,51887,51892,51897,51902,51907,51912,51917,51922,51927,51932,51937,51942,51947,51952,51957,51962,51967,51972,51977,51982,51987,51992,51997,52002,52007,52012,52017,52022,52027,52032,52037,52042,52047,52052,52057,52062,52067,52072,52077,52082,52087,52092,52097,52102,52107,52112,52117,52122,52127,52132,52137,52142,52147,52152,52157,52162,52167,52172,52177,52182,52187,52192,52197,52202,52207,52212,52217,52222,52227,52232,52237,52242,52247,52252,52257,52262,52267,52272,52277,52282,52287,52292,52297,52302,52307,52312,52317,52322,52327,52332,52337,52342,52347,52352,52357,52362,52367,52372,52377,52382,52387,52392,52397,52402,52407,52412,52417,52422,52427,52432,52437,52442,52447,52452,52457,52462,52467,52472,52477,52482,52487,52492,52497,52502,52507,52512,52517,52522,52527,52532,52537,52542,52547,52552,52557,52562,52567,52572,52577,52582,52587,52592,52597,52602,52607,52612,52617,52622,52627,52632,52637,52642,52647,52652,52657,52662,52667,52672,52677,52682,52687,52692,52697,52702,52707,52712,52717,52722,52727,52732,52737,52742,52747,52752,52757,52762,52767,52772,52777,52782,52787,52792,52797,52802,52807,52812,52817,52822,52827,52832,52837,52842,52847,52852,52857,52862,52867,52872,52877,52882,52887,52892,52897,52902,52907,52912,52917,52922,52927,52932,52937,52942,52947,52952,52957,52962,52967,52972,52977,52982,52987,52992,52997,53002,53007,53012,53017,53022,53027,53032,53037,53042,53047,53052,53057,53061,53066,53071,53076,53081,53086,53091,53096,53101,53106,53111,53116,53121,53126,53131,53136,53141,53146,53151,53156,53161,53166,53171,53176,53181,53186,53191,53196,53201,53206,53211,53216,53221,53226,53231,53236,53241,53246,53251,53256,53261,53266,53271,53276,53281,53286,53291,53296,53301,53306,53311,53316,53321,53326,53331,53336,53341,53346,53351,53356,53361,53366,53371,53376,53381,53386,53391,53396,53401,53406,53411,53416,53421,53426,53431,53436,53441,53446,53451,53456,53461,53466,53471,53476,53481,53486,53491,53496,53500,53505,53509,53514,53519,53523,53528,53533,53538,53543,53548,53553,53558,53563,53568,53573,53578,53583,53588,53593,53598,53603,53608,53613,53618,53623,53628,53633,53638,53643,53648,53653,53658,53663,53668,53673,53678,53683,53688,53693,53698,53703,53708,53713,53718,53723,53728,53732],{"type":597,"tag":606,"props":50171,"children":50172},{},[50173],{"type":603,"value":50174},"中英对照的网络游戏术语",{"type":597,"tag":606,"props":50176,"children":50177},{},[50178],{"type":603,"value":50179},"AC – Armor Class，盔甲等级、级别",{"type":597,"tag":606,"props":50181,"children":50182},{},[50183],{"type":603,"value":50184},"Account – 账号，与密码Password相对",{"type":597,"tag":606,"props":50186,"children":50187},{},[50188],{"type":603,"value":50189},"Add – 一只玩家加入到组队中，如果请求别人组队，可说Add me pls.",{"type":597,"tag":606,"props":50191,"children":50192},{},[50193],{"type":603,"value":50194},"AOE – Area Effect Damage，区域作用魔法，指的是一个可以伤害一个区域中的一群怪物的魔法，即所谓的群攻，现并非魔攻专用",{"type":597,"tag":606,"props":50196,"children":50197},{},[50198],{"type":603,"value":50199},"AE – Area Effect，区域作用伤害",{"type":597,"tag":606,"props":50201,"children":50202},{},[50203],{"type":603,"value":50204},"AFK – Away from Keyboard，暂时离开(键盘)，意味着玩家暂时不再操控游戏角色，通知其他玩家注意",{"type":597,"tag":606,"props":50206,"children":50207},{},[50208],{"type":603,"value":50209},"Aggro – 指一些敌对、主动攻击的怪物，当角色接近它时，它会试图攻击角色，这种行为成为Aggro",{"type":597,"tag":606,"props":50211,"children":50212},{},[50213],{"type":603,"value":50214},"Aggro Radius – 怪物周围的区域，进入它意味着怪物会“苏醒”并主动攻击你",{"type":597,"tag":606,"props":50216,"children":50217},{},[50218],{"type":603,"value":50219},"Agi – Agility的缩写，意为敏捷，多指代游戏中角色的属性",{"type":597,"tag":606,"props":50221,"children":50222},{},[50223],{"type":603,"value":50224},"Avatar – 你的角色，互联网中常用来指头像，如论坛中的会员头像等",{"type":597,"tag":606,"props":50226,"children":50227},{},[50228],{"type":603,"value":50229},"Beta – 游戏的测试",{"type":597,"tag":606,"props":50231,"children":50232},{},[50233],{"type":603,"value":50234},"Bind(Bound) – 重生复活点",{"type":597,"tag":606,"props":50236,"children":50237},{},[50238],{"type":603,"value":50239},"Boss – 游戏中的终极怪物，通常各个级别段都有不同的Boss，中文里可以称为大王，老头儿等",{"type":597,"tag":606,"props":50241,"children":50242},{},[50243],{"type":603,"value":50244},"Buff – 主要指辅助类角色为别人施加的有益状态，通俗的说法就是“加状态”，典型的如增加防御、回血速度、躲避率等等",{"type":597,"tag":606,"props":50246,"children":50247},{},[50248],{"type":603,"value":50249},"Bug – 游戏中的漏洞",{"type":597,"tag":606,"props":50251,"children":50252},{},[50253],{"type":603,"value":50254},"Carebear – 喜欢帮助别人攻击怪物的玩家",{"type":597,"tag":606,"props":50256,"children":50257},{},[50258],{"type":603,"value":50259},"Caster – 不能抗怪的角色，如法师",{"type":597,"tag":606,"props":50261,"children":50262},{},[50263],{"type":603,"value":50264},"CBT – Closed Beta Test 游戏封闭测试",{"type":597,"tag":606,"props":50266,"children":50267},{},[50268],{"type":603,"value":50269},"CD – Cool Down, 多指技能的冷却时间",{"type":597,"tag":606,"props":50271,"children":50272},{},[50273],{"type":603,"value":50274},"Character – 游戏中的角色",{"type":597,"tag":606,"props":50276,"children":50277},{},[50278],{"type":603,"value":50279},"Cheat – 游戏中的作弊，也只游戏秘笈",{"type":597,"tag":606,"props":50281,"children":50282},{},[50283],{"type":603,"value":50284},"Cheese – 利用游戏的不平衡之处牟利",{"type":597,"tag":606,"props":50286,"children":50287},{},[50288],{"type":603,"value":50289},"Combat Pets – 被玩家控制的NPC，在战斗中帮助玩家及其队友，直译也有宠物的意思",{"type":597,"tag":606,"props":50291,"children":50292},{},[50293],{"type":603,"value":50294},"CR – Corpse Retrevial的缩写，指取回尸体，这要看具体游戏的设置而论，很多游戏没有这个设置",{"type":597,"tag":606,"props":50296,"children":50297},{},[50298],{"type":603,"value":50299},"Creep – 怪物",{"type":597,"tag":606,"props":50301,"children":50302},{},[50303],{"type":603,"value":50304},"Creep Jacking – 当其他玩家与怪物战斗的时候趁机攻击该玩家",{"type":597,"tag":606,"props":50306,"children":50307},{},[50308],{"type":603,"value":50309},"Critters – 面对玩家攻击不会反击的怪物",{"type":597,"tag":606,"props":50311,"children":50312},{},[50313],{"type":603,"value":50314},"DD – Direct Damage，直接伤害，非持续性伤害作用",{"type":597,"tag":606,"props":50316,"children":50317},{},[50318],{"type":603,"value":50319},"DBUFF – De-Buff的简写，对怪物或敌对玩家施放的具有负面状态，如是对方减速、降低防御、降低准确率等等",{"type":597,"tag":606,"props":50321,"children":50322},{},[50323],{"type":603,"value":50324},"Defense – 防御，这是通俗的叫法，具体还有物防、魔防等分类",{"type":597,"tag":606,"props":50326,"children":50327},{},[50328],{"type":603,"value":50329},"DKP – Dragon Kill Point的缩写，直译是屠龙点数，一种对玩家贡献的衡量标准",{"type":597,"tag":606,"props":50331,"children":50332},{},[50333],{"type":603,"value":50334},"DMG – Damage的缩写，指伤害",{"type":597,"tag":606,"props":50336,"children":50337},{},[50338],{"type":603,"value":50339},"DOT – Damage over time，在一段时间内持续对目标造成伤害，持续伤害",{"type":597,"tag":606,"props":50341,"children":50342},{},[50343],{"type":603,"value":50344},"DPS – Damage per second的缩写，每秒伤害",{"type":597,"tag":606,"props":50346,"children":50347},{},[50348],{"type":603,"value":50349},"Dungeon – 指地宫、地下城等，多指游戏中难度很大的地形，也是Boss的栖居地",{"type":597,"tag":606,"props":50351,"children":50352},{},[50353],{"type":603,"value":50354},"FH – Full Health的简写，指生命值全满",{"type":597,"tag":606,"props":50356,"children":50357},{},[50358],{"type":603,"value":50359},"FM – Full Mana的简写，指法力全满",{"type":597,"tag":606,"props":50361,"children":50362},{},[50363],{"type":603,"value":50364},"Forge – 要塞，可以是游戏中的场景、地图",{"type":597,"tag":606,"props":50366,"children":50367},{},[50368],{"type":603,"value":50369},"FS – Full Sport的缩写，指完全负责辅助的角色；汉语里可以做为法师的简称，注意区别",{"type":597,"tag":606,"props":50371,"children":50372},{},[50373],{"type":603,"value":50374},"Gank – PvP：当其他玩家与怪物战斗时趁机攻击该玩家，与Creep Jacking 类似",{"type":597,"tag":606,"props":50376,"children":50377},{},[50378],{"type":603,"value":50379},"Gate(gateway) – 游戏中的传送，与Portal相似",{"type":597,"tag":606,"props":50381,"children":50382},{},[50383],{"type":603,"value":50384},"GM – Game Master的简写，指游戏管理员，服务玩家，维护游戏内正常运行的人",{"type":597,"tag":606,"props":50386,"children":50387},{},[50388],{"type":603,"value":50389},"Griefer – 试图骚扰或激怒其他玩家的人",{"type":597,"tag":606,"props":50391,"children":50392},{},[50393],{"type":603,"value":50394},"Grinding – 长时间在一地点猎怪，多是为了升级或取得特殊游戏道具",{"type":597,"tag":606,"props":50396,"children":50397},{},[50398],{"type":603,"value":50399},"Guild – 公会、团体",{"type":597,"tag":606,"props":50401,"children":50402},{},[50403],{"type":603,"value":50404},"Heart – 心脉、血脉，多指游戏角色的属性",{"type":597,"tag":606,"props":50406,"children":50407},{},[50408],{"type":603,"value":50409},"HOT – Health Over Time的缩写，指持续性治疗效果",{"type":597,"tag":606,"props":50411,"children":50412},{},[50413],{"type":603,"value":50414},"HP – 作为Health point的简写时，指生命值；做为Hit points的简写时指伤害值，其中前者较常用",{"type":597,"tag":606,"props":50416,"children":50417},{},[50418],{"type":603,"value":50419},"ID – Identification的简写，网络中表示各种账号，表示账号时，与account意义相同；通常指身份证、证件",{"type":597,"tag":606,"props":50421,"children":50422},{},[50423],{"type":603,"value":50424},"INC – Incoming的简写，指引怪的人对其他玩家的警示",{"type":597,"tag":606,"props":50426,"children":50427},{},[50428],{"type":603,"value":50429},"Instancing – 游戏中的副本，现在很多网游都引入了这一玩法",{"type":597,"tag":606,"props":50431,"children":50432},{},[50433],{"type":603,"value":50434},"INT – Intelligence的简写，指智力，多指代游戏中角色的属性",{"type":597,"tag":606,"props":50436,"children":50437},{},[50438],{"type":603,"value":50439},"Item – 泛指游戏内的道具",{"type":597,"tag":606,"props":50441,"children":50442},{},[50443],{"type":603,"value":50444},"Kiting – 玩家保持在敌人战斗范围以外的一种战术，从敌人身边跑开，同时对其造成伤害",{"type":597,"tag":606,"props":50446,"children":50447},{},[50448],{"type":603,"value":50449},"KO – Knock Out的简写，与人挑战时击败对方",{"type":597,"tag":606,"props":50451,"children":50452},{},[50453],{"type":603,"value":50454},"KOS – Killed on Sight的简写，多指游戏中的设置，游戏NPC对敌对阵营玩家的攻击行为",{"type":597,"tag":606,"props":50456,"children":50457},{},[50458],{"type":603,"value":50459},"KS – Kill Steal的简写，直译是偷杀，试图杀死另一个人正在对付的怪物，以获取经验(主要目的)、道具(这种情况不多)",{"type":597,"tag":606,"props":50461,"children":50462},{},[50463],{"type":603,"value":50464},"Lag – 延时，就是我们平常说的卡，当你卡了，你可以说Laaaaaaaaaag",{"type":597,"tag":606,"props":50466,"children":50467},{},[50468],{"type":603,"value":50469},"LFG – Looking for a group的简写，寻找队伍以求加入",{"type":597,"tag":606,"props":50471,"children":50472},{},[50473],{"type":603,"value":50474},"LFM – Looking for more的简写，找寻更多的人组队",{"type":597,"tag":606,"props":50476,"children":50477},{},[50478],{"type":603,"value":50479},"LOL – Lots of Laugh/Laughing Out Loud的简写，指大笑，很常用的聊天词汇，相当于汉语中的”呵呵”、”哈哈”等，ROFL(笑到打滚)此不常用",{"type":597,"tag":606,"props":50481,"children":50482},{},[50483],{"type":603,"value":50484},"LOM – Low on Mana的简写，法力不足",{"type":597,"tag":606,"props":50486,"children":50487},{},[50488],{"type":603,"value":50489},"Login – 与Logon, Log-in意义相同，表示登入账号的意思",{"type":597,"tag":606,"props":50491,"children":50492},{},[50493],{"type":603,"value":50494},"LOS – Line of Sight的简写，视线",{"type":597,"tag":606,"props":50496,"children":50497},{},[50498],{"type":603,"value":50499},"LOOT – 从被杀死的怪物或宝箱里拿取游戏道具、战利品等",{"type":597,"tag":606,"props":50501,"children":50502},{},[50503],{"type":603,"value":50504},"Lure – 指引怪，3D游戏中常用，组队杀怪时，有玩家负责将怪引向团队，然后用群攻技能集体杀怪",{"type":597,"tag":606,"props":50506,"children":50507},{},[50508],{"type":603,"value":50509},"LVL – Level的简写，游戏角色等级",{"type":597,"tag":606,"props":50511,"children":50512},{},[50513],{"type":603,"value":50514},"Maintenance – 维护，一般指游戏停机维护",{"type":597,"tag":606,"props":50516,"children":50517},{},[50518],{"type":603,"value":50519},"Mana – 魔法，通俗的称呼是蓝",{"type":597,"tag":606,"props":50521,"children":50522},{},[50523],{"type":603,"value":50524},"Map – 地图，游戏内的场景，也可用 Zone 表示地图",{"type":597,"tag":606,"props":50526,"children":50527},{},[50528],{"type":603,"value":50529},"Mental – 意念，多指代游戏角色的属性，与下面的Spirit有些类似",{"type":597,"tag":606,"props":50531,"children":50532},{},[50533],{"type":603,"value":50534},"Mez – Mesmerize的缩写，指催眠等状态是玩家暂时失去对角色的控制",{"type":597,"tag":606,"props":50536,"children":50537},{},[50538],{"type":603,"value":50539},"MMO – Massively Multiplayer Online，大型多人在线",{"type":597,"tag":606,"props":50541,"children":50542},{},[50543],{"type":603,"value":50544},"MMOG – Massively Multiplayer Online Game，大型多人在线游戏",{"type":597,"tag":606,"props":50546,"children":50547},{},[50548],{"type":603,"value":50549},"MMORPG – Massive Multiplayer Online Role Playing Game，大型多人在线角色扮演游戏",{"type":597,"tag":606,"props":50551,"children":50552},{},[50553],{"type":603,"value":50554},"MOB – 指游戏中的怪物，任何怪物都可叫MOB，或游戏中所有由电脑控制的角色，第二种用法不常见",{"type":597,"tag":606,"props":50556,"children":50557},{},[50558],{"type":603,"value":50559},"MP – Magic Point魔法值，是对魔法的通俗称呼，正式的叫法应该是Mana",{"type":597,"tag":606,"props":50561,"children":50562},{},[50563],{"type":603,"value":50564},"MT – Main Tank的缩写，WOW中的主力抗怪角色，其它游戏中可以没有这样的描述",{"type":597,"tag":606,"props":50566,"children":50567},{},[50568],{"type":603,"value":50569},"Muscle – 肌肉，多指游戏角色的属性",{"type":597,"tag":606,"props":50571,"children":50572},{},[50573],{"type":603,"value":50574},"Nerf – 消弱",{"type":597,"tag":606,"props":50576,"children":50577},{},[50578],{"type":603,"value":50579},"Nerve – 神经，多指游戏角色的属性",{"type":597,"tag":606,"props":50581,"children":50582},{},[50583],{"type":603,"value":50584},"Newbie – 菜鸟，形容新玩家，有时也指那些操作不熟练、技术不太好的玩家",{"type":597,"tag":606,"props":50586,"children":50587},{},[50588],{"type":603,"value":50589},"Newb – 新人的简称，同上",{"type":597,"tag":606,"props":50591,"children":50592},{},[50593],{"type":603,"value":50594},"Ninja – 没有经过相关玩家允许或趁别人没注意而拿走战利品",{"type":597,"tag":606,"props":50596,"children":50597},{},[50598],{"type":603,"value":50599},"N00b – 一种用来称呼新人的不礼貌的说法",{"type":597,"tag":606,"props":50601,"children":50602},{},[50603],{"type":603,"value":50604},"NPC – Non-Player-Controlled Character，非玩家控制的角色，纯粹的电脑角色，由游戏控制",{"type":597,"tag":606,"props":50606,"children":50607},{},[50608],{"type":603,"value":50609},"OBT – Open Beta Test 游戏公开测试",{"type":597,"tag":606,"props":50611,"children":50612},{},[50613],{"type":603,"value":50614},"OOM – Out of Mana的简写，法力耗尽，多在组队中提醒队员注意",{"type":597,"tag":606,"props":50616,"children":50617},{},[50618],{"type":603,"value":50619},"ORZ – 一个人跪地的无语姿势，象形，表示钦佩的感叹",{"type":597,"tag":606,"props":50621,"children":50622},{},[50623],{"type":603,"value":50624},"OT – Over Taunt的缩写，别人的翻译是仇恨失控，怪物对玩家角色的仇恨，多用于WOW中",{"type":597,"tag":606,"props":50626,"children":50627},{},[50628],{"type":603,"value":50629},"Party – 组队，与Team相近",{"type":597,"tag":606,"props":50631,"children":50632},{},[50633],{"type":603,"value":50634},"Password – 泛指密码",{"type":597,"tag":606,"props":50636,"children":50637},{},[50638],{"type":603,"value":50639},"Patch – 补丁",{"type":597,"tag":606,"props":50641,"children":50642},{},[50643],{"type":603,"value":50644},"PC – Player controlled character，玩家控制的角色，与上面的NPC是相对的；网络中PC也很常见，指个人电脑",{"type":597,"tag":606,"props":50646,"children":50647},{},[50648],{"type":603,"value":50649},"Pet – 被玩家控制的非玩家生物，如宠物、召唤物等",{"type":597,"tag":606,"props":50651,"children":50652},{},[50653],{"type":603,"value":50654},"PK – Player Kill或Player Killer，玩家在未经另一个玩家同意的情况下攻击并试图杀死他",{"type":597,"tag":606,"props":50656,"children":50657},{},[50658],{"type":603,"value":50659},"Player – 玩家，操作游戏中角色的人",{"type":597,"tag":606,"props":50661,"children":50662},{},[50663],{"type":603,"value":50664},"PM – Personal Message的缩写，指一个玩家对另一玩家的私人会话",{"type":597,"tag":606,"props":50666,"children":50667},{},[50668],{"type":603,"value":50669},"POP – Repopulation的缩写，指怪物刷新",{"type":597,"tag":606,"props":50671,"children":50672},{},[50673],{"type":603,"value":50674},"Portal – 泛指游戏内的传送",{"type":597,"tag":606,"props":50676,"children":50677},{},[50678],{"type":603,"value":50679},"Proc – 激活，多指一些武器、装备附加效果、属性",{"type":597,"tag":606,"props":50681,"children":50682},{},[50683],{"type":603,"value":50684},"PST – Please Send Tell的简写，指说话的人想通过 /t(ell) 或 /w(hisper) 命令交流",{"type":597,"tag":606,"props":50686,"children":50687},{},[50688],{"type":603,"value":50689},"Puller – 负责吸引怪物的玩家，常说引怪，与上面的Lure相近",{"type":597,"tag":606,"props":50691,"children":50692},{},[50693],{"type":603,"value":50694},"Pulling – 队伍中的玩家负责吸引一只或几只怪物，并将他们带到队伍所在地，集体杀怪，这多指高级怪物的情况下，与上面的Lure不完全一样",{"type":597,"tag":606,"props":50696,"children":50697},{},[50698],{"type":603,"value":50699},"PvE – Player vs. Environment的简写， 玩家与电脑控制的角色战斗",{"type":597,"tag":606,"props":50701,"children":50702},{},[50703],{"type":603,"value":50704},"PVP – Player vs. Player的简写，玩家对玩家的战斗",{"type":597,"tag":606,"props":50706,"children":50707},{},[50708],{"type":603,"value":50709},"Raid – 可译为突袭，由一群玩家在某一地区进行的大规模作战，有时也指团队副本、大副本",{"type":597,"tag":606,"props":50711,"children":50712},{},[50713],{"type":603,"value":50714},"Quest – 游戏中的任务",{"type":597,"tag":606,"props":50716,"children":50717},{},[50718],{"type":603,"value":50719},"Re-buff – 重新加有益状态",{"type":597,"tag":606,"props":50721,"children":50722},{},[50723],{"type":603,"value":50724},"Res – Resurrect / Rescure的缩写，指复活暂时死亡的角色",{"type":597,"tag":606,"props":50726,"children":50727},{},[50728],{"type":603,"value":50729},"Re-Spawn – 一只被杀死的怪物重新刷出",{"type":597,"tag":606,"props":50731,"children":50732},{},[50733],{"type":603,"value":50734},"Rest (state) – 角色疲劳状态，一般杀怪经验、物品掉率效率都受影响，是为了玩家健康而强制执行的一项措施",{"type":597,"tag":606,"props":50736,"children":50737},{},[50738],{"type":603,"value":50739},"Resistance – 对属性攻击的抵御(如，冰ice, 火fire, 点lighting, 毒poison等)",{"type":597,"tag":606,"props":50741,"children":50742},{},[50743],{"type":603,"value":50744},"Respawn – 重生点复活",{"type":597,"tag":606,"props":50746,"children":50747},{},[50748],{"type":603,"value":50749},"Roll – 指掷随机数字来决定物品的归属",{"type":597,"tag":606,"props":50751,"children":50752},{},[50753],{"type":603,"value":50754},"Root – 给敌人施加的类似定身的状态",{"type":597,"tag":606,"props":50756,"children":50757},{},[50758],{"type":603,"value":50759},"Schedule – 泛指游戏内活动的日程表",{"type":597,"tag":606,"props":50761,"children":50762},{},[50763],{"type":603,"value":50764},"Sever – 服务器，与游戏客户端相对",{"type":597,"tag":606,"props":50766,"children":50767},{},[50768],{"type":603,"value":50769},"Small Pets – 跟随玩家的小动物，可以称为宠物，是否直接影响玩家或怪物，要看具体的游戏设置了",{"type":597,"tag":606,"props":50771,"children":50772},{},[50773],{"type":603,"value":50774},"SOLO – 单独杀怪、做任务等，不与别人组队的游戏玩法",{"type":597,"tag":606,"props":50776,"children":50777},{},[50778],{"type":603,"value":50779},"Spawns – 在游戏世界中，怪物被刷出时所位于的地点或出现的过程",{"type":597,"tag":606,"props":50781,"children":50782},{},[50783],{"type":603,"value":50784},"SPI – Spirit的简写，直译是灵魂，多指代游戏角色的属性",{"type":597,"tag":606,"props":50786,"children":50787},{},[50788],{"type":603,"value":50789},"STA – Stamina的缩写，耐力",{"type":597,"tag":606,"props":50791,"children":50792},{},[50793],{"type":603,"value":50794},"Stack – 堆放在同一个道具栏中的同类物品的数量，通俗讲就是叠加数量",{"type":597,"tag":606,"props":50796,"children":50797},{},[50798],{"type":603,"value":50799},"STR – Strength的缩写，力量，多指代游戏角色的属性",{"type":597,"tag":606,"props":50801,"children":50802},{},[50803],{"type":603,"value":50804},"Stun – 击晕(状态)",{"type":597,"tag":606,"props":50806,"children":50807},{},[50808],{"type":603,"value":50809},"Tank – 能够承受很多伤害的近战角色，如一名战士，是抗怪的角色",{"type":597,"tag":606,"props":50811,"children":50812},{},[50813],{"type":603,"value":50814},"Tap – 对怪物造成伤害，标为你的猎物，一旦你对怪物造成了伤害，只有你才能得到经验值和掠夺战利品",{"type":597,"tag":606,"props":50816,"children":50817},{},[50818],{"type":603,"value":50819},"Taunt – 直译是嘲弄的意思，指从其它玩家那里吸引怪物",{"type":597,"tag":606,"props":50821,"children":50822},{},[50823],{"type":603,"value":50824},"Team – 游戏内指组队，与Party相近；当用于游戏公司时指(游戏研发、运营)团队",{"type":597,"tag":606,"props":50826,"children":50827},{},[50828],{"type":603,"value":50829},"Threat – 直译是威吓的意思，有可能是指将怪物暂时镇住、吓走等",{"type":597,"tag":606,"props":50831,"children":50832},{},[50833],{"type":603,"value":50834},"TPP – Third Party Programme，直译为第三方程序，就是平常的外挂",{"type":597,"tag":606,"props":50836,"children":50837},{},[50838],{"type":603,"value":50839},"Train – 把一群怪物引向另一名玩家，通俗讲就是陷害",{"type":597,"tag":606,"props":50841,"children":50842},{},[50843],{"type":603,"value":50844},"Twink – 高等级带练低等级玩家",{"type":597,"tag":606,"props":50846,"children":50847},{},[50848],{"type":603,"value":50849},"Über – super的德语说法，原意指over power, 极其强力",{"type":597,"tag":606,"props":50851,"children":50852},{},[50853],{"type":603,"value":50854},"UC – Undercity 地下城",{"type":597,"tag":606,"props":50856,"children":50857},{},[50858],{"type":603,"value":50859},"Update – 与Upgrade意义相近，泛指游戏内的更新，如服务器更新、地图更新、道具更新等等",{"type":597,"tag":606,"props":50861,"children":50862},{},[50863],{"type":603,"value":50864},"Vendor Trash – 只有商人NPC才愿意购买的物品",{"type":597,"tag":606,"props":50866,"children":50867},{},[50868],{"type":603,"value":50869},"VS – Ver Sus的简写，对决、挑战、单挑",{"type":597,"tag":606,"props":50871,"children":50872},{},[50873],{"type":603,"value":50874},"WTB – Wanting to buy的缩写，想要购买",{"type":597,"tag":606,"props":50876,"children":50877},{},[50878],{"type":603,"value":50879},"WTS – Wanting to sell的缩写，想要出售",{"type":597,"tag":606,"props":50881,"children":50882},{},[50883],{"type":603,"value":50884},"XP or Exp – Experience的简写，经验值",{"type":597,"tag":606,"props":50886,"children":50887},{},[50888],{"type":603,"value":50889},"3D Accelerator：3D加速器。一种专门提升PC的3D运算功能硬件，但其不能提升计算",{"type":597,"tag":606,"props":50891,"children":50892},{},[50893],{"type":603,"value":50894},"机整体的显示效果。",{"type":597,"tag":606,"props":50896,"children":50897},{},[50898],{"type":603,"value":50899},"A",{"type":597,"tag":606,"props":50901,"children":50902},{},[50903],{"type":603,"value":50904},"ACT（Action Game）：动作类游戏。这类游戏提供玩者一个训练手眼协调及反应力的",{"type":597,"tag":606,"props":50906,"children":50907},{},[50908],{"type":603,"value":50909},"环境及功能，通常要求玩者所控制的主角（人或物）根据周遭情况变化做出一定的动",{"type":597,"tag":606,"props":50911,"children":50912},{},[50913],{"type":603,"value":50914},"作，如移动、跳跃、攻击、躲避、防守等，来达到游戏所要求的目标。此类游戏讲究逼",{"type":597,"tag":606,"props":50916,"children":50917},{},[50918],{"type":603,"value":50919},"真的形体动作、火爆的打斗效果、良好的*作手感及复杂的攻击组合等等。",{"type":597,"tag":606,"props":50921,"children":50922},{},[50923],{"type":603,"value":50924},"AI（Artificial Intelligence）：人工智能。就是指计算机模仿真实世界的行为方式",{"type":597,"tag":606,"props":50926,"children":50927},{},[50928],{"type":603,"value":50929},"与人类思维与游戏的方式的运算能力。那是一整套极为复杂的运算系统与运算规则。",{"type":597,"tag":606,"props":50931,"children":50932},{},[50933],{"type":603,"value":50934},"Alpha：Alpha测试。就是指在游戏制作者控制的环境下进行的游戏测试工作，所以一",{"type":597,"tag":606,"props":50936,"children":50937},{},[50938],{"type":603,"value":50939},"般来说a测试是在公司内部进行的。",{"type":597,"tag":606,"props":50941,"children":50942},{},[50943],{"type":603,"value":50944},"AVG（Adventure Game）：冒险类游戏。这类游戏在一固定的剧情或故事下，提供玩者",{"type":597,"tag":606,"props":50946,"children":50947},{},[50948],{"type":603,"value":50949},"一个可解谜的环境及场景，玩者必须随着故事的安排进行解谜。游戏的目的是借游戏主",{"type":597,"tag":606,"props":50951,"children":50952},{},[50953],{"type":603,"value":50954},"角在故事中所冒险积累的经验来解开制作者所设定的谜题或疑点。通常这类游戏常被用",{"type":597,"tag":606,"props":50956,"children":50957},{},[50958],{"type":603,"value":50959},"来设计成侦探类型的解谜游戏。",{"type":597,"tag":606,"props":50961,"children":50962},{},[50963],{"type":603,"value":50964},"B",{"type":597,"tag":606,"props":50966,"children":50967},{},[50968],{"type":603,"value":50969},"Beta：Beta测试。就是指不在制作者控制的环境下进行的游戏测试工作，所以一般来",{"type":597,"tag":606,"props":50971,"children":50972},{},[50973],{"type":603,"value":50974},"说Beta测试则是交由选定的测试者单独来进行测试。",{"type":597,"tag":606,"props":50976,"children":50977},{},[50978],{"type":603,"value":50979},"Boss：大头目，也称“老板”。在游戏中出现的较为巨大有力与难缠的敌方对手。一",{"type":597,"tag":606,"props":50981,"children":50982},{},[50983],{"type":603,"value":50984},"般这类敌人在整个游戏过程中只会出现一次，而常出现在关底，而不像小怪物在游戏中",{"type":597,"tag":606,"props":50986,"children":50987},{},[50988],{"type":603,"value":50989},"可以重复登场。",{"type":597,"tag":606,"props":50991,"children":50992},{},[50993],{"type":603,"value":50994},"Bug：程序漏洞，俗称“臭虫”。指那些因游戏设计者与测试者的疏漏而剩留在游戏中",{"type":597,"tag":606,"props":50996,"children":50997},{},[50998],{"type":603,"value":50999},"的程序错误，严重的话将影响整个作品的质量。",{"type":597,"tag":606,"props":51001,"children":51002},{},[51003],{"type":603,"value":51004},"C",{"type":597,"tag":606,"props":51006,"children":51007},{},[51008],{"type":603,"value":51009},"Cheat：游戏秘技。游戏设计者暗藏在作品中的特殊技巧，使用后可带给玩者特殊的能",{"type":597,"tag":606,"props":51011,"children":51012},{},[51013],{"type":603,"value":51014},"力与效果。最先是程序者为快速测试作品而设计的内部秘技，现在几乎已是每个游戏均",{"type":597,"tag":606,"props":51016,"children":51017},{},[51018],{"type":603,"value":51019},"有秘技。",{"type":597,"tag":606,"props":51021,"children":51022},{},[51023],{"type":603,"value":51024},"Clock Speed： 游戏执行速度。即游戏在计算机中被运行的速度，常以Megahertz",{"type":597,"tag":606,"props":51026,"children":51027},{},[51028],{"type":603,"value":51029},"（MHz）计量。",{"type":597,"tag":606,"props":51031,"children":51032},{},[51033],{"type":603,"value":51034},"Code：密码。1）同Cheat条；2）同Source Code条。",{"type":597,"tag":606,"props":51036,"children":51037},{},[51038],{"type":603,"value":51039},"D",{"type":597,"tag":606,"props":51041,"children":51042},{},[51043],{"type":603,"value":51044},"Doom-like： 三维射击类游戏。即第一人称射击类游戏。游戏画面即为玩者的视野范",{"type":597,"tag":606,"props":51046,"children":51047},{},[51048],{"type":603,"value":51049},"围。现在此类游戏多称作Quake-like。",{"type":597,"tag":606,"props":51051,"children":51052},{},[51053],{"type":603,"value":51054},"E",{"type":597,"tag":606,"props":51056,"children":51057},{},[51058],{"type":603,"value":51059},"E3（Electronic Entertainment Expo）：美国E3大展。 当前世界上最为盛大的电脑",{"type":597,"tag":606,"props":51061,"children":51062},{},[51063],{"type":603,"value":51064},"游戏与电视游戏的商贸展示会，基本于每年五月举行。",{"type":597,"tag":606,"props":51066,"children":51067},{},[51068],{"type":603,"value":51069},"Easter Egg：复活节彩蛋。 程序中隐藏着的一段意外的内容，常为制作者设计的搞笑",{"type":597,"tag":606,"props":51071,"children":51072},{},[51073],{"type":603,"value":51074},"内容，经常是关于制作者自己的介绍与调侃。",{"type":597,"tag":606,"props":51076,"children":51077},{},[51078],{"type":603,"value":51079},"ECTS（European Computer Trade Show）：欧洲计算机商贸展示会。被称为欧洲的E3",{"type":597,"tag":606,"props":51081,"children":51082},{},[51083],{"type":603,"value":51084},"大展，每年三月和九月于伦敦举行。",{"type":597,"tag":606,"props":51086,"children":51087},{},[51088],{"type":603,"value":51089},"Electronic Game：电子游戏。即电脑游戏、电视游戏以及街机和手掌型游戏机的总",{"type":597,"tag":606,"props":51091,"children":51092},{},[51093],{"type":603,"value":51094},"称。",{"type":597,"tag":606,"props":51096,"children":51097},{},[51098],{"type":603,"value":51099},"Engine：游戏引擎。 即一套游戏的主程序。",{"type":597,"tag":606,"props":51101,"children":51102},{},[51103],{"type":603,"value":51104},"Experience Point：经验点数。常出现在角色扮演游戏中，以数值计量人物的成长，",{"type":597,"tag":606,"props":51106,"children":51107},{},[51108],{"type":603,"value":51109},"经验点数达到一定数值后常常会升级，这时人物就会变得更强大。",{"type":597,"tag":606,"props":51111,"children":51112},{},[51113],{"type":603,"value":51114},"F",{"type":597,"tag":606,"props":51116,"children":51117},{},[51118],{"type":603,"value":51119},"FTG（Fighting Game）：格斗类游戏。从动作类游戏脱胎分化出来，就是指两个角色",{"type":597,"tag":606,"props":51121,"children":51122},{},[51123],{"type":603,"value":51124},"一对一决斗的游戏形式。现在此类游戏又分化出2D格斗类游戏与3D格斗类游戏。",{"type":597,"tag":606,"props":51126,"children":51127},{},[51128],{"type":603,"value":51129},"First Person：第一人称视角。就是指屏幕上不直接出现主角，而是表现为主角的视",{"type":597,"tag":606,"props":51131,"children":51132},{},[51133],{"type":603,"value":51134},"野范围。",{"type":597,"tag":606,"props":51136,"children":51137},{},[51138],{"type":603,"value":51139},"Flight Sim：飞行模拟类游戏。是模拟类游戏下的一个门类，让玩家感受到*纵飞机以",{"type":597,"tag":606,"props":51141,"children":51142},{},[51143],{"type":603,"value":51144},"及飞翔于蓝天上的乐趣。",{"type":597,"tag":606,"props":51146,"children":51147},{},[51148],{"type":603,"value":51149},"FMV （Full-motion Video）：全动态影像。即游戏的片头、过场和片尾的动态画面。",{"type":597,"tag":606,"props":51151,"children":51152},{},[51153],{"type":603,"value":51154},"Forward Scrolling：向前卷轴。即背景不断向玩者趋近的卷轴模式，常出现在第一人",{"type":597,"tag":606,"props":51156,"children":51157},{},[51158],{"type":603,"value":51159},"称射击或模拟类游戏。",{"type":597,"tag":606,"props":51161,"children":51162},{},[51163],{"type":603,"value":51164},"Frame：帧，镜头。即显示画面的动态计量单位。",{"type":597,"tag":606,"props":51166,"children":51167},{},[51168],{"type":603,"value":51169},"FPS（Frames Per Second）：每秒显示帧数。美国的标准NTSC的电视节目的每秒显示",{"type":597,"tag":606,"props":51171,"children":51172},{},[51173],{"type":603,"value":51174},"帧数为30。不少电脑游戏的显示帧数都超过了这个数字。",{"type":597,"tag":606,"props":51176,"children":51177},{},[51178],{"type":603,"value":51179},"Free Guy：额外的命。在游戏中，你有可能会获得的额外的命，比如收集一定数量的",{"type":597,"tag":606,"props":51181,"children":51182},{},[51183],{"type":603,"value":51184},"某种宝物。",{"type":597,"tag":606,"props":51186,"children":51187},{},[51188],{"type":603,"value":51189},"G",{"type":597,"tag":606,"props":51191,"children":51192},{},[51193],{"type":603,"value":51194},"Game Over：游戏结束。这是游戏中最常见的话语，通常是表示游戏者失败，而不是通",{"type":597,"tag":606,"props":51196,"children":51197},{},[51198],{"type":603,"value":51199},"关爆机。",{"type":597,"tag":606,"props":51201,"children":51202},{},[51203],{"type":603,"value":51204},"Gameplay：游戏可玩性。即游戏的玩法，是决定一个游戏有多好玩的重要因素。",{"type":597,"tag":606,"props":51206,"children":51207},{},[51208],{"type":603,"value":51209},"Genre：游戏类型。即为不同游戏玩法的游戏作一归类，比如角色扮演类、冒险类、动",{"type":597,"tag":606,"props":51211,"children":51212},{},[51213],{"type":603,"value":51214},"作类、模拟类等。",{"type":597,"tag":606,"props":51216,"children":51217},{},[51218],{"type":603,"value":51219},"GPU （Graphics Processing Unit）： 图形处理器。辅助CPU处理图形运算。",{"type":597,"tag":606,"props":51221,"children":51222},{},[51223],{"type":603,"value":51224},"Graphics Accelerator：图形加速器。专门的提升显示速度和效果的硬件。",{"type":597,"tag":606,"props":51226,"children":51227},{},[51228],{"type":603,"value":51229},"Graphic Adventure：图形冒险类游戏。是冒险类游戏下的一个门类， 相对与文字冒",{"type":597,"tag":606,"props":51231,"children":51232},{},[51233],{"type":603,"value":51234},"险类游戏。",{"type":597,"tag":606,"props":51236,"children":51237},{},[51238],{"type":603,"value":51239},"GUI（Graphical User Interface）：图形用户界面。 即计算机与用户的交互界面。",{"type":597,"tag":606,"props":51241,"children":51242},{},[51243],{"type":603,"value":51244},"H",{"type":597,"tag":606,"props":51246,"children":51247},{},[51248],{"type":603,"value":51249},"Hidden Level：隐藏关卡。指游戏中隐藏的部分，自行发现。即不玩到这部分也能够",{"type":597,"tag":606,"props":51251,"children":51252},{},[51253],{"type":603,"value":51254},"通关，但玩到后可能会使清洁起变化。",{"type":597,"tag":606,"props":51256,"children":51257},{},[51258],{"type":603,"value":51259},"High-Res：高解析度。 即精细的画面显示模式，但游戏的运行速度可能会因此有所下",{"type":597,"tag":606,"props":51261,"children":51262},{},[51263],{"type":603,"value":51264},"降。",{"type":597,"tag":606,"props":51266,"children":51267},{},[51268],{"type":603,"value":51269},"Hint：攻略提示。简单的攻关提示，帮助玩家解决游戏中出现的特别棘手的难题。",{"type":597,"tag":606,"props":51271,"children":51272},{},[51273],{"type":603,"value":51274},"HP（Hit Point）：生命力。即人物或作战单位的生命数值。一般HP为0即表示死亡，",{"type":597,"tag":606,"props":51276,"children":51277},{},[51278],{"type":603,"value":51279},"甚至Game Over。",{"type":597,"tag":606,"props":51281,"children":51282},{},[51283],{"type":603,"value":51284},"HUD（Heads Up Display）：飞行仪表盘。飞行模拟游戏中的常见词，常提供玩家诸如",{"type":597,"tag":606,"props":51286,"children":51287},{},[51288],{"type":603,"value":51289},"弹药状况、速度、目标跟踪等作战信息。",{"type":597,"tag":606,"props":51291,"children":51292},{},[51293],{"type":603,"value":51294},"I",{"type":597,"tag":606,"props":51296,"children":51297},{},[51298],{"type":603,"value":51299},"Interactive Movie：交互式电影。即结合游戏要素与电影要素的一类计算机互动作",{"type":597,"tag":606,"props":51301,"children":51302},{},[51303],{"type":603,"value":51304},"品，常常包含大量的FMV（全动态影像）。",{"type":597,"tag":606,"props":51306,"children":51307},{},[51308],{"type":603,"value":51309},"Interface：游戏界面。即玩者*作游戏的方式。它决定游戏的上手难度与可玩性。",{"type":597,"tag":606,"props":51311,"children":51312},{},[51313],{"type":603,"value":51314},"J",{"type":597,"tag":606,"props":51316,"children":51317},{},[51318],{"type":603,"value":51319},"Joypad：游戏手柄。模拟电视游戏的手柄，通常外接在声卡上。",{"type":597,"tag":606,"props":51321,"children":51322},{},[51323,51325,51330],{"type":603,"value":51324},"Joystick：游戏",{"type":597,"tag":1733,"props":51326,"children":51327},{},[51328],{"type":603,"value":51329},"纵杆。常用来玩飞行、赛车等模拟类游戏的外接",{"type":603,"value":51331},"纵杆。",{"type":597,"tag":606,"props":51333,"children":51334},{},[51335],{"type":603,"value":51336},"K",{"type":597,"tag":606,"props":51338,"children":51339},{},[51340],{"type":603,"value":51341},"L",{"type":597,"tag":606,"props":51343,"children":51344},{},[51345],{"type":603,"value":51346},"Level：关卡。即游戏一个连续的完整的舞台、场景。有时也称作Stage。",{"type":597,"tag":606,"props":51348,"children":51349},{},[51350],{"type":603,"value":51351},"Low-Res：低解析度。即粗糙的画面显示模式，但运行速度可稍微提高。",{"type":597,"tag":606,"props":51353,"children":51354},{},[51355],{"type":603,"value":51356},"M",{"type":597,"tag":606,"props":51358,"children":51359},{},[51360],{"type":603,"value":51361},"Motion Capture：动态捕捉。将物体在3D环境中运动的过程数字化的过程。",{"type":597,"tag":606,"props":51363,"children":51364},{},[51365],{"type":603,"value":51366},"Motion Tracker：动作跟踪器。动态捕捉时使用到的设备。",{"type":597,"tag":606,"props":51368,"children":51369},{},[51370],{"type":603,"value":51371},"Moves：出招。即格斗游戏中人物的出招技巧。",{"type":597,"tag":606,"props":51373,"children":51374},{},[51375],{"type":603,"value":51376},"MP（Magic Point）：魔法力。即人物的魔法数值，一旦使用完即不能再使用魔法招",{"type":597,"tag":606,"props":51378,"children":51379},{},[51380],{"type":603,"value":51381},"式。",{"type":597,"tag":606,"props":51383,"children":51384},{},[51385],{"type":603,"value":51386},"MUD（Multi-user Dungeon）：多用户地牢，俗称“泥巴”。在互联网络上的一种允许",{"type":597,"tag":606,"props":51388,"children":51389},{},[51390],{"type":603,"value":51391},"多人参与的实时游戏，一般类似RPG的玩法，但目前多为文字模式。",{"type":597,"tag":606,"props":51393,"children":51394},{},[51395],{"type":603,"value":51396},"Multimedia：多媒体。主要指融合多种表现手法的电脑作品。比如FMV（全动态影",{"type":597,"tag":606,"props":51398,"children":51399},{},[51400],{"type":603,"value":51401},"像），电脑游戏、交互作品等。",{"type":597,"tag":606,"props":51403,"children":51404},{},[51405],{"type":603,"value":51406},"N",{"type":597,"tag":606,"props":51408,"children":51409},{},[51410],{"type":603,"value":51411},"Network Games：网络游戏。指容许多人通过某种网络协议连线后便能进行集体游戏的",{"type":597,"tag":606,"props":51413,"children":51414},{},[51415],{"type":603,"value":51416},"游戏种类。",{"type":597,"tag":606,"props":51418,"children":51419},{},[51420],{"type":603,"value":51421},"NPC（Non Player Character）：非玩者人物。在角色扮演游戏中，玩者会在游戏过程",{"type":597,"tag":606,"props":51423,"children":51424},{},[51425],{"type":603,"value":51426},"中遭逢到的所有不受控制的人物。这些人物或会提示重要情报线索，或是无关紧要的人",{"type":597,"tag":606,"props":51428,"children":51429},{},[51430],{"type":603,"value":51431},"物。",{"type":597,"tag":606,"props":51433,"children":51434},{},[51435],{"type":603,"value":51436},"O",{"type":597,"tag":606,"props":51438,"children":51439},{},[51440],{"type":603,"value":51441},"P",{"type":597,"tag":606,"props":51443,"children":51444},{},[51445],{"type":603,"value":51446},"Password：过关密码。在游戏一开始处输入后便能直接进入后面的关卡。",{"type":597,"tag":606,"props":51448,"children":51449},{},[51450],{"type":603,"value":51451},"Pirate：盗版游戏。即国内到处泛滥令游戏制作公司头痛不已的盗版游戏。",{"type":597,"tag":606,"props":51453,"children":51454},{},[51455],{"type":603,"value":51456},"Pixel：像素。屏幕显示的最小基本单位。",{"type":597,"tag":606,"props":51458,"children":51459},{},[51460],{"type":603,"value":51461},"Platformer：游戏平台。游戏运行的平台，包括Win95、DOS或者UNIX等。",{"type":597,"tag":606,"props":51463,"children":51464},{},[51465],{"type":603,"value":51466},"Player Killing：玩者杀手。指在MUD中，专以攻击玩者人物，而不是非玩者人物的一",{"type":597,"tag":606,"props":51468,"children":51469},{},[51470],{"type":603,"value":51471},"类玩家。",{"type":597,"tag":606,"props":51473,"children":51474},{},[51475],{"type":603,"value":51476},"Polygon：多角形。运用在2D屏幕中表现3D环境的多角形单位。",{"type":597,"tag":606,"props":51478,"children":51479},{},[51480],{"type":603,"value":51481},"Prototype：原型制作。游戏作品的原型制作也就是指以最快的速度制作出游戏的原",{"type":597,"tag":606,"props":51483,"children":51484},{},[51485],{"type":603,"value":51486},"型，一个可以执行的程序原型。从这些基础程序与基础图形，制作者可以看到从电脑中",{"type":597,"tag":606,"props":51488,"children":51489},{},[51490],{"type":603,"value":51491},"表现出来的与原来设想的有多大差距，经过调整磨合后就进入了正式动工了。",{"type":597,"tag":606,"props":51493,"children":51494},{},[51495],{"type":603,"value":51496},"Puzzle：谜题。在冒险类游戏中，考验玩者智力的谜题。",{"type":597,"tag":606,"props":51498,"children":51499},{},[51500],{"type":603,"value":51501},"PZL（Puzzle Game）：解谜类游戏。一类专以不断解谜为主要内容的游戏种类。",{"type":597,"tag":606,"props":51503,"children":51504},{},[51505],{"type":603,"value":51506},"Q",{"type":597,"tag":606,"props":51508,"children":51509},{},[51510],{"type":603,"value":51511},"Quake-like：三维射击类游戏。即第一人称射击类游戏。见Doom-like条。",{"type":597,"tag":606,"props":51513,"children":51514},{},[51515],{"type":603,"value":51516},"R",{"type":597,"tag":606,"props":51518,"children":51519},{},[51520],{"type":603,"value":51521},"Round：回合。格斗类游戏中的一个较量的回合。",{"type":597,"tag":606,"props":51523,"children":51524},{},[51525],{"type":603,"value":51526},"RPG（Role Playing Game）：角色扮演类游戏。这类游戏提供玩者一个可供冒险的世",{"type":597,"tag":606,"props":51528,"children":51529},{},[51530],{"type":603,"value":51531},"界（Fantasy World）或者一个反映真实的世界（Real World），这世界包含了各种角",{"type":597,"tag":606,"props":51533,"children":51534},{},[51535],{"type":603,"value":51536},"色、建筑、商店、迷宫及各种险峻的地形。玩者所扮演的主角便在这世界中通过旅行、",{"type":597,"tag":606,"props":51538,"children":51539},{},[51540],{"type":603,"value":51541},"交谈、交易、打斗、成长、探险及解谜来揭开一系列的故事情节线索，最终走向胜利的",{"type":597,"tag":606,"props":51543,"children":51544},{},[51545],{"type":603,"value":51546},"彼岸。玩者依靠自身的胆识、智慧和机敏获得一次又一次的成功，使自己扮演的主角不",{"type":597,"tag":606,"props":51548,"children":51549},{},[51550],{"type":603,"value":51551},"断发展壮大，从而得到巨大的精神满足。",{"type":597,"tag":606,"props":51553,"children":51554},{},[51555],{"type":603,"value":51556},"RTS（Realtime Strategy Game）： 即时战略类游戏。对应回合制战略游戏，一切都",{"type":597,"tag":606,"props":51558,"children":51559},{},[51560],{"type":603,"value":51561},"是实时发生，要求玩者具备较好的敏捷与宏观指挥能力。",{"type":597,"tag":606,"props":51563,"children":51564},{},[51565],{"type":603,"value":51566},"S",{"type":597,"tag":606,"props":51568,"children":51569},{},[51570],{"type":603,"value":51571},"Scaling：缩放比例。有些游戏提供画面的缩放比例的调整。",{"type":597,"tag":606,"props":51573,"children":51574},{},[51575],{"type":603,"value":51576},"Second Person：第二人称视角。即追尾视角，紧随游戏主角的背影。",{"type":597,"tag":606,"props":51578,"children":51579},{},[51580],{"type":603,"value":51581},"Shareware Software：共享软件作品。",{"type":597,"tag":606,"props":51583,"children":51584},{},[51585],{"type":603,"value":51586},"Side-Scrolling：横向卷轴。即游戏画面的前景与背景从左向右移动的卷轴模式，常",{"type":597,"tag":606,"props":51588,"children":51589},{},[51590],{"type":603,"value":51591},"用于2D射击游戏中。",{"type":597,"tag":606,"props":51593,"children":51594},{},[51595],{"type":603,"value":51596},"SLG（Simulation Game）：模拟类游戏。这类游戏提供玩者一个可以做逻辑思考及策",{"type":597,"tag":606,"props":51598,"children":51599},{},[51600],{"type":603,"value":51601},"略、战略运用的环境，且让玩者有自由支配、管理或统御游戏中的人、事或物的权力，",{"type":597,"tag":606,"props":51603,"children":51604},{},[51605],{"type":603,"value":51606},"并通过这种权力及谋略的运用达成游戏所要求的目标。玩者在条件真实、气氛宏大的游",{"type":597,"tag":606,"props":51608,"children":51609},{},[51610],{"type":603,"value":51611},"戏环境中充分施展智慧，克敌制胜，达到高层次的成功享受。",{"type":597,"tag":606,"props":51613,"children":51614},{},[51615],{"type":603,"value":51616},"Source Code：原代码。用计算机语言直接编成的程序原码，比如C语言、Pascal。",{"type":597,"tag":606,"props":51618,"children":51619},{},[51620],{"type":603,"value":51621},"SPT（Sport）：运动类游戏。这类游戏提供一个反映现实（指正常的运动方式及运动",{"type":597,"tag":606,"props":51623,"children":51624},{},[51625],{"type":603,"value":51626},"精神）中的运动项目，并让玩者借助控制或管理游戏中的运动员或队伍，来进行运动项",{"type":597,"tag":606,"props":51628,"children":51629},{},[51630],{"type":603,"value":51631},"目的比赛。",{"type":597,"tag":606,"props":51633,"children":51634},{},[51635],{"type":603,"value":51636},"Stage：关卡。见Level条。",{"type":597,"tag":606,"props":51638,"children":51639},{},[51640],{"type":603,"value":51641},"STG（Shooting Game）：射击类游戏。有平面射击类与三维射击类（即第一人称射击",{"type":597,"tag":606,"props":51643,"children":51644},{},[51645],{"type":603,"value":51646},"类）。平面射击类还包括横向卷轴与纵向卷轴两种。射击类游戏是早期电脑游戏最常见",{"type":597,"tag":606,"props":51648,"children":51649},{},[51650],{"type":603,"value":51651},"的种类。",{"type":597,"tag":606,"props":51653,"children":51654},{},[51655],{"type":603,"value":51656},"Storyline：剧情。即游戏的故事大纲，分为直线型、多线型以及开放型等三种。",{"type":597,"tag":606,"props":51658,"children":51659},{},[51660],{"type":603,"value":51661},"Strategy Guide：战略指南手册。即游戏包装盒内附有的基本战略指导手册。",{"type":597,"tag":606,"props":51663,"children":51664},{},[51665],{"type":603,"value":51666},"Sub-boss：隐藏头目。有些游戏中会隐藏有更厉害的大头目，通常是在通关后。",{"type":597,"tag":606,"props":51668,"children":51669},{},[51670],{"type":603,"value":51671},"T",{"type":597,"tag":606,"props":51673,"children":51674},{},[51675],{"type":603,"value":51676},"TAB（Table）：桌面类游戏。这类游戏提供一个训练逻辑思考或解谜的环境，并且有",{"type":597,"tag":606,"props":51678,"children":51679},{},[51680],{"type":603,"value":51681},"一定的规则及逻辑。玩者必须遵循游戏所设定的规则来解开谜题，达成游戏目标。此类",{"type":597,"tag":606,"props":51683,"children":51684},{},[51685],{"type":603,"value":51686},"游戏讲究高超的人工智能、新奇的玩法和舒适的*作环境。玩者在游戏中自得其乐、逍",{"type":597,"tag":606,"props":51688,"children":51689},{},[51690],{"type":603,"value":51691},"遥自在，也是一番享受。",{"type":597,"tag":606,"props":51693,"children":51694},{},[51695],{"type":603,"value":51696},"TBS（Turn-based Strategy Game）：回合制战略游戏。对应即时战略类游戏。参加战",{"type":597,"tag":606,"props":51698,"children":51699},{},[51700],{"type":603,"value":51701},"斗的几方，可以包括计算机在内，依一定顺序分别部署战略。一次部署便称作一个回",{"type":597,"tag":606,"props":51703,"children":51704},{},[51705],{"type":603,"value":51706},"合。",{"type":597,"tag":606,"props":51708,"children":51709},{},[51710],{"type":603,"value":51711},"Tester：游戏测试者。游戏制作公司专门花钱聘请的测试作品的资深玩家。",{"type":597,"tag":606,"props":51713,"children":51714},{},[51715],{"type":603,"value":51716},"Text Adventure：文字冒险类游戏。是冒险类游戏下的一个门类， 相对与图形冒险类",{"type":597,"tag":606,"props":51718,"children":51719},{},[51720],{"type":603,"value":51721},"游戏，多是日本制作的小成本卡通游戏。",{"type":597,"tag":606,"props":51723,"children":51724},{},[51725],{"type":603,"value":51726},"Third Person：第三人称视角。电脑游戏中最常见的视角，尤其是2D游戏。玩者是以",{"type":597,"tag":606,"props":51728,"children":51729},{},[51730],{"type":603,"value":51731},"第三者的角度观察场景与主角的动作。",{"type":597,"tag":606,"props":51733,"children":51734},{},[51735],{"type":603,"value":51736},"U",{"type":597,"tag":606,"props":51738,"children":51739},{},[51740],{"type":603,"value":51741},"V",{"type":597,"tag":606,"props":51743,"children":51744},{},[51745],{"type":603,"value":51746},"Vertically Scrolling：垂直卷轴。即游戏画面的前景与背景从向下向上移动的卷轴",{"type":597,"tag":606,"props":51748,"children":51749},{},[51750],{"type":603,"value":51751},"模式，常用于2D射击游戏中。",{"type":597,"tag":606,"props":51753,"children":51754},{},[51755],{"type":603,"value":51756},"View：视角。目前许多3D游戏均提供多视角调整功能。",{"type":597,"tag":606,"props":51758,"children":51759},{},[51760],{"type":603,"value":51761},"VR （Virtual Reality）：虚拟实境。",{"type":597,"tag":606,"props":51763,"children":51764},{},[51765],{"type":603,"value":51766},"W",{"type":597,"tag":606,"props":51768,"children":51769},{},[51770],{"type":603,"value":51771},"Walkthrough：游戏攻略。是指完整的游戏攻关指导。",{"type":597,"tag":606,"props":51773,"children":51774},{},[51775],{"type":603,"value":51776},"X",{"type":597,"tag":606,"props":51778,"children":51779},{},[51780],{"type":603,"value":51781},"Y",{"type":597,"tag":606,"props":51783,"children":51784},{},[51785],{"type":603,"value":51786},"Z",{"type":597,"tag":606,"props":51788,"children":51789},{},[51790],{"type":603,"value":51791},"Z-line/Z-axis：Z轴。在3D环境中，Z轴一般表示深度，X轴表示高度，Y轴表示宽度，",{"type":597,"tag":606,"props":51793,"children":51794},{},[51795],{"type":603,"value":51796},"而具备了Z轴就构成了3D环境。",{"type":597,"tag":606,"props":51798,"children":51799},{},[51800],{"type":603,"value":51801},"WOW九大职业：\n法师mage 战士warriop 德鲁依 drvid 撒满shamam 圣骑士 paladin 术士warlock 盗贼rogue 牧师prisst 猎人 hunter",{"type":597,"tag":606,"props":51803,"children":51804},{},[51805],{"type":603,"value":51806},"角色基本术语：",{"type":597,"tag":606,"props":51808,"children":51809},{},[51810],{"type":603,"value":51811},"　　AR——AttackRating攻击准确率",{"type":597,"tag":606,"props":51813,"children":51814},{},[51815],{"type":603,"value":51816},"　　Blocking——ChanceOfBlocking搁挡机率",{"type":597,"tag":606,"props":51818,"children":51819},{},[51820],{"type":603,"value":51821},"　　bloodrun——就是杀怪物，吸取经验值了。一般特指在act5出门之后第一个砍人的地方，叫BloodyFoothills。HC玩家经常在那里升级，比牛关更安全。",{"type":597,"tag":606,"props":51823,"children":51824},{},[51825],{"type":603,"value":51826},"　　CB——CrushingBlow压碎性打击",{"type":597,"tag":606,"props":51828,"children":51829},{},[51830],{"type":603,"value":51831},"　　CE——coldenhanched冰冷强化",{"type":597,"tag":606,"props":51833,"children":51834},{},[51835],{"type":603,"value":51836},"　　Char——Character角色",{"type":597,"tag":606,"props":51838,"children":51839},{},[51840],{"type":603,"value":51841},"　　CR——coldresist冰冷抵抗力",{"type":597,"tag":606,"props":51843,"children":51844},{},[51845],{"type":603,"value":51846},"　　dam——Damage伤害值",{"type":597,"tag":606,"props":51848,"children":51849},{},[51850],{"type":603,"value":51851},"　　Def/DR——Defencerating防御度",{"type":597,"tag":606,"props":51853,"children":51854},{},[51855],{"type":603,"value":51856},"　　DEX——dexterity敏捷度",{"type":597,"tag":606,"props":51858,"children":51859},{},[51860],{"type":603,"value":51861},"　　Dr——damagereduce物理伤害减少(物免)",{"type":597,"tag":606,"props":51863,"children":51864},{},[51865],{"type":603,"value":51866},"　　DS——DeadlyStrike致命攻击",{"type":597,"tag":606,"props":51868,"children":51869},{},[51870],{"type":603,"value":51871},"　　Dualleech——(life，mana)双吸",{"type":597,"tag":606,"props":51873,"children":51874},{},[51875],{"type":603,"value":51876},"　　ED——EnhanchedDamage/EnhanceDefense增强伤害/增强防御(多指前者)",{"type":597,"tag":606,"props":51878,"children":51879},{},[51880],{"type":603,"value":51881},"　　Eng/Erg/Nrg——energy能量/精力",{"type":597,"tag":606,"props":51883,"children":51884},{},[51885],{"type":603,"value":51886},"　　Eth——Ethereal/ethrune无形的(物品)/第五号符文，有将目标Defense防御力降至负值的Bug效果，常镶在武器上。",{"type":597,"tag":606,"props":51888,"children":51889},{},[51890],{"type":603,"value":51891},"　　Exp/XP——Experiencepoint经验值",{"type":597,"tag":606,"props":51893,"children":51894},{},[51895],{"type":603,"value":51896},"　　FBR——fastblockingrate快速格挡机率",{"type":597,"tag":606,"props":51898,"children":51899},{},[51900],{"type":603,"value":51901},"　　FCR——Fastcastrate快速施法率",{"type":597,"tag":606,"props":51903,"children":51904},{},[51905],{"type":603,"value":51906},"　　Fr/w——Fastrun/walk快速奔跑/行走",{"type":597,"tag":606,"props":51908,"children":51909},{},[51910],{"type":603,"value":51911},"　　FHR——Fasthitrecover快速打击恢复",{"type":597,"tag":606,"props":51913,"children":51914},{},[51915],{"type":603,"value":51916},"　　FR——fireresist火焰抵抗力",{"type":597,"tag":606,"props":51918,"children":51919},{},[51920],{"type":603,"value":51921},"　　FE——fireenhanched火焰强化",{"type":597,"tag":606,"props":51923,"children":51924},{},[51925],{"type":603,"value":51926},"　　HP——HitPoints生命值(life)",{"type":597,"tag":606,"props":51928,"children":51929},{},[51930],{"type":603,"value":51931},"　　IAS——IncreasedAttackSpeed提升攻击速度。繁体中文版误译成提升xx%的准确率，繁体中文版的改良补丁有修正。",{"type":597,"tag":606,"props":51933,"children":51934},{},[51935],{"type":603,"value":51936},"　　ITD——IgnoresTarget‘sDefense忽视目标防御",{"type":597,"tag":606,"props":51938,"children":51939},{},[51940],{"type":603,"value":51941},"　　KB——Knockback击退",{"type":597,"tag":606,"props":51943,"children":51944},{},[51945],{"type":603,"value":51946},"　　LE——lightningenhanched闪电强化",{"type":597,"tag":606,"props":51948,"children":51949},{},[51950],{"type":603,"value":51951},"　　Leecher吸血鬼，就是汲取他人的XP来达到足够的clvl，相信大家都做过Leecher吧",{"type":597,"tag":606,"props":51953,"children":51954},{},[51955],{"type":603,"value":51956},"　　life生命值又称：HitPoints(HP)",{"type":597,"tag":606,"props":51958,"children":51959},{},[51960],{"type":603,"value":51961},"　　lightningenhanchedmultishot闪电强化兼多重射击(祈祷你别碰上吧@-@)",{"type":597,"tag":606,"props":51963,"children":51964},{},[51965],{"type":603,"value":51966},"　　LR——lightningresist闪电抵抗力",{"type":597,"tag":606,"props":51968,"children":51969},{},[51970],{"type":603,"value":51971},"　　mana法力值",{"type":597,"tag":606,"props":51973,"children":51974},{},[51975],{"type":603,"value":51976},"　　mod——itemmodifier(prefixesandsuffixes)物品属性(前缀及后缀)",{"type":597,"tag":606,"props":51978,"children":51979},{},[51980],{"type":603,"value":51981},"　　MF——MagicFind魔法物品找寻",{"type":597,"tag":606,"props":51983,"children":51984},{},[51985],{"type":603,"value":51986},"　　Newbie——就是你了(新手)",{"type":597,"tag":606,"props":51988,"children":51989},{},[51990],{"type":603,"value":51991},"　　NPC——Nonplayercharacter非玩家角色",{"type":597,"tag":606,"props":51993,"children":51994},{},[51995],{"type":603,"value":51996},"　　PD——poisondamage毒素伤害(骗点？@_@)",{"type":597,"tag":606,"props":51998,"children":51999},{},[52000],{"type":603,"value":52001},"　　PI——Physicalimmune物理免疫",{"type":597,"tag":606,"props":52003,"children":52004},{},[52005],{"type":603,"value":52006},"　　PR——poisonresist毒素抵抗力",{"type":597,"tag":606,"props":52008,"children":52009},{},[52010],{"type":603,"value":52011},"　　Req——Required/Requirement需求",{"type":597,"tag":606,"props":52013,"children":52014},{},[52015],{"type":603,"value":52016},"　　res——Resistance元素抵抗(四防)",{"type":597,"tag":606,"props":52018,"children":52019},{},[52020],{"type":603,"value":52021},"　　slvl——Skilllevel技能等级",{"type":597,"tag":606,"props":52023,"children":52024},{},[52025],{"type":603,"value":52026},"　　stamina耐力值",{"type":597,"tag":606,"props":52028,"children":52029},{},[52030],{"type":603,"value":52031},"　　STR——strength强壮度/力量",{"type":597,"tag":606,"props":52033,"children":52034},{},[52035],{"type":603,"value":52036},"　　TP——TownPortal/Teleport城镇传送之门/傳送(女巫技能)",{"type":597,"tag":606,"props":52038,"children":52039},{},[52040],{"type":603,"value":52041},"　　UnID——Unidentify未鉴定",{"type":597,"tag":606,"props":52043,"children":52044},{},[52045],{"type":603,"value":52046},"　　VIT——vitality活力/体力值",{"type":597,"tag":606,"props":52048,"children":52049},{},[52050],{"type":603,"value":52051},"　　WP——Waypoint传送小站",{"type":597,"tag":606,"props":52053,"children":52054},{},[52055],{"type":603,"value":52056},"　　XP/Exp——Experiencepoint经验值",{"type":597,"tag":606,"props":52058,"children":52059},{},[52060],{"type":603,"value":52061},"　　增补术语：",{"type":597,"tag":606,"props":52063,"children":52064},{},[52065],{"type":603,"value":52066},"　　BOT——英文Robot的简写，通指各种自动机器人的游戏外挂，譬如KPBOT(自动KP机器人)，SHOPBOT(自动购物机器人)",{"type":597,"tag":606,"props":52068,"children":52069},{},[52070],{"type":603,"value":52071},"　　Dupe——英文duplicate的简写，指复制的装备",{"type":597,"tag":606,"props":52073,"children":52074},{},[52075],{"type":603,"value":52076},"　　Legit——合法物品，指从游戏中真真生成的非Dupe物品(包括BOT打出的物品)，交易用语",{"type":597,"tag":606,"props":52078,"children":52079},{},[52080],{"type":603,"value":52081},"　　Ith——某种利用hack工具制造的Bug物品,多为武器，具有极为变态的伤害值及属性",{"type":597,"tag":606,"props":52083,"children":52084},{},[52085],{"type":603,"value":52086},"　　cg——ChippedGem碎裂的宝石",{"type":597,"tag":606,"props":52088,"children":52089},{},[52090],{"type":603,"value":52091},"　　pg——PerfectGem完美的宝石",{"type":597,"tag":606,"props":52093,"children":52094},{},[52095],{"type":603,"value":52096},"　　PT——PerfectTopaz完美的黄宝石",{"type":597,"tag":606,"props":52098,"children":52099},{},[52100],{"type":603,"value":52101},"　　Jewels——珠宝",{"type":597,"tag":606,"props":52103,"children":52104},{},[52105],{"type":603,"value":52106},"　　Rune——符文",{"type":597,"tag":606,"props":52108,"children":52109},{},[52110],{"type":603,"value":52111},"　　SC——smallcharm小护身符，一般特指7%MF的smallcharm",{"type":597,"tag":606,"props":52113,"children":52114},{},[52115],{"type":603,"value":52116},"　　LC——LargeCharms大型护身符",{"type":597,"tag":606,"props":52118,"children":52119},{},[52120],{"type":603,"value":52121},"　　GC——GrandCharms超大型护身符",{"type":597,"tag":606,"props":52123,"children":52124},{},[52125],{"type":603,"value":52126},"　　cube——TheHoradriccube赫拉迪克方块，常做动词用，指用Cube转化或合成物品的行为",{"type":597,"tag":606,"props":52128,"children":52129},{},[52130],{"type":603,"value":52131},"　　Craft——指物品的手工合成，即其英文原意",{"type":597,"tag":606,"props":52133,"children":52134},{},[52135],{"type":603,"value":52136},"　　MBow——MatriarchalBow女族長之弓，用做DIY合成Curel蓝色Bow的材料，要求其Ilvl物品等级>87。",{"type":597,"tag":606,"props":52138,"children":52139},{},[52140],{"type":603,"value":52141},"　　N‘sc或B‘sc——通指Hell的Baal巴爾(怪物等级Mlvl=95)、Nihlathaks尼塞拉克(怪物等级Mlvl=98)掉出的SC。整个游戏中只有这二位老大出产的SC才可能合出那几种高元素或毒伤害前缀的SC(其Ilvl≥95)。Baal巴爾、Nihlathaks尼塞拉克掉出的GC没什么特别用处。",{"type":597,"tag":606,"props":52143,"children":52144},{},[52145],{"type":603,"value":52146},"　　Diadem權冠——6PerfectSkulls合成RareCirclets稀有头缳用的材料，因为Diadems总能保持Alvl99，能够合出任何可能的词缀。亮黄的RareDiadem或白色的Diadem(可以利用Imbue任务将之造成亮黄的)都可以用做材料。",{"type":597,"tag":606,"props":52148,"children":52149},{},[52150],{"type":603,"value":52151},"　　Clvl—Characterlevel角色等级，很简单的概念，就是指玩家自己角色的级别",{"type":597,"tag":606,"props":52153,"children":52154},{},[52155],{"type":603,"value":52156},"　　Mlvl——MonsterLevel怪物等级，游戏代码中对三个难度的每一个怪物都有固定的等级设定。普通怪物从1-90级，champions，bosses，SuperUniques相对其同类型的普通怪物会加几个等级。譬如Hell的Baal巴爾其怪物等级Mlvl=95、Nihlathaks尼塞拉克其怪物等级Mlvl=98，它们能够出产Cube用的N‘sc。",{"type":597,"tag":606,"props":52158,"children":52159},{},[52160],{"type":603,"value":52161},"　　Ilvl——ItemLevel物品等级，也就是不少玩家俗称的物品内部等级；它是一个变动的数字，其数值就等于各游戏难度掉落该物品的怪物(或者箱子)等级(Mlvl-MonsterLevel)；目前的新版地图都具有了显示怪物等级的功能，省了大家再去翻看资料了。唯一要注意的是不要把怪物等级(Mlvl-MonsterLevel)和怪物所属的的TC-TreasureClass(财宝阶层)混淆",{"type":597,"tag":606,"props":52163,"children":52164},{},[52165],{"type":603,"value":52166},"　　TC——TreasureClass财宝阶层，游戏中划分一组相近物品的游戏代码术语，用于决定物品的生成。玩家们谈论TC时通常会涉及到武器和防具其中之一。武器和防具各自有30个TCs相对应，从3-90，每隔3升一级。",{"type":597,"tag":606,"props":52168,"children":52169},{},[52170],{"type":603,"value":52171},"　　Alvl——AffixLevel词缀等级，游戏中对每一个魔法前缀和后缀有相应的等级设定，这将决定什么样的Ilvl物品等级才能出现它们",{"type":597,"tag":606,"props":52173,"children":52174},{},[52175],{"type":603,"value":52176},"ama:\nBowazon使用Bow或Crossbow类武器为主要攻击手段的Amazon；",{"type":597,"tag":606,"props":52178,"children":52179},{},[52180],{"type":603,"value":52181},"　　Jabazon使用Spears类武器，并以Jab为主要攻击手段的Amazon；",{"type":597,"tag":606,"props":52183,"children":52184},{},[52185],{"type":603,"value":52186},"　　Javazon使用投掷类(主要是Javelins标枪)武器，并以Lightningfury或PlagueJavelin为主要攻击手段的Amazon；",{"type":597,"tag":606,"props":52188,"children":52189},{},[52190],{"type":603,"value":52191},"　　BowandCrossbow——弓箭和弩箭技能树——弓和十字弓技能",{"type":597,"tag":606,"props":52193,"children":52194},{},[52195],{"type":603,"value":52196},"　　MagicArrow——魔法箭——魔法箭；简称",{"type":597,"tag":606,"props":52198,"children":52199},{},[52200],{"type":603,"value":52201},"　　FireArrow——火之箭——火焰箭；简称",{"type":597,"tag":606,"props":52203,"children":52204},{},[52205],{"type":603,"value":52206},"　　ColdArrow——冷之箭——冰箭；",{"type":597,"tag":606,"props":52208,"children":52209},{},[52210],{"type":603,"value":52211},"　　MultipleShot——多重打击——多重箭；简称",{"type":597,"tag":606,"props":52213,"children":52214},{},[52215],{"type":603,"value":52216},"　　ExplodingArrow——爆破箭——爆裂箭；",{"type":597,"tag":606,"props":52218,"children":52219},{},[52220],{"type":603,"value":52221},"　　IceArrow——冰之箭——急凍箭；",{"type":597,"tag":606,"props":52223,"children":52224},{},[52225],{"type":603,"value":52226},"　　GuidedArrow——向导之箭——導引箭；简称",{"type":597,"tag":606,"props":52228,"children":52229},{},[52230],{"type":603,"value":52231},"　　Strafe——惩罚——砲轟；俗称:扫射",{"type":597,"tag":606,"props":52233,"children":52234},{},[52235],{"type":603,"value":52236},"　　ImmolatingArrow——火墙箭——犧牲之箭；简称",{"type":597,"tag":606,"props":52238,"children":52239},{},[52240],{"type":603,"value":52241},"　　FreezingArrow——冷冻箭——凍結之箭；简称",{"type":597,"tag":606,"props":52243,"children":52244},{},[52245],{"type":603,"value":52246},"　　PassiveandMagic——被动与魔法技能——被動和魔法技能",{"type":597,"tag":606,"props":52248,"children":52249},{},[52250],{"type":603,"value":52251},"　　InnerSight——心灵视觉——内視；",{"type":597,"tag":606,"props":52253,"children":52254},{},[52255],{"type":603,"value":52256},"　　CriticalShot——临界一击——致命攻擊；简称",{"type":597,"tag":606,"props":52258,"children":52259},{},[52260],{"type":603,"value":52261},"　　Dodge——躲避——閃避；",{"type":597,"tag":606,"props":52263,"children":52264},{},[52265],{"type":603,"value":52266},"　　SlowMissiles——缓慢攻击——慢速箭；简称",{"type":597,"tag":606,"props":52268,"children":52269},{},[52270],{"type":603,"value":52271},"　　Avoid——消除——躲避；",{"type":597,"tag":606,"props":52273,"children":52274},{},[52275],{"type":603,"value":52276},"　　Penetrate——渗透——刺入；",{"type":597,"tag":606,"props":52278,"children":52279},{},[52280],{"type":603,"value":52281},"　　Decoy——诱骗——誘餌；",{"type":597,"tag":606,"props":52283,"children":52284},{},[52285],{"type":603,"value":52286},"　　Evade——规避——迴避；",{"type":597,"tag":606,"props":52288,"children":52289},{},[52290],{"type":603,"value":52291},"　　Valkyrie——瓦尔基里——女武神；简称",{"type":597,"tag":606,"props":52293,"children":52294},{},[52295],{"type":603,"value":52296},"　　Pierce——刺穿——穿刺；",{"type":597,"tag":606,"props":52298,"children":52299},{},[52300],{"type":603,"value":52301},"　　JavelinandSpear——标枪和魔法技能树——標槍和長矛技能",{"type":597,"tag":606,"props":52303,"children":52304},{},[52305],{"type":603,"value":52306},"　　Jab——猛刺——戳刺；",{"type":597,"tag":606,"props":52308,"children":52309},{},[52310],{"type":603,"value":52311},"　　PowerStrike——能量穿透——威力一擊；",{"type":597,"tag":606,"props":52313,"children":52314},{},[52315],{"type":603,"value":52316},"　　PoisonJavelin——毒之枪——毒槍；",{"type":597,"tag":606,"props":52318,"children":52319},{},[52320],{"type":603,"value":52321},"　　Impale——穿刺——刺爆；",{"type":597,"tag":606,"props":52323,"children":52324},{},[52325],{"type":603,"value":52326},"　　LightningBolt——闪电——閃電球；",{"type":597,"tag":606,"props":52328,"children":52329},{},[52330],{"type":603,"value":52331},"　　ChargedStrike——冲刺打击——充能一擊",{"type":597,"tag":606,"props":52333,"children":52334},{},[52335],{"type":603,"value":52336},"　　PlagueJavelin——瘟疫之枪——瘟疫標槍；",{"type":597,"tag":606,"props":52338,"children":52339},{},[52340],{"type":603,"value":52341},"　　Fend——保护——擊退；",{"type":597,"tag":606,"props":52343,"children":52344},{},[52345],{"type":603,"value":52346},"　　LightningStrike——闪电打击——閃電攻擊；",{"type":597,"tag":606,"props":52348,"children":52349},{},[52350],{"type":603,"value":52351},"　　Lightningfury——狂暴闪电——閃電之怒；简称",{"type":597,"tag":606,"props":52353,"children":52354},{},[52355],{"type":603,"value":52356},"　　亚马逊常用武器装备中英文名称对照：",{"type":597,"tag":606,"props":52358,"children":52359},{},[52360],{"type":603,"value":52361},"　　Buriza-DoKyanon布理撒多凱南俗称：玻璃渣/大炮；",{"type":597,"tag":606,"props":52363,"children":52364},{},[52365],{"type":603,"value":52366},"　　CruelMatriarchalBow残忍的女族長之弓。最常见的DIYBow；简称：CMBow",{"type":597,"tag":606,"props":52368,"children":52369},{},[52370],{"type":603,"value":52371},"　　DIYBow就是玩家自己cube或shopping来再镶以40ED/15IASJewel的Bow。以其无可比拟的高速Frame为部分玩家所喜好；",{"type":597,"tag":606,"props":52373,"children":52374},{},[52375],{"type":603,"value":52376},"　　Eaglehorn鷹號角简称；或称EBow",{"type":597,"tag":606,"props":52378,"children":52379},{},[52380],{"type":603,"value":52381},"　　GoldstrikeArch金色的曲线；",{"type":597,"tag":606,"props":52383,"children":52384},{},[52385],{"type":603,"value":52386},"　　Lycander‘sAim雷山得的指標；",{"type":597,"tag":606,"props":52388,"children":52389},{},[52390],{"type":603,"value":52391},"　　Lycander‘sFlank雷山得的側腹；",{"type":597,"tag":606,"props":52393,"children":52394},{},[52395],{"type":603,"value":52396},"　　M‘avina‘sCaster马维娜的施展------马维娜之战斗诗歌；",{"type":597,"tag":606,"props":52398,"children":52399},{},[52400],{"type":603,"value":52401},"　　Titan‘sRevenge泰坦的復仇简称；",{"type":597,"tag":606,"props":52403,"children":52404},{},[52405],{"type":603,"value":52406},"　　Windforce風之力简称；\nasn:\nTrapper以Traps陷阱系技能为主要攻击方式的Assassin；",{"type":597,"tag":606,"props":52408,"children":52409},{},[52410],{"type":603,"value":52411},"　　MAAsn以MartialArt武术系技能为主要攻击方式的Assassin；",{"type":597,"tag":606,"props":52413,"children":52414},{},[52415],{"type":603,"value":52416},"　　c/cAsn使用claw+claw双爪作战的Assassin;又称：DualclawAsn；",{"type":597,"tag":606,"props":52418,"children":52419},{},[52420],{"type":603,"value":52421},"　　c/sAsn使用claw+shield爪盾组合方式作战的Assassin；",{"type":597,"tag":606,"props":52423,"children":52424},{},[52425],{"type":603,"value":52426},"　　DualclawAsn即c/cAsn；",{"type":597,"tag":606,"props":52428,"children":52429},{},[52430],{"type":603,"value":52431},"　　MartialArt——武术技能树——武學藝朮简称",{"type":597,"tag":606,"props":52433,"children":52434},{},[52435],{"type":603,"value":52436},"　　TigerStrike——虎击——虎擊；简称",{"type":597,"tag":606,"props":52438,"children":52439},{},[52440],{"type":603,"value":52441},"　　DragonTalon——龙足——龍爪；",{"type":597,"tag":606,"props":52443,"children":52444},{},[52445],{"type":603,"value":52446},"　　DragonClaw——龙爪——雙龍爪；简称",{"type":597,"tag":606,"props":52448,"children":52449},{},[52450],{"type":603,"value":52451},"　　FistsofFire——火拳——焰拳；简称",{"type":597,"tag":606,"props":52453,"children":52454},{},[52455],{"type":603,"value":52456},"　　CobraStrike——眼镜蛇之击——眼鏡蛇攻擊；简称",{"type":597,"tag":606,"props":52458,"children":52459},{},[52460],{"type":603,"value":52461},"　　DragonTail——龙尾——神龍擺尾；简称",{"type":597,"tag":606,"props":52463,"children":52464},{},[52465],{"type":603,"value":52466},"　　ClawsofThunder——雷鸣爪——雷電爪；简称",{"type":597,"tag":606,"props":52468,"children":52469},{},[52470],{"type":603,"value":52471},"　　BladesofIce——冰之刃——寒冰刃；简称",{"type":597,"tag":606,"props":52473,"children":52474},{},[52475],{"type":603,"value":52476},"　　DragonFlight——龙翔——飛龍在天；简称",{"type":597,"tag":606,"props":52478,"children":52479},{},[52480],{"type":603,"value":52481},"　　PhoenixStrike——凤舞——鳳凰攻擊；简称",{"type":597,"tag":606,"props":52483,"children":52484},{},[52485],{"type":603,"value":52486},"　　ShadowDisciplines——幻影技能树——影子訓練",{"type":597,"tag":606,"props":52488,"children":52489},{},[52490],{"type":603,"value":52491},"　　ClawMastery——钢爪精通——支配利爪；简称",{"type":597,"tag":606,"props":52493,"children":52494},{},[52495],{"type":603,"value":52496},"　　PsychicHammer——通灵之锤——心靈戰槌；",{"type":597,"tag":606,"props":52498,"children":52499},{},[52500],{"type":603,"value":52501},"　　BurstofSpeed——爆发速度——加速；简称",{"type":597,"tag":606,"props":52503,"children":52504},{},[52505],{"type":603,"value":52506},"　　CloakofShadows——幻影披风——魔影斗篷；简称",{"type":597,"tag":606,"props":52508,"children":52509},{},[52510],{"type":603,"value":52511},"　　WeaponBlock——武器格挡——武器格擋；简称",{"type":597,"tag":606,"props":52513,"children":52514},{},[52515],{"type":603,"value":52516},"　　Fade——消退——能量消解；",{"type":597,"tag":606,"props":52518,"children":52519},{},[52520],{"type":603,"value":52521},"　　ShadowWarrior——幻影战士——影子戰士；",{"type":597,"tag":606,"props":52523,"children":52524},{},[52525],{"type":603,"value":52526},"　　MindBlast——意识攻击波——精神爆震；简称",{"type":597,"tag":606,"props":52528,"children":52529},{},[52530],{"type":603,"value":52531},"　　Venom——毒液——毒牙；",{"type":597,"tag":606,"props":52533,"children":52534},{},[52535],{"type":603,"value":52536},"　　ShadowMaster——幻影精通——支配影子；简称",{"type":597,"tag":606,"props":52538,"children":52539},{},[52540],{"type":603,"value":52541},"　　Traps——陷阱技能树——陷阱",{"type":597,"tag":606,"props":52543,"children":52544},{},[52545],{"type":603,"value":52546},"　　FireBlast——火焰冲击波——火焰爆震；",{"type":597,"tag":606,"props":52548,"children":52549},{},[52550],{"type":603,"value":52551},"　　ShockWeb——电击网——閃電網；",{"type":597,"tag":606,"props":52553,"children":52554},{},[52555],{"type":603,"value":52556},"　　BladeSentinel——刀刃哨兵——刃之守衛；",{"type":597,"tag":606,"props":52558,"children":52559},{},[52560],{"type":603,"value":52561},"　　ChargedBoltSentry——闪电岗哨——電能守衛；",{"type":597,"tag":606,"props":52563,"children":52564},{},[52565],{"type":603,"value":52566},"　　WakeOfFire——火之复苏——火焰復甦；简称",{"type":597,"tag":606,"props":52568,"children":52569},{},[52570],{"type":603,"value":52571},"　　BladeFury——狂暴之刃——刃之怒；",{"type":597,"tag":606,"props":52573,"children":52574},{},[52575],{"type":603,"value":52576},"　　LightningSentry——闪电陷阱——雷光守衛；简称",{"type":597,"tag":606,"props":52578,"children":52579},{},[52580],{"type":603,"value":52581},"　　WakeOfInferno——地狱火之复苏——復甦獄火；",{"type":597,"tag":606,"props":52583,"children":52584},{},[52585],{"type":603,"value":52586},"　　DeathSentry——死亡陷阱——亡者守衛；简称",{"type":597,"tag":606,"props":52588,"children":52589},{},[52590],{"type":603,"value":52591},"　　BladeShield——刀盾——刀刃之盾；",{"type":597,"tag":606,"props":52593,"children":52594},{},[52595],{"type":603,"value":52596},"　　刺客常用武器装备中英文名称对照：",{"type":597,"tag":606,"props":52598,"children":52599},{},[52600],{"type":603,"value":52601},"　　Bartuc‘sCut-Throat巴特克的猛擊；",{"type":597,"tag":606,"props":52603,"children":52604},{},[52605],{"type":603,"value":52606},"　　Natalya‘sMark娜塔垭的标记------娜塔亚的非难俗称：绿爪，AsnSetClaws",{"type":597,"tag":606,"props":52608,"children":52609},{},[52610],{"type":603,"value":52611},"　　还有部分Cruel前缀的Elite蓝色爪(有些是Ethereal无形的)；比如常见的CruelScissorsSuwayyah残忍的近身剪；简称",{"type":597,"tag":606,"props":52613,"children":52614},{},[52615],{"type":603,"value":52616},"　　CruelScissorsSuwayyahofQuickness残忍之快速的近身剪；简称",{"type":597,"tag":606,"props":52618,"children":52619},{},[52620],{"type":603,"value":52621},"bar:\nSsbar以Sword+Shield剑盾组合方式作战的Barbarian，目前的主流Bar玩法，多以WW为主要攻击技能；",{"type":597,"tag":606,"props":52623,"children":52624},{},[52625],{"type":603,"value":52626},"　　Throwingbar使用投掷类(Javelins标枪较好)武器，以Doublethrow为主要攻击技能的Barbarian；",{"type":597,"tag":606,"props":52628,"children":52629},{},[52630],{"type":603,"value":52631},"　　Frenzybar使用双手武器，以Frenzy为主要攻击技能的Barbarian；",{"type":597,"tag":606,"props":52633,"children":52634},{},[52635],{"type":603,"value":52636},"　　Spearian以Spears类武器为主要攻击手段的Barbarian；",{"type":597,"tag":606,"props":52638,"children":52639},{},[52640],{"type":603,"value":52641},"　　WarCries——战斗呼声技能树——呐喊",{"type":597,"tag":606,"props":52643,"children":52644},{},[52645],{"type":603,"value":52646},"　　Howl——怒吼——狂嚎；",{"type":597,"tag":606,"props":52648,"children":52649},{},[52650],{"type":603,"value":52651},"　　Findpotion——寻找药剂——找尋藥劑；",{"type":597,"tag":606,"props":52653,"children":52654},{},[52655],{"type":603,"value":52656},"　　Taunt——辱骂——嘲弄；",{"type":597,"tag":606,"props":52658,"children":52659},{},[52660],{"type":603,"value":52661},"　　Shout——咆哮——大叫；",{"type":597,"tag":606,"props":52663,"children":52664},{},[52665],{"type":603,"value":52666},"　　Finditem——寻找物品——找尋物品；",{"type":597,"tag":606,"props":52668,"children":52669},{},[52670],{"type":603,"value":52671},"　　Battlecry——战斗口号——戰嚎；",{"type":597,"tag":606,"props":52673,"children":52674},{},[52675],{"type":603,"value":52676},"　　Battleorders——战斗号令——戰鬥體制；简称",{"type":597,"tag":606,"props":52678,"children":52679},{},[52680],{"type":603,"value":52681},"　　GrimWard——严密防护——殘酷嚇阻；",{"type":597,"tag":606,"props":52683,"children":52684},{},[52685],{"type":603,"value":52686},"　　Warcry——战争呼声——戰鬥狂嚎；",{"type":597,"tag":606,"props":52688,"children":52689},{},[52690],{"type":603,"value":52691},"　　Battlecommand——战斗命令——戰鬥指揮；简称",{"type":597,"tag":606,"props":52693,"children":52694},{},[52695],{"type":603,"value":52696},"　　CombatMasteries——战斗动作掌握技能树——戰鬥專家",{"type":597,"tag":606,"props":52698,"children":52699},{},[52700],{"type":603,"value":52701},"　　Swordmastery——剑术掌握——支配長劍；简称",{"type":597,"tag":606,"props":52703,"children":52704},{},[52705],{"type":603,"value":52706},"　　Axemastery——战斧掌握——支配斧頭；",{"type":597,"tag":606,"props":52708,"children":52709},{},[52710],{"type":603,"value":52711},"　　Macemastery——钉头槌掌握——支配釘頭槌；",{"type":597,"tag":606,"props":52713,"children":52714},{},[52715],{"type":603,"value":52716},"　　Polearmmastery——长杆武器掌握——支配長棍；",{"type":597,"tag":606,"props":52718,"children":52719},{},[52720],{"type":603,"value":52721},"　　Throwingmastery——投掷武器掌握——支配飛擲；",{"type":597,"tag":606,"props":52723,"children":52724},{},[52725],{"type":603,"value":52726},"　　Spearmastery——枪矛掌握——支配長矛；",{"type":597,"tag":606,"props":52728,"children":52729},{},[52730],{"type":603,"value":52731},"　　Increasedstamina——增强持久力——增加耐力；",{"type":597,"tag":606,"props":52733,"children":52734},{},[52735],{"type":603,"value":52736},"　　Ironskin——钢铁皮肤——鉄布杉；简称",{"type":597,"tag":606,"props":52738,"children":52739},{},[52740],{"type":603,"value":52741},"　　Increasedspeed——增强移动力——加速；",{"type":597,"tag":606,"props":52743,"children":52744},{},[52745],{"type":603,"value":52746},"　　Naturalresistance——自然抗力——自然抵抗；简称",{"type":597,"tag":606,"props":52748,"children":52749},{},[52750],{"type":603,"value":52751},"　　Combat——战斗技能树——戰鬥技能",{"type":597,"tag":606,"props":52753,"children":52754},{},[52755],{"type":603,"value":52756},"　　Bash——怒殴——重擊；",{"type":597,"tag":606,"props":52758,"children":52759},{},[52760],{"type":603,"value":52761},"　　Leap——飞跃——跳躍；",{"type":597,"tag":606,"props":52763,"children":52764},{},[52765],{"type":603,"value":52766},"　　Doubleswing——双重挥舞——雙手揮擊；",{"type":597,"tag":606,"props":52768,"children":52769},{},[52770],{"type":603,"value":52771},"　　Stun——晕眩——擊昏；",{"type":597,"tag":606,"props":52773,"children":52774},{},[52775],{"type":603,"value":52776},"　　Doublethrow——双重投掷——雙手投擲；简称",{"type":597,"tag":606,"props":52778,"children":52779},{},[52780],{"type":603,"value":52781},"　　Leapattack——跳跃攻击——跳躍攻擊；简称",{"type":597,"tag":606,"props":52783,"children":52784},{},[52785],{"type":603,"value":52786},"　　Concentrate——集中——專心；",{"type":597,"tag":606,"props":52788,"children":52789},{},[52790],{"type":603,"value":52791},"　　Frenzy——狂怒——狂亂；",{"type":597,"tag":606,"props":52793,"children":52794},{},[52795],{"type":603,"value":52796},"　　Whirlwind——旋风——旋風；简称",{"type":597,"tag":606,"props":52798,"children":52799},{},[52800],{"type":603,"value":52801},"　　Berserk——狂暴——狂戰士；",{"type":597,"tag":606,"props":52803,"children":52804},{},[52805],{"type":603,"value":52806},"　　野蛮人常用武器装备中英文名称对照：",{"type":597,"tag":606,"props":52808,"children":52809},{},[52810],{"type":603,"value":52811},"　　BulKathosSacredCharge布爾凱索的神聖代價------布爾凱索的孩子俗称：Set大剑；",{"type":597,"tag":606,"props":52813,"children":52814},{},[52815],{"type":603,"value":52816},"　　BulKathosTribalGuardian布爾凱索的部族守护------布爾凱索的孩子俗称：Set小剑；",{"type":597,"tag":606,"props":52818,"children":52819},{},[52820],{"type":603,"value":52821},"　　CruelColossusBlade残忍的巨神之刃简称：CCB；",{"type":597,"tag":606,"props":52823,"children":52824},{},[52825],{"type":603,"value":52826},"　　CruelColossussword残忍的巨神之剑简称：CCS；",{"type":597,"tag":606,"props":52828,"children":52829},{},[52830],{"type":603,"value":52831},"　　CruelColossusBladeofQuickness残忍之快速的巨神之刃简称：就是著名的CCBQ了；",{"type":597,"tag":606,"props":52833,"children":52834},{},[52835],{"type":603,"value":52836},"　　CruelColossusBladeofSwiftness残忍之敏捷的巨神之刃简称：CCBS；",{"type":597,"tag":606,"props":52838,"children":52839},{},[52840],{"type":603,"value":52841},"　　CruelBeserkerAxeofQuickness残忍之快速的狂戰士斧简称：CBAQ;",{"type":597,"tag":606,"props":52843,"children":52844},{},[52845],{"type":603,"value":52846},"　　CruelHyperionJavelin残忍之亥伯龍之槍(throwingbar推荐选用)",{"type":597,"tag":606,"props":52848,"children":52849},{},[52850],{"type":603,"value":52851},"　　CruelWingedHarpoon残忍之翼魚叉(throwingbar推荐选用)",{"type":597,"tag":606,"props":52853,"children":52854},{},[52855],{"type":603,"value":52856},"　　Doombringer末日毀滅者；简称",{"type":597,"tag":606,"props":52858,"children":52859},{},[52860],{"type":603,"value":52861},"　　TheGrandfather祖父;简称：GF(女朋友？@_@:$)；",{"type":597,"tag":606,"props":52863,"children":52864},{},[52865],{"type":603,"value":52866},"　　Lightsabre光之軍刀；简称",{"type":597,"tag":606,"props":52868,"children":52869},{},[52870],{"type":603,"value":52871},"　　fury神符之语剑狂暴，常用BalrogBlade制作；\ndru:\nElementalistDruid以Elemental元素系技能为主要攻击方式的Druid；",{"type":597,"tag":606,"props":52873,"children":52874},{},[52875],{"type":603,"value":52876},"　　Grizzlygeddon使用Armageddon+SummonGrizzly为主要攻击技能的Druid；",{"type":597,"tag":606,"props":52878,"children":52879},{},[52880],{"type":603,"value":52881},"　　WWdruid即werewolfdruid，就是变狼的Druid；",{"type":597,"tag":606,"props":52883,"children":52884},{},[52885],{"type":603,"value":52886},"　　Elemental——自然力技能树——元素",{"type":597,"tag":606,"props":52888,"children":52889},{},[52890],{"type":603,"value":52891},"　　Firestorm——暴火——火風爆；",{"type":597,"tag":606,"props":52893,"children":52894},{},[52895],{"type":603,"value":52896},"　　MoltenBoulder——熔石——熔漿巨岩；",{"type":597,"tag":606,"props":52898,"children":52899},{},[52900],{"type":603,"value":52901},"　　ArcticBlast——北极冰风——極地風暴；简称",{"type":597,"tag":606,"props":52903,"children":52904},{},[52905],{"type":603,"value":52906},"　　Fissure——裂缝——火山爆；",{"type":597,"tag":606,"props":52908,"children":52909},{},[52910],{"type":603,"value":52911},"　　CycloneArmor——暴风盔甲——颶風裝甲；简称",{"type":597,"tag":606,"props":52913,"children":52914},{},[52915],{"type":603,"value":52916},"　　Twister——缠绕——縑鼬風；",{"type":597,"tag":606,"props":52918,"children":52919},{},[52920],{"type":603,"value":52921},"　　Volcano——火山——火山；",{"type":597,"tag":606,"props":52923,"children":52924},{},[52925],{"type":603,"value":52926},"　　Tornado——龙卷风——龍捲風；",{"type":597,"tag":606,"props":52928,"children":52929},{},[52930],{"type":603,"value":52931},"　　Hurricane——飓风——暴風；",{"type":597,"tag":606,"props":52933,"children":52934},{},[52935],{"type":603,"value":52936},"　　Armageddon——末日战唱—毀天滅地；",{"type":597,"tag":606,"props":52938,"children":52939},{},[52940],{"type":603,"value":52941},"　　ShapeShifting——形态转变技能树——外型變形",{"type":597,"tag":606,"props":52943,"children":52944},{},[52945],{"type":603,"value":52946},"　　Werewolf——人狼——狼人變化；",{"type":597,"tag":606,"props":52948,"children":52949},{},[52950],{"type":603,"value":52951},"　　Lycanthropy——变狼狂——變形朮；",{"type":597,"tag":606,"props":52953,"children":52954},{},[52955],{"type":603,"value":52956},"　　Werebear——人熊——熊人變化；",{"type":597,"tag":606,"props":52958,"children":52959},{},[52960],{"type":603,"value":52961},"　　Maul——大槌——撞槌；",{"type":597,"tag":606,"props":52963,"children":52964},{},[52965],{"type":603,"value":52966},"　　FeralRage——野兽的愤怒——野性狂暴；",{"type":597,"tag":606,"props":52968,"children":52969},{},[52970],{"type":603,"value":52971},"　　FireClaws——火爪——焰爪；",{"type":597,"tag":606,"props":52973,"children":52974},{},[52975],{"type":603,"value":52976},"　　Rabies——狂犬——狂犬病；",{"type":597,"tag":606,"props":52978,"children":52979},{},[52980],{"type":603,"value":52981},"　　ShockWave——冲击波——震波；",{"type":597,"tag":606,"props":52983,"children":52984},{},[52985],{"type":603,"value":52986},"　　Hunger——饥饿——飢餓；",{"type":597,"tag":606,"props":52988,"children":52989},{},[52990],{"type":603,"value":52991},"　　Fury——狂怒——狂怒；",{"type":597,"tag":606,"props":52993,"children":52994},{},[52995],{"type":603,"value":52996},"　　Summoning——召唤技能树——召喚",{"type":597,"tag":606,"props":52998,"children":52999},{},[53000],{"type":603,"value":53001},"　　Raven——乌鸦——烏鴉；",{"type":597,"tag":606,"props":53003,"children":53004},{},[53005],{"type":603,"value":53006},"　　PoisonCreeper——毒藤——猛毒花藤；",{"type":597,"tag":606,"props":53008,"children":53009},{},[53010],{"type":603,"value":53011},"　　OakSage——橡树贤者——橡木智者；简称",{"type":597,"tag":606,"props":53013,"children":53014},{},[53015],{"type":603,"value":53016},"　　SummonSpiritWolf——召唤精灵狼——召喚鬼狼；",{"type":597,"tag":606,"props":53018,"children":53019},{},[53020],{"type":603,"value":53021},"　　CarrionVine——死腐藤——食尸藤；",{"type":597,"tag":606,"props":53023,"children":53024},{},[53025],{"type":603,"value":53026},"　　HeartofWolverine——狼之心——狼獾之心；简称",{"type":597,"tag":606,"props":53028,"children":53029},{},[53030],{"type":603,"value":53031},"　　SummonDireWolf——召唤恶狼——召喚狂狼；",{"type":597,"tag":606,"props":53033,"children":53034},{},[53035],{"type":603,"value":53036},"　　SolarCreeper——太阳藤蔓)(太陽藤；",{"type":597,"tag":606,"props":53038,"children":53039},{},[53040],{"type":603,"value":53041},"　　SpiritofBarbs——精神倒刺——棘靈；",{"type":597,"tag":606,"props":53043,"children":53044},{},[53045],{"type":603,"value":53046},"　　SummonGrizzly——召唤灰熊——召喚灰熊；简称",{"type":597,"tag":606,"props":53048,"children":53049},{},[53050],{"type":603,"value":53051},"　　德鲁依常用武器装备中英文名称对照：",{"type":597,"tag":606,"props":53053,"children":53054},{},[53055],{"type":603,"value":53056},"　　Baranar‘sStar巴拉那之星；有时可简称为DS;",{"type":597,"tag":606,"props":53058,"children":53059},{},[53060],{"type":603,"value":52361},{"type":597,"tag":606,"props":53062,"children":53063},{},[53064],{"type":603,"value":53065},"　　CruelColossusBladeofQuickness残忍之快速的巨神之刃;简称：就是著名的CCBQ了；",{"type":597,"tag":606,"props":53067,"children":53068},{},[53069],{"type":603,"value":53070},"　　CruelBeserkerAxeofQuickness残忍之快速的狂戰士斧简称：CBAQ",{"type":597,"tag":606,"props":53072,"children":53073},{},[53074],{"type":603,"value":53075},"　　Hellslayer地獄毀滅者；",{"type":597,"tag":606,"props":53077,"children":53078},{},[53079],{"type":603,"value":53080},"　　ImmortalKing‘sStoneCrusher不朽之王的石头压碎者；简称；",{"type":597,"tag":606,"props":53082,"children":53083},{},[53084],{"type":603,"value":53085},"　　Messerschmidt‘sReaver希梅斯特的掠奪；",{"type":597,"tag":606,"props":53087,"children":53088},{},[53089],{"type":603,"value":53090},"　　Schaefer‘sHammer史恰佛之鎚；",{"type":597,"tag":606,"props":53092,"children":53093},{},[53094],{"type":603,"value":53095},"　　TheCraniumBasher碎腦槌；",{"type":597,"tag":606,"props":53097,"children":53098},{},[53099],{"type":603,"value":53100},"nec:",{"type":597,"tag":606,"props":53102,"children":53103},{},[53104],{"type":603,"value":53105},"　　Zookeeper以Summoning为主要技能，辅以各种Curses的Necromancer；",{"type":597,"tag":606,"props":53107,"children":53108},{},[53109],{"type":603,"value":53110},"　　Meleemancer以近身格斗为主要攻击手段，而不依赖召唤大批奴仆的肉搏型Necromancer；",{"type":597,"tag":606,"props":53112,"children":53113},{},[53114],{"type":603,"value":53115},"　　Poisonmancer以毒系技能为主要攻击方式，有些以骨系技能辅助的Necromancer；",{"type":597,"tag":606,"props":53117,"children":53118},{},[53119],{"type":603,"value":53120},"　　Venomancer用PoisonDagger攻击的Necromancer",{"type":597,"tag":606,"props":53122,"children":53123},{},[53124],{"type":603,"value":53125},"　　Summoning——召唤系技能树——召喚法術",{"type":597,"tag":606,"props":53127,"children":53128},{},[53129],{"type":603,"value":53130},"　　Skeletonmastery——骷髅掌握——支配骷髏；",{"type":597,"tag":606,"props":53132,"children":53133},{},[53134],{"type":603,"value":53135},"　　Raiseskeleton——复活骷髅——骷髏復甦；",{"type":597,"tag":606,"props":53137,"children":53138},{},[53139],{"type":603,"value":53140},"　　ClayGolem——土之巨人——黏土石魔；简称",{"type":597,"tag":606,"props":53142,"children":53143},{},[53144],{"type":603,"value":53145},"　　GolemMastery——傀儡掌握——支配石魔；简称",{"type":597,"tag":606,"props":53147,"children":53148},{},[53149],{"type":603,"value":53150},"　　Raiseskeletalmage——复活骷髅魔法师——復甦骷髏法師；",{"type":597,"tag":606,"props":53152,"children":53153},{},[53154],{"type":603,"value":53155},"　　BloodGolem——血之巨人——鮮血石魔；简称",{"type":597,"tag":606,"props":53157,"children":53158},{},[53159],{"type":603,"value":53160},"　　Summonedresistance——召唤反抗——召喚抵抗；",{"type":597,"tag":606,"props":53162,"children":53163},{},[53164],{"type":603,"value":53165},"　　IronGolem——钢铁巨人——鋼鐵石魔；简称",{"type":597,"tag":606,"props":53167,"children":53168},{},[53169],{"type":603,"value":53170},"　　FireGolem——火之巨人——火焰石魔；简称",{"type":597,"tag":606,"props":53172,"children":53173},{},[53174],{"type":603,"value":53175},"　　Revive——复兴——重生；",{"type":597,"tag":606,"props":53177,"children":53178},{},[53179],{"type":603,"value":53180},"　　Poisonandbone——毒系骨系技能树——毒素和白骨法術",{"type":597,"tag":606,"props":53182,"children":53183},{},[53184],{"type":603,"value":53185},"　　Teech——牙齿术——牙；",{"type":597,"tag":606,"props":53187,"children":53188},{},[53189],{"type":603,"value":53190},"　　BoneArmor——骨之护甲——白骨裝甲；简称",{"type":597,"tag":606,"props":53192,"children":53193},{},[53194],{"type":603,"value":53195},"　　PoisonDagger——毒之匕首——淬毒匕首；简称(骗点？)",{"type":597,"tag":606,"props":53197,"children":53198},{},[53199],{"type":603,"value":53200},"　　CorpseExplosion+——尸体爆炸术——屍體爆炸；简称",{"type":597,"tag":606,"props":53202,"children":53203},{},[53204],{"type":603,"value":53205},"　　BoneWall——骨墙术——骨墻；",{"type":597,"tag":606,"props":53207,"children":53208},{},[53209],{"type":603,"value":53210},"　　PoisonExplosion——毒气爆炸术——毒爆；",{"type":597,"tag":606,"props":53212,"children":53213},{},[53214],{"type":603,"value":53215},"　　BoneSpear——骨之长矛——骨矛；",{"type":597,"tag":606,"props":53217,"children":53218},{},[53219],{"type":603,"value":53220},"　　BonePrison——骸骨监狱——骨牢；",{"type":597,"tag":606,"props":53222,"children":53223},{},[53224],{"type":603,"value":53225},"　　PoisonNova——毒之雷星——劇毒新星；简称",{"type":597,"tag":606,"props":53227,"children":53228},{},[53229],{"type":603,"value":53230},"　　Bonespirit——骨之灵魂——白骨之魂；简称",{"type":597,"tag":606,"props":53232,"children":53233},{},[53234],{"type":603,"value":53235},"　　Curses——诅咒系技能树——詛咒",{"type":597,"tag":606,"props":53237,"children":53238},{},[53239],{"type":603,"value":53240},"　　AmplifyDamage——加大伤害——傷害加深；简称/Ad",{"type":597,"tag":606,"props":53242,"children":53243},{},[53244],{"type":603,"value":53245},"　　DimVision——视力模糊——微暗靈視；简称",{"type":597,"tag":606,"props":53247,"children":53248},{},[53249],{"type":603,"value":53250},"　　Weaken——弱化——削弱；",{"type":597,"tag":606,"props":53252,"children":53253},{},[53254],{"type":603,"value":53255},"　　Ironmaiden——钢铁处女——攻擊反噬；简称",{"type":597,"tag":606,"props":53257,"children":53258},{},[53259],{"type":603,"value":53260},"　　Terror——恐怖——恐懼；",{"type":597,"tag":606,"props":53262,"children":53263},{},[53264],{"type":603,"value":53265},"　　Confuse——混乱——迷亂；",{"type":597,"tag":606,"props":53267,"children":53268},{},[53269],{"type":603,"value":53270},"　　LifeTap——生命源泉——偷取生命；",{"type":597,"tag":606,"props":53272,"children":53273},{},[53274],{"type":603,"value":53275},"　　Attracc——吸引——吸引；",{"type":597,"tag":606,"props":53277,"children":53278},{},[53279],{"type":603,"value":53280},"　　Decrepify——衰老——衰老；简称/Dec",{"type":597,"tag":606,"props":53282,"children":53283},{},[53284],{"type":603,"value":53285},"　　LowerResist——降低抵抗力——降低抵抗；简称(烂人@_@)",{"type":597,"tag":606,"props":53287,"children":53288},{},[53289],{"type":603,"value":53290},"　　巫师常用武器装备中英文名称对照：",{"type":597,"tag":606,"props":53292,"children":53293},{},[53294],{"type":603,"value":53295},"　　SuicideBranch自殺支系；",{"type":597,"tag":606,"props":53297,"children":53298},{},[53299],{"type":603,"value":53300},"　　BlackhandKey黑手之鑰；",{"type":597,"tag":606,"props":53302,"children":53303},{},[53304],{"type":603,"value":53305},"　　Wizardspike巫師之刺；",{"type":597,"tag":606,"props":53307,"children":53308},{},[53309],{"type":603,"value":53310},"pal:\nAvenger以Vengeance+Conviction为主要攻击技能的Paladin；",{"type":597,"tag":606,"props":53312,"children":53313},{},[53314],{"type":603,"value":53315},"　　Charger/Chargedin以Charge为主要攻击技能的Paladin；",{"type":597,"tag":606,"props":53317,"children":53318},{},[53319],{"type":603,"value":53320},"　　Hammerdin以Concentration+Blessedhammer为主要攻击技能的Paladin；简称",{"type":597,"tag":606,"props":53322,"children":53323},{},[53324],{"type":603,"value":53325},"　　Zealot使用Zeal为为主要攻击技能的Paladin；",{"type":597,"tag":606,"props":53327,"children":53328},{},[53329],{"type":603,"value":53330},"　　DefensiveAuras——防御技能树——防禦性靈氣",{"type":597,"tag":606,"props":53332,"children":53333},{},[53334],{"type":603,"value":53335},"　　Prayer——祈祷——祈禱；",{"type":597,"tag":606,"props":53337,"children":53338},{},[53339],{"type":603,"value":53340},"　　ResistFire——火之光环——抗火；",{"type":597,"tag":606,"props":53342,"children":53343},{},[53344],{"type":603,"value":53345},"　　Defiance——藐视光环——反抗；",{"type":597,"tag":606,"props":53347,"children":53348},{},[53349],{"type":603,"value":53350},"　　ResistCold——冰之光环——抗冰冷；",{"type":597,"tag":606,"props":53352,"children":53353},{},[53354],{"type":603,"value":53355},"　　Cleansing——洁净光环——淨化；",{"type":597,"tag":606,"props":53357,"children":53358},{},[53359],{"type":603,"value":53360},"　　ResistLightning——闪电光环——抵抗閃電；",{"type":597,"tag":606,"props":53362,"children":53363},{},[53364],{"type":603,"value":53365},"　　Vigor——活力光环——精力；",{"type":597,"tag":606,"props":53367,"children":53368},{},[53369],{"type":603,"value":53370},"　　Meditation——冥想光环——冥想；",{"type":597,"tag":606,"props":53372,"children":53373},{},[53374],{"type":603,"value":53375},"　　Redemption——补偿光环——救贖；",{"type":597,"tag":606,"props":53377,"children":53378},{},[53379],{"type":603,"value":53380},"　　Salvation——拯救光环——救助；",{"type":597,"tag":606,"props":53382,"children":53383},{},[53384],{"type":603,"value":53385},"　　OffensiveAuras——攻击技能树——攻擊靈氣",{"type":597,"tag":606,"props":53387,"children":53388},{},[53389],{"type":603,"value":53390},"　　Might——力量光环——力量；",{"type":597,"tag":606,"props":53392,"children":53393},{},[53394],{"type":603,"value":53395},"　　Holy-Fire——神圣之火——聖火；",{"type":597,"tag":606,"props":53397,"children":53398},{},[53399],{"type":603,"value":53400},"　　Thorns——荆棘光环——刺針；",{"type":597,"tag":606,"props":53402,"children":53403},{},[53404],{"type":603,"value":53405},"　　BlessedAim——祝福光环——祝福瞄準；",{"type":597,"tag":606,"props":53407,"children":53408},{},[53409],{"type":603,"value":53410},"　　Concentration——集中——專注；简称",{"type":597,"tag":606,"props":53412,"children":53413},{},[53414],{"type":603,"value":53415},"　　HolyFreeze——圣洁寒冰——神聖冰凍；简称",{"type":597,"tag":606,"props":53417,"children":53418},{},[53419],{"type":603,"value":53420},"　　HolyShock——神圣打击——聖光衝擊；",{"type":597,"tag":606,"props":53422,"children":53423},{},[53424],{"type":603,"value":53425},"　　Sanctuary——避难所——庇護所；",{"type":597,"tag":606,"props":53427,"children":53428},{},[53429],{"type":603,"value":53430},"　　Fanaticism——狂热——狂熱；简称",{"type":597,"tag":606,"props":53432,"children":53433},{},[53434],{"type":603,"value":53435},"　　Conviction——审判——信念；简称",{"type":597,"tag":606,"props":53437,"children":53438},{},[53439],{"type":603,"value":53440},"　　Combat——战斗技能树——作戰技能",{"type":597,"tag":606,"props":53442,"children":53443},{},[53444],{"type":603,"value":53445},"　　Sacrifice——牺牲——犧牲；",{"type":597,"tag":606,"props":53447,"children":53448},{},[53449],{"type":603,"value":53450},"　　Smite——重击——重擊；",{"type":597,"tag":606,"props":53452,"children":53453},{},[53454],{"type":603,"value":53455},"　　Holybolt——圣光术——聖光彈；",{"type":597,"tag":606,"props":53457,"children":53458},{},[53459],{"type":603,"value":53460},"　　Zeal——热诚——白熱；",{"type":597,"tag":606,"props":53462,"children":53463},{},[53464],{"type":603,"value":53465},"　　Charge——冲锋——突擊",{"type":597,"tag":606,"props":53467,"children":53468},{},[53469],{"type":603,"value":53470},"　　Vengeance——复仇——復仇；简称",{"type":597,"tag":606,"props":53472,"children":53473},{},[53474],{"type":603,"value":53475},"　　Blessedhammer——神圣之槌——祝福之錘；简称",{"type":597,"tag":606,"props":53477,"children":53478},{},[53479],{"type":603,"value":53480},"　　Conversion——转化——轉換；",{"type":597,"tag":606,"props":53482,"children":53483},{},[53484],{"type":603,"value":53485},"　　Holyshield——神圣之盾——神聖之盾；简称",{"type":597,"tag":606,"props":53487,"children":53488},{},[53489],{"type":603,"value":53490},"　　Fistoftheheavens——天神之手——天堂之拳；简称",{"type":597,"tag":606,"props":53492,"children":53493},{},[53494],{"type":603,"value":53495},"　　圣骑士常用武器装备中英文名称对照：",{"type":597,"tag":606,"props":53497,"children":53498},{},[53499],{"type":603,"value":53056},{"type":597,"tag":606,"props":53501,"children":53502},{},[53503],{"type":603,"value":53504},"　　Griswold‘sRedemption格瑞斯华尔德的救赎------格瑞斯华尔德的的传奇；",{"type":597,"tag":606,"props":53506,"children":53507},{},[53508],{"type":603,"value":52866},{"type":597,"tag":606,"props":53510,"children":53511},{},[53512],{"type":603,"value":53513},"　　Sazabi‘sCobaltRedeemer沙撒壁的忏悔之钴------沙撒壁的雄伟贡品；",{"type":597,"tag":606,"props":53515,"children":53516},{},[53517],{"type":603,"value":53518},"　　Schaefer‘sHammer史恰佛之鎚；简称",{"type":597,"tag":606,"props":53520,"children":53521},{},[53522],{"type":603,"value":53070},{"type":597,"tag":606,"props":53524,"children":53525},{},[53526],{"type":603,"value":53527},"　　还有部分Cruel前缀或做成fury的Elite武器比如：PhaseBlade，ConquestSword，CrypticSword,MythicalSword，BerserkerAxe,其中PhaseBlade不能通过Cube合成获得Cruel的前缀；",{"type":597,"tag":606,"props":53529,"children":53530},{},[53531],{"type":603,"value":53532},"sor:\nBoltress以ChargedBolt为主要攻击技能的Sorceress；",{"type":597,"tag":606,"props":53534,"children":53535},{},[53536],{"type":603,"value":53537},"　　Tweaker指一部分将FCR(FasterCastRate快速施法率)增强到max的Sorceress；",{"type":597,"tag":606,"props":53539,"children":53540},{},[53541],{"type":603,"value":53542},"　　Cold——冰系技能树——冰凍法術",{"type":597,"tag":606,"props":53544,"children":53545},{},[53546],{"type":603,"value":53547},"　　Icebolt——冰箭——冰彈；",{"type":597,"tag":606,"props":53549,"children":53550},{},[53551],{"type":603,"value":53552},"　　FrozenArmor——寒冰护甲——冰封裝甲；",{"type":597,"tag":606,"props":53554,"children":53555},{},[53556],{"type":603,"value":53557},"　　FrostNova——霜之星——霜之新星；简称",{"type":597,"tag":606,"props":53559,"children":53560},{},[53561],{"type":603,"value":53562},"　　IceBlast——寒冰冲击波——冰風暴；",{"type":597,"tag":606,"props":53564,"children":53565},{},[53566],{"type":603,"value":53567},"　　ShiverArmor——战栗护盾——碎冰甲；",{"type":597,"tag":606,"props":53569,"children":53570},{},[53571],{"type":603,"value":53572},"　　GlacialSpike——冰之长钉——冰尖柱；简称",{"type":597,"tag":606,"props":53574,"children":53575},{},[53576],{"type":603,"value":53577},"　　Blizzard——暴风雪——暴風雪；",{"type":597,"tag":606,"props":53579,"children":53580},{},[53581],{"type":603,"value":53582},"　　ChillingArmor——寒冷装甲——寒冰裝甲；",{"type":597,"tag":606,"props":53584,"children":53585},{},[53586],{"type":603,"value":53587},"　　FrozenOrb——冰冻球——冰封球；简称",{"type":597,"tag":606,"props":53589,"children":53590},{},[53591],{"type":603,"value":53592},"　　ColdMatery——寒冰掌握——支配冰冷；简称",{"type":597,"tag":606,"props":53594,"children":53595},{},[53596],{"type":603,"value":53597},"　　Lighting——闪电系技能树——閃電法術",{"type":597,"tag":606,"props":53599,"children":53600},{},[53601],{"type":603,"value":53602},"　　ChargedBolt——闪电弹——充能彈；简称",{"type":597,"tag":606,"props":53604,"children":53605},{},[53606],{"type":603,"value":53607},"　　StaticField——静力唱—靜態力場；简称",{"type":597,"tag":606,"props":53609,"children":53610},{},[53611],{"type":603,"value":53612},"　　Telekinesis——心灵念力术——心靈傳動；简称",{"type":597,"tag":606,"props":53614,"children":53615},{},[53616],{"type":603,"value":53617},"　　Nova——雷星术——新星；",{"type":597,"tag":606,"props":53619,"children":53620},{},[53621],{"type":603,"value":53622},"　　Lightning——闪电——閃電；",{"type":597,"tag":606,"props":53624,"children":53625},{},[53626],{"type":603,"value":53627},"　　ChainLightning——连环闪电——連鎖閃電；简称",{"type":597,"tag":606,"props":53629,"children":53630},{},[53631],{"type":603,"value":53632},"　　Teleport——心灵传送术——傳送；简称/TP",{"type":597,"tag":606,"props":53634,"children":53635},{},[53636],{"type":603,"value":53637},"　　ThunderStorm——雷暴术——雷云風暴；简称",{"type":597,"tag":606,"props":53639,"children":53640},{},[53641],{"type":603,"value":53642},"　　EnergyShield——能量盾——能量護盾；简称",{"type":597,"tag":606,"props":53644,"children":53645},{},[53646],{"type":603,"value":53647},"　　LightningMastery——闪电掌握——支配閃電；简称",{"type":597,"tag":606,"props":53649,"children":53650},{},[53651],{"type":603,"value":53652},"　　Fire——火系技能树——火焰法術",{"type":597,"tag":606,"props":53654,"children":53655},{},[53656],{"type":603,"value":53657},"　　Firebolt——小火球——火彈；简称",{"type":597,"tag":606,"props":53659,"children":53660},{},[53661],{"type":603,"value":53662},"　　Warmth——热情——暖氣；简称:",{"type":597,"tag":606,"props":53664,"children":53665},{},[53666],{"type":603,"value":53667},"　　Inferno——地狱火——地獄之火；",{"type":597,"tag":606,"props":53669,"children":53670},{},[53671],{"type":603,"value":53672},"　　Blaze——火焰道标——熾烈之焰；",{"type":597,"tag":606,"props":53674,"children":53675},{},[53676],{"type":603,"value":53677},"　　Fireball——大火球——火球；简称",{"type":597,"tag":606,"props":53679,"children":53680},{},[53681],{"type":603,"value":53682},"　　Firewall——火墙术——火墻；简称",{"type":597,"tag":606,"props":53684,"children":53685},{},[53686],{"type":603,"value":53687},"　　Enchant——施魔——強化；",{"type":597,"tag":606,"props":53689,"children":53690},{},[53691],{"type":603,"value":53692},"　　Meteor——流星——隕石；",{"type":597,"tag":606,"props":53694,"children":53695},{},[53696],{"type":603,"value":53697},"　　Hydra——守护神——九頭海蛇；",{"type":597,"tag":606,"props":53699,"children":53700},{},[53701],{"type":603,"value":53702},"　　FireMastery——火系掌握——支配之焰；简称",{"type":597,"tag":606,"props":53704,"children":53705},{},[53706],{"type":603,"value":53707},"　　女巫常用武器装备中英文名称对照：",{"type":597,"tag":606,"props":53709,"children":53710},{},[53711],{"type":603,"value":53712},"　　BladeOfAliBaba阿里巴巴之刃；简称",{"type":597,"tag":606,"props":53714,"children":53715},{},[53716],{"type":603,"value":53717},"　　Gull海鷗;",{"type":597,"tag":606,"props":53719,"children":53720},{},[53721],{"type":603,"value":53722},"　　KelpieSnare水魔陷阱，这个当然不是给女巫MM用的啦，是给我们的\"小强\"用的；",{"type":597,"tag":606,"props":53724,"children":53725},{},[53726],{"type":603,"value":53727},"　　TheOculus眼球简称；",{"type":597,"tag":606,"props":53729,"children":53730},{},[53731],{"type":603,"value":53305},{"type":597,"tag":606,"props":53733,"children":53734},{},[53735],{"type":603,"value":53736},"　　有时一些属性JP的RareOrb也常常会被部分pvp女巫使用；",{"title":591,"searchDepth":787,"depth":787,"links":53738},[],"content:tool:2020-02-05-game_en_zh.md","tool/2020-02-05-game_en_zh.md","2020-02-05",{"_path":71,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":70,"description":53743,"body":53744,"_type":791,"_id":53942,"_source":793,"_file":53943,"_extension":795,"date":53944},"过去的 10 年里，很多公司都在使用蓝绿部署（发布）来实现热部署，这种部署方式具有安全、可靠的特点。蓝绿部署虽然算不上“ Sliver Bullet”，但确实很实用。\n蓝绿部署是最常见的一种0 downtime部署的方式，是一种以可预测的方式发布应用的技术，目的是减少发布过程中服务停止的时间。蓝绿部署原理上很简单，就是通过冗余来解决问题。通常生产环境需要两组配置（蓝绿配置），一组是active的生产环境的配置（绿配置），一组是inactive的配置（蓝绿配置）。用户访问的时候，只会让用户访问active的服务器集群。在绿色环境（active）运行当前生产环境中的应用，也就是旧版本应用version1。当你想要升级到version2 ，在蓝色环境（inactive）中进行操作，即部署新版本应用，并进行测试。如果测试没问题，就可以把负载均衡器／反向代理／路由指向蓝色环境了。随后需要监测新版本应用，也就是version2 是否有故障和异常。如果运行良好，就可以删除version1 使用的资源。如果运行出现了问题，可以通过负载均衡器指向快速回滚到绿色环境。\n蓝绿部署的优点：\n这种方式的好处在你可以始终很放心的去部署inactive环境，如果出错并不影响生产环境的服务，如果切换后出现问题，也可以在非常短的时间内把再做一次切换，就完成了回滚。而且同时在线的只有一个版本。蓝绿部署无需停机，并且风险较小。\n(1) 部署版本1的应用（一开始的状态），所有外部请求的流量都打到这个版本上。\n(2) 部署版本2的应用，版本2的代码与版本1不同(新功能、Bug修复等)。\n(3) 将流量从版本1切换到版本2。\n(4) 如版本2测试正常，就删除版本1正在使用的资源（例如实例），从此正式用版本2。\n从过程不难发现，在部署的过程中，应用始终在线。并且，新版本上线的过程中，并没有修改老版本的任何内容，在部署期间，老版本的状态不受影响。这样风险很小，并且，只要老版本的资源不被删除，理论上，可以在任何时间回滚到老版本。\n蓝绿部署的弱点：\n使用蓝绿部署需要注意的一些细节包括：\n1、当切换到蓝色环境时，需要妥当处理未完成的业务和新的业务。如果数据库后端无法处理，会是一个比较麻烦的问题。\n2、有可能会出现需要同时处理“微服务架构应用”和“传统架构应用”的情况，如果在蓝绿部署中协调不好这两者，还是有可能导致服务停止；\n3、需要提前考虑数据库与应用部署同步迁移/回滚的问题。\n4、蓝绿部署需要有基础设施支持。\n5、在非隔离基础架构（ VM 、 Docker 等）上执行蓝绿部署，蓝色环境和绿色环境有被摧毁的风险。\n6、另外，这种方式不好的地方还在于冗余产生的额外维护、配置的成本，以及服务器本身运行的开销。\n蓝绿部署适用的场景：\n1、不停止老版本，额外搞一套新版本，等测试发现新版本OK后，删除老版本。\n2、蓝绿发布是一种用于升级与更新的发布策略，部署的最小维度是容器，而发布的最小维度是应用。\n3、蓝绿发布对于增量升级有比较好的支持，但是对于涉及数据表结构变更等等不可逆转的升级，并不完全合适用蓝绿发布来实现，需要结合一些业务的逻辑以及数据迁移与回滚的策略才可以完全满足需求。",{"type":594,"children":53745,"toc":53940},[53746,53752,53756,53762,53767,53774,53792,53805,53832,53851,53873,53878,53896,53901,53931],{"type":597,"tag":857,"props":53747,"children":53749},{"id":53748},"蓝绿部署bluegreen-deployment",[53750],{"type":603,"value":53751},"蓝绿部署（Blue/Green Deployment）",{"type":597,"tag":606,"props":53753,"children":53754},{},[53755],{"type":603,"value":53743},{"type":597,"tag":857,"props":53757,"children":53759},{"id":53758},"滚动发布rolling-update",[53760],{"type":603,"value":53761},"滚动发布（rolling update）",{"type":597,"tag":606,"props":53763,"children":53764},{},[53765],{"type":603,"value":53766},"滚动发布，一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用。周而复始，直到集群中所有的实例都更新成新版本。这种部署方式相对于蓝绿部署，更加节约资源——它不需要运行两个集群、两倍的实例数。我们可以部分部署，例如每次只取出集群的20%进行升级。\n这种方式也有很多缺点，例如：\n(1) 没有一个确定OK的环境。使用蓝绿部署，我们能够清晰地知道老版本是OK的，而使用滚动发布，我们无法确定。\n(2) 修改了现有的环境。\n(3) 如果需要回滚，很困难。举个例子，在某一次发布中，我们需要更新100个实例，每次更新10个实例，每次部署需要5分钟。当滚动发布到第80个实例时，发现了问题，需要回滚。此时，脾气不好的程序猿很可能想掀桌子，因为回滚是一个痛苦，并且漫长的过程。\n(4) 有的时候，我们还可能对系统进行动态伸缩，如果部署期间，系统自动扩容/缩容了，我们还需判断到底哪个节点使用的是哪个代码。尽管有一些自动化的运维工具，但是依然令人心惊胆战。\n并不是说滚动发布不好，滚动发布也有它非常合适的场景。",{"type":597,"tag":606,"props":53768,"children":53769},{},[53770],{"type":597,"tag":719,"props":53771,"children":53773},{"alt":719,"src":53772},"/images/2020-02-03-orleans-Deployment/20190516171224267.png",[],{"type":597,"tag":857,"props":53775,"children":53777},{"id":53776},"orleans支持-蓝绿部署模型以及滚动部署模型",[53778,53780,53785,53787],{"type":603,"value":53779},"orleans支持 ",{"type":597,"tag":1733,"props":53781,"children":53782},{},[53783],{"type":603,"value":53784},"蓝绿部署模型",{"type":603,"value":53786},"以及",{"type":597,"tag":1733,"props":53788,"children":53789},{},[53790],{"type":603,"value":53791},"滚动部署模型",{"type":597,"tag":1321,"props":53793,"children":53794},{},[53795,53800],{"type":597,"tag":807,"props":53796,"children":53797},{},[53798],{"type":603,"value":53799},"ClusterId：这是Orleans集群的唯一ID。使用此ID的所有客户端和Silo将能够直接相互通信。但是，您可以选择ClusterId对不同的部署使用不同的名称。",{"type":597,"tag":807,"props":53801,"children":53802},{},[53803],{"type":603,"value":53804},"ServiceId：这是您的应用程序的唯一ID，将由某些提供程序（例如持久性提供程序）使用。此ID应该保持稳定，并且在整个部署中都不应更改。",{"type":597,"tag":606,"props":53806,"children":53807},{},[53808,53810,53816,53818,53824,53826,53831],{"type":603,"value":53809},"Orleans has both ",{"type":597,"tag":629,"props":53811,"children":53813},{"className":53812},[],[53814],{"type":603,"value":53815},"ClusterId",{"type":603,"value":53817}," & ",{"type":597,"tag":629,"props":53819,"children":53821},{"className":53820},[],[53822],{"type":603,"value":53823},"ServiceId",{"type":603,"value":53825}," to support the ",{"type":597,"tag":1733,"props":53827,"children":53828},{},[53829],{"type":603,"value":53830},"blue/green deployment model",{"type":603,"value":9674},{"type":597,"tag":606,"props":53833,"children":53834},{},[53835,53837,53842,53844,53849],{"type":603,"value":53836},"In this model, each deployment slot will have a distinct ",{"type":597,"tag":629,"props":53838,"children":53840},{"className":53839},[],[53841],{"type":603,"value":53815},{"type":603,"value":53843}," (eg, the values could be \"blue-slot\" & \"green-slot\") but they will always have the same ",{"type":597,"tag":629,"props":53845,"children":53847},{"className":53846},[],[53848],{"type":603,"value":53823},{"type":603,"value":53850}," (eg, \"my-service\"). The \"blue-slot\" silos will only talk to other \"blue-slot\" silos.",{"type":597,"tag":606,"props":53852,"children":53853},{},[53854,53859,53860,53865,53867,53871],{"type":597,"tag":1733,"props":53855,"children":53856},{},[53857],{"type":603,"value":53858},"However",{"type":603,"value":4731},{"type":597,"tag":1080,"props":53861,"children":53862},{},[53863],{"type":603,"value":53864},"Grain A",{"type":603,"value":53866}," in the blue cluster and ",{"type":597,"tag":1080,"props":53868,"children":53869},{},[53870],{"type":603,"value":53864},{"type":603,"value":53872}," in the green cluster will still share the same storage - if they are both active then one will see a conflict when writing to the state if the other activation has already written it.",{"type":597,"tag":606,"props":53874,"children":53875},{},[53876],{"type":603,"value":53877},"This allows for the state in the database to remain consistent when multiple clusters are active (which is usually a short period of time - during the upgrade).",{"type":597,"tag":606,"props":53879,"children":53880},{},[53881,53883,53888,53889,53894],{"type":603,"value":53882},"If you do not use blue/green deployments then you can set ",{"type":597,"tag":629,"props":53884,"children":53886},{"className":53885},[],[53887],{"type":603,"value":53815},{"type":603,"value":53817},{"type":597,"tag":629,"props":53890,"children":53892},{"className":53891},[],[53893],{"type":603,"value":53823},{"type":603,"value":53895}," to the same value.",{"type":597,"tag":606,"props":53897,"children":53898},{},[53899],{"type":603,"value":53900},"To say this in a different way:",{"type":597,"tag":1321,"props":53902,"children":53903},{},[53904,53921],{"type":597,"tag":807,"props":53905,"children":53906},{},[53907,53912,53914,53919],{"type":597,"tag":629,"props":53908,"children":53910},{"className":53909},[],[53911],{"type":603,"value":53815},{"type":603,"value":53913}," + ",{"type":597,"tag":629,"props":53915,"children":53917},{"className":53916},[],[53918],{"type":603,"value":53823},{"type":603,"value":53920}," are used for cluster membership",{"type":597,"tag":807,"props":53922,"children":53923},{},[53924,53929],{"type":597,"tag":629,"props":53925,"children":53927},{"className":53926},[],[53928],{"type":603,"value":53823},{"type":603,"value":53930}," is used for storage",{"type":597,"tag":606,"props":53932,"children":53933},{},[53934],{"type":597,"tag":886,"props":53935,"children":53938},{"href":53936,"rel":53937},"https://github.com/dotnet/orleans/issues/5696#issuecomment-503595998",[890],[53939],{"type":603,"value":53936},{"title":591,"searchDepth":787,"depth":787,"links":53941},[],"content:dotnet:2020-02-03-orleans-Deployment.md","dotnet/2020-02-03-orleans-Deployment.md","2020-02-03",{"_path":50,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":49,"description":53946,"body":53947,"_type":791,"_id":54357,"_source":793,"_file":54358,"_extension":795,"date":54359},"国内的网络游戏多是客户端/服务器方式，而对于游戏实时性要求比较高的网游，如 果采用客户端发送时间包给服务器，服务器校验后再下发给客户端表现的话，网络延时 和抖动都会恶化游戏体验。对于客户端和服务器的同步问题， 一般有两种算法解决：",{"type":594,"children":53948,"toc":54346},[53949,53953,53958,53963,53968,53973,53978,53985,54003,54015,54020,54025,54030,54035,54040,54051,54059,54064,54069,54080,54091,54110,54129,54137,54142,54161,54170,54178,54187,54199,54204,54217,54223,54228,54233,54238,54246,54251,54256,54265,54271,54279,54284,54289,54294,54299,54305,54310,54315,54320,54329,54334],{"type":597,"tag":606,"props":53950,"children":53951},{},[53952],{"type":603,"value":53946},{"type":597,"tag":606,"props":53954,"children":53955},{},[53956],{"type":603,"value":53957},"① 、客户端和服务器之间进行对时后，客户端发送数据包给服务器，服务器根据收 到的客户端数据包先后进行排序，先到达的服务器端的事件包被判定为先发生，后到达 服务器的事件包被判定为后发生。在此情况下，往往网络延时较大的客户端先发送了游 戏事件包，但由于网络延时和抖动的影响，后到达服务器，而被判定为后发生时间，这 样对该客户端就不公平了。",{"type":597,"tag":606,"props":53959,"children":53960},{},[53961],{"type":603,"value":53962},"② 、客户端和服务器进行对时后，客户端预测服务器收到客户端数据包的时间，并 把该时间写入数据包中发送给服务器，在网络抖动比较大的情况下，这种情况可以保证一定的公平性。但是还是出现了上述的情况，网络延时大的数据包预测的到达时间也就 更晚，依然会出现先发生的事件被服务器判定为后发生，同样不能保证游戏的公平性。",{"type":597,"tag":606,"props":53964,"children":53965},{},[53966],{"type":603,"value":53967},"因此，在现有的解决网络实时性较差问题的技术方案中，当采用TimeWarp同步机制 时，则需要保存数量较多的快照，同时也会使回滚的次数较多，导致过多的消耗内存和 CPU资源，以及降低游戏体验；对于国内网络游戏采用的网络时间同步机制，无论服务器 根据客户端数据包到达的时间进行排序，或客户端预测服务器收到客户端数据包的时间 并把该时间写入数据包中发送给服务器，对于网络延时越大的玩家同样会降低游戏体 验。",{"type":597,"tag":598,"props":53969,"children":53971},{"id":53970},"网络对时",[53972],{"type":603,"value":53970},{"type":597,"tag":606,"props":53974,"children":53975},{},[53976],{"type":603,"value":53977},"大部分的强交互网游会做对时, 使 client 和 server 保持时间基本一致.",{"type":597,"tag":606,"props":53979,"children":53980},{},[53981],{"type":597,"tag":719,"props":53982,"children":53984},{"alt":719,"src":53983},"/images/2020-02-02-Latency_Compensating-rtt/iyeruicpsm.png",[],{"type":597,"tag":803,"props":53986,"children":53987},{},[53988,53993,53998],{"type":597,"tag":807,"props":53989,"children":53990},{},[53991],{"type":603,"value":53992},"client 带上本地时间 t0 向 server 发送对时请求.",{"type":597,"tag":807,"props":53994,"children":53995},{},[53996],{"type":603,"value":53997},"server 回复当前自己的系统时间 t1.",{"type":597,"tag":807,"props":53999,"children":54000},{},[54001],{"type":603,"value":54002},"client ack 收到 server 回复时的本地时间 t2.",{"type":597,"tag":606,"props":54004,"children":54005},{},[54006,54008,54013],{"type":603,"value":54007},"如果只有 client 关心对时结果, 这时可以优化到",{"type":597,"tag":1080,"props":54009,"children":54010},{},[54011],{"type":603,"value":54012},"只做1,2步甚至只做第2步",{"type":603,"value":54014},", 相当于 client 主动发起 ping;",{"type":597,"tag":606,"props":54016,"children":54017},{},[54018],{"type":603,"value":54019},"同样, 如果只有 server 关心对时结果, sever 主动发起 ping (第2,3步)即可.",{"type":597,"tag":606,"props":54021,"children":54022},{},[54023],{"type":603,"value":54024},"单次对时往往会受到网络波动的影响, 所以一般还需要做多次统计一个比较合理的时间偏移.",{"type":597,"tag":606,"props":54026,"children":54027},{},[54028],{"type":603,"value":54029},"网络对时, 一般在进游戏之初做. 如果在游戏过程中发现有网络波动过大的情况(在下行协议包中带上 server 的时间, 很容易检查到提前或者滞后), 也需要重新发起对时.",{"type":597,"tag":606,"props":54031,"children":54032},{},[54033],{"type":603,"value":54034},"考虑到反外挂(比如加速齿轮, 或者减速器)的因素, server 端需要对主动发起的client对时请求做一些安全校验, 例如时间递增, 是否满足阈值等等.",{"type":597,"tag":606,"props":54036,"children":54037},{},[54038],{"type":603,"value":54039},"光从对时的角度来看, UDP 协议比 TCP 更合适一些, 不过取决于项目需要.",{"type":597,"tag":598,"props":54041,"children":54043},{"id":54042},"服务器和客户端时间差算法-st0st2-2ct12",[54044,54046],{"type":603,"value":54045},"服务器和客户端时间差算法 ",{"type":597,"tag":1080,"props":54047,"children":54048},{},[54049],{"type":603,"value":54050},"(st0+st2-2ct1)/2",{"type":597,"tag":606,"props":54052,"children":54053},{},[54054],{"type":597,"tag":719,"props":54055,"children":54058},{"alt":54056,"src":54057},"image-20200221152318844","/images/2020-02-02-Latency_Compensating-rtt/image-20200221152318844.png",[],{"type":597,"tag":1023,"props":54060,"children":54062},{"id":54061},"两种理解方式",[54063],{"type":603,"value":54061},{"type":597,"tag":3995,"props":54065,"children":54067},{"id":54066},"第一种方式",[54068],{"type":603,"value":54066},{"type":597,"tag":606,"props":54070,"children":54071},{},[54072,54078],{"type":597,"tag":629,"props":54073,"children":54075},{"className":54074},[],[54076],{"type":603,"value":54077},"ct1-st0 = &0 +(ct1-st1) ",{"type":603,"value":54079},"  延迟+ 时间差(同一时刻下客户端减去服务端的时间差)",{"type":597,"tag":606,"props":54081,"children":54082},{},[54083,54089],{"type":597,"tag":629,"props":54084,"children":54086},{"className":54085},[],[54087],{"type":603,"value":54088},"st2-ct1 = &1+(st2-ct2)",{"type":603,"value":54090},"  延迟+ 时间差(同一时刻下服务端减去客户端的时间差)",{"type":597,"tag":606,"props":54092,"children":54093},{},[54094,54096,54102,54104],{"type":603,"value":54095},"我们需要的就是",{"type":597,"tag":629,"props":54097,"children":54099},{"className":54098},[],[54100],{"type":603,"value":54101},"st2-ct2",{"type":603,"value":54103}," 由上可以转换为",{"type":597,"tag":629,"props":54105,"children":54107},{"className":54106},[],[54108],{"type":603,"value":54109},"-(ct1-st1) = st2-ct2",{"type":597,"tag":606,"props":54111,"children":54112},{},[54113,54115,54121,54123],{"type":603,"value":54114},"现假设 ",{"type":597,"tag":629,"props":54116,"children":54118},{"className":54117},[],[54119],{"type":603,"value":54120},"o = st2-ct2 ",{"type":603,"value":54122},"同时假设延迟相等 ",{"type":597,"tag":629,"props":54124,"children":54126},{"className":54125},[],[54127],{"type":603,"value":54128},"p = &0 = &1",{"type":597,"tag":621,"props":54130,"children":54132},{"code":54131},"ct1-st0 = p - o\n\nst2-ct1 = p + o\n\nct1-st0-st2+ct1 = -2o\n\no =(st0+st2-2ct1)/2\n",[54133],{"type":597,"tag":629,"props":54134,"children":54135},{"__ignoreMap":591},[54136],{"type":603,"value":54131},{"type":597,"tag":3995,"props":54138,"children":54140},{"id":54139},"第二种方式",[54141],{"type":603,"value":54139},{"type":597,"tag":606,"props":54143,"children":54144},{},[54145,54151,54153,54159],{"type":597,"tag":629,"props":54146,"children":54148},{"className":54147},[],[54149],{"type":603,"value":54150},"&0 = &1 = (st2-st0)/2 ",{"type":603,"value":54152},"    我们知道",{"type":597,"tag":629,"props":54154,"children":54156},{"className":54155},[],[54157],{"type":603,"value":54158},"(st2-st0)/2",{"type":603,"value":54160},"是单次延迟 即",{"type":597,"tag":606,"props":54162,"children":54163},{},[54164,54169],{"type":597,"tag":629,"props":54165,"children":54167},{"className":54166},[],[54168],{"type":603,"value":54088},{"type":603,"value":54090},{"type":597,"tag":621,"props":54171,"children":54173},{"code":54172}," st2-ct1 = (st2-st0)/2 + o\n\n 2st2-2ct1 = st2-st0 + 2o\n\n o = (st0+st2-2ct1)/2\n",[54174],{"type":597,"tag":629,"props":54175,"children":54176},{"__ignoreMap":591},[54177],{"type":603,"value":54172},{"type":597,"tag":606,"props":54179,"children":54180},{},[54181],{"type":597,"tag":886,"props":54182,"children":54185},{"href":54183,"rel":54184},"https://patents.google.com/patent/CN101577715A/zh",[890],[54186],{"type":603,"value":54183},{"type":597,"tag":606,"props":54188,"children":54189},{},[54190,54192,54197],{"type":603,"value":54191},"服务器获得服务器与客户端的时间差值后，与服务器接收到来自客户端的数据包的时间做差值可以获得客户端在游 戏过程中实际向服务器发送数据包的时间，",{"type":597,"tag":1080,"props":54193,"children":54194},{},[54195],{"type":603,"value":54196},"并通过客户端在游戏过程 中实际向服务器发送数据包的时间来判定在游戏时间中事件发生的实际顺序",{"type":603,"value":54198},"， 从而较好的保持了游戏的公平性，提高了游戏玩家的游戏体验。",{"type":597,"tag":3995,"props":54200,"children":54202},{"id":54201},"检查安全性",[54203],{"type":603,"value":54201},{"type":597,"tag":803,"props":54205,"children":54206},{},[54207,54212],{"type":597,"tag":807,"props":54208,"children":54209},{},[54210],{"type":603,"value":54211},"第一次连接的对时..时差不该查过三分钟.",{"type":597,"tag":807,"props":54213,"children":54214},{},[54215],{"type":603,"value":54216},"校验包客户端有没有修改时间,能够求得发包的时间,对比服务器接收到包的时间以及延迟",{"type":597,"tag":598,"props":54218,"children":54220},{"id":54219},"移动的延迟补偿",[54221],{"type":603,"value":54222},"移动的延迟补偿.",{"type":597,"tag":606,"props":54224,"children":54225},{},[54226],{"type":603,"value":54227},"使用了客户端预测的话,客户端的移动位置要优先于服务端的,因为有来回两次延迟..",{"type":597,"tag":606,"props":54229,"children":54230},{},[54231],{"type":603,"value":54232},"由于状态同步以服务端为准,使用服务器校对不会出什么问题.",{"type":597,"tag":606,"props":54234,"children":54235},{},[54236],{"type":603,"value":54237},"所以这里的补偿是补偿从客户端到服务端这段延迟.",{"type":597,"tag":621,"props":54239,"children":54241},{"code":54240},"public class move\n{\n    DatetimeOffset clientTime\n}\nvar o = xxx;//服务端和客户端的时间差\nvar startMoveTime =   move.clientTime+o;\nvar delay = DateTimeOffset.Now()-startMoveTime;//延迟时间\n\n//todo:将延迟时间参与到pos的计算当中\n\n",[54242],{"type":597,"tag":629,"props":54243,"children":54244},{"__ignoreMap":591},[54245],{"type":603,"value":54240},{"type":597,"tag":606,"props":54247,"children":54248},{},[54249],{"type":603,"value":54250},"如果使用了服务器校对不补偿也并没有什么太大的问题,因为最终仍然是以服务器为准的.",{"type":597,"tag":606,"props":54252,"children":54253},{},[54254],{"type":603,"value":54255},"但是补偿了之后减少了延迟,会更平缓一点.",{"type":597,"tag":606,"props":54257,"children":54258},{},[54259],{"type":597,"tag":886,"props":54260,"children":54263},{"href":54261,"rel":54262},"https://patents.google.com/patent/CN102404279A/zh",[890],[54264],{"type":603,"value":54261},{"type":597,"tag":598,"props":54266,"children":54268},{"id":54267},"boss攻击的延迟补偿",[54269],{"type":603,"value":54270},"boss攻击的延迟补偿.",{"type":597,"tag":606,"props":54272,"children":54273},{},[54274],{"type":597,"tag":719,"props":54275,"children":54278},{"alt":54276,"src":54277},"image-20200221164609309","/images/2020-02-02-Latency_Compensating-rtt/image-20200221164609309.png",[],{"type":597,"tag":606,"props":54280,"children":54281},{},[54282],{"type":603,"value":54283},"玩家ct2的时候开始移动,但是服务器收到的时候已经是st4",{"type":597,"tag":606,"props":54285,"children":54286},{},[54287],{"type":603,"value":54288},"而服务器st2的时候boss发动了攻击.这个时候.玩家在服务器的位置是在ct3",{"type":597,"tag":606,"props":54290,"children":54291},{},[54292],{"type":603,"value":54293},"需要boss把攻击作为关键事件...直到客户端有ct4事件出来时再执行st2,",{"type":597,"tag":606,"props":54295,"children":54296},{},[54297],{"type":603,"value":54298},"可以使用时间轮算法触发关键事件",{"type":597,"tag":598,"props":54300,"children":54302},{"id":54301},"玩家-的延迟补偿",[54303],{"type":603,"value":54304},"玩家 的延迟补偿",{"type":597,"tag":606,"props":54306,"children":54307},{},[54308],{"type":603,"value":54309},"这是由于客户端使用了插值算法造成的",{"type":597,"tag":606,"props":54311,"children":54312},{},[54313],{"type":603,"value":54314},"比如fps游戏,玩家看到的敌人的位置永远是过去的,当你开枪的时候,那个人其实已不在那个位置",{"type":597,"tag":606,"props":54316,"children":54317},{},[54318],{"type":603,"value":54319},"所以需要记录游戏的世界状态..找到子弹打出时那一刻的世界状态.然后判定",{"type":597,"tag":606,"props":54321,"children":54322},{},[54323],{"type":597,"tag":886,"props":54324,"children":54327},{"href":54325,"rel":54326},"https://patents.google.com/patent/CN102739608A/zh",[890],[54328],{"type":603,"value":54325},{"type":597,"tag":598,"props":54330,"children":54332},{"id":54331},"一些模拟恶劣网络环境工具",[54333],{"type":603,"value":54331},{"type":597,"tag":1321,"props":54335,"children":54336},{},[54337],{"type":597,"tag":807,"props":54338,"children":54339},{},[54340],{"type":597,"tag":886,"props":54341,"children":54344},{"href":54342,"rel":54343},"http://jagt.github.io/clumsy/cn/index.html",[890],[54345],{"type":603,"value":54342},{"title":591,"searchDepth":787,"depth":787,"links":54347},[54348,54349,54353,54354,54355,54356],{"id":53970,"depth":787,"text":53970},{"id":54042,"depth":787,"text":54350,"children":54351},"服务器和客户端时间差算法 (st0+st2-2ct1)/2",[54352],{"id":54061,"depth":1530,"text":54061},{"id":54219,"depth":787,"text":54222},{"id":54267,"depth":787,"text":54270},{"id":54301,"depth":787,"text":54304},{"id":54331,"depth":787,"text":54331},"content:dotnet:2020-02-02-Latency_Compensating-rtt.md","dotnet/2020-02-02-Latency_Compensating-rtt.md","2020-02-02",{"_path":47,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":46,"description":54361,"body":54362,"_type":791,"_id":54899,"_source":793,"_file":54900,"_extension":795,"date":54359},"第一人称角色网络游戏的设计是一项很有挑战性的工作。网络环境下的健壮性，是动作游戏能否成功的一个重要因素。另外，PC上面的开发者需要考虑到玩家层次不齐的机器配置以及网络状况，很多用户的硬件配置跟网络跟当前最好的配置跟网络有一定差距。",{"type":594,"children":54363,"toc":54897},[54364,54370,54374,54379,54384,54390,54395,54400,54408,54413,54456,54461,54466,54501,54506,54512,54517,54528,54533,54538,54544,54549,54554,54559,54564,54569,54577,54582,54587,54592,54597,54603,54608,54613,54619,54624,54629,54635,54640,54645,54650,54655,54660,54665,54688,54693,54698,54703,54708,54713,54718,54724,54729,54734,54770,54775,54781,54786,54791,54796,54801,54806,54811,54817,54822,54827,54832,54845,54850,54855,54860,54865,54870,54875,54880,54885],{"type":597,"tag":857,"props":54365,"children":54367},{"id":54366},"_1综述",[54368],{"type":603,"value":54369},"1.综述",{"type":597,"tag":606,"props":54371,"children":54372},{},[54373],{"type":603,"value":54361},{"type":597,"tag":606,"props":54375,"children":54376},{},[54377],{"type":603,"value":54378},"宽带网络的出现有利于在线游戏开发，但是开发者还是需要考虑网络延迟和其它网络特性。而且宽带网络在美国被广泛采用还需要一段时间，在世界上其它国家可能需要更长的一段时间。另外，很多宽带网络质量很差，用户虽然偶尔能够享受到高带宽，但更多的时候他们不得不面对高延迟和高丢包率。",{"type":597,"tag":606,"props":54380,"children":54381},{},[54382],{"type":603,"value":54383},"我们应该提供给玩家良好的游戏。本篇文章讨论了如何提供给玩家顶尖的操作体验；介绍了很多在线动作游戏中采用的C/S架构背景。此外，我们还讨论了如何通过一个预测模型来掩饰延迟带来的影响。文章的最后描述了一个叫做延迟补偿的机制，弥补了因为网络质量不好带来的负面影响",{"type":597,"tag":857,"props":54385,"children":54387},{"id":54386},"_2cs游戏的基本架构",[54388],{"type":603,"value":54389},"2.C/S游戏的基本架构",{"type":597,"tag":606,"props":54391,"children":54392},{},[54393],{"type":603,"value":54394},"网络上可玩的大部分动作游戏都是C/S结构游戏基础上修改完成的，比如半条命以及其修改版反恐精英、军团要塞，以及一些基于quake3引擎和虚幻引擎的游戏。这类游戏都有一个用来执行游戏逻辑的服务器以及连接到这个服务器的多个客户端。客户端仅仅是用来接收玩家的操作并发给服务器，服务器对这些操作作出响应，移动玩家周围物体，并将游戏世界的信息发给客户端显示出来。当然世界的游戏系统有更多组件，我们这样简化有利于分析预测和延迟补偿。",{"type":597,"tag":606,"props":54396,"children":54397},{},[54398],{"type":603,"value":54399},"基于这种考虑，典型的C/S游戏引擎通常看起来是这样的",{"type":597,"tag":606,"props":54401,"children":54402},{},[54403],{"type":597,"tag":719,"props":54404,"children":54407},{"alt":54405,"src":54406},"General Client / Server Architecture","/images/2020-02-02-Latency_Compensating_Methods_in_ClientServer_In-game_Protocol_Design_and_Optimization/Lagcomp1.png",[],{"type":597,"tag":606,"props":54409,"children":54410},{},[54411],{"type":603,"value":54412},"为了便于讨论，我们假定客户端跟服务器之间已经建立连接；客户端的每一帧循环如下：",{"type":597,"tag":803,"props":54414,"children":54415},{},[54416,54421,54426,54431,54436,54441,54446,54451],{"type":597,"tag":807,"props":54417,"children":54418},{},[54419],{"type":603,"value":54420},"获取帧开始时间",{"type":597,"tag":807,"props":54422,"children":54423},{},[54424],{"type":603,"value":54425},"采集用户输入",{"type":597,"tag":807,"props":54427,"children":54428},{},[54429],{"type":603,"value":54430},"根据模拟时间将移动命令打包发送给服务器",{"type":597,"tag":807,"props":54432,"children":54433},{},[54434],{"type":603,"value":54435},"获取处理服务器传过来的数据包",{"type":597,"tag":807,"props":54437,"children":54438},{},[54439],{"type":603,"value":54440},"根据服务器数据包的内容决定可见物体及其状态",{"type":597,"tag":807,"props":54442,"children":54443},{},[54444],{"type":603,"value":54445},"渲染场景",{"type":597,"tag":807,"props":54447,"children":54448},{},[54449],{"type":603,"value":54450},"获取帧结束时间",{"type":597,"tag":807,"props":54452,"children":54453},{},[54454],{"type":603,"value":54455},"结束时间减去开始时间就是下一帧的模拟时间",{"type":597,"tag":606,"props":54457,"children":54458},{},[54459],{"type":603,"value":54460},"客户端每完成一个帧循环，就用“frametime”来决定下一帧需要多少时间，如果帧率恒定，“frametime”就是准确的，否则就没办法获得准确的“frametime”（因为在没一帧开始你不可能知道这一帧需要多长时间）",{"type":597,"tag":606,"props":54462,"children":54463},{},[54464],{"type":603,"value":54465},"服务器的循环大同小异：",{"type":597,"tag":803,"props":54467,"children":54468},{},[54469,54473,54478,54483,54488,54493,54497],{"type":597,"tag":807,"props":54470,"children":54471},{},[54472],{"type":603,"value":54420},{"type":597,"tag":807,"props":54474,"children":54475},{},[54476],{"type":603,"value":54477},"读取客户端发过来的操作信息",{"type":597,"tag":807,"props":54479,"children":54480},{},[54481],{"type":603,"value":54482},"根据客户端操作执行逻辑运算",{"type":597,"tag":807,"props":54484,"children":54485},{},[54486],{"type":603,"value":54487},"采用上一个循环得到的模拟时间来模拟服务器控制的物体移动状态",{"type":597,"tag":807,"props":54489,"children":54490},{},[54491],{"type":603,"value":54492},"对每一个连接的客户端，发送打包相应的物体/世界状态",{"type":597,"tag":807,"props":54494,"children":54495},{},[54496],{"type":603,"value":54450},{"type":597,"tag":807,"props":54498,"children":54499},{},[54500],{"type":603,"value":54455},{"type":597,"tag":606,"props":54502,"children":54503},{},[54504],{"type":603,"value":54505},"在这个模型中，非玩家物体完全由服务器控制其状态，每个玩家根据服务器发过来的数据包控制自己的移动。这是一种很自然的方法，当然还有其它的方法也可以完成这个功能。",{"type":597,"tag":857,"props":54507,"children":54509},{"id":54508},"_3用户消息的内容",[54510],{"type":603,"value":54511},"3.用户消息的内容",{"type":597,"tag":606,"props":54513,"children":54514},{},[54515],{"type":603,"value":54516},"基于half-life引擎的游戏用户消息都很简单，只需要封装在一个包含几个关键成员的结构中：",{"type":597,"tag":621,"props":54518,"children":54523},{"code":54519,"language":54520,"meta":591,"className":54521},"typedef struct usercmd_s\n{\n    // Interpolation time on client\n    short lerp_msec;  \n    // Duration in ms of command\n    byte msec;    \n    // Command view angles.\n    vec3_t viewangles;  \n    // intended velocities\n    // Forward velocity.\n    float forwardmove;  \n    // Sideways velocity.\n    float sidemove;   \n    // Upward velocity.\n    float upmove;  \n    // Attack buttons\n    unsigned short buttons; \n    //\n    // Additional fields omitted...\n    //\n} usercmd_t;\n","c++",[54522],"language-c++",[54524],{"type":597,"tag":629,"props":54525,"children":54526},{"__ignoreMap":591},[54527],{"type":603,"value":54519},{"type":597,"tag":606,"props":54529,"children":54530},{},[54531],{"type":603,"value":54532},"结构中最关键的变量时msec,viewangles,forward,side,upmove和buttons。msec表示这个命令执行对应的毫秒数（也就是上面提到的“frametime”）。viewangles是一个三维向量，表示玩家的朝向。forward,side和upmove表示玩家是否通过键盘、鼠标或控制杆控制移动。最后，buttons这个字段包含一个或多个比特，标志玩家是否按着某些按键。",{"type":597,"tag":606,"props":54534,"children":54535},{},[54536],{"type":603,"value":54537},"基于C/S架构的游戏采用以上数据结构运行如下：客户端创建命令并发送到服务器，服务器响应这些命令并把更新了的世界和物体位置信息发回客户端，客户端收到以后进行渲染。这种方式非常简单，但是在实际应用中效果差强人意，用户会感觉到网络连接带来的明显延迟。这主要是由于客户端完全没有逻辑操作，发出消息以后就等待服务器响应。如果客户端跟服务器有500ms的延迟，客户端执行了操作到看到操作的结果就需要500ms，这种延迟在局域网通常可以接受（因为通常延迟比较小），但在因特网上是没法接受的",{"type":597,"tag":857,"props":54539,"children":54541},{"id":54540},"_4客户端预测",[54542],{"type":603,"value":54543},"4.客户端预测",{"type":597,"tag":606,"props":54545,"children":54546},{},[54547],{"type":603,"value":54548},"有一种方法可以改善这种情况：客户端本地即时执行移动操作，假定服务器即时通知客户端可以执行操作，这种方法可以称为客户端预测。",{"type":597,"tag":606,"props":54550,"children":54551},{},[54552],{"type":603,"value":54553},"采用客户端运动预测以后，客户端就不再是一个“小型客户端”，不再单单响应服务器命令；但也不是说客户端可以像没有中央服务器的p2p游戏完全自治。服务器仍然在运行并保证在客户端跟服务器运行结果不一致的情况下纠正客户端错误的模拟。由于网络延迟，修正在一个网络传输周期以后才会执行，这个时候纠正信息通常已经过期，这样会导致明显的位置漂移，因为客户端收到的修正信息是过去某个时间的。",{"type":597,"tag":606,"props":54555,"children":54556},{},[54557],{"type":603,"value":54558},"为了使客户端运动预测有效，我们采用以下方法：还是客户端采样并生成命令发送到服务器，但是每个包含生成时间的命令在客户端本地存起来并在预测算法中使用。",{"type":597,"tag":606,"props":54560,"children":54561},{},[54562],{"type":603,"value":54563},"预测的过程中，我们把服务器确认的移动信息作为开始，这样客户端就可以确定服务器执行上次命令以后游戏中玩家的准确信息（比如位置）。如果网络有延迟，这个确认命令也会有一定延迟。假设客户端运行帧率为50fps，网络延时为100ms，这样在客户端收到服务器的确认命令的时候，本地命令队列中已经有5条信息，这5条信息被用来执行客户端预测。假设执行完全预测【1】客户端在收到来自服务器的最新信息后，就开始按照与服务器相同的逻辑执行本地消息队列中的5个命令。这些命令执行以后得到当前状态（最重要的是位置），然后根据玩家的状态信息渲染当前帧。",{"type":597,"tag":606,"props":54565,"children":54566},{},[54567],{"type":603,"value":54568},"在半条命这个游戏中，客户端跟服务器采用相同的代码来计算移动，这样可以减小客户端预测跟服务器之间的误差。这些代码位于HLSDK中的pm_shared/（意思是“player movement shared”）。这段代码的输入是玩家操作和客户端的初始状态，输出是玩家操作以后的状态。客户端算法大致如下：",{"type":597,"tag":621,"props":54570,"children":54572},{"code":54571},"\"from state\" \u003C- state after last user command acknowledged by the server;\n\n\"command\" \u003C- first command after last user command acknowledged by server;\n\nwhile (true)\n{\n    run \"command\" on \"from state\" to generate \"to state\";\n    if (this was the most up to date \"command\")\n    break;\n\n    \"from state\" = \"to state\";\n    \"command\" = next \"command\";\n};\n",[54573],{"type":597,"tag":629,"props":54574,"children":54575},{"__ignoreMap":591},[54576],{"type":603,"value":54571},{"type":597,"tag":606,"props":54578,"children":54579},{},[54580],{"type":603,"value":54581},"玩家的初始状态和预测结果用来渲染场景。命令的执行过程就是：将玩家状态复制到共享数据结构中，执行玩家操作（执行hlsdk中pm_shared中的共用代码），然后将结果复制到目标状态（to state）",{"type":597,"tag":606,"props":54583,"children":54584},{},[54585],{"type":603,"value":54586},"这个系统中有几个需要注意的地方，首先，由于网络延迟，客户端又在不停地以一定速度（客户端帧率）生成命令，一个命令通常会被客户端多次执行，知道得到服务器的确定以后将其从命令列表中删除（这就是半条命中的滑动窗口）。首先要考虑的是如何处理共享代码中生成的声效和动画效果。因为命令可能会被多次执行，预测位置的过程被多次执行的时候要注意避免重声等不正确的效果。另外，服务器也要避免客户端意见预测的效果。然而，客户端必须重新运行旧的命令，否则就没法根据服务器来纠正客户端的预测错误。解决方法很简单：客户端将没有执行的客户端命令进行标记，如果这些命令在客户端第一次执行，则播放相应的效果。",{"type":597,"tag":606,"props":54588,"children":54589},{},[54590],{"type":603,"value":54591},"另外需要注意的是服务器不处理，只有客户端才有的一些数据；如果没有这种类型的数据，我们可以如上面所述，以服务器第一条消息作为起点进行预测得到下一帧状态（包括用来渲染的位置信息）。然而，如果有些逻辑是纯客户端的，服务器不会处理（比如玩家蹲下来眼睛的位置-然而这也不是纯客户端信息，因为服务器也会处理这个数据），这种情况下我们需要将预测的中间结果存起来。可以用一个滑动窗口完成这项工作，其中“开始状态”是开始，以后每次执行一个玩家命令预测完成后，填写窗口中的下一个状态；当服务器通知某个命令被接受并执行以后，从窗口中查找服务器处理的是哪条命令并将相应的数据传到下一个帧的“起始状态”",{"type":597,"tag":606,"props":54593,"children":54594},{},[54595],{"type":603,"value":54596},"到此为止，我们描述了客户端的运动预测。quakeworld2中采用了这种类型的预测",{"type":597,"tag":857,"props":54598,"children":54600},{"id":54599},"_5开火过程中的客户端预测",[54601],{"type":603,"value":54602},"5.开火过程中的客户端预测",{"type":597,"tag":606,"props":54604,"children":54605},{},[54606],{"type":603,"value":54607},"上面描述的系统可以很自然地用于武器开火效果预测。客户端玩家需要记录一些状态，比如身上有哪些武器，正在使用的是哪一个，每把武器都还剩多少弹药。有了这些信息，开火逻辑可以建立在运动逻辑上面，只需要在客户端和服务器使用的命令里面加上玩家开火的按键信息。在半条命中，为了简单，武器开火逻辑代码也跟运动代码一样也作为“共享代码”。所有会影响到武器状态的变量，比如弹药、下次可开火时间、正在播放那个武器动画，都作为服务器的状态，这些状态会通知给客户端用来预测武器状态。",{"type":597,"tag":606,"props":54609,"children":54610},{},[54611],{"type":603,"value":54612},"客户端武器开火预测包括预测武器切换、部署、手枪皮套。这样，玩家会感觉游戏中的移动和武器状态100%受他控制。这在减小网络延迟给玩家带来的不爽上面迈出了一大步。",{"type":597,"tag":857,"props":54614,"children":54616},{"id":54615},"_6一些工作",[54617],{"type":603,"value":54618},"6.一些工作",{"type":597,"tag":606,"props":54620,"children":54621},{},[54622],{"type":603,"value":54623},"服务器需要将必要的字段发给客户端，并且处理很多中间状态，有人可能有这样的疑问，为什么不把服务器逻辑取消，让客户端广播自己的位置，也就是将所有的移动、开火逻辑放在客户端。这样，客户端就会给服务器发送类似这样的结果报告：“我在X位置，我爆了玩家2的脑袋”。如果客户端可信的话，这样做是可以的，很多军方仿真系统就是这样做的（他们是一个封闭系统，所有客户端都可信）。点对点的游戏也是这么做的。对于半条命来说不可以这样做，因为客户端可能“欺骗”服务器。如果我们以这种方法封装状态数据，就会诱导玩家破解客户端【3】。对于我们的游戏来说这样做奉献太大，我们还是选择采用服务器模式来做校验。",{"type":597,"tag":606,"props":54625,"children":54626},{},[54627],{"type":603,"value":54628},"客户端进行运动和武器效果预测是非常可行的。例如quake3就支持这样的预测。这个系统需要注意一点，在判断目标的时候需要考虑到延迟（比如即时射击武器）。换句话说，虽然你看到自己用\\即时\\武器进行了射击，你自己的位置也是最新的，射击结果仍然跟延迟有关。例如，如果你射击一个玩家，这个玩家沿与你实现垂直的方向奔跑，假设你客户端延迟为100ms，玩家奔跑速度是500单位每秒，这样你需要瞄准玩家前方50单位才能准确击中。延迟越大，就需要更大的提前量。靠感觉弥补延迟太困难了。为了减轻这种效果，quake3对你的射击播放一个短音来进行确定。这样，玩家可以算出快速发射武器的时候需要多大的提前量，同时调整提前量直到听到稳定的音调串。如果延迟比较大，而你的对手又在不断躲避，就很难获得足够的反馈判断。如果延迟也不断变化，就更难了。",{"type":597,"tag":857,"props":54630,"children":54632},{"id":54631},"_7目标的显示",[54633],{"type":603,"value":54634},"7.目标的显示",{"type":597,"tag":606,"props":54636,"children":54637},{},[54638],{"type":603,"value":54639},"影响玩家游戏体验的另一个重要方面是客户端如何渲染其它玩家。两种基本的判断机制是：外推法和内插法【4】",{"type":597,"tag":606,"props":54641,"children":54642},{},[54643],{"type":603,"value":54644},"外推法把其它玩家/物体看作一个点，这个点开始的位置、方向、速度已知，沿着自己的弹道向前移动。因此，假设延时是100ms，最新的协议通知客户端这个玩家奔跑速度是500单位每秒，方向垂直于玩家视线，客户端就可以假设事实上这个玩家当前实际的位置已经向前移动了50个单位。客户端可以在这个外推的位置渲染这个玩家，这样本地玩家就差不多可以正确瞄准。",{"type":597,"tag":606,"props":54646,"children":54647},{},[54648],{"type":603,"value":54649},"外推法的最大缺点是玩家的移动并不是完全弹道的，而是不确定的并且高\"jerk\"【5】。大部分FPS游戏采用非现实的玩家系统，玩家可以随时转弯，可以在任意角度作用不现实的加速度，因此外推法得到的结果经常是错误地。开发者可以通过限制外推时间来减轻外推误差（比如quake限制不能超过100ms）。这种限制使得在客户端收到玩家正确位置以后，纠错不至于太大。当前大部分玩家的网络延迟高于150ms，玩家必须对游戏中的其他玩家进行外推以便正确击中。如果别的玩家因为外推错误，被服务器拉回，游戏体验将非常差。",{"type":597,"tag":606,"props":54651,"children":54652},{},[54653],{"type":603,"value":54654},"另一种方法叫插值法。插值法可以这样理解：客户端物体实际移动位置总是滞后一段时间。举个例子，如果服务器每秒同步10次世界信息，客户端渲染的时候会有100ms滞后。这样，每一帧渲染的时候，我们通过最新收到的位置信息和前100ms的位置信息（或者上一帧渲染位置）进行差值得到结果。我们每收到一个物体位置的更新信息，（每秒10个更新意味着每100ms收到一个更新）接下来的100ms我们就可以朝这个新的位置移动。",{"type":597,"tag":606,"props":54656,"children":54657},{},[54658],{"type":603,"value":54659},"如果一个更新包没有收到，有2种处理方法：第一、用上面介绍的外推法（有可能产生较大误差）；第二、保持玩家位于当前位置直到收到下一个更新包（会导致玩家移动顿挫）",{"type":597,"tag":606,"props":54661,"children":54662},{},[54663],{"type":603,"value":54664},"内插法的大致过程如下：",{"type":597,"tag":803,"props":54666,"children":54667},{},[54668,54673,54678,54683],{"type":597,"tag":807,"props":54669,"children":54670},{},[54671],{"type":603,"value":54672},"每个更新包包含生成的服务器时间戳【6】",{"type":597,"tag":807,"props":54674,"children":54675},{},[54676],{"type":603,"value":54677},"根据客户端当前时间，客户端通过减去时间差（100ms）计算 一个目标时间",{"type":597,"tag":807,"props":54679,"children":54680},{},[54681],{"type":603,"value":54682},"如果计算得到的目标时间在上一个更新时间和上上个更新时间之间，这些时间戳可以决定目标时间在过去的时间间隙中的情况",{"type":597,"tag":807,"props":54684,"children":54685},{},[54686],{"type":603,"value":54687},"目标时间情况用来通过插值计算结果（如位置、角度）",{"type":597,"tag":606,"props":54689,"children":54690},{},[54691],{"type":603,"value":54692},"上面提到的插值法，本质上是客户端缓存了接下来100ms的数据。对于每一个周围的玩家，他们都位于过去某个时间的位置，根据每一个具体的时间点进行插值。如果偶尔发生丢包，我们就将插值时间延长到200ms。这样我们就可以忽略一次更新（假设同步频率还是10次每秒），玩家还可以移动到合理的目标位置，这样进行插值通常不会有什么问题。当然，插值多少时间需要权衡，因为这种方法是用延时（玩家更难击中）来换取平滑。",{"type":597,"tag":606,"props":54694,"children":54695},{},[54696],{"type":603,"value":54697},"另外，上述插值方法（客户端通过2个更新信息插值并且朝最新更新位置移动）需要服务器更新信息间隔固定。对于所谓的“视觉效果因素”，这种方式很难处理，“视觉效果因素”是这样的：假设我们插值的物体是弹球（这种模型可以准确描述某些玩家）。极端情况下，球或者在空中，或者正在碰地板。然而，通常情况下球在这两种状态之间。如果我们只插值上一个位置，这个位置可能既不在地面上，也不是最高点，这样，弹球弹的效果就被平滑掉了，好像永远没有弹到地面一样。这是一个经典问题，增加采样率可以减轻这种影响，但是仍然有可能我们采样不到球在地面的点跟最高点，这些点会给平滑掉。",{"type":597,"tag":606,"props":54699,"children":54700},{},[54701],{"type":603,"value":54702},"另外，不同用户网络状况不同，强迫每个用户都以固定速度更新（比如每秒10次）效果不是很好，在半条命中，用户每秒可以请求任意数量的更新包（没有限制）。这样，高速网络用户可以每秒更新50次，只要用户愿意。半条命的默认设置是每秒每个用户（以及游戏中其它物体）发送20次更新，以100ms为时间窗口进行插值。【7】",{"type":597,"tag":606,"props":54704,"children":54705},{},[54706],{"type":603,"value":54707},"为了避免“反弹球\"平滑问题，我们在插值的过程中采用了一个不同的算法，这种算法中我们对每一个可能插值的物体记录了一个完整的“历史位置”信息。",{"type":597,"tag":606,"props":54709,"children":54710},{},[54711],{"type":603,"value":54712},"历史位置信息记录了物体的时间戳、远点、角度（以及其它我们需要插值计算的数据）。我们每收到一个服务器的更新，我们就创建一条包含时间戳的记录，其中包含原始位置、角度信息。在插值过程中，我们用上面的方法计算目标时间，然后搜索位置历史信息，找到包含目标时间的记录区间。然后用找到的信息插值计算当前帧的位置。这样我们就可以平滑跟踪到包含所有采样点的曲线。如果客户端帧率比服务器更新频率大，我们就可以将采样点平滑处理，减小上面提到的平滑处理带来的问题（当然没法避免，因为采用频率限制，而世界本身是连续的）。",{"type":597,"tag":606,"props":54714,"children":54715},{},[54716],{"type":603,"value":54717},"需要注意的是，上面提到的插值方法使用的时候，物体有时候会被服务器拉回，而不是快速移动。当然我们也可以平滑地将物体移动一段较长的距离，这样看起来物体移动很快。更新的过程中我们可以设一个标志表示不插值或清除历史记录，或者如果起始点与目标点距离过长，我们就认为数据不正常。这种情况我们就将物体直接拉过去。并以这个位置为起始点进行插值。",{"type":597,"tag":857,"props":54719,"children":54721},{"id":54720},"_8延迟补偿",[54722],{"type":603,"value":54723},"8.延迟补偿",{"type":597,"tag":606,"props":54725,"children":54726},{},[54727],{"type":603,"value":54728},"插值也会带来延迟，所以考虑延迟补偿的过程中需要理解插值过程。玩家看到的别的物体是经过插值计算出来的，所以插值过程中需要考虑在服务器上玩家的目标是否正确。",{"type":597,"tag":606,"props":54730,"children":54731},{},[54732],{"type":603,"value":54733},"延迟补偿是服务器执行的一种策略，当服务器收到客户端命令并执行的过程中，根据客户端的具体情况进行归一。延迟补偿可以看做服务器处理用户命令的时候回退一段时间，退到客户端发送命令时候的准确时间。算法流程如下：",{"type":597,"tag":803,"props":54735,"children":54736},{},[54737,54760,54765],{"type":597,"tag":807,"props":54738,"children":54739},{},[54740,54742],{"type":603,"value":54741},"服务器执行客户端命令之前执行以下操作：",{"type":597,"tag":803,"props":54743,"children":54744},{},[54745,54750,54755],{"type":597,"tag":807,"props":54746,"children":54747},{},[54748],{"type":603,"value":54749},"计算玩家正确的延迟",{"type":597,"tag":807,"props":54751,"children":54752},{},[54753],{"type":603,"value":54754},"对每个玩家，从服务器历史信息中找到发送给玩家信息和收到玩家响应的信息。",{"type":597,"tag":807,"props":54756,"children":54757},{},[54758],{"type":603,"value":54759},"对于每一个玩家，将其拉回到这个更新时间（插值得到的精确时间）中执行用户命令。这个回退时间需要考虑到命令执行的时候的网络延时和插值量【8】",{"type":597,"tag":807,"props":54761,"children":54762},{},[54763],{"type":603,"value":54764},"执行玩家命令（包括武器开火等。）",{"type":597,"tag":807,"props":54766,"children":54767},{},[54768],{"type":603,"value":54769},"将所有移动的、错位的玩家移动到他们当前正确位置。",{"type":597,"tag":606,"props":54771,"children":54772},{},[54773],{"type":603,"value":54774},"注意：我们把时间往后推算的时候，需要考虑那个时候玩家的状态，比如玩家是或者还是已经已经死掉，玩家是否处于躲避状态。执行运动补偿以后，玩家就可以直接瞄准目标进行设计，而不需要计算一个提前量。当然，这种方案是游戏中的权衡设计。",{"type":597,"tag":857,"props":54776,"children":54778},{"id":54777},"_9游戏涉及中延迟补偿的使用",[54779],{"type":603,"value":54780},"9.游戏涉及中延迟补偿的使用",{"type":597,"tag":606,"props":54782,"children":54783},{},[54784],{"type":603,"value":54785},"采用延迟补偿以后，每个玩家游戏的过程中感觉不到明显延迟。在这里需要理解可能会产生一些矛盾和不一致。当然，验证服务器和无逻辑的客户端老系统也会有自相矛盾的情况。最后，这个这种事游戏设计决定的。对于半条命，我们相信采用延迟补偿是正确的游戏决定。",{"type":597,"tag":606,"props":54787,"children":54788},{},[54789],{"type":603,"value":54790},"老系统的一个问题是，由于网络延迟，目标需要有一个提前量。瞄准敌人进行射击几乎总是不能击中。这种不一致导致射击很不真实，响应也不可控制。",{"type":597,"tag":606,"props":54792,"children":54793},{},[54794],{"type":603,"value":54795},"采用延迟补偿以后带来的是另一种形式的不一致。对于大部分玩家，他们只需要专注于得到更多的射击技能来武装他们（当然他们也是需要瞄准的）。延时补偿使得玩家只需要直接瞄准他的目标并按下开火按钮即可（对于即时击中武器【9】）。不一致也时有发生，但是是在击中以后。",{"type":597,"tag":606,"props":54797,"children":54798},{},[54799],{"type":603,"value":54800},"例如，如果一个延时比较大的玩家击中一个延时比较小的玩家并且得到一分，低延时的玩家会感觉高延时玩家“在角落里被击中”【10】。这种情况下，低延迟玩家可能已经从角落里冲出，而高延时玩家看到的是过去的信息。每一个有延迟的玩家都有一个朝向别的玩家的直的视线，直的视线指向一个瞄准点然后开火。这个时候，低延时的玩家可能已经跑到角落里并且蹲在一个箱子后面，如果高延迟玩家延迟比较大，比如500ms，这是经常发生的；这样当高延时玩家的命令传到服务器的时候，已经隐藏起来的玩家需要取一个历史位置并计算是否击中，在这种极端情况下，低延时玩家会觉得他再角落里被击中了。然而，对于高延时玩家来说，他是正对着别的玩家开火的。从游戏设计的角度来讲，我们需要这样决定：让每个玩家即时与世界交互并开火。",{"type":597,"tag":606,"props":54802,"children":54803},{},[54804],{"type":603,"value":54805},"此外，在正常战斗中，上面提到的不一致并不明显。对于第一人称射击游戏，有两种典型情况。第一、考虑两个玩家直线跑向对方并且开火；这种情况下，延时补偿只会把玩家在移动直线上往后拉。被击中的玩家看他的射击者在前方，这样就不会有“子弹拐到角落里”的情况发生。",{"type":597,"tag":606,"props":54807,"children":54808},{},[54809],{"type":603,"value":54810},"第二种情况是两个玩家中的一个射击，另外一个玩家在垂直于第一个玩家视线的方向冲锋。这种情况下的解决问题的原理与刚才不同。刚才提到的冲锋的玩家视野差不多是90°（至少第一人称射击游戏是这样），因此，这个玩家看不到正在射击他的那个人。因此他被击中也不会感觉奇怪或者错误（谁让你在空旷区域狂奔呢，活该）。当然，如果你开发的是一个坦克游戏，或者在你的游戏中玩家朝一个方向跑的时候可以看到别的方向，错误可能就会比较明显，你可能发现玩家设计方向不对。",{"type":597,"tag":857,"props":54812,"children":54814},{"id":54813},"_10总结",[54815],{"type":603,"value":54816},"10.总结",{"type":597,"tag":606,"props":54818,"children":54819},{},[54820],{"type":603,"value":54821},"延迟补偿是当前动作游戏改善延迟影响的一种方法。是否采用这种方法取决于游戏设计者，因为如何设计直接影响到游戏的体验。对于把那条命、军团要塞、cs这样的游戏，延迟补偿所带来的效果提升显著大于其带来的错误。",{"type":597,"tag":857,"props":54823,"children":54825},{"id":54824},"脚注",[54826],{"type":603,"value":54824},{"type":597,"tag":606,"props":54828,"children":54829},{},[54830],{"type":603,"value":54831},"【1】在半条命引擎中，预测的过程中允许一定的延迟，但不能容忍实际网络延迟这么大的延迟。通过调整参数，我们可以控制预测过程中的延迟，这个参数pushlatency是一个负数，以毫秒为单位表示预测过程中的延迟。如果这个值大于（绝对值）实际网络延迟，这时预测就是完全的预测（译注：客户端服务器完全同步）。这种情况下玩家感觉不到任何延迟。实际应用中，一些人错误地认为参数pushlatency应该设为实际网络延迟的一半，这种情况下玩家移动仍然有网络延迟一半的延迟（感觉类似于冰面移动）。基于这个原因，实际应用总应该总是采用完全预测，pushlatency这个变量应该从半条命引擎中移除",{"type":597,"tag":606,"props":54833,"children":54834},{},[54835,54837,54843],{"type":603,"value":54836},"【2】",{"type":597,"tag":886,"props":54838,"children":54841},{"href":54839,"rel":54840},"http://www.quakeforge.net/files/q1source.zip",[890],[54842],{"type":603,"value":54839},{"type":603,"value":54844}," (Return)",{"type":597,"tag":606,"props":54846,"children":54847},{},[54848],{"type":603,"value":54849},"【3】关于作弊和反作弊的问题超出了本篇文章讨论的范围",{"type":597,"tag":606,"props":54851,"children":54852},{},[54853],{"type":603,"value":54854},"【4】虽然混合纠正方法也可以使用",{"type":597,"tag":606,"props":54856,"children":54857},{},[54858],{"type":603,"value":54859},"【5】“jerk”用来度量使玩家改变加速度的作用的快慢",{"type":597,"tag":606,"props":54861,"children":54862},{},[54863],{"type":603,"value":54864},"【6】本文假设计算连接延时的时候客户端与服务器完全同步，也就是说，每次更新的时候客户端收到服务器发过来的时间被直接当做客户端的时间使用。这样，客户端跟服务器完全匹配，只是客户端稍微晚一点（晚多少取决于延时多少）。平滑客户端时钟差值可以有很多方法。",{"type":597,"tag":606,"props":54866,"children":54867},{},[54868],{"type":603,"value":54869},"【7】更新时间间隔没必要是固定的。因为对于剧烈运动的游戏，如果带宽不够，很有可能客户端发过来的数据超过了处理能力。如果采用固定更新间隔，在发完一个更新包以后就需要等待一个固定更新周期时间以后再发下一个包。这种逻辑不能很好地使用带宽。因此，服务器发给每个客户端数据包以后，应该自己决定下一个包什么时候发，决定的依据是用户的带宽、用户设置的每秒更新频率。如果用户要求更新20次每秒，那么需要等待50ms以后下个更新包才能发送。如果激活了带宽限制（而服务器帧率又足够高），我们可能就需要等待比如61ms（或其他值）以后发送下一个更新包。因此，半条命游戏数据包发送间隔是随机的。基于服务器的这种情况，将启动点作为一个变量，移动到最新目标点进行插值这种方法效果欠佳。",{"type":597,"tag":606,"props":54871,"children":54872},{},[54873],{"type":603,"value":54874},"【8】半条命代码中usercmd_t结构中变量lerp_msec前面描述过。",{"type":597,"tag":606,"props":54876,"children":54877},{},[54878],{"type":603,"value":54879},"【9】对于发射导弹的武器，延迟补偿有更多需要解决的问题。假如\\导弹是由服务器处理的，那么导弹应该位于哪个时间区间？每次导弹准备发射的时候，是否需要把每个玩家往后拉一段时间的？如果是这样，那么需要往后拉多少？这些问题是需要考虑的。在半条命中，为了避免这种问题，我们对导弹不进行延迟补偿（这并不意味着客户端不进行声音预测，只是实际的导弹不进行延迟补偿）。",{"type":597,"tag":606,"props":54881,"children":54882},{},[54883],{"type":603,"value":54884},"【10】用户社区通常采用这种情况来描述不一致性。",{"type":597,"tag":1321,"props":54886,"children":54887},{},[54888],{"type":597,"tag":807,"props":54889,"children":54890},{},[54891],{"type":597,"tag":886,"props":54892,"children":54895},{"href":54893,"rel":54894},"https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization",[890],[54896],{"type":603,"value":54893},{"title":591,"searchDepth":787,"depth":787,"links":54898},[],"content:dotnet:2020-02-02-Latency_Compensating_Methods_in_ClientServer_In-game_Protocol_Design_and_Optimization.md","dotnet/2020-02-02-Latency_Compensating_Methods_in_ClientServer_In-game_Protocol_Design_and_Optimization.md",{"_path":68,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":67,"description":54902,"body":54903,"_type":791,"_id":55147,"_source":793,"_file":55148,"_extension":795,"date":54359},"Source引擎的多人游戏使用基于UDP通信的C/S架构。游戏以服务器逻辑作为世界权威，客户端和服务器通过UDP协议(20~30packet/s）通信。客户端从服务器接收信息并基于当前世界状态渲染画面和输出音频。客户端以固定频率发送操作输入到服务器。客户端仅与游戏服务器，而不是彼此之间通信。多人游戏必须处理基于网络消息同步所带来的一系列问题。",{"type":594,"children":54904,"toc":55139},[54905,54909,54914,54921,54926,54931,54936,54941,54946,54951,54957,54962,54969,54974,54979,54984,54989,54994,54999,55004,55009,55014,55019,55026,55031,55036,55041,55046,55052,55057,55064,55069,55074,55079,55084,55089,55095,55100,55105,55110,55115,55120,55125,55130],{"type":597,"tag":606,"props":54906,"children":54907},{},[54908],{"type":603,"value":54902},{"type":597,"tag":606,"props":54910,"children":54911},{},[54912],{"type":603,"value":54913},"网络的带宽是有限的，所以服务器不能为每一个世界的变化发送新的更新数据包发送到所有客户端。相反，服务器以固定的频率取当前世界状态的快照并广播这些快照到客户端。网络数据包需要一定的时间量的客户端和服务器（RTT的一半）来往。这意味着客户端时间相对服务器时间总是稍有滞后。此外，客户端输入数据包同步到服务器也有一定网络传输时间，所以服务器处理客户端输入也存在延迟的。不同的客户端因为网络带宽和通信线路不同也会存在不同的网络延时。随着服务器和客户端之间的这些网络延迟增大, 网络延迟可能会导致逻辑问题。比如在快节奏的动作游戏中，在几毫秒的延迟甚至就会导致游戏卡顿的感觉，玩家会觉得很难打到对方玩家或运动的物体。此外除了带宽限制和网络延迟还要考虑网络传输中会有消息丢失的情况。",{"type":597,"tag":606,"props":54915,"children":54916},{},[54917],{"type":597,"tag":719,"props":54918,"children":54920},{"alt":719,"src":54919},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175512800-299175149.png",[],{"type":597,"tag":606,"props":54922,"children":54923},{},[54924],{"type":603,"value":54925},"为了解决网络通信引入的一系列问题，Source引擎在服务器同步时采用了数据压缩和延迟补偿的逻辑，客户端采用了预测运行和插值平滑处理等技术来获得更好的游戏体验。",{"type":597,"tag":1023,"props":54927,"children":54929},{"id":54928},"基本网络模型",[54930],{"type":603,"value":54928},{"type":597,"tag":606,"props":54932,"children":54933},{},[54934],{"type":603,"value":54935},"服务器以一个固定的时间间隔更新模拟游戏世界。默认情况下，时间步长为15ms，以66.66次每秒的频率更新模拟游戏世界，但不同游戏可以指定更新频率。在每个更新周期内服务器处理传入的用户命令，运行物理模拟步，检查游戏规则，并更新所有的对象状态。每一次模拟更新tick之后服务器会决定是否更新当前时间快照以及每个客户端当前是否需更新。较高的tickrate增加了模拟精度，需要服务器和客户端都有更多可用的CPU和带宽资源。客户通常只能提供有限的带宽。在最坏的情况下，玩家的调制解调器连接不能获得超过5-7KB /秒的流量。如果服务器的数据更新发送频率超过了客户端的带宽处理限制，丢包是不可避免的。因此客户端可以通过在控制台设置接受带宽限制，以告诉服务器其收到的带宽容量。这是客户最重要的网络参数，想要获得最佳的游戏体验的话必须正确的设置此参数。客户端可以通过设置cl_updaterate（默认20）来改变获得快照平的频率，但服务器永远不会发送比tickerate更多的更新或超过请求的客户端带宽限制。服务器管理员可以通过sv_minrate和sv_maxrate(byte/s)限制客户端的上行请求频率。当然快照更新同步频率都受到sv_minupdaterate和sv_maxupdaterate（快照/秒）的限制。",{"type":597,"tag":606,"props":54937,"children":54938},{},[54939],{"type":603,"value":54940},"客户端使用与服务端tickrate一样的频率采样操作输入创建用户命令。用户命令基本上是当前的键盘和鼠标状态的快照。客户端不会把每个用户命令都立即发送到服务器而是以每秒（通常是30）的速率发送命令包。这意味着两个或更多个用户的命令在同一包内传输。客户可以增加与的cl_cmdrate命令速率。这可以提高响应速度，但需要更多的出口带宽。",{"type":597,"tag":606,"props":54942,"children":54943},{},[54944],{"type":603,"value":54945},"游戏数据使用增量更新压缩来减少网络传输。服务器不会每次都发送一个完整的世界快照，而只会更新自上次确认更新(通过ACK确认)之后所发生的变化（增量快照)。客户端和服务器之间发送的每个包都会带有ACK序列号来跟踪网络数据流。当游戏开始时或客户端在发生非常严重的数据包丢失时, 客户可以要求全额快照同步。",{"type":597,"tag":606,"props":54947,"children":54948},{},[54949],{"type":603,"value":54950},"用户操作的响应速度(操作到游戏世界中的可视反馈之间的时间)是由很多因素决定的，包括服务器/客户端的CPU负载，更新频率，网络速率和快照更新设置，但主要是由网络包的传输时间确定。从客户端发送命令到服务器响应, 再到客户端接收此命令对应的服务器响应被称为延迟或ping（或RTT）。低延迟在玩多人在线游戏时有显著的优势。客户端本地预测和服务器的延迟补偿技术可以尽量为网络较差的游戏玩家提供相对公平的体验。如果有良好的带宽和CPU可用，可以通过调整网络设置以获得更好的体验, 反之我们建议保持默认设置，因为不正确的更改可能导致负面影响大于实际效益。",{"type":597,"tag":1023,"props":54952,"children":54954},{"id":54953},"enitiy插值平滑",[54955],{"type":603,"value":54956},"Enitiy插值平滑",{"type":597,"tag":606,"props":54958,"children":54959},{},[54960],{"type":603,"value":54961},"通常情况下客户端接收每秒约20个快照更新。如果世界中的对象（实体）直接由服务器同步的位置呈现，物体移动和动画会看起来很诡异。网络通信的丢包也将导致明显的毛刺。解决这个问题的关键是要延迟渲染，玩家位置和动画可以在两个最近收到快照之间的连续插值。以每秒20快照为例，一个新的快照更新到达时大约每50毫秒。如果客户端渲染延迟50毫秒，客户端收到一个快照，并在此之前的快照之间内插(Source默认为100毫秒的插补周期)；这样一来，即使一个快照丢失，总是可以在两个有效快照之间进行平滑插值。如下图显示传入世界快照的到达时间：",{"type":597,"tag":606,"props":54963,"children":54964},{},[54965],{"type":597,"tag":719,"props":54966,"children":54968},{"alt":719,"src":54967},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175529456-2030374817.png",[],{"type":597,"tag":606,"props":54970,"children":54971},{},[54972],{"type":603,"value":54973},"在客户端接收到的最后一个快照是在tick 344或10.30秒。客户的时间将继续在此快照的基础上基于客户端的帧率增加。下一个视图帧渲染时间是当前客户端的时间10.32减去0.1秒的画面插值延迟10.20。在我们的例子下一个渲染帧的时间是10.22和所有实体及其动画都可以基于快照340和342做正确的插值处理。",{"type":597,"tag":606,"props":54975,"children":54976},{},[54977],{"type":603,"value":54978},"既然我们有一个100毫秒的延迟插值，如果快照342由于丢包缺失，插值可以使用快照340和344来进行平滑处理。如果连续多个快照丢失，插值处理可能表现不会很好，因为插值是基于缓冲区的历史快照进行的。在这种情况下，渲染器会使用外推法（cl_extrapolate 1），并尝试基于其已知的历史，为实体做一个基于目前为止的一个简单线性外推。外推只会快照更新包连续丢失（cl_extrapolate_amount）0.25秒才会触发，因为该预测之后误差将变得太大。实体内会插导致100毫秒默认（cl_interp 0.1）的恒定视图“滞后”，就算你在listenserver（服务器和客户端在同一台机器上）上玩游戏。这并不是说你必须提前预判动画去瞄准射击，因为服务器端的滞后补偿知道客户端实体插值并纠正这个误差。",{"type":597,"tag":606,"props":54980,"children":54981},{},[54982],{"type":603,"value":54983},"最近Source引擎的游戏有cl_interp_ratioCVaR的。有了这个，你可以轻松，安全地通过设置cl_interp为0，那么增加的cl_updaterate的值（这同时也会受限于服务器tickrate）来减少插补周期。你可以用net_graph 1检查您的最终线性插值。",{"type":597,"tag":606,"props":54985,"children":54986},{},[54987],{"type":603,"value":54988},"如果打开sv_showhitboxes，你会看到在服务器时间绘制的玩家包围盒，这意味着他们在前进的线性插值时期所呈现的播放器模式。",{"type":597,"tag":1023,"props":54990,"children":54992},{"id":54991},"输入预测",[54993],{"type":603,"value":54991},{"type":597,"tag":606,"props":54995,"children":54996},{},[54997],{"type":603,"value":54998},"让我们假设一个玩家有150毫秒的网络延迟，并开始前进。前进键被按下的信息被存储在用户命令，并发送至服务器。用户命令是由移动代码逻辑处理，玩家的角色将在游戏世界中向前行走。这个世界状态的变化传送到所有客户端的下一个快照的更新。因此玩家看到自己开始行动的响应会有150毫秒延迟，这种延迟对于高频动作游戏(体育，设计类游戏)会有明显的延迟感。玩家输入和相应的视觉反馈之间的延迟会产生一种奇怪的，不自然的感觉，使得玩家很难移动或精确瞄准。客户端的输入预测（cl_predict 1）执行是一种消除这种延迟的方法，让玩家的行动感到更即时。与其等待服务器来更新自己的位置，在本地客户端只是预测自己的用户命令的结果。因此，客户端准确运行相同的代码和规则服务器将使用来处理用户命令。预测完成后，当地的玩家会移动到新位置，而服务器仍然可以看到他在老地方。150毫秒后，客户会收到包含基于他早期预测用户命令更改服务器的快照。客户端会将预测位置同服务器的位置对比。如果它们是不同的，则发生了预测误差。这表明，在客户端没有关于其他实体的正确信息和环境时，它处理用户命令。然后，客户端必须纠正自己的位置，因为服务器拥有客户端预测最终决定权。如果cl_showerror 1开启，客户端可以看到，当预测误差发生。预测误差校正可以是相当明显的，并且可能导致客户端的视图不规则跳动。通过在一定时间（cl_smoothtime）逐渐纠正这个错误，错误可以顺利解决。预测误差平滑处理可以通过设置cl_smooth 0来关闭。预测只对本地玩家以及那些只收它影响的实体有效，因为预测的工作原理是使用客户端的操作来预测的。对于其他玩家没法做有效预测, 因为没有办法立即从他们身上得到操作信息。",{"type":597,"tag":1023,"props":55000,"children":55002},{"id":55001},"延迟补偿",[55003],{"type":603,"value":55001},{"type":597,"tag":606,"props":55005,"children":55006},{},[55007],{"type":603,"value":55008},"​    比方说，一个玩家在10.5s的时刻射击了一个目标。射击信息被打包到用户命令，该命令通过网络的方式发送至服务器。服务器持续模拟游戏世界，目标可能已经移动到一个不同的位置。用户命令到达服务器时间10.6时服务器就无法检测到射击命中，即使玩家已经在目标准确瞄准。这个错误需要由服务器侧进行延迟补偿校正。延迟补偿系统使所有玩家最近位置的历史一秒。如果在执行用户的命令，服务器预计在命令创建什么时间如下：",{"type":597,"tag":606,"props":55010,"children":55011},{},[55012],{"type":603,"value":55013},"命令执行时间=当前服务器时间 - 数据包延迟 - 客户端查看插值",{"type":597,"tag":606,"props":55015,"children":55016},{},[55017],{"type":603,"value":55018},"然后服务器会将所有其他玩家回溯到命令执行时的位置，他们在命令执行时间。用户指令被执行，并正确地检测命中。用户命令处理完成后，玩家将会恢复到原来的位置。由于实体插值包含在公式中，可能会导致意外的结果。服务器端可以启用sv_showimpacts 1，显示服务器和客户端射击包围盒位置差异：",{"type":597,"tag":606,"props":55020,"children":55021},{},[55022],{"type":597,"tag":719,"props":55023,"children":55025},{"alt":719,"src":55024},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175552144-269867355.jpg",[],{"type":597,"tag":606,"props":55027,"children":55028},{},[55029],{"type":603,"value":55030},"该画面在主机上设置延迟200毫秒(net_fakelag设置)时获取的，射击真实命中玩家。红色命中包围盒显示了客户端那里是100毫秒+插补周期前的目标位置。此后，目标继续向左移动，而用户命令被行进到服务器。用户命令到达后，服务器恢复基于所述估计的命令执行时间目标位置（蓝色击中盒）。服务器回溯演绎，并确认命中（客户端看到流血效果）。",{"type":597,"tag":606,"props":55032,"children":55033},{},[55034],{"type":603,"value":55035},"因为在时间测量精度的误差客户端和服务器命中包围盒不完全匹配。对于快速移动的物体甚至几毫秒的误差也会导致几英寸的误差。多人游戏击中检测不是基于像素的完美匹配，此外基于tickrate模拟的运动物体的速度也有精度的限制。",{"type":597,"tag":606,"props":55037,"children":55038},{},[55039],{"type":603,"value":55040},"既然击中检测服务器上的逻辑如此复杂为什么不把命中检查放在客户端呢？如果在客户端进行命中检查, 玩家位置和像素命中处理检测都可以精准的进行。客户端将只告诉服务器用“打”的消息一直打到什么样的玩家。因为游戏服务器不能信任客户端这种重要决定。因为即使客户端是“干净”的，并通过了Valve反作弊保护，但是报文可以被截获修改然后发送到游戏服务器。这些“作弊代理”可以注入“打”的消息到网络数据包而不被VAC被检测。",{"type":597,"tag":606,"props":55042,"children":55043},{},[55044],{"type":603,"value":55045},"网络延迟和滞后补偿可能会引起真实的世界不可能的逻辑。例如，您可能被你看不到的目标所击中。服务器移到你的命中包围盒时光倒流，你仍然暴露给了攻击者。这种不一致问题不能通过一般化的防范解决，因为相对网络包传输的速度。在现实世界中，因为光传播如此之快，你，每个人都在你身边看到同一个世界，所以你才你没有注意到这个问题。",{"type":597,"tag":1023,"props":55047,"children":55049},{"id":55048},"网络视图net_graph",[55050],{"type":603,"value":55051},"网络视图NET_Graph",{"type":597,"tag":606,"props":55053,"children":55054},{},[55055],{"type":603,"value":55056},"Source引擎提供了一些工具来检查您的客户端连接速度和质量。使用net_graph 2可以启用相关的视图。下面的曲线图中，第一行显示每秒当前的渲染的帧，您的平均延迟时间，以及的cl_updaterate的当前值。第二行显示在最后进来的数据包（快照），平均传入带宽和每秒接收的数据包的字节大小。第三行显示刚刚传出的数据包（用户命令）相同的数据。",{"type":597,"tag":606,"props":55058,"children":55059},{},[55060],{"type":597,"tag":719,"props":55061,"children":55063},{"alt":719,"src":55062},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175609190-66628227.jpg",[],{"type":597,"tag":606,"props":55065,"children":55066},{},[55067],{"type":603,"value":55068},"默认的网络设置是专门为通过互联网连接的游戏服务器设计的。可以适用大多数客户机/服务器的硬件和网络配置工作。对于网络游戏，应该在客户端上进行调整，唯一的控制台变量是“rate”，它定义客户端可用的字节/网络连接带宽。",{"type":597,"tag":606,"props":55070,"children":55071},{},[55072],{"type":603,"value":55073},"在一个良好的网络环境中，服务器和所有客户端都具有必要的硬件资源可用，可以调整带宽和更新频率设置，来获得更多的游戏精度。增加tickrate通常可以提高运动和射击精度，但会消耗更多的服务器CPU资源。tickrate 100运行的服务器的负载大概是tickrate 66运行时的约1.5倍, 因此如果CPU性能不足可能会导致严重的计算滞后，尤其是在玩家数量比较多的时候。建议对具有更高tickrate超的游戏服务器预留必要的CPU资源。",{"type":597,"tag":606,"props":55075,"children":55076},{},[55077],{"type":603,"value":55078},"如果游戏服务器使用较高tickrate运行时，客户端可以在带宽可用的情况下增加他们的快照更新率（的cl_updaterate）和用户命令速率（的cl_cmdrate）。快照更新速率由服务器tickrate限制，一台服务器无法发送每个时钟周期的一个以上的更新。因此，对于一个tickrate66服务器，为的cl_updaterate最高的客户价值，将是66。如果你增加快照率遇到，你必须再次打开它。与增加的cl_updaterate你也可以降低画面插值延迟（cl_interp）。默认的插值延迟为0.1秒(默认的cl_updaterate为20) 视图内插延迟会导致移动的玩家会比静止不动的玩家更早发现对方。这种效果是不可避免的，但可以通过减小视图内插值延迟来减小。如果双方玩家正在移动，画面滞后会延迟影响双方玩家,双方玩家都不能获利。快照速率和视图延迟插值之间的关系如下：",{"type":597,"tag":606,"props":55080,"children":55081},{},[55082],{"type":603,"value":55083},"插补周期= MAX(cl_interp，cl_interp_ratio /cl_updaterate)",{"type":597,"tag":606,"props":55085,"children":55086},{},[55087],{"type":603,"value":55088},"可以设置cl_interp为0，仍然有插值的安全量。也可以把cl_updaterate增加，进一步降低你的插补周期，但不会超过更新tickrate(66)或客户端的网络处理能力。",{"type":597,"tag":1023,"props":55090,"children":55092},{"id":55091},"tips",[55093],{"type":603,"value":55094},"Tips",{"type":597,"tag":606,"props":55096,"children":55097},{},[55098],{"type":603,"value":55099},"不要瞎改终端配置除非你完全确定你在干嘛",{"type":597,"tag":606,"props":55101,"children":55102},{},[55103],{"type":603,"value":55104},"​    如果客户端和服务器没有足够CPU和网络资源，绝大多数所所谓高性能优化都是起负面作用",{"type":597,"tag":606,"props":55106,"children":55107},{},[55108],{"type":603,"value":55109},"不要关闭画面插值和延迟补偿",{"type":597,"tag":606,"props":55111,"children":55112},{},[55113],{"type":603,"value":55114},"​    这样并不能代理移动和设计精准度提升",{"type":597,"tag":606,"props":55116,"children":55117},{},[55118],{"type":603,"value":55119},"优化设置可能不会对每个客户端都有效",{"type":597,"tag":606,"props":55121,"children":55122},{},[55123],{"type":603,"value":55124},"如果是你是在游戏里或者SourceTv里第一视角观看你看到的画面和玩家可能不一样",{"type":597,"tag":606,"props":55126,"children":55127},{},[55128],{"type":603,"value":55129},"观战者的画面没有延迟补偿",{"type":597,"tag":606,"props":55131,"children":55132},{},[55133],{"type":597,"tag":886,"props":55134,"children":55137},{"href":55135,"rel":55136},"https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking",[890],[55138],{"type":603,"value":55135},{"title":591,"searchDepth":787,"depth":787,"links":55140},[55141,55142,55143,55144,55145,55146],{"id":54928,"depth":1530,"text":54928},{"id":54953,"depth":1530,"text":54956},{"id":54991,"depth":1530,"text":54991},{"id":55001,"depth":1530,"text":55001},{"id":55048,"depth":1530,"text":55051},{"id":55091,"depth":1530,"text":55094},"content:dotnet:2020-02-02-Source_Multiplayer_Networking.md","dotnet/2020-02-02-Source_Multiplayer_Networking.md",{"_path":53,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":52,"description":55150,"body":55151,"_type":791,"_id":55300,"_source":793,"_file":55301,"_extension":795,"date":54359},"PART 1 概述本文是关于探索快节奏多人游戏的技术和算法系列的第一篇，因此对多人游戏概念非常熟悉的同学可以随意的跳过这一篇就好啦～因为接下来只是一些介绍性质的讨论。。。任何类型的游戏开发都是某种挑战，然而在多人游戏中我们还有更多全新的问题函待解决～最最 Interesting 的地方在于其核心问题其实是人类和物理！- - 好吧其实是作弊和地理限制造成的网络延时。。PART 2 反作弊所有的一切的起源都是作弊。作为一个游戏开发者，你一般不会去担心有人在你的单人游戏中去作弊 - 因为他的行为不会给其他人带来影响，一个作弊的玩家可能并不会按你设计的套路去进行游戏，但是游戏是他的，他们有权利去选择怎",{"type":594,"children":55152,"toc":55293},[55153,55159,55164,55169,55175,55180,55185,55190,55195,55201,55206,55211,55216,55224,55229,55235,55240,55245,55250,55255,55260,55265,55271,55276,55281],{"type":597,"tag":598,"props":55154,"children":55156},{"id":55155},"part-1-概述",[55157],{"type":603,"value":55158},"PART 1 概述",{"type":597,"tag":606,"props":55160,"children":55161},{},[55162],{"type":603,"value":55163},"本文是关于探索快节奏多人游戏的技术和算法系列的第一篇，因此对多人游戏概念非常熟悉的同学可以随意的跳过这一篇就好啦～因为接下来只是一些介绍性质的讨论。。。",{"type":597,"tag":606,"props":55165,"children":55166},{},[55167],{"type":603,"value":55168},"任何类型的游戏开发都是某种挑战，然而在多人游戏中我们还有更多全新的问题函待解决～最最 Interesting 的地方在于其核心问题其实是人类和物理！- - 好吧其实是作弊和地理限制造成的网络延时。。",{"type":597,"tag":598,"props":55170,"children":55172},{"id":55171},"part-2-反作弊",[55173],{"type":603,"value":55174},"PART 2 反作弊",{"type":597,"tag":606,"props":55176,"children":55177},{},[55178],{"type":603,"value":55179},"所有的一切的起源都是作弊。",{"type":597,"tag":606,"props":55181,"children":55182},{},[55183],{"type":603,"value":55184},"作为一个游戏开发者，你一般不会去担心有人在你的单人游戏中去作弊 - 因为他的行为不会给其他人带来影响，一个作弊的玩家可能并不会按你设计的套路去进行游戏，但是游戏是他的，他们有权利去选择怎么去玩。",{"type":597,"tag":606,"props":55186,"children":55187},{},[55188],{"type":603,"value":55189},"多人游戏则不同。在任何的有竞争关系的游戏中，一个作弊玩家不仅仅给自己带来了更好的体验，他也毁了其他的玩家的游戏。作为开发者，你可能希望避免出现这样的情况，因为这会让玩家流失。",{"type":597,"tag":606,"props":55191,"children":55192},{},[55193],{"type":603,"value":55194},"为了防止作弊，有很多事可以去做，但是最重要最（可能也是唯一有意义的）的事非常简单：不要相信玩家。就做最坏的打算：所有玩家都想要作弊。",{"type":597,"tag":598,"props":55196,"children":55198},{"id":55197},"part-3-权威服务器和静默客户端",[55199],{"type":603,"value":55200},"PART 3 权威服务器和静默客户端",{"type":597,"tag":606,"props":55202,"children":55203},{},[55204],{"type":603,"value":55205},"有一个非常简单的解决方案 - 你将游戏中所有的逻辑都放在你控制的服务器来做，而客户端只是游戏的旁观者，换句话说，你游戏的客户端把输入（按键，命令）发送到服务器，服务器来运行这个游戏，然后你把结果返回给客户端。这就是常说的权威服务器，因为游戏世界中发生的一切都在服务器中进行。",{"type":597,"tag":606,"props":55207,"children":55208},{},[55209],{"type":603,"value":55210},"当然，你的服务器还是可能被发现漏洞，但是这就不属于我们要谈论的范围了。使用权威服务器可以防止很多的漏洞，比如，服务器不信任玩家的在客户端的血量，客户端想要作弊，把本地的血量调到10000%，但服务器知道血量只有10% - 当玩家被攻击的时候它还是会死掉，不管客户端的血量是多少。",{"type":597,"tag":606,"props":55212,"children":55213},{},[55214],{"type":603,"value":55215},"服务器同样不信任玩家的位置。你可能会这样做，在这一秒你告诉服务器“我在（10，10）”，然而下一秒你告诉服务器“我在（20，10）”，这样就可以穿过一堵墙或者超快速的移动。但是，权威服务器知道玩家在（10，10），当客户端告知服务器他要往右动一格的时候，客户端的位置会由服务器来处理，将位置更新为（11，10），然后告知玩家“你在（11，10）”。如下图所示:",{"type":597,"tag":606,"props":55217,"children":55218},{},[55219],{"type":597,"tag":719,"props":55220,"children":55223},{"alt":55221,"src":55222},"A simple client-server interaction.","/images/2020-02-02-client-server-game-architecture/fpm1-01.png",[],{"type":597,"tag":606,"props":55225,"children":55226},{},[55227],{"type":603,"value":55228},"总的来说，游戏的状态由服务器独自管理。客户端将动作发送给服务器，服务器来周期性地更新游戏状态，然后将新的游戏状态发送给客户端，客户端对结果进行渲染呈现。。",{"type":597,"tag":598,"props":55230,"children":55232},{"id":55231},"part-4-考虑网络问题",[55233],{"type":603,"value":55234},"PART 4 考虑网络问题",{"type":597,"tag":606,"props":55236,"children":55237},{},[55238],{"type":603,"value":55239},"上面的处理方式对于回合制的游戏非常适合，比如策略游戏或者棋牌类的游戏。它在LAN中也能工作的很好，在这种情况下，通信是瞬发的。但是对于一些对实时性要求很高的游戏，而且在internet环境中，这种解决方案就会出问题了。",{"type":597,"tag":606,"props":55241,"children":55242},{},[55243],{"type":603,"value":55244},"下面来谈一些物理的问题。假如你在旧金山，连接了一个在纽约的服务器，两地相距4000km或者2500英里（大概是里斯本到莫斯科的距离）。任何东西都不能比光快吧，即使是Internet上的数据（数据传播的底层可能是光的脉冲，线缆中的电子，或者是电磁波），光传播的速度大概是300000km/s，所以传播4000km需要13ms。",{"type":597,"tag":606,"props":55246,"children":55247},{},[55248],{"type":603,"value":55249},"这听起来可能很快，但这实际是最乐观的情况 - 假设数据传播的速度是光速，沿着直线传播，这些通常是不可能的。在真实情况下，数据是由无数个路由经过一系列的跳（在计算机网络里的属于叫做hops）进行传播的，而且大部分的传播速度都达不到光速；路由在传播的时候也会产生一些延迟，因为包必须被打包，检查和分发。",{"type":597,"tag":606,"props":55251,"children":55252},{},[55253],{"type":603,"value":55254},"所以保险起见，我们假设数据从客户端到服务器需要50ms，这接近最好的场景了 - 当你在纽约而服务器在东京呢？假设网络因为什么原因发生阻塞了呢？100ms，200ms，500ms的延迟也是有可能的。",{"type":597,"tag":606,"props":55256,"children":55257},{},[55258],{"type":603,"value":55259},"回到我们的例子，你的客户端将输入“我按下了向右的按键”发给服务器，服务器在50ms之后获取了数据，现在假设服务器能够立即响应并且将结果返回，那么客户端在50ms之后获得新的游戏状态“你现在在（1，0）”。",{"type":597,"tag":606,"props":55261,"children":55262},{},[55263],{"type":603,"value":55264},"从你的视角来看，情况是这样的：你按下了向右的按键，但是什么事都没发生，直到一百年后你的角色向右移动了一格。这样的延迟是显而易见的，当然延迟半秒不仅仅是显而易见，它让整个游戏没法玩了。",{"type":597,"tag":598,"props":55266,"children":55268},{"id":55267},"part-5-总结",[55269],{"type":603,"value":55270},"PART 5 总结",{"type":597,"tag":606,"props":55272,"children":55273},{},[55274],{"type":603,"value":55275},"通过网络连接的多人游戏是超级有趣的，但是引入了一系列的难题和挑战。权威服务器架构能够防止很多的作弊，但是直接用这种方法会让游戏的响应变得迟缓。",{"type":597,"tag":606,"props":55277,"children":55278},{},[55279],{"type":603,"value":55280},"在下面的文章，我们会介绍我们怎么围绕权威服务器来建立一个系统，能够最小的减少玩家的延迟体验，就像在玩单机游戏一样顺畅。",{"type":597,"tag":1321,"props":55282,"children":55283},{},[55284],{"type":597,"tag":807,"props":55285,"children":55286},{},[55287],{"type":597,"tag":886,"props":55288,"children":55291},{"href":55289,"rel":55290},"http://www.gabrielgambetta.com/client-server-game-architecture.html",[890],[55292],{"type":603,"value":55289},{"title":591,"searchDepth":787,"depth":787,"links":55294},[55295,55296,55297,55298,55299],{"id":55155,"depth":787,"text":55158},{"id":55171,"depth":787,"text":55174},{"id":55197,"depth":787,"text":55200},{"id":55231,"depth":787,"text":55234},{"id":55267,"depth":787,"text":55270},"content:dotnet:2020-02-02-net-sync-client-server-game-architecture.md","dotnet/2020-02-02-net-sync-client-server-game-architecture.md",{"_path":56,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":55,"description":55303,"body":55304,"_type":791,"_id":55573,"_source":793,"_file":55574,"_extension":795,"date":54359},"PART 1 概述在第一篇文章中，我们介绍了一种权威服务器的C-S模型，在这种模型中，客户端只将输入发送到服务器中，当收到来自服务器的游戏状态更新的时候再将结果渲染出来。单纯地依赖这种模型会导致玩家输入命令和画面更新之间的延迟感，比如，当玩家按下向右的按钮，然后玩家等了半秒钟才开始移动，因为首先客户端需要把输入传给服务器，然后服务器处理了出入之后计算出新的游戏状态，然后再将新的游戏状态传回给客户端。在实际的网络环境中，延迟可能会达到零点几秒，这时游戏就有点感觉延迟了，最坏的情况是直接没法玩了。在这篇文章中，我们将找到减小这种延迟感的方法，甚至能够消除这种延迟。PART 2 客户端预测虽然存在着",{"type":594,"children":55305,"toc":55565},[55306,55310,55315,55320,55328,55333,55339,55344,55349,55354,55362,55367,55372,55380,55385,55391,55396,55401,55409,55454,55459,55465,55470,55475,55483,55488,55493,55498,55521,55527,55532,55537,55542,55548,55553],{"type":597,"tag":598,"props":55307,"children":55308},{"id":55155},[55309],{"type":603,"value":55158},{"type":597,"tag":606,"props":55311,"children":55312},{},[55313],{"type":603,"value":55314},"在第一篇文章中，我们介绍了一种权威服务器的C-S模型，在这种模型中，客户端只将输入发送到服务器中，当收到来自服务器的游戏状态更新的时候再将结果渲染出来。",{"type":597,"tag":606,"props":55316,"children":55317},{},[55318],{"type":603,"value":55319},"单纯地依赖这种模型会导致玩家输入命令和画面更新之间的延迟感，比如，当玩家按下向右的按钮，然后玩家等了半秒钟才开始移动，因为首先客户端需要把输入传给服务器，然后服务器处理了出入之后计算出新的游戏状态，然后再将新的游戏状态传回给客户端。",{"type":597,"tag":606,"props":55321,"children":55322},{},[55323],{"type":597,"tag":719,"props":55324,"children":55327},{"alt":55325,"src":55326},"Effect of network delays.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-01.png",[],{"type":597,"tag":606,"props":55329,"children":55330},{},[55331],{"type":603,"value":55332},"在实际的网络环境中，延迟可能会达到零点几秒，这时游戏就有点感觉延迟了，最坏的情况是直接没法玩了。在这篇文章中，我们将找到减小这种延迟感的方法，甚至能够消除这种延迟。",{"type":597,"tag":598,"props":55334,"children":55336},{"id":55335},"part-2-客户端预测",[55337],{"type":603,"value":55338},"PART 2 客户端预测",{"type":597,"tag":606,"props":55340,"children":55341},{},[55342],{"type":603,"value":55343},"虽然存在着作弊的玩家，但是大部分时候服务器是处理有效访问的（来自非作弊玩家的），这也意味着服务器收到大部分的输入都是有效的，而且游戏状态的更新也是按照预期的，也即是说：如果你的角色在（10，10），然后方向键右被按下了，那么你的角色就会移动到（11，10）。",{"type":597,"tag":606,"props":55345,"children":55346},{},[55347],{"type":603,"value":55348},"我们可以利用这一点，如果游戏世界的确定性足够（给定一个游戏状态和一些列的输入，得到的结果是完全可预测的）。",{"type":597,"tag":606,"props":55350,"children":55351},{},[55352],{"type":603,"value":55353},"现在假设有100ms的延迟，角色移动一格需要花费100ms，使用之前说的实现方式，那么整个动作完成需要花费200ms:",{"type":597,"tag":606,"props":55355,"children":55356},{},[55357],{"type":597,"tag":719,"props":55358,"children":55361},{"alt":55359,"src":55360},"Network delay + animation.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-02.png",[],{"type":597,"tag":606,"props":55363,"children":55364},{},[55365],{"type":603,"value":55366},"因为游戏世界是确定的，我们假设传送到服务器的输入都能够成功执行。在这种假设下，客户端能够预测游戏世界在接受输入后的状态，并且绝大部分情况下，结果是正确的。",{"type":597,"tag":606,"props":55368,"children":55369},{},[55370],{"type":603,"value":55371},"与之前说的将客户端的输入发送到客户端然后等待服务器的响应再在客户端做出反应，我们可以将两者同时进行，即当在发送输入信息的时候，就当作它们已经正确执行，通常服务器返回的结果和客户端的执行的结果是一致的:",{"type":597,"tag":606,"props":55373,"children":55374},{},[55375],{"type":597,"tag":719,"props":55376,"children":55379},{"alt":55377,"src":55378},"Animation plays while the server confirms the action.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-03.png",[],{"type":597,"tag":606,"props":55381,"children":55382},{},[55383],{"type":603,"value":55384},"现在玩家输入和运行结果之间就没有任何延迟存在了，同时服务器还是权威服务器。（如果有作弊的客户端发送无用的消息，他可以把角色放在他想要的任何地方，但这并不会影响到服务器，也就是其他玩家也不会受到他的影响）。",{"type":597,"tag":598,"props":55386,"children":55388},{"id":55387},"part-3-同步问题",[55389],{"type":603,"value":55390},"PART 3 同步问题",{"type":597,"tag":606,"props":55392,"children":55393},{},[55394],{"type":603,"value":55395},"在上面的例子里，我选用了一些比较特例的数字来让所有事情看起都很完美，现在假设另一种情况，假设现在服务器延时250ms，移动一格花费100ms，现在玩家按了两下方向键右，想要往右移动两格。",{"type":597,"tag":606,"props":55397,"children":55398},{},[55399],{"type":603,"value":55400},"使用之前我们说的技术，情况如下图所示",{"type":597,"tag":606,"props":55402,"children":55403},{},[55404],{"type":597,"tag":719,"props":55405,"children":55408},{"alt":55406,"src":55407},"Predicted state and authoritative state mismatch.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-04.png",[],{"type":597,"tag":606,"props":55410,"children":55411},{},[55412,55414,55419,55421,55426,55428,55433,55435,55439,55441,55445,55447,55452],{"type":603,"value":55413},"于是我们在 ",{"type":597,"tag":1080,"props":55415,"children":55416},{},[55417],{"type":603,"value":55418},"t = 250 ms",{"type":603,"value":55420}," 的时候就会面临一个非常 interesting 的问题，当接收到新的游戏状态时，客户端预测的位置已经到达 ",{"type":597,"tag":1080,"props":55422,"children":55423},{},[55424],{"type":603,"value":55425},"x = 12",{"type":603,"value":55427},"，但是服务器认为最新的坐标是 ",{"type":597,"tag":1080,"props":55429,"children":55430},{},[55431],{"type":603,"value":55432},"x = 11",{"type":603,"value":55434},"，因为权威服务器的缘故，客户端必须将角色移回 ",{"type":597,"tag":1080,"props":55436,"children":55437},{},[55438],{"type":603,"value":55432},{"type":603,"value":55440},"，但是紧接着，新的 ",{"type":597,"tag":1080,"props":55442,"children":55443},{},[55444],{"type":603,"value":55425},{"type":603,"value":55446}," 的状态在 ",{"type":597,"tag":1080,"props":55448,"children":55449},{},[55450],{"type":603,"value":55451},"t = 350",{"type":603,"value":55453}," 的时间到达，因此角色的位置又顺移回去了。。",{"type":597,"tag":606,"props":55455,"children":55456},{},[55457],{"type":603,"value":55458},"从玩家的角度来看，他按下两次向右按钮后，角色向右移动两格，原地停留50ms后，向左顺移一格，又原地停留100ms再向右顺移一格，很明显这种情况令人难以接受。",{"type":597,"tag":598,"props":55460,"children":55462},{"id":55461},"part-4-服务器校对",[55463],{"type":603,"value":55464},"PART 4 服务器校对",{"type":597,"tag":606,"props":55466,"children":55467},{},[55468],{"type":603,"value":55469},"解决上面说的问题的办法就是你得意识到，客户端所看到的世界是当前的，但是因为延迟，客户端得到的游戏状态都是过去的，当服务器在发送更新的时候，它并没有把客户端发来的所有的命令都处理掉。",{"type":597,"tag":606,"props":55471,"children":55472},{},[55473],{"type":603,"value":55474},"这并不是一个非常严重的问题，首先，客户端在每次请求的时候加上一个编号，在我们的例子中，第一次按键请求编号为 #1，第二次按键的请求编号为 #2。服务器回复的时候将其处理过最后一个请求的编号包含在消息中。",{"type":597,"tag":606,"props":55476,"children":55477},{},[55478],{"type":597,"tag":719,"props":55479,"children":55482},{"alt":55480,"src":55481},"Client-side prediction + server reconciliation.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-05.png",[],{"type":597,"tag":606,"props":55484,"children":55485},{},[55486],{"type":603,"value":55487},"当t = 250的时候，服务器说“基于#1的输入请求，你的位置是11”.因为服务器是权威的，所以角色的位置是x=11， 现在假设客户端保存了一份发送到服务器的请求，基于新的游戏状态，它知道服务器已经处理了请求 #1，所以他将这个备份丢弃掉，但是客户端知道服务器还需要将#2请求的回复发过来，所以再一次进行客户端预测，客户端可以基于上次服务器发来的状态和#2输入来计算当前的状态。",{"type":597,"tag":606,"props":55489,"children":55490},{},[55491],{"type":603,"value":55492},"所以当t=250ms的时候，客户端得到“经过#1的输入之后，x=11”，它将#1输入的拷贝丢弃掉，但是还有一份并没有得到服务器返回的#2的拷贝，客户端将内部游戏状态更新为服务器所发来的游戏状态，也就是x=11，然后将所有未收到回复但已经发送给服务器的输入用于预测，在上面的例子，输入就是向右移动，最终状态就是x=12，这是正确的。当t=350的时候，一个新的游戏状态从服务器获得；这种情况它说“基于#2输入，x=12”。在这是，客户端将#2请求之前的请求都丢弃，然后将游戏状态更新为x=12，没有需要预测的输入，所以不需要预测，现在得到的结果都是正确的。",{"type":597,"tag":606,"props":55494,"children":55495},{},[55496],{"type":603,"value":55497},"客户端具体如何处理，这里有一个统一的处理方式：",{"type":597,"tag":1321,"props":55499,"children":55500},{},[55501,55506,55511,55516],{"type":597,"tag":807,"props":55502,"children":55503},{},[55504],{"type":603,"value":55505},"根据server的new state更新#1里的缓存状态",{"type":597,"tag":807,"props":55507,"children":55508},{},[55509],{"type":603,"value":55510},"回滚input到#1，将#1之后的所有缓存的操作都应用到#1的new state中进行计算，得到最新的结果",{"type":597,"tag":807,"props":55512,"children":55513},{},[55514],{"type":603,"value":55515},"客户端根据最新的结果进行更新",{"type":597,"tag":807,"props":55517,"children":55518},{},[55519],{"type":603,"value":55520},"将#1的状态和input 从缓存buffer里删除",{"type":597,"tag":598,"props":55522,"children":55524},{"id":55523},"part-5-误差",[55525],{"type":603,"value":55526},"PART 5 误差",{"type":597,"tag":606,"props":55528,"children":55529},{},[55530],{"type":603,"value":55531},"上面讨论的例子里只讨论了移动，但是这个方法在其他方面也可以使用。比如，在一个回合制的游戏里，当玩家攻击其他玩家的时候，你可以播放飙血的特效和伤害值，但是你不应该在收到服务器回复之前直接更新玩家的血量。",{"type":597,"tag":606,"props":55533,"children":55534},{},[55535],{"type":603,"value":55536},"因为游戏状态的复杂性，它并不能保证是绝对可逆的，你也许希望只有再收到服务器确认的时候才将一个玩家杀死，即使这个玩家的血量降到负的了。（但假象一种情况，一个玩家实际上已经死了，但是在没有收到服务器确认之前他使用了药包，这个时候你该怎么处理？）",{"type":597,"tag":606,"props":55538,"children":55539},{},[55540],{"type":603,"value":55541},"这又带来了一个有趣的问题，即使世界是绝对的确定的，并且没有玩家在作弊，还是有客户端的预测和服务器不吻合的情况。上面说的情况在单人游戏中不会出现，但是在多人接入同一个服务器的时候就会发生，这个问题会在下面的文章中进行讨论。",{"type":597,"tag":598,"props":55543,"children":55545},{"id":55544},"part-6-总结",[55546],{"type":603,"value":55547},"PART 6 总结",{"type":597,"tag":606,"props":55549,"children":55550},{},[55551],{"type":603,"value":55552},"当使用权威服务器的时候，你需要给玩家即时的响应，即使是当在等待服务器处理出入。为了达到这样的目的，客户端模拟出输入的结果，当收到服务器的回复时，客户端的游戏状态需要通过服务器的回复和还未处理的输入进行重新计算。",{"type":597,"tag":1321,"props":55554,"children":55555},{},[55556],{"type":597,"tag":807,"props":55557,"children":55558},{},[55559],{"type":597,"tag":886,"props":55560,"children":55563},{"href":55561,"rel":55562},"http://www.gabrielgambetta.com/client-side-prediction-server-reconciliation.html",[890],[55564],{"type":603,"value":55561},{"title":591,"searchDepth":787,"depth":787,"links":55566},[55567,55568,55569,55570,55571,55572],{"id":55155,"depth":787,"text":55158},{"id":55335,"depth":787,"text":55338},{"id":55387,"depth":787,"text":55390},{"id":55461,"depth":787,"text":55464},{"id":55523,"depth":787,"text":55526},{"id":55544,"depth":787,"text":55547},"content:dotnet:2020-02-02-net-sync-client-side-prediction-and-server-reconciliation.md","dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation.md",{"_path":59,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":58,"description":55576,"body":55577,"_type":791,"_id":55761,"_source":793,"_file":55762,"_extension":795,"date":54359},"PART 1 概述在本系列的「第一篇文章」中，我们介绍了关于权威服务器及其反作弊特性，然而仅仅是最简单的实现可能会导致关于可玩性和响应速度的问题。在「第二篇文章」中，我们提出了「客户端预测」的方案来克服这个困难。以上两篇文章事实上介绍的是一种在连接到有传输延迟的远程权威服务器的状况下，可以让玩家像单机游戏一样流畅的控制角色移动的一种概念和技术。在本文中，我们将会讨论在在同一台服务器上有「其他玩家控制的角色」的情况。PART 2 服务器 time step在之前的文章中，我们的服务器的实现非常简单，它负责处理客户端的输入并更新游戏状态，最后将结果发送回客户端。如果有多个玩家在一起玩，那服务端主循",{"type":594,"children":55578,"toc":55753},[55579,55583,55588,55593,55598,55604,55609,55615,55620,55628,55633,55639,55644,55649,55654,55659,55664,55670,55675,55680,55685,55689,55697,55702,55707,55712,55716,55721,55726,55731,55736,55741],{"type":597,"tag":598,"props":55580,"children":55581},{"id":55155},[55582],{"type":603,"value":55158},{"type":597,"tag":606,"props":55584,"children":55585},{},[55586],{"type":603,"value":55587},"在本系列的「第一篇文章」中，我们介绍了关于权威服务器及其反作弊特性，然而仅仅是最简单的实现可能会导致关于可玩性和响应速度的问题。在「第二篇文章」中，我们提出了「客户端预测」的方案来克服这个困难。",{"type":597,"tag":606,"props":55589,"children":55590},{},[55591],{"type":603,"value":55592},"以上两篇文章事实上介绍的是一种在连接到有传输延迟的远程权威服务器的状况下，可以让玩家像单机游戏一样流畅的控制角色移动的一种概念和技术。",{"type":597,"tag":606,"props":55594,"children":55595},{},[55596],{"type":603,"value":55597},"在本文中，我们将会讨论在在同一台服务器上有「其他玩家控制的角色」的情况。",{"type":597,"tag":598,"props":55599,"children":55601},{"id":55600},"part-2-服务器-time-step",[55602],{"type":603,"value":55603},"PART 2 服务器 time step",{"type":597,"tag":606,"props":55605,"children":55606},{},[55607],{"type":603,"value":55608},"在之前的文章中，我们的服务器的实现非常简单，它负责处理客户端的输入并更新游戏状态，最后将结果发送回客户端。如果有多个玩家在一起玩，那服务端主循环的逻辑有所不同了。\n在接下来的场景中，几个客户端玩家会同时发送数据，玩家发出操作指令会非常频繁（高APM的玩家，一秒钟可能发出10个以上的操作指令），如果服务端每收到某个玩家的一条指令，就去执行input逻辑，然后广播游戏状态，这样的性能是非常差的，会消耗很多的cpu和bandwidth。\n一个更好的办法是，利用一个queue，将客户端的输入信息缓存起来，在服务端，游戏状态以一定的频率(例如100ms一次)进行更新，每次更新的时间间隔(100ms)，就被称之为time step。\n在每个更新循环迭代中，服务端处理queue里面所有的input，然后逐个进行计算，将最后计算的结果更新到所有客户端。\n总体来说，整个游戏世界的更新和客户端的输入频率、数量是相对独立的，它的更新频率也是可控的。",{"type":597,"tag":598,"props":55610,"children":55612},{"id":55611},"part-3-低频更新处理",[55613],{"type":603,"value":55614},"PART 3 低频更新处理",{"type":597,"tag":606,"props":55616,"children":55617},{},[55618],{"type":603,"value":55619},"从客户端来看，这个方法运行的很平滑，客户端的预测行为独立于服务端的更新，所以它依然可以使用预测技术。不过，由于真个游戏世界的状态以一个比较低的频率进行更新，那么本地客户端对其他玩家知道的信息就很少了，信息越少的话，其他玩家的行为动作要模拟的话，就不会很准确。\n本地客户端收到其他玩家更新坐标的消息，如何进行处理呢，有一个最简单的办法就是，每次直接使用收到的坐标进行更新，但这样看起来会有抖动，每100ms更新一次坐标，就得抖动一次，如下图所示：",{"type":597,"tag":606,"props":55621,"children":55622},{},[55623],{"type":597,"tag":719,"props":55624,"children":55627},{"alt":55625,"src":55626},"Client 1 as seen by Client 2.","/images/2020-02-02-net-sync-entity-interpolation/fpm3-01.png",[],{"type":597,"tag":606,"props":55629,"children":55630},{},[55631],{"type":603,"value":55632},"对Client2来说，Client1的位置最开始再p(10,10)，不一会直接跳到p(11,10)，100ms后又跳到(12,0)，这样的体验是很差的。那么，如何改善游戏体验呢？ 针对不同的游戏，有不同的处理方式，一般来说，客户端的行为越方便预测，就越容易做平滑处理。",{"type":597,"tag":598,"props":55634,"children":55636},{"id":55635},"part-4-航位推测法",[55637],{"type":603,"value":55638},"PART 4 航位推测法",{"type":597,"tag":606,"props":55640,"children":55641},{},[55642],{"type":603,"value":55643},"假设你在玩赛车游戏。一辆速度非常快的汽车是可以预测的——例如，如果它以每秒100米的速度行驶，一秒钟后，它将比它开始行驶的地方提前大约100米。",{"type":597,"tag":606,"props":55645,"children":55646},{},[55647],{"type":603,"value":55648},"为什么是大约呢？在那一秒内，汽车可能加速或减速了一点，或者向右或向左转了一点——这里的关键词是“一点”。汽车的机动性是这样的：在高速行驶时，无论玩家实际做什么，其在任何时间点的位置都高度依赖于其先前的位置、速度和方向。换句话说，赛车不能立即进行180度转弯。",{"type":597,"tag":606,"props":55650,"children":55651},{},[55652],{"type":603,"value":55653},"对于每100毫秒发送一次更新的服务器，这是如何工作的？客户端接收到服务器发送来的每个其他车的速度和行驶方向；在接下来的100毫秒内，它不会接收到任何新信息，但仍需要显示它们的运行情况。要做的最简单的事情是假设汽车的航向和加速度在100毫秒内保持不变，并使用该参数在本地运行汽车物理。然后，100毫秒后，当服务器更新到达时，汽车的位置被修正。",{"type":597,"tag":606,"props":55655,"children":55656},{},[55657],{"type":603,"value":55658},"根据许多因素，校正可以是大的或相对小的。如果玩家把车保持在直线上，并且不改变车速，那么预测的位置将与修正的位置完全相同。另一方面，如果玩家撞到什么东西，预测的位置将是非常错误的。",{"type":597,"tag":606,"props":55660,"children":55661},{},[55662],{"type":603,"value":55663},"请注意，推算定位可以应用于低速情况，例如战列舰。实际上，“dead reckoning”一词起源于航海。",{"type":597,"tag":598,"props":55665,"children":55667},{"id":55666},"part-5-实体插值",[55668],{"type":603,"value":55669},"PART 5 实体插值",{"type":597,"tag":606,"props":55671,"children":55672},{},[55673],{"type":603,"value":55674},"有许多情况航位推是没法处理的 - 对于玩家的方向和速度可以瞬间改变的都不行，比如3D射击，玩家经常快速跑动，停下，快速转向等，在这种情况下，航位推算法就非常无力了。因为位置和速度和前面的数据无关。",{"type":597,"tag":606,"props":55676,"children":55677},{},[55678],{"type":603,"value":55679},"你可以选择在接到服务器的请求的时候直接更新玩家的位置，而客户端看到的就是网上其他的玩家每100ms跳一下，感觉会非常奇怪。",{"type":597,"tag":606,"props":55681,"children":55682},{},[55683],{"type":603,"value":55684},"你现在拥有的是每100ms由服务器传送过来的权威数据，现在要做的是如何在这100ms内让网络角色看起来非常自然，解决问题的关键就是将网络玩家显示在过去的某个时刻。",{"type":597,"tag":606,"props":55686,"children":55687},{},[55688],{"type":603,"value":21745},{"type":597,"tag":606,"props":55690,"children":55691},{},[55692],{"type":597,"tag":719,"props":55693,"children":55696},{"alt":55694,"src":55695},"Client 2 renders Client 1 in the past, interpolating last known positions.","/images/2020-02-02-net-sync-entity-interpolation/fpm3-02.png",[],{"type":597,"tag":606,"props":55698,"children":55699},{},[55700],{"type":603,"value":55701},"用来插值的t=900和t=1000的数据依赖于游戏。插值通常都可以处理得很好。如果不是这种方法，你可能需要服务器发送更加详细的移动信息了 - 比如更多的位置采样点，或者每10ms发送一次(你不必发十倍的数据 - 因为你发的微小的位移数据，在这种情况下数据的格式可以很好的优化一下)。",{"type":597,"tag":606,"props":55703,"children":55704},{},[55705],{"type":603,"value":55706},"当使用这种技术的时候，每一个玩家都和游戏世界有一点点不同步，因为每个玩家看到自己的世界是当前的，但是其他的玩家都是过去的。但即使是快速的游戏，这100ms的延迟都不是那么明显。",{"type":597,"tag":606,"props":55708,"children":55709},{},[55710],{"type":603,"value":55711},"有一种情况除外 - 当你需要时间和空间的准确性的时候，比如一个玩家射击另一个玩家的时候，因为其他的玩家都是存在于过去的某个时候，你的瞄准其实是有100ms的延迟的 - 也就是说，你设计的目标是100ms的某个目标！ 这个问题我们下一篇会进行讨论。",{"type":597,"tag":598,"props":55713,"children":55714},{"id":55544},[55715],{"type":603,"value":55547},{"type":597,"tag":606,"props":55717,"children":55718},{},[55719],{"type":603,"value":55720},"在权威服务器的环境中，有着不确定的服务器更新和网络延迟，在这种情况下你还要给玩家平滑的移动。在第二篇中，我们展示了一种客户端预测和服务器调和的技术，来实现实时的角色控制，这样的方案让玩家能够得到即时的反馈，移除了致命的延迟。",{"type":597,"tag":606,"props":55722,"children":55723},{},[55724],{"type":603,"value":55725},"其他玩家的同步还是一个问题，但是，在这篇文章中，我们提出了两种解决方案。",{"type":597,"tag":606,"props":55727,"children":55728},{},[55729],{"type":603,"value":55730},"第一种是航位推技术，这种模拟需要entity的位置能够通过前一个时候的位置，速度，加速度来推算出来，当不满足这种情况的时候，航位推就没用了。",{"type":597,"tag":606,"props":55732,"children":55733},{},[55734],{"type":603,"value":55735},"第二种是插值技术，不预测将来的位置，只是使用服务器传来的数据，这种就会造成显示的entity总是过去的某个时刻。最后的结果就是玩家的角色总是当前时刻，而其他看到的entity都是过去的某个时刻，这种情况可以产生一种难以置信的无缝体验。",{"type":597,"tag":606,"props":55737,"children":55738},{},[55739],{"type":603,"value":55740},"但是，当游戏需要高速离散的准确性的时候，比如射击或者移动物体，美景就破灭了：你看其他玩家的位置和服务器的位置不一致，别的玩家看你的位置也不是正确的，这样爆头就不可能发生了！很多游戏都有爆头这一说，我们将在下面的文章中来讨论这个问题。",{"type":597,"tag":1321,"props":55742,"children":55743},{},[55744],{"type":597,"tag":807,"props":55745,"children":55746},{},[55747],{"type":597,"tag":886,"props":55748,"children":55751},{"href":55749,"rel":55750},"http://www.gabrielgambetta.com/entity-interpolation.html",[890],[55752],{"type":603,"value":55749},{"title":591,"searchDepth":787,"depth":787,"links":55754},[55755,55756,55757,55758,55759,55760],{"id":55155,"depth":787,"text":55158},{"id":55600,"depth":787,"text":55603},{"id":55611,"depth":787,"text":55614},{"id":55635,"depth":787,"text":55638},{"id":55666,"depth":787,"text":55669},{"id":55544,"depth":787,"text":55547},"content:dotnet:2020-02-02-net-sync-entity-interpolation.md","dotnet/2020-02-02-net-sync-entity-interpolation.md",{"_path":62,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":61,"description":55764,"body":55765,"_type":791,"_id":56077,"_source":793,"_file":56078,"_extension":795,"date":54359},"PART 1 概述之前三篇文章主要解释了关于 client-server 游戏架构，总结起来大概就是以下这些：服务器从客户端收到带有时间戳的输入信息；服务器处理输入并且更新世界状态；服务器向所有客户端发送游戏世界的快照客户端发送输入并且模拟游戏的结果；客户端获取世界更新将自身预测的状态和服务器发送来的状态进行同步；将其他客户端控制的实体插值到过去的状态从玩家的角度来看，以上行为会导致两个重要的结果：玩家看到 自己 处于 现在玩家看到 其他玩家 处于 过去这其实并没有什么大不了的问题，但是对于时间和空间非常敏感的事件就会造成很大的问题；比如在射击游戏中爆掉敌人的头！PART 2 延时补偿假设你正",{"type":594,"children":55766,"toc":56070},[55767,55771,55776,55817,55822,55857,55862,55868,55873,55878,55883,55888,55893,55898,55921,55926,55931,55936,55941,55946,55951,55956,55962,55967,55972,55977,55982,55987,55996,56005,56015,56025,56034,56043,56052,56061],{"type":597,"tag":598,"props":55768,"children":55769},{"id":55155},[55770],{"type":603,"value":55158},{"type":597,"tag":606,"props":55772,"children":55773},{},[55774],{"type":603,"value":55775},"之前三篇文章主要解释了关于 client-server 游戏架构，总结起来大概就是以下这些：",{"type":597,"tag":1321,"props":55777,"children":55778},{},[55779,55784,55789,55794,55799],{"type":597,"tag":807,"props":55780,"children":55781},{},[55782],{"type":603,"value":55783},"服务器从客户端收到带有时间戳的输入信息；",{"type":597,"tag":807,"props":55785,"children":55786},{},[55787],{"type":603,"value":55788},"服务器处理输入并且更新世界状态；",{"type":597,"tag":807,"props":55790,"children":55791},{},[55792],{"type":603,"value":55793},"服务器向所有客户端发送游戏世界的快照",{"type":597,"tag":807,"props":55795,"children":55796},{},[55797],{"type":603,"value":55798},"客户端发送输入并且模拟游戏的结果；",{"type":597,"tag":807,"props":55800,"children":55801},{},[55802,55804],{"type":603,"value":55803},"客户端获取世界更新",{"type":597,"tag":1321,"props":55805,"children":55806},{},[55807,55812],{"type":597,"tag":807,"props":55808,"children":55809},{},[55810],{"type":603,"value":55811},"将自身预测的状态和服务器发送来的状态进行同步；",{"type":597,"tag":807,"props":55813,"children":55814},{},[55815],{"type":603,"value":55816},"将其他客户端控制的实体插值到过去的状态",{"type":597,"tag":606,"props":55818,"children":55819},{},[55820],{"type":603,"value":55821},"从玩家的角度来看，以上行为会导致两个重要的结果：",{"type":597,"tag":1321,"props":55823,"children":55824},{},[55825,55842],{"type":597,"tag":807,"props":55826,"children":55827},{},[55828,55830,55835,55837],{"type":603,"value":55829},"玩家看到 ",{"type":597,"tag":1080,"props":55831,"children":55832},{},[55833],{"type":603,"value":55834},"自己",{"type":603,"value":55836}," 处于 ",{"type":597,"tag":1080,"props":55838,"children":55839},{},[55840],{"type":603,"value":55841},"现在",{"type":597,"tag":807,"props":55843,"children":55844},{},[55845,55846,55851,55852],{"type":603,"value":55829},{"type":597,"tag":1080,"props":55847,"children":55848},{},[55849],{"type":603,"value":55850},"其他玩家",{"type":603,"value":55836},{"type":597,"tag":1080,"props":55853,"children":55854},{},[55855],{"type":603,"value":55856},"过去",{"type":597,"tag":606,"props":55858,"children":55859},{},[55860],{"type":603,"value":55861},"这其实并没有什么大不了的问题，但是对于时间和空间非常敏感的事件就会造成很大的问题；比如在射击游戏中爆掉敌人的头！",{"type":597,"tag":598,"props":55863,"children":55865},{"id":55864},"part-2-延时补偿",[55866],{"type":603,"value":55867},"PART 2 延时补偿",{"type":597,"tag":606,"props":55869,"children":55870},{},[55871],{"type":603,"value":55872},"假设你正用狙击枪完美的瞄准目标的头部，此时射击绝对万无一失。",{"type":597,"tag":606,"props":55874,"children":55875},{},[55876],{"type":603,"value":55877},"然而却没打到。。。",{"type":597,"tag":606,"props":55879,"children":55880},{},[55881],{"type":603,"value":55882},"为什么会发生这种事情。。",{"type":597,"tag":606,"props":55884,"children":55885},{},[55886],{"type":603,"value":55887},"因为我们之前解释过的 client-server 架构，你瞄准的是 100ms 之前的玩家的头，而不是开枪的时候的玩家的头。。。",{"type":597,"tag":606,"props":55889,"children":55890},{},[55891],{"type":603,"value":55892},"在某种程度上相当于你在一个光速非常非常慢的宇宙中进行游戏，你瞄准的是敌人过去的位置，当你扣下扳机的时候他早就走远了。。",{"type":597,"tag":606,"props":55894,"children":55895},{},[55896],{"type":603,"value":55897},"比较幸运的是有一个相对简单的解决方案，对几乎所有的玩家都是友好的，下面来解释一下它的工作流程：",{"type":597,"tag":1321,"props":55899,"children":55900},{},[55901,55906,55911,55916],{"type":597,"tag":807,"props":55902,"children":55903},{},[55904],{"type":603,"value":55905},"开火的时候，客户端发送开火指令到服务器，同时包含开火的一瞬间确切的时间和方向。",{"type":597,"tag":807,"props":55907,"children":55908},{},[55909],{"type":603,"value":55910},"这是关键的一步。由于服务器获取所有带有时间戳的输入，因此它可以在过去的任何时刻重构世界。特别是，它可以在任何时间点按照任何客户端眼中的样子重建世界。",{"type":597,"tag":807,"props":55912,"children":55913},{},[55914],{"type":603,"value":55915},"这意味着服务器可以准确地知道你开枪的那一刻你的武器瞄准了什么。这是你的敌人过去的头部位置，但服务器知道这是他的头部在你当前客户端所在的位置。",{"type":597,"tag":807,"props":55917,"children":55918},{},[55919],{"type":603,"value":55920},"服务器在该时间点处理快照，并更新客户端。",{"type":597,"tag":606,"props":55922,"children":55923},{},[55924],{"type":603,"value":55925},"于是皆大欢喜～",{"type":597,"tag":606,"props":55927,"children":55928},{},[55929],{"type":603,"value":55930},"服务器很开心是因为他是服务器，他永远都很开心。。。哦好冷啊",{"type":597,"tag":606,"props":55932,"children":55933},{},[55934],{"type":603,"value":55935},"你很开心是因为你瞄准目标头部并射击，完成了一记漂亮的爆头",{"type":597,"tag":606,"props":55937,"children":55938},{},[55939],{"type":603,"value":55940},"你的敌人可能是唯一不完全开心的哪个，如果他站在原地被你爆头那就是他的问题，但是如果他在移动的话，只能说明你是特别厉害的狙击手。",{"type":597,"tag":606,"props":55942,"children":55943},{},[55944],{"type":603,"value":55945},"但是如果他在掩体附近，然后移动到掩体内部的安全位置后才被命中了呢？",{"type":597,"tag":606,"props":55947,"children":55948},{},[55949],{"type":603,"value":55950},"好吧这的确有可能发生，但这就是你要为此付出的代价，因为你可以射击「过去的他」，他可能在进入掩体后几毫秒被射击。",{"type":597,"tag":606,"props":55952,"children":55953},{},[55954],{"type":603,"value":55955},"从某种程度上来说这是不公平的，但这是大家接受程度最高的解决方案了，明明瞄准开枪最后却 miss 问题更大～",{"type":597,"tag":598,"props":55957,"children":55959},{"id":55958},"part-3-总结",[55960],{"type":603,"value":55961},"PART 3 总结",{"type":597,"tag":606,"props":55963,"children":55964},{},[55965],{"type":603,"value":55966},"这篇文章是快节奏多人游戏同步这个系列的最后一篇了，虽然这类问题很难得到完美解答，但是对相关概念有了清晰理解以后再看也并不是那么困难。",{"type":597,"tag":606,"props":55968,"children":55969},{},[55970],{"type":603,"value":55971},"虽然本文的读者都是游戏开发者，但依然有着另一部分读者对此很感兴趣，那就是玩家们。对玩家来说去理解诸如此类问题依然是一件很有趣的事情。",{"type":597,"tag":1023,"props":55973,"children":55975},{"id":55974},"扩展阅读",[55976],{"type":603,"value":55974},{"type":597,"tag":606,"props":55978,"children":55979},{},[55980],{"type":603,"value":55981},"以下是一些参考资料包括文章和源码之类的，可以帮助大家更方便的理解相关概念。",{"type":597,"tag":606,"props":55983,"children":55984},{},[55985],{"type":603,"value":55986},"与本文相关性最高的文章如下",{"type":597,"tag":606,"props":55988,"children":55989},{},[55990],{"type":597,"tag":886,"props":55991,"children":55994},{"href":55992,"rel":55993},"http://www.gabrielgambetta.com/lag-compensation.html",[890],[55995],{"type":603,"value":55992},{"type":597,"tag":606,"props":55997,"children":55998},{},[55999],{"type":597,"tag":886,"props":56000,"children":56003},{"href":56001,"rel":56002},"http://www.gabrielgambetta.com/client-side-prediction-live-demo.html",[890],[56004],{"type":603,"value":56001},{"type":597,"tag":606,"props":56006,"children":56007},{},[56008],{"type":597,"tag":886,"props":56009,"children":56012},{"href":56010,"rel":56011},"http://gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking/",[890],[56013],{"type":603,"value":56014},"What Every Programmer Needs to Know About Game Networking",{"type":597,"tag":606,"props":56016,"children":56017},{},[56018,56024],{"type":597,"tag":886,"props":56019,"children":56021},{"href":54893,"rel":56020},[890],[56022],{"type":603,"value":56023},"Latency Compensating Methods in Client/Server In-game Protocol Design and Optimization",{"type":603,"value":9674},{"type":597,"tag":606,"props":56026,"children":56027},{},[56028],{"type":597,"tag":886,"props":56029,"children":56032},{"href":56030,"rel":56031},"https://link.springer.com/article/10.1007/s00530-012-0271-3#Sec17",[890],[56033],{"type":603,"value":56030},{"type":597,"tag":606,"props":56035,"children":56036},{},[56037],{"type":597,"tag":886,"props":56038,"children":56041},{"href":56039,"rel":56040},"https://github.com/search?l=C%23&q=lag+compensation&type=Repositories",[890],[56042],{"type":603,"value":56039},{"type":597,"tag":606,"props":56044,"children":56045},{},[56046],{"type":597,"tag":886,"props":56047,"children":56050},{"href":56048,"rel":56049},"https://github.com/search?l=C%23&p=1&q=Fast-Paced+Multiplayer&type=Repositories",[890],[56051],{"type":603,"value":56048},{"type":597,"tag":606,"props":56053,"children":56054},{},[56055],{"type":597,"tag":886,"props":56056,"children":56059},{"href":56057,"rel":56058},"https://github.com/JoaoBorks/unity-fastpacedmultiplayer",[890],[56060],{"type":603,"value":56057},{"type":597,"tag":606,"props":56062,"children":56063},{},[56064],{"type":597,"tag":886,"props":56065,"children":56068},{"href":56066,"rel":56067},"https://github.com/gamestdio/timeline",[890],[56069],{"type":603,"value":56066},{"title":591,"searchDepth":787,"depth":787,"links":56071},[56072,56073,56074],{"id":55155,"depth":787,"text":55158},{"id":55864,"depth":787,"text":55867},{"id":55958,"depth":787,"text":55961,"children":56075},[56076],{"id":55974,"depth":1530,"text":55974},"content:dotnet:2020-02-02-net-sync-lag-compensation.md","dotnet/2020-02-02-net-sync-lag-compensation.md",{"_path":65,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":64,"description":56080,"body":56081,"_type":791,"_id":56480,"_source":793,"_file":56481,"_extension":795,"date":54359},"在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。",{"type":594,"children":56082,"toc":56478},[56083,56087,56092,56097,56109,56114,56126,56138,56143,56155,56167,56179,56191,56203,56215,56220,56225,56258,56263,56268,56273,56278,56300,56305,56310,56315,56320,56325,56330,56335,56340,56362,56370,56375],{"type":597,"tag":606,"props":56084,"children":56085},{},[56086],{"type":603,"value":56080},{"type":597,"tag":606,"props":56088,"children":56089},{},[56090],{"type":603,"value":56091},"网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。",{"type":597,"tag":606,"props":56093,"children":56094},{},[56095],{"type":603,"value":56096},"技术术语：",{"type":597,"tag":606,"props":56098,"children":56099},{},[56100,56102,56107],{"type":603,"value":56101},"1）",{"type":597,"tag":1080,"props":56103,"children":56104},{},[56105],{"type":603,"value":56106},"Latency",{"type":603,"value":56108},"：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。",{"type":597,"tag":606,"props":56110,"children":56111},{},[56112],{"type":603,"value":56113},"80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。",{"type":597,"tag":606,"props":56115,"children":56116},{},[56117,56119,56124],{"type":603,"value":56118},"2）",{"type":597,"tag":1080,"props":56120,"children":56121},{},[56122],{"type":603,"value":56123},"Hit Box",{"type":603,"value":56125},"：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。",{"type":597,"tag":606,"props":56127,"children":56128},{},[56129,56131,56136],{"type":603,"value":56130},"3）",{"type":597,"tag":1080,"props":56132,"children":56133},{},[56134],{"type":603,"value":56135},"Tick Rate",{"type":603,"value":56137},"：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。",{"type":597,"tag":606,"props":56139,"children":56140},{},[56141],{"type":603,"value":56142},"比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms",{"type":597,"tag":606,"props":56144,"children":56145},{},[56146,56148,56153],{"type":603,"value":56147},"4）",{"type":597,"tag":1080,"props":56149,"children":56150},{},[56151],{"type":603,"value":56152},"Client Update Rate",{"type":603,"value":56154},"：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。",{"type":597,"tag":606,"props":56156,"children":56157},{},[56158,56160,56165],{"type":603,"value":56159},"5）",{"type":597,"tag":1080,"props":56161,"children":56162},{},[56163],{"type":603,"value":56164},"Framerate",{"type":603,"value":56166},"：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS",{"type":597,"tag":606,"props":56168,"children":56169},{},[56170,56172,56177],{"type":603,"value":56171},"6）",{"type":597,"tag":1080,"props":56173,"children":56174},{},[56175],{"type":603,"value":56176},"Refresh Rate",{"type":603,"value":56178},"：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。",{"type":597,"tag":606,"props":56180,"children":56181},{},[56182,56184,56189],{"type":603,"value":56183},"7）",{"type":597,"tag":1080,"props":56185,"children":56186},{},[56187],{"type":603,"value":56188},"Interpolation",{"type":603,"value":56190},"：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。",{"type":597,"tag":606,"props":56192,"children":56193},{},[56194,56196,56201],{"type":603,"value":56195},"8）",{"type":597,"tag":1080,"props":56197,"children":56198},{},[56199],{"type":603,"value":56200},"Extrapolation",{"type":603,"value":56202},"：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。",{"type":597,"tag":606,"props":56204,"children":56205},{},[56206,56208,56213],{"type":603,"value":56207},"9）",{"type":597,"tag":1080,"props":56209,"children":56210},{},[56211],{"type":603,"value":56212},"Lag Compensation",{"type":603,"value":56214},"：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为\"Client Delay\"）可用下式给出：",{"type":597,"tag":606,"props":56216,"children":56217},{},[56218],{"type":603,"value":56219},"ClientDelay = (1/2 * Latency) + InterpolationDelay",{"type":597,"tag":606,"props":56221,"children":56222},{},[56223],{"type":603,"value":56224},"延迟补偿的实际操作步骤：",{"type":597,"tag":803,"props":56226,"children":56227},{},[56228,56233,56238,56243,56248,56253],{"type":597,"tag":807,"props":56229,"children":56230},{},[56231],{"type":603,"value":56232},"Player A看到Player B向一个角落跑去",{"type":597,"tag":807,"props":56234,"children":56235},{},[56236],{"type":603,"value":56237},"Player A开枪，其客户端把这个操作发送给服务器",{"type":597,"tag":807,"props":56239,"children":56240},{},[56241],{"type":603,"value":56242},"假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作",{"type":597,"tag":807,"props":56244,"children":56245},{},[56246],{"type":603,"value":56247},"服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A's interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。",{"type":597,"tag":807,"props":56249,"children":56250},{},[56251],{"type":603,"value":56252},"服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：\n(1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)",{"type":597,"tag":807,"props":56254,"children":56255},{},[56256],{"type":603,"value":56257},"在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。",{"type":597,"tag":606,"props":56259,"children":56260},{},[56261],{"type":603,"value":56262},"需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。",{"type":597,"tag":606,"props":56264,"children":56265},{},[56266],{"type":603,"value":56267},"按照CS的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。",{"type":597,"tag":606,"props":56269,"children":56270},{},[56271],{"type":603,"value":56272},"若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。",{"type":597,"tag":606,"props":56274,"children":56275},{},[56276],{"type":603,"value":56277},"如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。\n若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。\n服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。",{"type":597,"tag":606,"props":56279,"children":56280},{},[56281,56283,56290,56291,56298],{"type":603,"value":56282},"在Overwatch中，服务端延迟补偿也被称为Favoring the shooter(",{"type":597,"tag":886,"props":56284,"children":56287},{"href":56285,"rel":56286},"https://link.zhihu.com/?target=https%3A//www.vg247.com/2016/04/05/overwatch-devs-talk-netcode-and-favouring-the-shooter/",[890],[56288],{"type":603,"value":56289},"https://www.vg247.com/2016/04/05/overwatch-devs-talk-netcode-and-favouring-the-shooter/",{"type":603,"value":27138},{"type":597,"tag":886,"props":56292,"children":56295},{"href":56293,"rel":56294},"https://link.zhihu.com/?target=https%3A//www.pcgamesn.com/overwatch/overwatch-netcode",[890],[56296],{"type":603,"value":56297},"https://www.pcgamesn.com/overwatch/overwatch-netcode",{"type":603,"value":56299},")，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。",{"type":597,"tag":606,"props":56301,"children":56302},{},[56303],{"type":603,"value":56304},"如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：",{"type":597,"tag":606,"props":56306,"children":56307},{},[56308],{"type":603,"value":56309},"1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。",{"type":597,"tag":606,"props":56311,"children":56312},{},[56313],{"type":603,"value":56314},"2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。",{"type":597,"tag":606,"props":56316,"children":56317},{},[56318],{"type":603,"value":56319},"3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。",{"type":597,"tag":606,"props":56321,"children":56322},{},[56323],{"type":603,"value":56324},"4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。",{"type":597,"tag":606,"props":56326,"children":56327},{},[56328],{"type":603,"value":56329},"5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。",{"type":597,"tag":606,"props":56331,"children":56332},{},[56333],{"type":603,"value":56334},"6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。",{"type":597,"tag":606,"props":56336,"children":56337},{},[56338],{"type":603,"value":56339},"7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。",{"type":597,"tag":606,"props":56341,"children":56342},{},[56343,56345,56352,56353,56360],{"type":603,"value":56344},"8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的(",{"type":597,"tag":886,"props":56346,"children":56349},{"href":56347,"rel":56348},"https://link.zhihu.com/?target=http%3A//www.gdcvault.com/play/1024001/-Overwatch-Gameplay-Architecture-and",[890],[56350],{"type":603,"value":56351},"http://www.gdcvault.com/play/1024001/-Overwatch-Gameplay-Architecture-and",{"type":603,"value":27138},{"type":597,"tag":886,"props":56354,"children":56357},{"href":56355,"rel":56356},"https://link.zhihu.com/?target=http%3A//www.gad.qq.com/article/detail/28682",[890],[56358],{"type":603,"value":56359},"http://www.gad.qq.com/article/detail/28682",{"type":603,"value":56361},"). 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。",{"type":597,"tag":606,"props":56363,"children":56364},{},[56365],{"type":597,"tag":1080,"props":56366,"children":56367},{},[56368],{"type":603,"value":56369},"延迟改进",{"type":597,"tag":606,"props":56371,"children":56372},{},[56373],{"type":603,"value":56374},"暴雪表示会采用一些技术来改进延迟的情况：",{"type":597,"tag":1321,"props":56376,"children":56377},{},[56378,56383,56388,56393,56398,56408,56418,56428,56438,56448,56458,56468],{"type":597,"tag":807,"props":56379,"children":56380},{},[56381],{"type":603,"value":56382},"把网络状况相近的玩家匹配到一起，这样相对公平",{"type":597,"tag":807,"props":56384,"children":56385},{},[56386],{"type":603,"value":56387},"提供60帧tick的服务器，目前是20帧的服务器",{"type":597,"tag":807,"props":56389,"children":56390},{},[56391],{"type":603,"value":56392},"网络稳定时候，直接使用客户端指令，而不是缓存48ms的",{"type":597,"tag":807,"props":56394,"children":56395},{},[56396],{"type":603,"value":56397},"网络波动时候，回溯加一个上限，比如250ms，不再是无限回溯了",{"type":597,"tag":807,"props":56399,"children":56400},{},[56401],{"type":597,"tag":886,"props":56402,"children":56405},{"href":56403,"rel":56404},"https://www.gdcvault.com/play/1024001/-Overwatch-Gameplay-Architecture-and",[890],[56406],{"type":603,"value":56407},"Overwatch - Gameplay Architecture and Netcode - GDCVault",{"type":597,"tag":807,"props":56409,"children":56410},{},[56411],{"type":597,"tag":886,"props":56412,"children":56415},{"href":56413,"rel":56414},"http://gad.qq.com/article/detail/28682",[890],[56416],{"type":603,"value":56417},"《守望先锋》架构设计与网络同步 - GAD",{"type":597,"tag":807,"props":56419,"children":56420},{},[56421],{"type":597,"tag":886,"props":56422,"children":56425},{"href":56423,"rel":56424},"http://gad.qq.com/article/detail/28219",[890],[56426],{"type":603,"value":56427},"《守望先锋》中的网络脚本化的武器和技能系统 - GAD",{"type":597,"tag":807,"props":56429,"children":56430},{},[56431],{"type":597,"tag":886,"props":56432,"children":56435},{"href":56433,"rel":56434},"https://www.gdcvault.com/play/1024653/Networking-Scripted-Weapons-and-Abilities",[890],[56436],{"type":603,"value":56437},"Networking Scripted Weapons and Abilities in Overwatch - GDC Vault",{"type":597,"tag":807,"props":56439,"children":56440},{},[56441],{"type":597,"tag":886,"props":56442,"children":56445},{"href":56443,"rel":56444},"https://blog.codingnow.com/2017/06/overwatch_ecs.html",[890],[56446],{"type":603,"value":56447},"浅谈《守望先锋》中的 ECS 架构 - 云风的 BLOG",{"type":597,"tag":807,"props":56449,"children":56450},{},[56451],{"type":597,"tag":886,"props":56452,"children":56455},{"href":56453,"rel":56454},"https://zhuanlan.zhihu.com/p/25703934",[890],[56456],{"type":603,"value":56457},"GDC 2017 技术选荐合辑 - 知乎专栏",{"type":597,"tag":807,"props":56459,"children":56460},{},[56461],{"type":597,"tag":886,"props":56462,"children":56465},{"href":56463,"rel":56464},"https://zhuanlan.zhihu.com/p/28825322",[890],[56466],{"type":603,"value":56467},"守望先锋等 FPS 游戏的网络同步 - 知乎专栏",{"type":597,"tag":807,"props":56469,"children":56470},{},[56471],{"type":597,"tag":886,"props":56472,"children":56475},{"href":56473,"rel":56474},"https://www.gamereplays.org/overwatch/portals.php?show=page&name=overwatch-a-guide-to-understanding-netcode",[890],[56476],{"type":603,"value":56477},"A guide to understanding netcode - GAMEREPLAYS.ORG",{"title":591,"searchDepth":787,"depth":787,"links":56479},[],"content:dotnet:2020-02-02-overwatch-a-guide-to-understanding-netcode.md","dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode.md",{"_path":288,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":287,"description":56483,"body":56484,"_type":791,"_id":56697,"_source":793,"_file":56698,"_extension":795,"date":56699},"将brew装在非系统盘Command-R 重新安装您在 Mac 上安装过的最新 macOS，但不会升级到更高的版本。Option-Command-R 升级到与您的 Mac 兼容的最新 macOS。Shift-Option-Command-R 需要安装 macOS Sierra 10.12.4 或更高版本重新安装 Mac 随附的 macOS 或仍有提供的最接近版本。#禁用安全工具,使/usr/local可以挂载到非系统盘,需要进入安全模式执行\ncsrutil disable\n\n# 挂载非系统盘到/usr/local\nvi /etc/fstab\nUUID=BA245166-9FB3-4D88-98",{"type":594,"children":56485,"toc":56690},[56486,56491,56536,56545,56550,56555,56560,56565,56574,56579,56584,56593,56599,56604,56623,56646,56651,56659,56667,56672,56681],{"type":597,"tag":1023,"props":56487,"children":56489},{"id":56488},"将brew装在非系统盘",[56490],{"type":603,"value":56488},{"type":597,"tag":1321,"props":56492,"children":56493},{},[56494,56505,56516],{"type":597,"tag":807,"props":56495,"children":56496},{},[56497,56503],{"type":597,"tag":629,"props":56498,"children":56500},{"className":56499},[],[56501],{"type":603,"value":56502},"Command-R",{"type":603,"value":56504}," 重新安装您在 Mac 上安装过的最新 macOS，但不会升级到更高的版本。",{"type":597,"tag":807,"props":56506,"children":56507},{},[56508,56514],{"type":597,"tag":629,"props":56509,"children":56511},{"className":56510},[],[56512],{"type":603,"value":56513},"Option-Command-R",{"type":603,"value":56515}," 升级到与您的 Mac 兼容的最新 macOS。",{"type":597,"tag":807,"props":56517,"children":56518},{},[56519,56525,56527,56534],{"type":597,"tag":629,"props":56520,"children":56522},{"className":56521},[],[56523],{"type":603,"value":56524},"Shift-Option-Command-R",{"type":603,"value":56526}," 需要安装 ",{"type":597,"tag":886,"props":56528,"children":56531},{"href":56529,"rel":56530},"https://link.zhihu.com/?target=https%3A//support.apple.com/zh-cn/HT201260",[890],[56532],{"type":603,"value":56533},"macOS Sierra 10.12.4",{"type":603,"value":56535}," 或更高版本重新安装 Mac 随附的 macOS 或仍有提供的最接近版本。",{"type":597,"tag":621,"props":56537,"children":56540},{"code":56538,"language":41059,"meta":591,"className":56539},"#禁用安全工具,使/usr/local可以挂载到非系统盘,需要进入安全模式执行\ncsrutil disable\n\n# 挂载非系统盘到/usr/local\nvi /etc/fstab\nUUID=BA245166-9FB3-4D88-98E3-147559D0B531 /usr/local apfs rw,auto,nobrowse\n\n#设置环境变量HOMEBREW_TEMP需要和brew在同一个硬盘\nvi ~/.bash_profile\nexport PATH=\"/usr/local/bin:$PATH\"\nexport HOMEBREW_TEMP=/usr/local/temp\n",[41057],[56541],{"type":597,"tag":629,"props":56542,"children":56543},{"__ignoreMap":591},[56544],{"type":603,"value":56538},{"type":597,"tag":1023,"props":56546,"children":56548},{"id":56547},"切换国内的镜像源",[56549],{"type":603,"value":56547},{"type":597,"tag":606,"props":56551,"children":56552},{},[56553],{"type":603,"value":56554},"Homebrew 默认使用的是国外的源，在下载时速度可能会比较慢。好在国内的清华大学和中科大提供了 Homebrew 的镜像源，我们可以很轻松的切换源，从而提升我们的下载速度。",{"type":597,"tag":3995,"props":56556,"children":56558},{"id":56557},"使用中科大的镜像",[56559],{"type":603,"value":56557},{"type":597,"tag":606,"props":56561,"children":56562},{},[56563],{"type":603,"value":56564},"执行如下命令，即可切换为中科大的镜像",{"type":597,"tag":621,"props":56566,"children":56569},{"code":56567,"language":25619,"meta":591,"className":56568},"cd \"$(brew --repo)\"\ngit remote set-url origin git://mirrors.ustc.edu.cn/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git\n",[25621],[56570],{"type":597,"tag":629,"props":56571,"children":56572},{"__ignoreMap":591},[56573],{"type":603,"value":56567},{"type":597,"tag":3995,"props":56575,"children":56577},{"id":56576},"使用清华大学的镜像",[56578],{"type":603,"value":56576},{"type":597,"tag":606,"props":56580,"children":56581},{},[56582],{"type":603,"value":56583},"执行如下命令，即可切换为清华大学的镜像",{"type":597,"tag":621,"props":56585,"children":56588},{"code":56586,"language":25619,"meta":591,"className":56587},"git -C \"$(brew --repo)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\n\ngit -C \"$(brew --repo homebrew/core)\" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\n",[25621],[56589],{"type":597,"tag":629,"props":56590,"children":56591},{"__ignoreMap":591},[56592],{"type":603,"value":56586},{"type":597,"tag":1023,"props":56594,"children":56596},{"id":56595},"使用-brewfile-完成环境迁移",[56597],{"type":603,"value":56598},"使用 Brewfile 完成环境迁移",{"type":597,"tag":606,"props":56600,"children":56601},{},[56602],{"type":603,"value":56603},"设备永久了，我们的电脑中会有大量的软件，如果你需要迁移环境，重新安装会是一个大麻烦，好在 Homebrew 本身为我们提供了一个非常好用的环境迁移的工具 —— Homebrew Bundle",{"type":597,"tag":606,"props":56605,"children":56606},{},[56607,56609,56615,56617,56622],{"type":603,"value":56608},"你首先需要在之前的电脑中执行 ",{"type":597,"tag":629,"props":56610,"children":56612},{"className":56611},[],[56613],{"type":603,"value":56614},"brew bundle dump",{"type":603,"value":56616}," 来完成当前环境的导出,导出完成后，你会得到一个 ",{"type":597,"tag":1733,"props":56618,"children":56619},{},[56620],{"type":603,"value":56621},"Brewfile",{"type":603,"value":758},{"type":597,"tag":606,"props":56624,"children":56625},{},[56626,56630,56632,56636,56638,56644],{"type":597,"tag":719,"props":56627,"children":56629},{"alt":719,"src":56628},"/images/2020-01-13-brew/1.jpeg",[],{"type":603,"value":56631},"然后将 ",{"type":597,"tag":1733,"props":56633,"children":56634},{},[56635],{"type":603,"value":56621},{"type":603,"value":56637}," 复制到新的电脑中，并执行 ",{"type":597,"tag":629,"props":56639,"children":56641},{"className":56640},[],[56642],{"type":603,"value":56643},"brew bundle",{"type":603,"value":56645}," 来开始安装的过程。",{"type":597,"tag":1023,"props":56647,"children":56649},{"id":56648},"常用软件",[56650],{"type":603,"value":56648},{"type":597,"tag":606,"props":56652,"children":56653},{},[56654],{"type":597,"tag":719,"props":56655,"children":56658},{"alt":56656,"src":56657},"截屏2020-02-05上午4.33.45","/images/2020-01-13-brew/%E6%88%AA%E5%B1%8F2020-02-05%E4%B8%8A%E5%8D%884.33.45.png",[],{"type":597,"tag":621,"props":56660,"children":56662},{"code":56661},"brew cask install launchrocket\n",[56663],{"type":597,"tag":629,"props":56664,"children":56665},{"__ignoreMap":591},[56666],{"type":603,"value":56661},{"type":597,"tag":1023,"props":56668,"children":56670},{"id":56669},"常用链接",[56671],{"type":603,"value":56669},{"type":597,"tag":606,"props":56673,"children":56674},{},[56675],{"type":597,"tag":886,"props":56676,"children":56679},{"href":56677,"rel":56678},"https://github.com/Homebrew/homebrew-services",[890],[56680],{"type":603,"value":56677},{"type":597,"tag":606,"props":56682,"children":56683},{},[56684],{"type":597,"tag":886,"props":56685,"children":56688},{"href":56686,"rel":56687},"https://sspai.com/post/56009",[890],[56689],{"type":603,"value":56686},{"title":591,"searchDepth":787,"depth":787,"links":56691},[56692,56693,56694,56695,56696],{"id":56488,"depth":1530,"text":56488},{"id":56547,"depth":1530,"text":56547},{"id":56595,"depth":1530,"text":56598},{"id":56648,"depth":1530,"text":56648},{"id":56669,"depth":1530,"text":56669},"content:tool:2020-01-13-brew.md","tool/2020-01-13-brew.md","2020-01-13",{"_path":430,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":429,"description":56701,"body":56702,"_type":791,"_id":57457,"_source":793,"_file":57458,"_extension":795,"date":56699},"扇形攻击其实这个分为两部分，是在扇形距离范围内（也就是不考虑角度，其实是圆形范围内）Vector3.Distance(a, b);计算距离是扇形角度范围内计算怪物是否在你的视野范围内其实可以这么看\nAvatar的正方向向量与Avatar到Enemy之间向量的夹角大小是否小于于视线大小的一半。这样就能判断是否在视线范围内。所以现在的问题就是这么计算这个夹角计算的方式是，获取Avatar正方向的一个点与Avatar世界坐标相减，获取正方向向量Enemy的世界坐标与Avatar世界坐标相减，获取Enemy到Avatar的方向向量调用Vector3.Angle(a, b)计算夹角    public ",{"type":594,"children":56703,"toc":57449},[56704,56709,56714,56727,56737,56742,56747,56752,56757,56775,56783,56788,56796,56802,56810,56815,56823,56829,56837,56842,56850,56855,56863,56868,56873,56878,56883,56888,56895,56903,56908,56916,56921,56929,56934,56939,56944,56952,56956,56964,56969,56974,56979,56984,56997,57002,57007,57025,57031,57040,57048,57053,57058,57063,57068,57073,57083,57088,57093,57098,57103,57108,57116,57121,57126,57131,57139,57144,57149,57154,57162,57167,57175,57180,57188,57193,57201,57206,57211,57216,57222,57227,57232,57240,57245,57250,57255,57260,57264,57269,57282,57287,57300,57305,57309,57314,57319,57370,57405,57413,57421,57429,57434],{"type":597,"tag":857,"props":56705,"children":56707},{"id":56706},"扇形攻击",[56708],{"type":603,"value":56706},{"type":597,"tag":606,"props":56710,"children":56711},{},[56712],{"type":603,"value":56713},"其实这个分为两部分，",{"type":597,"tag":1321,"props":56715,"children":56716},{},[56717,56722],{"type":597,"tag":807,"props":56718,"children":56719},{},[56720],{"type":603,"value":56721},"是在扇形距离范围内（也就是不考虑角度，其实是圆形范围内）Vector3.Distance(a, b);计算距离",{"type":597,"tag":807,"props":56723,"children":56724},{},[56725],{"type":603,"value":56726},"是扇形角度范围内",{"type":597,"tag":606,"props":56728,"children":56729},{},[56730,56732],{"type":603,"value":56731},"计算怪物是否在你的视野范围内其实可以这么看\n",{"type":597,"tag":719,"props":56733,"children":56736},{"alt":56734,"src":56735},"【小松教你手游开发】【unity实用技能】计算目标物体是否在自己的扇形视野范围","/images/2020-01-13-unity-attack-detection/80f6c4220d181e73991a8dfdfda32a81.png",[],{"type":597,"tag":606,"props":56738,"children":56739},{},[56740],{"type":603,"value":56741},"Avatar的正方向向量与Avatar到Enemy之间向量的夹角大小是否小于于视线大小的一半。",{"type":597,"tag":606,"props":56743,"children":56744},{},[56745],{"type":603,"value":56746},"这样就能判断是否在视线范围内。",{"type":597,"tag":606,"props":56748,"children":56749},{},[56750],{"type":603,"value":56751},"所以现在的问题就是这么计算这个夹角",{"type":597,"tag":606,"props":56753,"children":56754},{},[56755],{"type":603,"value":56756},"计算的方式是，",{"type":597,"tag":803,"props":56758,"children":56759},{},[56760,56765,56770],{"type":597,"tag":807,"props":56761,"children":56762},{},[56763],{"type":603,"value":56764},"获取Avatar正方向的一个点与Avatar世界坐标相减，获取正方向向量",{"type":597,"tag":807,"props":56766,"children":56767},{},[56768],{"type":603,"value":56769},"Enemy的世界坐标与Avatar世界坐标相减，获取Enemy到Avatar的方向向量",{"type":597,"tag":807,"props":56771,"children":56772},{},[56773],{"type":603,"value":56774},"调用Vector3.Angle(a, b)计算夹角",{"type":597,"tag":621,"props":56776,"children":56778},{"code":56777},"    public GameObject avatar;\n    public GameObject enemy;\n    \n    //扇形距离 攻击距离  扇形的半径 \n    float minDistance = 10f;\n    //扇形的角度 也就是攻击的角度\n    float minAngle = 120f;\n\n    // Update is called once per frame\n    void Update ()\n    {\n        Vector3 avatarPos = avatar.transform.position;\n        Vector3 enemyPos = enemy.transform.position;\n        \n        //与敌人的距离\n        float distance = Vector3.Distance(avatarPos, enemyPos);\n\n        //主角相对于目标的向量\n        Vector3 srcLocalVect = enemyPos - avatarPos;\n        srcLocalVect.y = 0;\n\n        //获取主角正前方的一个点\n        Vector3 forwardLocalPos = avatar.transform.forward * 1 + avatarPos;\n\n        //获取正方向向量\n        Vector3 forwardLocalVect = forwardLocalPos - avatarPos;\n        forwardLocalVect.y = 0;\n\n        //计算角度\n        float angle = Vector3.Angle(srcLocalVect, forwardLocalVect);\n\n        if(distance \u003C minDistance && angle \u003C minAngle/2)\n        {\n            Debug.Log(\"In EyeSight\");\n        }\n    }\n",[56779],{"type":597,"tag":629,"props":56780,"children":56781},{"__ignoreMap":591},[56782],{"type":603,"value":56777},{"type":597,"tag":857,"props":56784,"children":56786},{"id":56785},"长方形范围攻击检测",[56787],{"type":603,"value":56785},{"type":597,"tag":621,"props":56789,"children":56791},{"code":56790},"using UnityEngine;\nusing System.Collections;\n\n\npublic class AttackCHeck : MonoBehaviour\n{\n    //要攻击的目标\n    public Transform Target;\n\n    private void Update()\n    {\n        //计算玩家与敌人的距离\n        float distance = Vector3.Distance(transform.position, Target.position);\n        //玩家与敌人的方向向量\n        Vector3 temVec = Target.position - transform.position;\n        //与玩家正前方做点积\n        float forwardDistance = Vector3.Dot(temVec, transform.forward.normalized);\n        if (forwardDistance > 0 && forwardDistance \u003C= 10)\n        {\n            float rightDistance = Vector3.Dot(temVec, transform.right.normalized);\n\n            if (Mathf.Abs(rightDistance) \u003C= 3)\n            {\n                Debug.Log(\"进入攻击范围\");\n            }\n        }\n\n    }\n}\n",[56792],{"type":597,"tag":629,"props":56793,"children":56794},{"__ignoreMap":591},[56795],{"type":603,"value":56790},{"type":597,"tag":857,"props":56797,"children":56799},{"id":56798},"判断目标点是否在指定的矩形内两个随机点确定的矩形",[56800],{"type":603,"value":56801},"判断目标点是否在指定的矩形内（两个随机点确定的矩形）",{"type":597,"tag":621,"props":56803,"children":56805},{"code":56804},"\npublic class Rectangle01\n{\n    /// Min为当前坐标系中矩形的最小点\n    /// Max为当前坐标系中矩形的最大点\n    public Vector2 Min;\n    public Vector2 Max;\n \n    public bool Contains( Vector2 point)\n    {\n        if (point.x \u003C this.Min.x)\n        {\n            return false;\n        }\n        if (point.x > this.Max.x)\n        {\n            return false;\n        }\n        if (point.y \u003C this.Min.y)\n        {\n            return false;\n        }\n        if (point.y > this.Max.y)\n        {\n            return false;\n        }\n        return true;\n    }\n \n    public void CalcVertices(out Vector2 vertex0, out Vector2 vertex1, out Vector2 vertex2, out Vector2 vertex3)\n    {\n        vertex0 = this.Min;\n        vertex1 = new Vector2(this.Max.x, this.Min.y);\n        vertex2 = this.Max;\n        vertex3 = new Vector2(this.Min.x, this.Max.y);\n    }\n}\n",[56806],{"type":597,"tag":629,"props":56807,"children":56808},{"__ignoreMap":591},[56809],{"type":603,"value":56804},{"type":597,"tag":606,"props":56811,"children":56812},{},[56813],{"type":603,"value":56814},"测试   脚本",{"type":597,"tag":621,"props":56816,"children":56818},{"code":56817},"public class TestRt01 : MonoBehaviour {\n \n    public Transform Point;\n    public Transform RtPoint0, RtPoint1;\n    public Rectangle01 rtBox;\n \n    private const float _pointRadius = 0.1f;\n  \n    private void OnDrawGizmos()\n    {\n        if (rtBox != null)\n        {\n            DrawRt(rtBox);\n            Gizmos.DrawSphere(Point.position, _pointRadius);\n        }\n    }\n    private void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.Q))\n        {\n            rtBox = CreateFromTwoPoints(RtPoint0.position, RtPoint1.position);\n            bool cont = rtBox.Contains(Point.position);\n            if (cont)\n            {\n                Debug.Log(\"目标点在矩形范围内\");\n            }\n            else\n            {\n                Debug.Log(\"目标点不在矩形范围内\");\n            }\n        }\n    }\n    public Rectangle01 CreateFromTwoPoints(Vector2 point0, Vector2 point1)\n    {\n        Rectangle01 rt = new Rectangle01();\n        if (point0.x \u003C point1.x)\n        {\n            rt.Min.x = point0.x;\n            rt.Max.x = point1.x;\n        }\n        else\n        {\n            rt.Min.x = point1.x;\n            rt.Max.x = point0.x;\n        }\n        if (point0.y \u003C point1.y)\n        {\n            rt.Min.y = point0.y;\n            rt.Max.y = point1.y;\n        }\n        else\n        {\n            rt.Min.y = point1.y;\n            rt.Max.y = point0.y;\n        }\n        return rt;\n    }\n \n    protected void DrawRt( Rectangle01 box)\n    {\n        Vector2 v0, v1, v2, v3;\n        box.CalcVertices(out v0, out v1, out v2, out v3);\n        Gizmos.color = Color.blue;\n        Gizmos.DrawLine(v0, v1);\n        Gizmos.DrawLine(v1, v2);\n        Gizmos.DrawLine(v2, v3);\n        Gizmos.DrawLine(v3, v0);\n    }\n}\n",[56819],{"type":597,"tag":629,"props":56820,"children":56821},{"__ignoreMap":591},[56822],{"type":603,"value":56817},{"type":597,"tag":857,"props":56824,"children":56826},{"id":56825},"判断目标点是否在某一矩形区域以任一点为中心的矩形区域",[56827],{"type":603,"value":56828},"判断目标点是否在某一矩形区域（以任一点为中心的矩形区域）",{"type":597,"tag":621,"props":56830,"children":56832},{"code":56831},"public class Box {\n \n    public Vector2 Center;\n    public Vector2 Axis0;\n    public Vector2 Axis1;\n    public Vector2 Extents;\n \n    public Box(Vector2 center, Vector2 axis0, Vector2 axis1, Vector2 extents)\n    {\n        this.Center = center;\n        this.Axis0 = axis0;\n        this.Axis1 = axis1;\n        this.Extents = extents;\n    }\n    public bool Contains(Vector2 point)\n    {\n        Vector2 vector;\n        vector.x = point.x - this.Center.x;\n        vector.y = point.y - this.Center.y;\n        float num = vector.Dot(ref this.Axis0);\n        if (num \u003C -this.Extents.x)\n        {\n            return false;\n        }\n        if (num > this.Extents.x)\n        {\n            return false;\n        }\n        num = vector.Dot(ref this.Axis1);\n        if (num \u003C -this.Extents.y)\n        {\n            return false;\n        }\n        if (num > this.Extents.y)\n        {\n            return false;\n        }\n        return true;\n    }\n \n    public void CalcVertices(out Vector2 vertex0, out Vector2 vertex1, out Vector2 vertex2, out Vector2 vertex3)\n    {\n        Vector2 vector = (Vector2)(this.Axis0 * this.Extents.x);\n        Vector2 vector2 = (Vector2)(this.Axis1 * this.Extents.y);\n        vertex0 = (this.Center - vector) - vector2;\n        vertex1 = (this.Center + vector) - vector2;\n        vertex2 = (this.Center + vector) + vector2;\n        vertex3 = (this.Center - vector) + vector2;\n    }\n \n}\n \npublic static class Vector2ex\n{\n    public static float Dot(this Vector2 vector, ref Vector2 value)\n    {\n        return ((vector.x * value.x) + (vector.y * value.y));\n    }\n}\n",[56833],{"type":597,"tag":629,"props":56834,"children":56835},{"__ignoreMap":591},[56836],{"type":603,"value":56831},{"type":597,"tag":606,"props":56838,"children":56839},{},[56840],{"type":603,"value":56841},"测试脚本",{"type":597,"tag":621,"props":56843,"children":56845},{"code":56844},"\npublic class TestBox : MonoBehaviour {\n \n    public Transform Point;\n    public Transform rtBox;\n    Box box;\n    private const float _pointRadius = .11f;\n    private void OnDrawGizmos()\n    {\n        if (box!=null)\n        {\n            Gizmos.DrawSphere(Point.position, _pointRadius);\n            DrawBox(ref box);\n        }\n    }\n    private void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.Q))\n        {\n            box = new Box(rtBox.position, rtBox.right, rtBox.up, rtBox.localScale); ;\n            bool cont = box.Contains(Point.position);\n            if (cont)\n            {\n                Debug.Log(\"目标点在矩形范围内\");\n            }\n            else\n            {\n                Debug.Log(\"目标点不在矩形范围内\");\n            }\n        }\n    }\n \n    protected void DrawBox(ref Box box)\n    {\n        Vector2 v0, v1, v2, v3;\n \n        box.CalcVertices(out v0, out v1, out v2, out v3);\n        Gizmos.color = Color.blue;\n        Gizmos.DrawLine(v0, v1);\n        Gizmos.DrawLine(v1, v2);\n        Gizmos.DrawLine(v2, v3);\n        Gizmos.DrawLine(v3, v0);\n    }\n}\n",[56846],{"type":597,"tag":629,"props":56847,"children":56848},{"__ignoreMap":591},[56849],{"type":603,"value":56844},{"type":597,"tag":857,"props":56851,"children":56853},{"id":56852},"半圆形攻击范围检测",[56854],{"type":603,"value":56852},{"type":597,"tag":621,"props":56856,"children":56858},{"code":56857},"using UnityEngine;\nusing System.Collections;\n\n\npublic class AttackCHeck : MonoBehaviour\n{\n    //要攻击的目标\n    public Transform Target;\n    private void Update()\n    {\n        //计算玩家与敌人的距离\n        float distance = Vector3.Distance(transform.position, Target.position);\n        //玩家与敌人的方向向量\n        Vector3 temVec = Target.position - transform.position;\n        //与玩家正前方做点积\n        float forwardDistance = Vector3.Dot(temVec, transform.forward.normalized);\n        if (forwardDistance > 0 && forwardDistance \u003C= 10)\n        {\n            if (distance \u003C= 5)\n            {\n                Debug.Log(\"进入攻击范围\");\n            }\n        }\n    }\n}\n",[56859],{"type":597,"tag":629,"props":56860,"children":56861},{"__ignoreMap":591},[56862],{"type":603,"value":56857},{"type":597,"tag":857,"props":56864,"children":56866},{"id":56865},"圆形攻击范围",[56867],{"type":603,"value":56865},{"type":597,"tag":606,"props":56869,"children":56870},{},[56871],{"type":603,"value":56872},"圆形攻击范围有两种，以玩着荣耀的王昭君大招为例子，",{"type":597,"tag":606,"props":56874,"children":56875},{},[56876],{"type":603,"value":56877},"第一种是制定位置施法：新版本的王昭君的大招是指定位置施法的，也就是说在玩家固定施法半径以内可随意放一个圆形的技能。在半径之内的敌人受伤。",{"type":597,"tag":606,"props":56879,"children":56880},{},[56881],{"type":603,"value":56882},"第二种是固定位置施法：老版本的王昭君大招是在自身一定半径以内，敌人在这个范围内受伤。",{"type":597,"tag":606,"props":56884,"children":56885},{},[56886],{"type":603,"value":56887},"其实两种判断都很简单，只需要判断敌人和SkillPosition之间的距离是否小于半径即可。",{"type":597,"tag":606,"props":56889,"children":56890},{},[56891],{"type":597,"tag":719,"props":56892,"children":56894},{"alt":719,"src":56893},"/images/2020-01-13-unity-attack-detection/20180425195609483.png",[],{"type":597,"tag":621,"props":56896,"children":56898},{"code":56897},"/// \u003Csummary>\n    /// 不定点式圆形攻击\n    /// \u003C/summary>\n    /// \u003Cparam name=\"attacked\">被攻击方\u003C/param>\n    /// \u003Cparam name=\"skillPosition\">技能释放位置\u003C/param>\n    /// \u003Cparam name=\"radius\">半径\u003C/param>\n    /// \u003Creturns>\u003C/returns>\n    public bool CircleAttack(Transform attacked,Transform skillPosition, float radius)\n    {\n        float distance = Vector3.Distance(attacked.position, skillPosition.position);\n        if (distance \u003C radius)\n        {\n            return true;\n        }\n        return false;\n    }\n",[56899],{"type":597,"tag":629,"props":56900,"children":56901},{"__ignoreMap":591},[56902],{"type":603,"value":56897},{"type":597,"tag":606,"props":56904,"children":56905},{},[56906],{"type":603,"value":56907},"方法2",{"type":597,"tag":621,"props":56909,"children":56911},{"code":56910},"public class Circle {\n \n    public Vector2 Center;\n    public float Radius;\n \n    public Circle(Vector2 center, float radius)\n    {\n        this.Center = center;\n        this.Radius = radius;\n    }\n \n    public bool Contains( Vector2 point)\n    {\n        Vector2 vector = point - this.Center;\n        return (vector.SqrMagnitude() \u003C= (this.Radius * this.Radius));\n    }\n \n    public Vector2 Eval(float t)\n    {\n        return new Vector2(this.Center.x + (this.Radius * Mathf.Cos(t)), this.Center.y + (this.Radius * Mathf.Sin(t)));\n    }\n }\n",[56912],{"type":597,"tag":629,"props":56913,"children":56914},{"__ignoreMap":591},[56915],{"type":603,"value":56910},{"type":597,"tag":857,"props":56917,"children":56919},{"id":56918},"判断一个点是否在三角形里面",[56920],{"type":603,"value":56918},{"type":597,"tag":621,"props":56922,"children":56924},{"code":56923},"public static  bool InTrigon(Vector3 _target,Vector3 _center,Vector3 _left,Vector3 _right){  \n        Vector3 Ctl=_left-_center;  \n        Vector3 Ctr=_right -_center;  \n        Vector3 Ctt=_target-_center;  \n        Vector3 Ltr=_right-_left;  \n        Vector3 Ltc=_right-_center;  \n        Vector3 Ltt=_left-_target;  \n        Vector3 Rtl=_left-_right;  \n        Vector3 Rtc=_center-_right;  \n        Vector3 Rtt=_target-_right;  \n        if(   \n           Vector3.Dot(Vector3.Cross(Ctl,Ctr).normalized,Vector3.Cross(Ctl,Ctt).normalized)==1&&  \n           Vector3.Dot(Vector3.Cross(Ltr,Ltc).normalized,Vector3.Cross(Ltr,Ltt).normalized)==1&&  \n           Vector3.Dot(Vector3.Cross(Rtc,Rtl).normalized,Vector3.Cross(Rtc,Rtt).normalized)==1  \n           )  \n            return true;  \n        else  \n            return false;  \n    }\n",[56925],{"type":597,"tag":629,"props":56926,"children":56927},{"__ignoreMap":591},[56928],{"type":603,"value":56923},{"type":597,"tag":606,"props":56930,"children":56931},{},[56932],{"type":603,"value":56933},"原理：通过向量之间的对比，利用点乘和差乘实现判断一个点是否在三角形里面。",{"type":597,"tag":606,"props":56935,"children":56936},{},[56937],{"type":603,"value":56938},"叉乘： 叉乘结果用右手判断法则。",{"type":597,"tag":1023,"props":56940,"children":56942},{"id":56941},"方法二",[56943],{"type":603,"value":56941},{"type":597,"tag":621,"props":56945,"children":56947},{"code":56946},"public class Triangle \n{\n    public enum Orientations\n    {\n        CW,//三个点顺时针\n        CCW,//三个点逆时针\n        None//不清楚点的顺序\n    }\n \n    public Vector2 V0;\n    public Vector2 V1;\n    public Vector2 V2;\n    public Triangle(Vector2 v0, Vector2 v1, Vector2 v2)\n    {\n        this.V0 = v0;\n        this.V1 = v1;\n        this.V2 = v2;\n    }\n    public static Triangle CreateTriangle2(Transform v0, Transform v1, Transform v2)\n    {\n        return new Triangle(v0.position, v1.position, v2.position);\n    }\n \n    public Orientations CalcOrientation(float threshold = 1E-05f)\n    {\n        float num = this.CalcDeterminant();\n        if (num > threshold)\n        {\n            return Orientations.CCW;\n        }\n        if (num \u003C -threshold)\n        {\n            return Orientations.CW;\n        }\n        return Orientations.None;\n    }\n \n    public float CalcDeterminant()\n    {\n        return ((((((this.V1.x * this.V2.y) + (this.V0.x * this.V1.y)) + (this.V2.x * this.V0.y)) - (this.V1.x * this.V0.y)) - (this.V2.x * this.V1.y)) - (this.V0.x * this.V2.y));\n    }\n \n    public bool Contains(Vector2 point)\n    {\n        bool flag = (((point.x - this.V1.x) * (this.V0.y - this.V1.y)) - ((point.y - this.V1.y) * (this.V0.x - this.V1.x))) \u003C 0f;\n        bool flag2 = (((point.x - this.V2.x) * (this.V1.y - this.V2.y)) - ((point.y - this.V2.y) * (this.V1.x - this.V2.x))) \u003C 0f;\n        if (flag != flag2)\n        {\n            return false;\n        }\n        bool flag3 = (((point.x - this.V0.x) * (this.V2.y - this.V0.y)) - ((point.y - this.V0.y) * (this.V2.x - this.V0.x))) \u003C 0f;\n        return (flag2 == flag3);\n    }\n \n    /// \u003Csummary>\n    /// 当已经知道 三个顶点的顺序是逆时针方向的时候使用\n    /// \u003C/summary>\n    /// \u003Cparam name=\"point\">\u003C/param>\n    /// \u003Creturns>\u003C/returns>\n    public bool ContainsCCW(Vector2 point)\n    {\n        if ((((point.x - this.V0.x) * (this.V1.y - this.V0.y)) - ((point.y - this.V0.y) * (this.V1.x - this.V0.x))) > 0f)\n        {\n            return false;\n        }\n        if ((((point.x - this.V1.x) * (this.V2.y - this.V1.y)) - ((point.y - this.V1.y) * (this.V2.x - this.V1.x))) > 0f)\n        {\n            return false;\n        }\n        if ((((point.x - this.V2.x) * (this.V0.y - this.V2.y)) - ((point.y - this.V2.y) * (this.V0.x - this.V2.x))) > 0f)\n        {\n            return false;\n        }\n        return true;\n    }\n \n    /// \u003Csummary>\n    /// 当已经知道 三个顶点的顺序是顺时针方向的时候使用\n    /// \u003C/summary>\n    /// \u003Cparam name=\"point\">\u003C/param>\n    /// \u003Creturns>\u003C/returns>\n    public bool ContainsCW(Vector2 point)\n    {\n        if ((((point.x - this.V0.x) * (this.V1.y - this.V0.y)) - ((point.y - this.V0.y) * (this.V1.x - this.V0.x))) \u003C 0f)\n        {\n            return false;\n        }\n        if ((((point.x - this.V1.x) * (this.V2.y - this.V1.y)) - ((point.y - this.V1.y) * (this.V2.x - this.V1.x))) \u003C 0f)\n        {\n            return false;\n        }\n        if ((((point.x - this.V2.x) * (this.V0.y - this.V2.y)) - ((point.y - this.V2.y) * (this.V0.x - this.V2.x))) \u003C 0f)\n        {\n            return false;\n        }\n        return true;\n    }\n\n}\n",[56948],{"type":597,"tag":629,"props":56949,"children":56950},{"__ignoreMap":591},[56951],{"type":603,"value":56946},{"type":597,"tag":606,"props":56953,"children":56954},{},[56955],{"type":603,"value":56841},{"type":597,"tag":621,"props":56957,"children":56959},{"code":56958},"\npublic class TriangleTest : MonoBehaviour {\n    public Transform Point;\n    public Transform V0, V1, V2;\n    Triangle triangle;\n    private void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.Q))\n        {\n            triangle = Triangle.CreateTriangle2(V0, V1, V2);\n            Triangle.Orientations orientation = triangle.CalcOrientation();\n \n            bool cont = false;\n            if (orientation == Triangle.Orientations.CCW)\n            {\n                 cont = triangle.Contains(Point.position);\n                 //cont1 = triangle.ContainsCCW(Point.position); // 如果你知道三角形方向(顶点顺序方向)，就用这个\n            }\n            else if (orientation == Triangle.Orientations.CW)\n            {\n                 cont = triangle.Contains(Point.position);\n                 //cont1 = triangle.ContainsCW(Point.position); // 如果你知道三角形方向(顶点顺序方向)，就用这个\n            }\n            else // Degenerate\n            {\n                Debug.LogError(\"Triangle is degenerate\");\n            }\n            if (cont)\n            {\n                Debug.Log(\"目标点在矩形范围内\");\n            }\n            else\n            {\n                Debug.Log(\"目标点不在矩形范围内\");\n            }\n        }\n    }\n    private void OnDrawGizmos()\n    {\n        if (triangle!=null)\n        {\n            DrawTriangle( triangle);\n        }\n    }\n \n \n    void DrawTriangle( Triangle triangle)\n    {\n        Gizmos.color = Color.blue;\n        Gizmos.DrawLine(triangle.V0, triangle.V1);\n        Gizmos.DrawLine(triangle.V1, triangle.V2);\n        Gizmos.DrawLine(triangle.V2, triangle.V0);\n    }\n\n}\n",[56960],{"type":597,"tag":629,"props":56961,"children":56962},{"__ignoreMap":591},[56963],{"type":603,"value":56958},{"type":597,"tag":857,"props":56965,"children":56967},{"id":56966},"向量",[56968],{"type":603,"value":56966},{"type":597,"tag":606,"props":56970,"children":56971},{},[56972],{"type":603,"value":56973},"其实这些小算法基本上用的全是向量的计算,向量的计算有两种",{"type":597,"tag":1023,"props":56975,"children":56977},{"id":56976},"向量的点乘",[56978],{"type":603,"value":56976},{"type":597,"tag":606,"props":56980,"children":56981},{},[56982],{"type":603,"value":56983},"–>A . B = |A| * |B| * cos θ\n–>点乘应用",{"type":597,"tag":803,"props":56985,"children":56986},{},[56987,56992],{"type":597,"tag":807,"props":56988,"children":56989},{},[56990],{"type":603,"value":56991},"如果 让 A 等于单位向量 |A| ==1 c点积 等于 B 在 A 上的投影",{"type":597,"tag":807,"props":56993,"children":56994},{},[56995],{"type":603,"value":56996},"如果 让 A B等于单位向量 arccos(a.b) == 夹角",{"type":597,"tag":1023,"props":56998,"children":57000},{"id":56999},"向量的叉乘",[57001],{"type":603,"value":56999},{"type":597,"tag":606,"props":57003,"children":57004},{},[57005],{"type":603,"value":57006},"–>A* B = C C就是A和B的法向量\n–>叉乘应用",{"type":597,"tag":803,"props":57008,"children":57009},{},[57010,57015,57020],{"type":597,"tag":807,"props":57011,"children":57012},{},[57013],{"type":603,"value":57014},"c 是有方向 。 通过 左手 定则 可以知道 C 的方向",{"type":597,"tag":807,"props":57016,"children":57017},{},[57018],{"type":603,"value":57019},"所以叉乘一般是用来计算方向的",{"type":597,"tag":807,"props":57021,"children":57022},{},[57023],{"type":603,"value":57024},"A 和 B 都是单位向量 arcsin(|A*B|) 等于 夹角",{"type":597,"tag":857,"props":57026,"children":57028},{"id":57027},"凸多边形碰撞分离轴定理算法",[57029],{"type":603,"value":57030},"凸多边形碰撞(分离轴定理算法)",{"type":597,"tag":606,"props":57032,"children":57033},{},[57034,57035],{"type":603,"value":44225},{"type":597,"tag":1080,"props":57036,"children":57037},{},[57038],{"type":603,"value":57039},"正文如下：*",{"type":597,"tag":606,"props":57041,"children":57042},{},[57043],{"type":597,"tag":719,"props":57044,"children":57047},{"alt":57045,"src":57046},"多边形碰撞","/images/2020-01-13-unity-attack-detection/20170204235932265.jpg",[],{"type":597,"tag":606,"props":57049,"children":57050},{},[57051],{"type":603,"value":57052},"分离轴定理（英文简称SAT）是一项用于检测凸多边形碰撞的技术。",{"type":597,"tag":606,"props":57054,"children":57055},{},[57056],{"type":603,"value":57057},"我绝不是这个方面的专家，但当检测碰撞的需求出现在我面前之后，我做了大量的阅读并最终在ActionScript 3中实现了它。",{"type":597,"tag":606,"props":57059,"children":57060},{},[57061],{"type":603,"value":57062},"我想，我应该把我所学到的分享给大家，希望大家不会在这方面被坑得很惨：）",{"type":597,"tag":606,"props":57064,"children":57065},{},[57066],{"type":603,"value":57067},"当我发现我需要在flash中检测多边形碰撞时，我碰巧地遇到了一个叫“分离轴定理”的方法。但唯一的问题是，为了真正地掌握它，我可费了不少功夫。",{"type":597,"tag":606,"props":57069,"children":57070},{},[57071],{"type":603,"value":57072},"在阅读了大量有关碰撞检测的资料，并参看了一些代码示例后，这个方法总算被我领悟了。",{"type":597,"tag":606,"props":57074,"children":57075},{},[57076,57078],{"type":603,"value":57077},"为了帮助其他那些不精通数学的开发者，我想我应该写下这一篇能快速阐明这个算法工作原理的简短介绍。我还在下文引入了一个使用分离轴定理实现的demo，以及供大家下载并使用的ActionScript 3源代码。",{"type":597,"tag":1080,"props":57079,"children":57080},{},[57081],{"type":603,"value":57082},"（译者：demo和源代码请到原文中查看和下载）",{"type":597,"tag":606,"props":57084,"children":57085},{},[57086],{"type":603,"value":57087},"注意：分离轴定理需要一点数学向量的知识，所以在深究这个算法前，你最好复习一下这方面的内容。",{"type":597,"tag":857,"props":57089,"children":57091},{"id":57090},"算法简述",[57092],{"type":603,"value":57090},{"type":597,"tag":606,"props":57094,"children":57095},{},[57096],{"type":603,"value":57097},"从根本上来讲，分离轴定理（以及其他碰撞算法）的用途就是去检测并判断两个图形之间是否有间隙。分离轴定理中用到的方法使算法本身显得十分独特。",{"type":597,"tag":606,"props":57099,"children":57100},{},[57101],{"type":603,"value":57102},"我所听到过分离轴定理的最好类比方式是这样的：",{"type":597,"tag":606,"props":57104,"children":57105},{},[57106],{"type":603,"value":57107},"假想你拿一个电筒从不同的角度照射到两个图形上，那么会有怎样的一系列的阴影投射到它们之后的墙壁上呢？",{"type":597,"tag":606,"props":57109,"children":57110},{},[57111],{"type":597,"tag":719,"props":57112,"children":57115},{"alt":57113,"src":57114},"投影问题","/images/2020-01-13-unity-attack-detection/20170205000242395.jpg",[],{"type":597,"tag":606,"props":57117,"children":57118},{},[57119],{"type":603,"value":57120},"如果你用这个方式从每一个角度上对这两个图形进行处理，并都找不到任何的间隙，那么这两个图形就一定接触。如果你找到了一个间隙，那么这两个图形就显而易见地没有接触。",{"type":597,"tag":606,"props":57122,"children":57123},{},[57124],{"type":603,"value":57125},"从编程的角度来讲，从每个可能的角度上去检测会使处理变得十分密集。不过幸运的是，由于多边形的性质，你只需要检测其中几个关键的角度。",{"type":597,"tag":606,"props":57127,"children":57128},{},[57129],{"type":603,"value":57130},"你需要检测的角度数量就正是这个多边形的边数。也就是说，你所需检测的角度最大数量就是你要检测碰撞的两个多边形边数之和。举个例子，两个五边形就需要检测10个角度。",{"type":597,"tag":606,"props":57132,"children":57133},{},[57134],{"type":597,"tag":719,"props":57135,"children":57138},{"alt":57136,"src":57137},"角度选取","/images/2020-01-13-unity-attack-detection/20170205000357272.jpg",[],{"type":597,"tag":857,"props":57140,"children":57142},{"id":57141},"如何在代码中实现",[57143],{"type":603,"value":57141},{"type":597,"tag":606,"props":57145,"children":57146},{},[57147],{"type":603,"value":57148},"这是一个简易但比较啰嗦的方法，以下是基本的步骤：",{"type":597,"tag":606,"props":57150,"children":57151},{},[57152],{"type":603,"value":57153},"**步骤一：**从需要检测的多边形中取出一条边，并找出它的法向量（垂直于它的向量），这个向量将会是我们的一个“投影轴”。",{"type":597,"tag":606,"props":57155,"children":57156},{},[57157],{"type":597,"tag":719,"props":57158,"children":57161},{"alt":57159,"src":57160},"步骤一图解","/images/2020-01-13-unity-attack-detection/20170205000919294.jpg",[],{"type":597,"tag":606,"props":57163,"children":57164},{},[57165],{"type":603,"value":57166},"**步骤二：**循环获取第一个多边形的每个点，并将它们投影到这个轴上。（记录这个多边形投影到轴上的最高和最低点）",{"type":597,"tag":606,"props":57168,"children":57169},{},[57170],{"type":597,"tag":719,"props":57171,"children":57174},{"alt":57172,"src":57173},"步骤二图解","/images/2020-01-13-unity-attack-detection/20170205001546835.jpg",[],{"type":597,"tag":606,"props":57176,"children":57177},{},[57178],{"type":603,"value":57179},"**步骤三：**对第二个多边形做同样的处理。",{"type":597,"tag":606,"props":57181,"children":57182},{},[57183],{"type":597,"tag":719,"props":57184,"children":57187},{"alt":57185,"src":57186},"步骤三图解","/images/2020-01-13-unity-attack-detection/20170205001940563.jpg",[],{"type":597,"tag":606,"props":57189,"children":57190},{},[57191],{"type":603,"value":57192},"**步骤四：**分别得到这两个多边形的投影，并检测这两段投影是否重叠。",{"type":597,"tag":606,"props":57194,"children":57195},{},[57196],{"type":597,"tag":719,"props":57197,"children":57200},{"alt":57198,"src":57199},"步骤四图解","/images/2020-01-13-unity-attack-detection/20170205002051627.jpg",[],{"type":597,"tag":606,"props":57202,"children":57203},{},[57204],{"type":603,"value":57205},"如果你发现了这两个投影到轴上的“阴影”有间隙，那么这两个图形一定没有相交。但如果没有间隙，那么它们则可能接触，你需要继续检测直到把两个多边形的每条边都检测完。如果你检测完每条边后，都没有发现任何间隙，那么它们是相互碰撞的。",{"type":597,"tag":606,"props":57207,"children":57208},{},[57209],{"type":603,"value":57210},"这个算法基本就是如此的。",{"type":597,"tag":606,"props":57212,"children":57213},{},[57214],{"type":603,"value":57215},"顺带提一下，如果你记录了哪个轴上的投影重叠值最小（以及重叠了多少），那么你就能用这个值来分开这两个图形。",{"type":597,"tag":598,"props":57217,"children":57219},{"id":57218},"那么如何处理圆呢",[57220],{"type":603,"value":57221},"那么如何处理圆呢？",{"type":597,"tag":606,"props":57223,"children":57224},{},[57225],{"type":603,"value":57226},"在分离轴定理中，检测圆与检测多边形相比，会有点点奇异，但仍然是可以实现的。",{"type":597,"tag":606,"props":57228,"children":57229},{},[57230],{"type":603,"value":57231},"最值得注意的是，圆是没有任何的边，所以是没有明显的用于投影的轴。但它有一条“不是很明显的”的投影轴。这条轴就是途经圆心和多边形上离圆心最近的顶点的直线。",{"type":597,"tag":606,"props":57233,"children":57234},{},[57235],{"type":597,"tag":719,"props":57236,"children":57239},{"alt":57237,"src":57238},"圆的投影轴","/images/2020-01-13-unity-attack-detection/20170205002152799.jpg",[],{"type":597,"tag":606,"props":57241,"children":57242},{},[57243],{"type":603,"value":57244},"在这以后就是按套路遍历另一个多边形的每条投影轴，并检测是否有投影重叠。",{"type":597,"tag":606,"props":57246,"children":57247},{},[57248],{"type":603,"value":57249},"噢，对了，万一你想知道如何把圆投影到轴上，那你只用简单地把圆心投影上去，然后加上和减去半径就能得到投影长度了。",{"type":597,"tag":857,"props":57251,"children":57253},{"id":57252},"优点与不足",[57254],{"type":603,"value":57252},{"type":597,"tag":606,"props":57256,"children":57257},{},[57258],{"type":603,"value":57259},"和其他的碰撞检测技术一样，分离轴定理算法有它自己的优点和不足。以下是其一些优点和不足的简要概述：",{"type":597,"tag":598,"props":57261,"children":57262},{"id":48237},[57263],{"type":603,"value":48237},{"type":597,"tag":606,"props":57265,"children":57266},{},[57267],{"type":603,"value":57268},"（译者：原来老外也喜欢先谈优点啊～>～）",{"type":597,"tag":1321,"props":57270,"children":57271},{},[57272,57277],{"type":597,"tag":807,"props":57273,"children":57274},{},[57275],{"type":603,"value":57276},"分离轴定理算法十分得快——它完美地使用了基本的数学向量知识。只要间隙一旦被检测出来，那么你就能马上得出结果，消除不必要的运算。",{"type":597,"tag":807,"props":57278,"children":57279},{},[57280],{"type":603,"value":57281},"分离轴定理算法十分得准——至少据我所知是这样的。（译者：突然感觉作者好不靠谱啊，囧……）",{"type":597,"tag":598,"props":57283,"children":57285},{"id":57284},"不足",[57286],{"type":603,"value":57284},{"type":597,"tag":1321,"props":57288,"children":57289},{},[57290,57295],{"type":597,"tag":807,"props":57291,"children":57292},{},[57293],{"type":603,"value":57294},"分离轴定理算法只适用于凸多边形——复杂的图形（译者：指的是凹多边形，比如五角星）无法使用此方法，除非你把它们分成一些小的凸多边形，然后依次检验这些小的多边形。",{"type":597,"tag":807,"props":57296,"children":57297},{},[57298],{"type":603,"value":57299},"分离轴定理算法无法告诉你是那条边发生的碰撞——仅仅是告诉你重叠了多少和分开它们所需的最短距离。",{"type":597,"tag":606,"props":57301,"children":57302},{},[57303],{"type":603,"value":57304},"可能这个算法会有更多优点和不足之处，但是我想这应该是最主要的几个了。",{"type":597,"tag":857,"props":57306,"children":57307},{"id":1464},[57308],{"type":603,"value":1464},{"type":597,"tag":606,"props":57310,"children":57311},{},[57312],{"type":603,"value":57313},"我希望这篇文章能帮助你了解到分离轴定理算法。我已经尽可能地不提供过多的信息并讲解得十分简明了。（我绝不是数学方面的专家，所以如果我遗漏了什么，我深表歉意）",{"type":597,"tag":606,"props":57315,"children":57316},{},[57317],{"type":603,"value":57318},"以下是一些帮助我理解分离轴定理算法的页面：",{"type":597,"tag":1321,"props":57320,"children":57321},{},[57322,57334,57346,57358],{"type":597,"tag":807,"props":57323,"children":57324},{},[57325,57332],{"type":597,"tag":886,"props":57326,"children":57329},{"href":57327,"rel":57328},"http://www.harveycartel.org/metanet/tutorials/tutorialA.html",[890],[57330],{"type":603,"value":57331},"harverycartel.org",{"type":603,"value":57333},"——有更多详细的表述以及很多很酷的示例。我在这个页面上学到了很多。",{"type":597,"tag":807,"props":57335,"children":57336},{},[57337,57344],{"type":597,"tag":886,"props":57338,"children":57341},{"href":57339,"rel":57340},"http://gpwiki.org/index.php/VB:Tutorials:Building_A_Physics_Engine:Basic_Intersection_Detection",[890],[57342],{"type":603,"value":57343},"GPWiki.org",{"type":603,"value":57345},"——有不错的讲解和代码示例，我用这些代码作为编写自己代码的基础。",{"type":597,"tag":807,"props":57347,"children":57348},{},[57349,57356],{"type":597,"tag":886,"props":57350,"children":57353},{"href":57351,"rel":57352},"http://www.tonypa.pri.ee/vectors/index.html",[890],[57354],{"type":603,"value":57355},"Tony Pa",{"type":603,"value":57357},"——向量教程，学习向量的不错资源。",{"type":597,"tag":807,"props":57359,"children":57360},{},[57361,57368],{"type":597,"tag":886,"props":57362,"children":57365},{"href":57363,"rel":57364},"http://www.gamedev.net/community/forums/topic.asp?topic_id=251638",[890],[57366],{"type":603,"value":57367},"GameDev.net forum",{"type":603,"value":57369},"——一个论坛成员写的分离轴定理碰撞检测系统，带给了我一些计算方面的想法。",{"type":597,"tag":606,"props":57371,"children":57372},{},[57373,57378,57388,57393,57403],{"type":597,"tag":1080,"props":57374,"children":57375},{},[57376],{"type":603,"value":57377},"本文翻译自",{"type":597,"tag":886,"props":57379,"children":57382},{"href":57380,"rel":57381},"http://www.sevenson.com.au/",[890],[57383],{"type":597,"tag":1080,"props":57384,"children":57385},{},[57386],{"type":603,"value":57387},"@sevenson",{"type":597,"tag":1080,"props":57389,"children":57390},{},[57391],{"type":603,"value":57392},"的文章",{"type":597,"tag":886,"props":57394,"children":57397},{"href":57395,"rel":57396},"http://www.sevenson.com.au/actionscript/sat/",[890],[57398],{"type":597,"tag":1080,"props":57399,"children":57400},{},[57401],{"type":603,"value":57402},"Separating Axis Theorem (SAT) Explanation",{"type":603,"value":57404},"** 。**",{"type":597,"tag":621,"props":57406,"children":57408},{"code":57407},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class XRect{\n    private Vector2 _point0 = new Vector2();\n    private Vector2 _point1 = new Vector2();\n    private Vector2 _point2 = new Vector2();\n    private Vector2 _point3 = new Vector2();\n\n    public List\u003CVector2> _pointList = new List\u003CVector2>();\n\n    private float _min = 0;\n    private float _max = 0;\n\n\n    public void UpdatePoint(RectTransform RT)\n    {\n        float x = RT.localPosition.x;\n        float y = RT.localPosition.y;\n        float width = RT.sizeDelta.x;\n        float height = RT.sizeDelta.y;\n        float angle = RT.localRotation.eulerAngles.z;\n\n        Vector2 centerV = new Vector2(RT.localPosition.x, RT.localPosition.y);\n\n        _point0 = new Vector2(x - width / 2, y + height / 2);\n        _point0 = _Transform(_point0,angle,centerV);\n\n        _point1 = new Vector2(x + width / 2, y + height / 2);\n        _point1 = _Transform(_point1, angle, centerV);\n\n        _point2 = new Vector2(x + width / 2, y - height / 2);\n        _point2 = _Transform(_point2, angle, centerV);\n\n        _point3 = new Vector2(x - width / 2, y - height / 2);\n        _point3 = _Transform(_point3, angle, centerV);\n\n        _pointList.Clear();\n        _pointList.Add(_point0);\n        _pointList.Add(_point1);\n        _pointList.Add(_point2);\n        _pointList.Add(_point3);\n\n        Vector3[] temp = new Vector3[4];\n        RT.GetLocalCorners(temp);\n       \n    }\n\n    //获取投影轴\n    public Vector2 GetAxis(int index)\n    {\n        Vector2 v = _GetEdge(index);\n\n        Vector2 result = new Vector2();\n\n        result.x = v.y;\n        result.y = 0 - v.x;\n\n        return result;\n    }\n\n    public void ResetProjection(Vector2 axis)\n    {\n        if (axis.x == 0 && axis.y == 0)\n        {\n            Debug.LogError(\"投影轴数据错误！\");\n            return;\n        }\n        float projectionX;\n        Vector2 v;\n        for (int i = 0; i \u003C _pointList.Count; ++i)\n        {\n            v = _pointList[i];\n            if (axis.x == 0)\n            {\n                projectionX = v.y;\n            }\n            else if (axis.y == 0)\n            {\n                projectionX = v.x;\n            }\n            else\n            {\n                projectionX = (v.x - axis.x / axis.y * v.y) / (1 + Mathf.Pow(axis.x / axis.y, 2));\n            }\n\n\n            if (i == 0)\n            {\n                _min = projectionX;\n                _max = projectionX;\n            }\n            else\n            {\n                if (projectionX > _max)\n                {\n                    _max = projectionX;\n                }\n                if (projectionX \u003C _min)\n                {\n                    _min = projectionX;\n                }\n            }\n\n        } \n    }\n\n    public float GetMin()\n    {\n        return _min;\n    }\n\n    public float GetMax()\n    {\n        return _max;\n    }\n\n\n    //获取边向量\n    private Vector2 _GetEdge(int index)\n    {\n        Vector2 result = new Vector2();\n        switch (index)\n        {\n            case 0:\n                result = _point1 - _point0;\n                break;\n            case 1:\n                result = _point2 - _point1;\n                break;\n            case 2:\n                result = _point3 - _point2;\n                break;\n            case 3:\n                result = _point0 - _point3;\n                break;\n        }\n\n        return result;\n    }\n\n    private Vector2 _Transform(Vector2 v,float angle,Vector2 centerV)\n    {\n        Vector2 result = new Vector2();\n\n        float initX = v.x;\n        float initY = v.y;\n\n        //将顶点移动到原点四周\n        float centerPointX = initX - centerV.x;\n        float centerPointY = initY - centerV.y;\n\n        float r = angle * Mathf.Deg2Rad;\n\n        float a = Mathf.Cos(r);\n        float b = Mathf.Sin(r);\n\n        result.x = centerPointX * a + centerPointY * (-b) + centerV.x;\n        result.y = centerPointX * b + centerPointY * a + centerV.y;\n\n        return result;\n    }\n",[57409],{"type":597,"tag":629,"props":57410,"children":57411},{"__ignoreMap":591},[57412],{"type":603,"value":57407},{"type":597,"tag":621,"props":57414,"children":57416},{"code":57415},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class XCollisionHelper {\n\n    private static XCollisionHelper _instance;\n\n    public static XCollisionHelper GetInstance()\n    {\n        if (_instance  == null)\n        {\n            _instance = new XCollisionHelper();\n        }\n\n        return _instance;\n    }\n\n    public bool Check(XRect xRect1,XRect xRect2)\n    {\n        for (int i = 0; i \u003C4;++i)\n        {\n            Vector2 axis = xRect1.GetAxis(i);\n\n            //获取两个矩形在投影轴上的范围\n            xRect1.ResetProjection(axis);\n            xRect2.ResetProjection(axis);\n\n            if (xRect1.GetMin() > xRect2.GetMax() || xRect1.GetMax() \u003C xRect2.GetMin())\n            {\n                return false;\n            }\n        }\n\n        for (int i = 0; i \u003C 4; ++i)\n        {\n            Vector2 axis = xRect2.GetAxis(i);\n\n            xRect1.ResetProjection(axis);\n            xRect2.ResetProjection(axis);\n\n            if (xRect1.GetMin() > xRect2.GetMax() || xRect1.GetMax() \u003C xRect2.GetMin())\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    \n\n}\n",[57417],{"type":597,"tag":629,"props":57418,"children":57419},{"__ignoreMap":591},[57420],{"type":603,"value":57415},{"type":597,"tag":621,"props":57422,"children":57424},{"code":57423},"﻿using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\nusing UnityEngine.UI;\n\npublic class XRectItemCtrl : MonoBehaviour, IDragHandler\n{\n\n    public Image imgRect;\n    private XRect _xRect = new XRect();\n\n    public XRect GetXRect()\n    {\n        RectTransform RT = transform.GetComponent\u003CRectTransform>();\n        _xRect.UpdatePoint(RT);\n\n        if (transform.gameObject.name == \"Image0\")\n        {\n        }\n\n        return _xRect;\n    }\n\n    public void OnDrag(PointerEventData eventData)\n    {\n        RectTransform RT = transform.GetComponent\u003CRectTransform>();\n        RT.localPosition = new Vector2(RT.localPosition.x + eventData.delta.x, RT.localPosition.y + eventData.delta.y);\n    }\n}\n",[57425],{"type":597,"tag":629,"props":57426,"children":57427},{"__ignoreMap":591},[57428],{"type":603,"value":57423},{"type":597,"tag":857,"props":57430,"children":57432},{"id":57431},"其他的一些参考",[57433],{"type":603,"value":57431},{"type":597,"tag":1321,"props":57435,"children":57436},{},[57437,57440,57443,57446],{"type":597,"tag":807,"props":57438,"children":57439},{},[],{"type":597,"tag":807,"props":57441,"children":57442},{},[],{"type":597,"tag":807,"props":57444,"children":57445},{},[],{"type":597,"tag":807,"props":57447,"children":57448},{},[],{"title":591,"searchDepth":787,"depth":787,"links":57450},[57451,57452,57453,57454,57455,57456],{"id":56941,"depth":1530,"text":56941},{"id":56976,"depth":1530,"text":56976},{"id":56999,"depth":1530,"text":56999},{"id":57218,"depth":787,"text":57221},{"id":48237,"depth":787,"text":48237},{"id":57284,"depth":787,"text":57284},"content:unity:2020-01-13-unity-attack-detection.md","unity/2020-01-13-unity-attack-detection.md",{"_path":285,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":284,"description":57460,"body":57461,"_type":791,"_id":58070,"_source":793,"_file":58071,"_extension":795,"date":58072},"CentOS 7 开始默认使用Systemd作为开启启动脚本的管理工具，Shadowsocks则是当前比较受欢迎的科学上网工具，本文将介绍如何在 CentOS 下安装和配置 Shadowsocks 服务。",{"type":594,"children":57462,"toc":58056},[57463,57486,57492,57504,57509,57518,57522,57530,57536,57541,57550,57555,57568,57576,57581,57629,57634,57639,57647,57652,57660,57665,57673,57678,57683,57691,57696,57704,57715,57723,57728,57733,57741,57746,57754,57759,57763,57777,57785,57789,57794,57802,57807,57815,57820,57825,57830,57838,57843,57853,57864,57869,57920,57925,57937,57945,57950,57959,57964,57973,57978,57986,57990,57998,58017,58022,58031,58048],{"type":597,"tag":606,"props":57464,"children":57465},{},[57466,57468,57475,57477,57484],{"type":603,"value":57467},"CentOS 7 开始默认使用",{"type":597,"tag":886,"props":57469,"children":57472},{"href":57470,"rel":57471},"https://en.wikipedia.org/wiki/Systemd",[890],[57473],{"type":603,"value":57474},"Systemd",{"type":603,"value":57476},"作为开启启动脚本的管理工具，",{"type":597,"tag":886,"props":57478,"children":57481},{"href":57479,"rel":57480},"https://github.com/shadowsocks/",[890],[57482],{"type":603,"value":57483},"Shadowsocks",{"type":603,"value":57485},"则是当前比较受欢迎的科学上网工具，本文将介绍如何在 CentOS 下安装和配置 Shadowsocks 服务。",{"type":597,"tag":598,"props":57487,"children":57489},{"id":57488},"安装-pip",[57490],{"type":603,"value":57491},"安装 pip",{"type":597,"tag":606,"props":57493,"children":57494},{},[57495,57502],{"type":597,"tag":886,"props":57496,"children":57499},{"href":57497,"rel":57498},"https://pip.pypa.io/en/stable/installing/",[890],[57500],{"type":603,"value":57501},"pip",{"type":603,"value":57503},"是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。",{"type":597,"tag":606,"props":57505,"children":57506},{},[57507],{"type":603,"value":57508},"在控制台执行以下命令安装 pip：",{"type":597,"tag":621,"props":57510,"children":57513},{"code":57511,"language":25619,"meta":591,"className":57512},"curl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"\npython3 get-pip.py\n",[25621],[57514],{"type":597,"tag":629,"props":57515,"children":57516},{"__ignoreMap":591},[57517],{"type":603,"value":57511},{"type":597,"tag":606,"props":57519,"children":57520},{},[57521],{"type":603,"value":3320},{"type":597,"tag":621,"props":57523,"children":57525},{"code":57524},"sudo yum -y install epel-release\nsudo yum -y install python-pip\n",[57526],{"type":597,"tag":629,"props":57527,"children":57528},{"__ignoreMap":591},[57529],{"type":603,"value":57524},{"type":597,"tag":598,"props":57531,"children":57533},{"id":57532},"安装配置-shadowsocks",[57534],{"type":603,"value":57535},"安装配置 shadowsocks",{"type":597,"tag":606,"props":57537,"children":57538},{},[57539],{"type":603,"value":57540},"在控制台执行以下命令安装 shadowsocks：",{"type":597,"tag":621,"props":57542,"children":57545},{"code":57543,"language":25619,"meta":591,"className":57544},"pip install --upgrade pip\npip install shadowsocks\n",[25621],[57546],{"type":597,"tag":629,"props":57547,"children":57548},{"__ignoreMap":591},[57549],{"type":603,"value":57543},{"type":597,"tag":598,"props":57551,"children":57553},{"id":57552},"客户端",[57554],{"type":603,"value":57552},{"type":597,"tag":606,"props":57556,"children":57557},{},[57558,57560,57566],{"type":603,"value":57559},"需要创建配置文件",{"type":597,"tag":629,"props":57561,"children":57563},{"className":57562},[],[57564],{"type":603,"value":57565},"/etc/shadowsocks.json",{"type":603,"value":57567},"，内容如下：",{"type":597,"tag":621,"props":57569,"children":57571},{"code":57570},"{\n    \"server\":\"1.1.1.1\",\n    \"server_port\":1035,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"password\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false,\n    \"workers\": 1\n}\n",[57572],{"type":597,"tag":629,"props":57573,"children":57574},{"__ignoreMap":591},[57575],{"type":603,"value":57570},{"type":597,"tag":606,"props":57577,"children":57578},{},[57579],{"type":603,"value":57580},"配置说明：",{"type":597,"tag":803,"props":57582,"children":57583},{},[57584,57589,57594,57599,57604,57609,57614,57619,57624],{"type":597,"tag":807,"props":57585,"children":57586},{},[57587],{"type":603,"value":57588},"server：Shadowsocks服务器地址",{"type":597,"tag":807,"props":57590,"children":57591},{},[57592],{"type":603,"value":57593},"server_port：Shadowsocks服务器端口",{"type":597,"tag":807,"props":57595,"children":57596},{},[57597],{"type":603,"value":57598},"local_address：本地IP，本地使用的 sock5 代理 ip",{"type":597,"tag":807,"props":57600,"children":57601},{},[57602],{"type":603,"value":57603},"local_port：本地端口，本地使用的 sock5 代理端口",{"type":597,"tag":807,"props":57605,"children":57606},{},[57607],{"type":603,"value":57608},"password：Shadowsocks连接密码",{"type":597,"tag":807,"props":57610,"children":57611},{},[57612],{"type":603,"value":57613},"timeout：等待超时时间",{"type":597,"tag":807,"props":57615,"children":57616},{},[57617],{"type":603,"value":57618},"method：加密方式",{"type":597,"tag":807,"props":57620,"children":57621},{},[57622],{"type":603,"value":57623},"workers:工作线程数",{"type":597,"tag":807,"props":57625,"children":57626},{},[57627],{"type":603,"value":57628},"fast_open：true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+。开启方法 echo 3 > /proc/sys/net/ipv4/tcp_fastopen",{"type":597,"tag":606,"props":57630,"children":57631},{},[57632],{"type":603,"value":57633},"上述配置需要根据情况进行修改，接下来需要启动服务，就可以通过 local_address 和 local_port 来使用 sock5 代理，流量就可以走 ss 了",{"type":597,"tag":606,"props":57635,"children":57636},{},[57637],{"type":603,"value":57638},"配置启动脚本文件 /etc/systemd/system/shadowsocks.service",{"type":597,"tag":621,"props":57640,"children":57642},{"code":57641},"[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json\n\n[Install]\nWantedBy=multi-user.target\n",[57643],{"type":597,"tag":629,"props":57644,"children":57645},{"__ignoreMap":591},[57646],{"type":603,"value":57641},{"type":597,"tag":606,"props":57648,"children":57649},{},[57650],{"type":603,"value":57651},"启用启动脚本，启动 ss 服务",{"type":597,"tag":621,"props":57653,"children":57655},{"code":57654},"# 配置服务开机启动\nsudo systemctl enable shadowsocks.service\n# 启动服务\nsudo systemctl start shadowsocks.service\n# 查看服务状态\nsudo systemctl status shadowsocks.service\n",[57656],{"type":597,"tag":629,"props":57657,"children":57658},{"__ignoreMap":591},[57659],{"type":603,"value":57654},{"type":597,"tag":606,"props":57661,"children":57662},{},[57663],{"type":603,"value":57664},"验证安装",{"type":597,"tag":621,"props":57666,"children":57668},{"code":57667},"$ curl --socks5 127.0.0.1:1080 http://httpbin.org/ip\n{\"origin\":\"x.x.x.x\"}\n",[57669],{"type":597,"tag":629,"props":57670,"children":57671},{"__ignoreMap":591},[57672],{"type":603,"value":57667},{"type":597,"tag":606,"props":57674,"children":57675},{},[57676],{"type":603,"value":57677},"至此就完成了 ss 客户端的安装配置。",{"type":597,"tag":1023,"props":57679,"children":57681},{"id":57680},"前台运行",[57682],{"type":603,"value":57680},{"type":597,"tag":621,"props":57684,"children":57686},{"code":57685},"sslocal -c /etc/shadowsocks.json\n",[57687],{"type":597,"tag":629,"props":57688,"children":57689},{"__ignoreMap":591},[57690],{"type":603,"value":57685},{"type":597,"tag":1023,"props":57692,"children":57694},{"id":57693},"后台运行",[57695],{"type":603,"value":57693},{"type":597,"tag":621,"props":57697,"children":57699},{"code":57698},"sslocal -c /etc/shadowsocks.json -d start\nsslocal -c /etc/shadowsocks.json -d stop\n",[57700],{"type":597,"tag":629,"props":57701,"children":57702},{"__ignoreMap":591},[57703],{"type":603,"value":57698},{"type":597,"tag":598,"props":57705,"children":57707},{"id":57706},"method-aes-256-gcm-not-supported方法",[57708,57714],{"type":597,"tag":629,"props":57709,"children":57711},{"className":57710},[],[57712],{"type":603,"value":57713},"method aes-256-gcm not supported",{"type":603,"value":35834},{"type":597,"tag":621,"props":57716,"children":57718},{"code":57717},"pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U\napt-get install build-essential\nwget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz\ntar xf LATEST.tar.gz && cd libsodium-*.*.*\n./configure && make -j4 && make install\nldconfig\n",[57719],{"type":597,"tag":629,"props":57720,"children":57721},{"__ignoreMap":591},[57722],{"type":603,"value":57717},{"type":597,"tag":857,"props":57724,"children":57726},{"id":57725},"proxychains",[57727],{"type":603,"value":57725},{"type":597,"tag":606,"props":57729,"children":57730},{},[57731],{"type":603,"value":57732},"proxychains 的官方介绍：",{"type":597,"tag":617,"props":57734,"children":57735},{},[57736],{"type":597,"tag":606,"props":57737,"children":57738},{},[57739],{"type":603,"value":57740},"proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies.",{"type":597,"tag":606,"props":57742,"children":57743},{},[57744],{"type":603,"value":57745},"proxychains 是一种访问代理的方式，用法如下：",{"type":597,"tag":621,"props":57747,"children":57749},{"code":57748},"proxychains4 curl http://httpbin.org/ip\n",[57750],{"type":597,"tag":629,"props":57751,"children":57752},{"__ignoreMap":591},[57753],{"type":603,"value":57748},{"type":597,"tag":606,"props":57755,"children":57756},{},[57757],{"type":603,"value":57758},"这样可以使得 curl 走代理来访问网络。",{"type":597,"tag":598,"props":57760,"children":57761},{"id":11979},[57762],{"type":603,"value":11979},{"type":597,"tag":606,"props":57764,"children":57765},{},[57766,57768,57775],{"type":603,"value":57767},"首先去 ",{"type":597,"tag":886,"props":57769,"children":57772},{"href":57770,"rel":57771},"https://github.com/rofl0r/proxychains-ng",[890],[57773],{"type":603,"value":57774},"proxychains 官网",{"type":603,"value":57776}," 下载代码进行编译安装，常规的 configure && make 方式，没啥特别之处。",{"type":597,"tag":621,"props":57778,"children":57780},{"code":57779},"./configure\n\nmake -j\n\nsudo make install\n",[57781],{"type":597,"tag":629,"props":57782,"children":57783},{"__ignoreMap":591},[57784],{"type":603,"value":57779},{"type":597,"tag":598,"props":57786,"children":57787},{"id":12032},[57788],{"type":603,"value":12032},{"type":597,"tag":606,"props":57790,"children":57791},{},[57792],{"type":603,"value":57793},"创建配置文件",{"type":597,"tag":621,"props":57795,"children":57797},{"code":57796},"mkdir -p ~/.proxychains\nvi ~/.proxychains/proxychains.conf\n",[57798],{"type":597,"tag":629,"props":57799,"children":57800},{"__ignoreMap":591},[57801],{"type":603,"value":57796},{"type":597,"tag":606,"props":57803,"children":57804},{},[57805],{"type":603,"value":57806},"proxychains.conf 配置如下：",{"type":597,"tag":621,"props":57808,"children":57810},{"code":57809},"strict_chain\nproxy_dns\nremote_dns_subnet 224\ntcp_read_time_out 15000\ntcp_connect_time_out 8000\nlocalnet 127.0.0.0/255.0.0.0\nquiet_mode\n\n[ProxyList]\nsocks5  127.0.0.1 1080\n",[57811],{"type":597,"tag":629,"props":57812,"children":57813},{"__ignoreMap":591},[57814],{"type":603,"value":57809},{"type":597,"tag":606,"props":57816,"children":57817},{},[57818],{"type":603,"value":57819},"ProxyList 的配置要与上面的 ss 配置一致，即可通过代理访问网络，使用起来还是很方便的。",{"type":597,"tag":598,"props":57821,"children":57823},{"id":57822},"用法",[57824],{"type":603,"value":57822},{"type":597,"tag":606,"props":57826,"children":57827},{},[57828],{"type":603,"value":57829},"proxychains 可以通过启动一个 bash 来使得当前终端全局走代理",{"type":597,"tag":621,"props":57831,"children":57833},{"code":57832},"proxychains4 bash\n",[57834],{"type":597,"tag":629,"props":57835,"children":57836},{"__ignoreMap":591},[57837],{"type":603,"value":57832},{"type":597,"tag":598,"props":57839,"children":57841},{"id":57840},"服务端",[57842],{"type":603,"value":57840},{"type":597,"tag":606,"props":57844,"children":57845},{},[57846,57847,57852],{"type":603,"value":57559},{"type":597,"tag":629,"props":57848,"children":57850},{"className":57849},[],[57851],{"type":603,"value":57565},{"type":603,"value":57567},{"type":597,"tag":621,"props":57854,"children":57859},{"code":57855,"language":57856,"meta":591,"className":57857},"{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 8388,\n  \"password\": \"uzon57jd0v869t7w\",\n  \"method\": \"aes-256-cfb\"\n}\n","json",[57858],"language-json",[57860],{"type":597,"tag":629,"props":57861,"children":57862},{"__ignoreMap":591},[57863],{"type":603,"value":57855},{"type":597,"tag":606,"props":57865,"children":57866},{},[57867],{"type":603,"value":57868},"说明：",{"type":597,"tag":1321,"props":57870,"children":57871},{},[57872,57889,57900],{"type":597,"tag":807,"props":57873,"children":57874},{},[57875,57881,57883],{"type":597,"tag":629,"props":57876,"children":57878},{"className":57877},[],[57879],{"type":603,"value":57880},"method",{"type":603,"value":57882},"为加密方法，可选",{"type":597,"tag":629,"props":57884,"children":57886},{"className":57885},[],[57887],{"type":603,"value":57888},"aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, table",{"type":597,"tag":807,"props":57890,"children":57891},{},[57892,57898],{"type":597,"tag":629,"props":57893,"children":57895},{"className":57894},[],[57896],{"type":603,"value":57897},"server_port",{"type":603,"value":57899},"为服务监听端口",{"type":597,"tag":807,"props":57901,"children":57902},{},[57903,57909,57911,57918],{"type":597,"tag":629,"props":57904,"children":57906},{"className":57905},[],[57907],{"type":603,"value":57908},"password",{"type":603,"value":57910},"为密码，可使用",{"type":597,"tag":886,"props":57912,"children":57915},{"href":57913,"rel":57914},"http://ucdok.com/project/generate_password.html",[890],[57916],{"type":603,"value":57917},"密码生成工具",{"type":603,"value":57919},"生成一个随机密码",{"type":597,"tag":606,"props":57921,"children":57922},{},[57923],{"type":603,"value":57924},"以上三项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。",{"type":597,"tag":606,"props":57926,"children":57927},{},[57928,57930,57936],{"type":603,"value":57929},"新建启动脚本文件",{"type":597,"tag":629,"props":57931,"children":57933},{"className":57932},[],[57934],{"type":603,"value":57935},"/etc/systemd/system/shadowsocks.service",{"type":603,"value":57567},{"type":597,"tag":621,"props":57938,"children":57940},{"code":57939},"[Unit]\nDescription=Shadowsocks\nAfter=network.target auditd.service\n\n[Service]\nType=forking\nTimeoutStartSec=0\nExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks.json --pid-file /var/run/shadowsocks.pid -d start\nExecStop=/usr/local/bin/ssserver -c /etc/shadowsocks.json  --pid-file /var/run/shadowsocks.pid -d stop\nPIDFile=/var/run/shadowsocks.pid\nRestart=always\nRestartSec=4\n\n\n[Install]\nWantedBy=multi-user.target\n",[57941],{"type":597,"tag":629,"props":57942,"children":57943},{"__ignoreMap":591},[57944],{"type":603,"value":57939},{"type":597,"tag":606,"props":57946,"children":57947},{},[57948],{"type":603,"value":57949},"执行以下命令启动 shadowsocks 服务：",{"type":597,"tag":621,"props":57951,"children":57954},{"code":57952,"language":25619,"meta":591,"className":57953},"systemctl enable shadowsocks\nsystemctl start shadowsocks\n",[25621],[57955],{"type":597,"tag":629,"props":57956,"children":57957},{"__ignoreMap":591},[57958],{"type":603,"value":57952},{"type":597,"tag":606,"props":57960,"children":57961},{},[57962],{"type":603,"value":57963},"为了检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：",{"type":597,"tag":621,"props":57965,"children":57968},{"code":57966,"language":25619,"meta":591,"className":57967},"systemctl status shadowsocks -l\n",[25621],[57969],{"type":597,"tag":629,"props":57970,"children":57971},{"__ignoreMap":591},[57972],{"type":603,"value":57966},{"type":597,"tag":606,"props":57974,"children":57975},{},[57976],{"type":603,"value":57977},"如果服务启动成功，则控制台显示的信息可能类似这样：",{"type":597,"tag":621,"props":57979,"children":57981},{"code":57980},"● shadowsocks.service - Shadowsocks\n   Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: disabled)\n   Active: active (running) since Mon 2015-12-21 23:51:48 CST; 11min ago\n Main PID: 19334 (ssserver)\n   CGroup: /system.slice/shadowsocks.service\n           └─19334 /usr/bin/python /usr/bin/ssserver -c /etc/shadowsocks.json\n\nDec 21 23:51:48 morning.work systemd[1]: Started Shadowsocks.\nDec 21 23:51:48 morning.work systemd[1]: Starting Shadowsocks...\nDec 21 23:51:48 morning.work ssserver[19334]: INFO: loading config from /etc/shadowsocks.json\nDec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     loading libcrypto from libcrypto.so.10\nDec 21 23:51:48 morning.work ssserver[19334]: 2015-12-21 23:51:48 INFO     starting server at 0.0.0.0:8388\n",[57982],{"type":597,"tag":629,"props":57983,"children":57984},{"__ignoreMap":591},[57985],{"type":603,"value":57980},{"type":597,"tag":857,"props":57987,"children":57988},{"id":39116},[57989],{"type":603,"value":39116},{"type":597,"tag":621,"props":57991,"children":57993},{"code":57992},"AttributeError: /lib64/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup\n",[57994],{"type":597,"tag":629,"props":57995,"children":57996},{"__ignoreMap":591},[57997],{"type":603,"value":57992},{"type":597,"tag":606,"props":57999,"children":58000},{},[58001,58003,58009,58011],{"type":603,"value":58002},"以前在openssl，有",{"type":597,"tag":629,"props":58004,"children":58006},{"className":58005},[],[58007],{"type":603,"value":58008},"EVP_CIPHER_CTX_cleanup",{"type":603,"value":58010},"函数.1.1.0版本中替换成为",{"type":597,"tag":629,"props":58012,"children":58014},{"className":58013},[],[58015],{"type":603,"value":58016},"EVP_CIPHER_CTX_reset",{"type":597,"tag":606,"props":58018,"children":58019},{},[58020],{"type":603,"value":58021},"解决办法：找到报错的文件(注意:根据你的python版本修改,看报错信息中使用的openssl文件)",{"type":597,"tag":606,"props":58023,"children":58024},{},[58025],{"type":597,"tag":629,"props":58026,"children":58028},{"className":58027},[],[58029],{"type":603,"value":58030},"vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py",{"type":597,"tag":606,"props":58032,"children":58033},{},[58034,58036,58041,58043],{"type":603,"value":58035},"全文搜索cleanup将所有",{"type":597,"tag":629,"props":58037,"children":58039},{"className":58038},[],[58040],{"type":603,"value":58008},{"type":603,"value":58042},"替换成为",{"type":597,"tag":629,"props":58044,"children":58046},{"className":58045},[],[58047],{"type":603,"value":58016},{"type":597,"tag":621,"props":58049,"children":58051},{"code":58050},":%s/cleanup/reset/\n\n:x\n",[58052],{"type":597,"tag":629,"props":58053,"children":58054},{"__ignoreMap":591},[58055],{"type":603,"value":58050},{"title":591,"searchDepth":787,"depth":787,"links":58057},[58058,58059,58060,58064,58066,58067,58068,58069],{"id":57488,"depth":787,"text":57491},{"id":57532,"depth":787,"text":57535},{"id":57552,"depth":787,"text":57552,"children":58061},[58062,58063],{"id":57680,"depth":1530,"text":57680},{"id":57693,"depth":1530,"text":57693},{"id":57706,"depth":787,"text":58065},"method aes-256-gcm not supported方法",{"id":11979,"depth":787,"text":11979},{"id":12032,"depth":787,"text":12032},{"id":57822,"depth":787,"text":57822},{"id":57840,"depth":787,"text":57840},"content:tool:2020-01-12-centosn-ss-install.md","tool/2020-01-12-centosn-ss-install.md","2020-01-12",{"_path":427,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":426,"description":58074,"body":58075,"_type":791,"_id":59575,"_source":793,"_file":59576,"_extension":795,"date":58072},"“碰乜鬼嘢啊，碰走晒我滴靓牌”。想到“碰”就自然联想到了“麻将”这一伟大发明。当然除了“碰”，洗牌的时候也充满了各种『碰撞』。",{"type":594,"children":58076,"toc":59557},[58077,58081,58086,58091,58150,58155,58160,58172,58180,58193,58198,58202,58208,58213,58218,58226,58236,58241,58246,58264,58269,58277,58283,58288,58298,58303,58311,58321,58326,58330,58338,58342,58350,58355,58360,58365,58373,58378,58404,58428,58452,58457,58476,58495,58513,58518,58526,58530,58534,58542,58548,58553,58558,58566,58571,58579,58584,58589,58597,58664,58669,58674,58679,58684,58689,58694,58702,58706,58710,58715,58731,58736,58744,58748,58752,58760,58764,58772,58776,58781,58786,58807,58812,58833,58860,58872,58880,58885,58889,58897,58901,58909,58915,58920,58941,58950,58955,58960,58980,58984,58988,58996,59000,59008,59012,59020,59026,59039,59047,59065,59073,59078,59086,59091,59109,59113,59131,59140,59147,59155,59160,59168,59178,59183,59188,59193,59204,59229,59234,59242,59266,59273,59281,59286,59291,59299,59304,59309,59314,59318,59326,59330,59338,59342,59350,59355,59407,59413,59418,59426,59431,59436,59442,59447,59452,59458,59463,59468,59473,59478,59483,59536],{"type":597,"tag":606,"props":58078,"children":58079},{},[58080],{"type":603,"value":58074},{"type":597,"tag":606,"props":58082,"children":58083},{},[58084],{"type":603,"value":58085},"好了，不废话。直入主题——碰撞检测。",{"type":597,"tag":606,"props":58087,"children":58088},{},[58089],{"type":603,"value":58090},"在 2D 环境下，常见的碰撞检测方法如下：",{"type":597,"tag":1321,"props":58092,"children":58093},{},[58094,58122,58127,58132],{"type":597,"tag":807,"props":58095,"children":58096},{},[58097,58099],{"type":603,"value":58098},"外接图形判别法",{"type":597,"tag":1321,"props":58100,"children":58101},{},[58102,58107,58112,58117],{"type":597,"tag":807,"props":58103,"children":58104},{},[58105],{"type":603,"value":58106},"轴对称包围盒（Axis-Aligned Bounding Box），即无旋转矩形。",{"type":597,"tag":807,"props":58108,"children":58109},{},[58110],{"type":603,"value":58111},"圆形碰撞",{"type":597,"tag":807,"props":58113,"children":58114},{},[58115],{"type":603,"value":58116},"圆形与矩形（无旋转）",{"type":597,"tag":807,"props":58118,"children":58119},{},[58120],{"type":603,"value":58121},"圆形与旋转矩形（以矩形中心点为旋转轴）",{"type":597,"tag":807,"props":58123,"children":58124},{},[58125],{"type":603,"value":58126},"光线投射法",{"type":597,"tag":807,"props":58128,"children":58129},{},[58130],{"type":603,"value":58131},"分离轴定理",{"type":597,"tag":807,"props":58133,"children":58134},{},[58135,58137],{"type":603,"value":58136},"其他",{"type":597,"tag":1321,"props":58138,"children":58139},{},[58140,58145],{"type":597,"tag":807,"props":58141,"children":58142},{},[58143],{"type":603,"value":58144},"地图格子划分",{"type":597,"tag":807,"props":58146,"children":58147},{},[58148],{"type":603,"value":58149},"像素检测",{"type":597,"tag":606,"props":58151,"children":58152},{},[58153],{"type":603,"value":58154},"下文将由易到难的顺序介绍上述各种碰撞检测方法：外接图形判别法 > 其他 > 光线投射法 > 分离轴定理。",{"type":597,"tag":606,"props":58156,"children":58157},{},[58158],{"type":603,"value":58159},"另外，有一些场景只要我们约定好限定条件，也能实现我们想要的碰撞，如下面的碰壁反弹：",{"type":597,"tag":606,"props":58161,"children":58162},{},[58163,58165,58171],{"type":603,"value":58164},"当球碰到边框就反弹(如",{"type":597,"tag":629,"props":58166,"children":58168},{"className":58167},[],[58169],{"type":603,"value":58170},"x/y轴方向速度取反",{"type":603,"value":25178},{"type":597,"tag":621,"props":58173,"children":58175},{"code":58174},"if(ball.left \u003C 0 || ball.right  > rect.width)  ball.velocityX = -ball.velocityX\nif(ball.top  \u003C 0 || ball.bottom > rect.height) ball.velocityY = -ball.velocityY\n",[58176],{"type":597,"tag":629,"props":58177,"children":58178},{"__ignoreMap":591},[58179],{"type":603,"value":58174},{"type":597,"tag":606,"props":58181,"children":58182},{},[58183,58185,58191],{"type":603,"value":58184},"再例如当一个人走到 ",{"type":597,"tag":629,"props":58186,"children":58188},{"className":58187},[],[58189],{"type":603,"value":58190},"100px",{"type":603,"value":58192}," 位置时不进行跳跃，就会碰到石头等等。",{"type":597,"tag":606,"props":58194,"children":58195},{},[58196],{"type":603,"value":58197},"因此，某些场景只需通过设定到适当的参数即可实现碰撞检测。",{"type":597,"tag":598,"props":58199,"children":58200},{"id":58098},[58201],{"type":603,"value":58098},{"type":597,"tag":1023,"props":58203,"children":58205},{"id":58204},"轴对称包围盒axis-aligned-bounding-box",[58206],{"type":603,"value":58207},"轴对称包围盒（Axis-Aligned Bounding Box）",{"type":597,"tag":606,"props":58209,"children":58210},{},[58211],{"type":603,"value":58212},"概念：判断任意两个（无旋转）矩形的任意一边是否无间距，从而判断是否碰撞。",{"type":597,"tag":606,"props":58214,"children":58215},{},[58216],{"type":603,"value":58217},"算法：",{"type":597,"tag":621,"props":58219,"children":58221},{"code":58220},"rect1.x \u003C rect2.x + rect2.width &&\nrect1.x + rect1.width > rect2.x &&\nrect1.y \u003C rect2.y + rect2.height &&\nrect1.height + rect1.y > rect2.y\n",[58222],{"type":597,"tag":629,"props":58223,"children":58224},{"__ignoreMap":591},[58225],{"type":603,"value":58220},{"type":597,"tag":606,"props":58227,"children":58228},{},[58229,58231],{"type":603,"value":58230},"两矩形间碰撞的各种情况：\n",{"type":597,"tag":719,"props":58232,"children":58235},{"alt":58233,"src":58234},"轴对称包围盒","/images/2020-01-12-Collision-detection/rectangle_collision.png",[],{"type":597,"tag":606,"props":58237,"children":58238},{},[58239],{"type":603,"value":58240},"在线运行示例（先点击运行示例以获取焦点，下同）：",{"type":597,"tag":606,"props":58242,"children":58243},{},[58244],{"type":603,"value":58245},"缺点：",{"type":597,"tag":1321,"props":58247,"children":58248},{},[58249,58254,58259],{"type":597,"tag":807,"props":58250,"children":58251},{},[58252],{"type":603,"value":58253},"相对局限：两物体必须是矩形，且均不允许旋转（即关于水平和垂直方向上对称）。",{"type":597,"tag":807,"props":58255,"children":58256},{},[58257],{"type":603,"value":58258},"对于包含着图案（非填满整个矩形）的矩形进行碰撞检测，可能存在精度不足的问题。",{"type":597,"tag":807,"props":58260,"children":58261},{},[58262],{"type":603,"value":58263},"物体运动速度过快时，可能会在相邻两动画帧之间快速穿越，导致忽略了本应碰撞的事件发生。",{"type":597,"tag":606,"props":58265,"children":58266},{},[58267],{"type":603,"value":58268},"适用案例：",{"type":597,"tag":1321,"props":58270,"children":58271},{},[58272],{"type":597,"tag":807,"props":58273,"children":58274},{},[58275],{"type":603,"value":58276},"（类）矩形物体间的碰撞。",{"type":597,"tag":1023,"props":58278,"children":58280},{"id":58279},"圆形碰撞circle-collision",[58281],{"type":603,"value":58282},"圆形碰撞（Circle Collision）",{"type":597,"tag":606,"props":58284,"children":58285},{},[58286],{"type":603,"value":58287},"概念：通过判断任意两个圆形的圆心距离是否小于两圆半径之和，若小于则为碰撞。",{"type":597,"tag":606,"props":58289,"children":58290},{},[58291,58293],{"type":603,"value":58292},"两点之间的距离由以下公式可得：\n",{"type":597,"tag":719,"props":58294,"children":58297},{"alt":58295,"src":58296},"两点之间距离","/images/2020-01-12-Collision-detection/two_point_distance.png",[],{"type":597,"tag":606,"props":58299,"children":58300},{},[58301],{"type":603,"value":58302},"判断两圆心距离是否小于两半径之和：",{"type":597,"tag":621,"props":58304,"children":58306},{"code":58305},"Math.sqrt(Math.pow(circleA.x - circleB.x, 2) +\n          Math.pow(circleA.y - circleB.y, 2)) \n    \u003C circleA.radius + circleB.radius\n",[58307],{"type":597,"tag":629,"props":58308,"children":58309},{"__ignoreMap":591},[58310],{"type":603,"value":58305},{"type":597,"tag":606,"props":58312,"children":58313},{},[58314,58316],{"type":603,"value":58315},"图例：\n",{"type":597,"tag":719,"props":58317,"children":58320},{"alt":58318,"src":58319},"圆形间的碰撞检测","/images/2020-01-12-Collision-detection/circle_collision.png",[],{"type":597,"tag":606,"props":58322,"children":58323},{},[58324],{"type":603,"value":58325},"在线运行示例：",{"type":597,"tag":606,"props":58327,"children":58328},{},[58329],{"type":603,"value":58245},{"type":597,"tag":1321,"props":58331,"children":58332},{},[58333],{"type":597,"tag":807,"props":58334,"children":58335},{},[58336],{"type":603,"value":58337},"与『轴对称包围盒』类似",{"type":597,"tag":606,"props":58339,"children":58340},{},[58341],{"type":603,"value":58268},{"type":597,"tag":1321,"props":58343,"children":58344},{},[58345],{"type":597,"tag":807,"props":58346,"children":58347},{},[58348],{"type":603,"value":58349},"（类）圆形的物体，如各种球类碰撞。",{"type":597,"tag":1023,"props":58351,"children":58353},{"id":58352},"圆形与矩形无旋转",[58354],{"type":603,"value":58116},{"type":597,"tag":606,"props":58356,"children":58357},{},[58358],{"type":603,"value":58359},"概念：通过找出矩形上离圆心最近的点，然后通过判断该点与圆心的距离是否小于圆的半径，若小于则为碰撞。",{"type":597,"tag":606,"props":58361,"children":58362},{},[58363],{"type":603,"value":58364},"那如何找出矩形上离圆心最近的点呢？下面我们从 x 轴、y 轴两个方向分别进行寻找。为了方便描述，我们先约定以下变量：",{"type":597,"tag":621,"props":58366,"children":58368},{"code":58367},"矩形上离圆心最近的点为变量：closestPoint = {x, y};\n矩形 rect = {x, y, w, h}; // 左上角与宽高\n圆形 circle = {x, y, r}; // 圆心与半径\n",[58369],{"type":597,"tag":629,"props":58370,"children":58371},{"__ignoreMap":591},[58372],{"type":603,"value":58367},{"type":597,"tag":606,"props":58374,"children":58375},{},[58376],{"type":603,"value":58377},"首先是 x 轴：",{"type":597,"tag":606,"props":58379,"children":58380},{},[58381,58383,58389,58391,58397,58399],{"type":603,"value":58382},"如果圆心在矩形的左侧（",{"type":597,"tag":629,"props":58384,"children":58386},{"className":58385},[],[58387],{"type":603,"value":58388},"if(circle.x \u003C rect.x)",{"type":603,"value":58390},"），那么 ",{"type":597,"tag":629,"props":58392,"children":58394},{"className":58393},[],[58395],{"type":603,"value":58396},"closestPoint.x = rect.x",{"type":603,"value":58398},"。\n",{"type":597,"tag":719,"props":58400,"children":58403},{"alt":58401,"src":58402},"圆心在矩形的左侧","/images/2020-01-12-Collision-detection/cicle_rectangle_left.png",[],{"type":597,"tag":606,"props":58405,"children":58406},{},[58407,58409,58415,58416,58422,58423],{"type":603,"value":58408},"如果圆心在矩形的右侧（",{"type":597,"tag":629,"props":58410,"children":58412},{"className":58411},[],[58413],{"type":603,"value":58414},"else if(circle.x > rect.x + rect.w)",{"type":603,"value":58390},{"type":597,"tag":629,"props":58417,"children":58419},{"className":58418},[],[58420],{"type":603,"value":58421},"closestPoint.x = rect.x + rect.w",{"type":603,"value":58398},{"type":597,"tag":719,"props":58424,"children":58427},{"alt":58425,"src":58426},"圆心在矩形的右侧","/images/2020-01-12-Collision-detection/circle_rectangle_right.png",[],{"type":597,"tag":606,"props":58429,"children":58430},{},[58431,58433,58439,58440,58446,58447],{"type":603,"value":58432},"如果圆心在矩形的正上下方（",{"type":597,"tag":629,"props":58434,"children":58436},{"className":58435},[],[58437],{"type":603,"value":58438},"else",{"type":603,"value":58390},{"type":597,"tag":629,"props":58441,"children":58443},{"className":58442},[],[58444],{"type":603,"value":58445},"closestPoint.x = circle.x",{"type":603,"value":58398},{"type":597,"tag":719,"props":58448,"children":58451},{"alt":58449,"src":58450},"圆心在矩形的正上下方","/images/2020-01-12-Collision-detection/circle_rectangle_center.png",[],{"type":597,"tag":606,"props":58453,"children":58454},{},[58455],{"type":603,"value":58456},"同理，对于 y 轴（此处不列举图例）：",{"type":597,"tag":606,"props":58458,"children":58459},{},[58460,58462,58468,58469,58475],{"type":603,"value":58461},"如果圆心在矩形的上方（",{"type":597,"tag":629,"props":58463,"children":58465},{"className":58464},[],[58466],{"type":603,"value":58467},"if(circle.y \u003C rect.y)",{"type":603,"value":58390},{"type":597,"tag":629,"props":58470,"children":58472},{"className":58471},[],[58473],{"type":603,"value":58474},"closestPoint.y = rect.y",{"type":603,"value":758},{"type":597,"tag":606,"props":58477,"children":58478},{},[58479,58481,58487,58488,58494],{"type":603,"value":58480},"如果圆心在矩形的下方（",{"type":597,"tag":629,"props":58482,"children":58484},{"className":58483},[],[58485],{"type":603,"value":58486},"else if(circle.y > rect.y + rect.h)",{"type":603,"value":58390},{"type":597,"tag":629,"props":58489,"children":58491},{"className":58490},[],[58492],{"type":603,"value":58493},"closestPoint.y = rect.y + rect.h",{"type":603,"value":758},{"type":597,"tag":606,"props":58496,"children":58497},{},[58498,58500,58505,58506,58512],{"type":603,"value":58499},"如果圆心在矩形的正左右两侧（",{"type":597,"tag":629,"props":58501,"children":58503},{"className":58502},[],[58504],{"type":603,"value":58438},{"type":603,"value":58390},{"type":597,"tag":629,"props":58507,"children":58509},{"className":58508},[],[58510],{"type":603,"value":58511},"closestPoint.y = circle.y",{"type":603,"value":758},{"type":597,"tag":606,"props":58514,"children":58515},{},[58516],{"type":603,"value":58517},"因此，通过上述方法即可找出矩形上离圆心最近的点了，然后通过『两点之间的距离公式』得出『最近点』与『圆心』的距离，最后将其与圆的半径相比，即可判断是否发生碰撞。",{"type":597,"tag":621,"props":58519,"children":58521},{"code":58520},"var distance = Math.sqrt(Math.pow(closestPoint.x - circle.x, 2) + Math.pow(closestPoint.y - circle.y, 2))\n\nif(distance \u003C circle.r) return true // 发生碰撞\nelse return false // 未发生碰撞\n",[58522],{"type":597,"tag":629,"props":58523,"children":58524},{"__ignoreMap":591},[58525],{"type":603,"value":58520},{"type":597,"tag":606,"props":58527,"children":58528},{},[58529],{"type":603,"value":58325},{"type":597,"tag":606,"props":58531,"children":58532},{},[58533],{"type":603,"value":58245},{"type":597,"tag":1321,"props":58535,"children":58536},{},[58537],{"type":597,"tag":807,"props":58538,"children":58539},{},[58540],{"type":603,"value":58541},"矩形需是轴对称的，即不能旋转。",{"type":597,"tag":1023,"props":58543,"children":58545},{"id":58544},"圆形与旋转矩形以矩形中心为旋转轴",[58546],{"type":603,"value":58547},"圆形与旋转矩形（以矩形中心为旋转轴）",{"type":597,"tag":606,"props":58549,"children":58550},{},[58551],{"type":603,"value":58552},"概念：即使矩形以其中心为旋转轴进行了旋转，但是判断它与圆形是否发生碰撞的本质还是找出矩形上离圆心的最近点。",{"type":597,"tag":606,"props":58554,"children":58555},{},[58556],{"type":603,"value":58557},"对于旋转后的矩形，要找出其离圆心最近的点，视乎有些困难。其实，我们可以将我们思想的范围进行扩大：将矩形的旋转看作是整个画布的旋转。那么我们将画布（即 Canvas）反向旋转『矩形旋转的角度』后，所看到的结果就是上一个方法“圆形与矩形（无旋转）”的情形。因此，我们只需求出画布旋转后的圆心位置，即可使用『圆形与矩形（无旋转）』的判断方法了。",{"type":597,"tag":606,"props":58559,"children":58560},{},[58561],{"type":597,"tag":719,"props":58562,"children":58565},{"alt":58563,"src":58564},"绕矩形中心旋转后的画布","/images/2020-01-12-Collision-detection/circle_and_rotated_rect.png",[],{"type":597,"tag":606,"props":58567,"children":58568},{},[58569],{"type":603,"value":58570},"先给出可直接套用的公式，从而得出旋转后的圆心坐标：",{"type":597,"tag":621,"props":58572,"children":58574},{"code":58573},"x’ = cos(β) * (cx – centerX) – sin(β) * (cy – centerY) + centerX\ny’ = sin(β) * (cx – centerX) + cos(β) * (cy – centerY) + centerY\n",[58575],{"type":597,"tag":629,"props":58576,"children":58577},{"__ignoreMap":591},[58578],{"type":603,"value":58573},{"type":597,"tag":606,"props":58580,"children":58581},{},[58582],{"type":603,"value":58583},"下面给出该公式的推导过程：",{"type":597,"tag":606,"props":58585,"children":58586},{},[58587],{"type":603,"value":58588},"根据下图，计算某个点绕另外一个点旋转一定角度后的坐标。我们设 A(x,y) 绕 B(a,b) 旋转 β 度后的位置为 C(c,d)。",{"type":597,"tag":606,"props":58590,"children":58591},{},[58592],{"type":597,"tag":719,"props":58593,"children":58596},{"alt":58594,"src":58595},"某个点绕另外一个点旋转一定角度后的坐标的公式推导","/images/2020-01-12-Collision-detection/circle_and_rotated_rect_formula.png",[],{"type":597,"tag":803,"props":58598,"children":58599},{},[58600,58605,58623,58628,58646],{"type":597,"tag":807,"props":58601,"children":58602},{},[58603],{"type":603,"value":58604},"设 A 点旋转前的角度为 δ，则旋转（逆时针）到 C 点后的角度为(δ+β)",{"type":597,"tag":807,"props":58606,"children":58607},{},[58608,58610],{"type":603,"value":58609},"由于 |AB| 与 |CB| 相等（即长度），且",{"type":597,"tag":803,"props":58611,"children":58612},{},[58613,58618],{"type":597,"tag":807,"props":58614,"children":58615},{},[58616],{"type":603,"value":58617},"|AB| = y/sin(δ) = x / cos(δ)",{"type":597,"tag":807,"props":58619,"children":58620},{},[58621],{"type":603,"value":58622},"|CB| = d/sin(δ + β) = c / cos(δ + β)",{"type":597,"tag":807,"props":58624,"children":58625},{},[58626],{"type":603,"value":58627},"半径 r = x / cos(δ) = y / sin(δ) = d / sin(δ + β) = c / cos(δ + β)",{"type":597,"tag":807,"props":58629,"children":58630},{},[58631,58633],{"type":603,"value":58632},"由以下三角函数两角和差公式：",{"type":597,"tag":1321,"props":58634,"children":58635},{},[58636,58641],{"type":597,"tag":807,"props":58637,"children":58638},{},[58639],{"type":603,"value":58640},"sin(δ + β) = sin(δ)cos(β) + cos(δ)sin(β)",{"type":597,"tag":807,"props":58642,"children":58643},{},[58644],{"type":603,"value":58645},"cos(δ + β) = cos(δ)cos(β) - sin(δ)sin(β)",{"type":597,"tag":807,"props":58647,"children":58648},{},[58649,58651],{"type":603,"value":58650},"可得出旋转后的坐标：",{"type":597,"tag":1321,"props":58652,"children":58653},{},[58654,58659],{"type":597,"tag":807,"props":58655,"children":58656},{},[58657],{"type":603,"value":58658},"c = r * cos(δ + β) = r * cos(δ)cos(β) - r * sin(δ)sin(β) = x * cos(β) - y * sin(β)",{"type":597,"tag":807,"props":58660,"children":58661},{},[58662],{"type":603,"value":58663},"d = r * sin(δ + β) = r * sin(δ)cos(β) + r * cos(δ)sin(β) = y * cos(β) + x * sin(β)",{"type":597,"tag":606,"props":58665,"children":58666},{},[58667],{"type":603,"value":58668},"由上述公式推导后可得：旋转后的坐标 (c,d) 只与旋转前的坐标 (x,y) 及旋转的角度 β 有关。",{"type":597,"tag":606,"props":58670,"children":58671},{},[58672],{"type":603,"value":58673},"当然，(c,d) 是旋转一定角度后『相对于旋转点（轴）的坐标』。因此，前面提到的『可直接套用的公式』中加上了矩形的中心点的坐标值。",{"type":597,"tag":606,"props":58675,"children":58676},{},[58677],{"type":603,"value":58678},"从图中也可以得出以下结论：A 点旋转后的 C 点总是在圆周（半径为 |AB|）上运动，利用这点可让物体绕旋转点（轴）做圆周运动。",{"type":597,"tag":606,"props":58680,"children":58681},{},[58682],{"type":603,"value":58683},"得到旋转后的圆心坐标值后，即可使用『圆形与矩形（无旋转）』方法进行碰撞检测了。",{"type":597,"tag":606,"props":58685,"children":58686},{},[58687],{"type":603,"value":58688},"在线运行案例：",{"type":597,"tag":606,"props":58690,"children":58691},{},[58692],{"type":603,"value":58693},"优点：",{"type":597,"tag":1321,"props":58695,"children":58696},{},[58697],{"type":597,"tag":807,"props":58698,"children":58699},{},[58700],{"type":603,"value":58701},"相对于圆形与矩形（未旋转）的方法，适用范围更广。",{"type":597,"tag":598,"props":58703,"children":58704},{"id":58136},[58705],{"type":603,"value":58136},{"type":597,"tag":1023,"props":58707,"children":58708},{"id":58144},[58709],{"type":603,"value":58144},{"type":597,"tag":606,"props":58711,"children":58712},{},[58713],{"type":603,"value":58714},"概念：将地图（场景）划分为一个个格子。地图中参与检测的对象都存储着自身所在格子的坐标，那么你即可以认为两个物体在相邻格子时为碰撞，又或者两个物体在同一格才为碰撞。另外，采用此方式的前提是：地图中所有可能参与碰撞的物体都要是格子单元的大小或者是其整数倍。",{"type":597,"tag":606,"props":58716,"children":58717},{},[58718,58724,58726],{"type":597,"tag":629,"props":58719,"children":58721},{"className":58720},[],[58722],{"type":603,"value":58723},"蓝色X",{"type":603,"value":58725}," 为障碍物：\n",{"type":597,"tag":719,"props":58727,"children":58730},{"alt":58728,"src":58729},"地图格子碰撞检测","/images/2020-01-12-Collision-detection/map_cell_collision.png",[],{"type":597,"tag":606,"props":58732,"children":58733},{},[58734],{"type":603,"value":58735},"实现方法：",{"type":597,"tag":621,"props":58737,"children":58739},{"code":58738},"// 通过特定标识指定（非）可行区域\nmap = [\n  [0, 0, 1, 1, 1, 0, 0, 0, 0],\n  [0, 1, 1, 0, 0, 1, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0, 0]\n],\n// 设定角色的初始位置\nplayer = {left: 2, top: 2}\n\n// 移动前（后）判断角色的下一步的动作（如不能前行）\n...\n",[58740],{"type":597,"tag":629,"props":58741,"children":58742},{"__ignoreMap":591},[58743],{"type":603,"value":58738},{"type":597,"tag":606,"props":58745,"children":58746},{},[58747],{"type":603,"value":58325},{"type":597,"tag":606,"props":58749,"children":58750},{},[58751],{"type":603,"value":58245},{"type":597,"tag":1321,"props":58753,"children":58754},{},[58755],{"type":597,"tag":807,"props":58756,"children":58757},{},[58758],{"type":603,"value":58759},"适用场景局限。",{"type":597,"tag":606,"props":58761,"children":58762},{},[58763],{"type":603,"value":58268},{"type":597,"tag":1321,"props":58765,"children":58766},{},[58767],{"type":597,"tag":807,"props":58768,"children":58769},{},[58770],{"type":603,"value":58771},"推箱子、踩地雷等",{"type":597,"tag":1023,"props":58773,"children":58774},{"id":58149},[58775],{"type":603,"value":58149},{"type":597,"tag":606,"props":58777,"children":58778},{},[58779],{"type":603,"value":58780},"概念：以像素级别检测物体之间是否存在重叠，从而判断是否碰撞。",{"type":597,"tag":606,"props":58782,"children":58783},{},[58784],{"type":603,"value":58785},"实现方法有多种，下面列举在 Canvas 中的两种实现方式：",{"type":597,"tag":803,"props":58787,"children":58788},{},[58789,58794],{"type":597,"tag":807,"props":58790,"children":58791},{},[58792],{"type":603,"value":58793},"如下述的案例中，通过将两个物体在 offscreen canvas 中判断同一位置（坐标）下是否同时存在非透明的像素。",{"type":597,"tag":807,"props":58795,"children":58796},{},[58797,58799,58805],{"type":603,"value":58798},"利用 canvas 的 ",{"type":597,"tag":629,"props":58800,"children":58802},{"className":58801},[],[58803],{"type":603,"value":58804},"globalCompositeOperation = 'destination-in'",{"type":603,"value":58806}," 属性。该属性会让两者的重叠部分会被保留，其余区域都变成透明。因此，若存在非透明像素，则为碰撞。",{"type":597,"tag":606,"props":58808,"children":58809},{},[58810],{"type":603,"value":58811},"注意，当待检测碰撞物体为两个时，第一种方法需要两个 offscreen canvas，而第二种只需一个。",{"type":597,"tag":617,"props":58813,"children":58814},{},[58815],{"type":597,"tag":606,"props":58816,"children":58817},{},[58818,58820,58824,58826],{"type":603,"value":58819},"offscreen canvas：与之相关的是 offscreen rendering。正如其名，它会在某个地方进行渲染，但不是屏幕。“某个地方”其实是",{"type":597,"tag":1080,"props":58821,"children":58822},{},[58823],{"type":603,"value":36364},{"type":603,"value":58825},"。渲染到内存比渲染到屏幕更快。—— ",{"type":597,"tag":886,"props":58827,"children":58830},{"href":58828,"rel":58829},"http://devbutze.blogspot.com/2014/02/html5-canvas-offscreen-rendering.html",[890],[58831],{"type":603,"value":58832},"Offscreen Rendering",{"type":597,"tag":606,"props":58834,"children":58835},{},[58836,58838,58844,58846,58852,58854,58859],{"type":603,"value":58837},"当然，我们这里并不是利用 ",{"type":597,"tag":629,"props":58839,"children":58841},{"className":58840},[],[58842],{"type":603,"value":58843},"offscreen render",{"type":603,"value":58845}," 的性能优势，而是利用 ",{"type":597,"tag":629,"props":58847,"children":58849},{"className":58848},[],[58850],{"type":603,"value":58851},"offscreen canvas",{"type":603,"value":58853}," 保存独立物体的像素。换句话说：",{"type":597,"tag":1080,"props":58855,"children":58856},{},[58857],{"type":603,"value":58858},"onscreen canvas 只是起展示作用，碰撞检测是在 offscreen canvas 中进行",{"type":603,"value":758},{"type":597,"tag":606,"props":58861,"children":58862},{},[58863,58865,58870],{"type":603,"value":58864},"另外，由于需要逐像素检测，若对整个 Canvas 内所有像素都进行此操作，无疑会浪费很多资源。因此，我们可以先通过运算得到两者",{"type":597,"tag":1080,"props":58866,"children":58867},{},[58868],{"type":603,"value":58869},"相交区域",{"type":603,"value":58871},"，然后只对该区域内的像素进行检测即可。",{"type":597,"tag":606,"props":58873,"children":58874},{},[58875,58876],{"type":603,"value":58315},{"type":597,"tag":719,"props":58877,"children":58879},{"alt":58149,"src":58878},"/images/2020-01-12-Collision-detection/pixel_collision.png",[],{"type":597,"tag":606,"props":58881,"children":58882},{},[58883],{"type":603,"value":58884},"下面示例展示了第一种实现方式：",{"type":597,"tag":606,"props":58886,"children":58887},{},[58888],{"type":603,"value":58245},{"type":597,"tag":1321,"props":58890,"children":58891},{},[58892],{"type":597,"tag":807,"props":58893,"children":58894},{},[58895],{"type":603,"value":58896},"因为需要检查每一像素来判定是否碰撞，性能要求比较高。",{"type":597,"tag":606,"props":58898,"children":58899},{},[58900],{"type":603,"value":58268},{"type":597,"tag":1321,"props":58902,"children":58903},{},[58904],{"type":597,"tag":807,"props":58905,"children":58906},{},[58907],{"type":603,"value":58908},"需要以像素级别检测物体是否碰撞。",{"type":597,"tag":598,"props":58910,"children":58912},{"id":58911},"光线投射法ray-casting",[58913],{"type":603,"value":58914},"光线投射法（Ray Casting）",{"type":597,"tag":606,"props":58916,"children":58917},{},[58918],{"type":603,"value":58919},"概念：通过检测两个物体的速度矢量是否存在交点，且该交点满足一定条件。",{"type":597,"tag":606,"props":58921,"children":58922},{},[58923,58925,58931,58933,58939],{"type":603,"value":58924},"对于下述抛小球入桶的案例：画一条与物体的速度向量相重合的线(",{"type":597,"tag":629,"props":58926,"children":58928},{"className":58927},[],[58929],{"type":603,"value":58930},"#1",{"type":603,"value":58932},")，然后再从另一个待检测物体出发，连线到前一个物体，绘制第二条线(",{"type":597,"tag":629,"props":58934,"children":58936},{"className":58935},[],[58937],{"type":603,"value":58938},"#2",{"type":603,"value":58940},")，根据两条线的交点位置来判定是否发生碰撞。",{"type":597,"tag":606,"props":58942,"children":58943},{},[58944,58946],{"type":603,"value":58945},"抛球进桶图例：\n",{"type":597,"tag":719,"props":58947,"children":58949},{"alt":58126,"src":58948},"/images/2020-01-12-Collision-detection/ray_casting_collision.png",[],{"type":597,"tag":606,"props":58951,"children":58952},{},[58953],{"type":603,"value":58954},"在小球飞行的过程中，需要不断计算两直线的交点。",{"type":597,"tag":606,"props":58956,"children":58957},{},[58958],{"type":603,"value":58959},"当满足以下两个条件时，那么应用程序就可以判定小球已落入桶中：",{"type":597,"tag":1321,"props":58961,"children":58962},{},[58963,58968],{"type":597,"tag":807,"props":58964,"children":58965},{},[58966],{"type":603,"value":58967},"两直线交点在桶口的左右边沿间",{"type":597,"tag":807,"props":58969,"children":58970},{},[58971,58973,58978],{"type":603,"value":58972},"小球位于第二条线（",{"type":597,"tag":629,"props":58974,"children":58976},{"className":58975},[],[58977],{"type":603,"value":58938},{"type":603,"value":58979},"）下方",{"type":597,"tag":606,"props":58981,"children":58982},{},[58983],{"type":603,"value":58325},{"type":597,"tag":606,"props":58985,"children":58986},{},[58987],{"type":603,"value":58693},{"type":597,"tag":1321,"props":58989,"children":58990},{},[58991],{"type":597,"tag":807,"props":58992,"children":58993},{},[58994],{"type":603,"value":58995},"适合运动速度快的物体",{"type":597,"tag":606,"props":58997,"children":58998},{},[58999],{"type":603,"value":58245},{"type":597,"tag":1321,"props":59001,"children":59002},{},[59003],{"type":597,"tag":807,"props":59004,"children":59005},{},[59006],{"type":603,"value":59007},"适用范围相对局限。",{"type":597,"tag":606,"props":59009,"children":59010},{},[59011],{"type":603,"value":58268},{"type":597,"tag":1321,"props":59013,"children":59014},{},[59015],{"type":597,"tag":807,"props":59016,"children":59017},{},[59018],{"type":603,"value":59019},"抛球运动进桶。",{"type":597,"tag":598,"props":59021,"children":59023},{"id":59022},"分离轴定理separating-axis-theorem",[59024],{"type":603,"value":59025},"分离轴定理（Separating Axis Theorem）",{"type":597,"tag":606,"props":59027,"children":59028},{},[59029,59031,59037],{"type":603,"value":59030},"概念：通过判断任意两个 ",{"type":597,"tag":629,"props":59032,"children":59034},{"className":59033},[],[59035],{"type":603,"value":59036},"凸多边形",{"type":603,"value":59038}," 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。",{"type":597,"tag":606,"props":59040,"children":59041},{},[59042,59043],{"type":603,"value":58315},{"type":597,"tag":719,"props":59044,"children":59046},{"alt":58131,"src":59045},"/images/2020-01-12-Collision-detection/sat_base.png",[],{"type":597,"tag":606,"props":59048,"children":59049},{},[59050,59052,59058,59060],{"type":603,"value":59051},"在程序中，遍历所有角度是不现实的。那如何确定 ",{"type":597,"tag":629,"props":59053,"children":59055},{"className":59054},[],[59056],{"type":603,"value":59057},"投影轴",{"type":603,"value":59059}," 呢？其实",{"type":597,"tag":1080,"props":59061,"children":59062},{},[59063],{"type":603,"value":59064},"投影轴的数量与多边形的边数相等即可。",{"type":597,"tag":606,"props":59066,"children":59067},{},[59068],{"type":597,"tag":719,"props":59069,"children":59072},{"alt":59070,"src":59071},"https://misc.aotu.io/JChehe/2017-02-13-2d-collision-detection/sat_projection_two.png","/images/2020-01-12-Collision-detection/sat_projection_two.png",[],{"type":597,"tag":606,"props":59074,"children":59075},{},[59076],{"type":603,"value":59077},"以较高抽象层次判断两个凸多边形是否碰撞：",{"type":597,"tag":621,"props":59079,"children":59081},{"code":59080},"function polygonsCollide(polygon1, polygon2) {\n    var axes, projection1, projection2\n    \n    // 根据多边形获取所有投影轴\n    axes = polygon1.getAxes()\n    axes.push(polygon2.getAxes())\n    \n    // 遍历所有投影轴，获取多边形在每条投影轴上的投影\n    for(each axis in axes) {\n        projection1 = polygon1.project(axis)\n        projection2 = polygon2.project(axis)\n        \n        // 判断投影轴上的投影是否存在重叠，若检测到存在间隙则立刻退出判断，消除不必要的运算。\n        if(!projection1.overlaps(projection2))\n            return false\n    }\n    return true\n}\n",[59082],{"type":597,"tag":629,"props":59083,"children":59084},{"__ignoreMap":591},[59085],{"type":603,"value":59080},{"type":597,"tag":606,"props":59087,"children":59088},{},[59089],{"type":603,"value":59090},"上述代码有几个需要解决的地方：",{"type":597,"tag":1321,"props":59092,"children":59093},{},[59094,59099,59104],{"type":597,"tag":807,"props":59095,"children":59096},{},[59097],{"type":603,"value":59098},"如何确定多边形的各个投影轴",{"type":597,"tag":807,"props":59100,"children":59101},{},[59102],{"type":603,"value":59103},"如何将多边形投射到某条投影轴上",{"type":597,"tag":807,"props":59105,"children":59106},{},[59107],{"type":603,"value":59108},"如何检测两段投影是否发生重叠",{"type":597,"tag":3995,"props":59110,"children":59111},{"id":59057},[59112],{"type":603,"value":59057},{"type":597,"tag":606,"props":59114,"children":59115},{},[59116,59118,59123,59125,59130],{"type":603,"value":59117},"如下图所示，我们使用一条从 p1 指向 p2 的向量来表示多边形的某条边，我们称之为",{"type":597,"tag":1080,"props":59119,"children":59120},{},[59121],{"type":603,"value":59122},"边缘向量",{"type":603,"value":59124},"。在分离轴定理中，还需要确定一条垂直于边缘向量的法向量，我们称之为“",{"type":597,"tag":1080,"props":59126,"children":59127},{},[59128],{"type":603,"value":59129},"边缘法向量",{"type":603,"value":15034},{"type":597,"tag":606,"props":59132,"children":59133},{},[59134,59138],{"type":597,"tag":1080,"props":59135,"children":59136},{},[59137],{"type":603,"value":59057},{"type":603,"value":59139},"平行于边缘法向量。投影轴的位置不限，因为其长度是无限的，故而多边形在该轴上的投影是一样的。该轴的方向才是关键的。",{"type":597,"tag":606,"props":59141,"children":59142},{},[59143],{"type":597,"tag":719,"props":59144,"children":59146},{"alt":59057,"src":59145},"/images/2020-01-12-Collision-detection/sat_projection_one.png",[],{"type":597,"tag":621,"props":59148,"children":59150},{"code":59149},"// 以原点(0,0)为始，顶点为末。最后通过向量减法得到 边缘向量。\nvar v1 = new Vector(p1.x, p1.y)\n    v2 = new Vector(p2.x, p2.y)\n\n// 首先得到边缘向量，然后再通过边缘向量获得相应边缘法向量（单位向量）。\n// 两向量相减得到边缘向量 p2p1（注：上面应该有个右箭头，以表示向量）。\n// 设向量 p2p1 为(A,B)，那么其法向量通过 x1x2+y1y2 = 0 可得：(-B,A) 或 (B,-A)。\n    axis = v1.edge(v2).normal()\n",[59151],{"type":597,"tag":629,"props":59152,"children":59153},{"__ignoreMap":591},[59154],{"type":603,"value":59149},{"type":597,"tag":606,"props":59156,"children":59157},{},[59158],{"type":603,"value":59159},"以下是向量对象的部分实现，具体可看源码。",{"type":597,"tag":621,"props":59161,"children":59163},{"code":59162},"var Vector = function(x, y) {\n    this.x = x\n    this.y = y\n}\n\nVector.prototype = {\n    // 获取向量大小（即向量的模），即两点间距离\n    getMagnitude: function() {\n        return Math.sqrt(Math.pow(this.x, 2),\n                         Math.pow(this.y, 2))\n    },\n    // 点积的几何意义之一是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n    // 后续将会用其计算出投影的长度\n    dotProduct: function(vector) {\n        return this.x * vector.x + this.y + vector.y\n    },\n    // 向量相减 得到边\n    subtarct: function(vector) {\n        var v = new Vector()\n        v.x = this.x - vector.x\n        v.y = this.y - vector.y\n        return v\n    },\n    edge: function(vector) {\n        return this.substract(vector)\n    },\n    // 获取当前向量的法向量（垂直）\n    perpendicular: function() {\n        var v = new Vector()\n        v.x = this.y\n        v.y = 0 - this.x\n        return v\n    },\n    // 获取单位向量（即向量大小为1，用于表示向量方向），一个非零向量除以它的模即可得到单位向量\n    normalize: function() {\n        var v = new Vector(0, 0)\n            m = this.getMagnitude()\n        if(m !== 0) {\n            v.x = this.x / m\n            v.y = this.y /m\n        }\n        return v\n    },\n    // 获取边缘法向量的单位向量，即投影轴\n    normal: function() {\n        var p = this.perpendicular()\n        return p .normalize()\n    }\n}\n",[59164],{"type":597,"tag":629,"props":59165,"children":59166},{"__ignoreMap":591},[59167],{"type":603,"value":59162},{"type":597,"tag":606,"props":59169,"children":59170},{},[59171,59176],{"type":597,"tag":719,"props":59172,"children":59175},{"alt":59173,"src":59174},"此处输入图片的描述","/images/2020-01-12-Collision-detection/vector_subtract.png",[],{"type":603,"value":59177},"\n向量相减",{"type":597,"tag":606,"props":59179,"children":59180},{},[59181],{"type":603,"value":59182},"更多关于向量的知识可通过其它渠道学习。",{"type":597,"tag":3995,"props":59184,"children":59186},{"id":59185},"投影",[59187],{"type":603,"value":59185},{"type":597,"tag":606,"props":59189,"children":59190},{},[59191],{"type":603,"value":59192},"投影的大小：通过将一个多边形上的每个顶点与原点(0,0)组成的向量，投影在某一投影轴上，然后保留该多边形在该投影轴上所有投影中的最大值和最小值，这样即可表示一个多边形在某投影轴上的投影了。",{"type":597,"tag":606,"props":59194,"children":59195},{},[59196,59198],{"type":603,"value":59197},"判断两多边形的投影是否重合：",{"type":597,"tag":629,"props":59199,"children":59201},{"className":59200},[],[59202],{"type":603,"value":59203},"projection1.max > projection2.min && project2.max > projection.min",{"type":597,"tag":606,"props":59205,"children":59206},{},[59207,59211,59213,59219,59221,59227],{"type":597,"tag":719,"props":59208,"children":59210},{"alt":59173,"src":59209},"/images/2020-01-12-Collision-detection/sat_project_length.png",[],{"type":603,"value":59212},"\n为了易于理解，示例图将坐标轴",{"type":597,"tag":629,"props":59214,"children":59216},{"className":59215},[],[59217],{"type":603,"value":59218},"原点(0,0)",{"type":603,"value":59220},"放置于三角形",{"type":597,"tag":629,"props":59222,"children":59224},{"className":59223},[],[59225],{"type":603,"value":59226},"边1",{"type":603,"value":59228},"投影轴的适当位置。",{"type":597,"tag":606,"props":59230,"children":59231},{},[59232],{"type":603,"value":59233},"由上述可得投影对象：",{"type":597,"tag":621,"props":59235,"children":59237},{"code":59236},"// 用最大和最小值表示某一凸多边形在某一投影轴上的投影位置\nvar Projection = function (min, max) {\n    this.min\n    this.max\n}\n\nprojection.prototype = {\n    // 判断两投影是否重叠\n    overlaps: function(projection) {\n        return this.max > projection.min && projection.max > this.min\n    }\n}\n",[59238],{"type":597,"tag":629,"props":59239,"children":59240},{"__ignoreMap":591},[59241],{"type":603,"value":59236},{"type":597,"tag":606,"props":59243,"children":59244},{},[59245,59247,59251,59253,59258,59260],{"type":603,"value":59246},"如何得到向量在投影轴上的长度？\n向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n由于",{"type":597,"tag":1080,"props":59248,"children":59249},{},[59250],{"type":603,"value":59057},{"type":603,"value":59252},"是单位向量（长度为",{"type":597,"tag":629,"props":59254,"children":59256},{"className":59255},[],[59257],{"type":603,"value":6421},{"type":603,"value":59259},"），投影的长度为 ",{"type":597,"tag":629,"props":59261,"children":59263},{"className":59262},[],[59264],{"type":603,"value":59265},"x1 * x2 + y1 * y2",{"type":597,"tag":606,"props":59267,"children":59268},{},[59269],{"type":597,"tag":719,"props":59270,"children":59272},{"alt":20044,"src":59271},"/images/2020-01-12-Collision-detection/dot_product.png",[],{"type":597,"tag":621,"props":59274,"children":59276},{"code":59275},"// 根据多边形的每个定点，得到投影的最大和最小值，以表示投影。\nfunction project = function (axis) {\n    var scalars = [], v = new Vector()\n    \n    this.points.forEach(function (point) {\n        v.x = point.x\n        v.y = point.y\n        scalars.push(v.dotProduct(axis))\n    })\n    return new Projection(Math.min.apply(Math, scalars),\n                          Math.max,apply(Math, scalars))\n}\n",[59277],{"type":597,"tag":629,"props":59278,"children":59279},{"__ignoreMap":591},[59280],{"type":603,"value":59275},{"type":597,"tag":3995,"props":59282,"children":59284},{"id":59283},"圆形与多边形之间的碰撞检测",[59285],{"type":603,"value":59283},{"type":597,"tag":606,"props":59287,"children":59288},{},[59289],{"type":603,"value":59290},"由于圆形可近似地看成一个有无数条边的正多边形，而我们不可能按照这些边一一进行投影与测试。我们只需将圆形投射到一条投影轴上即可，这条轴就是圆心与多边形顶点中最近的一点的连线，如图所示：",{"type":597,"tag":606,"props":59292,"children":59293},{},[59294],{"type":597,"tag":719,"props":59295,"children":59298},{"alt":59296,"src":59297},"圆形与多边形的投影轴","/images/2020-01-12-Collision-detection/sat_projection_circle.png",[],{"type":597,"tag":606,"props":59300,"children":59301},{},[59302],{"type":603,"value":59303},"因此，该投影轴和多边形自身的投影轴就组成了一组待检测的投影轴了。",{"type":597,"tag":606,"props":59305,"children":59306},{},[59307],{"type":603,"value":59308},"而对于圆形与圆形之间的碰撞检测依然是最初的两圆心距离是否小于两半径之和。",{"type":597,"tag":606,"props":59310,"children":59311},{},[59312],{"type":603,"value":59313},"分离轴定理的整体代码实现，可查看以下案例：",{"type":597,"tag":606,"props":59315,"children":59316},{},[59317],{"type":603,"value":58693},{"type":597,"tag":1321,"props":59319,"children":59320},{},[59321],{"type":597,"tag":807,"props":59322,"children":59323},{},[59324],{"type":603,"value":59325},"精确",{"type":597,"tag":606,"props":59327,"children":59328},{},[59329],{"type":603,"value":58245},{"type":597,"tag":1321,"props":59331,"children":59332},{},[59333],{"type":597,"tag":807,"props":59334,"children":59335},{},[59336],{"type":603,"value":59337},"不适用于凹多边形",{"type":597,"tag":606,"props":59339,"children":59340},{},[59341],{"type":603,"value":58268},{"type":597,"tag":1321,"props":59343,"children":59344},{},[59345],{"type":597,"tag":807,"props":59346,"children":59347},{},[59348],{"type":603,"value":59349},"任意凸多边形和圆形。",{"type":597,"tag":606,"props":59351,"children":59352},{},[59353],{"type":603,"value":59354},"更多关于分离轴定理的资料：",{"type":597,"tag":1321,"props":59356,"children":59357},{},[59358,59367,59377,59387,59397],{"type":597,"tag":807,"props":59359,"children":59360},{},[59361],{"type":597,"tag":886,"props":59362,"children":59364},{"href":57395,"rel":59363},[890],[59365],{"type":603,"value":59366},"Separating Axis Theorem (SAT) explanation",{"type":597,"tag":807,"props":59368,"children":59369},{},[59370],{"type":597,"tag":886,"props":59371,"children":59374},{"href":59372,"rel":59373},"http://www.metanetsoftware.com/technique/tutorialA.html",[890],[59375],{"type":603,"value":59376},"Collision detection and response",{"type":597,"tag":807,"props":59378,"children":59379},{},[59380],{"type":597,"tag":886,"props":59381,"children":59384},{"href":59382,"rel":59383},"http://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169",[890],[59385],{"type":603,"value":59386},"Collision detection Using the Separating Axis Theorem",{"type":597,"tag":807,"props":59388,"children":59389},{},[59390],{"type":597,"tag":886,"props":59391,"children":59394},{"href":59392,"rel":59393},"http://www.codezealot.org/archives/55",[890],[59395],{"type":603,"value":59396},"SAT (Separating Axis Theorem)",{"type":597,"tag":807,"props":59398,"children":59399},{},[59400],{"type":597,"tag":886,"props":59401,"children":59404},{"href":59402,"rel":59403},"http://rocketmandevelopment.com/blog/separation-of-axis-theorem-for-collision-detection/",[890],[59405],{"type":603,"value":59406},"Separation of Axis Theorem (SAT) for Collision Detection",{"type":597,"tag":3995,"props":59408,"children":59410},{"id":59409},"延伸最小平移向量mit",[59411],{"type":603,"value":59412},"延伸：最小平移向量（MIT）",{"type":597,"tag":606,"props":59414,"children":59415},{},[59416],{"type":603,"value":59417},"通常来说，如果碰撞之后，相撞的双方依然存在，那么就需要将两者分开。分开之后，可以使原来相撞的两物体彼此弹开，也可以让他们黏在一起，还可以根据具体需要来实现其他行为。不过首先要做的是，还是将两者分开，这就需要用到最小平移向量（Minimum Translation Vector, MIT）。",{"type":597,"tag":606,"props":59419,"children":59420},{},[59421],{"type":597,"tag":719,"props":59422,"children":59425},{"alt":59423,"src":59424},"最小平移向量","/images/2020-01-12-Collision-detection/mit.png",[],{"type":597,"tag":1023,"props":59427,"children":59429},{"id":59428},"碰撞性能优化",[59430],{"type":603,"value":59428},{"type":597,"tag":606,"props":59432,"children":59433},{},[59434],{"type":603,"value":59435},"若每个周期都需要对全部物体进行两两判断，会造成浪费（因为有些物体分布在不同区域，根本不会发生碰撞）。所以，大部分游戏都会将碰撞分为两个阶段：粗略和精细（broad/narrow）。",{"type":597,"tag":3995,"props":59437,"children":59439},{"id":59438},"粗略阶段broad-phase",[59440],{"type":603,"value":59441},"粗略阶段（Broad Phase）",{"type":597,"tag":606,"props":59443,"children":59444},{},[59445],{"type":603,"value":59446},"Broad phase 能为你提供有可能碰撞的实体列表。这可通过一些特殊的数据结构实现，它们能为你提供这些信息：实体存在哪里和哪些实体在其周围。这些数据结构可以是：四叉树（Quad Trees）、R树（R-Trees）或空间哈希映射（Spatial Hashmap）等。",{"type":597,"tag":606,"props":59448,"children":59449},{},[59450],{"type":603,"value":59451},"读者若感兴趣，可以自行查阅相关信息。",{"type":597,"tag":3995,"props":59453,"children":59455},{"id":59454},"精细阶段narrow-phase",[59456],{"type":603,"value":59457},"精细阶段（Narrow Phase）",{"type":597,"tag":606,"props":59459,"children":59460},{},[59461],{"type":603,"value":59462},"当你有了较小的实体列表，你可以利用精细阶段的算法（如上述讲述的碰撞算法）得到一个确切的答案（是否发生碰撞）。",{"type":597,"tag":1023,"props":59464,"children":59466},{"id":59465},"最后",[59467],{"type":603,"value":59465},{"type":597,"tag":606,"props":59469,"children":59470},{},[59471],{"type":603,"value":59472},"碰撞检测有多种，选择合适最重要。",{"type":597,"tag":606,"props":59474,"children":59475},{},[59476],{"type":603,"value":59477},"完！",{"type":597,"tag":1023,"props":59479,"children":59481},{"id":59480},"参考资料",[59482],{"type":603,"value":59480},{"type":597,"tag":1321,"props":59484,"children":59485},{},[59486,59496,59506,59516,59526],{"type":597,"tag":807,"props":59487,"children":59488},{},[59489],{"type":597,"tag":886,"props":59490,"children":59493},{"href":59491,"rel":59492},"https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection",[890],[59494],{"type":603,"value":59495},"MDN：2D collision detection",{"type":597,"tag":807,"props":59497,"children":59498},{},[59499],{"type":597,"tag":886,"props":59500,"children":59503},{"href":59501,"rel":59502},"https://item.jd.com/11231175.html?dist=jd",[890],[59504],{"type":603,"value":59505},"《HTML5 Canvas 核心技术：图形、动画与游戏开发》",{"type":597,"tag":807,"props":59507,"children":59508},{},[59509],{"type":597,"tag":886,"props":59510,"children":59513},{"href":59511,"rel":59512},"http://lazyfoo.net/SDL_tutorials/lesson19/index.php",[890],[59514],{"type":603,"value":59515},"Circular Collision Detection",{"type":597,"tag":807,"props":59517,"children":59518},{},[59519],{"type":597,"tag":886,"props":59520,"children":59523},{"href":59521,"rel":59522},"http://www.migapro.com/circle-and-rotated-rectangle-collision-detection/",[890],[59524],{"type":603,"value":59525},"Circle and Rotated Rectangle Collision Detection",{"type":597,"tag":807,"props":59527,"children":59528},{},[59529],{"type":597,"tag":886,"props":59530,"children":59533},{"href":59531,"rel":59532},"http://www.cnblogs.com/ywxgod/archive/2010/08/06/1793609.html",[890],[59534],{"type":603,"value":59535},"推导坐标旋转公式",{"type":597,"tag":606,"props":59537,"children":59538},{},[59539,59541,59548,59550],{"type":603,"value":59540},"感谢您的阅读，本文由 ",{"type":597,"tag":886,"props":59542,"children":59545},{"href":59543,"rel":59544},"https://aotu.io/",[890],[59546],{"type":603,"value":59547},"凹凸实验室",{"type":603,"value":59549}," 版权所有。如若转载，请注明出处：凹凸实验室（",{"type":597,"tag":886,"props":59551,"children":59554},{"href":59552,"rel":59553},"https://aotu.io/notes/2017/02/16/2d-collision-detection/%EF%BC%89",[890],[59555],{"type":603,"value":59556},"https://aotu.io/notes/2017/02/16/2d-collision-detection/）",{"title":591,"searchDepth":787,"depth":787,"links":59558},[59559,59565,59569,59570],{"id":58098,"depth":787,"text":58098,"children":59560},[59561,59562,59563,59564],{"id":58204,"depth":1530,"text":58207},{"id":58279,"depth":1530,"text":58282},{"id":58352,"depth":1530,"text":58116},{"id":58544,"depth":1530,"text":58547},{"id":58136,"depth":787,"text":58136,"children":59566},[59567,59568],{"id":58144,"depth":1530,"text":58144},{"id":58149,"depth":1530,"text":58149},{"id":58911,"depth":787,"text":58914},{"id":59022,"depth":787,"text":59025,"children":59571},[59572,59573,59574],{"id":59428,"depth":1530,"text":59428},{"id":59465,"depth":1530,"text":59465},{"id":59480,"depth":1530,"text":59480},"content:unity:2020-01-12-Collision-detection.md","unity/2020-01-12-Collision-detection.md",{"_path":424,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":423,"description":59578,"body":59579,"_type":791,"_id":59647,"_source":793,"_file":59648,"_extension":795,"date":59649},"1.利用碰撞器的触发器Trigger这种是比较基础的做法，利用OnTriggerEntry函数，当目标进入触发器时触发。例如玩家有一把剑，我要做攻击判定的话，我就可以在剑上挂一个触发器，设定好大小，当播放动画时，随着剑的挥动，目标会进入Trigger的范围，此时就会调用OnTriggerEntry函数。但是这样做有个弊端，如果挥舞速度太快，检测会有问题；还有就是必须满足“进入”这个条件，也就是说如果原来目标就在触发器范围内，或者触发器在目标内，是不会触发函数的。所以这种方法不太适用于3D游戏。不过这种方法也不是不能用，只是适用条件有限，在2D游戏上，结合上Animation的录制功能，通过动画",{"type":594,"children":59580,"toc":59645},[59581,59587,59592,59597,59603,59608,59613,59619,59624,59629,59635,59640],{"type":597,"tag":3995,"props":59582,"children":59584},{"id":59583},"_1利用碰撞器的触发器trigger",[59585],{"type":603,"value":59586},"1.利用碰撞器的触发器Trigger",{"type":597,"tag":606,"props":59588,"children":59589},{},[59590],{"type":603,"value":59591},"这种是比较基础的做法，利用OnTriggerEntry函数，当目标进入触发器时触发。例如玩家有一把剑，我要做攻击判定的话，我就可以在剑上挂一个触发器，设定好大小，当播放动画时，随着剑的挥动，目标会进入Trigger的范围，此时就会调用OnTriggerEntry函数。但是这样做有个弊端，如果挥舞速度太快，检测会有问题；还有就是必须满足“进入”这个条件，也就是说如果原来目标就在触发器范围内，或者触发器在目标内，是不会触发函数的。所以这种方法不太适用于3D游戏。",{"type":597,"tag":606,"props":59593,"children":59594},{},[59595],{"type":603,"value":59596},"不过这种方法也不是不能用，只是适用条件有限，在2D游戏上，结合上Animation的录制功能，通过动画来改变Trigger的大小，这样就可以触发OnTriggerEntry函数一次或者多次，这样也是可以做出不错效果的。在3D游戏中，可以在人物前面放置一个大小合适Trigger当做攻击范围，再结合动画事件进行攻击判定，不过这样做的缺点是攻击范围大小恒定，如果人物的攻击范围大小不一，就要创建很多空子物体来设定Trigger范围，脚本也不好管理。",{"type":597,"tag":3995,"props":59598,"children":59600},{"id":59599},"_2利用数学判断",[59601],{"type":603,"value":59602},"2.利用数学判断",{"type":597,"tag":606,"props":59604,"children":59605},{},[59606],{"type":603,"value":59607},"可以定义两个向量作为攻击范围，向量有方向也有长度，攻击范围是可以确定的。例如设定两个向量，向量1为Transform.forward的左偏45度，向量2为Transform.forward的右偏45度，长度均为5。此时攻击范围为半径为5，度数为90°的扇形。此时就可以计算敌人是不是在攻击范围内，可以通过Vector3.Angle来计算（角度制），Vector3.Distance来计算距离。",{"type":597,"tag":606,"props":59609,"children":59610},{},[59611],{"type":603,"value":59612},"这种方法的局限在于1.如何获取到敌人的游戏物体，可以通过触发器也可以遍历你的敌人列表。2.当敌人体积过大时，有可能身体的一部分已经进入攻击范围，但是postion没有进入攻击范围，此时判定就会出现错误。看情况使用。",{"type":597,"tag":3995,"props":59614,"children":59616},{"id":59615},"_3利用射线raycast",[59617],{"type":603,"value":59618},"3.利用射线Raycast",{"type":597,"tag":606,"props":59620,"children":59621},{},[59622],{"type":603,"value":59623},"使用Physics.Raycast()这个方法来发射射线，当射线碰到物体，或者碰到指定Laymask层的物体，或者一定距离后就会返回，返回值是Bool类型。通过out关键字来输出碰撞到的物体的信息，变量类型为RaycastHit。例如我定义一个射线Ray ray =new Ray(), 一个射线返回RaycastHit hit，那么就应该这么使用Physics.Raycast(ray,out hit),表示碰到物体，就会返回ture，物体信息储存在hit中。没有碰到，就会范围false，hit为null。这个方法还有很多重载，可以自己查阅API，根据情况使用。",{"type":597,"tag":606,"props":59625,"children":59626},{},[59627],{"type":603,"value":59628},"这种方法是射击游戏的常用判断方法，可以结合lineRender来渲染子弹飞过的特效。不过这种方法也不是万能的，它的局限在于射出射线的点只有一个，用来做射击游戏的攻击判定是非常合适的，但是不能用来做判定比较严格的游戏。为什么呢，因为射击游戏的发射方向是可以根据准星调整的，视觉上的判定也是准星方向，如果是动作游戏，rpg游戏之类的，攻击类型多样，就会出现差错。例如一个从上至下的斩击，攻击范围应该是竖着的一条线，那么射线应该怎发射呢？如果直直的往前发射，那么当敌人蹲下的时候，就会检测不到。你或许会想做成动作模式不就完了吗？（就是类似于龙之谷的操作方式），也是不行的，判定始终在攻击轨迹中央，和攻击动画和攻击特效有出入。",{"type":597,"tag":3995,"props":59630,"children":59632},{"id":59631},"_4利用射线linecast",[59633],{"type":603,"value":59634},"4.利用射线Linecast",{"type":597,"tag":606,"props":59636,"children":59637},{},[59638],{"type":603,"value":59639},"这也是Physics的一个方法， Physics.Linecast（）。连接两个点形成线段，如果线段中间有物体，就返回true,否则返回flase，同样，这个方法需要定义一个RaycastHit类型的变量来接收返回数据，具体方法为Physics.Linecast（Vector3 point1, Vector3 point2，out hit）。这种方法需要在武器或者拳头或者其他的需要攻击判定的地方设定一个点，当动画播放时，这个点的世界坐标就会变化，此时我们可以选择记录某几个时间点上判定点的世界坐标，再用Linecast进行判定。一般取判定点的坐标的话我们同样可以利用动画事件。",{"type":597,"tag":606,"props":59641,"children":59642},{},[59643],{"type":603,"value":59644},"这种方法调试的时候最好用lineRender把攻击轨迹渲染出来，或者用Debug.DrawLine()画出来（记得设定存在时间，不然一瞬间就消失了看不到），这样可以方便调整我们取判定点的时间节点，不然可能会疑惑，明明我设定好了，怎么检测不到。这种方法适合于动作游戏，以及一些判定比较精细的游戏。需要注意的一点是，Linecast每一帧都会进行判定，一般我们只需要一个动作判定一次，那么还需要在代码里进行约束。",{"title":591,"searchDepth":787,"depth":787,"links":59646},[],"content:unity:2020-01-11-unity-attack-range-detection-type.md","unity/2020-01-11-unity-attack-range-detection-type.md","2020-01-11",{"_path":44,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":43,"description":59651,"body":59652,"_type":791,"_id":59859,"_source":793,"_file":59860,"_extension":795,"date":59861},"程序的运行要去加载所需要的dll文件，在程序运行的时候往往会遇到dll找不到的问题，或者不能确定所加载的dll文件是否是自己所需要的dll，遇到dll出问题的时候往往会不知所措，但是一旦知道了dll的加载顺序，按这个去查找解决就会方便和得心应手了。",{"type":594,"children":59653,"toc":59857},[59654,59658,59663,59668,59673,59678,59683,59688,59693,59698,59703,59711,59716,59721,59729,59734,59742,59750,59758,59766,59774,59782,59790,59795,59808,59813,59821,59826,59833,59838,59846,59851],{"type":597,"tag":606,"props":59655,"children":59656},{},[59657],{"type":603,"value":59651},{"type":597,"tag":606,"props":59659,"children":59660},{},[59661],{"type":603,"value":59662},"(1)先搜索可执行文件所在路径，再搜索系统路径：%PATH%（环境变量所配置的路径）",{"type":597,"tag":606,"props":59664,"children":59665},{},[59666],{"type":603,"value":59667},"一般Path中的值为：%SystemRoot%\\system32;%SystemRoot%;",{"type":597,"tag":606,"props":59669,"children":59670},{},[59671],{"type":603,"value":59672},"(2)然后按下列顺序搜索 DLL：",{"type":597,"tag":606,"props":59674,"children":59675},{},[59676],{"type":603,"value":59677},"1、当前进程的可执行模块所在的目录。",{"type":597,"tag":606,"props":59679,"children":59680},{},[59681],{"type":603,"value":59682},"2、当前目录。",{"type":597,"tag":606,"props":59684,"children":59685},{},[59686],{"type":603,"value":59687},"3、Windows 系统目录。GetSystemDirectory 函数检索此目录的路径。",{"type":597,"tag":606,"props":59689,"children":59690},{},[59691],{"type":603,"value":59692},"4、Windows 目录。GetWindowsDirectory 函数检索此目录的路径。",{"type":597,"tag":606,"props":59694,"children":59695},{},[59696],{"type":603,"value":59697},"5、PATH 环境变量中列出的目录。",{"type":597,"tag":606,"props":59699,"children":59700},{},[59701],{"type":603,"value":59702},"有时候确定了加载的dll文件确实是自己所想加载的dll文件，但是还会发生错误的可能原因，就是dll文件被损坏，此时需要重新替换现有的dll文件；或者dll文件和所用的头文件（.h文件）不匹配，即是头文件中的函数，在dll文件中没有实现，这样的话，找到对应的dll文件就ok了。",{"type":597,"tag":606,"props":59704,"children":59705},{},[59706],{"type":597,"tag":1080,"props":59707,"children":59708},{},[59709],{"type":603,"value":59710},"AssemblyLoadContext",{"type":597,"tag":606,"props":59712,"children":59713},{},[59714],{"type":603,"value":59715},"基本上AssemblyLoadContext是AppDomain的继承者，它提供相同而且更多的功能-除了安全边界（隔离）。最小的安全边界是进程，因此你将需要使用进程间通信来正确隔离数据和代码执行。",{"type":597,"tag":606,"props":59717,"children":59718},{},[59719],{"type":603,"value":59720},"官网文档中提到Appdomain已经过时了，为了兼容旧的版本，提供了部分功能。建议在.NET Core3.0及更高的版本使用AssemblyLoadContext。",{"type":597,"tag":606,"props":59722,"children":59723},{},[59724],{"type":597,"tag":1080,"props":59725,"children":59726},{},[59727],{"type":603,"value":59728},"从AppDomain迁移到AssemblyLoadContext",{"type":597,"tag":606,"props":59730,"children":59731},{},[59732],{"type":603,"value":59733},"也许你仍在应用程序中使用AppDomain。现在，以下代码显示如何用AssemblyLoadContext的相应方法去替换掉AppDomain方法：",{"type":597,"tag":1321,"props":59735,"children":59736},{},[59737],{"type":597,"tag":807,"props":59738,"children":59739},{},[59740],{"type":603,"value":59741},"获取所有程序集",{"type":597,"tag":621,"props":59743,"children":59745},{"code":59744},"var assembliesInAppDomain = AppDomain.CurrentDomain.GetAssemblies();\nvar assembliesInAssemblyLoadContext = AssemblyLoadContext.Default.Assemblies;\n",[59746],{"type":597,"tag":629,"props":59747,"children":59748},{"__ignoreMap":591},[59749],{"type":603,"value":59744},{"type":597,"tag":1321,"props":59751,"children":59752},{},[59753],{"type":597,"tag":807,"props":59754,"children":59755},{},[59756],{"type":603,"value":59757},"加载一个程序集",{"type":597,"tag":621,"props":59759,"children":59761},{"code":59760},"AppDomain.CurrentDomain.Load(AssemblyName.GetAssemblyName(\"path\"));\nAssemblyLoadContext.Default.LoadFromAssemblyName(AssemblyName.GetAssemblyName(\"path\"));\n",[59762],{"type":597,"tag":629,"props":59763,"children":59764},{"__ignoreMap":591},[59765],{"type":603,"value":59760},{"type":597,"tag":1321,"props":59767,"children":59768},{},[59769],{"type":597,"tag":807,"props":59770,"children":59771},{},[59772],{"type":603,"value":59773},"加载一个程序集 路径或者字节数组:",{"type":597,"tag":621,"props":59775,"children":59777},{"code":59776},"AppDomain.CurrentDomain.Load(File.ReadAllBytes(\"path\"));\nAssemblyLoadContext.Default.LoadFromStream(File.OpenRead(\"path\"));// orAssemblyLoadContext.Default.LoadFromAssemblyPath(\"path\");\n",[59778],{"type":597,"tag":629,"props":59779,"children":59780},{"__ignoreMap":591},[59781],{"type":603,"value":59776},{"type":597,"tag":1321,"props":59783,"children":59784},{},[59785],{"type":597,"tag":807,"props":59786,"children":59787},{},[59788],{"type":603,"value":59789},"测试封装的获取程序集方法GetAssemblies",{"type":597,"tag":606,"props":59791,"children":59792},{},[59793],{"type":603,"value":59794},"准备工作：",{"type":597,"tag":803,"props":59796,"children":59797},{},[59798,59803],{"type":597,"tag":807,"props":59799,"children":59800},{},[59801],{"type":603,"value":59802},"创建一个控制台程序",{"type":597,"tag":807,"props":59804,"children":59805},{},[59806],{"type":603,"value":59807},"添加一个类库项目，命名为AA.Service",{"type":597,"tag":606,"props":59809,"children":59810},{},[59811],{"type":603,"value":59812},"在控制台应用程序，添加一个类TypeFinder代码如下：",{"type":597,"tag":621,"props":59814,"children":59816},{"code":59815},"public class TypeFinder\n    {\n        /// \u003Csummary>\n        /// 获取物理路径 \n        /// \u003C/summary>\n        /// \u003Creturns>\\bin\\Debug\\netcoreapp3.0\u003C/returns>\n        public virtual string GetBinDirectory()\n        {\n            return AppContext.BaseDirectory;\n        }\n        /// \u003Csummary>\n        /// 获取程序集\n        /// \u003C/summary>\n        /// \u003Creturns>\u003C/returns>\n        public IList\u003CAssembly> GetAssemblies()\n        {\n            var binPath = GetBinDirectory();\n            var addedAssemblyNames = new List\u003Cstring>();\n            var assemblies = new List\u003CAssembly>();\n\n            //\n            foreach (var assembly in AssemblyLoadContext.Default.Assemblies.Where(a=>IsNotSysAssembly(a.FullName)))\n            {\n                if (addedAssemblyNames.Contains(assembly.FullName))\n                    continue;\n                addedAssemblyNames.Add(assembly.FullName);\n            }\n\n            foreach (var dllPath in Directory.GetFiles(binPath, \"*.dll\",\n                 SearchOption.TopDirectoryOnly))\n            {\n                try\n                {\n                    var an = AssemblyName.GetAssemblyName(dllPath);\n                    if (!addedAssemblyNames.Contains(an.FullName))\n                    {\n                        AssemblyLoadContext.Default.LoadFromAssemblyName(an);\n                    }\n                }\n                catch (BadImageFormatException ex)\n                {\n                    Trace.TraceError(ex.ToString());\n                }\n            }\n\n            foreach (var assembly in AssemblyLoadContext.Default.Assemblies.Where(a => IsNotSysAssembly(a.FullName)))\n            {\n                if (addedAssemblyNames.Contains(assembly.FullName))\n                    continue;\n\n                assemblies.Add(assembly);\n            }\n            return assemblies;\n        }\n\n        /// \u003Csummary>\n        /// 排除系统程序集\n        /// \u003C/summary>\n        /// \u003Cparam name=\"assemblyName\">\u003C/param>\n        /// \u003Creturns>\u003C/returns>\n        private bool IsNotSysAssembly(string assemblyName) \n        {\n            return !assemblyName.StartsWith(\"Microsoft.\")\n                      && !assemblyName.StartsWith(\"System.\")\n                      && !assemblyName.StartsWith(\"Newtonsoft.\")\n                      && assemblyName != \"netstandard\";\n        }\n    }\n",[59817],{"type":597,"tag":629,"props":59818,"children":59819},{"__ignoreMap":591},[59820],{"type":603,"value":59815},{"type":597,"tag":606,"props":59822,"children":59823},{},[59824],{"type":603,"value":59825},"在控制台应用程序添加引用AA.Service类库，生成查看bin文件，出现了AA.Service.dll",{"type":597,"tag":606,"props":59827,"children":59828},{},[59829],{"type":597,"tag":719,"props":59830,"children":59832},{"alt":719,"src":59831},"/images/2020-01-06-dll-load/640.webp",[],{"type":597,"tag":606,"props":59834,"children":59835},{},[59836],{"type":603,"value":59837},"调用代码输出(排除系统dll以Microsoft、system开头的)程序集：",{"type":597,"tag":621,"props":59839,"children":59841},{"code":59840},"var assemblies= new TypeFinder().GetAssemblies();        \nforeach (var a in assemblies)             \n{                \nConsole.WriteLine(a.FullName);            \n}\n",[59842],{"type":597,"tag":629,"props":59843,"children":59844},{"__ignoreMap":591},[59845],{"type":603,"value":59840},{"type":597,"tag":606,"props":59847,"children":59848},{},[59849],{"type":603,"value":59850},"输出",{"type":597,"tag":606,"props":59852,"children":59853},{},[59854],{"type":597,"tag":719,"props":59855,"children":59856},{"alt":719,"src":59831},[],{"title":591,"searchDepth":787,"depth":787,"links":59858},[],"content:dotnet:2020-01-06-dll-load.md","dotnet/2020-01-06-dll-load.md","2020-01-06",{"_path":41,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":40,"description":59863,"body":59864,"_type":791,"_id":60342,"_source":793,"_file":60343,"_extension":795,"date":60344},"Big Endian是指低地址存放最高有效字节（MSB），而Little Endian则是低地址存放最低有效字节（LSB）。",{"type":594,"children":59865,"toc":60335},[59866,59872,59876,59884,59889,59894,59902,59915,59926,59934,59939,59943,59950,59963,59973,59985,59993,59999,60004,60036,60044,60117,60123,60128,60132,60138,60143,60148,60157,60162,60168,60179,60187,60195,60203,60211,60219,60227,60232,60243,60254,60259,60267,60273,60278,60283,60288,60293,60298,60303,60314,60325,60330],{"type":597,"tag":857,"props":59867,"children":59869},{"id":59868},"那么何为字节序endia呢",[59870],{"type":603,"value":59871},"那么何为字节序（Endia）呢？",{"type":597,"tag":606,"props":59873,"children":59874},{},[59875],{"type":603,"value":59863},{"type":597,"tag":606,"props":59877,"children":59878},{},[59879],{"type":597,"tag":1080,"props":59880,"children":59881},{},[59882],{"type":603,"value":59883},"大端模式",{"type":597,"tag":606,"props":59885,"children":59886},{},[59887],{"type":603,"value":59888},"所谓的大端模式（Big-endian），是指数据的高字节，保存在内存的低地址中，而数据的低字节，保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；",{"type":597,"tag":606,"props":59890,"children":59891},{},[59892],{"type":603,"value":59893},"例子：",{"type":597,"tag":621,"props":59895,"children":59897},{"code":59896},"0000430: e684 6c4e 0100 1800 53ef 0100 0100 0000\n\n0000440: b484 6c4e 004e ed00 0000 0000 0100 0000\n",[59898],{"type":597,"tag":629,"props":59899,"children":59900},{"__ignoreMap":591},[59901],{"type":603,"value":59896},{"type":597,"tag":606,"props":59903,"children":59904},{},[59905,59907,59913],{"type":603,"value":59906},"在大端模式下，前32位应该这样读:",{"type":597,"tag":629,"props":59908,"children":59910},{"className":59909},[],[59911],{"type":603,"value":59912}," e6 84 6c 4e",{"type":603,"value":59914}," ( 假设int占4个字节)",{"type":597,"tag":606,"props":59916,"children":59917},{},[59918,59920],{"type":603,"value":59919},"记忆方法: ",{"type":597,"tag":629,"props":59921,"children":59923},{"className":59922},[],[59924],{"type":603,"value":59925},"地址的增长顺序与值的增长顺序相反",{"type":597,"tag":606,"props":59927,"children":59928},{},[59929],{"type":597,"tag":1080,"props":59930,"children":59931},{},[59932],{"type":603,"value":59933},"小端模式",{"type":597,"tag":606,"props":59935,"children":59936},{},[59937],{"type":603,"value":59938},"所谓的小端模式（Little-endian），是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致。",{"type":597,"tag":606,"props":59940,"children":59941},{},[59942],{"type":603,"value":59893},{"type":597,"tag":621,"props":59944,"children":59945},{"code":59896},[59946],{"type":597,"tag":629,"props":59947,"children":59948},{"__ignoreMap":591},[59949],{"type":603,"value":59896},{"type":597,"tag":606,"props":59951,"children":59952},{},[59953,59955,59961],{"type":603,"value":59954},"在小端模式下，前32位应该这样读: ",{"type":597,"tag":629,"props":59956,"children":59958},{"className":59957},[],[59959],{"type":603,"value":59960},"4e 6c 84 e6",{"type":603,"value":59962},"( 假设int占4个字节)",{"type":597,"tag":606,"props":59964,"children":59965},{},[59966,59967],{"type":603,"value":59919},{"type":597,"tag":629,"props":59968,"children":59970},{"className":59969},[],[59971],{"type":603,"value":59972},"地址的增长顺序与值的增长顺序相同",{"type":597,"tag":606,"props":59974,"children":59975},{},[59976,59978,59983],{"type":603,"value":59977},"有图有真相，举个例子，数字 ",{"type":597,"tag":1080,"props":59979,"children":59980},{},[59981],{"type":603,"value":59982},"0x12345678",{"type":603,"value":59984}," 在两种不同字节序CPU中的存储顺序如下图",{"type":597,"tag":606,"props":59986,"children":59987},{},[59988],{"type":597,"tag":719,"props":59989,"children":59992},{"alt":59990,"src":59991},"pic1","/images/2020-01-05-big-little-endian/20160414225024808",[],{"type":597,"tag":598,"props":59994,"children":59996},{"id":59995},"为什么会有这样的情况呢",[59997],{"type":603,"value":59998},"为什么会有这样的情况呢？",{"type":597,"tag":606,"props":60000,"children":60001},{},[60002],{"type":603,"value":60003},"这是因为在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器），另外，对于位数大于8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如果将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。例如一个16bit的short型x，在内存中的地址为0x0010，x的值为0x1122，那么0x11为高字节，0x22为低字节。对于大端模式，就将0x11放在低地址中，即0x0010中，0x22放在高地址中，即0x0011中。小端模式，刚好相反。我们常用的X86结构是小端模式，而KEIL C51则为大端模式。很多的ARM，DSP都为小端模式。有些ARM处理器还可以由硬件来选择是大端模式还是小端模式。",{"type":597,"tag":1321,"props":60005,"children":60006},{},[60007,60019,60031],{"type":597,"tag":807,"props":60008,"children":60009},{},[60010,60012,60017],{"type":603,"value":60011},"Motorola的",{"type":597,"tag":1080,"props":60013,"children":60014},{},[60015],{"type":603,"value":60016},"PowerPC",{"type":603,"value":60018},"系列CPU采用Big Endian方式存储数据。",{"type":597,"tag":807,"props":60020,"children":60021},{},[60022,60024,60029],{"type":603,"value":60023},"Intel的",{"type":597,"tag":1080,"props":60025,"children":60026},{},[60027],{"type":603,"value":60028},"x86",{"type":603,"value":60030},"系列CPU采用Little Endian方式存储数据。",{"type":597,"tag":807,"props":60032,"children":60033},{},[60034],{"type":603,"value":60035},"ARM既可以工作在大端模式，也可以工作在小端模式。",{"type":597,"tag":606,"props":60037,"children":60038},{},[60039],{"type":597,"tag":1080,"props":60040,"children":60041},{},[60042],{"type":603,"value":60043},"再来说说，一些我所收集到的情况吧。",{"type":597,"tag":1321,"props":60045,"children":60046},{},[60047,60059,60070,60082,60094],{"type":597,"tag":807,"props":60048,"children":60049},{},[60050,60052,60057],{"type":603,"value":60051},"Windos(x86,x64)和Linux(x86,x64)都是",{"type":597,"tag":1080,"props":60053,"children":60054},{},[60055],{"type":603,"value":60056},"Little Endian",{"type":603,"value":60058},"操作系统",{"type":597,"tag":807,"props":60060,"children":60061},{},[60062,60064,60068],{"type":603,"value":60063},"在ARM上，我见到的都是用",{"type":597,"tag":1080,"props":60065,"children":60066},{},[60067],{"type":603,"value":60056},{"type":603,"value":60069},"方式存储数据。",{"type":597,"tag":807,"props":60071,"children":60072},{},[60073,60075,60080],{"type":603,"value":60074},"C/C++语言编写的程序里数据存储顺序是跟编译平台",{"type":597,"tag":1080,"props":60076,"children":60077},{},[60078],{"type":603,"value":60079},"所在的CPU相关",{"type":603,"value":60081},"的。",{"type":597,"tag":807,"props":60083,"children":60084},{},[60085,60087,60092],{"type":603,"value":60086},"JAVA编写的程序则唯一采用",{"type":597,"tag":1080,"props":60088,"children":60089},{},[60090],{"type":603,"value":60091},"Big Endian",{"type":603,"value":60093},"方式来存储数据。",{"type":597,"tag":807,"props":60095,"children":60096},{},[60097,60099,60103,60105,60109,60111,60116],{"type":603,"value":60098},"所有网络协议也都是采用",{"type":597,"tag":1080,"props":60100,"children":60101},{},[60102],{"type":603,"value":60091},{"type":603,"value":60104},"的方式来传输数据的。所以有时我们也会把",{"type":597,"tag":1080,"props":60106,"children":60107},{},[60108],{"type":603,"value":60091},{"type":603,"value":60110},"方式称之为",{"type":597,"tag":1080,"props":60112,"children":60113},{},[60114],{"type":603,"value":60115},"网络字节序",{"type":603,"value":758},{"type":597,"tag":598,"props":60118,"children":60120},{"id":60119},"为什么要注意字节序的问题呢",[60121],{"type":603,"value":60122},"为什么要注意字节序的问题呢？",{"type":597,"tag":606,"props":60124,"children":60125},{},[60126],{"type":603,"value":60127},"你可能这么问。当然，如果你写的程序只在单机环境下面运行，并且不和别人的程序打交道，那么你完全可以忽略字节序的存在。但是，如果你的程序要跟别人的程序产生交互呢？尤其是当你把你在微机上运算的结果运用到计算机群上去的话。在这里我想说说两种语言。C/C++语言编写的程序里数据存储顺序是跟编译平台所在的CPU相关的，而JAVA编写的程序则唯一采用big endian方式来存储数据。试想，如果你用C/C++语言在x86平台下编写的程序跟别人的JAVA程序互通时会产生什么结果？就拿上面的 0x12345678来说，你的程序传递给别人的一个数据，将指向0x12345678的指针传给了JAVA程序，由于JAVA采取big endian方式存储数据，很自然的它会将你的数据翻译为0x78563412。什么？竟然变成另外一个数字了？是的，就是这种后果。因此，在你的C程序传给JAVA程序之前有必要进行字节序的转换工作。",{"type":597,"tag":857,"props":60129,"children":60130},{"id":60115},[60131],{"type":603,"value":60115},{"type":597,"tag":598,"props":60133,"children":60135},{"id":60134},"一在进行网络通信时是否需要进行字节序转换",[60136],{"type":603,"value":60137},"一、在进行网络通信时是否需要进行字节序转换？",{"type":597,"tag":606,"props":60139,"children":60140},{},[60141],{"type":603,"value":60142},"相同字节序的平台在进行网络通信时可以不进行字节序转换，但是跨平台进行网络数据通信时必须进行字节序转换。",{"type":597,"tag":606,"props":60144,"children":60145},{},[60146],{"type":603,"value":60147},"原因如下：网络协议规定接收到得第一个字节是高字节，存放到低地址，所以发送时会首先去低地址取数据的高字节。小端模式的多字节数据在存放时，低地址存放的是低字节，而被发送方网络协议函数发送时会首先去低地址取数据（想要取高字节，真正取得是低字节），接收方网络协议函数接收时会将接收到的第一个字节存放到低地址（想要接收高字节，真正接收的是低字节），所以最后双方都正确的收发了数据。而相同平台进行通信时，如果双方都进行转换最后虽然能够正确收发数据，但是所做的转换是没有意义的，造成资源的浪费。而不同平台进行通信时必须进行转换，不转换会造成错误的收发数据，字节序转换函数会根据当前平台的存储模式做出相应正确的转换，如果当前平台是大端，则直接返回不进行转换，如果当前平台是小端，会将接收到得网络字节序进行转换。",{"type":597,"tag":598,"props":60149,"children":60151},{"id":60150},"二网络字节序",[60152],{"type":597,"tag":1080,"props":60153,"children":60154},{},[60155],{"type":603,"value":60156},"二、网络字节序",{"type":597,"tag":606,"props":60158,"children":60159},{},[60160],{"type":603,"value":60161},"​    网络上传输的数据都是字节流,对于一个多字节数值,在进行网络传输的时候,先传递哪个字节?也就是说,当接收端收到第一个字节的时候,它将这个字节作为高位字节还是低位字节处理,是一个比较有意义的问题; UDP/TCP/IP协议规定:把接收到的第一个字节当作高位字节看待,这就要求发送端发送的第一个字节是高位字节;而在发送端发送数据时,发送的第一个字节是该数值在内存中的起始地址处对应的那个字节,也就是说,该数值在内存中的起始地址处对应的那个字节就是要发送的第一个高位字节(即:高位字节存放在低地址处);由此可见,多字节数值在发送之前,在内存中因该是以大端法存放的; 所以说,网络字节序是大端字节序; 比如,我们经过网络发送整型数值0x12345678时,在80X86平台中,它是以小端发存放的,在发送之前需要使用系统提供的字节序转换函数htonl()将其转换成大端法存放的数值;",{"type":597,"tag":857,"props":60163,"children":60165},{"id":60164},"c-大端转换",[60166],{"type":603,"value":60167},"c# 大端转换",{"type":597,"tag":606,"props":60169,"children":60170},{},[60171,60173,60177],{"type":603,"value":60172},"c#在windows平台上是小端字节序(Windos(x86,x64)和Linux(x86,x64)都是",{"type":597,"tag":1080,"props":60174,"children":60175},{},[60176],{"type":603,"value":60056},{"type":603,"value":60178},"操作系统,不止是c#)。网络发送字节流是按大端序发送，也就是从左到右发送，和c#的小端序相反，造成网关不能正常识别协议。所以需要转换",{"type":597,"tag":606,"props":60180,"children":60181},{},[60182],{"type":597,"tag":1080,"props":60183,"children":60184},{},[60185],{"type":603,"value":60186},"大小端转换",{"type":597,"tag":621,"props":60188,"children":60190},{"code":60189},"int x = 439041118;  // 十六进制为 1A2B3C5E\n\nstring s = null;\n\nbyte[] b = BitConverter.GetBytes( x );\n\ns = BitConverter.ToString( b ); // 小端模式\nConsole.WriteLine( s ); // 小端输出 为 5E-3C-2B-1A\n\nArray.Reverse( b ); // 反转\n\ns = BitConverter.ToString( b ); // 大端模式\nConsole.WriteLine( \"{0:x}\", s ); // 大端输出 为 1A-2B-3C-5E\n\nConsole.ReadKey();\n",[60191],{"type":597,"tag":629,"props":60192,"children":60193},{"__ignoreMap":591},[60194],{"type":603,"value":60189},{"type":597,"tag":606,"props":60196,"children":60197},{},[60198],{"type":597,"tag":1080,"props":60199,"children":60200},{},[60201],{"type":603,"value":60202},"C# 判断数据在此计算机结构中存储时的字节顺序（“Endian”性质），即大端还是小端",{"type":597,"tag":621,"props":60204,"children":60206},{"code":60205},"int data = 439041118; // 十六进制为 1A2B3C5E\nbyte[] bData = BitConverter.GetBytes( data );\n            \nif (BitConverter.IsLittleEndian) // 若为 小端模式\n{\n   Array.Reverse( bData ); // 转换为 大端模式               \n}\nstring s = BitConverter.ToString( bData );\n\nConsole.WriteLine(s);\n\nConsole.ReadKey();\n",[60207],{"type":597,"tag":629,"props":60208,"children":60209},{"__ignoreMap":591},[60210],{"type":603,"value":60205},{"type":597,"tag":606,"props":60212,"children":60213},{},[60214],{"type":597,"tag":1080,"props":60215,"children":60216},{},[60217],{"type":603,"value":60218},"一些封装",{"type":597,"tag":621,"props":60220,"children":60222},{"code":60221},"\n//翻转byte数组\npublic static void ReverseBytes(byte[] bytes)\n{\n    byte tmp;\n    int len = bytes.Length;\n\n    for (int i = 0; i \u003C len / 2; i++ )\n    {\n        tmp = bytes[len - 1 - i];\n        bytes[len - 1 - i] = bytes[i];\n        bytes[i] = tmp;\n    }\n}\n\n//规定转换起始位置和长度\n public static void ReverseBytes(byte[] bytes, int start, int len)\n {\n     int end = start + len - 1;\n     byte tmp;\n     int i = 0;\n     for (int index = start; index \u003C start + len/2; index++,i++)\n     {\n         tmp = bytes[end - i];\n         bytes[end - i] = bytes[index];\n         bytes[index] = tmp;\n     }\n }\n\n// 翻转字节顺序 (16-bit)\npublic static UInt16 ReverseBytes(UInt16 value)\n{\n  return (UInt16)((value & 0xFFU) \u003C\u003C 8 | (value & 0xFF00U) >> 8);\n}\n\n\n// 翻转字节顺序 (32-bit)\npublic static UInt32 ReverseBytes(UInt32 value)\n{\n  return (value & 0x000000FFU) \u003C\u003C 24 | (value & 0x0000FF00U) \u003C\u003C 8 |\n         (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;\n}\n\n\n// 翻转字节顺序 (64-bit)\npublic static UInt64 ReverseBytes(UInt64 value)\n{\n  return (value & 0x00000000000000FFUL) \u003C\u003C 56 | (value & 0x000000000000FF00UL) \u003C\u003C 40 |\n         (value & 0x0000000000FF0000UL) \u003C\u003C 24 | (value & 0x00000000FF000000UL) \u003C\u003C 8 |\n         (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 |\n         (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;\n}\n",[60223],{"type":597,"tag":629,"props":60224,"children":60225},{"__ignoreMap":591},[60226],{"type":603,"value":60221},{"type":597,"tag":606,"props":60228,"children":60229},{},[60230],{"type":603,"value":60231},"另外c#直接提供了网络字节序转换方法。",{"type":597,"tag":606,"props":60233,"children":60234},{},[60235,60241],{"type":597,"tag":629,"props":60236,"children":60238},{"className":60237},[],[60239],{"type":603,"value":60240},"System.Net.IPAddress.HostToNetworkOrder",{"type":603,"value":60242},"（本机到网络转换）",{"type":597,"tag":606,"props":60244,"children":60245},{},[60246,60252],{"type":597,"tag":629,"props":60247,"children":60249},{"className":60248},[],[60250],{"type":603,"value":60251},"System.Net.IPAddress.NetworkToHostOrder",{"type":603,"value":60253},"(网络字节转成本机)",{"type":597,"tag":606,"props":60255,"children":60256},{},[60257],{"type":603,"value":60258},"推荐使用这种方法，简单有效。",{"type":597,"tag":621,"props":60260,"children":60262},{"code":60261},"short x = 6;\nshort b = System.Net.IPAddress.HostToNetworkOrder(x); //把x转成相应的大端字节数\nbyte[] bb = System.BitConverter.GetBytes(b);//这样直接取到的就是大端字节序字节数组。\n",[60263],{"type":597,"tag":629,"props":60264,"children":60265},{"__ignoreMap":591},[60266],{"type":603,"value":60261},{"type":597,"tag":598,"props":60268,"children":60270},{"id":60269},"对于字符串型",[60271],{"type":603,"value":60272},"对于字符串型：",{"type":597,"tag":606,"props":60274,"children":60275},{},[60276],{"type":603,"value":60277},"使用 System.Text.Encoding.Default.GetBytes();直接取字串对应字节数组。",{"type":597,"tag":606,"props":60279,"children":60280},{},[60281],{"type":603,"value":60282},"不知道为什么这个方法取到的直接就是大端字节数组。不用转换。",{"type":597,"tag":606,"props":60284,"children":60285},{},[60286],{"type":603,"value":60287},"后来查了一下，关于字串的字节序问题，因为gbk和utf-8都是以单个字节表示数字的，所以不存在字节序问题，在多个不同系统架构都用。对于utf-16，则是以双字节表示一个整数，所以为会有字节序问题，分大小端unicode。",{"type":597,"tag":606,"props":60289,"children":60290},{},[60291],{"type":603,"value":60292},"System.Text.Encoding.Default.GetBytes();在我的简体中文系统上是以gb2312的编码，也就是单个字来进行编码的，所以也不会有字节序问题。",{"type":597,"tag":606,"props":60294,"children":60295},{},[60296],{"type":603,"value":60297},"补充：“**对于任何字符编码，编码单元的顺序是由编码方案指定的，与endian无关。**例如GBK的编码单元是字节，用两个字节表示一个汉字。这两个字节的顺序是固定的，不受CPU字节序的影响。UTF-16的编码单元是word（双字节），word之间的顺序是编码方案指定的，word内部的字节排列才会受到endian的影响。”，",{"type":597,"tag":606,"props":60299,"children":60300},{},[60301],{"type":603,"value":60302},"所以utf-8也没有字节序的问题。字节序问题之存在于需要使用两个字节以上来表示整数。而UTF-8只是一串字节流，不存在字节序问题，不过将这些字节流翻译成Unicode比其他的传输方式复杂。以字节为单位编码的，无论一个汉字是多少个字节，都无字节序问题。",{"type":597,"tag":606,"props":60304,"children":60305},{},[60306,60308],{"type":603,"value":60307},"你注意，字节序问题不是指多个字节传输的先后，这个是固定的无异议的。而是指一个多字节编码在机器中的表示方式问题。\n",{"type":597,"tag":629,"props":60309,"children":60311},{"className":60310},[],[60312],{"type":603,"value":60313},"char str[] = \"abaksdkakskasklasflk\"；",{"type":597,"tag":606,"props":60315,"children":60316},{},[60317,60319],{"type":603,"value":60318},"这个无字节序问题。但\n",{"type":597,"tag":629,"props":60320,"children":60322},{"className":60321},[],[60323],{"type":603,"value":60324},"int  str[] = {0x11223344, 2, 3 }",{"type":597,"tag":606,"props":60326,"children":60327},{},[60328],{"type":603,"value":60329},"就有字节序问题了。因为str[0]同样数值不同机器中表示不同。",{"type":597,"tag":606,"props":60331,"children":60332},{},[60333],{"type":603,"value":60334},"而剩下的， 就是字符编码内部的字节序了。比如UTF-16是用两个字节表示一个字符，但是这两个字节内部如何排序，系统并不知道，所以必须指定字节序。但是UTF-8由于几个字节表示并不相同，一定要从那个表示长度的字节开始读，相当于一开始就知道该从哪里是队头队尾，所以不存在字节序问题。",{"title":591,"searchDepth":787,"depth":787,"links":60336},[60337,60338,60339,60340,60341],{"id":59995,"depth":787,"text":59998},{"id":60119,"depth":787,"text":60122},{"id":60134,"depth":787,"text":60137},{"id":60150,"depth":787,"text":60156},{"id":60269,"depth":787,"text":60272},"content:dotnet:2020-01-05-big-little-endian.md","dotnet/2020-01-05-big-little-endian.md","2020-01-05",{"_path":282,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":281,"description":60346,"body":60347,"_type":791,"_id":60574,"_source":793,"_file":60575,"_extension":795,"date":60576},"使用普通用户登陆生成私钥生成后可以把 Key comment 改为你想要的名称, 这样下面你在连接的时候可以使用比较熟悉的Username 作为登录名, 然后使用 Ctrl + C 把上面显示的那串 ssh-rsa.. 开头的公钥复制下来. 待会要用到这个.然后保存好你的私钥和公钥到本地目录中..私钥是本地用的,公钥是远程服务器用的添加公钥到谷歌云的实例中点击实例的名称进入实例的详情后. 进入页面后点击上方的修改, 然后拉到下方找到如下图的地方点击添加一项, 把刚刚复制的公钥粘贴进去, 记得, 正确的公钥是在结尾会有一个空格加上你的 Username , 例如: “…== qian”使用SSH",{"type":594,"children":60348,"toc":60569},[60349,60354,60359,60367,60372,60380,60401,60406,60414,60419,60425,60433,60439,60444,60458,60466,60480,60485,60491,60499,60504,60512,60517,60525,60539,60547,60561],{"type":597,"tag":857,"props":60350,"children":60352},{"id":60351},"使用普通用户登陆",[60353],{"type":603,"value":60351},{"type":597,"tag":1023,"props":60355,"children":60357},{"id":60356},"生成私钥",[60358],{"type":603,"value":60356},{"type":597,"tag":606,"props":60360,"children":60361},{},[60362],{"type":597,"tag":719,"props":60363,"children":60366},{"alt":60364,"src":60365},"image-20200112043711450","/images/2020-01-02-google-clound-local-login/image-20200112043711450.png",[],{"type":597,"tag":606,"props":60368,"children":60369},{},[60370],{"type":603,"value":60371},"生成后可以把 Key comment 改为你想要的名称, 这样下面你在连接的时候可以使用比较熟悉的Username 作为登录名, 然后使用 Ctrl + C 把上面显示的那串 ssh-rsa.. 开头的公钥复制下来. 待会要用到这个.",{"type":597,"tag":606,"props":60373,"children":60374},{},[60375],{"type":597,"tag":719,"props":60376,"children":60379},{"alt":60377,"src":60378},"image-20200112043833424","/images/2020-01-02-google-clound-local-login/image-20200112043833424.png",[],{"type":597,"tag":606,"props":60381,"children":60382},{},[60383,60385,60391,60393,60399],{"type":603,"value":60384},"然后保存好你的私钥和公钥到本地目录中..私钥是",{"type":597,"tag":629,"props":60386,"children":60388},{"className":60387},[],[60389],{"type":603,"value":60390},"本地",{"type":603,"value":60392},"用的,公钥是",{"type":597,"tag":629,"props":60394,"children":60396},{"className":60395},[],[60397],{"type":603,"value":60398},"远程服务器",{"type":603,"value":60400},"用的",{"type":597,"tag":857,"props":60402,"children":60404},{"id":60403},"添加公钥到谷歌云的实例中",[60405],{"type":603,"value":60403},{"type":597,"tag":606,"props":60407,"children":60408},{},[60409],{"type":597,"tag":719,"props":60410,"children":60413},{"alt":60411,"src":60412},"image-20200112044032323","/images/2020-01-02-google-clound-local-login/image-20200112044032323.png",[],{"type":597,"tag":606,"props":60415,"children":60416},{},[60417],{"type":603,"value":60418},"点击实例的名称进入实例的详情后. 进入页面后点击上方的修改, 然后拉到下方找到如下图的地方点击添加一项, 把刚刚复制的公钥粘贴进去, 记得, 正确的公钥是在结尾会有一个空格加上你的 Username , 例如: “…== qian”",{"type":597,"tag":857,"props":60420,"children":60422},{"id":60421},"使用ssh工具连接到实例",[60423],{"type":603,"value":60424},"使用SSH工具连接到实例",{"type":597,"tag":606,"props":60426,"children":60427},{},[60428],{"type":597,"tag":719,"props":60429,"children":60432},{"alt":60430,"src":60431},"image-20200112044256601","/images/2020-01-02-google-clound-local-login/image-20200112044256601.png",[],{"type":597,"tag":857,"props":60434,"children":60436},{"id":60435},"使用-root-账户登陆和修改root密码",[60437],{"type":603,"value":60438},"使用 root 账户登陆和修改root密码",{"type":597,"tag":1023,"props":60440,"children":60442},{"id":60441},"先选择从浏览器打开ssh连接服务器",[60443],{"type":603,"value":60441},{"type":597,"tag":606,"props":60445,"children":60446},{},[60447,60456],{"type":597,"tag":886,"props":60448,"children":60451},{"href":60449,"rel":60450},"https://ycb.hk/usr/uploads/2018/03/2557178057.png",[890],[60452],{"type":597,"tag":719,"props":60453,"children":60455},{"alt":719,"src":60454},"/images/2020-01-02-google-clound-local-login/2557178057.png",[],{"type":603,"value":60457},"\n连接登录成功后，输入以下命令",{"type":597,"tag":621,"props":60459,"children":60461},{"code":60460},"sudo -i  #切换到root\npasswd   #修改密码\n",[60462],{"type":597,"tag":629,"props":60463,"children":60464},{"__ignoreMap":591},[60465],{"type":603,"value":60460},{"type":597,"tag":606,"props":60467,"children":60468},{},[60469,60478],{"type":597,"tag":886,"props":60470,"children":60473},{"href":60471,"rel":60472},"https://ycb.hk/usr/uploads/2018/03/2932129962.png",[890],[60474],{"type":597,"tag":719,"props":60475,"children":60477},{"alt":719,"src":60476},"/images/2020-01-02-google-clound-local-login/2932129962.png",[],{"type":603,"value":60479},"\n然后会要求输入新密码，然后再重复一次密码，输入密码的时候不会显示出来，所以直接输入密码，然后回车，再然后重复输入密码回车。",{"type":597,"tag":606,"props":60481,"children":60482},{},[60483],{"type":603,"value":60484},"修改root密码完成",{"type":597,"tag":1023,"props":60486,"children":60488},{"id":60487},"接着修改ssh配置文件etcsshsshd_config",[60489],{"type":603,"value":60490},"接着修改SSH配置文件/etc/ssh/sshd_config",{"type":597,"tag":621,"props":60492,"children":60494},{"code":60493},"vi /etc/ssh/sshd_config #编辑文件\n",[60495],{"type":597,"tag":629,"props":60496,"children":60497},{"__ignoreMap":591},[60498],{"type":603,"value":60493},{"type":597,"tag":606,"props":60500,"children":60501},{},[60502],{"type":603,"value":60503},"然后再输",{"type":597,"tag":621,"props":60505,"children":60507},{"code":60506},"i   #进入编辑模式\n",[60508],{"type":597,"tag":629,"props":60509,"children":60510},{"__ignoreMap":591},[60511],{"type":603,"value":60506},{"type":597,"tag":606,"props":60513,"children":60514},{},[60515],{"type":603,"value":60516},"找到以下内容并修改",{"type":597,"tag":621,"props":60518,"children":60520},{"code":60519},"PermitRootLogin yes //默认为no，需要开启root用户访问改为yes\nPasswordAuthentication yes //默认为no，改为yes开启密码登陆\n",[60521],{"type":597,"tag":629,"props":60522,"children":60523},{"__ignoreMap":591},[60524],{"type":603,"value":60519},{"type":597,"tag":606,"props":60526,"children":60527},{},[60528,60537],{"type":597,"tag":886,"props":60529,"children":60532},{"href":60530,"rel":60531},"https://ycb.hk/usr/uploads/2018/03/3324977715.png",[890],[60533],{"type":597,"tag":719,"props":60534,"children":60536},{"alt":719,"src":60535},"/images/2020-01-02-google-clound-local-login/3324977715.png",[],{"type":603,"value":60538},"\n修改完成后，再下按 esc 键，然后再输入",{"type":597,"tag":621,"props":60540,"children":60542},{"code":60541},":wq   #保存并退出\n",[60543],{"type":597,"tag":629,"props":60544,"children":60545},{"__ignoreMap":591},[60546],{"type":603,"value":60541},{"type":597,"tag":606,"props":60548,"children":60549},{},[60550,60559],{"type":597,"tag":886,"props":60551,"children":60554},{"href":60552,"rel":60553},"https://ycb.hk/usr/uploads/2018/03/1145294211.png",[890],[60555],{"type":597,"tag":719,"props":60556,"children":60558},{"alt":719,"src":60557},"/images/2020-01-02-google-clound-local-login/1145294211.png",[],{"type":603,"value":60560},"\n最后重启下服务器即可",{"type":597,"tag":621,"props":60562,"children":60564},{"code":60563},"reboot    #重启服务器\n",[60565],{"type":597,"tag":629,"props":60566,"children":60567},{"__ignoreMap":591},[60568],{"type":603,"value":60563},{"title":591,"searchDepth":787,"depth":787,"links":60570},[60571,60572,60573],{"id":60356,"depth":1530,"text":60356},{"id":60441,"depth":1530,"text":60441},{"id":60487,"depth":1530,"text":60490},"content:tool:2020-01-02-google-clound-local-login.md","tool/2020-01-02-google-clound-local-login.md","2020-01-02",{"_path":421,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":420,"description":60578,"body":60579,"_type":791,"_id":61097,"_source":793,"_file":61098,"_extension":795,"date":61099},"Entitas執行流程​      也就是说整个ECS系统的内部数据维护(Group、Collector、EntityIndex)复杂度主要放在Entity的修改上了。\n​      在给一个Entity添加一个Component时，不仅仅是对Entity进行了修改，还会通过事件将这个添加传递给Context，Context遍历所有Group，找到满足这次修改条件的Group，对所有受到影响的Group进行修改。然后再通过Group将这次修改事件分发到Collector或其他监听该Group的模块中去。\n  这种方式带来的好处十分明显，那就是获取一种类型的Entity（也就是一个Group），",{"type":594,"children":60580,"toc":61092},[60581,60587,60594,60599,60603,60608,60613,60618,60623,60631,60636,60652,60657,60662,60671,60676,60685,60690,60696,60701,60710,60715,60724,60729,60734,60740,60781,60789,60794,60851,60856,60861,60869,60877,60882,60887,60914,60919,60927,60937,60943,60956,60961,60966,60972,60977,60985,60990,60995,61003,61008,61015,61036,61047,61058,61062],{"type":597,"tag":857,"props":60582,"children":60584},{"id":60583},"entitas執行流程",[60585],{"type":603,"value":60586},"Entitas執行流程",{"type":597,"tag":606,"props":60588,"children":60589},{},[60590],{"type":597,"tag":719,"props":60591,"children":60593},{"alt":591,"src":60592},"/images/2020-01-01-unity-entitas/1362861-20190531225036556-1995562595%5B1%5D.png",[],{"type":597,"tag":606,"props":60595,"children":60596},{},[60597],{"type":603,"value":60598},"​      也就是说整个ECS系统的内部数据维护(Group、Collector、EntityIndex)复杂度主要放在Entity的修改上了。\n​      在给一个Entity添加一个Component时，不仅仅是对Entity进行了修改，还会通过事件将这个添加传递给Context，Context遍历所有Group，找到满足这次修改条件的Group，对所有受到影响的Group进行修改。然后再通过Group将这次修改事件分发到Collector或其他监听该Group的模块中去。\n  这种方式带来的好处十分明显，那就是获取一种类型的Entity（也就是一个Group），只有第一次会遍历所有的Entity生成这个Group，之后再获取该类型Entity的复杂度就只有O(1)。\n  但是也有一定的隐患，当Group和Collector比较少时，这不是一个高消耗操作，但是Group、Collector很多，且在每一帧对Entity进行频繁修改的时候。这可能会成为一个高消耗操作。",{"type":597,"tag":857,"props":60600,"children":60601},{"id":55091},[60602],{"type":603,"value":55094},{"type":597,"tag":606,"props":60604,"children":60605},{},[60606],{"type":603,"value":60607},"1. 在销毁一个Entity时，会移除Entity身上所有的Component，然后再进行回收。在移除Component时可能会通过Group把这个移除事件发送到监听Remove行为的Collector中，Collector会持有这个被销毁的Entity。所以在filter、或execute时不能直接依赖Collector的收集条件，还需要对Entity的Component做独立的判断。\n  其实任何时候filter都需要对Entity的Component做判断，因为Collector收集的Entity很可能在其他地方被改变。",{"type":597,"tag":606,"props":60609,"children":60610},{},[60611],{"type":603,"value":60612},"2. Entity不应该被ECS系统外的模块持有，因为系统外对Entity的持有不会被自动引用计数（可以自己添加）。可能会导致一个Entity被销毁然后又从池子中重新取出来， 外部模块对这个Entity的引用没有改变，但已经可能不是自己持有的那个Entity了。\n  需要避免在外界持有Entity或通过持有uuid间接从context中持有这个Entity。",{"type":597,"tag":606,"props":60614,"children":60615},{},[60616],{"type":603,"value":60617},"3. 在replaceComponent时，发送了Remove、Add、Update三个事件，而不是只发送了Update事件。",{"type":597,"tag":606,"props":60619,"children":60620},{},[60621],{"type":603,"value":60622},"4. 在代码生成时，对单Componet的Matcher进行了缓存，如游戏中常用的Postion和Name等Component，但是对组合Component的Matcher没有进行缓存。所在在两个不同的ReactiveSystem中使用Matcher相同的Collector时，如：",{"type":597,"tag":621,"props":60624,"children":60626},{"code":60625},"//1,2代表Postion和Name的Index\n//在使用代码生成时会生成类似Matcher.Position、Matcher.Name的静态函数，方便开发者使用\ncontext.CreateCollector(Matcher.AllOf(1,2));\n",[60627],{"type":597,"tag":629,"props":60628,"children":60629},{"__ignoreMap":591},[60630],{"type":603,"value":60625},{"type":597,"tag":606,"props":60632,"children":60633},{},[60634],{"type":603,"value":60635},"这样会生成两个Matcher相同的Group实例。\n如果在意这一点的话可以自己对Matcher进行缓存。",{"type":597,"tag":803,"props":60637,"children":60638},{},[60639],{"type":597,"tag":807,"props":60640,"children":60641},{},[60642,60644,60650],{"type":603,"value":60643},"在Entitas-CSharp中，我们不会真的删除或者添加一个Component。生成出来的代码会先向用户请求新的值，触发移除component的事件，设置一个新的值给这个component，然后触发一次增加component的事件。用这个方法，我们就避免了内存的分配以及模拟了一个在使用",{"type":597,"tag":629,"props":60645,"children":60647},{"className":60646},[],[60648],{"type":603,"value":60649},"不可修改",{"type":603,"value":60651},"（immutable）component的感觉。",{"type":597,"tag":857,"props":60653,"children":60654},{"id":33752},[60655],{"type":603,"value":60656},"Group",{"type":597,"tag":606,"props":60658,"children":60659},{},[60660],{"type":603,"value":60661},"在Context中可以对Entity进行快速过滤，它能不断的更新以保持当前的组中的Entity是最新的。假设Context有上千个Entities，但只有两个Entities拥有PositionComponent，那只要向Context询问特定的组就能立刻获取到所有符合的Entity。",{"type":597,"tag":621,"props":60663,"children":60666},{"code":60664,"language":603,"meta":591,"className":60665},"gameContext.GetGroup(GameMatcher.Position).GetEntities();\n",[29933],[60667],{"type":597,"tag":629,"props":60668,"children":60669},{"__ignoreMap":591},[60670],{"type":603,"value":60664},{"type":597,"tag":606,"props":60672,"children":60673},{},[60674],{"type":603,"value":60675},"Group和Group所过滤到的entities会被缓存下来，所以即使多次调用GetGroup方法，也是非常高效的。",{"type":597,"tag":621,"props":60677,"children":60680},{"code":60678,"language":603,"meta":591,"className":60679},"gameContext.GetEntities(GameMatcher.Movable)\n",[29933],[60681],{"type":597,"tag":629,"props":60682,"children":60683},{"__ignoreMap":591},[60684],{"type":603,"value":60678},{"type":597,"tag":606,"props":60686,"children":60687},{},[60688],{"type":603,"value":60689},"内部也是通过Groups的方式来实现。Groups 拥有以下事件OnEntityAdded, OnEntityRemoved 和 OnEntityUpdated来直接响应Entity的变化。",{"type":597,"tag":857,"props":60691,"children":60693},{"id":60692},"collector",[60694],{"type":603,"value":60695},"Collector",{"type":597,"tag":606,"props":60697,"children":60698},{},[60699],{"type":603,"value":60700},"Collector是Group的一个观察者类,Collector提供了一种简单的方法来处理Group中Entity变化的反应。假设你需要收集和处理所有entities，他们的PositionComponent被添加或替换：",{"type":597,"tag":621,"props":60702,"children":60705},{"code":60703,"language":603,"meta":591,"className":60704},"var group = gameContext.GetGroup(GameMatcher.Position);\nvar collector = group.CreateCollector(GroupEvent.Added);\n",[29933],[60706],{"type":597,"tag":629,"props":60707,"children":60708},{"__ignoreMap":591},[60709],{"type":603,"value":60703},{"type":597,"tag":606,"props":60711,"children":60712},{},[60713],{"type":603,"value":60714},"之后：",{"type":597,"tag":621,"props":60716,"children":60719},{"code":60717,"language":603,"meta":591,"className":60718},"foreach (var e in collector.collectedEntities) {\n    // do something with all the entities\n    // that have been collected to this point of time\n}\ncollector.ClearCollectedEntities();\n",[29933],[60720],{"type":597,"tag":629,"props":60721,"children":60722},{"__ignoreMap":591},[60723],{"type":603,"value":60717},{"type":597,"tag":606,"props":60725,"children":60726},{},[60727],{"type":603,"value":60728},"我们还可以注销这个Collector",{"type":597,"tag":606,"props":60730,"children":60731},{},[60732],{"type":603,"value":60733},"collector.Deactivate();",{"type":597,"tag":857,"props":60735,"children":60737},{"id":60736},"reactivesystem",[60738],{"type":603,"value":60739},"ReactiveSystem",{"type":597,"tag":1321,"props":60741,"children":60742},{},[60743,60755,60776],{"type":597,"tag":807,"props":60744,"children":60745},{},[60746,60748,60753],{"type":603,"value":60747},"响应式的系统就像执行式系统一样，会每隔一段时间或是在每一个",{"type":597,"tag":629,"props":60749,"children":60751},{"className":60750},[],[60752],{"type":603,"value":28604},{"type":603,"value":60754},"中被触发",{"type":597,"tag":807,"props":60756,"children":60757},{},[60758,60760,60766,60768,60774],{"type":603,"value":60759},"响应式系统的",{"type":597,"tag":629,"props":60761,"children":60763},{"className":60762},[],[60764],{"type":603,"value":60765},"Execute(List entities)",{"type":603,"value":60767}," 方法只会在收集器距离上一次",{"type":597,"tag":629,"props":60769,"children":60771},{"className":60770},[],[60772],{"type":603,"value":60773},"Execute",{"type":603,"value":60775},"收集到新的Entity才会被执行。",{"type":597,"tag":807,"props":60777,"children":60778},{},[60779],{"type":603,"value":60780},"gettrigger使用Collector根据event建立一个group的entity列表",{"type":597,"tag":621,"props":60782,"children":60784},{"code":60783},"        protected override ICollector\u003CGameEntity> GetTrigger(IContext\u003CGameEntity> context) {\n            return context.CreateCollector(GameMatcher.Destroyed);\n        }\n\n        protected override bool Filter(GameEntity entity) {\n            return entity.isDestroyed;\n        }\n       \n        public void Execute() {\n            if (_collector.count != 0) {\n                foreach (var e in _collector.collectedEntities) {\n                    if (Filter(e)) {\n                        e.Retain(this);\n                        _buffer.Add(e);\n                    }\n                }\n\n                _collector.ClearCollectedEntities();\n\n                if (_buffer.Count != 0) {\n                    try {\n                        Execute(_buffer);\n                    } finally {\n                        for (int i = 0; i \u003C _buffer.Count; i++) {\n                            _buffer[i].Release(this);\n                        }\n                        _buffer.Clear();\n                    }\n                }\n            }\n        }\n",[60785],{"type":597,"tag":629,"props":60786,"children":60787},{"__ignoreMap":591},[60788],{"type":603,"value":60783},{"type":597,"tag":606,"props":60790,"children":60791},{},[60792],{"type":603,"value":60793},"如上代码:",{"type":597,"tag":606,"props":60795,"children":60796},{},[60797,60799,60805,60807,60813,60815,60821,60823,60829,60831,60836,60838,60843,60844,60849],{"type":603,"value":60798},"我们在",{"type":597,"tag":629,"props":60800,"children":60802},{"className":60801},[],[60803],{"type":603,"value":60804},"GetTrigger",{"type":603,"value":60806},"方法中返回了一个监测了",{"type":597,"tag":629,"props":60808,"children":60810},{"className":60809},[],[60811],{"type":603,"value":60812},"Destroyed",{"type":603,"value":60814},"Entity的Collector。在",{"type":597,"tag":629,"props":60816,"children":60818},{"className":60817},[],[60819],{"type":603,"value":60820},"context.CreateCollector(GameMatcher.Destroyed)",{"type":603,"value":60822}," 中，我们不需要指定当一个Entity何时应当被收集的事件，因为默认就是会收集在",{"type":597,"tag":629,"props":60824,"children":60826},{"className":60825},[],[60827],{"type":603,"value":60828},"Added",{"type":603,"value":60830},"情况下被通知到的Entity。所以当我们增加一个",{"type":597,"tag":629,"props":60832,"children":60834},{"className":60833},[],[60835],{"type":603,"value":60812},{"type":603,"value":60837},"组件到一个Entity上时，这个Entity会",{"type":597,"tag":629,"props":60839,"children":60841},{"className":60840},[],[60842],{"type":603,"value":42945},{"type":603,"value":23405},{"type":597,"tag":629,"props":60845,"children":60847},{"className":60846},[],[60848],{"type":603,"value":60812},{"type":603,"value":60850},"的group里面，并因此被对应的collector收集到对应的reactive system里面。",{"type":597,"tag":606,"props":60852,"children":60853},{},[60854],{"type":603,"value":60855},"如下面的代码,AddDebugMessage就会被DebugMessageSystem收集了...",{"type":597,"tag":606,"props":60857,"children":60858},{},[60859],{"type":603,"value":60860},"执行RemoveDebugMessage()但是DebugMessageSystem仍然收集着呢,但是该实体已经没有了组件DebugMessage.所以需要过滤下Filter(GameEntity entity)否则收集的数据会报错",{"type":597,"tag":621,"props":60862,"children":60864},{"code":60863},"using Entitas;\n\npublic class HelloWorldSystem : IInitializeSystem\n{\n    // always handy to keep a reference to the context \n    // we're going to be interacting with it\n    readonly GameContext _context;\n\n    public HelloWorldSystem(Contexts contexts)\n    {\n        // get the context from the constructor\n        _context = contexts.game;\n    }\n\n    public void Initialize()\n    {\n        // create an entity and give it a DebugMessageComponent with\n        // the text \"Hello World!\" as its data\n\n        var e = _context.CreateEntity();\n        e.AddDebugMessage(\"Hello World!\");\n        e.RemoveDebugMessage(); \n    }\n}\n\n",[60865],{"type":597,"tag":629,"props":60866,"children":60867},{"__ignoreMap":591},[60868],{"type":603,"value":60863},{"type":597,"tag":621,"props":60870,"children":60872},{"code":60871},"using System.Collections.Generic;\nusing Entitas;\nusing UnityEngine;\n\npublic class DebugMessageSystem : ReactiveSystem\u003CGameEntity>\n{\n    public DebugMessageSystem(Contexts contexts) : base(contexts.game)\n    {\n    }\n\n    protected override ICollector\u003CGameEntity> GetTrigger(IContext\u003CGameEntity> context)\n    {\n        // we only care about entities with DebugMessageComponent \n        return context.CreateCollector(GameMatcher.DebugMessage);\n    }\n\n    protected override bool Filter(GameEntity entity)\n    {\n        // good practice to perform a final check in case \n        // the entity has been altered in a different system.\n        return entity.hasDebugMessage;\n    }\n\n    protected override void Execute(List\u003CGameEntity> entities)\n    {\n        // this is the list of entities that meet our conditions\n        foreach (var e in entities)\n        {\n            // we can safely access their DebugMessage component\n            // then grab the string data and print it\n            Debug.Log(e.debugMessage.message);\n        }\n    }\n}\n",[60873],{"type":597,"tag":629,"props":60874,"children":60875},{"__ignoreMap":591},[60876],{"type":603,"value":60871},{"type":597,"tag":857,"props":60878,"children":60880},{"id":60879},"事件",[60881],{"type":603,"value":60879},{"type":597,"tag":1023,"props":60883,"children":60885},{"id":60884},"关于replace都干了什么",[60886],{"type":603,"value":60884},{"type":597,"tag":606,"props":60888,"children":60889},{},[60890,60892,60898,60899,60905,60906,60912],{"type":603,"value":60891},"Group具有事件 ",{"type":597,"tag":629,"props":60893,"children":60895},{"className":60894},[],[60896],{"type":603,"value":60897},"OnEntityAdded",{"type":603,"value":27138},{"type":597,"tag":629,"props":60900,"children":60902},{"className":60901},[],[60903],{"type":603,"value":60904},"OnEntityRemoved",{"type":603,"value":16983},{"type":597,"tag":629,"props":60907,"children":60909},{"className":60908},[],[60910],{"type":603,"value":60911},"OnEntityUpdated",{"type":603,"value":60913}," 可以直接对组的更改做出反应。",{"type":597,"tag":606,"props":60915,"children":60916},{},[60917],{"type":603,"value":60918},"看源码",{"type":597,"tag":621,"props":60920,"children":60922},{"code":60921}," public void UpdateEntity(TEntity entity, int index, IComponent previousComponent, IComponent newComponent) {\n            if (_entities.Contains(entity)) {\n                if (OnEntityRemoved != null) {\n                    OnEntityRemoved(this, entity, index, previousComponent);\n                }\n                if (OnEntityAdded != null) {\n                    OnEntityAdded(this, entity, index, newComponent);\n                }\n                if (OnEntityUpdated != null) {\n                    OnEntityUpdated(\n                        this, entity, index, previousComponent, newComponent\n                    );\n                }\n            }\n        }\n",[60923],{"type":597,"tag":629,"props":60924,"children":60925},{"__ignoreMap":591},[60926],{"type":603,"value":60921},{"type":597,"tag":606,"props":60928,"children":60929},{},[60930,60931,60936],{"type":603,"value":60643},{"type":597,"tag":629,"props":60932,"children":60934},{"className":60933},[],[60935],{"type":603,"value":60649},{"type":603,"value":60651},{"type":597,"tag":1023,"props":60938,"children":60940},{"id":60939},"group和collect还有event应该在什么地方添加",[60941],{"type":603,"value":60942},"group和collect,还有event应该在什么地方添加.",{"type":597,"tag":1321,"props":60944,"children":60945},{},[60946,60951],{"type":597,"tag":807,"props":60947,"children":60948},{},[60949],{"type":603,"value":60950},"在系统中的构造函数中",{"type":597,"tag":807,"props":60952,"children":60953},{},[60954],{"type":603,"value":60955},"在entitan的system初始化Initialize前",{"type":597,"tag":606,"props":60957,"children":60958},{},[60959],{"type":603,"value":60960},"因为初始化系统大多会有add,remove等动作.为了保持你的group,还有collect,还有event能够监听到.",{"type":597,"tag":606,"props":60962,"children":60963},{},[60964],{"type":603,"value":60965},"所以最好在Initialize前",{"type":597,"tag":857,"props":60967,"children":60969},{"id":60968},"jenny",[60970],{"type":603,"value":60971},"Jenny",{"type":597,"tag":606,"props":60973,"children":60974},{},[60975],{"type":603,"value":60976},"jenny使用了roslyn, DataProviders需要更改下,否则会报错..",{"type":597,"tag":621,"props":60978,"children":60980},{"code":60979},"Jenny.SearchPaths = Assets\\Plugins\\DesperateDevs\\Editor\\Plugins, \\\n                    Assets\\Plugins\\Entitas\\Editor\\Plugins, \\\n                    Jenny\\Plugins\\Entitas.Roslyn\n\nJenny.Plugins = DesperateDevs.CodeGeneration.Plugins, \\\n                DesperateDevs.CodeGeneration.Unity.Plugins, \\\n                Entitas.CodeGeneration.Plugins, \\\n                Entitas.Roslyn.CodeGeneration.Plugins, \\\n                Entitas.VisualDebugging.CodeGeneration.Plugins\n\nJenny.PreProcessors = DesperateDevs.CodeGeneration.Plugins.ValidateProjectPathPreProcessor, \\\n                      DesperateDevs.CodeGeneration.Plugins.TargetFrameworkProfilePreProcessor\n\nJenny.DataProviders = Entitas.CodeGeneration.Plugins.ContextDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.CleanupDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.ComponentDataProvider, \\\n                      Entitas.Roslyn.CodeGeneration.Plugins.EntityIndexDataProvider\n\nJenny.CodeGenerators = Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentEntityApiInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentLookupGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextAttributeGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextMatcherGenerator, \\\n                       Entitas.CodeGeneration.Plugins.ContextsGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EntityIndexGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventEntityApiGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenerComponentGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventListenertInterfaceGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemGenerator, \\\n                       Entitas.CodeGeneration.Plugins.EventSystemsGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemGenerator, \\\n                       Entitas.Roslyn.CodeGeneration.Plugins.CleanupSystemsGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator, \\\n                       Entitas.VisualDebugging.CodeGeneration.Plugins.FeatureClassGenerator\n\nJenny.PostProcessors = DesperateDevs.CodeGeneration.Plugins.AddFileHeaderPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.CleanTargetDirectoryPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.MergeFilesPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.NewLinePostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.UpdateCSProjPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.WriteToDiskPostProcessor, \\\n                       DesperateDevs.CodeGeneration.Plugins.ConsoleWriteLinePostProcessor\n\nJenny.Server.Port = 3333\nJenny.Client.Host = localhost\nDesperateDevs.CodeGeneration.Plugins.ProjectPath = Assembly-CSharp.csproj\nEntitas.CodeGeneration.Plugins.Assemblies = Library/ScriptAssemblies/Assembly-CSharp.dll\nEntitas.CodeGeneration.Plugins.Contexts = Game, \\\n                                          Unit, \\\n                                          Combat, \\\n                                          Config, \\\n                                          Input\n\nEntitas.CodeGeneration.Plugins.IgnoreNamespaces = true\nDesperateDevs.CodeGeneration.Plugins.TargetDirectory = Assets/Scripts/World\n\n",[60981],{"type":597,"tag":629,"props":60982,"children":60983},{"__ignoreMap":591},[60984],{"type":603,"value":60979},{"type":597,"tag":606,"props":60986,"children":60987},{},[60988],{"type":603,"value":60989},"一般来说.先运行Jenny-Auto-Import.bat.再运行Jenny-Server.bat就可以了",{"type":597,"tag":606,"props":60991,"children":60992},{},[60993],{"type":603,"value":60994},"查看所有命令:",{"type":597,"tag":621,"props":60996,"children":60998},{"code":60997},".\\Jenny\\Jenny.exe help \n",[60999],{"type":597,"tag":629,"props":61000,"children":61001},{"__ignoreMap":591},[61002],{"type":603,"value":60997},{"type":597,"tag":606,"props":61004,"children":61005},{},[61006],{"type":603,"value":61007},"以VStudio为例，创建一个外部工具：",{"type":597,"tag":606,"props":61009,"children":61010},{},[61011],{"type":597,"tag":719,"props":61012,"children":61014},{"alt":719,"src":61013},"/images/2020-01-01-unity-entitas/v2-d49876b0ae0100844a372dfb16508b27_hd.jpg",[],{"type":597,"tag":606,"props":61016,"children":61017},{},[61018,61020,61026,61028,61034],{"type":603,"value":61019},"再之后，想要生成代码只需要保持运行",{"type":597,"tag":629,"props":61021,"children":61023},{"className":61022},[],[61024],{"type":603,"value":61025},"Jenny Server",{"type":603,"value":61027}," 然后在VS中运行",{"type":597,"tag":629,"props":61029,"children":61031},{"className":61030},[],[61032],{"type":603,"value":61033},"工具/Jenny",{"type":603,"value":61035}," 就可以了，这个方法可以让你专注于VS而无需切换回Unity。",{"type":597,"tag":606,"props":61037,"children":61038},{},[61039,61045],{"type":597,"tag":629,"props":61040,"children":61042},{"className":61041},[],[61043],{"type":603,"value":61044},"jenny.exe client gen",{"type":603,"value":61046},"需要服务器才能使用",{"type":597,"tag":606,"props":61048,"children":61049},{},[61050,61056],{"type":597,"tag":629,"props":61051,"children":61053},{"className":61052},[],[61054],{"type":603,"value":61055},"jenny gen",{"type":603,"value":61057}," 不开服务器直接可以使用",{"type":597,"tag":598,"props":61059,"children":61060},{"id":32788},[61061],{"type":603,"value":32788},{"type":597,"tag":1321,"props":61063,"children":61064},{},[61065,61074,61083],{"type":597,"tag":807,"props":61066,"children":61067},{},[61068],{"type":597,"tag":886,"props":61069,"children":61072},{"href":61070,"rel":61071},"https://www.jianshu.com/c/e8e4c3f4280c",[890],[61073],{"type":603,"value":61070},{"type":597,"tag":807,"props":61075,"children":61076},{},[61077],{"type":597,"tag":886,"props":61078,"children":61081},{"href":61079,"rel":61080},"https://github.com/OneYoungMean/Entitas-CSharp-OYM/wiki",[890],[61082],{"type":603,"value":61079},{"type":597,"tag":807,"props":61084,"children":61085},{},[61086],{"type":597,"tag":886,"props":61087,"children":61090},{"href":61088,"rel":61089},"https://github.com/sschmid/Entitas-CSharp",[890],[61091],{"type":603,"value":61088},{"title":591,"searchDepth":787,"depth":787,"links":61093},[61094,61095,61096],{"id":60884,"depth":1530,"text":60884},{"id":60939,"depth":1530,"text":60942},{"id":32788,"depth":787,"text":32788},"content:unity:2020-01-01-unity-entitas.md","unity/2020-01-01-unity-entitas.md","2020-01-01",{"_path":38,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":37,"description":61101,"body":61102,"_type":791,"_id":61227,"_source":793,"_file":61228,"_extension":795,"date":61229},"  [Fact]\n        public void TestDatetimeoffset2()\n        {\n            var a = DateTimeOffset.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n上面的abc都是一个值    [Fact]\n        public void TestDatetimeoffset3()\n        {\n    ",{"type":594,"children":61103,"toc":61225},[61104,61112,61117,61125,61130,61135,61140,61145,61150,61155,61160,61169,61177,61182,61187,61192,61198,61203,61216],{"type":597,"tag":621,"props":61105,"children":61107},{"code":61106},"  [Fact]\n        public void TestDatetimeoffset2()\n        {\n            var a = DateTimeOffset.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n",[61108],{"type":597,"tag":629,"props":61109,"children":61110},{"__ignoreMap":591},[61111],{"type":603,"value":61106},{"type":597,"tag":606,"props":61113,"children":61114},{},[61115],{"type":603,"value":61116},"上面的abc都是一个值",{"type":597,"tag":621,"props":61118,"children":61120},{"code":61119},"    [Fact]\n        public void TestDatetimeoffset3()\n        {\n            var a = DateTime.Now;\n            var b = a.ToLocalTime();\n            var c = a.ToUniversalTime();\n\n            Assert.Equal(b, c);\n        }\n",[61121],{"type":597,"tag":629,"props":61122,"children":61123},{"__ignoreMap":591},[61124],{"type":603,"value":61119},{"type":597,"tag":606,"props":61126,"children":61127},{},[61128],{"type":603,"value":61129},"上面的值是不等的",{"type":597,"tag":606,"props":61131,"children":61132},{},[61133],{"type":603,"value":61134},"datetimeoffset使用efcore存储到datetime字段都是0时区的...取出来后如果显示再web可以toLocalTime",{"type":597,"tag":606,"props":61136,"children":61137},{},[61138],{"type":603,"value":61139},"如果是游戏中使用,除非是发送给用户显示..否则不需要toLocalTime..",{"type":597,"tag":606,"props":61141,"children":61142},{},[61143],{"type":603,"value":61144},"1，DateTime",{"type":597,"tag":606,"props":61146,"children":61147},{},[61148],{"type":603,"value":61149},"表示时间上的一刻，通常以日期和当天时间来表示。",{"type":597,"tag":606,"props":61151,"children":61152},{},[61153],{"type":603,"value":61154},"2， DateTimeOffset",{"type":597,"tag":606,"props":61156,"children":61157},{},[61158],{"type":603,"value":61159},"表示一个时间点，通常以相对于协调世界时（UTC）的日期和时间来表示",{"type":597,"tag":606,"props":61161,"children":61162},{},[61163],{"type":597,"tag":886,"props":61164,"children":61167},{"href":61165,"rel":61166},"https://docs.microsoft.com/en-us/dotnet/standard/datetime/performing-arithmetic-operations",[890],[61168],{"type":603,"value":61165},{"type":597,"tag":621,"props":61170,"children":61172},{"code":61171},"\nusing System;\n\npublic enum TimeComparison\n{\n   EarlierThan = -1,\n   TheSameAs = 0,\n   LaterThan = 1\n}\n\npublic class DateManipulation\n{\n   public static void Main()\n   {\n      DateTime localTime = DateTime.Now;\n      DateTime utcTime = DateTime.UtcNow;\n      \n      Console.WriteLine(\"Difference between {0} and {1} time: {2}:{3} hours\", \n                        localTime.Kind.ToString(), \n                        utcTime.Kind.ToString(), \n                        (localTime - utcTime).Hours, \n                        (localTime - utcTime).Minutes);\n      Console.WriteLine(\"The {0} time is {1} the {2} time.\", \n                        localTime.Kind.ToString(), \n                        Enum.GetName(typeof(TimeComparison), localTime.CompareTo(utcTime)), \n                        utcTime.Kind.ToString());  \n   }\n}\n// If run in the U.S. Pacific Standard Time zone, the example displays \n// the following output to the console:\n//    Difference between Local and Utc time: -7:0 hours\n//    The Local time is EarlierThan the Utc time.      \n\n\npublic class DateTimeOffsetManipulation\n{\n   public static void Main()\n   {\n      DateTimeOffset localTime = DateTimeOffset.Now;\n      DateTimeOffset utcTime = DateTimeOffset.UtcNow;\n      \n      Console.WriteLine(\"Difference between local time and UTC: {0}:{1:D2} hours\", \n                        (localTime - utcTime).Hours, \n                        (localTime - utcTime).Minutes);\n      Console.WriteLine(\"The local time is {0} UTC.\", \n                        Enum.GetName(typeof(TimeComparison), localTime.CompareTo(utcTime)));  \n   }\n}\n// Regardless of the local time zone, the example displays \n// the following output to the console:\n//    Difference between local time and UTC: 0:00 hours.\n//    The local time is TheSameAs UTC.\n",[61173],{"type":597,"tag":629,"props":61174,"children":61175},{"__ignoreMap":591},[61176],{"type":603,"value":61171},{"type":597,"tag":606,"props":61178,"children":61179},{},[61180],{"type":603,"value":61181},"从实例中可以看出，DateTimeOffset是取相对于UTC的日期和时间来表示的，所以DateTimeOffset.Now和DateTimeOffset.UtcNow的值是一样的。而DateTime不同，是以日期和当前时间来显示的。",{"type":597,"tag":606,"props":61183,"children":61184},{},[61185],{"type":603,"value":61186},"就是说..如果你用DateTime进行加减运算要么只用DateTime.Now..要么只用DateTime.UtcNow..混用会出现不可预期的错误",{"type":597,"tag":606,"props":61188,"children":61189},{},[61190],{"type":603,"value":61191},"而DateTimeOffset的无论是用now还是utcnow加减都一样,因为他代表的是一个时间点...如果是为了客户端显示使用可以转换成本地时间再tostring",{"type":597,"tag":857,"props":61193,"children":61195},{"id":61194},"还有就是不要混用不要将datetime当成datetimeoffset使用",[61196],{"type":603,"value":61197},"还有就是不要混用..不要将datetime当成datetimeoffset使用,",{"type":597,"tag":606,"props":61199,"children":61200},{},[61201],{"type":603,"value":61202},"当需要使用DateTimeOffset的Date等字段的时候,",{"type":597,"tag":803,"props":61204,"children":61205},{},[61206,61211],{"type":597,"tag":807,"props":61207,"children":61208},{},[61209],{"type":603,"value":61210},"要及时转成DateTimeOffset,需要使用new方法并设置时区转成datetimeoffset",{"type":597,"tag":807,"props":61212,"children":61213},{},[61214],{"type":603,"value":61215},"直接赋值,会出现时区问题",{"type":597,"tag":621,"props":61217,"children":61220},{"code":61218,"language":8105,"meta":591,"className":61219},"var now = new DateTimeOffset(1977,1,1,14,0,0,TimeSpan.Zero);\nvar mt = now.AddDays(1).Date;\nDateTimeOffset d = mt; //这里直接赋值会有当前时区\nvar mto= new DateTimeOffset(mt,TimeSpan.Zero);\n\nConsole.WriteLine(now); //1/1/1977 2:00:00 PM +00:00\nConsole.WriteLine(mt); //1/2/1977 12:00:00 AM\nConsole.WriteLine(d);//1/2/1977 12:00:00 AM +08:00\nConsole.WriteLine(mto);//1/2/1977 12:00:00 AM +00:00\n\nConsole.WriteLine(mto == mt); //false\nConsole.WriteLine(d == mto); //false\n",[8107],[61221],{"type":597,"tag":629,"props":61222,"children":61223},{"__ignoreMap":591},[61224],{"type":603,"value":61218},{"title":591,"searchDepth":787,"depth":787,"links":61226},[],"content:dotnet:2019-12-01-datetimeoffset.md","dotnet/2019-12-01-datetimeoffset.md","2019-12-01",{"_path":418,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":417,"description":61231,"body":61232,"_type":791,"_id":61270,"_source":793,"_file":61271,"_extension":795,"date":61272},"Unity的AssetStore下载package的时候经常抽风，而且开了代理工具的全局代理依然无效。",{"type":594,"children":61233,"toc":61268},[61234,61238,61243,61248,61256,61263],{"type":597,"tag":606,"props":61235,"children":61236},{},[61237],{"type":603,"value":61231},{"type":597,"tag":606,"props":61239,"children":61240},{},[61241],{"type":603,"value":61242},"检索网络后得知，这是因为它下载的时候不检测IE代理设置，而是取环境变量中HTTPS_proxy和HTTP_proxy的值，所以添加这两个变量并指定其为你的代理服务地址就可以了。",{"type":597,"tag":606,"props":61244,"children":61245},{},[61246],{"type":603,"value":61247},"具体步骤：",{"type":597,"tag":621,"props":61249,"children":61251},{"code":61250},"打开 系统属性->高级->环境变量\n新建 HTTPS_PROXY 和 HTTP_PROXY 系统变量，设置其为你的代理服务地址\n\n例如公司的代理IP是：127.0.0.1 端口：1080 \n变量名：HTTPS_PROXY\n变量值：http://127.0.0.1:1080    这里也是http..因为ss没开https\n\n变量名：HTTP_PROXY\n变量值：http://127.0.0.1:1080\n",[61252],{"type":597,"tag":629,"props":61253,"children":61254},{"__ignoreMap":591},[61255],{"type":603,"value":61250},{"type":597,"tag":606,"props":61257,"children":61258},{},[61259],{"type":597,"tag":719,"props":61260,"children":61262},{"alt":591,"src":61261},"/images/2019-11-15-unity-proxy/20190515220955161%5B1%5D.png",[],{"type":597,"tag":606,"props":61264,"children":61265},{},[61266],{"type":603,"value":61267},"需要注意的是设置完成后可能需要重启Unity才会生效。",{"title":591,"searchDepth":787,"depth":787,"links":61269},[],"content:unity:2019-11-15-unity-proxy.md","unity/2019-11-15-unity-proxy.md","2019-11-15",{"_path":35,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":34,"description":61274,"body":61275,"_type":791,"_id":62488,"_source":793,"_file":62489,"_extension":795,"date":62490},"In this post I describe how to run Quartz.NET jobs using an ASP.NET Core hosted service. I show how to create a simple IJob, a custom IJobFactory, and a QuartzHostedService that runs jobs while your application is running. I'll also touch on some of the issues to aware of, namely of using scoped services inside singleton classes.",{"type":594,"children":61276,"toc":62476},[61277,61314,61329,61342,61350,61355,61360,61385,61399,61416,61439,61444,61459,61479,61488,61502,61530,61539,61560,61574,61617,61626,61688,61716,61738,61752,61772,61781,61825,61837,61846,61851,61917,61928,61942,61983,61992,62046,62072,62081,62123,62132,62161,62170,62190,62199,62204,62212,62226,62255,62283,62292,62304,62318,62330,62370,62376,62381,62389,62403,62416,62421,62471],{"type":597,"tag":606,"props":61278,"children":61279},{},[61280,61282,61289,61291,61296,61298,61304,61306,61312],{"type":603,"value":61281},"In this post I describe how to run Quartz.NET jobs using an ",{"type":597,"tag":886,"props":61283,"children":61286},{"href":61284,"rel":61285},"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2",[890],[61287],{"type":603,"value":61288},"ASP.NET Core hosted service",{"type":603,"value":61290},". I show how to create a simple ",{"type":597,"tag":629,"props":61292,"children":61294},{"className":61293},[],[61295],{"type":603,"value":32475},{"type":603,"value":61297},", a custom ",{"type":597,"tag":629,"props":61299,"children":61301},{"className":61300},[],[61302],{"type":603,"value":61303},"IJobFactory",{"type":603,"value":61305},", and a ",{"type":597,"tag":629,"props":61307,"children":61309},{"className":61308},[],[61310],{"type":603,"value":61311},"QuartzHostedService",{"type":603,"value":61313}," that runs jobs while your application is running. I'll also touch on some of the issues to aware of, namely of using scoped services inside singleton classes.",{"type":597,"tag":598,"props":61315,"children":61317},{"id":61316},"introduction-what-is-quartznet",[61318,61320],{"type":603,"value":61319},"Introduction - what is Quartz.NET?",{"type":597,"tag":886,"props":61321,"children":61324},{"href":61322,"rel":61323},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#introduction-what-is-quartz-net-",[890],[61325],{"type":597,"tag":719,"props":61326,"children":61328},{"alt":719,"src":61327},"/images/2019-11-05-quartz/icons-link.svg",[],{"type":597,"tag":606,"props":61330,"children":61331},{},[61332,61334,61341],{"type":603,"value":61333},"As per ",{"type":597,"tag":886,"props":61335,"children":61338},{"href":61336,"rel":61337},"https://www.quartz-scheduler.net/",[890],[61339],{"type":603,"value":61340},"their website",{"type":603,"value":26943},{"type":597,"tag":617,"props":61343,"children":61344},{},[61345],{"type":597,"tag":606,"props":61346,"children":61347},{},[61348],{"type":603,"value":61349},"Quartz.NET is a full-featured, open source job scheduling system that can be used from smallest apps to large scale enterprise systems.",{"type":597,"tag":606,"props":61351,"children":61352},{},[61353],{"type":603,"value":61354},"It's an old staple of many ASP.NET developers, used as a way of running background tasks on a timer, in a reliable, clustered, way. Using Quartz.NET with ASP.NET Core is pretty similar - Quartz.NET supports .NET Standard 2.0, so you can easily use it in your applications.",{"type":597,"tag":606,"props":61356,"children":61357},{},[61358],{"type":603,"value":61359},"Quartz.NET has two main concepts:",{"type":597,"tag":1321,"props":61361,"children":61362},{},[61363,61374],{"type":597,"tag":807,"props":61364,"children":61365},{},[61366,61368,61372],{"type":603,"value":61367},"A ",{"type":597,"tag":1080,"props":61369,"children":61370},{},[61371],{"type":603,"value":39969},{"type":603,"value":61373},". This is the background tasks that you want to run on some sort of schedule.",{"type":597,"tag":807,"props":61375,"children":61376},{},[61377,61378,61383],{"type":603,"value":61367},{"type":597,"tag":1080,"props":61379,"children":61380},{},[61381],{"type":603,"value":61382},"scheduler",{"type":603,"value":61384},". This is responsible for running jobs based on triggers, on a time-based schedule.",{"type":597,"tag":606,"props":61386,"children":61387},{},[61388,61390,61397],{"type":603,"value":61389},"ASP.NET Core has good support for running \"background tasks\" via way of ",{"type":597,"tag":886,"props":61391,"children":61394},{"href":61392,"rel":61393},"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services",[890],[61395],{"type":603,"value":61396},"hosted services",{"type":603,"value":61398},". Hosted services are started when your ASP.NET Core app starts, and run in the background for the lifetime of the application. By creating a Quartz.NET hosted service, you can use a standard ASP.NET Core application for running your tasks in the background.",{"type":597,"tag":617,"props":61400,"children":61401},{},[61402],{"type":597,"tag":606,"props":61403,"children":61404},{},[61405,61407,61414],{"type":603,"value":61406},"This sort of non-HTTP scenario is also possible with the \"generic host\", ",{"type":597,"tag":886,"props":61408,"children":61411},{"href":61409,"rel":61410},"https://andrewlock.net/the-asp-net-core-generic-host-namespace-clashes-and-extension-methods/",[890],[61412],{"type":603,"value":61413},"but for various reasons",{"type":603,"value":61415}," I generally don't use those at the moment. This should hopefully improve in ASP.NET Core 3.0 with the extra investment going into these non-HTTP scenarios.",{"type":597,"tag":606,"props":61417,"children":61418},{},[61419,61421,61428,61430,61437],{"type":603,"value":61420},"While it's possible to create ",{"type":597,"tag":886,"props":61422,"children":61425},{"href":61423,"rel":61424},"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2#timed-background-tasks",[890],[61426],{"type":603,"value":61427},"a \"timed\" background service",{"type":603,"value":61429},", (that runs a tasks every 10 minutes, for example), Quartz.NET provides a far more robust solution. You can ensure tasks only run at specific times of the day (e.g. 2:30am), or only on specific days, or any combination by using a ",{"type":597,"tag":886,"props":61431,"children":61434},{"href":61432,"rel":61433},"https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/crontriggers.html",[890],[61435],{"type":603,"value":61436},"Cron trigger",{"type":603,"value":61438},". It also allows you to run multiple instances of your application in a clustered fashion, so that only a single instance can run a given task at any one time.",{"type":597,"tag":606,"props":61440,"children":61441},{},[61442],{"type":603,"value":61443},"In this post I'll show the basics of creating a Quartz.NET job and scheduling it to run on a timer in a hosted service.",{"type":597,"tag":598,"props":61445,"children":61447},{"id":61446},"installing-quartznet",[61448,61450],{"type":603,"value":61449},"Installing Quartz.NET",{"type":597,"tag":886,"props":61451,"children":61454},{"href":61452,"rel":61453},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#installing-quartz-net",[890],[61455],{"type":597,"tag":719,"props":61456,"children":61458},{"alt":719,"src":61457},"https://andrewlock.net/assets/img/icons-link.svg",[],{"type":597,"tag":606,"props":61460,"children":61461},{},[61462,61464,61470,61472,61477],{"type":603,"value":61463},"Quartz.NET is a .NET Standard 2.0 NuGet package, so it should be easy to install in your application. For this test I created an ASP.NET Core project and chose the Empty template. You can install the Quartz.NET package using ",{"type":597,"tag":629,"props":61465,"children":61467},{"className":61466},[],[61468],{"type":603,"value":61469},"dotnet add package Quartz",{"type":603,"value":61471},". If you view the ",{"type":597,"tag":1733,"props":61473,"children":61474},{},[61475],{"type":603,"value":61476},".csproj",{"type":603,"value":61478}," for the project, it should look something like this:",{"type":597,"tag":621,"props":61480,"children":61483},{"className":61481,"code":61482,"language":40974,"meta":591},[40972],"\u003CProject Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  \u003CPropertyGroup>\n    \u003CTargetFramework>netcoreapp2.2\u003C/TargetFramework>\n    \u003CAspNetCoreHostingModel>InProcess\u003C/AspNetCoreHostingModel>\n  \u003C/PropertyGroup>\n\n  \u003CItemGroup>\n    \u003CPackageReference Include=\"Microsoft.AspNetCore.App\" />\n    \u003CPackageReference Include=\"Quartz\" Version=\"3.0.7\" />\n  \u003C/ItemGroup>\n\n\u003C/Project>\n",[61484],{"type":597,"tag":629,"props":61485,"children":61486},{"__ignoreMap":591},[61487],{"type":603,"value":61482},{"type":597,"tag":598,"props":61489,"children":61491},{"id":61490},"creating-an-ijob",[61492,61494],{"type":603,"value":61493},"Creating an IJob",{"type":597,"tag":886,"props":61495,"children":61498},{"href":61496,"rel":61497},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#creating-an-ijob",[890],[61499],{"type":597,"tag":719,"props":61500,"children":61501},{"alt":719,"src":61457},[],{"type":597,"tag":606,"props":61503,"children":61504},{},[61505,61507,61513,61515,61520,61522,61528],{"type":603,"value":61506},"For the actual background work we are scheduling, we're just going to use a \"hello world\" implementation that writes to an ",{"type":597,"tag":629,"props":61508,"children":61510},{"className":61509},[],[61511],{"type":603,"value":61512},"ILogger\u003C>",{"type":603,"value":61514}," (and hence to the console). You should implement the Quartz interface ",{"type":597,"tag":629,"props":61516,"children":61518},{"className":61517},[],[61519],{"type":603,"value":32475},{"type":603,"value":61521}," which contains a single asynchronous ",{"type":597,"tag":629,"props":61523,"children":61525},{"className":61524},[],[61526],{"type":603,"value":61527},"Execute()",{"type":603,"value":61529}," method. Note that we're using dependency injection here to inject the logger into the constructor.",{"type":597,"tag":621,"props":61531,"children":61534},{"className":61532,"code":61533,"language":8105,"meta":591},[8107],"using Microsoft.Extensions.Logging;\nusing Quartz;\nusing System.Threading.Tasks;\n\n[DisallowConcurrentExecution]\npublic class HelloWorldJob : IJob\n{\n    private readonly ILogger\u003CHelloWorldJob> _logger;\n    public HelloWorldJob(ILogger\u003CHelloWorldJob> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task Execute(IJobExecutionContext context)\n    {\n        _logger.LogInformation(\"Hello world!\");\n        return Task.CompletedTask;\n    }\n}\n",[61535],{"type":597,"tag":629,"props":61536,"children":61537},{"__ignoreMap":591},[61538],{"type":603,"value":61533},{"type":597,"tag":606,"props":61540,"children":61541},{},[61542,61544,61550,61552,61559],{"type":603,"value":61543},"I also decorated the job with the ",{"type":597,"tag":629,"props":61545,"children":61547},{"className":61546},[],[61548],{"type":603,"value":61549},"[DisallowConcurrentExecution]",{"type":603,"value":61551}," attribute. This attribute ",{"type":597,"tag":886,"props":61553,"children":61556},{"href":61554,"rel":61555},"https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/more-about-jobs.html#job-state-and-concurrency",[890],[61557],{"type":603,"value":61558},"prevents Quartz.NET from trying to run the same job concurrently",{"type":603,"value":9674},{"type":597,"tag":598,"props":61561,"children":61563},{"id":61562},"creating-an-ijobfactory",[61564,61566],{"type":603,"value":61565},"Creating an IJobFactory",{"type":597,"tag":886,"props":61567,"children":61570},{"href":61568,"rel":61569},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#creating-an-ijobfactory",[890],[61571],{"type":597,"tag":719,"props":61572,"children":61573},{"alt":719,"src":61457},[],{"type":597,"tag":606,"props":61575,"children":61576},{},[61577,61579,61584,61586,61592,61594,61600,61602,61607,61609,61615],{"type":603,"value":61578},"Next, we need to tell Quartz how it should create instances of ",{"type":597,"tag":629,"props":61580,"children":61582},{"className":61581},[],[61583],{"type":603,"value":32475},{"type":603,"value":61585},". By default, Quartz will try and \"new-up\" instances of the job using ",{"type":597,"tag":629,"props":61587,"children":61589},{"className":61588},[],[61590],{"type":603,"value":61591},"Activator.CreateInstance",{"type":603,"value":61593},", effectively calling ",{"type":597,"tag":629,"props":61595,"children":61597},{"className":61596},[],[61598],{"type":603,"value":61599},"new HelloWorldJob()",{"type":603,"value":61601},". Unfortunately, as we're using constructor injection, that won't work. Instead, we can provide a custom ",{"type":597,"tag":629,"props":61603,"children":61605},{"className":61604},[],[61606],{"type":603,"value":61303},{"type":603,"value":61608}," that hooks into the ASP.NET Core dependency injection container (",{"type":597,"tag":629,"props":61610,"children":61612},{"className":61611},[],[61613],{"type":603,"value":61614},"IServiceProvider",{"type":603,"value":61616},"):",{"type":597,"tag":621,"props":61618,"children":61621},{"className":61619,"code":61620,"language":8105,"meta":591},[8107],"using Microsoft.Extensions.DependencyInjection;\nusing Quartz;\nusing Quartz.Spi;\nusing System;\n\npublic class SingletonJobFactory : IJobFactory\n{\n    private readonly IServiceProvider _serviceProvider;\n    public SingletonJobFactory(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)\n    {\n        return _serviceProvider.GetRequiredService(bundle.JobDetail.JobType) as IJob;\n    }\n\n    public void ReturnJob(IJob job) { }\n}\n",[61622],{"type":597,"tag":629,"props":61623,"children":61624},{"__ignoreMap":591},[61625],{"type":603,"value":61620},{"type":597,"tag":606,"props":61627,"children":61628},{},[61629,61631,61636,61638,61643,61645,61651,61653,61658,61660,61665,61667,61672,61674,61680,61682,61687],{"type":603,"value":61630},"This factory takes an ",{"type":597,"tag":629,"props":61632,"children":61634},{"className":61633},[],[61635],{"type":603,"value":61614},{"type":603,"value":61637}," in the constructor, and implements the ",{"type":597,"tag":629,"props":61639,"children":61641},{"className":61640},[],[61642],{"type":603,"value":61303},{"type":603,"value":61644}," interface. The important method is the ",{"type":597,"tag":629,"props":61646,"children":61648},{"className":61647},[],[61649],{"type":603,"value":61650},"NewJob()",{"type":603,"value":61652}," method, in which the factory has to return the ",{"type":597,"tag":629,"props":61654,"children":61656},{"className":61655},[],[61657],{"type":603,"value":32475},{"type":603,"value":61659}," requested by the Quartz scheduler. In this implementation we delegate directly to the ",{"type":597,"tag":629,"props":61661,"children":61663},{"className":61662},[],[61664],{"type":603,"value":61614},{"type":603,"value":61666},", and let the DI container find the required instance. The cast to ",{"type":597,"tag":629,"props":61668,"children":61670},{"className":61669},[],[61671],{"type":603,"value":32475},{"type":603,"value":61673}," at the end is required because the non-generic version of ",{"type":597,"tag":629,"props":61675,"children":61677},{"className":61676},[],[61678],{"type":603,"value":61679},"GetRequiredService",{"type":603,"value":61681}," returns an ",{"type":597,"tag":629,"props":61683,"children":61685},{"className":61684},[],[61686],{"type":603,"value":34252},{"type":603,"value":9674},{"type":597,"tag":606,"props":61689,"children":61690},{},[61691,61693,61699,61701,61706,61708,61714],{"type":603,"value":61692},"The ",{"type":597,"tag":629,"props":61694,"children":61696},{"className":61695},[],[61697],{"type":603,"value":61698},"ReturnJob",{"type":603,"value":61700}," method is where the scheduler tries to return (i.e. destroy) a job that was created by the factory. Unfortunately, there's no mechanism for doing so with the built-in ",{"type":597,"tag":629,"props":61702,"children":61704},{"className":61703},[],[61705],{"type":603,"value":61614},{"type":603,"value":61707},". We can't create a new ",{"type":597,"tag":629,"props":61709,"children":61711},{"className":61710},[],[61712],{"type":603,"value":61713},"IScopeService",{"type":603,"value":61715}," that fits into the required Quartz API, so we're stuck only being able to create singleton jobs.",{"type":597,"tag":617,"props":61717,"children":61718},{},[61719],{"type":597,"tag":606,"props":61720,"children":61721},{},[61722,61724,61729,61731,61736],{"type":603,"value":61723},"This is important. With the above implementation, it is only safe to create ",{"type":597,"tag":629,"props":61725,"children":61727},{"className":61726},[],[61728],{"type":603,"value":32475},{"type":603,"value":61730}," implementations that are ",{"type":597,"tag":1080,"props":61732,"children":61733},{},[61734],{"type":603,"value":61735},"Singletons",{"type":603,"value":61737}," (or transient).",{"type":597,"tag":598,"props":61739,"children":61741},{"id":61740},"configuring-the-job",[61742,61744],{"type":603,"value":61743},"Configuring the Job",{"type":597,"tag":886,"props":61745,"children":61748},{"href":61746,"rel":61747},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#configuring-the-job",[890],[61749],{"type":597,"tag":719,"props":61750,"children":61751},{"alt":719,"src":61457},[],{"type":597,"tag":606,"props":61753,"children":61754},{},[61755,61757,61762,61764,61770],{"type":603,"value":61756},"I'm only showing a single ",{"type":597,"tag":629,"props":61758,"children":61760},{"className":61759},[],[61761],{"type":603,"value":32475},{"type":603,"value":61763}," implementation here, but we want the Quartz hosted service to be a generic implementation that works for any number of jobs. To help with that, we create a simple DTO called ",{"type":597,"tag":629,"props":61765,"children":61767},{"className":61766},[],[61768],{"type":603,"value":61769},"JobSchedule",{"type":603,"value":61771}," that we'll use to define the timer schedule for a given job type:",{"type":597,"tag":621,"props":61773,"children":61776},{"className":61774,"code":61775,"language":8105,"meta":591},[8107],"using System;\n\npublic class JobSchedule\n{\n    public JobSchedule(Type jobType, string cronExpression)\n    {\n        JobType = jobType;\n        CronExpression = cronExpression;\n    }\n\n    public Type JobType { get; }\n    public string CronExpression { get; }\n}\n",[61777],{"type":597,"tag":629,"props":61778,"children":61779},{"__ignoreMap":591},[61780],{"type":603,"value":61775},{"type":597,"tag":606,"props":61782,"children":61783},{},[61784,61785,61791,61793,61799,61801,61807,61809,61815,61817,61823],{"type":603,"value":61692},{"type":597,"tag":629,"props":61786,"children":61788},{"className":61787},[],[61789],{"type":603,"value":61790},"JobType",{"type":603,"value":61792}," is the .NET type of the job (",{"type":597,"tag":629,"props":61794,"children":61796},{"className":61795},[],[61797],{"type":603,"value":61798},"HelloWorldJob",{"type":603,"value":61800}," for our example), and ",{"type":597,"tag":629,"props":61802,"children":61804},{"className":61803},[],[61805],{"type":603,"value":61806},"CronExpression",{"type":603,"value":61808}," is a ",{"type":597,"tag":886,"props":61810,"children":61812},{"href":61432,"rel":61811},[890],[61813],{"type":603,"value":61814},"Quartz.NET Cron expression",{"type":603,"value":61816},". Cron expressions allow complex timer scheduling so you can set rules like \"fire every half hour between the hours of 8 am and 10 am, on the 5th and 20th of every month\". Just be sure to ",{"type":597,"tag":886,"props":61818,"children":61820},{"href":61432,"rel":61819},[890],[61821],{"type":603,"value":61822},"check the documentation",{"type":603,"value":61824}," for examples as not all Cron expressions used by different systems are interchangeable.",{"type":597,"tag":606,"props":61826,"children":61827},{},[61828,61830,61836],{"type":603,"value":61829},"We'll add the job to DI and configure its schedule in ",{"type":597,"tag":629,"props":61831,"children":61833},{"className":61832},[],[61834],{"type":603,"value":61835},"Startup.ConfigureServices()",{"type":603,"value":26943},{"type":597,"tag":621,"props":61838,"children":61841},{"className":61839,"code":61840,"language":8105,"meta":591},[8107],"using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\nusing Quartz;\nusing Quartz.Impl;\nusing Quartz.Spi;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add Quartz services\n    services.AddSingleton\u003CIJobFactory, SingletonJobFactory>();\n    services.AddSingleton\u003CISchedulerFactory, StdSchedulerFactory>();\n\n    // Add our job\n    services.AddSingleton\u003CHelloWorldJob>();\n    services.AddSingleton(new JobSchedule(\n        jobType: typeof(HelloWorldJob),\n        cronExpression: \"0/5 * * * * ?\")); // run every 5 seconds\n}\n",[61842],{"type":597,"tag":629,"props":61843,"children":61844},{"__ignoreMap":591},[61845],{"type":603,"value":61840},{"type":597,"tag":606,"props":61847,"children":61848},{},[61849],{"type":603,"value":61850},"This code adds four things as singletons to the DI container:",{"type":597,"tag":1321,"props":61852,"children":61853},{},[61854,61866,61887,61898],{"type":597,"tag":807,"props":61855,"children":61856},{},[61857,61858,61864],{"type":603,"value":61692},{"type":597,"tag":629,"props":61859,"children":61861},{"className":61860},[],[61862],{"type":603,"value":61863},"SingletonJobFactory",{"type":603,"value":61865}," shown earlier, used for creating the job instances.",{"type":597,"tag":807,"props":61867,"children":61868},{},[61869,61871,61877,61879,61885],{"type":603,"value":61870},"An implementation of ",{"type":597,"tag":629,"props":61872,"children":61874},{"className":61873},[],[61875],{"type":603,"value":61876},"ISchedulerFactory",{"type":603,"value":61878},", the built-in ",{"type":597,"tag":629,"props":61880,"children":61882},{"className":61881},[],[61883],{"type":603,"value":61884},"StdSchedulerFactory",{"type":603,"value":61886},", which handles scheduling and managing jobs",{"type":597,"tag":807,"props":61888,"children":61889},{},[61890,61891,61896],{"type":603,"value":61692},{"type":597,"tag":629,"props":61892,"children":61894},{"className":61893},[],[61895],{"type":603,"value":61798},{"type":603,"value":61897}," job itself",{"type":597,"tag":807,"props":61899,"children":61900},{},[61901,61903,61908,61910,61915],{"type":603,"value":61902},"An instance of ",{"type":597,"tag":629,"props":61904,"children":61906},{"className":61905},[],[61907],{"type":603,"value":61769},{"type":603,"value":61909}," for the ",{"type":597,"tag":629,"props":61911,"children":61913},{"className":61912},[],[61914],{"type":603,"value":61798},{"type":603,"value":61916}," with a Cron expression to run every 5 seconds.",{"type":597,"tag":606,"props":61918,"children":61919},{},[61920,61922,61927],{"type":603,"value":61921},"There's only one piece missing now that brings them all together, the ",{"type":597,"tag":629,"props":61923,"children":61925},{"className":61924},[],[61926],{"type":603,"value":61311},{"type":603,"value":9674},{"type":597,"tag":598,"props":61929,"children":61931},{"id":61930},"creating-the-quartzhostedservice",[61932,61934],{"type":603,"value":61933},"Creating the QuartzHostedService",{"type":597,"tag":886,"props":61935,"children":61938},{"href":61936,"rel":61937},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#creating-the-quartzhostedservice",[890],[61939],{"type":597,"tag":719,"props":61940,"children":61941},{"alt":719,"src":61457},[],{"type":597,"tag":606,"props":61943,"children":61944},{},[61945,61946,61951,61953,61959,61961,61966,61968,61975,61981],{"type":603,"value":61692},{"type":597,"tag":629,"props":61947,"children":61949},{"className":61948},[],[61950],{"type":603,"value":61311},{"type":603,"value":61952}," is an implementation of ",{"type":597,"tag":629,"props":61954,"children":61956},{"className":61955},[],[61957],{"type":603,"value":61958},"IHostedService",{"type":603,"value":61960}," that sets up the Quartz scheduler, and starts it running in the background. Due to the design of Quartz, we can implement ",{"type":597,"tag":629,"props":61962,"children":61964},{"className":61963},[],[61965],{"type":603,"value":61958},{"type":603,"value":61967}," directly, instead of the ",{"type":597,"tag":886,"props":61969,"children":61972},{"href":61970,"rel":61971},"https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/background-tasks-with-ihostedservice",[890],[61973],{"type":603,"value":61974},"more common approach of deriving from the base ",{"type":597,"tag":629,"props":61976,"children":61978},{"className":61977},[],[61979],{"type":603,"value":61980},"BackgroundService",{"type":603,"value":61982}," class. The full code for the service is listed below, and I'll discuss it afterwards.",{"type":597,"tag":621,"props":61984,"children":61987},{"className":61985,"code":61986,"language":8105,"meta":591},[8107],"using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Hosting;\nusing Quartz;\nusing Quartz.Spi;\n\npublic class QuartzHostedService : IHostedService\n{\n    private readonly ISchedulerFactory _schedulerFactory;\n    private readonly IJobFactory _jobFactory;\n    private readonly IEnumerable\u003CJobSchedule> _jobSchedules;\n\n    public QuartzHostedService(\n        ISchedulerFactory schedulerFactory,\n        IJobFactory jobFactory,\n        IEnumerable\u003CJobSchedule> jobSchedules)\n    {\n        _schedulerFactory = schedulerFactory;\n        _jobSchedules = jobSchedules;\n        _jobFactory = jobFactory;\n    }\n    public IScheduler Scheduler { get; set; }\n\n    public async Task StartAsync(CancellationToken cancellationToken)\n    {\n        Scheduler = await _schedulerFactory.GetScheduler(cancellationToken);\n        Scheduler.JobFactory = _jobFactory;\n\n        foreach (var jobSchedule in _jobSchedules)\n        {\n            var job = CreateJob(jobSchedule);\n            var trigger = CreateTrigger(jobSchedule);\n\n            await Scheduler.ScheduleJob(job, trigger, cancellationToken);\n        }\n\n        await Scheduler.Start(cancellationToken);\n    }\n\n    public async Task StopAsync(CancellationToken cancellationToken)\n    {\n        await Scheduler?.Shutdown(cancellationToken);\n    }\n\n    private static IJobDetail CreateJob(JobSchedule schedule)\n    {\n        var jobType = schedule.JobType;\n        return JobBuilder\n            .Create(jobType)\n            .WithIdentity(jobType.FullName)\n            .WithDescription(jobType.Name)\n            .Build();\n    }\n\n    private static ITrigger CreateTrigger(JobSchedule schedule)\n    {\n        return TriggerBuilder\n            .Create()\n            .WithIdentity($\"{schedule.JobType.FullName}.trigger\")\n            .WithCronSchedule(schedule.CronExpression)\n            .WithDescription(schedule.CronExpression)\n            .Build();\n    }\n}\n",[61988],{"type":597,"tag":629,"props":61989,"children":61990},{"__ignoreMap":591},[61991],{"type":603,"value":61986},{"type":597,"tag":606,"props":61993,"children":61994},{},[61995,61996,62001,62003,62008,62009,62014,62016,62022,62024,62030,62032,62037,62039,62044],{"type":603,"value":61692},{"type":597,"tag":629,"props":61997,"children":61999},{"className":61998},[],[62000],{"type":603,"value":61311},{"type":603,"value":62002}," has three dependencies: the ",{"type":597,"tag":629,"props":62004,"children":62006},{"className":62005},[],[62007],{"type":603,"value":61876},{"type":603,"value":16983},{"type":597,"tag":629,"props":62010,"children":62012},{"className":62011},[],[62013],{"type":603,"value":61303},{"type":603,"value":62015}," we configured in ",{"type":597,"tag":629,"props":62017,"children":62019},{"className":62018},[],[62020],{"type":603,"value":62021},"Startup",{"type":603,"value":62023},", and an ",{"type":597,"tag":629,"props":62025,"children":62027},{"className":62026},[],[62028],{"type":603,"value":62029},"IEnumerable",{"type":603,"value":62031},". We only added a single ",{"type":597,"tag":629,"props":62033,"children":62035},{"className":62034},[],[62036],{"type":603,"value":61769},{"type":603,"value":62038}," to the DI container (for the ",{"type":597,"tag":629,"props":62040,"children":62042},{"className":62041},[],[62043],{"type":603,"value":61798},{"type":603,"value":62045},"), but if you register more job schedules with the DI container they'll all be injected here.",{"type":597,"tag":606,"props":62047,"children":62048},{},[62049,62054,62056,62062,62064,62070],{"type":597,"tag":629,"props":62050,"children":62052},{"className":62051},[],[62053],{"type":603,"value":38342},{"type":603,"value":62055}," is called when the application starts up and is where we configure Quartz. We start by creating an instance of ",{"type":597,"tag":629,"props":62057,"children":62059},{"className":62058},[],[62060],{"type":603,"value":62061},"IScheduler",{"type":603,"value":62063},", assigning it to a property for use later, and setting the ",{"type":597,"tag":629,"props":62065,"children":62067},{"className":62066},[],[62068],{"type":603,"value":62069},"JobFactory",{"type":603,"value":62071}," for the scheduler to the injected instance:",{"type":597,"tag":621,"props":62073,"children":62076},{"className":62074,"code":62075,"language":8105,"meta":591},[8107],"public async Task StartAsync(CancellationToken cancellationToken)\n{\n    Scheduler = await _schedulerFactory.GetScheduler(cancellationToken);\n    Scheduler.JobFactory = _jobFactory;\n\n    // ...\n}\n",[62077],{"type":597,"tag":629,"props":62078,"children":62079},{"__ignoreMap":591},[62080],{"type":603,"value":62075},{"type":597,"tag":606,"props":62082,"children":62083},{},[62084,62086,62092,62093,62099,62101,62107,62108,62114,62116,62121],{"type":603,"value":62085},"Next, we loop through the injected job schedules, and create a Quartz ",{"type":597,"tag":629,"props":62087,"children":62089},{"className":62088},[],[62090],{"type":603,"value":62091},"IJobDetail",{"type":603,"value":16983},{"type":597,"tag":629,"props":62094,"children":62096},{"className":62095},[],[62097],{"type":603,"value":62098},"ITrigger",{"type":603,"value":62100}," for each one using the ",{"type":597,"tag":629,"props":62102,"children":62104},{"className":62103},[],[62105],{"type":603,"value":62106},"CreateJob",{"type":603,"value":16983},{"type":597,"tag":629,"props":62109,"children":62111},{"className":62110},[],[62112],{"type":603,"value":62113},"CreateTrigger",{"type":603,"value":62115}," helper methods at the end of the class. If you don't like how this part works, or need more control over the configuration, you can easily customise it by extending the ",{"type":597,"tag":629,"props":62117,"children":62119},{"className":62118},[],[62120],{"type":603,"value":61769},{"type":603,"value":62122}," DTO as you see fit.",{"type":597,"tag":621,"props":62124,"children":62127},{"className":62125,"code":62126,"language":8105,"meta":591},[8107],"public async Task StartAsync(CancellationToken cancellationToken)\n{\n    // ...\n    foreach (var jobSchedule in _jobSchedules)\n    {\n        var job = CreateJob(jobSchedule);\n        var trigger = CreateTrigger(jobSchedule);\n\n        await Scheduler.ScheduleJob(job, trigger, cancellationToken);\n    }\n    // ...\n}\n\nprivate static IJobDetail CreateJob(JobSchedule schedule)\n{\n    var jobType = schedule.JobType;\n    return JobBuilder\n        .Create(jobType)\n        .WithIdentity(jobType.FullName)\n        .WithDescription(jobType.Name)\n        .Build();\n}\n\nprivate static ITrigger CreateTrigger(JobSchedule schedule)\n{\n    return TriggerBuilder\n        .Create()\n        .WithIdentity($\"{schedule.JobType.FullName}.trigger\")\n        .WithCronSchedule(schedule.CronExpression)\n        .WithDescription(schedule.CronExpression)\n        .Build();\n}\n",[62128],{"type":597,"tag":629,"props":62129,"children":62130},{"__ignoreMap":591},[62131],{"type":603,"value":62126},{"type":597,"tag":606,"props":62133,"children":62134},{},[62135,62137,62143,62145,62151,62153,62159],{"type":603,"value":62136},"Finally, once all the jobs are scheduled, you call ",{"type":597,"tag":629,"props":62138,"children":62140},{"className":62139},[],[62141],{"type":603,"value":62142},"Scheduler.Start()",{"type":603,"value":62144}," to actually start the Quartz.NET scheduler processing in the background. When the app shuts down, the framework will call ",{"type":597,"tag":629,"props":62146,"children":62148},{"className":62147},[],[62149],{"type":603,"value":62150},"StopAsync()",{"type":603,"value":62152},", at which point you can call ",{"type":597,"tag":629,"props":62154,"children":62156},{"className":62155},[],[62157],{"type":603,"value":62158},"Scheduler.Stop()",{"type":603,"value":62160}," to safely shut down the scheduler process.",{"type":597,"tag":621,"props":62162,"children":62165},{"className":62163,"code":62164,"language":8105,"meta":591},[8107],"public async Task StopAsync(CancellationToken cancellationToken)\n{\n    await Scheduler?.Shutdown(cancellationToken);\n}\n",[62166],{"type":597,"tag":629,"props":62167,"children":62168},{"__ignoreMap":591},[62169],{"type":603,"value":62164},{"type":597,"tag":606,"props":62171,"children":62172},{},[62173,62175,62181,62183,62189],{"type":603,"value":62174},"You can register the hosted service using the ",{"type":597,"tag":629,"props":62176,"children":62178},{"className":62177},[],[62179],{"type":603,"value":62180},"AddHostedService()",{"type":603,"value":62182}," extension method in ",{"type":597,"tag":629,"props":62184,"children":62186},{"className":62185},[],[62187],{"type":603,"value":62188},"Startup.ConfigureServices",{"type":603,"value":26943},{"type":597,"tag":621,"props":62191,"children":62194},{"className":62192,"code":62193,"language":8105,"meta":591},[8107],"public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddHostedService\u003CQuartzHostedService>();\n}\n",[62195],{"type":597,"tag":629,"props":62196,"children":62197},{"__ignoreMap":591},[62198],{"type":603,"value":62193},{"type":597,"tag":606,"props":62200,"children":62201},{},[62202],{"type":603,"value":62203},"If you run the application, you should see the background task running every 5 seconds and writing to the Console (or wherever you have logging configured)",{"type":597,"tag":606,"props":62205,"children":62206},{},[62207],{"type":597,"tag":719,"props":62208,"children":62211},{"alt":62209,"src":62210},"Background service writing Hello World to console repeatedly","/images/2019-11-05-quartz/quartz_service.png",[],{"type":597,"tag":598,"props":62213,"children":62215},{"id":62214},"using-scoped-services-in-jobs",[62216,62218],{"type":603,"value":62217},"Using scoped services in jobs",{"type":597,"tag":886,"props":62219,"children":62222},{"href":62220,"rel":62221},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#using-scoped-services-in-jobs",[890],[62223],{"type":597,"tag":719,"props":62224,"children":62225},{"alt":719,"src":61457},[],{"type":597,"tag":606,"props":62227,"children":62228},{},[62229,62231,62237,62239,62244,62246,62253],{"type":603,"value":62230},"There's one big problem with the implementation as described in this post: you can only create Singleton or Transient jobs. That means you can't use any dependencies that are registered as Scoped services. For example, you can't inject an EF Core ",{"type":597,"tag":629,"props":62232,"children":62234},{"className":62233},[],[62235],{"type":603,"value":62236},"DatabaseContext",{"type":603,"value":62238}," into your ",{"type":597,"tag":629,"props":62240,"children":62242},{"className":62241},[],[62243],{"type":603,"value":32475},{"type":603,"value":62245}," implementation, as you'll have a ",{"type":597,"tag":886,"props":62247,"children":62250},{"href":62248,"rel":62249},"http://blog.ploeh.dk/2014/06/02/captive-dependency/",[890],[62251],{"type":603,"value":62252},"captive dependency",{"type":603,"value":62254}," problem.",{"type":597,"tag":606,"props":62256,"children":62257},{},[62258,62260,62265,62267,62274,62276,62281],{"type":603,"value":62259},"Working around this isn't a big issue: you can inject an ",{"type":597,"tag":629,"props":62261,"children":62263},{"className":62262},[],[62264],{"type":603,"value":61614},{"type":603,"value":62266}," and create your own scope, ",{"type":597,"tag":886,"props":62268,"children":62271},{"href":62269,"rel":62270},"https://andrewlock.net/the-dangers-and-gotchas-of-using-scoped-services-when-configuring-options-in-asp-net-core/#3-creating-a-new-scope-in-iconfigureoptions",[890],[62272],{"type":603,"value":62273},"similar to the solution for a similar problem in a previous post",{"type":603,"value":62275},". For example, if you need to use a scoped service in your ",{"type":597,"tag":629,"props":62277,"children":62279},{"className":62278},[],[62280],{"type":603,"value":61798},{"type":603,"value":62282},", you could use something like the following:",{"type":597,"tag":621,"props":62284,"children":62287},{"className":62285,"code":62286,"language":8105,"meta":591},[8107],"public class HelloWorldJob : IJob\n{\n    // Inject the DI provider\n    private readonly IServiceProvider _provider;\n    public HelloWorldJob( IServiceProvider provider)\n    {\n        _provider = provider;\n    }\n\n    public Task Execute(IJobExecutionContext context)\n    {\n        // Create a new scope\n        using(var scope = _provider.CreateScope())\n        {\n            // Resolve the Scoped service\n            var service = scope.ServiceProvider.GetService\u003CIScopedService>();\n            _logger.LogInformation(\"Hello world!\");\n        }\n\n        return Task.CompletedTask;\n    }\n}\n",[62288],{"type":597,"tag":629,"props":62289,"children":62290},{"__ignoreMap":591},[62291],{"type":603,"value":62286},{"type":597,"tag":606,"props":62293,"children":62294},{},[62295,62297,62302],{"type":603,"value":62296},"This ensures a new scope is created every time the job runs, so you can retrieve (and dispose) scoped services inside the ",{"type":597,"tag":629,"props":62298,"children":62300},{"className":62299},[],[62301],{"type":603,"value":32475},{"type":603,"value":62303},". Unfortunately things do get a little messy. In the next post I'll show a variation on this approach that is a little cleaner.",{"type":597,"tag":598,"props":62305,"children":62307},{"id":62306},"summary",[62308,62310],{"type":603,"value":62309},"Summary",{"type":597,"tag":886,"props":62311,"children":62314},{"href":62312,"rel":62313},"https://andrewlock.net/creating-a-quartz-net-hosted-service-with-asp-net-core/#summary",[890],[62315],{"type":597,"tag":719,"props":62316,"children":62317},{"alt":719,"src":61457},[],{"type":597,"tag":606,"props":62319,"children":62320},{},[62321,62323,62328],{"type":603,"value":62322},"In this post I introduced Quartz.NET and showed how you could use it to schedule background jobs to run in ASP.NET Core using ",{"type":597,"tag":629,"props":62324,"children":62326},{"className":62325},[],[62327],{"type":603,"value":61958},{"type":603,"value":62329},". The example shown in this post is best for singleton or transient jobs, which isn't ideal, as consuming scoped services is clumsy. In the next post, I'll show a variation on this approach that makes using scoped services easier.",{"type":597,"tag":1321,"props":62331,"children":62332},{},[62333,62343,62352,62361],{"type":597,"tag":807,"props":62334,"children":62335},{},[62336],{"type":597,"tag":886,"props":62337,"children":62340},{"href":62338,"rel":62339},"https://github.com/andrewlock/blog-examples/tree/master/QuartzHostedService",[890],[62341],{"type":603,"value":62342},"Example source code for this post",{"type":597,"tag":807,"props":62344,"children":62345},{},[62346],{"type":597,"tag":886,"props":62347,"children":62350},{"href":62348,"rel":62349},"https://github.com/HangfireIO/Cronos",[890],[62351],{"type":603,"value":62348},{"type":597,"tag":807,"props":62353,"children":62354},{},[62355],{"type":597,"tag":886,"props":62356,"children":62359},{"href":62357,"rel":62358},"https://github.com/HangfireIO/Hangfire",[890],[62360],{"type":603,"value":62357},{"type":597,"tag":807,"props":62362,"children":62363},{},[62364],{"type":597,"tag":886,"props":62365,"children":62368},{"href":62366,"rel":62367},"https://github.com/quartznet/quartznet",[890],[62369],{"type":603,"value":62366},{"type":597,"tag":1023,"props":62371,"children":62373},{"id":62372},"hangfire-与quartznet对比",[62374],{"type":603,"value":62375},"Hangfire 与quartz.net对比",{"type":597,"tag":606,"props":62377,"children":62378},{},[62379],{"type":603,"value":62380},"在项目没有引入Hangfire之前，一直使用的是Quartz.net。个人认为Quartz.net在定时任务处理方面优势如下：",{"type":597,"tag":1321,"props":62382,"children":62383},{},[62384],{"type":597,"tag":807,"props":62385,"children":62386},{},[62387],{"type":603,"value":62388},"支持秒级单位的定时任务处理，但是Hangfire只能支持分钟及以上的定时任务处理",{"type":597,"tag":606,"props":62390,"children":62391},{},[62392,62394,62401],{"type":603,"value":62393},"原因在于Hangfire用的是开源的",{"type":597,"tag":886,"props":62395,"children":62398},{"href":62396,"rel":62397},"https://github.com/atifaziz/NCrontab",[890],[62399],{"type":603,"value":62400},"NCrontab",{"type":603,"value":62402},"组件，跟linux上的crontab指令相似。",{"type":597,"tag":1321,"props":62404,"children":62405},{},[62406,62411],{"type":597,"tag":807,"props":62407,"children":62408},{},[62409],{"type":603,"value":62410},"更加复杂的触发器，日历以及任务调度处理",{"type":597,"tag":807,"props":62412,"children":62413},{},[62414],{"type":603,"value":62415},"可配置的定时任务",{"type":597,"tag":606,"props":62417,"children":62418},{},[62419],{"type":603,"value":62420},"但是为什么要换Hangfire? 很大的原因在于项目需要一个后台可监控的应用，不用每次都要从服务器拉取日志查看，在没有ELK的时候相当不方便。Hangfire控制面板不仅提供监控，也可以手动的触发执行定时任务。如果在定时任务处理方面没有很高的要求，比如一定要5s定时执行，Hangfire值得拥有。抛开这些，Hangfire优势太明显了：",{"type":597,"tag":1321,"props":62422,"children":62423},{},[62424,62429,62434,62439,62444,62456,62461,62466],{"type":597,"tag":807,"props":62425,"children":62426},{},[62427],{"type":603,"value":62428},"持久化保存任务、队列、统计信息",{"type":597,"tag":807,"props":62430,"children":62431},{},[62432],{"type":603,"value":62433},"重试机制",{"type":597,"tag":807,"props":62435,"children":62436},{},[62437],{"type":603,"value":62438},"多语言支持",{"type":597,"tag":807,"props":62440,"children":62441},{},[62442],{"type":603,"value":62443},"支持任务取消",{"type":597,"tag":807,"props":62445,"children":62446},{},[62447,62449,62455],{"type":603,"value":62448},"支持按指定",{"type":597,"tag":629,"props":62450,"children":62452},{"className":62451},[],[62453],{"type":603,"value":62454},"Job Queue",{"type":603,"value":2614},{"type":597,"tag":807,"props":62457,"children":62458},{},[62459],{"type":603,"value":62460},"服务器端工作线程可控，即job执行并发数控制",{"type":597,"tag":807,"props":62462,"children":62463},{},[62464],{"type":603,"value":62465},"分布式部署，支持高可用",{"type":597,"tag":807,"props":62467,"children":62468},{},[62469],{"type":603,"value":62470},"良好的扩展性，如支持IOC、Hangfire Dashboard授权控制、Asp.net Core、持久化存储等",{"type":597,"tag":606,"props":62472,"children":62473},{},[62474],{"type":603,"value":62475},"说了这么多的优点，我们可以有个案例，例如秒杀场景：用户下单->订单生成->扣减库存，Hangfire对于这种分布式的应用处理也是适用的，最后会给出实现。",{"title":591,"searchDepth":787,"depth":787,"links":62477},[62478,62479,62480,62481,62482,62483,62484,62485],{"id":61316,"depth":787,"text":61319},{"id":61446,"depth":787,"text":61449},{"id":61490,"depth":787,"text":61493},{"id":61562,"depth":787,"text":61565},{"id":61740,"depth":787,"text":61743},{"id":61930,"depth":787,"text":61933},{"id":62214,"depth":787,"text":62217},{"id":62306,"depth":787,"text":62309,"children":62486},[62487],{"id":62372,"depth":1530,"text":62375},"content:dotnet:2019-11-05-quartz.md","dotnet/2019-11-05-quartz.md","2019-11-05",{"_path":32,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":31,"description":62492,"body":62493,"_type":791,"_id":62595,"_source":793,"_file":62596,"_extension":795,"date":62597},"https://www.cnblogs.com/sevenyuan/p/6678317.html",{"type":594,"children":62494,"toc":62593},[62495,62503,62512,62521,62530,62539,62548,62557,62566,62575,62584],{"type":597,"tag":606,"props":62496,"children":62497},{},[62498],{"type":597,"tag":886,"props":62499,"children":62501},{"href":62492,"rel":62500},[890],[62502],{"type":603,"value":62492},{"type":597,"tag":606,"props":62504,"children":62505},{},[62506],{"type":597,"tag":886,"props":62507,"children":62510},{"href":62508,"rel":62509},"https://www.lt-tree.com/2019/09/21/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/",[890],[62511],{"type":603,"value":62508},{"type":597,"tag":606,"props":62513,"children":62514},{},[62515],{"type":597,"tag":886,"props":62516,"children":62519},{"href":62517,"rel":62518},"https://blog.csdn.net/best789248/article/details/78434114",[890],[62520],{"type":603,"value":62517},{"type":597,"tag":606,"props":62522,"children":62523},{},[62524],{"type":597,"tag":886,"props":62525,"children":62528},{"href":62526,"rel":62527},"https://zhuanlan.zhihu.com/p/49482294",[890],[62529],{"type":603,"value":62526},{"type":597,"tag":606,"props":62531,"children":62532},{},[62533],{"type":597,"tag":886,"props":62534,"children":62537},{"href":62535,"rel":62536},"https://gameinstitute.qq.com/course/detail/10098",[890],[62538],{"type":603,"value":62535},{"type":597,"tag":606,"props":62540,"children":62541},{},[62542],{"type":597,"tag":886,"props":62543,"children":62546},{"href":62544,"rel":62545},"https://gameinstitute.qq.com/course/detail/10099",[890],[62547],{"type":603,"value":62544},{"type":597,"tag":606,"props":62549,"children":62550},{},[62551],{"type":597,"tag":886,"props":62552,"children":62555},{"href":62553,"rel":62554},"https://gameinstitute.qq.com/course/detail/10112",[890],[62556],{"type":603,"value":62553},{"type":597,"tag":606,"props":62558,"children":62559},{},[62560],{"type":597,"tag":886,"props":62561,"children":62564},{"href":62562,"rel":62563},"https://gameinstitute.qq.com/course/detail/10100",[890],[62565],{"type":603,"value":62562},{"type":597,"tag":606,"props":62567,"children":62568},{},[62569],{"type":597,"tag":886,"props":62570,"children":62573},{"href":62571,"rel":62572},"https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools:zh-cn/Scripting:zh-cn/Abilities_Data_Driven:zh-cn",[890],[62574],{"type":603,"value":62571},{"type":597,"tag":606,"props":62576,"children":62577},{},[62578],{"type":597,"tag":886,"props":62579,"children":62582},{"href":62580,"rel":62581},"https://zhuanlan.zhihu.com/p/38326478",[890],[62583],{"type":603,"value":62580},{"type":597,"tag":606,"props":62585,"children":62586},{},[62587],{"type":597,"tag":886,"props":62588,"children":62591},{"href":62589,"rel":62590},"https://zhuanlan.zhihu.com/p/38605352",[890],[62592],{"type":603,"value":62589},{"title":591,"searchDepth":787,"depth":787,"links":62594},[],"content:dotnet:2019-11-02-state-sync-skill.md","dotnet/2019-11-02-state-sync-skill.md","2019-11-02",{"_path":26,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":25,"description":62599,"body":62600,"_type":791,"_id":63175,"_source":793,"_file":63176,"_extension":795,"date":63177},"Lock-Step我们把游戏的前进分为一帧帧，这里的帧和游戏的渲染帧率并不是一个，只是借鉴了帧的概念，自定义的帧，我们称为turn。游戏的过程就是每一个turn不断向前推进，每一个玩家的turn推进速度一致。每一帧只有当服务器集齐了所有玩家的操作指令，也就是输入确定了之后，才可以进行计算，进入下一个turn，否则就要等待最慢的玩家。之后再广播给所有的玩家。如此才能保证帧一致。Lockstep的游戏是严格按照turn向前推进的，如果有人延迟比较高，其他玩家必须等待该玩家跟上之后再继续计算，不存在某个玩家领先或落后其他玩家若干个turn的情况。使用Lockstep同步机制的游戏中，每个玩家的延迟都",{"type":594,"children":62601,"toc":63168},[62602,62608,62631,62636,62643,62648,62654,62659,62664,62669,62676,62681,62686,62693,62698,62703,62708,62713,62718,62727,62732,62741,62746,62752,62757,62762,62767,62772,62777,62782,62787,62792,62797,62802,62807,62812,62823,62828,62833,62838,62843,62848,62861,62866,62871,62876,62881,62886,62891,62896,62910,62915,62920,62925,62936,62967,62981,62995,63000,63005,63010,63017,63024,63031,63036,63045,63054,63059,63070,63079,63084,63093,63107,63112,63117,63122,63127],{"type":597,"tag":598,"props":62603,"children":62605},{"id":62604},"lock-step",[62606],{"type":603,"value":62607},"Lock-Step",{"type":597,"tag":803,"props":62609,"children":62610},{},[62611,62616,62621,62626],{"type":597,"tag":807,"props":62612,"children":62613},{},[62614],{"type":603,"value":62615},"我们把游戏的前进分为一帧帧，这里的帧和游戏的渲染帧率并不是一个，只是借鉴了帧的概念，自定义的帧，我们称为turn。游戏的过程就是每一个turn不断向前推进，每一个玩家的turn推进速度一致。",{"type":597,"tag":807,"props":62617,"children":62618},{},[62619],{"type":603,"value":62620},"每一帧只有当服务器集齐了所有玩家的操作指令，也就是输入确定了之后，才可以进行计算，进入下一个turn，否则就要等待最慢的玩家。之后再广播给所有的玩家。如此才能保证帧一致。",{"type":597,"tag":807,"props":62622,"children":62623},{},[62624],{"type":603,"value":62625},"Lockstep的游戏是严格按照turn向前推进的，如果有人延迟比较高，其他玩家必须等待该玩家跟上之后再继续计算，不存在某个玩家领先或落后其他玩家若干个turn的情况。使用Lockstep同步机制的游戏中，每个玩家的延迟都等于延迟最高的那个人。",{"type":597,"tag":807,"props":62627,"children":62628},{},[62629],{"type":603,"value":62630},"由于大家的turn一致，以及输入固定，所以每一步所有客户端的计算结果都一致的。",{"type":597,"tag":606,"props":62632,"children":62633},{},[62634],{"type":603,"value":62635},"我们来看看具体的执行流程:",{"type":597,"tag":606,"props":62637,"children":62638},{},[62639],{"type":597,"tag":719,"props":62640,"children":62642},{"alt":719,"src":62641},"/images/2019-11-01-lock-step/113252_S4Vd_1859679.png",[],{"type":597,"tag":606,"props":62644,"children":62645},{},[62646],{"type":603,"value":62647},"上图中我们可以明显看到，这种囚徒模式的帧同步，在第二帧的时候，因为玩家1有延迟，而导致第二帧的同步时间发生延迟，从而导致所有玩家都在等待，出现卡顿现象",{"type":597,"tag":598,"props":62649,"children":62651},{"id":62650},"bucket-synchronization乐观锁",[62652],{"type":603,"value":62653},"Bucket Synchronization(乐观锁)",{"type":597,"tag":606,"props":62655,"children":62656},{},[62657],{"type":603,"value":62658},"囚徒模式的帧同步，有一个致命的缺陷就是，若联网的玩家有一个网速慢了，势必会影响其他玩家的体验，因为服务器要等待所有输入达到之后再同步到所有的c端。另外如果中途有人掉线了，游戏就会无法继续或者掉线玩家无法重连，因为在严格的帧同步的情况下，中途加入游戏是从技术上来讲是非常困难的。因为你重新进来之后，你的初始状态和大家不一致，而且你的状态信息都是丢失状态的，比如，你的等级，随机种子，角色的属性信息等。 比如玩过早期的冰封王座都知道，一旦掉线基本这局就废了，需要重开，至于为何没有卡顿的现象，因为那时都是解决方案都是采用局域网的方式，所以基本是没有延迟问题的。",{"type":597,"tag":606,"props":62660,"children":62661},{},[62662],{"type":603,"value":62663},"后期为了解决这个问题，如今包括王者荣耀，服务器会保存玩家当场游戏的游戏指令以及状态信息，在玩家断线重连的时候，能够恢复到断线前的状态。不过这个还是无法解决帧同步的问题，因为严格的帧同步，是要等到所有玩家都输入之后，再去通知广播client更新，如果A服务器一直没有输入同步过来，大家是要等着的，那么如何解决这个问题？",{"type":597,"tag":606,"props":62665,"children":62666},{},[62667],{"type":603,"value":62668},"采用“定时不等待”的乐观方式在每次Interval时钟发生时固定将操作广播给所有用户，不依赖具体每个玩家是否有操作更新。如此帧率的时钟在由服务器控制，当客户端有操作的时候及时的发送服务器，然后服务端每秒钟20-50次向所有客户端发送更新消息。如下图:",{"type":597,"tag":606,"props":62670,"children":62671},{},[62672],{"type":597,"tag":719,"props":62673,"children":62675},{"alt":719,"src":62674},"/images/2019-11-01-lock-step/113303_rNd5_1859679.png",[],{"type":597,"tag":606,"props":62677,"children":62678},{},[62679],{"type":603,"value":62680},"上图中，我们看到服务器不会再等到搜集完所有用户输入再进行下一帧，而是按照固定频率来同步玩家的输入信息到每一个c端，如果有玩家网络延迟，服务器的帧步进是不会等待的，比如上图中，在第二帧的时候，玩家A的网速慢，那么他这个时候，会被网速快的玩家给秒了（其他游戏也差不多）。但是网速慢的玩家不会卡到快的玩家，只会感觉自己操作延迟而已。",{"type":597,"tag":606,"props":62682,"children":62683},{},[62684],{"type":603,"value":62685},"Bucket Synchronization 是 Lock-Step 的改良算法. 算法流程可以参考下图:",{"type":597,"tag":606,"props":62687,"children":62688},{},[62689],{"type":597,"tag":719,"props":62690,"children":62692},{"alt":719,"src":62691},"/images/2019-11-01-lock-step/bucket.png",[],{"type":597,"tag":606,"props":62694,"children":62695},{},[62696],{"type":603,"value":62697},"Bucket Synchronization 算法应用于网状网络, 网络中有一个 master 节点(也是 client).",{"type":597,"tag":606,"props":62699,"children":62700},{},[62701],{"type":603,"value":62702},"master 在启动之初, 会对所有 client 做网络对时, 计算网络包的超时时间.",{"type":597,"tag":606,"props":62704,"children":62705},{},[62706],{"type":603,"value":62707},"master 会设置一个 bucket 时间, 在每个 bucket 时间节点, master 执行收集到的所有 step 指令, 并将更新推送到所有的 client 上. (上图的例子是一个简化流程, 只有俩 client, 没有 master 推送)",{"type":597,"tag":606,"props":62709,"children":62710},{},[62711],{"type":603,"value":62712},"master 对收集到的 step 包做超时校验机制, 如果收到的 step 指令包的时间戳, 延迟超过了预设的阈值, 就当作超时包丢弃.",{"type":597,"tag":606,"props":62714,"children":62715},{},[62716],{"type":603,"value":62717},"与 Lock-Step 相比, Bucket Synchronization 改进的是: 设置了 bucket 的概念, 执行每一帧的时间是固定的 bucket 时间节点, 而不必等到收到所有的 client step 指令, 从而网络不再受最差的 client 限制.",{"type":597,"tag":598,"props":62719,"children":62721},{"id":62720},"timewrap-synchronization",[62722],{"type":597,"tag":1080,"props":62723,"children":62724},{},[62725],{"type":603,"value":62726},"TimeWrap Synchronization",{"type":597,"tag":606,"props":62728,"children":62729},{},[62730],{"type":603,"value":62731},"它是一个基于某些状态支持回滚(rollback)的同步算法。有点类似HL的做法。\n简言之，就是对每个操作指令的执行后保存一个状态快照(snapshot)，\n各个peer按照自己的预测先行显示，但在发生一致性冲突的情况下，\n回滚到上一个状态，并重新将指令序列在基于回滚后的快照的基础上再\n执行一次，以获得正确的当前状态。",{"type":597,"tag":598,"props":62733,"children":62735},{"id":62734},"trailing-state-synchronization",[62736],{"type":597,"tag":1080,"props":62737,"children":62738},{},[62739],{"type":603,"value":62740},"Trailing State Synchronization",{"type":597,"tag":606,"props":62742,"children":62743},{},[62744],{"type":603,"value":62745},"对TimeWrap Synchronization的一种改进。TimeWrap方案中建立snapshot是\n以指令数量(1或少量几个指令)间隔为单位；而TSS方案则以某种延迟值(100ms)\n间隔为单位对游戏做snapshot(比如100ms前做一个，200ms前做一个...)。\n当发生一致性冲突时，寻找最远需要开始计算的snapshot，并将该snapshot到\n现在为止的时间内的指令重新执行，得到正确的最新状态。",{"type":597,"tag":598,"props":62747,"children":62749},{"id":62748},"state-hash",[62750],{"type":603,"value":62751},"State Hash",{"type":597,"tag":606,"props":62753,"children":62754},{},[62755],{"type":603,"value":62756},"在实现中客户端需要计算一些关键信息的hash值，提供给服务器以便发现游戏中的同步问题，例如玩家的位置信息，各个客户端计算结果是否一致等等。",{"type":597,"tag":606,"props":62758,"children":62759},{},[62760],{"type":603,"value":62761},"客户端执行完每个逻辑帧后，会根据游戏的状态计算出一个Hash值，用其标定一个具体的游戏状态。不同客户端通过对比这个值，即可判断客户端之间是否保持同步，平常也可用于不同步Debug。",{"type":597,"tag":606,"props":62763,"children":62764},{},[62765],{"type":603,"value":62766},"游戏外挂的种类有很多，这里所谈的外挂仅指会更改游戏逻辑执行或数值的外挂，应该也是题主最关心的类型。对于帧同步防外挂，因为游戏逻辑执行在本地，假如某个客户端使用了外挂的话，那么必然会导致其计算出的State Hash与其他客户端不一致。",{"type":597,"tag":606,"props":62768,"children":62769},{},[62770],{"type":603,"value":62771},"1、 客户端自验证（PVP 3人及以上）",{"type":597,"tag":606,"props":62773,"children":62774},{},[62775],{"type":603,"value":62776},"PVP3人及以上的战斗中，客户端上报服务器各自计算的State Hash，服务器可以通过对比State Hash判断具体哪一个客户端发生了不同步。当然，不同步也可能是客户端BUG，不同步也不一定就结算不一致。根绝不同的需求，你也可以在发现不同步后马上中断游戏。这个方法的缺点主要在于3人以下或者单机模式的话就没法使用了。",{"type":597,"tag":606,"props":62778,"children":62779},{},[62780],{"type":603,"value":62781},"2、客户端分布式验证",{"type":597,"tag":606,"props":62783,"children":62784},{},[62785],{"type":603,"value":62786},"假如客户端的核心逻辑写得足够干净和独立的话，服务器可以将某一场战斗的数据下发给一个空闲客户端，令其新起一个线程慢慢地计算验证，再将结果上报至服务器。能做到这一点的话，任何战斗模式都可以进行验证了。",{"type":597,"tag":606,"props":62788,"children":62789},{},[62790],{"type":603,"value":62791},"3、服务器验证",{"type":597,"tag":606,"props":62793,"children":62794},{},[62795],{"type":603,"value":62796},"与客户端分布式验证相同，客户端逻辑如果足够干净和独立，那么服务器也可以自己验算战斗结果。",{"type":597,"tag":606,"props":62798,"children":62799},{},[62800],{"type":603,"value":62801},"4、服务器统计与运营策略",{"type":597,"tag":606,"props":62803,"children":62804},{},[62805],{"type":603,"value":62806},"非单机模式下，服务器都根据客户端的State Hash对战斗的同步情况进行记录。将经常发生不同步的客户端标记出来，然后进一步处理。运营可以为玩家每日不同步可结算的次数设定一个阈值，超过则当日之后的战斗结算均无效。",{"type":597,"tag":606,"props":62808,"children":62809},{},[62810],{"type":603,"value":62811},"1和4是任何帧同步游戏都可以做的，2与3对游戏的框架要求比较高。我们的游戏因为是从单机版改造过来的，所以也只做了1和4。",{"type":597,"tag":1321,"props":62813,"children":62814},{},[62815],{"type":597,"tag":807,"props":62816,"children":62817},{},[62818],{"type":597,"tag":1080,"props":62819,"children":62820},{},[62821],{"type":603,"value":62822},"游戏逻辑的回滚",{"type":597,"tag":606,"props":62824,"children":62825},{},[62826],{"type":603,"value":62827},"回滚逻辑，就是我们解决问题的方案。可以这样理解，客户端的时间，领先服务器，客户端不需要服务器确认帧返回才执行指令，而是玩家输入，立刻执行（其他玩家的输入，按照其最近一个输入做预测，或者其他更优化的预测方案），然后将指令发送给服务器，服务器收到后给客户端确认，客户端收到确认后，如果服务确认的操作，和之前执行的一样（自己和其他玩家预测的操作），将不做任何改变，如果不一样（预测错误），就会将游戏整体逻辑回滚到最后一次服务器确认的正确帧，然后再追上当前客户端的帧。",{"type":597,"tag":606,"props":62829,"children":62830},{},[62831],{"type":603,"value":62832},"此处逻辑较为复杂，我尝试举个例子说明下。",{"type":597,"tag":606,"props":62834,"children":62835},{},[62836],{"type":603,"value":62837},"当前客户端（A，B）执行到100帧，服务器执行到97帧。在100帧的时候，A执行了移动，B执行了攻击，A和B都通知服务器：我已经执行到100帧，我的操作是移动（A），攻击（B）。服务器在自己的98帧或99帧收到了A，B的消息，存在对应帧的操作数据中，等服务器执行到100帧的时候（或提前），将这个数据广播给AB。",{"type":597,"tag":606,"props":62839,"children":62840},{},[62841],{"type":603,"value":62842},"然后A和B立刻开始执行100帧，A执行移动，预测B不执行操作。而B执行攻击，预测A执行攻击（可能A的99帧也是攻击），A和B各自预测对方的操作。",{"type":597,"tag":606,"props":62844,"children":62845},{},[62846],{"type":603,"value":62847},"在A和B执行完100帧后，他们会各自保存100帧的状态快照，以及100帧各自的操作（包括预测的操作），以备万一预测错误，做逻辑回滚。",{"type":597,"tag":606,"props":62849,"children":62850},{},[62851,62853,62859],{"type":603,"value":62852},"执行几帧后，A，B来到了103帧，服务器到了100帧，他开始广播数据给AB，在一定延迟后，AB收到了服务器确认的100帧的数据，这时候，AB可能已经执行到104了。A和B各自去核对服务器的数据和自己预测的数据是否相同。例如A核对后，100帧的操作，和自己预测的一样，A不做任何处理，继续往前。而B核对后，发现在100帧，B对A的预测，和服务器确认的A的操作，是不一样的（B预测的是攻击，而实际A的操作是移动），B就回滚到上一个确认一样的帧，即99帧，然后根据确认的100帧操作去执行100帧，然后快速执行101",{"type":597,"tag":62854,"props":62855,"children":62856},"del",{},[62857],{"type":603,"value":62858},"103的帧逻辑，之后继续执行104帧，其中（101",{"type":603,"value":62860},"104）还是预测的逻辑帧。",{"type":597,"tag":606,"props":62862,"children":62863},{},[62864],{"type":603,"value":62865},"因为客户端对当前操作的立刻执行，这个操作手感，是完全和pve（不联网状态）是一样的，不存在任何delay。所以，能做到绝佳的操作手感。当预测不一样的时候，做逻辑回滚，快速追回当前操作。",{"type":597,"tag":606,"props":62867,"children":62868},{},[62869],{"type":603,"value":62870},"这样，对于网络好的玩家，和网络不好的玩家，都不会互相影响，不会像lockstep一样，网络好的玩家，会被网络不好的玩家lock住。也不会被网络延迟lock住，客户端可以一直往前预测。",{"type":597,"tag":606,"props":62872,"children":62873},{},[62874],{"type":603,"value":62875},"对于网络好的玩家（A），可以动态调整（根据动态的latency），让客户端领先服务器少一些，尽量减少预测量，就会尽量减少回滚，例如网络好的，可能客户端只领先2~3帧。",{"type":597,"tag":606,"props":62877,"children":62878},{},[62879],{"type":603,"value":62880},"对于网络不好的玩家（B），动态调整，领先服务器多一些，根据latency调整，例如领先5帧。",{"type":597,"tag":606,"props":62882,"children":62883},{},[62884],{"type":603,"value":62885},"那么，A可能预测错的情况，只有2~3帧，而网络不好的B，可能预测错误的帧有5帧。通过优化的预测技术，和消息通知的优化，可以进一步减少A和B的预测错误率。对于A而言，战斗是顺畅的，手感很好，少数情况的回滚，优化好了，并不会带来卡顿和延迟感。",{"type":597,"tag":606,"props":62887,"children":62888},{},[62889],{"type":603,"value":62890},"重点优化的是B，即网络不好的玩家，他的操作体验。因为客户端不等待服务器确认，就执行操作，所以B的操作手感，和A是一致的，区别只在于，B因为延迟，预测了比较多的帧，可能导致预测错，回滚会多一些。比如按照B的预测，应该在100帧击中A，但是因为预测错误A的操作，回滚重新执行后，B可能在100帧不会击中A。这对于B来说，通过插值和一些平滑方式，B的感受是不会有太大区别的，因为B看自己，操作自己都是及时反馈的，他感觉自己是平滑的。",{"type":597,"tag":606,"props":62892,"children":62893},{},[62894],{"type":603,"value":62895},"这种方式，保证了网络不好的B的操作手感，和A一致。回滚导致的一些轻微的抖动，都是B看A的抖动，通过优化（插值，平滑等），进一步减少这些后，B的感受是很好的。我们测试在200~300毫秒随机延迟的情况下，B的操作手感良好。",{"type":597,"tag":606,"props":62897,"children":62898},{},[62899,62901,62908],{"type":603,"value":62900},"这里，客户端提前服务器的方式，并且在延迟增大的情况下，客户端将加速，和",{"type":597,"tag":886,"props":62902,"children":62905},{"href":62903,"rel":62904},"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/cOGn8-rHWLIxdDz-R3pXDg",[890],[62906],{"type":603,"value":62907},"守望先锋的处理方式",{"type":603,"value":62909},"是一样的。当然，他们肯定比我做得好很多。",{"type":597,"tag":606,"props":62911,"children":62912},{},[62913],{"type":603,"value":62914},"希望我已经大致讲清楚了这个逻辑，大家参看几篇链接的文章，能体会更深。",{"type":597,"tag":606,"props":62916,"children":62917},{},[62918],{"type":603,"value":62919},"这里，我要强调的一点是，我们这里的预测执行，是真实逻辑的预测，和很多介绍帧同步文章提到的预测是不同的。有些文章介绍的预测执行，只是view层面的预测，例如前摇动作和位移，但是逻辑是不会提前执行的，还是要等服务器的返回。这两种预测执行（View的预测执行，和真实逻辑的预测执行）是完全不是一个概念的，这里需要仔细地区分。",{"type":597,"tag":606,"props":62921,"children":62922},{},[62923],{"type":603,"value":62924},"这里有很多的可以优化的点，我就不一一介绍了，以后可能零散地再谈。",{"type":597,"tag":1321,"props":62926,"children":62927},{},[62928],{"type":597,"tag":807,"props":62929,"children":62930},{},[62931],{"type":597,"tag":1080,"props":62932,"children":62933},{},[62934],{"type":603,"value":62935},"游戏逻辑的快照（snapshot）",{"type":597,"tag":606,"props":62937,"children":62938},{},[62939,62941,62948,62950,62956,62958,62965],{"type":603,"value":62940},"我们的逻辑之所以能回滚，都是基于对每一帧状态可以处理快照，存储下每一帧的状态，并可以回滚到任何一帧的状态。在",{"type":597,"tag":886,"props":62942,"children":62945},{"href":62943,"rel":62944},"https://link.zhihu.com/?target=http%3A//mauve.mizuumi.net/2012/07/05/understanding-fighting-game-networking/",[890],[62946],{"type":603,"value":62947},"Understanding Fighting Game Networking",{"type":603,"value":62949}," 文章和",{"type":597,"tag":886,"props":62951,"children":62953},{"href":62903,"rel":62952},[890],[62954],{"type":603,"value":62955},"守望先锋网络",{"type":603,"value":62957}," 文章中，都一笔带过了快照的说明。他们说的快照，可能略有不同，但是思路，都是能保存下每一帧的状态。如果去处理快照（Understanding那篇文章做的是模拟器游戏，可以方便地以内存快照的方式来做），是一个难点，这也是我",{"type":597,"tag":886,"props":62959,"children":62962},{"href":62960,"rel":62961},"https://zhuanlan.zhihu.com/p/38280972",[890],[62963],{"type":603,"value":62964},"前面文章",{"type":603,"value":62966},"提到ECS在这个方式下的应用，云风的解释：",{"type":597,"tag":606,"props":62968,"children":62969},{},[62970,62974,62976],{"type":597,"tag":719,"props":62971,"children":62973},{"alt":719,"src":62972},"/images/2019-11-01-lock-step/v2-253646290632dd9ed3ca6453c4b754b5_1440w.jpg",[],{"type":603,"value":62975},"云风博客截图，地址",{"type":597,"tag":886,"props":62977,"children":62979},{"href":56443,"rel":62978},[890],[62980],{"type":603,"value":56443},{"type":597,"tag":606,"props":62982,"children":62983},{},[62984,62986,62993],{"type":603,"value":62985},"ECS是一个好的处理方式，并且我找到",{"type":597,"tag":886,"props":62987,"children":62990},{"href":62988,"rel":62989},"https://link.zhihu.com/?target=https%3A//www.kisence.com/2017/11/12/guan-yu-zheng-tong-bu-de-xie-xin-de/",[890],[62991],{"type":603,"value":62992},"一篇文章",{"type":603,"value":62994},"，也这样做了（我看过他开源的demo，做得还不够好，应该还是demo阶段，不太像是一个成型的项目）。这篇文章的思路是很清晰的，并且也点到了一些实实在在的痛点，解决思路也基本是正确的，可以参看。",{"type":597,"tag":606,"props":62996,"children":62997},{},[62998],{"type":603,"value":62999},"这块，我做得比较早了，当时守望先锋的文章还没出，我的战斗也没有基于ECS，所以，在处理快照上，只有自己理顺逻辑来做了。",{"type":597,"tag":606,"props":63001,"children":63002},{},[63003],{"type":603,"value":63004},"我的思路是，通过一个回滚接口，需要数据回滚的部分，实现接口，各自处理自己的保存快照和回滚。就像我们序列化一个复杂的配置，每个配置各自序列化自己的部分，最终合并成一个序列化好的文件。",{"type":597,"tag":606,"props":63006,"children":63007},{},[63008],{"type":603,"value":63009},"首先，定义接口，和快照数据的reader和writer",{"type":597,"tag":606,"props":63011,"children":63012},{},[63013],{"type":597,"tag":719,"props":63014,"children":63016},{"alt":719,"src":63015},"/images/2019-11-01-lock-step/v2-5052de9e1c12b7e87d2f452b29fdef61_1440w.jpg",[],{"type":597,"tag":606,"props":63018,"children":63019},{},[63020],{"type":597,"tag":719,"props":63021,"children":63023},{"alt":719,"src":63022},"/images/2019-11-01-lock-step/v2-b666f214abd2a804e885237c5bcc119b_1440w.jpg",[],{"type":597,"tag":606,"props":63025,"children":63026},{},[63027],{"type":597,"tag":719,"props":63028,"children":63030},{"alt":719,"src":63029},"/images/2019-11-01-lock-step/v2-2f49a68d6fd54381d8e7bdf3ffdfb283_1440w.jpg",[],{"type":597,"tag":606,"props":63032,"children":63033},{},[63034],{"type":603,"value":63035},"然后，就是每个模块，自己去处理自己的takeSnapshot和rollback，例如：",{"type":597,"tag":606,"props":63037,"children":63038},{},[63039,63043],{"type":597,"tag":719,"props":63040,"children":63042},{"alt":719,"src":63041},"/images/2019-11-01-lock-step/v2-96bb5917e8a766ef79323613179f404d_1440w.jpg",[],{"type":603,"value":63044},"简单的数值回滚",{"type":597,"tag":606,"props":63046,"children":63047},{},[63048,63052],{"type":597,"tag":719,"props":63049,"children":63051},{"alt":719,"src":63050},"/images/2019-11-01-lock-step/v2-1573d2a9eeec5b5d8e7e663a8e06f487_1440w.jpg",[],{"type":603,"value":63053},"复制的列表回滚和调用子模块回滚",{"type":597,"tag":606,"props":63055,"children":63056},{},[63057],{"type":603,"value":63058},"思路理顺以后，就可以很方便地处理了，注意write和read的顺序，注意处理好list，就解决了大部分问题。当然，在实现逻辑的过程中，时刻要注意，一个模块如何回滚（例如获取随机数也需要回滚）。",{"type":597,"tag":606,"props":63060,"children":63061},{},[63062,63064,63069],{"type":603,"value":63063},"有一个更简单的方式，就是给属性打Attribute，然后写通用的方法。例如，我早",{"type":597,"tag":1080,"props":63065,"children":63066},{},[63067],{"type":603,"value":63068},"期的实现方案",{"type":603,"value":36145},{"type":597,"tag":606,"props":63071,"children":63072},{},[63073,63077],{"type":597,"tag":719,"props":63074,"children":63076},{"alt":719,"src":63075},"/images/2019-11-01-lock-step/v2-05fee97a51c743b54d8dca8074fe042f_1440w.jpg",[],{"type":603,"value":63078},"给属性打标签",{"type":597,"tag":606,"props":63080,"children":63081},{},[63082],{"type":603,"value":63083},"根据标签，通用的读写方法，通过反射来读写，就不需要每个模块自己去实现自己的方法了：",{"type":597,"tag":606,"props":63085,"children":63086},{},[63087,63091],{"type":597,"tag":719,"props":63088,"children":63090},{"alt":719,"src":63089},"/images/2019-11-01-lock-step/v2-c27132db564887adc282fe621f2357e3_1440w.jpg",[],{"type":603,"value":63092},"部分代码",{"type":597,"tag":606,"props":63094,"children":63095},{},[63096,63098,63105],{"type":603,"value":63097},"这种方法，能很好地解决大部分问题，甚至前面提到的",{"type":597,"tag":886,"props":63099,"children":63102},{"href":63100,"rel":63101},"https://link.zhihu.com/?target=https%3A//github.com/suzuke/TrueSync/tree/master/Assets/TrueSync/Engine/Math",[890],[63103],{"type":603,"value":63104},"Truesync",{"type":603,"value":63106},"，也是用的这种方式来做。",{"type":597,"tag":606,"props":63108,"children":63109},{},[63110],{"type":603,"value":63111},"但是这种方法有个难以回避的问题，就是GC，因为基于反射，当我们调用field的GetValue和SetValue的时候，GC难以避免。并且，因为全自动，不方便处理一些特殊逻辑，调试优化也不方便，最后改成了现有的方式，虽然看起来笨重一些，但是可控性更强，我后续做的很多优化，都方便很多。",{"type":597,"tag":606,"props":63113,"children":63114},{},[63115],{"type":603,"value":63116},"关于快照，也有很多可以优化的点，无论是GC内存上的，还是运行效率上的，都需要优化好，否则，可能带来性能问题。这块优化，有空另辟文章再细谈吧。",{"type":597,"tag":606,"props":63118,"children":63119},{},[63120],{"type":603,"value":63121},"当我们有了快照，就可以支持回滚，甚至跳转。例如我们要看战斗录像，如果没有快照，我们要跳到1000帧，就需要从第一帧，根据保存的操作指令，一直快速执行到1000帧，而有了快照，可以直接跳到1000帧，不需要执行中间的过程，如果需要在不同的帧之间切换，只需要跳转即可，这将带来巨大的帮助。",{"type":597,"tag":606,"props":63123,"children":63124},{},[63125],{"type":603,"value":63126},"参考文章：",{"type":597,"tag":1321,"props":63128,"children":63129},{},[63130,63135,63140,63145,63150,63159],{"type":597,"tag":807,"props":63131,"children":63132},{},[63133],{"type":603,"value":63134},"Minimization of Latency in Cheat-Proof Real-Time Gaming by Trusting Time-Stamp Servers",{"type":597,"tag":807,"props":63136,"children":63137},{},[63138],{"type":603,"value":63139},"End-to-end transmission control mechanisms for multiparty interactive applicatins on the Internet",{"type":597,"tag":807,"props":63141,"children":63142},{},[63143],{"type":603,"value":63144},"Dead Reckoning: Latency Hiding for Networked Games",{"type":597,"tag":807,"props":63146,"children":63147},{},[63148],{"type":603,"value":63149},"An Efficient Synchronization Mechanism for Mirrored Game Architectures",{"type":597,"tag":807,"props":63151,"children":63152},{},[63153],{"type":597,"tag":886,"props":63154,"children":63157},{"href":63155,"rel":63156},"https://gameinstitute.qq.com/community/detail/117819",[890],[63158],{"type":603,"value":63155},{"type":597,"tag":807,"props":63160,"children":63161},{},[63162],{"type":597,"tag":886,"props":63163,"children":63166},{"href":63164,"rel":63165},"https://zhuanlan.zhihu.com/p/38468615",[890],[63167],{"type":603,"value":63164},{"title":591,"searchDepth":787,"depth":787,"links":63169},[63170,63171,63172,63173,63174],{"id":62604,"depth":787,"text":62607},{"id":62650,"depth":787,"text":62653},{"id":62720,"depth":787,"text":62726},{"id":62734,"depth":787,"text":62740},{"id":62748,"depth":787,"text":62751},"content:dotnet:2019-11-01-lock-step.md","dotnet/2019-11-01-lock-step.md","2019-11-01",{"_path":29,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":28,"description":63179,"body":63180,"_type":791,"_id":63296,"_source":793,"_file":63297,"_extension":795,"date":63177},"怪物状态同步在一个地图当中，玩家的状态同步之后，则需要同步地图中怪物的位置信息，怪物的位置信息同步方式一般有两种实现方式基于客户端的状态同步一个地图中的怪物状态，实际上是由地图中玩家所决定的，当玩家施加攻击、使用技能，都会改变怪物的状态。在MapleStroy的设计当中，怪物的位置计算是属于离线计算，这也就是说，服务器不参与怪物的状态，这样的好处是节约流量、减缓服务器压力，但是坏处是，会出现怪物静止、吸怪等外挂手段。在移植MapleStroy的过程中，为了同步官方和考虑移动平台流量问题，因此采用此种手段。实现策略：怪物的位置由第一个进入该地图的玩家决定。这也就是说，当第一个玩家进入该地图之后，",{"type":594,"children":63181,"toc":63291},[63182,63187,63192,63197,63202,63207,63212,63217,63222,63228,63233,63238,63244,63249,63254,63259,63265,63270,63275,63279],{"type":597,"tag":598,"props":63183,"children":63185},{"id":63184},"怪物状态同步",[63186],{"type":603,"value":63184},{"type":597,"tag":606,"props":63188,"children":63189},{},[63190],{"type":603,"value":63191},"在一个地图当中，玩家的状态同步之后，则需要同步地图中怪物的位置信息，怪物的位置信息同步方式一般有两种实现方式",{"type":597,"tag":1023,"props":63193,"children":63195},{"id":63194},"基于客户端的状态同步",[63196],{"type":603,"value":63194},{"type":597,"tag":606,"props":63198,"children":63199},{},[63200],{"type":603,"value":63201},"一个地图中的怪物状态，实际上是由地图中玩家所决定的，当玩家施加攻击、使用技能，都会改变怪物的状态。在MapleStroy的设计当中，怪物的位置计算是属于离线计算，这也就是说，服务器不参与怪物的状态，这样的好处是节约流量、减缓服务器压力，但是坏处是，会出现怪物静止、吸怪等外挂手段。在移植MapleStroy的过程中，为了同步官方和考虑移动平台流量问题，因此采用此种手段。",{"type":597,"tag":606,"props":63203,"children":63204},{},[63205],{"type":603,"value":63206},"实现策略：",{"type":597,"tag":606,"props":63208,"children":63209},{},[63210],{"type":603,"value":63211},"怪物的位置由第一个进入该地图的玩家决定。这也就是说，当第一个玩家进入该地图之后，控制着当前地图中所有怪物的移动状态。当第二个玩家进入该地图之后，第一个玩家会广播当前所有怪物的状态，第二个玩家根据这些数据包进行改变。当然其他玩家发生了攻击，或者激怒怪物的操作后，也会广播这个消息。",{"type":597,"tag":606,"props":63213,"children":63214},{},[63215],{"type":603,"value":63216},"同时怪物的移动也是采用基于预言的状态同步，大体实现和玩家移动相似。",{"type":597,"tag":606,"props":63218,"children":63219},{},[63220],{"type":603,"value":63221},"怪物的同步在传统的端游里，是完全由服务器的怪物AI系统触发，客户端只是纯粹的接受服务器下发的怪物状态数据。对于手机游戏里，由于手机上很难出现像PC里那样的外挂，所以怪物的AI可以考虑放在客户端触发，同时减少怪物的状态同步。详细说明如下：",{"type":597,"tag":3995,"props":63223,"children":63225},{"id":63224},"a-怪物的随机移动不同步",[63226],{"type":603,"value":63227},"a) 怪物的随机移动不同步",{"type":597,"tag":606,"props":63229,"children":63230},{},[63231],{"type":603,"value":63232},"在地图上，怪物都会有一个固定的位置。怪物没有进入战斗状态时，就会在这个固定位置的周围走来走去，随机的移动。这个随机的移动设定由每个客户端自己控制，这样怪物的随机移动，就不用消息广播进行同步了。",{"type":597,"tag":606,"props":63234,"children":63235},{},[63236],{"type":603,"value":63237},"由于客户端自己控制怪物的随机走动，所以会出现不同客户端里，怪物位置不一样的问题。但由于怪物随机移动的范围较小，所以这个问题不是很明显，在手机上是可以接受的。角色打怪时，是扇形的伤害范围，所以即使怪物坐标在不同的客户端有点不一致，打怪的效果也可以接受。",{"type":597,"tag":3995,"props":63239,"children":63241},{"id":63240},"b-怪物的行为同步",[63242],{"type":603,"value":63243},"b) 怪物的行为同步",{"type":597,"tag":606,"props":63245,"children":63246},{},[63247],{"type":603,"value":63248},"当有角色攻击被动怪物，或者进入主动怪物的视野范围内时，怪物的AI就被这个角色所在的客户端锁定了，同时怪物进入攻击状态。攻击的判断完全由锁定怪物AI的客户端进行处理，同时这个客户端会将这个怪物的行为上发到服务器，由服务器广播给周围的其他玩家。",{"type":597,"tag":606,"props":63250,"children":63251},{},[63252],{"type":603,"value":63253},"怪物的AI锁定，使用抢占式，即谁最先发消息给服务器申请怪物的AI锁定，谁就获得了怪物的控制权，直到怪物死亡或脱离战斗状态。",{"type":597,"tag":606,"props":63255,"children":63256},{},[63257],{"type":603,"value":63258},"怪物可以每进行一次攻击，客户端就发一个消息给服务器。这样做，消息还是有点多，特别是一群怪围着几个角色进行攻击时，消息广播还是有点多。所以可以将状态的概念向上扩大，只同步怪物在攻击哪个玩家，而不同步每一次的攻击，然后由每个客户端根据怪物固定的攻击速度各自去表现。这样一个怪去攻击一个玩家，就只会有一次消息广播了。",{"type":597,"tag":3995,"props":63260,"children":63262},{"id":63261},"c-精英怪和boss怪的ai",[63263],{"type":603,"value":63264},"c) 精英怪和BOSS怪的AI",{"type":597,"tag":606,"props":63266,"children":63267},{},[63268],{"type":603,"value":63269},"精英怪和BOSS怪由于数量较少，而且比较重要，所以不能由客户端来申请AI控制权，而是服务器根据某种策略来控制。所使用的策略可以考虑角色的伤害值、防御值、角色与BOSS的距离远近等，根据这些因素，服务器计算出BOSS怪当前最适合攻击的对象（比如血量最少的玩家，最脆弱的法师等），然后将AI控制权发给那个客户端，由那个客户端控制攻击行为，同时通过消息让服务器同步给其他玩家。",{"type":597,"tag":606,"props":63271,"children":63272},{},[63273],{"type":603,"value":63274},"总结：怪物的同步方式的选择，就是尽量减少消息的广播，同时让游戏效果在可接受的范围内。怪物AI的这个处理方式，实际上是同时省去了游戏服务器的怪物AI模块（端游一般是专门用的一个进程或者另外一台物理服务器来进行怪物AI的计算），从而简化了MMO游戏的开发难度，同时保证了较好的游戏体验。",{"type":597,"tag":857,"props":63276,"children":63277},{"id":32788},[63278],{"type":603,"value":32788},{"type":597,"tag":1321,"props":63280,"children":63281},{},[63282],{"type":597,"tag":807,"props":63283,"children":63284},{},[63285],{"type":597,"tag":886,"props":63286,"children":63289},{"href":63287,"rel":63288},"https://www.jianshu.com/p/5dbdf81c4e69",[890],[63290],{"type":603,"value":63287},{"title":591,"searchDepth":787,"depth":787,"links":63292},[63293],{"id":63184,"depth":787,"text":63184,"children":63294},[63295],{"id":63194,"depth":1530,"text":63194},"content:dotnet:2019-11-01-state-sync-npc.md","dotnet/2019-11-01-state-sync-npc.md",{"_path":23,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":22,"description":63299,"body":63300,"_type":791,"_id":63388,"_source":793,"_file":63389,"_extension":795,"date":63390},"问题引入：在mmorpg游戏中，群战的时候，玩家释放技能，这时候会出现技能冷却时间，每一个技能都是一个定时器，或者在slg游戏中，玩家修建房屋，创建基地，都会产生一个延时操作，等到了指定时间后，完成房屋修建等任务！！！！！",{"type":594,"children":63301,"toc":63385},[63302,63306,63311,63316,63321,63328,63333,63339,63347,63352,63359,63364],{"type":597,"tag":606,"props":63303,"children":63304},{},[63305],{"type":603,"value":63299},{"type":597,"tag":606,"props":63307,"children":63308},{},[63309],{"type":603,"value":63310},"轮询的尴尬：使用一个定时器，定时遍历多个链表，判定链表里面的任务是否到期！ 效率低下,每一次遍历都需要筛选定时器，时间复杂度O（n）.",{"type":597,"tag":606,"props":63312,"children":63313},{},[63314],{"type":603,"value":63315},"多定时器的尴尬：同时创建多个定时器，每个定时器绑定到期任务，多定时器，会加大cpu的负荷，且任务的到期时间不同，必定会产生更多的定时器。",{"type":597,"tag":606,"props":63317,"children":63318},{},[63319],{"type":603,"value":63320},"解决方案：时间轮的引入",{"type":597,"tag":606,"props":63322,"children":63323},{},[63324],{"type":597,"tag":719,"props":63325,"children":63327},{"alt":719,"src":63326},"/images/2019-10-29-time-wheel/20180817103356853.png",[],{"type":597,"tag":606,"props":63329,"children":63330},{},[63331],{"type":603,"value":63332},"如果所示：将同一时间的任务放在一起，组成一个链表，图中每个格子分别指向这样一个链表，定时器每到期一次，图中的指针移动一格，如此循环往复，当指针指向某个格子，代表这个链表里面的定时器可能到期（注意，这里是可能，因为时间轮是一个循环的圈，比如运行一圈需要时间50s,那么一个100s的定时器，虽然在槽位1的链表中，但是需要时间轮运行两圈，这个定时器才到期）",{"type":597,"tag":598,"props":63334,"children":63336},{"id":63335},"a-full-example",[63337],{"type":603,"value":63338},"A full example",{"type":597,"tag":621,"props":63340,"children":63342},{"code":63341},"/// \u003Csummary>\n/// Task fired repeatedly\n/// \u003C/summary>\nclass IntervalTimerTask : TimerTask\n{\n    public void Run(Timeout timeout)\n    {\n        Console.WriteLine($\"IntervalTimerTask is fired at {DateTime.UtcNow.Ticks / 10000000L}\");\n        timeout.Timer.NewTimeout(this, TimeSpan.FromSeconds(2));\n    }\n}\n\n/// \u003Csummary>\n/// Task only be fired for one time\n/// \u003C/summary>\nclass OneTimeTask : TimerTask\n{\n    readonly string _userData;\n    public OneTimeTask(string data)\n    {\n        _userData = data;\n    }\n\n    public void Run(Timeout timeout)\n    {\n        Console.WriteLine($\"{_userData} is fired at {DateTime.UtcNow.Ticks / 10000000L}\");\n    }\n}\n\n\nstatic void Main(string[] args)\n{\n    HashedWheelTimer timer = new HashedWheelTimer( tickDuration: TimeSpan.FromSeconds(1)\n        , ticksPerWheel: 100000\n        , maxPendingTimeouts: 0);\n\n    timer.NewTimeout(new OneTimeTask(\"A\"), TimeSpan.FromSeconds(5));\n    timer.NewTimeout(new OneTimeTask(\"B\"), TimeSpan.FromSeconds(4));\n    var timeout = timer.NewTimeout(new OneTimeTask(\"C\"), TimeSpan.FromSeconds(3));\n    timer.NewTimeout(new OneTimeTask(\"D\"), TimeSpan.FromSeconds(2));\n    timer.NewTimeout(new OneTimeTask(\"E\"), TimeSpan.FromSeconds(1));\n\n    timeout.Cancel();\n\n    timer.NewTimeout(new IntervalTimerTask(), TimeSpan.FromSeconds(5));\n    Console.WriteLine($\"{DateTime.UtcNow.Ticks / 10000000L} : Started\");\n    Console.ReadKey();\n}\n",[63343],{"type":597,"tag":629,"props":63344,"children":63345},{"__ignoreMap":591},[63346],{"type":603,"value":63341},{"type":597,"tag":606,"props":63348,"children":63349},{},[63350],{"type":603,"value":63351},"The output of the sample is something like",{"type":597,"tag":606,"props":63353,"children":63354},{},[63355],{"type":597,"tag":719,"props":63356,"children":63358},{"alt":591,"src":63357},"/images/2019-10-29-time-wheel/console.png",[],{"type":597,"tag":606,"props":63360,"children":63361},{},[63362],{"type":603,"value":63363},"c# 的实现",{"type":597,"tag":1321,"props":63365,"children":63366},{},[63367,63376],{"type":597,"tag":807,"props":63368,"children":63369},{},[63370],{"type":597,"tag":886,"props":63371,"children":63374},{"href":63372,"rel":63373},"https://github.com/wangjia184/HashedWheelTimer",[890],[63375],{"type":603,"value":63372},{"type":597,"tag":807,"props":63377,"children":63378},{},[63379],{"type":597,"tag":886,"props":63380,"children":63383},{"href":63381,"rel":63382},"https://github.com/fanrice123/HashedWheelTimer.NET",[890],[63384],{"type":603,"value":63381},{"title":591,"searchDepth":787,"depth":787,"links":63386},[63387],{"id":63335,"depth":787,"text":63338},"content:dotnet:2019-10-29-time-wheel.md","dotnet/2019-10-29-time-wheel.md","2019-10-29",{"_path":415,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":414,"description":63392,"body":63393,"_type":791,"_id":64233,"_source":793,"_file":64234,"_extension":795,"date":64235},"什么是视差背景？视差效果，原本是一个天文学术语，当我们观察星空时，离我们远的星星移动速度较慢，离我们近的星星移动速度则较快。当我们坐在车上向车窗外看时，也会有这样的感觉，远处的群山似乎没有在动，而近处的稻田却在飞速掠过。简单地说，视差背景其实就是通过多层次的背景来模拟透视视差效果：就是当发生移动时，离照相机越近的背景移动越快；反之越慢。这样，我们的背景就会形成类似于透视视差的效果。那么，既然需要透视效果，为何不直接使用透视投影来做呢？这个原因是如果使用透视投影来产生视差的话，我们的远景必须真的是一个非常大的背景，你如果想模拟出一百倍于近景的远景，那么可能就需要相应尺寸的背景贴图。这种做法显然是",{"type":594,"children":63394,"toc":64228},[63395,63401,63406,63411,63416,63421,63434,63439,63444,63467,63472,63477,63484,63489,63504,63510,63515,63522,63527,63545,63550,63563,63568,63573,63578,63586,63591,63597,63602,63609,63614,63619,63625,63630,63637,63642,63647,63653,63658,63665,63670,63675,63680,63686,63691,63697,63702,63708,63713,63719,63724,63729,63734,63740,63748,63754,63759,63766,63777,63782,63790,63796,63801,63814,63819,63824,63829,63845,63852,63860,63868,63873,63878,63883,63888,63896,63904,63909,63914,63918,63923,63928,63933,63938,63946,63954,63959,63963,63967,63971,63976,63981,63986,63993,63998,64003,64010,64015,64020,64028,64033,64041,64046,64051,64059,64064,64069,64074,64079,64091,64101,64108,64113,64118,64130,64137,64151,64156,64161,64166,64171,64185,64190,64195,64203,64207],{"type":597,"tag":3995,"props":63396,"children":63398},{"id":63397},"什么是视差背景",[63399],{"type":603,"value":63400},"什么是视差背景？",{"type":597,"tag":606,"props":63402,"children":63403},{},[63404],{"type":603,"value":63405},"视差效果，原本是一个天文学术语，当我们观察星空时，离我们远的星星移动速度较慢，离我们近的星星移动速度则较快。当我们坐在车上向车窗外看时，也会有这样的感觉，远处的群山似乎没有在动，而近处的稻田却在飞速掠过。",{"type":597,"tag":606,"props":63407,"children":63408},{},[63409],{"type":603,"value":63410},"简单地说，视差背景其实就是通过多层次的背景来模拟透视视差效果：就是当发生移动时，离照相机越近的背景移动越快；反之越慢。这样，我们的背景就会形成类似于透视视差的效果。",{"type":597,"tag":606,"props":63412,"children":63413},{},[63414],{"type":603,"value":63415},"那么，既然需要透视效果，为何不直接使用透视投影来做呢？这个原因是如果使用透视投影来产生视差的话，我们的远景必须真的是一个非常大的背景，你如果想模拟出一百倍于近景的远景，那么可能就需要相应尺寸的背景贴图。这种做法显然是做不到的。当然，如果是3D 背景的话有其他方式，不过对于2D 游戏而言，最直接有效的还是多层次背景模拟出视差效果。我们这里也主要聊聊如果通过多层次背景滚动的方式实现视差效果。",{"type":597,"tag":606,"props":63417,"children":63418},{},[63419],{"type":603,"value":63420},"在整个视差背景实现过程中，需要完成两个主要工作：",{"type":597,"tag":803,"props":63422,"children":63423},{},[63424,63429],{"type":597,"tag":807,"props":63425,"children":63426},{},[63427],{"type":603,"value":63428},"实现单层背景的滚动；",{"type":597,"tag":807,"props":63430,"children":63431},{},[63432],{"type":603,"value":63433},"复合多层背景的滚动，实现视差效果；",{"type":597,"tag":3995,"props":63435,"children":63437},{"id":63436},"实现单层背景的滚动",[63438],{"type":603,"value":63436},{"type":597,"tag":606,"props":63440,"children":63441},{},[63442],{"type":603,"value":63443},"背景滚动是实现视差效果的核心也是最重要的问题。背景滚动存在横向和纵向两种。所有使用视差背景的游戏都会有横向滚动的情况，而纵向滚动则未必都会有。我们这里以横向滚动来介绍背景滚动。我们有四种常规方式可以实现背景的滚动：",{"type":597,"tag":803,"props":63445,"children":63446},{},[63447,63452,63457,63462],{"type":597,"tag":807,"props":63448,"children":63449},{},[63450],{"type":603,"value":63451},"通过移动一个四边形顶点的 UV 移动形成滚动，之后就称之为 UV 滚动方式；",{"type":597,"tag":807,"props":63453,"children":63454},{},[63455],{"type":603,"value":63456},"通过滚动移动多个连续的背景精灵形成滚动，之后就称之为精灵滚动方式；",{"type":597,"tag":807,"props":63458,"children":63459},{},[63460],{"type":603,"value":63461},"添加背景层照相机，移动照相机形成滚动，之后就称之为照相机移动方式；",{"type":597,"tag":807,"props":63463,"children":63464},{},[63465],{"type":603,"value":63466},"精灵滚动方式和照相机移动方式混合使用，之后就称之为混合滚动方式；",{"type":597,"tag":606,"props":63468,"children":63469},{},[63470],{"type":603,"value":63471},"为了更好地解释这几种实现方式，需要几张图片用于介绍：",{"type":597,"tag":606,"props":63473,"children":63474},{},[63475],{"type":603,"value":63476},"我们使用一个黄框精灵代表屏幕取景区域：",{"type":597,"tag":606,"props":63478,"children":63479},{},[63480],{"type":597,"tag":719,"props":63481,"children":63483},{"alt":719,"src":63482},"/images/2019-09-13-Parallax-2d/u-101952876756Yj6.png",[],{"type":597,"tag":606,"props":63485,"children":63486},{},[63487],{"type":603,"value":63488},"接下来是三张可拼接的背景精灵：",{"type":597,"tag":606,"props":63490,"children":63491},{},[63492,63496,63500],{"type":597,"tag":719,"props":63493,"children":63495},{"alt":719,"src":63494},"/images/2019-09-13-Parallax-2d/u-101952876820zdg.png",[],{"type":597,"tag":719,"props":63497,"children":63499},{"alt":719,"src":63498},"/images/2019-09-13-Parallax-2d/u-101952876827Lvz.png",[],{"type":597,"tag":719,"props":63501,"children":63503},{"alt":719,"src":63502},"/images/2019-09-13-Parallax-2d/u-101952876811twL.png",[],{"type":597,"tag":16030,"props":63505,"children":63507},{"id":63506},"uv-滚动方式",[63508],{"type":603,"value":63509},"UV 滚动方式：",{"type":597,"tag":606,"props":63511,"children":63512},{},[63513],{"type":603,"value":63514},"使用 UV 坐标移动形成滚动的效果看起来是这样的：",{"type":597,"tag":606,"props":63516,"children":63517},{},[63518],{"type":597,"tag":719,"props":63519,"children":63521},{"alt":719,"src":63520},"/images/2019-09-13-Parallax-2d/u-101952876924lOw.gif",[],{"type":597,"tag":606,"props":63523,"children":63524},{},[63525],{"type":603,"value":63526},"在 UV 坐标移动的方法中，我们只是用一个和照相机取景区域一样大的精灵作为背景渲染区域。然后通过调整它的 UV 坐标和采样方式实现平铺背景以及背景滚动。具体实现步骤：",{"type":597,"tag":803,"props":63528,"children":63529},{},[63530,63535,63540],{"type":597,"tag":807,"props":63531,"children":63532},{},[63533],{"type":603,"value":63534},"准备一个覆盖整个屏幕的四边形顶点，并使用它显示背景贴图；",{"type":597,"tag":807,"props":63536,"children":63537},{},[63538],{"type":603,"value":63539},"调整 UV 坐标和纹理之间的采样方式，以实现纹理连续显示；",{"type":597,"tag":807,"props":63541,"children":63542},{},[63543],{"type":603,"value":63544},"移动时，修改四个顶点的 UV 坐标形成滚动；",{"type":597,"tag":606,"props":63546,"children":63547},{},[63548],{"type":603,"value":63549},"因为我们只使用一张精灵，我们区域采样的方式就是通过 UV 坐标。因此此方式下 UV 坐标存在两个作用：",{"type":597,"tag":803,"props":63551,"children":63552},{},[63553,63558],{"type":597,"tag":807,"props":63554,"children":63555},{},[63556],{"type":603,"value":63557},"UV 坐标的整数部分标记了当前采样位置使用哪一张背景贴图；",{"type":597,"tag":807,"props":63559,"children":63560},{},[63561],{"type":603,"value":63562},"UV 坐标小数部分为选中背景贴图的采样 UV 坐标；",{"type":597,"tag":606,"props":63564,"children":63565},{},[63566],{"type":603,"value":63567},"因此，此精灵的 UV 坐标必定会大于[0,1]区间。",{"type":597,"tag":606,"props":63569,"children":63570},{},[63571],{"type":603,"value":63572},"如果背景使用的背景贴图只有一张的话，这个问题很容易解决。我们只要设置图形 API（OpenGL 或 DirectX，这里以 OpenGL 为例）的纹理包装类型（即所谓的 wrapping 类型）即可。所谓的包装类型即指定了当 UV 坐标值在[ 0,1 ]区间之外时，如何获取纹理。那么这里，我们需要让一张纹理重复出现。在 OpenGL 中，我们需要调用此函数来完成包装类型的设置：glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT );稍微解释一下此函数：glTexParameteri 函数会对指定的纹理的参数进行设置。我们这里针对2D 纹理（第一参数 GL_TEXTURE_2D）的 x 方向即横向（第二参数 GL_TEXTURE_WRAP_S）的包装模式设置为重复出现的方式（第三参数 GL_REPEAT）。",{"type":597,"tag":606,"props":63574,"children":63575},{},[63576],{"type":603,"value":63577},"不过如果背景是多张不同的纹理连续出现的话，就不能使用上面的方法解决了。这个时候我们需要编写一个简单的 shader 在 shader 中完成 UV 坐标映射。这里截取出演示 demo 中，获取纹理相关的 shader 代码（GLSL 代码）提供大家参考：",{"type":597,"tag":621,"props":63579,"children":63581},{"code":63580},"//我们有三张背景贴图，对 UV 坐标对3取模，得到使用哪一种背景贴图。             \nint _index = int( mod( v_TexCoord.x, 3.0 ));\n//使用此贴图并使用 UV 坐标的小数部分进行像素采样。            \ngl_FragData[0] = texture( u_BackgroundTextures[_index], fract(v_TexCoord));  \n",[63582],{"type":597,"tag":629,"props":63583,"children":63584},{"__ignoreMap":591},[63585],{"type":603,"value":63580},{"type":597,"tag":606,"props":63587,"children":63588},{},[63589],{"type":603,"value":63590},"UV 方式有着非常良好的性能，但是缺点就是只能处理简单的平铺背景，对于有着复杂结构或是效果的滚动背景没有办法使用。",{"type":597,"tag":16030,"props":63592,"children":63594},{"id":63593},"精灵滚动方式",[63595],{"type":603,"value":63596},"精灵滚动方式：",{"type":597,"tag":606,"props":63598,"children":63599},{},[63600],{"type":603,"value":63601},"使用精灵滚动形成滚动的效果看起来是这样的：",{"type":597,"tag":606,"props":63603,"children":63604},{},[63605],{"type":597,"tag":719,"props":63606,"children":63608},{"alt":719,"src":63607},"/images/2019-09-13-Parallax-2d/u-10195287789913d.gif",[],{"type":597,"tag":606,"props":63610,"children":63611},{},[63612],{"type":603,"value":63613},"这种方式应该是比较直接的。我们首先使用背景精灵拼接出背景取景区域覆盖到的背景区域。然后在发生背景移动时，我们依然不需要移动背景取景区域，而是通过滚动移动所有的背景精灵来实现背景移动的效果。",{"type":597,"tag":606,"props":63615,"children":63616},{},[63617],{"type":603,"value":63618},"这种方式实现简单直接，但缺点是发生背景移动时，需要对所有的背景精灵进行移动。对于结构复杂元素较多的背景需要占用更多的性能。",{"type":597,"tag":16030,"props":63620,"children":63622},{"id":63621},"照相机移动方式",[63623],{"type":603,"value":63624},"照相机移动方式：",{"type":597,"tag":606,"props":63626,"children":63627},{},[63628],{"type":603,"value":63629},"使用照相机移动形成滚动的效果看起来是这样的：",{"type":597,"tag":606,"props":63631,"children":63632},{},[63633],{"type":597,"tag":719,"props":63634,"children":63636},{"alt":719,"src":63635},"/images/2019-09-13-Parallax-2d/u-101952878215omm.gif",[],{"type":597,"tag":606,"props":63638,"children":63639},{},[63640],{"type":603,"value":63641},"这种方式与精灵滚动方式正好相反。在这种方式下，我们需要使用背景精灵拼接出完整的背景。同时在背景移动时，不移动背景精灵转而移动背景取景区域来实现背景移动效果。",{"type":597,"tag":606,"props":63643,"children":63644},{},[63645],{"type":603,"value":63646},"这种方式在移动过程中由于只需要移动背景照相机，所以有种很好的移动性能。但是为了使用此方法。我们需要预先将整个背景全部拼接。这样导致同时存在过多的背景精灵在场景中。如果使用的游戏引擎没有场景管理器或是场景管理器性能不佳的情况下，此方式反而会带来额外的性能消耗。",{"type":597,"tag":16030,"props":63648,"children":63650},{"id":63649},"混合滚动方式",[63651],{"type":603,"value":63652},"混合滚动方式：",{"type":597,"tag":606,"props":63654,"children":63655},{},[63656],{"type":603,"value":63657},"使用混合滚动方式形成的滚动效果看起来是这样的：",{"type":597,"tag":606,"props":63659,"children":63660},{},[63661],{"type":597,"tag":719,"props":63662,"children":63664},{"alt":719,"src":63663},"/images/2019-09-13-Parallax-2d/u-101952878467iBp.gif",[],{"type":597,"tag":606,"props":63666,"children":63667},{},[63668],{"type":603,"value":63669},"顾名思义，混合移动混合了精灵移动和照相机移动两种方式。我们在移动背景取景区域的同时，适时地滚动背景精灵。使得背景取景区域内的背景正确。",{"type":597,"tag":606,"props":63671,"children":63672},{},[63673],{"type":603,"value":63674},"这种方式结合了精灵滚动方式和照相机移动方式。避免了精灵滚动方式移动过程中，因为需要移动所有背景精灵带来的额外性能开销；也避免了照相机移动方式中，需要预先构建完整的背景而导致场景中存在过多的背景精灵带来的额外性能开销。当然，和照相机移动方式一样，避免不了每一层背景都需要有一个独立的背景照相机。同时在代码实现良好的情况下，性能比前两者都要好。",{"type":597,"tag":3995,"props":63676,"children":63678},{"id":63677},"四种方式的优劣",[63679],{"type":603,"value":63677},{"type":597,"tag":16030,"props":63681,"children":63683},{"id":63682},"平均性能",[63684],{"type":603,"value":63685},"平均性能：",{"type":597,"tag":606,"props":63687,"children":63688},{},[63689],{"type":603,"value":63690},"UV 滚动方式只使用了一个四边形并且移动时也只是单纯改变了 UV 采样方式。它的性能是最好的；其次是混合滚动方式；照相机移动方式有更多的空间开销，同时此开销对性能的影响与游戏引擎的场景管理模块密切关联；精灵方式则有最大的移动性能消耗。",{"type":597,"tag":16030,"props":63692,"children":63694},{"id":63693},"对复杂背景的支持",[63695],{"type":603,"value":63696},"对复杂背景的支持：",{"type":597,"tag":606,"props":63698,"children":63699},{},[63700],{"type":603,"value":63701},"即四种方式所实现的背景可以有多复杂。UV 滚动方式碍于实现只能做简单的平铺背景的滚动效果；精灵滚动方式和混合滚动方式可以实现更为复杂一点的背景，可以在简单的平铺背景之上加入一些其他背景精灵元素；而照相机移动方式对背景的构建没有要求，它可以支持非常复杂的背景。",{"type":597,"tag":16030,"props":63703,"children":63705},{"id":63704},"是否可以无限延伸",[63706],{"type":603,"value":63707},"是否可以无限延伸：",{"type":597,"tag":606,"props":63709,"children":63710},{},[63711],{"type":603,"value":63712},"理论上四种方式都可以实现无限延伸。但是对于照相机移动方式来说，实现起来会比较麻烦。而另外三种方式都是循环利用同一个背景，所以天然支持无限延伸的背景。",{"type":597,"tag":16030,"props":63714,"children":63716},{"id":63715},"复合多层背景的滚动实现视差效果",[63717],{"type":603,"value":63718},"复合多层背景的滚动，实现视差效果：",{"type":597,"tag":606,"props":63720,"children":63721},{},[63722],{"type":603,"value":63723},"有了上面的工作，这一步也是顺其自然就可以完成：",{"type":597,"tag":606,"props":63725,"children":63726},{},[63727],{"type":603,"value":63728},"我们首先要构建多层背景，多层背景可以同时只是用一种滚动方式；也可以不同层背景使用不同的滚动方式。比如最远的背景由于基本上都是简单的平铺可以使用 UV 滚动方式构建；而再近一点细节较多的背景层可以考虑后几种滚动方式构建背景。",{"type":597,"tag":606,"props":63730,"children":63731},{},[63732],{"type":603,"value":63733},"之后是移动，我们需要根据每一层背景的距离决定其在移动过程中的移动速度。速度如何决定并没有统一的方法或是模式。总之，这一点听听美术们的意见是比较合适的。",{"type":597,"tag":1023,"props":63735,"children":63737},{"id":63736},"unity混合模式1",[63738],{"type":603,"value":63739},"Unity混合模式1",{"type":597,"tag":621,"props":63741,"children":63743},{"code":63742},"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n/// \u003Csummary>\n/// Weiva Parallax\n/// 2D 视差效果\n/// 本组件背景视差效果是根据背景对象的世界坐标z值来计算。默认参数中的背景数组第一个元素为最远平面，\n/// 既与摄像机同步的平面，该对象之间的背景根据z值进行视差计算。也可以单独设置参数 synZ 强制设置最\n/// 远平面。大于最远平面的 z 值将会反超摄像机移动。\n/// weivain@qq.com\n/// www.weiva.com\n/// \u003C/summary>\npublic class WVParallax : MonoBehaviour {\n \n    [Header(\"背景图片对象，Element 0 为与摄像机同步的背景层\")]\n    public Transform[] backgrounds;\n \n    // 主摄像机\n    private Transform cam;\n    // 上一帧摄像机的位置\n    private Vector3 previousCamPos;\n    // 摄像机同步背景层的 z 值\n    [Header(\"摄像机同步背景层Z值，若0为背景层0\")]\n    public float synZ=0f;\n    [Header(\"偏移x系数\")]\n    public float parallaxScaleX=1f;\n    [Header(\"偏移y系数\")]\n    public float parallaxScaleY=1f;\n \n \n    // 初始化\n    void Start ()\n    {\n        cam = Camera.main.transform;\n        // 上一帧摄像机的位置\n        previousCamPos = cam.position;\n        if(synZ == 0 && null != backgrounds[0])\n        {\n            synZ = backgrounds[0].position.z;\n        }\n        if(synZ == 0)\n        {\n            synZ = 100f;\n        }\n         \n    }\n     \n    // 每一帧执行\n    void Update ()\n    {\n        // 获得摄像机和上一帧的偏移值\n        float parallax = previousCamPos.x - cam.position.x;\n \n        //摄像机偏移矢量\n        Vector3 camMove = cam.position - previousCamPos;\n        camMove.x *= parallaxScaleX;\n        camMove.y *= parallaxScaleY;\n \n        //同步背景\n        for (int i = 0; i \u003C backgrounds.Length; i++)\n        {\n            if (null == backgrounds[i]) continue;\n \n            Vector3 targetToMove = backgrounds[i].position + camMove * (backgrounds[i].position.z/synZ);\n            backgrounds[i].position = targetToMove;\n \n        }\n \n        // 更新上一帧摄像机的位置\n        previousCamPos = cam.position;\n    }\n}\n",[63744],{"type":597,"tag":629,"props":63745,"children":63746},{"__ignoreMap":591},[63747],{"type":603,"value":63742},{"type":597,"tag":1023,"props":63749,"children":63751},{"id":63750},"unity混合模式2",[63752],{"type":603,"value":63753},"Unity混合模式2",{"type":597,"tag":606,"props":63755,"children":63756},{},[63757],{"type":603,"value":63758},"在Unity官方2D游戏Demo中已使用到了视差滚动技术，笔者对此 Demo 中的视差滚动技术进行了研究，Demo 中使用 BackgroundParallax 脚本实现了视差功能，笔者编写此脚本代码说明。",{"type":597,"tag":606,"props":63760,"children":63761},{},[63762],{"type":597,"tag":719,"props":63763,"children":63765},{"alt":6483,"src":63764},"/images/2019-09-13-Parallax-2d/424-1024x415.jpg",[],{"type":597,"tag":606,"props":63767,"children":63768},{},[63769,63771],{"type":603,"value":63770},"官方 demo ",{"type":597,"tag":886,"props":63772,"children":63775},{"href":63773,"rel":63774},"https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-platformer-11228",[890],[63776],{"type":603,"value":19040},{"type":597,"tag":606,"props":63778,"children":63779},{},[63780],{"type":603,"value":63781},"BackgroundParallax脚本代码说明：",{"type":597,"tag":621,"props":63783,"children":63785},{"code":63784},"using UnityEngine;\nusing System.Collections;\n\npublic class BackgroundParallax : MonoBehaviour\n{\n    public Transform[] backgrounds;             // Array of all the backgrounds to be parallaxed.\n    public float parallaxScale;                 // The proportion of the camera's movement to move the backgrounds by.\n    public float parallaxReductionFactor;       // How much less each successive layer should parallax.\n    public float smoothing;                     // How smooth the parallax effect should be.\n\n\n    private Transform cam;                      // Shorter reference to the main camera's transform.\n    private Vector3 previousCamPos;             // The postion of the camera in the previous frame.\n\n\n    void Awake ()\n    {\n        // Setting up the reference shortcut.\n        cam = Camera.main.transform;\n    }\n\n\n    void Start ()\n    {\n        // The 'previous frame' had the current frame's camera position.\n        previousCamPos = cam.position;\n    }\n\n\n    void Update ()\n    {\n        // The parallax is the opposite of the camera movement since the previous frame multiplied by the scale.\n        float parallax = (previousCamPos.x - cam.position.x) * parallaxScale;\n\n        // For each successive background...\n        for(int i = 0; i \u003C backgrounds.Length; i++)\n        {\n            // ... set a target x position which is their current position plus the parallax multiplied by the reduction.\n            float backgroundTargetPosX = backgrounds[i].position.x + parallax * (i * parallaxReductionFactor + 1);\n\n            // Create a target position which is the background's current position but with it's target x position.\n            Vector3 backgroundTargetPos = new Vector3(backgroundTargetPosX, backgrounds[i].position.y, backgrounds[i].position.z);\n\n            // Lerp the background's position between itself and it's target position.\n            backgrounds[i].position = Vector3.Lerp(backgrounds[i].position, backgroundTargetPos, smoothing * Time.deltaTime);\n        }\n\n        // Set the previousCamPos to the camera's position at the end of this frame.\n        previousCamPos = cam.position;\n    }\n}\n",[63786],{"type":597,"tag":629,"props":63787,"children":63788},{"__ignoreMap":591},[63789],{"type":603,"value":63784},{"type":597,"tag":598,"props":63791,"children":63793},{"id":63792},"结合透视和正交相机在unity2d游戏中制作视差效果",[63794],{"type":603,"value":63795},"结合透视和正交相机在Unity2D游戏中制作视差效果",{"type":597,"tag":606,"props":63797,"children":63798},{},[63799],{"type":603,"value":63800},"在开发MimpiDreams时，我们知道我们想用背景和前景做丰富的视差层。在Steam版本中，有几个图层来管理。所以我们想出了一个可能并不是独一无二的方法，不过在这里还是想概括一下。",{"type":597,"tag":606,"props":63802,"children":63803},{},[63804,63806,63812],{"type":603,"value":63805},"在unity中有好多使用一个正交相机并用脚本移动图层来设置视差层级的教程。还有一些建议用透视相机和对象的Z轴深度。如果这么做了，设置合适的精灵排序就会变的困难，并且还不能使用优化技术和其他想在MimpiDreams中使用的透视相机的特性。经典的 Mimpi 只用了透视相机来创建，对此我们还有一些",{"type":597,"tag":886,"props":63807,"children":63810},{"href":63808,"rel":63809},"http://www.manew.com/forum-ask-1.html",[890],[63811],{"type":603,"value":859},{"type":603,"value":63813},"。为了节省填充率我们使用了不透明的对象，不过不得不用Z轴偏移来放置它们以免Z方向有冲突。然而，由于对它们应用了透视视角，它们就以不同的速度移动了。",{"type":597,"tag":606,"props":63815,"children":63816},{},[63817],{"type":603,"value":63818},"最好的方法是获得两者的优势。设置透视相机来渲染视差层，用正交相机来渲染有角色，平台，拼图等的主平面。",{"type":597,"tag":606,"props":63820,"children":63821},{},[63822],{"type":603,"value":63823},"当为视差使用透视相机时，就很容易设置它们了。在正交视差中，需要基于相机的距离来缩放每一个对象并放在适当的位置。Toby: The SecretMine的作者Lukáš Navrátil告诉我他差不多会花掉一半的工作时间来设置正交视差层。随着我们技术的结合，他可以做的更快。",{"type":597,"tag":606,"props":63825,"children":63826},{},[63827],{"type":603,"value":63828},"我和我的同事Jaroslav Stehlík一起开发了这种技术。现在让我们看一下如何设置。",{"type":597,"tag":606,"props":63830,"children":63831},{},[63832,63837,63838,63843],{"type":597,"tag":1080,"props":63833,"children":63834},{},[63835],{"type":603,"value":63836},"Camera and Scene Setup",{"type":603,"value":4731},{"type":597,"tag":1080,"props":63839,"children":63840},{},[63841],{"type":603,"value":63842},"相机和场景设置",{"type":603,"value":63844},"\n层级视图很简单。将视差相机放在主相机的下边，这样它们会一起移动。",{"type":597,"tag":606,"props":63846,"children":63847},{},[63848],{"type":597,"tag":719,"props":63849,"children":63851},{"alt":719,"src":63850},"/images/2019-09-13-Parallax-2d/181708eqz39rii9vrvuopx.png.thumb.jpg",[],{"type":597,"tag":606,"props":63853,"children":63854},{},[63855],{"type":597,"tag":1080,"props":63856,"children":63857},{},[63858],{"type":603,"value":63859},"Main Camera",{"type":597,"tag":606,"props":63861,"children":63862},{},[63863],{"type":597,"tag":1080,"props":63864,"children":63865},{},[63866],{"type":603,"value":63867},"主相机",{"type":597,"tag":606,"props":63869,"children":63870},{},[63871],{"type":603,"value":63872},"Clear Flags: Don’tclear",{"type":597,"tag":606,"props":63874,"children":63875},{},[63876],{"type":603,"value":63877},"Culling Mask except parallax layer",{"type":597,"tag":606,"props":63879,"children":63880},{},[63881],{"type":603,"value":63882},"Projection",{"type":597,"tag":606,"props":63884,"children":63885},{},[63886],{"type":603,"value":63887},"Depth: -1",{"type":597,"tag":606,"props":63889,"children":63890},{},[63891],{"type":597,"tag":1080,"props":63892,"children":63893},{},[63894],{"type":603,"value":63895},"Parallax Camera Near",{"type":597,"tag":606,"props":63897,"children":63898},{},[63899],{"type":597,"tag":1080,"props":63900,"children":63901},{},[63902],{"type":603,"value":63903},"近距离视差相机",{"type":597,"tag":606,"props":63905,"children":63906},{},[63907],{"type":603,"value":63908},"Clear Flags: Depthonly",{"type":597,"tag":606,"props":63910,"children":63911},{},[63912],{"type":603,"value":63913},"Culling Mask",{"type":597,"tag":606,"props":63915,"children":63916},{},[63917],{"type":603,"value":63882},{"type":597,"tag":606,"props":63919,"children":63920},{},[63921],{"type":603,"value":63922},"Clipping Planes",{"type":597,"tag":606,"props":63924,"children":63925},{},[63926],{"type":603,"value":63927},"Near: 0.01",{"type":597,"tag":606,"props":63929,"children":63930},{},[63931],{"type":603,"value":63932},"Far: 10",{"type":597,"tag":606,"props":63934,"children":63935},{},[63936],{"type":603,"value":63937},"Depth: 0",{"type":597,"tag":606,"props":63939,"children":63940},{},[63941],{"type":597,"tag":1080,"props":63942,"children":63943},{},[63944],{"type":603,"value":63945},"Parallax Camera Far",{"type":597,"tag":606,"props":63947,"children":63948},{},[63949],{"type":597,"tag":1080,"props":63950,"children":63951},{},[63952],{"type":603,"value":63953},"远距离视差相机",{"type":597,"tag":606,"props":63955,"children":63956},{},[63957],{"type":603,"value":63958},"Clear Flags: SolidColor (or whatever else you want to use as a background)",{"type":597,"tag":606,"props":63960,"children":63961},{},[63962],{"type":603,"value":63913},{"type":597,"tag":606,"props":63964,"children":63965},{},[63966],{"type":603,"value":63882},{"type":597,"tag":606,"props":63968,"children":63969},{},[63970],{"type":603,"value":63922},{"type":597,"tag":606,"props":63972,"children":63973},{},[63974],{"type":603,"value":63975},"Near: 10",{"type":597,"tag":606,"props":63977,"children":63978},{},[63979],{"type":603,"value":63980},"Far: 500",{"type":597,"tag":606,"props":63982,"children":63983},{},[63984],{"type":603,"value":63985},"Depth: -2",{"type":597,"tag":606,"props":63987,"children":63988},{},[63989],{"type":597,"tag":719,"props":63990,"children":63992},{"alt":719,"src":63991},"/images/2019-09-13-Parallax-2d/camera.png",[],{"type":597,"tag":606,"props":63994,"children":63995},{},[63996],{"type":603,"value":63997},"主相机会渲染除正交模式中视差层级之外的所有东西。这需要熟练使用“CullingMask”。“Clipping Planes”解决基于Z轴方向哪个视差对象被哪个视差相机渲染的问题，因此前景在正交平面之前，背景则在它的后边。相机放在Z轴-10的位置，所以在Z \u003C 0的视差中的所有东西都会被近处的相机渲染，在Z > 0位置的对象就会被远处的相机渲染。“Depth”决定相机被渲染的正确顺序。",{"type":597,"tag":606,"props":63999,"children":64000},{},[64001],{"type":603,"value":64002},"现在在编辑器中需要把所有的视差对象放入视差层中，并将其他所有对象移出该层。",{"type":597,"tag":606,"props":64004,"children":64005},{},[64006],{"type":597,"tag":719,"props":64007,"children":64009},{"alt":719,"src":64008},"/images/2019-09-13-Parallax-2d/cameraview.png",[],{"type":597,"tag":606,"props":64011,"children":64012},{},[64013],{"type":603,"value":64014},"你需要考虑正交相机的尺寸和视角设置的透视区域。尤其想在游戏中使用变焦的时候，需要基于主相机的正交尺寸来设置视差的相机视角区域。关键是通常有一个特殊的平面（这个案例中为Z = 0），即视差层会和正交透视有同样的移动速度。这点很重要，因为稍后可以移动和缩放相机并且它会表现的很自然。在Mimpi Dreams开发初期，我们没有意识到那些并在视差设置中出现一些错误。我们不可以稍后更改它，因为它会复位所有的视差层。最后，由于我们没有过多的使用缩放，所以并没有产生多大影响。在下一个工程中，我们肯定会用这个设置。",{"type":597,"tag":606,"props":64016,"children":64017},{},[64018],{"type":603,"value":64019},"这里有一段可以设置缩放的代码。",{"type":597,"tag":621,"props":64021,"children":64023},{"code":64022},"public float GetFieldOfView(float orthoSize, float distanceFromOrigin)\n{\n    // orthoSize\n    float a = orthoSize;\n    // distanceFromOrigin\n    float b = Mathf.Abs(distanceFromOrigin);\n \n    float fieldOfView = Mathf.Atan(a / b)  * Mathf.Rad2Deg * 2f;\n    return fieldOfView;\n}\n",[64024],{"type":597,"tag":629,"props":64025,"children":64026},{"__ignoreMap":591},[64027],{"type":603,"value":64022},{"type":597,"tag":606,"props":64029,"children":64030},{},[64031],{"type":603,"value":64032},"如果想在Z轴移动相机，则需要更新视差相机的裁剪平面。",{"type":597,"tag":621,"props":64034,"children":64036},{"code":64035},"// distanceFromOrigin\nfloat b = Mathf.Abs(mainCamera.transform.position.z);\n \n//change clipping planes based on main camera z-position\nfarCamera.nearClipPlane = b;\nfarCamera.farClipPlane = mainCamera.farClipPlane;\nnearCamera.farClipPlane = b;\nnearCamera.nearClipPlane = mainCamera.nearClipPlane;\n",[64037],{"type":597,"tag":629,"props":64038,"children":64039},{"__ignoreMap":591},[64040],{"type":603,"value":64035},{"type":597,"tag":606,"props":64042,"children":64043},{},[64044],{"type":603,"value":64045},"如何变焦相机有两个选择。",{"type":597,"tag":606,"props":64047,"children":64048},{},[64049],{"type":603,"value":64050},"可以在Z轴移动主相机（并重新计算裁剪平面），或者可以改变主相机的正交尺寸（并重新计算视差相机的视角区域）。两个选择给出不同的效果，改变正交尺寸是更自然的选择。或者，可以结合这两种技术，看下边的视频。",{"type":597,"tag":606,"props":64052,"children":64053},{},[64054],{"type":597,"tag":1080,"props":64055,"children":64056},{},[64057],{"type":603,"value":64058},"unity 实例",{"type":597,"tag":606,"props":64060,"children":64061},{},[64062],{"type":603,"value":64063},"Jaroslav准备并给出了你们可以尝试并学习的unity工程。感谢unity提供精选案例的免费资源！",{"type":597,"tag":606,"props":64065,"children":64066},{},[64067],{"type":603,"value":64068},"可以从Github下载案例工程。",{"type":597,"tag":606,"props":64070,"children":64071},{},[64072],{"type":603,"value":64073},"工程是用Unity 5.3.3f1制作的。",{"type":597,"tag":606,"props":64075,"children":64076},{},[64077],{"type":603,"value":64078},"还要看一下展示案例的视频。",{"type":597,"tag":606,"props":64080,"children":64081},{},[64082],{"type":597,"tag":886,"props":64083,"children":64086},{"href":64084,"rel":64085},"https://www.youtube.com/watch?v=ptdweDDyB8o&feature=youtu.be",[890],[64087],{"type":597,"tag":719,"props":64088,"children":64090},{"alt":591,"src":64089},"/images/2019-09-13-Parallax-2d/0%5B1%5D.jpg",[],{"type":597,"tag":606,"props":64092,"children":64093},{},[64094,64099],{"type":597,"tag":1080,"props":64095,"children":64096},{},[64097],{"type":603,"value":64098},"编辑工作流程",{"type":603,"value":64100},"\n在视差层设置对象最好的方法是在编辑模式下去播放游戏。可以移动角色（和相机）让玩家看到它并调整对象至实际视口。唯一的问题是播放模式下在unity中做出的更改不会保存。然而可以在播放模式下拷贝编辑过的对象并粘贴到编辑器中然后保存。我们创建一个有子集的“content”。这个content是在播放模式下编辑和复制过的。退出播放模式后，这个原始的content会被删除，新的content从剪切板粘贴过来，然后预制件就可以使用了。",{"type":597,"tag":606,"props":64102,"children":64103},{},[64104],{"type":597,"tag":719,"props":64105,"children":64107},{"alt":719,"src":64106},"/images/2019-09-13-Parallax-2d/181709gdpgid33t93vjfyf.png.thumb.jpg",[],{"type":597,"tag":606,"props":64109,"children":64110},{},[64111],{"type":603,"value":64112},"还有，不要忘记将新的对象放到视差层中。还可以编写或者使用一些编辑器工具来帮助你保存和自动完成对象层级设置。",{"type":597,"tag":606,"props":64114,"children":64115},{},[64116],{"type":603,"value":64117},"上边的案例实在编辑模式下执行的，所以可以在编辑器中用它来设置。不过我们在MimpiDreams中使用了这个工作流程，因为这对于美术设计在场景中移动很容易，并且他可以自己调整层级。",{"type":597,"tag":606,"props":64119,"children":64120},{},[64121,64125,64126],{"type":597,"tag":1080,"props":64122,"children":64123},{},[64124],{"type":603,"value":62309},{"type":603,"value":4731},{"type":597,"tag":1080,"props":64127,"children":64128},{},[64129],{"type":603,"value":1464},{"type":597,"tag":606,"props":64131,"children":64132},{},[64133],{"type":597,"tag":719,"props":64134,"children":64136},{"alt":719,"src":64135},"/images/2019-09-13-Parallax-2d/181711j5s29z585k932ot6.gif",[],{"type":597,"tag":606,"props":64138,"children":64139},{},[64140,64145,64146],{"type":597,"tag":1080,"props":64141,"children":64142},{},[64143],{"type":603,"value":64144},"Some advantages of this solution",{"type":603,"value":4731},{"type":597,"tag":1080,"props":64147,"children":64148},{},[64149],{"type":603,"value":64150},"这种解决方案的优势：",{"type":597,"tag":606,"props":64152,"children":64153},{},[64154],{"type":603,"value":64155},"本地基本设置（脚本仅仅为了变焦）",{"type":597,"tag":606,"props":64157,"children":64158},{},[64159],{"type":603,"value":64160},"案例中更好的表现",{"type":597,"tag":606,"props":64162,"children":64163},{},[64164],{"type":603,"value":64165},"静态批处理，因为层级不会移动",{"type":597,"tag":606,"props":64167,"children":64168},{},[64169],{"type":603,"value":64170},"简单的编辑工作流程",{"type":597,"tag":606,"props":64172,"children":64173},{},[64174,64179,64180],{"type":597,"tag":1080,"props":64175,"children":64176},{},[64177],{"type":603,"value":64178},"Disadvantages",{"type":603,"value":4731},{"type":597,"tag":1080,"props":64181,"children":64182},{},[64183],{"type":603,"value":64184},"劣势:",{"type":597,"tag":606,"props":64186,"children":64187},{},[64188],{"type":603,"value":64189},"会产生更多的draw calls",{"type":597,"tag":606,"props":64191,"children":64192},{},[64193],{"type":603,"value":64194},"我们介绍了和Mimpi Dreams中制作视差效果不同的制作方法。你可能需要自定义一些东西。例如，我们显示所有摄像机的渲染纹理，不过在这边文章中，我想介绍最简单的设置。",{"type":597,"tag":621,"props":64196,"children":64198},{"code":64197},"using UnityEngine;\nusing System.Collections;\n\n[ExecuteInEditMode]\npublic class CameraParallax : MonoBehaviour {\n\n  public Camera mainCamera;\n  public Camera farCamera;\n  public Camera nearCamera;\n\n  void OnEnable()\n  {\n      InitCameras();\n  }\n\n  void LateUpdate()\n  {\n      UpdateCameras();\n  }\n\n  public void InitCameras()\n  {\n      if(farCamera != null)\n      {\n          farCamera.transform.localPosition = Vector3.zero;\n          farCamera.transform.rotation = Quaternion.identity;\n          farCamera.transform.localScale = Vector3.one;\n          farCamera.orthographic = false;\n          farCamera.clearFlags = CameraClearFlags.SolidColor;\n          farCamera.depth = -2;\n          farCamera.transparencySortMode = TransparencySortMode.Orthographic;\n      }\n\n      if(mainCamera != null)\n      {\n          mainCamera.orthographic = true;\n          mainCamera.clearFlags = CameraClearFlags.Nothing;\n          mainCamera.depth = -1;\n      }\n\n      if(nearCamera != null)\n      {\n          nearCamera.transform.localPosition = Vector3.zero;\n          nearCamera.transform.rotation = Quaternion.identity;\n          nearCamera.transform.localScale = Vector3.one;\n          nearCamera.orthographic = false;\n          nearCamera.clearFlags = CameraClearFlags.Depth;\n          nearCamera.depth = 0;\n          nearCamera.transparencySortMode = TransparencySortMode.Orthographic;\n      }\n  }\n\n  public void UpdateCameras()\n  {\n      if(mainCamera == null || farCamera == null || nearCamera == null) return;\n\n      // orthoSize\n      float a = mainCamera.orthographicSize;\n      // distanceFromOrigin\n      float b = Mathf.Abs(mainCamera.transform.position.z);\n\n      //change clipping planes based on main camera z-position\n      farCamera.nearClipPlane = b;\n      farCamera.farClipPlane = mainCamera.farClipPlane;\n      nearCamera.farClipPlane = b;\n      nearCamera.nearClipPlane = mainCamera.nearClipPlane;\n\n      //update field fo view for parallax cameras\n      float fieldOfView = Mathf.Atan(a / b)  * Mathf.Rad2Deg * 2f;\n      nearCamera.fieldOfView = farCamera.fieldOfView = fieldOfView;\n  }\n\n}\n",[64199],{"type":597,"tag":629,"props":64200,"children":64201},{"__ignoreMap":591},[64202],{"type":603,"value":64197},{"type":597,"tag":606,"props":64204,"children":64205},{},[64206],{"type":603,"value":44664},{"type":597,"tag":1321,"props":64208,"children":64209},{},[64210,64219],{"type":597,"tag":807,"props":64211,"children":64212},{},[64213],{"type":597,"tag":886,"props":64214,"children":64217},{"href":64215,"rel":64216},"http://www.gamasutra.com/blogs/MichalBerlinger/20160323/268657/Combining_Perspective_and_Orthographic_Camera_for_Parallax_Effect_in_2D_Game.php",[890],[64218],{"type":603,"value":64215},{"type":597,"tag":807,"props":64220,"children":64221},{},[64222],{"type":597,"tag":886,"props":64223,"children":64226},{"href":64224,"rel":64225},"https://github.com/MichalBerlinger/ParallaxDemo",[890],[64227],{"type":603,"value":64224},{"title":591,"searchDepth":787,"depth":787,"links":64229},[64230,64231,64232],{"id":63736,"depth":1530,"text":63739},{"id":63750,"depth":1530,"text":63753},{"id":63792,"depth":787,"text":63795},"content:unity:2019-09-13-Parallax-2d.md","unity/2019-09-13-Parallax-2d.md","2019-09-13",{"_path":412,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":411,"description":64237,"body":64238,"_type":791,"_id":64267,"_source":793,"_file":64268,"_extension":795,"date":64269},"写汇编码比较麻烦,可以试下下面的方法,先写好你要注入的代码,然后编译好,使用ilsyp查看...选择到要注入的代码再使用Reflexil工具查看",{"type":594,"children":64239,"toc":64265},[64240,64244,64257],{"type":597,"tag":606,"props":64241,"children":64242},{},[64243],{"type":603,"value":64237},{"type":597,"tag":803,"props":64245,"children":64246},{},[64247,64252],{"type":597,"tag":807,"props":64248,"children":64249},{},[64250],{"type":603,"value":64251},"使用ilsyp",{"type":597,"tag":807,"props":64253,"children":64254},{},[64255],{"type":603,"value":64256},"使用reflexil就能看到他的汇编码",{"type":597,"tag":606,"props":64258,"children":64259},{},[64260],{"type":597,"tag":719,"props":64261,"children":64264},{"alt":64262,"src":64263},"1567660270933","/images/2019-09-04-mono.cecil-inject/1567660270933.png",[],{"title":591,"searchDepth":787,"depth":787,"links":64266},[],"content:unity:2019-09-04-mono.cecil-inject.md","unity/2019-09-04-mono.cecil-inject.md","2019-09-04",{"_path":409,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":408,"description":64271,"body":64272,"_type":791,"_id":64429,"_source":793,"_file":64430,"_extension":795,"date":64431},"让C#代码支持热更的流程Generate Code\n这一步主要根据是根据C#类中需要支持热更的方法生成其对应的委托方法，但是并不是每个方法对应一个委托，而是根据调用参数和返回参数公用委托。Hotfix Inject\n这一步主要是对Unity编译出的Dll中的C#类添加判断条件，以此来选择调用Lua中的修复方法还是直接执行C#代码Generate Code 实现和生成结果\n在Gen代码阶段，对热更生效的部分逻辑，基本就是根据之前在代码中标记了HotfixAttribute的类进行收集，然后使用XLua的模板代码生成器，生成对应名为DelegateBridge类。__Gen_Delegate_Im",{"type":594,"children":64273,"toc":64427},[64274,64285,64298,64311,64320,64325,64338,64347,64360,64369,64377,64386,64391,64404,64415],{"type":597,"tag":1321,"props":64275,"children":64276},{},[64277],{"type":597,"tag":807,"props":64278,"children":64279},{},[64280],{"type":597,"tag":1080,"props":64281,"children":64282},{},[64283],{"type":603,"value":64284},"让C#代码支持热更的流程",{"type":597,"tag":803,"props":64286,"children":64287},{},[64288,64293],{"type":597,"tag":807,"props":64289,"children":64290},{},[64291],{"type":603,"value":64292},"Generate Code\n这一步主要根据是根据C#类中需要支持热更的方法生成其对应的委托方法，但是并不是每个方法对应一个委托，而是根据调用参数和返回参数公用委托。",{"type":597,"tag":807,"props":64294,"children":64295},{},[64296],{"type":603,"value":64297},"Hotfix Inject\n这一步主要是对Unity编译出的Dll中的C#类添加判断条件，以此来选择调用Lua中的修复方法还是直接执行C#代码",{"type":597,"tag":1321,"props":64299,"children":64300},{},[64301],{"type":597,"tag":807,"props":64302,"children":64303},{},[64304,64309],{"type":597,"tag":1080,"props":64305,"children":64306},{},[64307],{"type":603,"value":64308},"Generate Code 实现和生成结果",{"type":603,"value":64310},"\n在Gen代码阶段，对热更生效的部分逻辑，基本就是根据之前在代码中标记了HotfixAttribute的类进行收集，然后使用XLua的模板代码生成器，生成对应名为DelegateBridge类。__Gen_Delegate_Imp这个就是到时候要重复使用到的映射到Lua中function的委托。",{"type":597,"tag":621,"props":64312,"children":64315},{"className":64313,"code":64314,"language":8105,"meta":591},[8107],"public void __Gen_Delegate_Imp0()\n{\n    RealStatePtr L = luaEnv.rawL;\n    int errFunc = LuaAPI.pcall_prepare(L, errorFuncRef, luaReference);\n    PCall(L, 0, 0, errFunc);\n    LuaAPI.lua_settop(L, errFunc - 1);\n}\n",[64316],{"type":597,"tag":629,"props":64317,"children":64318},{"__ignoreMap":591},[64319],{"type":603,"value":64314},{"type":597,"tag":606,"props":64321,"children":64322},{},[64323],{"type":603,"value":64324},"生成的代码就是先设置errorFuncRef（异常回调），luaReference（Lua方法）。如果在XLua中设置了热更修复代码，那么就会在C#中生成一个DelegateBridge，而其luaReference的指向就是Lua中的方法，所以这个只能调用指定的__Gen_Delegate_Imp，调用其他会报错。",{"type":597,"tag":1321,"props":64326,"children":64327},{},[64328],{"type":597,"tag":807,"props":64329,"children":64330},{},[64331,64336],{"type":597,"tag":1080,"props":64332,"children":64333},{},[64334],{"type":603,"value":64335},"Hotfix Inject",{"type":603,"value":64337},"\n这一步是在Unity为C#代码生成完对应dll之后，由XLua再来对dll注入一些判断条件式来完成是否进行Lua调用的行为。\n判断方法很简单，检查对应类静态字段是否有DelegateBridge对象。\n实现如下：",{"type":597,"tag":621,"props":64339,"children":64342},{"className":64340,"code":64341,"language":8105,"meta":591},[8107],"bool injectMethod(MethodDefinition method, HotfixFlagInTool hotfixType)\n{\n            var type = method.DeclaringType;\n            bool isFinalize = (method.Name == \"Finalize\" && method.IsSpecialName);\n            //__Gen_Delegate_Imp 方法引用\n            MethodReference invoke = null;\n            int param_count = method.Parameters.Count + (method.IsStatic ? 0 : 1);\n            //根据返回值和参数个数类型，查找对应的委托方法\n            if (!findHotfixDelegate(method, out invoke, hotfixType))\n            {\n                Error(\"can not find delegate for \" + method.DeclaringType + \".\" + method.Name + \"! try re-genertate code.\");\n                return false;\n            }\n\n            if (invoke == null)\n            {\n                throw new Exception(\"unknow exception!\");\n            }\n            \n            invoke = injectAssembly.MainModule.Import(invoke);\n            //插入的类静态字段，用来标记对应的方法是否有对应的Lua注入\n            FieldReference fieldReference = null;\n            //方法中的变量定义\n            VariableDefinition injection = null;\n            bool isIntKey = hotfixType.HasFlag(HotfixFlagInTool.IntKey) && !type.HasGenericParameters && isTheSameAssembly;\n            //isIntKey = !type.HasGenericParameters;\n\n            if (!isIntKey)\n            {\n                //新建变量，加入方法体的变量组中\n                injection = new VariableDefinition(invoke.DeclaringType);\n                method.Body.Variables.Add(injection);\n                //获取这个方法对应的委托名，因为有重载方法存在，所以之前已经注入的过的方法会在这边获取时候计数加1，\n                //比如第一个重载获取的是__Hotfix0，那么下一个重载会是__Hotfix1，判断是否注入就是是否设置对应FieldReference。\n                var luaDelegateName = getDelegateName(method);\n                if (luaDelegateName == null)\n                {\n                    Error(\"too many overload!\");\n                    return false;\n                }\n                //创建对应的静态Field名字就是上面取到的luaDelegateName \n                FieldDefinition fieldDefinition = new FieldDefinition(luaDelegateName, Mono.Cecil.FieldAttributes.Static | Mono.Cecil.FieldAttributes.Private,\n                    invoke.DeclaringType);\n                type.Fields.Add(fieldDefinition);\n                fieldReference = fieldDefinition.GetGeneric();\n            }\n\n            bool ignoreValueType = hotfixType.HasFlag(HotfixFlagInTool.ValueTypeBoxing);\n            //IL插入位置，现在定位的是方法体的第一行\n            var insertPoint = method.Body.Instructions[0];\n            //获取IL处理器\n            var processor = method.Body.GetILProcessor();\n            //构造函数的处理逻辑先跳过这边不做分析\n            if (method.IsConstructor)\n            {\n                insertPoint = findNextRet(method.Body.Instructions, insertPoint);\n            }\n\n            Dictionary\u003CInstruction, Instruction> originToNewTarget = new Dictionary\u003CInstruction, Instruction>();\n            HashSet\u003CInstruction> noCheck = new HashSet\u003CInstruction>();\n            \n            while (insertPoint != null)\n            {\n                //isIntKey这边用到的是Xlua中的AutoIdMap，这边只对最基础的功能做分析，这边就分析基础的注入了。\n                Instruction firstInstruction;\n                if (isIntKey)\n                {\n                    firstInstruction = processor.Create(OpCodes.Ldc_I4, bridgeIndexByKey.Count);\n                    processor.InsertBefore(insertPoint, firstInstruction);\n                    processor.InsertBefore(insertPoint, processor.Create(OpCodes.Call, hotfixFlagGetter));\n                }\n                else\n                {\n                    //创建第一条IL语句，获取类的静态Field压入方法栈中，其实就是之前luaDelegateName获取的字段\n                    firstInstruction = processor.Create(OpCodes.Ldsfld, fieldReference);\n                    //插入insertPoint之前\n                    processor.InsertBefore(insertPoint, firstInstruction);\n                    //创建并插入IL，获取栈顶的值并压入到对应的变量中，injection就是我们之前创建的新建变量\n                    processor.InsertBefore(insertPoint, processor.Create(OpCodes.Stloc, injection));\n                    //创建并插入IL，压入变量体中的值到栈\n                    processor.InsertBefore(insertPoint, processor.Create(OpCodes.Ldloc, injection));\n                }\n                //创建跳转语句，为false时候直接跳转insertPoint,\n                //这边OpCodes.Brfalse看起来是布尔值判断，其实也会判断是否为null\n                var jmpInstruction = processor.Create(OpCodes.Brfalse, insertPoint);\n                processor.InsertBefore(insertPoint, jmpInstruction);\n\n                if (isIntKey)\n                {\n                    processor.InsertBefore(insertPoint, processor.Create(OpCodes.Ldc_I4, bridgeIndexByKey.Count));\n                    processor.InsertBefore(insertPoint, processor.Create(OpCodes.Call, delegateBridgeGetter));\n                }\n                else\n                {\n                    //创建并插入IL,再次压入变量的值，因为上面做完判断后，栈顶的值就会被弹出，所以这边要再次压入\n                    processor.InsertBefore(insertPoint, processor.Create(OpCodes.Ldloc, injection));\n                }\n\n                for (int i = 0; i \u003C param_count; i++)\n                {\n                    if (i \u003C ldargs.Length)\n                    {\n                        processor.InsertBefore(insertPoint, processor.Create(ldargs[i]));\n                    }\n                    else if (i \u003C 256)\n                    {\n                        processor.InsertBefore(insertPoint, processor.Create(OpCodes.Ldarg_S, (byte)i));\n                    }\n                    else\n                    {\n                        processor.InsertBefore(insertPoint, processor.Create(OpCodes.Ldarg, (short)i));\n                    }\n                    if (i == 0 && !method.IsStatic && type.IsValueType)\n                    {\n                        processor.InsertBefore(insertPoint, processor.Create(OpCodes.Ldobj, type));\n                        \n                    }\n                    //对值类型进行Box\n                    if (ignoreValueType)\n                    {\n                        TypeReference paramType;\n                        if (method.IsStatic)\n                        {\n                            paramType = method.Parameters[i].ParameterType;\n                        }\n                        else\n                        {\n                            paramType = (i == 0) ? type : method.Parameters[i - 1].ParameterType;\n                        }\n                        if (paramType.IsValueType)\n                        {\n                            processor.InsertBefore(insertPoint, processor.Create(OpCodes.Box, paramType));\n                        }\n                    }\n                }\n                //创建并插入IL，调用invoke方法，因为之前已经压入injection的值，DelegateBridge的对象\n                processor.InsertBefore(insertPoint, processor.Create(OpCodes.Call, invoke));\n                //普通方法，加入返回操作\n                if (!method.IsConstructor && !isFinalize)\n                {\n                    processor.InsertBefore(insertPoint, processor.Create(OpCodes.Ret));\n                }\n\n                if (!method.IsConstructor)\n                {\n                    break;\n                }\n                else\n                {\n                    originToNewTarget[insertPoint] = firstInstruction;\n                    noCheck.Add(jmpInstruction);\n                }\n                insertPoint = findNextRet(method.Body.Instructions, insertPoint);\n            }\n\n            if (method.IsConstructor)\n            {\n                fixBranch(processor, method.Body.Instructions, originToNewTarget, noCheck);\n            }\n\n            if (isFinalize)\n            {\n                if (method.Body.ExceptionHandlers.Count == 0)\n                {\n                    throw new InvalidProgramException(\"Finalize has not try-catch? Type :\" + method.DeclaringType);\n                }\n                method.Body.ExceptionHandlers[0].TryStart = method.Body.Instructions[0];\n            }\n            if (isIntKey)\n            {\n                bridgeIndexByKey.Add(method);\n            }\n            return true;\n}\nstatic string getDelegateName(MethodDefinition method)\n{\n            string fieldName = method.Name;\n            if (fieldName.StartsWith(\".\"))\n            {\n                fieldName = fieldName.Substring(1);\n            }\n            string ccFlag = method.IsConstructor ? \"_c\" : \"\";\n            string luaDelegateName = null;\n            var type = method.DeclaringType;\n            for (int i = 0; i \u003C MAX_OVERLOAD; i++)\n            {\n                string tmp = ccFlag + \"__Hotfix\" + i + \"_\" + fieldName;\n                if (!type.Fields.Any(f => f.Name == tmp)) // injected\n                {\n                    luaDelegateName = tmp;\n                    break;\n                }\n            }\n            return luaDelegateName;\n}\n",[64343],{"type":597,"tag":629,"props":64344,"children":64345},{"__ignoreMap":591},[64346],{"type":603,"value":64341},{"type":597,"tag":1321,"props":64348,"children":64349},{},[64350],{"type":597,"tag":807,"props":64351,"children":64352},{},[64353,64358],{"type":597,"tag":1080,"props":64354,"children":64355},{},[64356],{"type":603,"value":64357},"xlua.hotfix",{"type":603,"value":64359},"在完成生成代码和注入后，只要在Lua中调用xlua.hotfix或util.hotfix*ex方法就可以实现C#代码热更了。*hotfix和hotfixex的区别在与是否可以调用原C#代码，其实ex的实现也是调用了hotfix，在下面将分析hotfix和hotfix_ex的实现原理。\n先分析下hotfix的Lua代码，代码在第一篇文章中的实例化lua中：",{"type":597,"tag":621,"props":64361,"children":64364},{"className":64362,"code":64363,"language":603,"meta":591},[29933],"     init_xlua.lua\n     xlua.hotfix = function(cs, field, func)\n                //判空\n                if func == nil then func = false end\n                //检查并且统一转化为table\n                //因为在Xlua中可以一次传一个方法，或者一次传一组方法\n                local tbl = (type(field) == 'table') and field or {[field] = func}\n                //遍历需要hotfix的代码，key是方法名，v是对应的func\n                for k, v in pairs(tbl) do\n                    //构造函数的hotfix，这边不做分析了，原理一样\n                    local cflag = ''\n                    if k == '.ctor' then\n                        cflag = '_c'\n                        k = 'ctor'\n                    end\n                    //检查v的类型\n                    local f = type(v) == 'function' and v or nil\n                    //调用access函数，其在初始化注册，最终实现在C#中下文解析实现\n                    xlua.access(cs, cflag .. '__Hotfix0_'..k, f) -- at least one\n                    //尝试给重载方法也添加上function如果有重载的话\n                    pcall(function()\n                        for i = 1, 99 do\n                            xlua.access(cs, cflag .. '__Hotfix'..i..'_'..k, f)\n                        end\n                    end)\n                end\n                //设置私有访问\n                xlua.private_accessible(cs)\n              end\n",[64365],{"type":597,"tag":629,"props":64366,"children":64367},{"__ignoreMap":591},[64368],{"type":603,"value":64363},{"type":597,"tag":606,"props":64370,"children":64371},{},[64372],{"type":597,"tag":1080,"props":64373,"children":64374},{},[64375],{"type":603,"value":64376},"XLuaAccess在C#中的实现：",{"type":597,"tag":621,"props":64378,"children":64381},{"className":64379,"code":64380,"language":603,"meta":591},[29933],"        //xlua.access(cs, cflag .. '__Hotfix0_'..k, f)\n\n        public static int XLuaAccess(RealStatePtr L)\n        {\n            try\n            {\n                \n                ObjectTranslator translator = ObjectTranslatorPool.Instance.Find(L);\n                //获取对应的CS类Type\n                Type type = getType(L, translator, 1);\n                object obj = null;\n                if (type == null && LuaAPI.lua_type(L, 1) == LuaTypes.LUA_TUSERDATA)\n                {\n                    obj = translator.SafeGetCSObj(L, 1);\n                    if (obj == null)\n                    {\n                        return LuaAPI.luaL_error(L, \"xlua.access, #1 parameter must a type/c# object/string\");\n                    }\n                    type = obj.GetType();\n                }\n\n                if (type == null)\n                {\n                    return LuaAPI.luaL_error(L, \"xlua.access, can not find c# type\");\n                }\n                //将cflag .. '__Hotfix0_'..k 转为fieldName，这个字段就是之前Inject时候创建的类静态字段名\n                string fieldName = LuaAPI.lua_tostring(L, 2);\n\n                BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static;\n                //这边访问一定是Set所以后面就不分析了，这边就是反射获取对应的FieldInfo，重点在于translator.GetObject方法。\n                if (LuaAPI.lua_gettop(L) > 2) // set\n                {\n                    var field = type.GetField(fieldName, bindingFlags);\n                    if (field != null)\n                    {\n                        field.SetValue(obj, translator.GetObject(L, 3, field.FieldType));\n                        return 0;\n                    }\n                    var prop = type.GetProperty(fieldName, bindingFlags);\n                    if (prop != null)\n                    {\n                        prop.SetValue(obj, translator.GetObject(L, 3, prop.PropertyType), null);\n                        return 0;\n                    }\n                }\n                else\n                {\n                    ...\n                }\n                return LuaAPI.luaL_error(L, \"xlua.access, no field \" + fieldName);\n            }\n            catch (Exception e)\n            {\n                return LuaAPI.luaL_error(L, \"c# exception in xlua.access: \" + e);\n            }\n        }\n        //为了减少篇幅，只展示必要代码\n        public object GetObject(RealStatePtr L, int index, Type type)\n        {\n            int udata = LuaAPI.xlua_tocsobj_safe(L, index);\n\n            if (udata != -1)\n            {\n                ...\n            }\n            else\n            {\n                //一些特殊值类型的返回\n                ...\n                return (objectCasters.GetCaster(type)(L, index, null));\n            }\n        }\n        //为了减少篇幅，只展示必要代码\n        public ObjectCast GetCaster(Type type)\n       {\n            ...\n            ObjectCast oc;\n            //缓存行为，继续分析第一次获取的caster委托\n            if (!castersMap.TryGetValue(type, out oc))\n            {\n                oc = genCaster(type);\n                castersMap.Add(type, oc);\n            }\n            return oc;\n        }\n        //为了减少篇幅，只展示必要代码\n        private ObjectCast genCaster(Type type)\n        {\n            \n            ObjectCast fixTypeGetter = (RealStatePtr L, int idx, object target) =>\n            {\n                if (LuaAPI.lua_type(L, idx) == LuaTypes.LUA_TUSERDATA)\n                {\n                    object obj = translator.SafeGetCSObj(L, idx);\n                    return (obj != null && type.IsAssignableFrom(obj.GetType())) ? obj : null;\n                }\n                return null;\n            }; \n            if ...\n            //在Inject代码时候我们已经知道其字段类型就是DelegateBridge，所以会返回的就是这个表达式\n            else if (typeof(DelegateBridgeBase).IsAssignableFrom(type))\n            {\n                return (RealStatePtr L, int idx, object target) =>\n                {\n                    //缓存行为，分析CreateDelegateBridge\n                    object obj = fixTypeGetter(L, idx, target);\n                    if (obj != null) return obj;\n\n                    if (!LuaAPI.lua_isfunction(L, idx))\n                    {\n                        return null;\n                    }\n\n                    return translator.CreateDelegateBridge(L, null, idx);\n                };\n            }\n        }\n        //为了减少篇幅，只展示必要代码\n        public object CreateDelegateBridge(RealStatePtr L, Type delegateType, int idx)\n        {\n            //这边只是查找是否这个方法已经有缓存了，有的话直接返回，没有就要Create，我们继续分析Create的事。\n            LuaAPI.lua_pushvalue(L, idx);\n            LuaAPI.lua_rawget(L, LuaIndexes.LUA_REGISTRYINDEX);\n            //不为null就是已经生成过，就直接从缓存获取\n            if (!LuaAPI.lua_isnil(L, -1))\n            {\n                retrun ...\n            }\n            else\n            {\n                //弹出刚刚查询过的nil值\n                LuaAPI.lua_pop(L, 1);\n            }\n            //开始生成对应的DelegateBridge\n            //压入idx对应的值，idx对应的值是Lua中的function\n            LuaAPI.lua_pushvalue(L, idx);\n            //获取function对应的引用id\n            int reference = LuaAPI.luaL_ref(L);\n            //再次压入idx对应的值，idx对应的值是Lua中的function\n            LuaAPI.lua_pushvalue(L, idx);\n            //压入function对应的引用id\n            LuaAPI.lua_pushnumber(L, reference);\n            //将栈顶的两个值以字典形式存在全局变量表中，这个的作用就是上面的代码查询是否已经在lua中缓存。\n            LuaAPI.lua_rawset(L, LuaIndexes.LUA_REGISTRYINDEX);\n            DelegateBridgeBase bridge;\n            try\n            {\n                //创建DelegateBridge，注意这边的reference，这个就是对应了lua中修复的lua函数，\n                //我们在Inject时候call的方法会使用到这个参数。\n                bridge = new DelegateBridge(reference, luaEnv);\n            }\n            catch(Exception e)\n            {\n                //异常情况下的，清场操作\n                LuaAPI.lua_pushvalue(L, idx);\n                LuaAPI.lua_pushnil(L);\n                LuaAPI.lua_rawset(L, LuaIndexes.LUA_REGISTRYINDEX);\n                LuaAPI.lua_pushnil(L);\n                LuaAPI.xlua_rawseti(L, LuaIndexes.LUA_REGISTRYINDEX, reference);\n                throw e;\n            }\n            //因为hotfix时候，delegateType传进来是个null，后续代码不会被调用到，就不做分析了。\n            if (delegateType == null)\n            {\n                //缓存到字典中，注意这里是弱引用所以会被回收，被回收后，需要从lua中查询到对应引用值，然后再生产。\n                delegate_bridges[reference] = new WeakReference(bridge);\n                return bridge;\n            }\n            ...\n        }\n",[64382],{"type":597,"tag":629,"props":64383,"children":64384},{"__ignoreMap":591},[64385],{"type":603,"value":64380},{"type":597,"tag":606,"props":64387,"children":64388},{},[64389],{"type":603,"value":64390},"这样在进行调用hotfix后，对应的要修复的类的静态字段就会被设置上对应的DelegateBridge对象，然后在C#代码执行到对应的需要热更修复的方法时候，会先执行我们注入的IL代码，检查是否有对应的DelegateBridge。那么就是调用DelegateBridge中对应的方法，方法中包含的reference就是Lua对应的function，这样就执行到了lua中去，实现了热更。",{"type":597,"tag":1321,"props":64392,"children":64393},{},[64394],{"type":597,"tag":807,"props":64395,"children":64396},{},[64397,64402],{"type":597,"tag":1080,"props":64398,"children":64399},{},[64400],{"type":603,"value":64401},"util.hotfix_ex的实现",{"type":603,"value":64403},"\n其实现直白的来讲就是在调用util.hotfix_ex(functionB)时候，真正设置的是一个中间函数A，它被设置为对应方法的热更修复函数。\n在调用A进行热更时候，它先设置这个方法的热更方法为空，然后调用原先设置的functionB，当functionB调用完后，然后再设置回热更方法为A，那么就能实现在热更修复方法functionB中调用原先的方法。\n因为设置这些参数都是带反射的，所以在高频场景是有性能消耗的。\n代码实现如下：",{"type":597,"tag":621,"props":64405,"children":64410},{"className":64406,"code":64408,"language":64409,"meta":591},[64407],"language-lua","local function hotfix_ex(cs, field, func)\n    --断言，检查参数\n    assert(type(field) == 'string' and type(func) == 'function', 'invalid argument: #2 string needed, #3 function needed!')\n    --创建中间函数，就是上文提到的A\n    local function func_after(...)\n        --先将需要热更修复的方法设置为nil，那么再调用方法时候会执行的就是之前方法\n        xlua.hotfix(cs, field, nil)\n        --执行func，就是上文提到的functionB\n        local ret = {func(...)}\n        ---重新将需要热更修复的方法设置为中间函数A\n        xlua.hotfix(cs, field, func_after)\n        return unpack(ret)\n    end\n    --设置需要热更修复为中间函数A\n    xlua.hotfix(cs, field, func_after)\nend\n","lua",[64411],{"type":597,"tag":629,"props":64412,"children":64413},{"__ignoreMap":591},[64414],{"type":603,"value":64408},{"type":597,"tag":1321,"props":64416,"children":64417},{},[64418],{"type":597,"tag":807,"props":64419,"children":64420},{},[64421,64425],{"type":597,"tag":1080,"props":64422,"children":64423},{},[64424],{"type":603,"value":38815},{"type":603,"value":64426},"整个Hotfix的实现也分析完了，后续的文章将继续分析，XLua中的各种优化技巧实现，比如无GC传值，模板生成技术。",{"title":591,"searchDepth":787,"depth":787,"links":64428},[],"content:unity:2019-09-03-xlua-inject.md","unity/2019-09-03-xlua-inject.md","2019-09-03",{"_path":276,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":275,"description":64433,"body":64434,"_type":791,"_id":64499,"_source":793,"_file":64500,"_extension":795,"date":64501},"先创建一个文件Directory.Build.props",{"type":594,"children":64435,"toc":64496},[64436,64447,64455,64460,64468,64473],{"type":597,"tag":606,"props":64437,"children":64438},{},[64439,64441],{"type":603,"value":64440},"先创建一个文件",{"type":597,"tag":629,"props":64442,"children":64444},{"className":64443},[],[64445],{"type":603,"value":64446},"Directory.Build.props",{"type":597,"tag":621,"props":64448,"children":64450},{"code":64449},"\u003CProject>\n    \u003CPropertyGroup>\n        \u003CNuGet-Kritner-SolarProjection>1.0.2\u003C/NuGet-Kritner-SolarProjection>\n    \u003C/PropertyGroup>\n\u003C/Project>\n",[64451],{"type":597,"tag":629,"props":64452,"children":64453},{"__ignoreMap":591},[64454],{"type":603,"value":64449},{"type":597,"tag":606,"props":64456,"children":64457},{},[64458],{"type":603,"value":64459},"然后修改你的项目文件",{"type":597,"tag":621,"props":64461,"children":64463},{"code":64462},"\u003CItemGroup>\n  \u003CPackageReference Include=\"Kritner.SolarProjection\" Version=\"$(NuGet-Kritner-SolarProjection)\" />\n\u003C/ItemGroup>\n",[64464],{"type":597,"tag":629,"props":64465,"children":64466},{"__ignoreMap":591},[64467],{"type":603,"value":64462},{"type":597,"tag":1023,"props":64469,"children":64471},{"id":64470},"相关连接",[64472],{"type":603,"value":64470},{"type":597,"tag":1321,"props":64474,"children":64475},{},[64476,64486],{"type":597,"tag":807,"props":64477,"children":64478},{},[64479],{"type":597,"tag":886,"props":64480,"children":64483},{"href":64481,"rel":64482},"https://docs.microsoft.com/zh-cn/nuget/consume-packages/package-references-in-project-files",[890],[64484],{"type":603,"value":64485},"包的版本号",{"type":597,"tag":807,"props":64487,"children":64488},{},[64489],{"type":597,"tag":886,"props":64490,"children":64493},{"href":64491,"rel":64492},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/customize-your-build?view=vs-2019",[890],[64494],{"type":603,"value":64495},"Directory.Build.props的说明",{"title":591,"searchDepth":787,"depth":787,"links":64497},[64498],{"id":64470,"depth":1530,"text":64470},"content:tool:2019-09-02-nuget-manager.md","tool/2019-09-02-nuget-manager.md","2019-09-02",{"_path":279,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":278,"description":64503,"body":64504,"_type":791,"_id":66090,"_source":793,"_file":66091,"_extension":795,"date":64501},"Redis 分别提供了 RDB 和 AOF 两种持久化机制：",{"type":594,"children":64505,"toc":66070},[64506,64510,64523,64530,64535,64540,64545,64558,64566,64572,64576,64594,64598,64615,64621,64626,64631,64639,64644,64652,64657,64662,64670,64684,64689,64723,64728,64733,64738,64758,64771,64822,64827,64832,64840,64845,64852,64857,64862,64892,64913,64931,64939,64944,64949,64973,64978,64991,65003,65021,65026,65032,65037,65073,65078,65083,65096,65101,65119,65124,65129,65134,65159,65171,65216,65221,65228,65233,65238,65243,65248,65253,65258,65264,65269,65274,65313,65318,65323,65328,65333,65338,65340,65445,65451,65456,65461,65466,65489,65494,65499,65504,65512,65517,65525,65545,65580,65585,65591,65596,65601,65609,65621,65626,65631,65636,65642,65647,65659,65666,65685,65705,65718,65726,65746,65751,65756,65764,65770,65775,65780,65793,65798,65803,65810,65815,65833,65838,65851,65856,65869,65874,65879,65884,65898,65904,65916,65921,65960,65973,66019,66032,66037],{"type":597,"tag":606,"props":64507,"children":64508},{},[64509],{"type":603,"value":64503},{"type":597,"tag":1321,"props":64511,"children":64512},{},[64513,64518],{"type":597,"tag":807,"props":64514,"children":64515},{},[64516],{"type":603,"value":64517},"RDB 将数据库的快照（snapshot）以二进制的方式保存到磁盘中。",{"type":597,"tag":807,"props":64519,"children":64520},{},[64521],{"type":603,"value":64522},"AOF 则以协议文本的方式，将所有对数据库进行过写入的命令（及其参数）记录到 AOF 文件，以此达到记录数据库状态的目的。",{"type":597,"tag":606,"props":64524,"children":64525},{},[64526],{"type":597,"tag":719,"props":64527,"children":64529},{"alt":591,"src":64528},"/images/2019-09-02-redis-aof-rdb/graphviz-a7c5f2bb064f2c0307d15dca06d7d31d3adfc032.svg",[],{"type":597,"tag":606,"props":64531,"children":64532},{},[64533],{"type":603,"value":64534},"本章首先介绍 AOF 功能的运作机制， 了解命令是如何被保存到 AOF 文件里的， 观察不同的 AOF 保存模式对数据的安全性、以及 Redis 性能的影响。",{"type":597,"tag":606,"props":64536,"children":64537},{},[64538],{"type":603,"value":64539},"之后会介绍从 AOF 文件中恢复数据库状态的方法，以及该方法背后的实现机制。",{"type":597,"tag":606,"props":64541,"children":64542},{},[64543],{"type":603,"value":64544},"最后还会介绍对 AOF 进行重写以调整文件体积的方法， 并研究这种方法是如何在不改变数据库状态的前提下进行的。",{"type":597,"tag":606,"props":64546,"children":64547},{},[64548,64550,64557],{"type":603,"value":64549},"因为本章涉及 AOF 运行的相关机制， 如果还没了解过 AOF 功能的话， 请先阅读 ",{"type":597,"tag":886,"props":64551,"children":64554},{"href":64552,"rel":64553},"http://redis.io/topics/persistence",[890],[64555],{"type":603,"value":64556},"Redis 持久化手册中关于 AOF 的部分",{"type":603,"value":19548},{"type":597,"tag":606,"props":64559,"children":64560},{},[64561],{"type":597,"tag":1080,"props":64562,"children":64563},{},[64564],{"type":603,"value":64565},"无论是rdb还是aof都是把存储的文件恢复到内存中",{"type":597,"tag":857,"props":64567,"children":64569},{"id":64568},"rdb优点与缺点",[64570],{"type":603,"value":64571},"RDB优点与缺点",{"type":597,"tag":1023,"props":64573,"children":64574},{"id":48237},[64575],{"type":603,"value":48237},{"type":597,"tag":1321,"props":64577,"children":64578},{},[64579,64584,64589],{"type":597,"tag":807,"props":64580,"children":64581},{},[64582],{"type":603,"value":64583},"如果要进行大规模数据的恢复，RDB方式要比AOF方式恢复速度要快。",{"type":597,"tag":807,"props":64585,"children":64586},{},[64587],{"type":603,"value":64588},"RDB可以最大化Redis性能，父进程做的就是fork子进程，然后继续接受客户端请求，让子进程负责持久化操作，父进程无需进行IO操作。",{"type":597,"tag":807,"props":64590,"children":64591},{},[64592],{"type":603,"value":64593},"RDB是一个非常紧凑(compact)的文件,它保存了某个时间点的数据集，非常适合用作备份，同时也非常适合用作灾难性恢复，它只有一个文件，内容紧凑，通过备份原文件到本机外的其他主机上，一旦本机发生宕机，就能将备份文件复制到redis安装目录下，通过启用服务就能完成数据的恢复。",{"type":597,"tag":1023,"props":64595,"children":64596},{"id":48252},[64597],{"type":603,"value":48252},{"type":597,"tag":1321,"props":64599,"children":64600},{},[64601,64606],{"type":597,"tag":807,"props":64602,"children":64603},{},[64604],{"type":603,"value":64605},"RDB这种持久化方式不太适应对数据完整性要求严格的情况，因为，尽管我们可以用过修改快照实现持久化的频率，但是要持久化的数据是一段时间内的整个数据集的状态，如果在还没有触发快照时，本机就宕机了，那么对数据库所做的写操作就随之而消失了并没有持久化本地dump.rdb文件中。",{"type":597,"tag":807,"props":64607,"children":64608},{},[64609,64611],{"type":603,"value":64610},"每次进行RDB时，父进程都会fork一个子进程，由子进程来进行实际的持久化操作，如果数据集庞大，那么fork出子进程的这个过程将是非常耗时的，就会出现服务器暂停客户端请求，将内存中的数据复制一份给子进程，让子进程进行持久化操作。\n",{"type":597,"tag":719,"props":64612,"children":64614},{"alt":719,"src":64613},"/images/2019-09-02-redis-aof-rdb/20181004174024768.png",[],{"type":597,"tag":598,"props":64616,"children":64618},{"id":64617},"aof-命令同步",[64619],{"type":603,"value":64620},"AOF 命令同步",{"type":597,"tag":606,"props":64622,"children":64623},{},[64624],{"type":603,"value":64625},"Redis 将所有对数据库进行过写入的命令（及其参数）记录到 AOF 文件， 以此达到记录数据库状态的目的， 为了方便起见， 我们称呼这种记录过程为同步。",{"type":597,"tag":606,"props":64627,"children":64628},{},[64629],{"type":603,"value":64630},"举个例子， 如果执行以下命令：",{"type":597,"tag":621,"props":64632,"children":64634},{"code":64633},"redis> RPUSH list 1 2 3 4\n(integer) 4\n\nredis> LRANGE list 0 -1\n1) \"1\"\n2) \"2\"\n3) \"3\"\n4) \"4\"\n\nredis> KEYS *\n1) \"list\"\n\nredis> RPOP list\n\"4\"\n\nredis> LPOP list\n\"1\"\n\nredis> LPUSH list 1\n(integer) 3\n\nredis> LRANGE list 0 -1\n1) \"1\"\n2) \"2\"\n3) \"3\"\n",[64635],{"type":597,"tag":629,"props":64636,"children":64637},{"__ignoreMap":591},[64638],{"type":603,"value":64633},{"type":597,"tag":606,"props":64640,"children":64641},{},[64642],{"type":603,"value":64643},"那么其中四条对数据库有修改的写入命令就会被同步到 AOF 文件中：",{"type":597,"tag":621,"props":64645,"children":64647},{"code":64646},"RPUSH list 1 2 3 4\n\nRPOP list\n\nLPOP list\n\nLPUSH list 1\n",[64648],{"type":597,"tag":629,"props":64649,"children":64650},{"__ignoreMap":591},[64651],{"type":603,"value":64646},{"type":597,"tag":606,"props":64653,"children":64654},{},[64655],{"type":603,"value":64656},"为了处理的方便， AOF 文件使用网络通讯协议的格式来保存这些命令。",{"type":597,"tag":606,"props":64658,"children":64659},{},[64660],{"type":603,"value":64661},"比如说， 上面列举的四个命令在 AOF 文件中就实际保存如下：",{"type":597,"tag":621,"props":64663,"children":64665},{"code":64664},"*2\n$6\nSELECT\n$1\n0\n*6\n$5\nRPUSH\n$4\nlist\n$1\n1\n$1\n2\n$1\n3\n$1\n4\n*2\n$4\nRPOP\n$4\nlist\n*2\n$4\nLPOP\n$4\nlist\n*3\n$5\nLPUSH\n$4\nlist\n$1\n1\n",[64666],{"type":597,"tag":629,"props":64667,"children":64668},{"__ignoreMap":591},[64669],{"type":603,"value":64664},{"type":597,"tag":606,"props":64671,"children":64672},{},[64673,64675,64682],{"type":603,"value":64674},"除了 ",{"type":597,"tag":886,"props":64676,"children":64679},{"href":64677,"rel":64678},"http://redis.readthedocs.org/en/latest/connection/select.html#select",[890],[64680],{"type":603,"value":64681},"SELECT",{"type":603,"value":64683}," 命令是 AOF 程序自己加上去的之外， 其他命令都是之前我们在终端里执行的命令。",{"type":597,"tag":606,"props":64685,"children":64686},{},[64687],{"type":603,"value":64688},"同步命令到 AOF 文件的整个过程可以分为三个阶段：",{"type":597,"tag":803,"props":64690,"children":64691},{},[64692,64697,64702],{"type":597,"tag":807,"props":64693,"children":64694},{},[64695],{"type":603,"value":64696},"命令传播：Redis 将执行完的命令、命令的参数、命令的参数个数等信息发送到 AOF 程序中。",{"type":597,"tag":807,"props":64698,"children":64699},{},[64700],{"type":603,"value":64701},"缓存追加：AOF 程序根据接收到的命令数据，将命令转换为网络通讯协议的格式，然后将协议内容追加到服务器的 AOF 缓存中。",{"type":597,"tag":807,"props":64703,"children":64704},{},[64705,64707,64713,64715,64721],{"type":603,"value":64706},"文件写入和保存：AOF 缓存中的内容被写入到 AOF 文件末尾，如果设定的 AOF 保存条件被满足的话， ",{"type":597,"tag":629,"props":64708,"children":64710},{"className":64709},[],[64711],{"type":603,"value":64712},"fsync",{"type":603,"value":64714}," 函数或者 ",{"type":597,"tag":629,"props":64716,"children":64718},{"className":64717},[],[64719],{"type":603,"value":64720},"fdatasync",{"type":603,"value":64722}," 函数会被调用，将写入的内容真正地保存到磁盘中。",{"type":597,"tag":606,"props":64724,"children":64725},{},[64726],{"type":603,"value":64727},"以下几个小节将详细地介绍这三个步骤。",{"type":597,"tag":598,"props":64729,"children":64731},{"id":64730},"命令传播",[64732],{"type":603,"value":64730},{"type":597,"tag":606,"props":64734,"children":64735},{},[64736],{"type":603,"value":64737},"当一个 Redis 客户端需要执行命令时， 它通过网络连接， 将协议文本发送给 Redis 服务器。",{"type":597,"tag":606,"props":64739,"children":64740},{},[64741,64743,64749,64751,64757],{"type":603,"value":64742},"比如说， 要执行命令 ",{"type":597,"tag":629,"props":64744,"children":64746},{"className":64745},[],[64747],{"type":603,"value":64748},"SET KEY VALUE",{"type":603,"value":64750}," ， 客户端将向服务器发送文本 ",{"type":597,"tag":629,"props":64752,"children":64754},{"className":64753},[],[64755],{"type":603,"value":64756},"\"*3\\r\\n$3\\r\\nSET\\r\\n$3\\r\\nKEY\\r\\n$5\\r\\nVALUE\\r\\n\"",{"type":603,"value":19548},{"type":597,"tag":606,"props":64759,"children":64760},{},[64761,64763,64769],{"type":603,"value":64762},"服务器在接到客户端的请求之后， 它会根据协议文本的内容， 选择适当的命令函数， 并将各个参数从字符串文本转换为 Redis 字符串对象（",{"type":597,"tag":629,"props":64764,"children":64766},{"className":64765},[],[64767],{"type":603,"value":64768},"StringObject",{"type":603,"value":64770},"）。",{"type":597,"tag":606,"props":64772,"children":64773},{},[64774,64776,64783,64785,64790,64792,64798,64800,64805,64807,64813,64814,64820],{"type":603,"value":64775},"比如说， 针对上面的 ",{"type":597,"tag":886,"props":64777,"children":64780},{"href":64778,"rel":64779},"http://redis.readthedocs.org/en/latest/string/set.html#set",[890],[64781],{"type":603,"value":64782},"SET",{"type":603,"value":64784}," 命令例子， Redis 将客户端的命令指针指向实现 ",{"type":597,"tag":886,"props":64786,"children":64788},{"href":64778,"rel":64787},[890],[64789],{"type":603,"value":64782},{"type":603,"value":64791}," 命令的 ",{"type":597,"tag":629,"props":64793,"children":64795},{"className":64794},[],[64796],{"type":603,"value":64797},"setCommand",{"type":603,"value":64799}," 函数， 并创建三个 Redis 字符串对象， 分别保存 ",{"type":597,"tag":629,"props":64801,"children":64803},{"className":64802},[],[64804],{"type":603,"value":64782},{"type":603,"value":64806}," 、 ",{"type":597,"tag":629,"props":64808,"children":64810},{"className":64809},[],[64811],{"type":603,"value":64812},"KEY",{"type":603,"value":13757},{"type":597,"tag":629,"props":64815,"children":64817},{"className":64816},[],[64818],{"type":603,"value":64819},"VALUE",{"type":603,"value":64821}," 三个参数（命令也算作参数）。",{"type":597,"tag":606,"props":64823,"children":64824},{},[64825],{"type":603,"value":64826},"每当命令函数成功执行之后， 命令参数都会被传播到 AOF 程序， 以及 REPLICATION 程序（本节不讨论这个，列在这里只是为了完整性的考虑）。",{"type":597,"tag":606,"props":64828,"children":64829},{},[64830],{"type":603,"value":64831},"这个执行并传播命令的过程可以用以下伪代码表示：",{"type":597,"tag":621,"props":64833,"children":64835},{"code":64834},"if (execRedisCommand(cmd, argv, argc) == EXEC_SUCCESS):\n\n    if aof_is_turn_on():\n        # 传播命令到 AOF 程序\n        propagate_aof(cmd, argv, argc)\n\n    if replication_is_turn_on():\n        # 传播命令到 REPLICATION 程序\n        propagate_replication(cmd, argv, argc)\n",[64836],{"type":597,"tag":629,"props":64837,"children":64838},{"__ignoreMap":591},[64839],{"type":603,"value":64834},{"type":597,"tag":606,"props":64841,"children":64842},{},[64843],{"type":603,"value":64844},"以下是该过程的流程图：",{"type":597,"tag":606,"props":64846,"children":64847},{},[64848],{"type":597,"tag":719,"props":64849,"children":64851},{"alt":591,"src":64850},"/images/2019-09-02-redis-aof-rdb/graphviz-a5c804211267a10a5c3ffa47c5b600727191a3be.svg",[],{"type":597,"tag":598,"props":64853,"children":64855},{"id":64854},"缓存追加",[64856],{"type":603,"value":64854},{"type":597,"tag":606,"props":64858,"children":64859},{},[64860],{"type":603,"value":64861},"当命令被传播到 AOF 程序之后， 程序会根据命令以及命令的参数， 将命令从字符串对象转换回原来的协议文本。",{"type":597,"tag":606,"props":64863,"children":64864},{},[64865,64867,64872,64873,64878,64879,64884,64886,64891],{"type":603,"value":64866},"比如说， 如果 AOF 程序接受到的三个参数分别保存着 ",{"type":597,"tag":629,"props":64868,"children":64870},{"className":64869},[],[64871],{"type":603,"value":64782},{"type":603,"value":64806},{"type":597,"tag":629,"props":64874,"children":64876},{"className":64875},[],[64877],{"type":603,"value":64812},{"type":603,"value":13757},{"type":597,"tag":629,"props":64880,"children":64882},{"className":64881},[],[64883],{"type":603,"value":64819},{"type":603,"value":64885}," 三个字符串， 那么它将生成协议文本 ",{"type":597,"tag":629,"props":64887,"children":64889},{"className":64888},[],[64890],{"type":603,"value":64756},{"type":603,"value":19548},{"type":597,"tag":606,"props":64893,"children":64894},{},[64895,64897,64903,64905,64911],{"type":603,"value":64896},"协议文本生成之后， 它会被追加到 ",{"type":597,"tag":629,"props":64898,"children":64900},{"className":64899},[],[64901],{"type":603,"value":64902},"redis.h/redisServer",{"type":603,"value":64904}," 结构的 ",{"type":597,"tag":629,"props":64906,"children":64908},{"className":64907},[],[64909],{"type":603,"value":64910},"aof_buf",{"type":603,"value":64912}," 末尾。",{"type":597,"tag":606,"props":64914,"children":64915},{},[64916,64922,64924,64929],{"type":597,"tag":629,"props":64917,"children":64919},{"className":64918},[],[64920],{"type":603,"value":64921},"redisServer",{"type":603,"value":64923}," 结构维持着 Redis 服务器的状态， ",{"type":597,"tag":629,"props":64925,"children":64927},{"className":64926},[],[64928],{"type":603,"value":64910},{"type":603,"value":64930}," 域则保存着所有等待写入到 AOF 文件的协议文本：",{"type":597,"tag":621,"props":64932,"children":64934},{"code":64933},"struct redisServer {\n\n    // 其他域...\n\n    sds aof_buf;\n\n    // 其他域...\n};\n",[64935],{"type":597,"tag":629,"props":64936,"children":64937},{"__ignoreMap":591},[64938],{"type":603,"value":64933},{"type":597,"tag":606,"props":64940,"children":64941},{},[64942],{"type":603,"value":64943},"至此， 追加命令到缓存的步骤执行完毕。",{"type":597,"tag":606,"props":64945,"children":64946},{},[64947],{"type":603,"value":64948},"综合起来，整个缓存追加过程可以分为以下三步：",{"type":597,"tag":803,"props":64950,"children":64951},{},[64952,64957,64962],{"type":597,"tag":807,"props":64953,"children":64954},{},[64955],{"type":603,"value":64956},"接受命令、命令的参数、以及参数的个数、所使用的数据库等信息。",{"type":597,"tag":807,"props":64958,"children":64959},{},[64960],{"type":603,"value":64961},"将命令还原成 Redis 网络通讯协议。",{"type":597,"tag":807,"props":64963,"children":64964},{},[64965,64967,64972],{"type":603,"value":64966},"将协议文本追加到 ",{"type":597,"tag":629,"props":64968,"children":64970},{"className":64969},[],[64971],{"type":603,"value":64910},{"type":603,"value":64912},{"type":597,"tag":598,"props":64974,"children":64976},{"id":64975},"文件写入和保存",[64977],{"type":603,"value":64975},{"type":597,"tag":606,"props":64979,"children":64980},{},[64981,64983,64989],{"type":603,"value":64982},"每当服务器常规任务函数被执行、 或者事件处理器被执行时， ",{"type":597,"tag":629,"props":64984,"children":64986},{"className":64985},[],[64987],{"type":603,"value":64988},"aof.c/flushAppendOnlyFile",{"type":603,"value":64990}," 函数都会被调用， 这个函数执行以下两个工作：",{"type":597,"tag":606,"props":64992,"children":64993},{},[64994,64996,65001],{"type":603,"value":64995},"WRITE：根据条件，将 ",{"type":597,"tag":629,"props":64997,"children":64999},{"className":64998},[],[65000],{"type":603,"value":64910},{"type":603,"value":65002}," 中的缓存写入到 AOF 文件。",{"type":597,"tag":606,"props":65004,"children":65005},{},[65006,65008,65013,65014,65019],{"type":603,"value":65007},"SAVE：根据条件，调用 ",{"type":597,"tag":629,"props":65009,"children":65011},{"className":65010},[],[65012],{"type":603,"value":64712},{"type":603,"value":36397},{"type":597,"tag":629,"props":65015,"children":65017},{"className":65016},[],[65018],{"type":603,"value":64720},{"type":603,"value":65020}," 函数，将 AOF 文件保存到磁盘中。",{"type":597,"tag":606,"props":65022,"children":65023},{},[65024],{"type":603,"value":65025},"两个步骤都需要根据一定的条件来执行， 而这些条件由 AOF 所使用的保存模式来决定， 以下小节就来介绍 AOF 所使用的三种保存模式， 以及在这些模式下， 步骤 WRITE 和 SAVE 的调用条件。",{"type":597,"tag":598,"props":65027,"children":65029},{"id":65028},"aof-保存模式",[65030],{"type":603,"value":65031},"AOF 保存模式",{"type":597,"tag":606,"props":65033,"children":65034},{},[65035],{"type":603,"value":65036},"Redis 目前支持三种 AOF 保存模式，它们分别是：",{"type":597,"tag":803,"props":65038,"children":65039},{},[65040,65051,65062],{"type":597,"tag":807,"props":65041,"children":65042},{},[65043,65049],{"type":597,"tag":629,"props":65044,"children":65046},{"className":65045},[],[65047],{"type":603,"value":65048},"AOF_FSYNC_NO",{"type":603,"value":65050}," ：不保存。",{"type":597,"tag":807,"props":65052,"children":65053},{},[65054,65060],{"type":597,"tag":629,"props":65055,"children":65057},{"className":65056},[],[65058],{"type":603,"value":65059},"AOF_FSYNC_EVERYSEC",{"type":603,"value":65061}," ：每一秒钟保存一次。",{"type":597,"tag":807,"props":65063,"children":65064},{},[65065,65071],{"type":597,"tag":629,"props":65066,"children":65068},{"className":65067},[],[65069],{"type":603,"value":65070},"AOF_FSYNC_ALWAYS",{"type":603,"value":65072}," ：每执行一个命令保存一次。",{"type":597,"tag":606,"props":65074,"children":65075},{},[65076],{"type":603,"value":65077},"以下三个小节将分别讨论这三种保存模式。",{"type":597,"tag":1023,"props":65079,"children":65081},{"id":65080},"不保存",[65082],{"type":603,"value":65080},{"type":597,"tag":606,"props":65084,"children":65085},{},[65086,65088,65094],{"type":603,"value":65087},"在这种模式下， 每次调用 ",{"type":597,"tag":629,"props":65089,"children":65091},{"className":65090},[],[65092],{"type":603,"value":65093},"flushAppendOnlyFile",{"type":603,"value":65095}," 函数， WRITE 都会被执行， 但 SAVE 会被略过。",{"type":597,"tag":606,"props":65097,"children":65098},{},[65099],{"type":603,"value":65100},"在这种模式下， SAVE 只会在以下任意一种情况中被执行：",{"type":597,"tag":1321,"props":65102,"children":65103},{},[65104,65109,65114],{"type":597,"tag":807,"props":65105,"children":65106},{},[65107],{"type":603,"value":65108},"Redis 被关闭",{"type":597,"tag":807,"props":65110,"children":65111},{},[65112],{"type":603,"value":65113},"AOF 功能被关闭",{"type":597,"tag":807,"props":65115,"children":65116},{},[65117],{"type":603,"value":65118},"系统的写缓存被刷新（可能是缓存已经被写满，或者定期保存操作被执行）",{"type":597,"tag":606,"props":65120,"children":65121},{},[65122],{"type":603,"value":65123},"这三种情况下的 SAVE 操作都会引起 Redis 主进程阻塞。",{"type":597,"tag":1023,"props":65125,"children":65127},{"id":65126},"每一秒钟保存一次",[65128],{"type":603,"value":65126},{"type":597,"tag":606,"props":65130,"children":65131},{},[65132],{"type":603,"value":65133},"在这种模式中， SAVE 原则上每隔一秒钟就会执行一次， 因为 SAVE 操作是由后台子线程调用的， 所以它不会引起服务器主进程阻塞。",{"type":597,"tag":606,"props":65135,"children":65136},{},[65137,65139,65144,65145,65150,65152,65157],{"type":603,"value":65138},"注意， 在上一句的说明里面使用了词语“原则上”， 在实际运行中， 程序在这种模式下对 ",{"type":597,"tag":629,"props":65140,"children":65142},{"className":65141},[],[65143],{"type":603,"value":64712},{"type":603,"value":36397},{"type":597,"tag":629,"props":65146,"children":65148},{"className":65147},[],[65149],{"type":603,"value":64720},{"type":603,"value":65151}," 的调用并不是每秒一次， 它和调用 ",{"type":597,"tag":629,"props":65153,"children":65155},{"className":65154},[],[65156],{"type":603,"value":65093},{"type":603,"value":65158}," 函数时 Redis 所处的状态有关。",{"type":597,"tag":606,"props":65160,"children":65161},{},[65162,65164,65169],{"type":603,"value":65163},"每当 ",{"type":597,"tag":629,"props":65165,"children":65167},{"className":65166},[],[65168],{"type":603,"value":65093},{"type":603,"value":65170}," 函数被调用时， 可能会出现以下四种情况：",{"type":597,"tag":1321,"props":65172,"children":65173},{},[65174,65195],{"type":597,"tag":807,"props":65175,"children":65176},{},[65177,65179],{"type":603,"value":65178},"子线程正在执行 SAVE ，并且：",{"type":597,"tag":617,"props":65180,"children":65181},{},[65182],{"type":597,"tag":803,"props":65183,"children":65184},{},[65185,65190],{"type":597,"tag":807,"props":65186,"children":65187},{},[65188],{"type":603,"value":65189},"这个 SAVE 的执行时间未超过 2 秒，那么程序直接返回，并不执行 WRITE 或新的 SAVE 。",{"type":597,"tag":807,"props":65191,"children":65192},{},[65193],{"type":603,"value":65194},"这个 SAVE 已经执行超过 2 秒，那么程序执行 WRITE ，但不执行新的 SAVE 。注意，因为这时 WRITE 的写入必须等待子线程先完成（旧的） SAVE ，因此这里 WRITE 会比平时阻塞更长时间。",{"type":597,"tag":807,"props":65196,"children":65197},{},[65198,65200],{"type":603,"value":65199},"子线程没有在执行 SAVE ，并且：",{"type":597,"tag":617,"props":65201,"children":65202},{},[65203],{"type":597,"tag":803,"props":65204,"children":65205},{},[65206,65211],{"type":597,"tag":807,"props":65207,"children":65208},{},[65209],{"type":603,"value":65210},"上次成功执行 SAVE 距今不超过 1 秒，那么程序执行 WRITE ，但不执行 SAVE 。",{"type":597,"tag":807,"props":65212,"children":65213},{},[65214],{"type":603,"value":65215},"上次成功执行 SAVE 距今已经超过 1 秒，那么程序执行 WRITE 和 SAVE 。",{"type":597,"tag":606,"props":65217,"children":65218},{},[65219],{"type":603,"value":65220},"可以用流程图表示这四种情况：",{"type":597,"tag":606,"props":65222,"children":65223},{},[65224],{"type":597,"tag":719,"props":65225,"children":65227},{"alt":591,"src":65226},"/images/2019-09-02-redis-aof-rdb/graphviz-1b226a6d0f09ed1b61a30d899372834634b96504.svg",[],{"type":597,"tag":606,"props":65229,"children":65230},{},[65231],{"type":603,"value":65232},"根据以上说明可以知道， 在“每一秒钟保存一次”模式下， 如果在情况 1 中发生故障停机， 那么用户最多损失小于 2 秒内所产生的所有数据。",{"type":597,"tag":606,"props":65234,"children":65235},{},[65236],{"type":603,"value":65237},"如果在情况 2 中发生故障停机， 那么用户损失的数据是可以超过 2 秒的。",{"type":597,"tag":606,"props":65239,"children":65240},{},[65241],{"type":603,"value":65242},"Redis 官网上所说的， AOF 在“每一秒钟保存一次”时发生故障， 只丢失 1 秒钟数据的说法， 实际上并不准确。",{"type":597,"tag":1023,"props":65244,"children":65246},{"id":65245},"每执行一个命令保存一次",[65247],{"type":603,"value":65245},{"type":597,"tag":606,"props":65249,"children":65250},{},[65251],{"type":603,"value":65252},"在这种模式下，每次执行完一个命令之后， WRITE 和 SAVE 都会被执行。",{"type":597,"tag":606,"props":65254,"children":65255},{},[65256],{"type":603,"value":65257},"另外，因为 SAVE 是由 Redis 主进程执行的，所以在 SAVE 执行期间，主进程会被阻塞，不能接受命令请求。",{"type":597,"tag":598,"props":65259,"children":65261},{"id":65260},"aof-保存模式对性能和安全性的影响",[65262],{"type":603,"value":65263},"AOF 保存模式对性能和安全性的影响",{"type":597,"tag":606,"props":65265,"children":65266},{},[65267],{"type":603,"value":65268},"在上一个小节， 我们简短地描述了三种 AOF 保存模式的工作方式， 现在， 是时候研究一下这三个模式在安全性和性能方面的区别了。",{"type":597,"tag":606,"props":65270,"children":65271},{},[65272],{"type":603,"value":65273},"对于三种 AOF 保存模式， 它们对服务器主进程的阻塞情况如下：",{"type":597,"tag":803,"props":65275,"children":65276},{},[65277,65289,65301],{"type":597,"tag":807,"props":65278,"children":65279},{},[65280,65282,65287],{"type":603,"value":65281},"不保存（",{"type":597,"tag":629,"props":65283,"children":65285},{"className":65284},[],[65286],{"type":603,"value":65048},{"type":603,"value":65288},"）：写入和保存都由主进程执行，两个操作都会阻塞主进程。",{"type":597,"tag":807,"props":65290,"children":65291},{},[65292,65294,65299],{"type":603,"value":65293},"每一秒钟保存一次（",{"type":597,"tag":629,"props":65295,"children":65297},{"className":65296},[],[65298],{"type":603,"value":65059},{"type":603,"value":65300},"）：写入操作由主进程执行，阻塞主进程。保存操作由子线程执行，不直接阻塞主进程，但保存操作完成的快慢会影响写入操作的阻塞时长。",{"type":597,"tag":807,"props":65302,"children":65303},{},[65304,65306,65311],{"type":603,"value":65305},"每执行一个命令保存一次（",{"type":597,"tag":629,"props":65307,"children":65309},{"className":65308},[],[65310],{"type":603,"value":65070},{"type":603,"value":65312},"）：和模式 1 一样。",{"type":597,"tag":606,"props":65314,"children":65315},{},[65316],{"type":603,"value":65317},"因为阻塞操作会让 Redis 主进程无法持续处理请求， 所以一般说来， 阻塞操作执行得越少、完成得越快， Redis 的性能就越好。",{"type":597,"tag":606,"props":65319,"children":65320},{},[65321],{"type":603,"value":65322},"模式 1 的保存操作只会在AOF 关闭或 Redis 关闭时执行， 或者由操作系统触发， 在一般情况下， 这种模式只需要为写入阻塞， 因此它的写入性能要比后面两种模式要高， 当然， 这种性能的提高是以降低安全性为代价的： 在这种模式下， 如果运行的中途发生停机， 那么丢失数据的数量由操作系统的缓存冲洗策略决定。",{"type":597,"tag":606,"props":65324,"children":65325},{},[65326],{"type":603,"value":65327},"模式 2 在性能方面要优于模式 3 ， 并且在通常情况下， 这种模式最多丢失不多于 2 秒的数据， 所以它的安全性要高于模式 1 ， 这是一种兼顾性能和安全性的保存方案。",{"type":597,"tag":606,"props":65329,"children":65330},{},[65331],{"type":603,"value":65332},"模式 3 的安全性是最高的， 但性能也是最差的， 因为服务器必须阻塞直到命令信息被写入并保存到磁盘之后， 才能继续处理请求。",{"type":597,"tag":606,"props":65334,"children":65335},{},[65336],{"type":603,"value":65337},"综合起来，三种 AOF 模式的操作特性可以总结如下：",{"type":603,"value":65339},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":65341,"children":65342},{},[65343,65368],{"type":597,"tag":1941,"props":65344,"children":65345},{},[65346],{"type":597,"tag":1945,"props":65347,"children":65348},{},[65349,65353,65358,65363],{"type":597,"tag":1949,"props":65350,"children":65351},{},[65352],{"type":603,"value":31429},{"type":597,"tag":1949,"props":65354,"children":65355},{},[65356],{"type":603,"value":65357},"WRITE 是否阻塞？",{"type":597,"tag":1949,"props":65359,"children":65360},{},[65361],{"type":603,"value":65362},"SAVE 是否阻塞？",{"type":597,"tag":1949,"props":65364,"children":65365},{},[65366],{"type":603,"value":65367},"停机时丢失的数据量",{"type":597,"tag":1963,"props":65369,"children":65370},{},[65371,65396,65421],{"type":597,"tag":1945,"props":65372,"children":65373},{},[65374,65382,65387,65391],{"type":597,"tag":1970,"props":65375,"children":65376},{},[65377],{"type":597,"tag":629,"props":65378,"children":65380},{"className":65379},[],[65381],{"type":603,"value":65048},{"type":597,"tag":1970,"props":65383,"children":65384},{},[65385],{"type":603,"value":65386},"阻塞",{"type":597,"tag":1970,"props":65388,"children":65389},{},[65390],{"type":603,"value":65386},{"type":597,"tag":1970,"props":65392,"children":65393},{},[65394],{"type":603,"value":65395},"操作系统最后一次对 AOF 文件触发 SAVE 操作之后的数据。",{"type":597,"tag":1945,"props":65397,"children":65398},{},[65399,65407,65411,65416],{"type":597,"tag":1970,"props":65400,"children":65401},{},[65402],{"type":597,"tag":629,"props":65403,"children":65405},{"className":65404},[],[65406],{"type":603,"value":65059},{"type":597,"tag":1970,"props":65408,"children":65409},{},[65410],{"type":603,"value":65386},{"type":597,"tag":1970,"props":65412,"children":65413},{},[65414],{"type":603,"value":65415},"不阻塞",{"type":597,"tag":1970,"props":65417,"children":65418},{},[65419],{"type":603,"value":65420},"一般情况下不超过 2 秒钟的数据。",{"type":597,"tag":1945,"props":65422,"children":65423},{},[65424,65432,65436,65440],{"type":597,"tag":1970,"props":65425,"children":65426},{},[65427],{"type":597,"tag":629,"props":65428,"children":65430},{"className":65429},[],[65431],{"type":603,"value":65070},{"type":597,"tag":1970,"props":65433,"children":65434},{},[65435],{"type":603,"value":65386},{"type":597,"tag":1970,"props":65437,"children":65438},{},[65439],{"type":603,"value":65386},{"type":597,"tag":1970,"props":65441,"children":65442},{},[65443],{"type":603,"value":65444},"最多只丢失一个命令的数据。",{"type":597,"tag":598,"props":65446,"children":65448},{"id":65447},"aof-文件的读取和数据还原",[65449],{"type":603,"value":65450},"AOF 文件的读取和数据还原",{"type":597,"tag":606,"props":65452,"children":65453},{},[65454],{"type":603,"value":65455},"AOF 文件保存了 Redis 的数据库状态， 而文件里面包含的都是符合 Redis 通讯协议格式的命令文本。",{"type":597,"tag":606,"props":65457,"children":65458},{},[65459],{"type":603,"value":65460},"这也就是说， 只要根据 AOF 文件里的协议， 重新执行一遍里面指示的所有命令， 就可以还原 Redis 的数据库状态了。",{"type":597,"tag":606,"props":65462,"children":65463},{},[65464],{"type":603,"value":65465},"Redis 读取 AOF 文件并还原数据库的详细步骤如下：",{"type":597,"tag":803,"props":65467,"children":65468},{},[65469,65474,65479,65484],{"type":597,"tag":807,"props":65470,"children":65471},{},[65472],{"type":603,"value":65473},"创建一个不带网络连接的伪客户端（fake client）。",{"type":597,"tag":807,"props":65475,"children":65476},{},[65477],{"type":603,"value":65478},"读取 AOF 所保存的文本，并根据内容还原出命令、命令的参数以及命令的个数。",{"type":597,"tag":807,"props":65480,"children":65481},{},[65482],{"type":603,"value":65483},"根据命令、命令的参数和命令的个数，使用伪客户端执行该命令。",{"type":597,"tag":807,"props":65485,"children":65486},{},[65487],{"type":603,"value":65488},"执行 2 和 3 ，直到 AOF 文件中的所有命令执行完毕。",{"type":597,"tag":606,"props":65490,"children":65491},{},[65492],{"type":603,"value":65493},"完成第 4 步之后， AOF 文件所保存的数据库就会被完整地还原出来。",{"type":597,"tag":606,"props":65495,"children":65496},{},[65497],{"type":603,"value":65498},"注意， 因为 Redis 的命令只能在客户端的上下文中被执行， 而 AOF 还原时所使用的命令来自于 AOF 文件， 而不是网络， 所以程序使用了一个没有网络连接的伪客户端来执行命令。 伪客户端执行命令的效果， 和带网络连接的客户端执行命令的效果， 完全一样。",{"type":597,"tag":606,"props":65500,"children":65501},{},[65502],{"type":603,"value":65503},"整个读取和还原过程可以用以下伪代码表示：",{"type":597,"tag":621,"props":65505,"children":65507},{"code":65506},"def READ_AND_LOAD_AOF():\n\n    # 打开并读取 AOF 文件\n    file = open(aof_file_name)\n    while file.is_not_reach_eof():\n\n        # 读入一条协议文本格式的 Redis 命令\n        cmd_in_text = file.read_next_command_in_protocol_format()\n\n        # 根据文本命令，查找命令函数，并创建参数和参数个数等对象\n        cmd, argv, argc = text_to_command(cmd_in_text)\n\n        # 执行命令\n        execRedisCommand(cmd, argv, argc)\n\n    # 关闭文件\n    file.close()\n",[65508],{"type":597,"tag":629,"props":65509,"children":65510},{"__ignoreMap":591},[65511],{"type":603,"value":65506},{"type":597,"tag":606,"props":65513,"children":65514},{},[65515],{"type":603,"value":65516},"作为例子， 以下是一个简短的 AOF 文件的内容：",{"type":597,"tag":621,"props":65518,"children":65520},{"code":65519},"*2\n$6\nSELECT\n$1\n0\n*3\n$3\nSET\n$3\nkey\n$5\nvalue\n*8\n$5\nRPUSH\n$4\nlist\n$1\n1\n$1\n2\n$1\n3\n$1\n4\n$1\n5\n$1\n6\n",[65521],{"type":597,"tag":629,"props":65522,"children":65523},{"__ignoreMap":591},[65524],{"type":603,"value":65519},{"type":597,"tag":606,"props":65526,"children":65527},{},[65528,65530,65536,65538,65543],{"type":603,"value":65529},"当程序读入这个 AOF 文件时， 它首先执行 ",{"type":597,"tag":629,"props":65531,"children":65533},{"className":65532},[],[65534],{"type":603,"value":65535},"SELECT 0",{"type":603,"value":65537}," 命令 —— 这个 ",{"type":597,"tag":629,"props":65539,"children":65541},{"className":65540},[],[65542],{"type":603,"value":64681},{"type":603,"value":65544}," 命令是由 AOF 写入程序自动生成的， 它确保程序可以将数据还原到正确的数据库上。",{"type":597,"tag":606,"props":65546,"children":65547},{},[65548,65550,65556,65557,65563,65565,65571,65572,65578],{"type":603,"value":65549},"然后执行后面的 ",{"type":597,"tag":629,"props":65551,"children":65553},{"className":65552},[],[65554],{"type":603,"value":65555},"SET key value",{"type":603,"value":13757},{"type":597,"tag":629,"props":65558,"children":65560},{"className":65559},[],[65561],{"type":603,"value":65562},"RPUSH 1 2 3 4",{"type":603,"value":65564}," 命令， 还原 ",{"type":597,"tag":629,"props":65566,"children":65568},{"className":65567},[],[65569],{"type":603,"value":65570},"key",{"type":603,"value":13757},{"type":597,"tag":629,"props":65573,"children":65575},{"className":65574},[],[65576],{"type":603,"value":65577},"list",{"type":603,"value":65579}," 两个键的数据。",{"type":597,"tag":606,"props":65581,"children":65582},{},[65583],{"type":603,"value":65584},"为了避免对数据的完整性产生影响， 在服务器载入数据的过程中， 只有和数据库无关的订阅与发布功能可以正常使用， 其他命令一律返回错误。",{"type":597,"tag":598,"props":65586,"children":65588},{"id":65587},"aof-重写",[65589],{"type":603,"value":65590},"AOF 重写",{"type":597,"tag":606,"props":65592,"children":65593},{},[65594],{"type":603,"value":65595},"AOF 文件通过同步 Redis 服务器所执行的命令， 从而实现了数据库状态的记录， 但是， 这种同步方式会造成一个问题： 随着运行时间的流逝， AOF 文件会变得越来越大。",{"type":597,"tag":606,"props":65597,"children":65598},{},[65599],{"type":603,"value":65600},"举个例子， 如果服务器执行了以下命令：",{"type":597,"tag":621,"props":65602,"children":65604},{"code":65603},"RPUSH list 1 2 3 4      // [1, 2, 3, 4]\n\nRPOP list               // [1, 2, 3]\n\nLPOP list               // [2, 3]\n\nLPUSH list 1            // [1, 2, 3]\n",[65605],{"type":597,"tag":629,"props":65606,"children":65607},{"__ignoreMap":591},[65608],{"type":603,"value":65603},{"type":597,"tag":606,"props":65610,"children":65611},{},[65612,65614,65619],{"type":603,"value":65613},"那么光是记录 ",{"type":597,"tag":629,"props":65615,"children":65617},{"className":65616},[],[65618],{"type":603,"value":65577},{"type":603,"value":65620}," 键的状态， AOF 文件就需要保存四条命令。",{"type":597,"tag":606,"props":65622,"children":65623},{},[65624],{"type":603,"value":65625},"另一方面， 有些被频繁操作的键， 对它们所调用的命令可能有成百上千、甚至上万条， 如果这样被频繁操作的键有很多的话， AOF 文件的体积就会急速膨胀， 对 Redis 、甚至整个系统的造成影响。",{"type":597,"tag":606,"props":65627,"children":65628},{},[65629],{"type":603,"value":65630},"为了解决以上的问题， Redis 需要对 AOF 文件进行重写（rewrite）： 创建一个新的 AOF 文件来代替原有的 AOF 文件， 新 AOF 文件和原有 AOF 文件保存的数据库状态完全一样， 但新 AOF 文件的体积小于等于原有 AOF 文件的体积。",{"type":597,"tag":606,"props":65632,"children":65633},{},[65634],{"type":603,"value":65635},"以下就来介绍 AOF 重写的实现方式。",{"type":597,"tag":598,"props":65637,"children":65639},{"id":65638},"aof-重写的实现",[65640],{"type":603,"value":65641},"AOF 重写的实现",{"type":597,"tag":606,"props":65643,"children":65644},{},[65645],{"type":603,"value":65646},"所谓的“重写”其实是一个有歧义的词语， 实际上， AOF 重写并不需要对原有的 AOF 文件进行任何写入和读取， 它针对的是数据库中键的当前值。",{"type":597,"tag":606,"props":65648,"children":65649},{},[65650,65652,65657],{"type":603,"value":65651},"考虑这样一个情况， 如果服务器对键 ",{"type":597,"tag":629,"props":65653,"children":65655},{"className":65654},[],[65656],{"type":603,"value":65577},{"type":603,"value":65658}," 执行了以下四条命令：",{"type":597,"tag":621,"props":65660,"children":65661},{"code":65603},[65662],{"type":597,"tag":629,"props":65663,"children":65664},{"__ignoreMap":591},[65665],{"type":603,"value":65603},{"type":597,"tag":606,"props":65667,"children":65668},{},[65669,65671,65676,65678,65684],{"type":603,"value":65670},"那么当前列表键 ",{"type":597,"tag":629,"props":65672,"children":65674},{"className":65673},[],[65675],{"type":603,"value":65577},{"type":603,"value":65677}," 在数据库中的值就为 ",{"type":597,"tag":629,"props":65679,"children":65681},{"className":65680},[],[65682],{"type":603,"value":65683},"[1, 2, 3]",{"type":603,"value":19548},{"type":597,"tag":606,"props":65686,"children":65687},{},[65688,65690,65695,65697,65703],{"type":603,"value":65689},"如果我们要保存这个列表的当前状态， 并且尽量减少所使用的命令数， 那么最简单的方式不是去 AOF 文件上分析前面执行的四条命令， 而是直接读取 ",{"type":597,"tag":629,"props":65691,"children":65693},{"className":65692},[],[65694],{"type":603,"value":65577},{"type":603,"value":65696}," 键在数据库的当前值， 然后用一条 ",{"type":597,"tag":629,"props":65698,"children":65700},{"className":65699},[],[65701],{"type":603,"value":65702},"RPUSH 1 2 3",{"type":603,"value":65704}," 命令来代替前面的四条命令。",{"type":597,"tag":606,"props":65706,"children":65707},{},[65708,65710,65716],{"type":603,"value":65709},"再考虑这样一个例子， 如果服务器对集合键 ",{"type":597,"tag":629,"props":65711,"children":65713},{"className":65712},[],[65714],{"type":603,"value":65715},"animal",{"type":603,"value":65717}," 执行了以下命令：",{"type":597,"tag":621,"props":65719,"children":65721},{"code":65720},"SADD animal cat                 // {cat}\n\nSADD animal dog panda tiger     // {cat, dog, panda, tiger}\n\nSREM animal cat                 // {dog, panda, tiger}\n\nSADD animal cat lion            // {cat, lion, dog, panda, tiger}\n",[65722],{"type":597,"tag":629,"props":65723,"children":65724},{"__ignoreMap":591},[65725],{"type":603,"value":65720},{"type":597,"tag":606,"props":65727,"children":65728},{},[65729,65731,65737,65739,65744],{"type":603,"value":65730},"那么使用一条 ",{"type":597,"tag":629,"props":65732,"children":65734},{"className":65733},[],[65735],{"type":603,"value":65736},"SADD animal cat lion dog panda tiger",{"type":603,"value":65738}," 命令， 就可以还原 ",{"type":597,"tag":629,"props":65740,"children":65742},{"className":65741},[],[65743],{"type":603,"value":65715},{"type":603,"value":65745}," 集合的状态， 这比之前的四条命令调用要大大减少。",{"type":597,"tag":606,"props":65747,"children":65748},{},[65749],{"type":603,"value":65750},"除了列表和集合之外， 字符串、有序集、哈希表等键也可以用类似的方法来保存状态， 并且保存这些状态所使用的命令数量， 比起之前建立这些键的状态所使用命令的数量要大大减少。",{"type":597,"tag":606,"props":65752,"children":65753},{},[65754],{"type":603,"value":65755},"根据键的类型， 使用适当的写入命令来重现键的当前值， 这就是 AOF 重写的实现原理。 整个重写过程可以用伪代码表示如下：",{"type":597,"tag":621,"props":65757,"children":65759},{"code":65758},"def AOF_REWRITE(tmp_tile_name):\n\n  f = create(tmp_tile_name)\n\n  # 遍历所有数据库\n  for db in redisServer.db:\n\n    # 如果数据库为空，那么跳过这个数据库\n    if db.is_empty(): continue\n\n    # 写入 SELECT 命令，用于切换数据库\n    f.write_command(\"SELECT \" + db.number)\n\n    # 遍历所有键\n    for key in db:\n\n      # 如果键带有过期时间，并且已经过期，那么跳过这个键\n      if key.have_expire_time() and key.is_expired(): continue\n\n      if key.type == String:\n\n        # 用 SET key value 命令来保存字符串键\n\n        value = get_value_from_string(key)\n\n        f.write_command(\"SET \" + key + value)\n\n      elif key.type == List:\n\n        # 用 RPUSH key item1 item2 ... itemN 命令来保存列表键\n\n        item1, item2, ..., itemN = get_item_from_list(key)\n\n        f.write_command(\"RPUSH \" + key + item1 + item2 + ... + itemN)\n\n      elif key.type == Set:\n\n        # 用 SADD key member1 member2 ... memberN 命令来保存集合键\n\n        member1, member2, ..., memberN = get_member_from_set(key)\n\n        f.write_command(\"SADD \" + key + member1 + member2 + ... + memberN)\n\n      elif key.type == Hash:\n\n        # 用 HMSET key field1 value1 field2 value2 ... fieldN valueN 命令来保存哈希键\n\n        field1, value1, field2, value2, ..., fieldN, valueN =\\\n        get_field_and_value_from_hash(key)\n\n        f.write_command(\"HMSET \" + key + field1 + value1 + field2 + value2 +\\\n                        ... + fieldN + valueN)\n\n      elif key.type == SortedSet:\n\n        # 用 ZADD key score1 member1 score2 member2 ... scoreN memberN\n        # 命令来保存有序集键\n\n        score1, member1, score2, member2, ..., scoreN, memberN = \\\n        get_score_and_member_from_sorted_set(key)\n\n        f.write_command(\"ZADD \" + key + score1 + member1 + score2 + member2 +\\\n                        ... + scoreN + memberN)\n\n      else:\n\n        raise_type_error()\n\n      # 如果键带有过期时间，那么用 EXPIREAT key time 命令来保存键的过期时间\n      if key.have_expire_time():\n        f.write_command(\"EXPIREAT \" + key + key.expire_time_in_unix_timestamp())\n\n    # 关闭文件\n    f.close()\n",[65760],{"type":597,"tag":629,"props":65761,"children":65762},{"__ignoreMap":591},[65763],{"type":603,"value":65758},{"type":597,"tag":598,"props":65765,"children":65767},{"id":65766},"aof-后台重写",[65768],{"type":603,"value":65769},"AOF 后台重写",{"type":597,"tag":606,"props":65771,"children":65772},{},[65773],{"type":603,"value":65774},"上一节展示的 AOF 重写程序可以很好地完成创建一个新 AOF 文件的任务， 但是， 在执行这个程序的时候， 调用者线程会被阻塞。",{"type":597,"tag":606,"props":65776,"children":65777},{},[65778],{"type":603,"value":65779},"很明显， 作为一种辅佐性的维护手段， Redis 不希望 AOF 重写造成服务器无法处理请求， 所以 Redis 决定将 AOF 重写程序放到（后台）子进程里执行， 这样处理的最大好处是：",{"type":597,"tag":803,"props":65781,"children":65782},{},[65783,65788],{"type":597,"tag":807,"props":65784,"children":65785},{},[65786],{"type":603,"value":65787},"子进程进行 AOF 重写期间，主进程可以继续处理命令请求。",{"type":597,"tag":807,"props":65789,"children":65790},{},[65791],{"type":603,"value":65792},"子进程带有主进程的数据副本，使用子进程而不是线程，可以在避免锁的情况下，保证数据的安全性。",{"type":597,"tag":606,"props":65794,"children":65795},{},[65796],{"type":603,"value":65797},"不过， 使用子进程也有一个问题需要解决： 因为子进程在进行 AOF 重写期间， 主进程还需要继续处理命令， 而新的命令可能对现有的数据进行修改， 这会让当前数据库的数据和重写后的 AOF 文件中的数据不一致。",{"type":597,"tag":606,"props":65799,"children":65800},{},[65801],{"type":603,"value":65802},"为了解决这个问题， Redis 增加了一个 AOF 重写缓存， 这个缓存在 fork 出子进程之后开始启用， Redis 主进程在接到新的写命令之后， 除了会将这个写命令的协议内容追加到现有的 AOF 文件之外， 还会追加到这个缓存中：",{"type":597,"tag":606,"props":65804,"children":65805},{},[65806],{"type":597,"tag":719,"props":65807,"children":65809},{"alt":591,"src":65808},"/images/2019-09-02-redis-aof-rdb/graphviz-982033b83f571a133367a8830ee5cca84f6a08e5.svg",[],{"type":597,"tag":606,"props":65811,"children":65812},{},[65813],{"type":603,"value":65814},"换言之， 当子进程在执行 AOF 重写时， 主进程需要执行以下三个工作：",{"type":597,"tag":803,"props":65816,"children":65817},{},[65818,65823,65828],{"type":597,"tag":807,"props":65819,"children":65820},{},[65821],{"type":603,"value":65822},"处理命令请求。",{"type":597,"tag":807,"props":65824,"children":65825},{},[65826],{"type":603,"value":65827},"将写命令追加到现有的 AOF 文件中。",{"type":597,"tag":807,"props":65829,"children":65830},{},[65831],{"type":603,"value":65832},"将写命令追加到 AOF 重写缓存中。",{"type":597,"tag":606,"props":65834,"children":65835},{},[65836],{"type":603,"value":65837},"这样一来可以保证：",{"type":597,"tag":803,"props":65839,"children":65840},{},[65841,65846],{"type":597,"tag":807,"props":65842,"children":65843},{},[65844],{"type":603,"value":65845},"现有的 AOF 功能会继续执行，即使在 AOF 重写期间发生停机，也不会有任何数据丢失。",{"type":597,"tag":807,"props":65847,"children":65848},{},[65849],{"type":603,"value":65850},"所有对数据库进行修改的命令都会被记录到 AOF 重写缓存中。",{"type":597,"tag":606,"props":65852,"children":65853},{},[65854],{"type":603,"value":65855},"当子进程完成 AOF 重写之后， 它会向父进程发送一个完成信号， 父进程在接到完成信号之后， 会调用一个信号处理函数， 并完成以下工作：",{"type":597,"tag":803,"props":65857,"children":65858},{},[65859,65864],{"type":597,"tag":807,"props":65860,"children":65861},{},[65862],{"type":603,"value":65863},"将 AOF 重写缓存中的内容全部写入到新 AOF 文件中。",{"type":597,"tag":807,"props":65865,"children":65866},{},[65867],{"type":603,"value":65868},"对新的 AOF 文件进行改名，覆盖原有的 AOF 文件。",{"type":597,"tag":606,"props":65870,"children":65871},{},[65872],{"type":603,"value":65873},"当步骤 1 执行完毕之后， 现有 AOF 文件、新 AOF 文件和数据库三者的状态就完全一致了。",{"type":597,"tag":606,"props":65875,"children":65876},{},[65877],{"type":603,"value":65878},"当步骤 2 执行完毕之后， 程序就完成了新旧两个 AOF 文件的交替。",{"type":597,"tag":606,"props":65880,"children":65881},{},[65882],{"type":603,"value":65883},"这个信号处理函数执行完毕之后， 主进程就可以继续像往常一样接受命令请求了。 在整个 AOF 后台重写过程中， 只有最后的写入缓存和改名操作会造成主进程阻塞， 在其他时候， AOF 后台重写都不会对主进程造成阻塞， 这将 AOF 重写对性能造成的影响降到了最低。",{"type":597,"tag":606,"props":65885,"children":65886},{},[65887,65889,65896],{"type":603,"value":65888},"以上就是 AOF 后台重写， 也即是 ",{"type":597,"tag":886,"props":65890,"children":65893},{"href":65891,"rel":65892},"http://redis.readthedocs.org/en/latest/server/bgrewriteaof.html#bgrewriteaof",[890],[65894],{"type":603,"value":65895},"BGREWRITEAOF",{"type":603,"value":65897}," 命令的工作原理。",{"type":597,"tag":598,"props":65899,"children":65901},{"id":65900},"aof-后台重写的触发条件",[65902],{"type":603,"value":65903},"AOF 后台重写的触发条件",{"type":597,"tag":606,"props":65905,"children":65906},{},[65907,65909,65914],{"type":603,"value":65908},"AOF 重写可以由用户通过调用 ",{"type":597,"tag":886,"props":65910,"children":65912},{"href":65891,"rel":65911},[890],[65913],{"type":603,"value":65895},{"type":603,"value":65915}," 手动触发。",{"type":597,"tag":606,"props":65917,"children":65918},{},[65919],{"type":603,"value":65920},"另外， 服务器在 AOF 功能开启的情况下， 会维持以下三个变量：",{"type":597,"tag":1321,"props":65922,"children":65923},{},[65924,65936,65948],{"type":597,"tag":807,"props":65925,"children":65926},{},[65927,65929,65935],{"type":603,"value":65928},"记录当前 AOF 文件大小的变量 ",{"type":597,"tag":629,"props":65930,"children":65932},{"className":65931},[],[65933],{"type":603,"value":65934},"aof_current_size",{"type":603,"value":19548},{"type":597,"tag":807,"props":65937,"children":65938},{},[65939,65941,65947],{"type":603,"value":65940},"记录最后一次 AOF 重写之后， AOF 文件大小的变量 ",{"type":597,"tag":629,"props":65942,"children":65944},{"className":65943},[],[65945],{"type":603,"value":65946},"aof_rewrite_base_size",{"type":603,"value":19548},{"type":597,"tag":807,"props":65949,"children":65950},{},[65951,65953,65959],{"type":603,"value":65952},"增长百分比变量 ",{"type":597,"tag":629,"props":65954,"children":65956},{"className":65955},[],[65957],{"type":603,"value":65958},"aof_rewrite_perc",{"type":603,"value":19548},{"type":597,"tag":606,"props":65961,"children":65962},{},[65963,65965,65971],{"type":603,"value":65964},"每次当 ",{"type":597,"tag":629,"props":65966,"children":65968},{"className":65967},[],[65969],{"type":603,"value":65970},"serverCron",{"type":603,"value":65972}," 函数执行时， 它都会检查以下条件是否全部满足， 如果是的话， 就会触发自动的 AOF 重写：",{"type":597,"tag":803,"props":65974,"children":65975},{},[65976,65990,66001,66014],{"type":597,"tag":807,"props":65977,"children":65978},{},[65979,65981,65988],{"type":603,"value":65980},"没有 ",{"type":597,"tag":886,"props":65982,"children":65985},{"href":65983,"rel":65984},"http://redis.readthedocs.org/en/latest/server/bgsave.html#bgsave",[890],[65986],{"type":603,"value":65987},"BGSAVE",{"type":603,"value":65989}," 命令在进行。",{"type":597,"tag":807,"props":65991,"children":65992},{},[65993,65994,65999],{"type":603,"value":65980},{"type":597,"tag":886,"props":65995,"children":65997},{"href":65891,"rel":65996},[890],[65998],{"type":603,"value":65895},{"type":603,"value":66000}," 在进行。",{"type":597,"tag":807,"props":66002,"children":66003},{},[66004,66006,66012],{"type":603,"value":66005},"当前 AOF 文件大小大于 ",{"type":597,"tag":629,"props":66007,"children":66009},{"className":66008},[],[66010],{"type":603,"value":66011},"server.aof_rewrite_min_size",{"type":603,"value":66013}," （默认值为 1 MB）。",{"type":597,"tag":807,"props":66015,"children":66016},{},[66017],{"type":603,"value":66018},"当前 AOF 文件大小和最后一次 AOF 重写后的大小之间的比率大于等于指定的增长百分比。",{"type":597,"tag":606,"props":66020,"children":66021},{},[66022,66024,66030],{"type":603,"value":66023},"默认情况下， 增长百分比为 ",{"type":597,"tag":629,"props":66025,"children":66027},{"className":66026},[],[66028],{"type":603,"value":66029},"100%",{"type":603,"value":66031}," ， 也即是说， 如果前面三个条件都已经满足， 并且当前 AOF 文件大小比最后一次 AOF 重写时的大小要大一倍的话， 那么触发自动 AOF 重写。",{"type":597,"tag":598,"props":66033,"children":66035},{"id":66034},"小结",[66036],{"type":603,"value":66034},{"type":597,"tag":1321,"props":66038,"children":66039},{},[66040,66045,66050,66055,66060,66065],{"type":597,"tag":807,"props":66041,"children":66042},{},[66043],{"type":603,"value":66044},"AOF 文件通过保存所有修改数据库的命令来记录数据库的状态。",{"type":597,"tag":807,"props":66046,"children":66047},{},[66048],{"type":603,"value":66049},"AOF 文件中的所有命令都以 Redis 通讯协议的格式保存。",{"type":597,"tag":807,"props":66051,"children":66052},{},[66053],{"type":603,"value":66054},"不同的 AOF 保存模式对数据的安全性、以及 Redis 的性能有很大的影响。",{"type":597,"tag":807,"props":66056,"children":66057},{},[66058],{"type":603,"value":66059},"AOF 重写的目的是用更小的体积来保存数据库状态，整个重写过程基本上不影响 Redis 主进程处理命令请求。",{"type":597,"tag":807,"props":66061,"children":66062},{},[66063],{"type":603,"value":66064},"AOF 重写是一个有歧义的名字，实际的重写工作是针对数据库的当前值来进行的，程序既不读写、也不使用原有的 AOF 文件。",{"type":597,"tag":807,"props":66066,"children":66067},{},[66068],{"type":603,"value":66069},"AOF 可以由用户手动触发，也可以由服务器自动触发。",{"title":591,"searchDepth":787,"depth":787,"links":66071},[66072,66073,66074,66075,66076,66077,66078,66083,66084,66085,66086,66087,66088,66089],{"id":48237,"depth":1530,"text":48237},{"id":48252,"depth":1530,"text":48252},{"id":64617,"depth":787,"text":64620},{"id":64730,"depth":787,"text":64730},{"id":64854,"depth":787,"text":64854},{"id":64975,"depth":787,"text":64975},{"id":65028,"depth":787,"text":65031,"children":66079},[66080,66081,66082],{"id":65080,"depth":1530,"text":65080},{"id":65126,"depth":1530,"text":65126},{"id":65245,"depth":1530,"text":65245},{"id":65260,"depth":787,"text":65263},{"id":65447,"depth":787,"text":65450},{"id":65587,"depth":787,"text":65590},{"id":65638,"depth":787,"text":65641},{"id":65766,"depth":787,"text":65769},{"id":65900,"depth":787,"text":65903},{"id":66034,"depth":787,"text":66034},"content:tool:2019-09-02-redis-aof-rdb.md","tool/2019-09-02-redis-aof-rdb.md",{"_path":403,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":402,"description":66093,"body":66094,"_type":791,"_id":67226,"_source":793,"_file":67227,"_extension":795,"date":64501},"C#代码在编写后，是需要执行编译的，才能起效，这样如果在手机端，没有对应的编译环境，那么对应的c#代码就无法实现热更。ILRuntime实现的基础，也是基于AssetBundle的资源热更新方式，将需要热更新的c#代码打包成DLL，在每次完成资源打包后，对应的DLL会被作为资源热更新出去。这样就规避了编译相关的环节，实现了热更。",{"type":594,"children":66095,"toc":67217},[66096,66100,66106,66111,66123,66131,66136,66147,66154,66225,66230,66235,66258,66265,66270,66275,66290,66298,66306,66311,66317,66325,66331,66336,66341,66348,66353,66360,66365,66372,66377,66382,66389,66394,66401,66406,66413,66418,66424,66429,66434,66439,66444,66449,66456,66461,66467,66472,66479,66487,66494,66499,66506,66511,66518,66523,66530,66535,66542,66547,66554,66559,66566,66571,66577,66582,66587,66595,66600,66608,66613,66621,66626,66631,66638,66643,66650,66657,66662,66669,66674,66681,66686,66693,66698,66706,66711,66718,66723,66730,66742,66749,66754,66761,66766,66771,66778,66783,66791,66796,66803,66809,66814,66821,66826,66833,66838,66845,66850,66855,66862,66867,66872,66881,66887,66892,66899,66904,66909,66916,66921,66928,66933,66940,66945,66952,66957,66962,66968,66980,66996,67001,67009,67022,67030,67051,67056,67069,67077,67082,67086,67156,67160],{"type":597,"tag":606,"props":66097,"children":66098},{},[66099],{"type":603,"value":66093},{"type":597,"tag":857,"props":66101,"children":66103},{"id":66102},"appdomain",[66104],{"type":603,"value":66105},"AppDomain",{"type":597,"tag":606,"props":66107,"children":66108},{},[66109],{"type":603,"value":66110},"我们运行一个.NET应用程序或者一个运行库宿主时，OS会首先建立一个进程，然后会在进程中加载CLR(这个加载一般是通过调用_CorExeMain或者_CorBindToRuntimeEx方法来实现)，在加载CLR时会创建一个默认的AppDomain，它是CLR的运行单元，程序的Main方法就是在这里执行，这个默认的AppDomain是唯一且不能被卸载的，当该进程消灭时，默认AppDomain才会随之消失。",{"type":597,"tag":606,"props":66112,"children":66113},{},[66114,66116,66121],{"type":603,"value":66115},"一个进程中可以有多个AppDomain，且它们直接是相互隔离的，我们的Assembly是不能单独执行的，它必须被加载到某个AppDomain中，要想",{"type":597,"tag":1080,"props":66117,"children":66118},{},[66119],{"type":603,"value":66120},"卸载一个Assembly",{"type":603,"value":66122},"就只能卸载其AppDomain。",{"type":597,"tag":617,"props":66124,"children":66125},{},[66126],{"type":597,"tag":606,"props":66127,"children":66128},{},[66129],{"type":603,"value":66130},"无法删除WindowsApplication1: 访问被拒绝\n请确定磁盘末被写保护\n而且文件末被使用",{"type":597,"tag":606,"props":66132,"children":66133},{},[66134],{"type":603,"value":66135},"除非你关掉作业管理服务器，然后再操作，显然这样做是很不合理的。",{"type":597,"tag":606,"props":66137,"children":66138},{},[66139,66141,66146],{"type":603,"value":66140},"并且默认AppDomain是不能被卸载的，那么我们该怎么办呢，我想到的方法是动态的加载Assembly，新建一个AppDomain，让Assembly加载到这个新AppDomain中然后执行，当执行完后卸载这个新的AppDomain即可。核心思想就是：",{"type":597,"tag":1080,"props":66142,"children":66143},{},[66144],{"type":603,"value":66145},"如果程序集被加载到默认应用程序域中，则当进程运行时将无法从内存中卸载该程序集。但是，如果打开另一个应用程序域来加载和执行程序集，则卸载该应用程序域时也会同时卸载程序集。使用此技术最小化长时间运行的进程的工作集",{"type":603,"value":758},{"type":597,"tag":606,"props":66148,"children":66149},{},[66150],{"type":597,"tag":719,"props":66151,"children":66153},{"alt":719,"src":66152},"/images/2019-09-02-ilruntime/656520-20180525160300209-2123986426.png",[],{"type":597,"tag":803,"props":66155,"children":66156},{},[66157,66162,66167,66172,66177],{"type":597,"tag":807,"props":66158,"children":66159},{},[66160],{"type":603,"value":66161},"AppDomain vs 进程\nAppDomain被创建在进程中，一个进程内可以有多个AppDomain。一个AppDomain只能属于一个进程。",{"type":597,"tag":807,"props":66163,"children":66164},{},[66165],{"type":603,"value":66166},"AppDomain vs 线程\n其实两者本来没什么好对比的。AppDomain是个静态概念，只是限定了对象的边界；线程是个动态概念，它可以运行在不同的AppDomain。一个AppDomain内可以创建多个线程，但是不能限定这些线程只能在本AppDomain内执行代码。CLR中的System.Threading.Thread对象其实是个soft thread，它并不能被操作系统识别；操作系统能识别的是hard thread。一个soft thread只属于一个AppDomain，穿越AppDomain的是hard thread。当hard thread访问到某个AppDomain时,一个AppDomain就会为之产生一个soft thread。\nhard thread有thread local storage(TLS)，这个存储区被CLR用来存储这个hard thread当前对应AppDomain引用以及softthread引用。当一个hard thread穿越到另外一个AppDomain时，TLS中的这些引用也会改变。\n当然这个说法很可能是和CLR的实现相关的。",{"type":597,"tag":807,"props":66168,"children":66169},{},[66170],{"type":603,"value":66171},"AppDomain vs Assembly\nAssembly是.Net程序的基本部署单元，它可以为CLR提供用于识别类型的元数据等等。Assembly不能单独执行，它必须被加载到AppDomain中，然后由AppDomain创建程序集中的对象。一个Assembly可以被多个AppDomain加载，一个AppDomain可以加载多个Assembly。每个AppDomain引用到某个类型的时候需要把相应的assembly在各自的AppDomain中初始化。因此，每个AppDomain会单独保持一个类的静态变量。",{"type":597,"tag":807,"props":66173,"children":66174},{},[66175],{"type":603,"value":66176},"AppDomain vs 对象\n任何对象只能属于一个AppDomain。AppDomain用来隔离对象，不同AppDomain之间的对象必须通过Proxy(reference type)或者Clone(value type)通信。引用类型需要继承System.MarshalByRefObject才能被Marshal/UnMarshal(Proxy)。值类型需要设置Serializable属性才能被Marshal/UnMarshal(Clone)。",{"type":597,"tag":807,"props":66178,"children":66179},{},[66180,66182,66190,66193,66197,66200,66202],{"type":603,"value":66181},"AppDomain vs Assembly Code\nAppDomain和程序集的源代码是什么关系呢？每个程序集的代码会分别装载到各个AppDomain中？\n首先我们要把程序集分3类\n1.mscorlib，这是每个.net程序都要引用到的程序集。\n2.GAC，这个是强命名的公用程序集，可以被所有的.net程序引用。\n3.Assembly not in GAC，这是普通的assembly，可以不是强命名，不放到GAC中。\n启动CLR，进入entry point时可以设置LoaderOptimization属性：",{"type":597,"tag":621,"props":66183,"children":66185},{"code":66184},"[LoaderOptimization(LoaderOptimization.MultiDomain]\nstatic void Main()\n{...}\n",[66186],{"type":597,"tag":629,"props":66187,"children":66188},{"__ignoreMap":591},[66189],{"type":603,"value":66184},{"type":597,"tag":1595,"props":66191,"children":66192},{},[],{"type":597,"tag":719,"props":66194,"children":66196},{"alt":719,"src":66195},"/images/2019-09-02-ilruntime/20160504151602702.png",[],{"type":597,"tag":1595,"props":66198,"children":66199},{},[],{"type":603,"value":66201},"LoaderOptimization属性可以设置三个不同的枚举值，来设置针对前面说的三种程序集的代码存放以及访问方式。",{"type":597,"tag":1321,"props":66203,"children":66204},{},[66205,66210,66215],{"type":597,"tag":807,"props":66206,"children":66207},{},[66208],{"type":603,"value":66209},"SingleDomain，由于只启动一个AppDomain，那么code就被直接装载到了AppDomain中，访问静态变量更快捷。",{"type":597,"tag":807,"props":66211,"children":66212},{},[66213],{"type":603,"value":66214},"MultiDomain，所有的Assembly代码是进程级别的，因此所有的AppDomain只访问一份代码。这大大减少了程序占用的内存，但是由于程序集的静态变量仍然在各个AppDomain中，因此代码访问静态变量需要先得到AppDomain的引用再进行转换，速度会受到影响。",{"type":597,"tag":807,"props":66216,"children":66217},{},[66218,66220,66223],{"type":603,"value":66219},"MultiDomainHost，只有GAC代码是共享的，非GAC的Assembly依然会加载到被使用的AppDomain中，这样提高了静态变量的访问速度，当然也增加了程序占用的内存。",{"type":597,"tag":1595,"props":66221,"children":66222},{},[],{"type":603,"value":66224},"不管是哪种方式，mscorlib始终是process级别的，即只有一份mscorlib代码在内存中。",{"type":597,"tag":857,"props":66226,"children":66228},{"id":66227},"使用dll进行热更",[66229],{"type":603,"value":66227},{"type":597,"tag":606,"props":66231,"children":66232},{},[66233],{"type":603,"value":66234},"文章并不是完全的实现热更新,实现的是windows和android平台下，对于dll文件的热更新。对于IOS为什么不能热更新，我们后续会讨论到，先看看安卓和windows下 dll的热更新步骤。",{"type":597,"tag":1321,"props":66236,"children":66237},{},[66238,66243,66248,66253],{"type":597,"tag":807,"props":66239,"children":66240},{},[66241],{"type":603,"value":66242},"新建一个ClassLibrary（类库）的工程，在其中实现对应的类和方法；",{"type":597,"tag":807,"props":66244,"children":66245},{},[66246],{"type":603,"value":66247},"将该工程导出为DLL；",{"type":597,"tag":807,"props":66249,"children":66250},{},[66251],{"type":603,"value":66252},"将DLL改为bytes文件，存入Unity工程中的StreamingAssets文件夹下；",{"type":597,"tag":807,"props":66254,"children":66255},{},[66256],{"type":603,"value":66257},"在工程运行的时候，读取StreamingAssets下的Dll文件，用Assembly.Load(byte[] bytes )的方法，将DLL文件读取出来，进而执行相关的操作。这一步的代码为：",{"type":597,"tag":606,"props":66259,"children":66260},{},[66261],{"type":597,"tag":719,"props":66262,"children":66264},{"alt":719,"src":66263},"/images/2019-09-02-ilruntime/656520-20180525160707418-392942905.png",[],{"type":597,"tag":606,"props":66266,"children":66267},{},[66268],{"type":603,"value":66269},"unity工程在执行的时候，会构建一个默认的appDomain，Assembly.Load，其实就是在这个程序域上加载Dll,所以相关的实质和前面一个部分相差不大，这就是c#热更新在unity中的应用(IOS不包括)。",{"type":597,"tag":1023,"props":66271,"children":66273},{"id":66272},"ios不能基于以上热更的原因",[66274],{"type":603,"value":66272},{"type":597,"tag":606,"props":66276,"children":66277},{},[66278,66280,66288],{"type":603,"value":66279},"只要我们设定mono的编译模式为full-aot（比如打IOS安装包的时候），则在运行时试图使用JIT编译时，mono自身的JIT编译器就会禁止",{"type":597,"tag":1733,"props":66281,"children":66282},{},[66283],{"type":597,"tag":1080,"props":66284,"children":66285},{},[66286],{"type":603,"value":66287},"生成新的代码",{"type":603,"value":66289},"(不要混淆Reflection.Emit和反射)这种行为进而报告这个异常。JIT编译的过程根本还没开始，就被自己扼杀了。",{"type":597,"tag":606,"props":66291,"children":66292},{},[66293],{"type":597,"tag":1080,"props":66294,"children":66295},{},[66296],{"type":603,"value":66297},"JIT——just in time，即时编译。",{"type":597,"tag":617,"props":66299,"children":66300},{},[66301],{"type":597,"tag":606,"props":66302,"children":66303},{},[66304],{"type":603,"value":66305},"一个程序在它运行的时候创建并且运行了全新的代码，而并非那些最初作为这个程序的一部分保存在硬盘上的固有的代码。就叫JIT。",{"type":597,"tag":606,"props":66307,"children":66308},{},[66309],{"type":603,"value":66310},"IOS并非把JIT禁止了。或者换个句式讲，IOS封了内存（或者堆）的可执行权限，相当于变相的封锁了JIT这种编译方式。",{"type":597,"tag":857,"props":66312,"children":66314},{"id":66313},"ilruntime",[66315],{"type":603,"value":66316},"ILRuntime",{"type":597,"tag":617,"props":66318,"children":66319},{},[66320],{"type":597,"tag":606,"props":66321,"children":66322},{},[66323],{"type":603,"value":66324},"ILRuntime借助Mono.Cecil库来读取DLL的PE信息，以及当中类型的所有信息，最终得到方法的IL汇编码，然后通过内置的IL解译执行虚拟机来执行DLL中的代码",{"type":597,"tag":1023,"props":66326,"children":66328},{"id":66327},"借助monoceil库来读取dll的pe信息以及当中类型的所有信息",[66329],{"type":603,"value":66330},"借助Mono.Ceil库来读取DLL的PE信息以及当中类型的所有信息",{"type":597,"tag":606,"props":66332,"children":66333},{},[66334],{"type":603,"value":66335},"这一步是如何实现的，跟随源代码做一个详细的跟踪。",{"type":597,"tag":606,"props":66337,"children":66338},{},[66339],{"type":603,"value":66340},"首先，是构建一个全局的appDomain(这儿不是程序域的意思，只是取其名字意思来表示)",{"type":597,"tag":606,"props":66342,"children":66343},{},[66344],{"type":597,"tag":719,"props":66345,"children":66347},{"alt":719,"src":66346},"/images/2019-09-02-ilruntime/656520-20180525183908084-111024744.png",[],{"type":597,"tag":606,"props":66349,"children":66350},{},[66351],{"type":603,"value":66352},"基于WWW的方式加载AssetBundle或者DLL/PDB后，接下来是将其封入到MemoryStream中，将dll和pdb的bytes都存入到内存流中后，执行其内部实现的LoadAssembly方法。",{"type":597,"tag":606,"props":66354,"children":66355},{},[66356],{"type":597,"tag":719,"props":66357,"children":66359},{"alt":719,"src":66358},"/images/2019-09-02-ilruntime/656520-20180525183929820-235902445.png",[],{"type":597,"tag":606,"props":66361,"children":66362},{},[66363],{"type":603,"value":66364},"关键的是第一行，从Mono中加载模块：",{"type":597,"tag":606,"props":66366,"children":66367},{},[66368],{"type":597,"tag":719,"props":66369,"children":66371},{"alt":719,"src":66370},"/images/2019-09-02-ilruntime/656520-20180525183948767-1521954007.png",[],{"type":597,"tag":606,"props":66373,"children":66374},{},[66375],{"type":603,"value":66376},"进一步跟踪：",{"type":597,"tag":606,"props":66378,"children":66379},{},[66380],{"type":603,"value":66381},"ReadImageFrom的操作：",{"type":597,"tag":606,"props":66383,"children":66384},{},[66385],{"type":597,"tag":719,"props":66386,"children":66388},{"alt":719,"src":66387},"/images/2019-09-02-ilruntime/656520-20180525184006047-408828631.png",[],{"type":597,"tag":606,"props":66390,"children":66391},{},[66392],{"type":603,"value":66393},"其中ImageReader最终来自BinaryReader:",{"type":597,"tag":606,"props":66395,"children":66396},{},[66397],{"type":597,"tag":719,"props":66398,"children":66400},{"alt":719,"src":66399},"/images/2019-09-02-ilruntime/656520-20180525184022207-1494733614.png",[],{"type":597,"tag":606,"props":66402,"children":66403},{},[66404],{"type":603,"value":66405},"那么接下来的ReadImage操作：",{"type":597,"tag":606,"props":66407,"children":66408},{},[66409],{"type":597,"tag":719,"props":66410,"children":66412},{"alt":719,"src":66411},"/images/2019-09-02-ilruntime/656520-20180525184038682-930110102.png",[],{"type":597,"tag":606,"props":66414,"children":66415},{},[66416],{"type":603,"value":66417},"这四个操作，是最核心的操作，分别读取DLL的PE的各个信息，这样我们就进入下一个步骤。",{"type":597,"tag":1023,"props":66419,"children":66421},{"id":66420},"最终得到方法的il汇编码",[66422],{"type":603,"value":66423},"最终得到方法的IL汇编码",{"type":597,"tag":606,"props":66425,"children":66426},{},[66427],{"type":603,"value":66428},"让我们分拆来看看这几个读取函数的实现",{"type":597,"tag":606,"props":66430,"children":66431},{},[66432],{"type":603,"value":66433},"1）ReadOptionalHeaders",{"type":597,"tag":606,"props":66435,"children":66436},{},[66437],{"type":603,"value":66438},"主要读取PE的相关信息，不做过多解释，可以参看源码阅读理解；",{"type":597,"tag":606,"props":66440,"children":66441},{},[66442],{"type":603,"value":66443},"2）ReadSections",{"type":597,"tag":606,"props":66445,"children":66446},{},[66447],{"type":603,"value":66448},"读取分块数据",{"type":597,"tag":606,"props":66450,"children":66451},{},[66452],{"type":597,"tag":719,"props":66453,"children":66455},{"alt":719,"src":66454},"/images/2019-09-02-ilruntime/656520-20180525184056941-656677137.png",[],{"type":597,"tag":606,"props":66457,"children":66458},{},[66459],{"type":603,"value":66460},"封装一个Section，然后去执行读取，然后赋值给section的Data，注意回退了Index",{"type":597,"tag":1023,"props":66462,"children":66464},{"id":66463},"readcliheader",[66465],{"type":603,"value":66466},"ReadCLIHeader",{"type":597,"tag":606,"props":66468,"children":66469},{},[66470],{"type":603,"value":66471},"这步比较简单",{"type":597,"tag":606,"props":66473,"children":66474},{},[66475],{"type":597,"tag":719,"props":66476,"children":66478},{"alt":719,"src":66477},"/images/2019-09-02-ilruntime/656520-20180525184110212-726126206.png",[],{"type":597,"tag":803,"props":66480,"children":66481},{},[66482],{"type":597,"tag":807,"props":66483,"children":66484},{},[66485],{"type":603,"value":66486},"ReadMetadata",{"type":597,"tag":606,"props":66488,"children":66489},{},[66490],{"type":597,"tag":719,"props":66491,"children":66493},{"alt":719,"src":66492},"/images/2019-09-02-ilruntime/656520-20180525184136211-1306602825.png",[],{"type":597,"tag":606,"props":66495,"children":66496},{},[66497],{"type":603,"value":66498},"核心是两个操作，一个是ReadMetadataStream，就是根据不同的标识符来新建不同的存储结构；一个是ReadTableHeap:",{"type":597,"tag":606,"props":66500,"children":66501},{},[66502],{"type":597,"tag":719,"props":66503,"children":66505},{"alt":719,"src":66504},"/images/2019-09-02-ilruntime/656520-20180525184150898-1035213362.png",[],{"type":597,"tag":606,"props":66507,"children":66508},{},[66509],{"type":603,"value":66510},"初始化heap中的Table后，进行一次Compute，获取size:",{"type":597,"tag":606,"props":66512,"children":66513},{},[66514],{"type":597,"tag":719,"props":66515,"children":66517},{"alt":719,"src":66516},"/images/2019-09-02-ilruntime/656520-20180525184214923-1218850507.png",[],{"type":597,"tag":606,"props":66519,"children":66520},{},[66521],{"type":603,"value":66522},"然后填充size:",{"type":597,"tag":606,"props":66524,"children":66525},{},[66526],{"type":597,"tag":719,"props":66527,"children":66529},{"alt":719,"src":66528},"/images/2019-09-02-ilruntime/v2-07369c744923a79035a3729bbc488943_hd.jpg",[],{"type":597,"tag":606,"props":66531,"children":66532},{},[66533],{"type":603,"value":66534},"基于这四步操作，我们可以将IL的汇编码存储到Image中，然后进一步执行后续的CreateModule操作:",{"type":597,"tag":606,"props":66536,"children":66537},{},[66538],{"type":597,"tag":719,"props":66539,"children":66541},{"alt":719,"src":66540},"/images/2019-09-02-ilruntime/v2-0a604dfba776c9c99f2e72627724c340_hd.jpg",[],{"type":597,"tag":606,"props":66543,"children":66544},{},[66545],{"type":603,"value":66546},"具体到，就是：",{"type":597,"tag":606,"props":66548,"children":66549},{},[66550],{"type":597,"tag":719,"props":66551,"children":66553},{"alt":719,"src":66552},"/images/2019-09-02-ilruntime/v2-b252bba4e6d01e512c2305c5c7b355c5_hd.jpg",[],{"type":597,"tag":606,"props":66555,"children":66556},{},[66557],{"type":603,"value":66558},"其中的ReadModule为：",{"type":597,"tag":606,"props":66560,"children":66561},{},[66562],{"type":597,"tag":719,"props":66563,"children":66565},{"alt":719,"src":66564},"/images/2019-09-02-ilruntime/v2-32399e9573a7779ecbf82743b30fc184_hd.jpg",[],{"type":597,"tag":606,"props":66567,"children":66568},{},[66569],{"type":603,"value":66570},"具体的读取manifest和Module内部数据，可以参看源码。",{"type":597,"tag":1023,"props":66572,"children":66574},{"id":66573},"基于loadedtypes来实现反射方法的调用",[66575],{"type":603,"value":66576},"基于LoadedTypes来实现反射方法的调用",{"type":597,"tag":606,"props":66578,"children":66579},{},[66580],{"type":603,"value":66581},"在ILRuntime中，不能基于System.Type来直接获取热更新DLL中的类，只有基于唯一的appDomain实例，基于LoadedTypes这种来获取热更新中的DLL，基于代码来分析，更为详细：",{"type":597,"tag":606,"props":66583,"children":66584},{},[66585],{"type":603,"value":66586},"首先，加载获取该DLL中的指定类：",{"type":597,"tag":621,"props":66588,"children":66590},{"code":66589},"var it = appDomain.LoadedTypes[\"HotFix_Project.InstanceClass\"]\n",[66591],{"type":597,"tag":629,"props":66592,"children":66593},{"__ignoreMap":591},[66594],{"type":603,"value":66589},{"type":597,"tag":606,"props":66596,"children":66597},{},[66598],{"type":603,"value":66599},"跟踪LoadedTypes：",{"type":597,"tag":621,"props":66601,"children":66603},{"code":66602},"public Dictionary\u003Cstring, IType> LoadedTypes{get{return mapType.InnerDictionary;}}\n",[66604],{"type":597,"tag":629,"props":66605,"children":66606},{"__ignoreMap":591},[66607],{"type":603,"value":66602},{"type":597,"tag":606,"props":66609,"children":66610},{},[66611],{"type":603,"value":66612},"跟踪看mapType.InnerDictionary:",{"type":597,"tag":621,"props":66614,"children":66616},{"code":66615},"ThreadSafeDictionary\u003Cstring, IType> mapType = new ThreadSafeDictionary\u003Cstring, IType>();\n",[66617],{"type":597,"tag":629,"props":66618,"children":66619},{"__ignoreMap":591},[66620],{"type":603,"value":66615},{"type":597,"tag":606,"props":66622,"children":66623},{},[66624],{"type":603,"value":66625},"这个mapType是什么时候装配的？",{"type":597,"tag":606,"props":66627,"children":66628},{},[66629],{"type":603,"value":66630},"来自于文章二中的LoadAssembly的后续操作：",{"type":597,"tag":606,"props":66632,"children":66633},{},[66634],{"type":597,"tag":719,"props":66635,"children":66637},{"alt":719,"src":66636},"/images/2019-09-02-ilruntime/656520-20180528144431337-1618869539.png",[],{"type":597,"tag":606,"props":66639,"children":66640},{},[66641],{"type":603,"value":66642},"那么这个module.GetTypes是如何操作的？",{"type":597,"tag":606,"props":66644,"children":66645},{},[66646],{"type":597,"tag":719,"props":66647,"children":66649},{"alt":719,"src":66648},"/images/2019-09-02-ilruntime/656520-20180528144453022-436088052.png",[],{"type":597,"tag":606,"props":66651,"children":66652},{},[66653],{"type":597,"tag":719,"props":66654,"children":66656},{"alt":719,"src":66655},"/images/2019-09-02-ilruntime/656520-20180528144501605-1680011964.png",[],{"type":597,"tag":606,"props":66658,"children":66659},{},[66660],{"type":603,"value":66661},"分别基于协程来return type以及其nestedTypes，关键是看Types是怎么获取的：",{"type":597,"tag":606,"props":66663,"children":66664},{},[66665],{"type":597,"tag":719,"props":66666,"children":66668},{"alt":719,"src":66667},"/images/2019-09-02-ilruntime/656520-20180528144515817-1301453461.png",[],{"type":597,"tag":606,"props":66670,"children":66671},{},[66672],{"type":603,"value":66673},"关键是read操作：",{"type":597,"tag":606,"props":66675,"children":66676},{},[66677],{"type":597,"tag":719,"props":66678,"children":66680},{"alt":719,"src":66679},"/images/2019-09-02-ilruntime/656520-20180528144530095-1073548484.png",[],{"type":597,"tag":606,"props":66682,"children":66683},{},[66684],{"type":603,"value":66685},"继续跟进Read操作：",{"type":597,"tag":606,"props":66687,"children":66688},{},[66689],{"type":597,"tag":719,"props":66690,"children":66692},{"alt":719,"src":66691},"/images/2019-09-02-ilruntime/656520-20180528144543549-1339229040.png",[],{"type":597,"tag":606,"props":66694,"children":66695},{},[66696],{"type":603,"value":66697},"关键是：",{"type":597,"tag":621,"props":66699,"children":66701},{"code":66700},"var mtypes = metadata.Types\n",[66702],{"type":597,"tag":629,"props":66703,"children":66704},{"__ignoreMap":591},[66705],{"type":603,"value":66700},{"type":597,"tag":606,"props":66707,"children":66708},{},[66709],{"type":603,"value":66710},"后续都是对其的封装和填充，对于metadata的填充，来自于InitializeTypeDefinitions这个操作：",{"type":597,"tag":606,"props":66712,"children":66713},{},[66714],{"type":597,"tag":719,"props":66715,"children":66717},{"alt":719,"src":66716},"/images/2019-09-02-ilruntime/656520-20180528144611448-160157189.png",[],{"type":597,"tag":606,"props":66719,"children":66720},{},[66721],{"type":603,"value":66722},"关键操作是ReadType这个操作：",{"type":597,"tag":606,"props":66724,"children":66725},{},[66726],{"type":597,"tag":719,"props":66727,"children":66729},{"alt":719,"src":66728},"/images/2019-09-02-ilruntime/656520-20180528144626456-2070945940.png",[],{"type":597,"tag":606,"props":66731,"children":66732},{},[66733,66735,66740],{"type":603,"value":66734},"构建一个内部定义的类，然后做数据填充，看看关键的几个属性的设置：BaseType ,设置其父类型，fields",{"type":597,"tag":1733,"props":66736,"children":66737},{},[66738],{"type":603,"value":66739},"range/methods_range",{"type":603,"value":66741}," 是对属性范围和方法范围的设置：",{"type":597,"tag":606,"props":66743,"children":66744},{},[66745],{"type":597,"tag":719,"props":66746,"children":66748},{"alt":719,"src":66747},"/images/2019-09-02-ilruntime/656520-20180528144639749-1842647497.png",[],{"type":597,"tag":606,"props":66750,"children":66751},{},[66752],{"type":603,"value":66753},"所以基本方法还是ReadListRange:",{"type":597,"tag":606,"props":66755,"children":66756},{},[66757],{"type":597,"tag":719,"props":66758,"children":66760},{"alt":719,"src":66759},"/images/2019-09-02-ilruntime/656520-20180528144651716-2020934616.png",[],{"type":597,"tag":606,"props":66762,"children":66763},{},[66764],{"type":603,"value":66765},"在这儿，我们最终回到了文章二中对于IL虚拟机中的tableHeap的引用，最后实现了和文章二的首尾呼应。",{"type":597,"tag":606,"props":66767,"children":66768},{},[66769],{"type":603,"value":66770},"好了，收起思绪，回到最开始的，获取类，这样获得的一个类，这样得到的一个类，继承自IType，在Unity主工程中，则需要System.Type才能继续使用反射接口，其对于的封装来自昱这个ILType封装的ReflectionType， 其中的ILRuntimeType继承自Type类：",{"type":597,"tag":606,"props":66772,"children":66773},{},[66774],{"type":597,"tag":719,"props":66775,"children":66777},{"alt":719,"src":66776},"/images/2019-09-02-ilruntime/656520-20180528144705308-507336274.png",[],{"type":597,"tag":606,"props":66779,"children":66780},{},[66781],{"type":603,"value":66782},"基于其，可以直接调用System.Type的GetConstructor方法，构建实例，归并几个代码，可以表示为（直接使用的实例源代码）：",{"type":597,"tag":621,"props":66784,"children":66786},{"code":66785},"var it = appDomain.LoadedTypes[\"HotFix_Project.InstanceClass\"];\nvar type = it.ReflectionType;\nvar ctor = type.GetConstructor(new System.Type[0]);\nvar obj = ctor.Invoke(null);\n",[66787],{"type":597,"tag":629,"props":66788,"children":66789},{"__ignoreMap":591},[66790],{"type":603,"value":66785},{"type":597,"tag":606,"props":66792,"children":66793},{},[66794],{"type":603,"value":66795},"对应可以得到DLL中该类的构造函数的调用：",{"type":597,"tag":606,"props":66797,"children":66798},{},[66799],{"type":597,"tag":719,"props":66800,"children":66802},{"alt":719,"src":66801},"/images/2019-09-02-ilruntime/656520-20180528144743649-1121461434.png",[],{"type":597,"tag":1023,"props":66804,"children":66806},{"id":66805},"基于appdomain内嵌的invoke来实现反射",[66807],{"type":603,"value":66808},"基于appDomain内嵌的Invoke来实现反射",{"type":597,"tag":606,"props":66810,"children":66811},{},[66812],{"type":603,"value":66813},"在ILRuntime中，在appDomain中内嵌了一套Invoke的实现，可以在Unity工程中直接调用来实现对热更新DLL中类的方法的调用：",{"type":597,"tag":606,"props":66815,"children":66816},{},[66817],{"type":597,"tag":719,"props":66818,"children":66820},{"alt":719,"src":66819},"/images/2019-09-02-ilruntime/656520-20180528144758068-1015276210.png",[],{"type":597,"tag":606,"props":66822,"children":66823},{},[66824],{"type":603,"value":66825},"关键操作就是2步： GetType和 GetMethod，获取类型的过程，和前面有点类似，就是对mapType中存储的获取，如果没有，则进行查找和填充，这儿重点说说方法是如何获取的：",{"type":597,"tag":606,"props":66827,"children":66828},{},[66829],{"type":597,"tag":719,"props":66830,"children":66832},{"alt":719,"src":66831},"/images/2019-09-02-ilruntime/656520-20180528144811489-2012923950.png",[],{"type":597,"tag":606,"props":66834,"children":66835},{},[66836],{"type":603,"value":66837},"粗看就是从methods中取出来，做相应的检查，如果通过则返回，那么初始化操作看看：",{"type":597,"tag":606,"props":66839,"children":66840},{},[66841],{"type":597,"tag":719,"props":66842,"children":66844},{"alt":719,"src":66843},"/images/2019-09-02-ilruntime/656520-20180528144823104-1803890663.png",[],{"type":597,"tag":606,"props":66846,"children":66847},{},[66848],{"type":603,"value":66849},"最后还是从definition.Methods中取出，逐个遍历其中的方法做一个分类存储，如果有静态构造函数，且满足对于的参数条件，则执行一次静态构造。",{"type":597,"tag":606,"props":66851,"children":66852},{},[66853],{"type":603,"value":66854},"回到开始，在获取到类和方法的相关信息后，就可以执行对于的参数检验，然后执行反射：",{"type":597,"tag":606,"props":66856,"children":66857},{},[66858],{"type":597,"tag":719,"props":66859,"children":66861},{"alt":719,"src":66860},"/images/2019-09-02-ilruntime/656520-20180528144840373-1429288247.png",[],{"type":597,"tag":606,"props":66863,"children":66864},{},[66865],{"type":603,"value":66866},"可见，就是获取到一个IL的解释器，然后执行相应的反射，具体Run怎么执行，就不继续深入贴图了，有兴趣的可以持续跟踪（基本思路就是对stack的操作，塞入各个参数，然后执行一次操作，塞入结果，然后退回）",{"type":597,"tag":606,"props":66868,"children":66869},{},[66870],{"type":603,"value":66871},"对于ILRuntime的反射基本就先研究到这儿，如果要应用到自己的项目中，可以继续深入研究一下代码，看看实现的具体细节。这儿附上开源的相关文档：",{"type":597,"tag":606,"props":66873,"children":66874},{},[66875],{"type":597,"tag":886,"props":66876,"children":66878},{"href":66877},"/v1/guide/reflection.html",[66879],{"type":603,"value":66880},"ILRuntime中的反射",{"type":597,"tag":1023,"props":66882,"children":66884},{"id":66883},"热更新dll和unity主工程的相互调用",[66885],{"type":603,"value":66886},"热更新DLL和Unity主工程的相互调用",{"type":597,"tag":606,"props":66888,"children":66889},{},[66890],{"type":603,"value":66891},"基于前面的反射，我们可以基本理出热更DLL和unity主工程的交互本质: 基于IL虚拟机或者.net本身反射来实现交互，对于热更新DLL，其调用unity主工程，则主要是在热更新工程中添加对于unity工程的Assembly-CSharp的引用：",{"type":597,"tag":606,"props":66893,"children":66894},{},[66895],{"type":597,"tag":719,"props":66896,"children":66898},{"alt":719,"src":66897},"/images/2019-09-02-ilruntime/656520-20180528144900607-89436059.png",[],{"type":597,"tag":606,"props":66900,"children":66901},{},[66902],{"type":603,"value":66903},"基于这个引用，可以调用其中类的各自方法，举两个类来测试：",{"type":597,"tag":606,"props":66905,"children":66906},{},[66907],{"type":603,"value":66908},"一个不继承自MonoBehaviour：",{"type":597,"tag":606,"props":66910,"children":66911},{},[66912],{"type":597,"tag":719,"props":66913,"children":66915},{"alt":719,"src":66914},"/images/2019-09-02-ilruntime/656520-20180528144913680-316348813.png",[],{"type":597,"tag":606,"props":66917,"children":66918},{},[66919],{"type":603,"value":66920},"一个继承自MonoBehaviour:",{"type":597,"tag":606,"props":66922,"children":66923},{},[66924],{"type":597,"tag":719,"props":66925,"children":66927},{"alt":719,"src":66926},"/images/2019-09-02-ilruntime/656520-20180528144932643-1419524295.png",[],{"type":597,"tag":606,"props":66929,"children":66930},{},[66931],{"type":603,"value":66932},"这两个Unity主工程中的类以及其中的方法，在热更新DLL中调用：",{"type":597,"tag":606,"props":66934,"children":66935},{},[66936],{"type":597,"tag":719,"props":66937,"children":66939},{"alt":719,"src":66938},"/images/2019-09-02-ilruntime/656520-20180528144946464-1425100319.png",[],{"type":597,"tag":606,"props":66941,"children":66942},{},[66943],{"type":603,"value":66944},"可以在Unity主工程中得到输出：",{"type":597,"tag":606,"props":66946,"children":66947},{},[66948],{"type":597,"tag":719,"props":66949,"children":66951},{"alt":719,"src":66950},"/images/2019-09-02-ilruntime/656520-20180528145001101-1886163550.png",[],{"type":597,"tag":606,"props":66953,"children":66954},{},[66955],{"type":603,"value":66956},"看一下track可以大概了解整个反射的执行过程。",{"type":597,"tag":606,"props":66958,"children":66959},{},[66960],{"type":603,"value":66961},"对于Unity执行热更DLL中的调用，就是第一部分的反射实例。",{"type":597,"tag":857,"props":66963,"children":66965},{"id":66964},"热修复hotfix",[66966],{"type":603,"value":66967},"热修复HOTFIX",{"type":597,"tag":606,"props":66969,"children":66970},{},[66971,66973],{"type":603,"value":66972},"腾讯开源的Unity热更解决方案xLua有一个非常吸引人的特性就是Hotfix，其原理是使用Mono.Cecil库对进行C#层编译出来的dll程序集进行IL代码注入。其作者也在知乎的回答中简单说明了原理：",{"type":597,"tag":886,"props":66974,"children":66977},{"href":66975,"rel":66976},"https://link.jianshu.com/?t=https://www.zhihu.com/question/54344452/answer/139413144",[890],[66978],{"type":603,"value":66979},"如何评价腾讯在Unity下的xLua（开源）热更方案？ - 车雄生的回答 - 知乎",{"type":597,"tag":617,"props":66981,"children":66982},{},[66983,66991],{"type":597,"tag":606,"props":66984,"children":66985},{},[66986],{"type":597,"tag":1080,"props":66987,"children":66988},{},[66989],{"type":603,"value":66990},"Mono.Ceil",{"type":597,"tag":606,"props":66992,"children":66993},{},[66994],{"type":603,"value":66995},"一个可加载并浏览现有程序集并进行动态修改并保存的.NET框架。可以静态注入程序集（注入后生成新的程序集）和动态注入程序集（注入后不改变目标程序集，只在运行时改变程序集行为。可以通过其实现AOP等高级功能",{"type":597,"tag":606,"props":66997,"children":66998},{},[66999],{"type":603,"value":67000},"Unity的代码在修改之后会自动编译到Library\\ScriptAssemblies下的两个Assembly中，所以我会尝试着将代码注入到其中。",{"type":597,"tag":621,"props":67002,"children":67004},{"code":67003},"public class Test : MonoBehaviour{\n\n    void Start()\n    {\n       InjectMod();\n    }\n\n    void InjectMod () {\n       Debug.Log(\"Heihei asdasd\");\n    }\n}\n",[67005],{"type":597,"tag":629,"props":67006,"children":67007},{"__ignoreMap":591},[67008],{"type":603,"value":67003},{"type":597,"tag":606,"props":67010,"children":67011},{},[67012,67014,67020],{"type":603,"value":67013},"将Test绑定到场景物体上，运行后我们会发现输出",{"type":597,"tag":629,"props":67015,"children":67017},{"className":67016},[],[67018],{"type":603,"value":67019},"Heihei asdasd",{"type":603,"value":67021},"，就像我们预期的一样。 然后我们尝试着将代码注入到该函数中。",{"type":597,"tag":621,"props":67023,"children":67025},{"code":67024},"private static bool hasGen = false;\n[PostProcessBuild(1000)]\nprivate static void OnPostprocessBuildPlayer(BuildTarget buildTarget, string buildPath)\n{\n   hasGen = false;\n}\n\n[PostProcessScene]\npublic static void TestInjectMothodOnPost()\n{\n   if (hasGen == true) return;\n   hasGen = true;\n\n   TestInjectMothod();\n}\n[InitializeOnLoadMethod]\npublic static void TestInjectMothod()\n{\n   var assembly = AssemblyDefinition.ReadAssembly(@\"D:\\Documents\\Unity5Projects\\UnityDllInjector\\Library\\ScriptAssemblies\\Assembly-CSharp.dll\");\n   var types = assembly.MainModule.GetTypes();\n   foreach(var type in types)\n   {\n      foreach(var Method in type.Methods)\n      {\n         if(Method.Name == \"InjectMod\")\n         {\n            InjectMethod(Method, assembly);\n         }\n      }\n   }\n   var writerParameters = new WriterParameters { WriteSymbols = true };\n   assembly.Write(@\"D:\\Documents\\Unity5Projects\\UnityDllInjector\\Library\\ScriptAssemblies\\Assembly-CSharp.dll\", new WriterParameters());\n}\n",[67026],{"type":597,"tag":629,"props":67027,"children":67028},{"__ignoreMap":591},[67029],{"type":603,"value":67024},{"type":597,"tag":606,"props":67031,"children":67032},{},[67033,67035,67041,67043,67049],{"type":603,"value":67034},"我们首先看",{"type":597,"tag":629,"props":67036,"children":67038},{"className":67037},[],[67039],{"type":603,"value":67040},"TestInjectMothod",{"type":603,"value":67042},",这是我们在编辑器下进行注入的函数，这里我们需要注意的是，每当我们修改代码之后我们注入的结果会被覆盖掉，所以我们在每次修改代码之后都需要进行注入，所以我们这里添加了标签：",{"type":597,"tag":629,"props":67044,"children":67046},{"className":67045},[],[67047],{"type":603,"value":67048},"InitializeOnLoadMethod ",{"type":603,"value":67050},"这个标签的意思是，当初始化的时候都进行执行，所以编译完成之后就会自动执行。",{"type":597,"tag":606,"props":67052,"children":67053},{},[67054],{"type":603,"value":67055},"然后我们看前面两个函数，这两个函数是为了在打包时进行注入而存在的，其中hasGen是为了防止重复注入而定义的flag。",{"type":597,"tag":606,"props":67057,"children":67058},{},[67059,67061,67067],{"type":603,"value":67060},"然后我们查看一下我们的注入方法",{"type":597,"tag":629,"props":67062,"children":67064},{"className":67063},[],[67065],{"type":603,"value":67066},"InjectMethod",{"type":603,"value":67068},",在这个函数中我们可以看到，我们首先将我们所需要的函数导入，然后插入到方法的最前端：",{"type":597,"tag":621,"props":67070,"children":67072},{"code":67071},"private static void InjectMethod(MethodDefinition method, AssemblyDefinition assembly)\n{\n   var firstIns = method.Body.Instructions.First();\n   var worker = method.Body.GetILProcessor();\n\n   //获取Debug.Log方法引用\n   var hasPatchRef = assembly.MainModule.Import(\n   typeof(Debug).GetMethod(\"Log\", new Type[] { typeof(string) }));\n   //插入函数\n   var current = InsertBefore(worker, firstIns, worker.Create(OpCodes.Ldstr, \"Inject\"));\n   current = InsertBefore(worker, firstIns, worker.Create(OpCodes.Call, hasPatchRef));\n   //计算Offset\n   ComputeOffsets(method.Body);\n}\n/// \u003Csummary>\n/// 语句前插入Instruction, 并返回当前语句\n/// \u003C/summary>\nprivate static Instruction InsertBefore(ILProcessor worker, Instruction target, Instruction instruction)\n{\n   worker.InsertBefore(target, instruction);\n   return instruction;\n}\n\n/// \u003Csummary>\n/// 语句后插入Instruction, 并返回当前语句\n/// \u003C/summary>\nprivate static Instruction InsertAfter(ILProcessor worker, Instruction target, Instruction instruction)\n{\n   worker.InsertAfter(target, instruction);\n   return instruction;\n}\n//计算注入后的函数偏移值\nprivate static void ComputeOffsets(MethodBody body)\n{\n   var offset = 0;\n   foreach (var instruction in body.Instructions)\n   {\n      instruction.Offset = offset;\n      offset += instruction.GetSize();\n   }\n}\n",[67073],{"type":597,"tag":629,"props":67074,"children":67075},{"__ignoreMap":591},[67076],{"type":603,"value":67071},{"type":597,"tag":606,"props":67078,"children":67079},{},[67080],{"type":603,"value":67081},"等待编译完成，并且运行程序，我们发现在输出原来的语句之前多了一句“Inject”\n可是我们在查看代码的时候并没有发生任何改变，这是因为我们只修改了dll而并非修改源代码。",{"type":597,"tag":857,"props":67083,"children":67084},{"id":32588},[67085],{"type":603,"value":32588},{"type":597,"tag":1321,"props":67087,"children":67088},{},[67089,67094,67104,67114],{"type":597,"tag":807,"props":67090,"children":67091},{},[67092],{"type":603,"value":67093},"ILRuntime并没有创建一个Appdomain,只是取其名字意思.始终工作在默认的AppDomain",{"type":597,"tag":807,"props":67095,"children":67096},{},[67097,67099],{"type":603,"value":67098},"ILRuntime中使用Unity项目的委托,需要创建",{"type":597,"tag":1080,"props":67100,"children":67101},{},[67102],{"type":603,"value":67103},"DelegateAdapter",{"type":597,"tag":807,"props":67105,"children":67106},{},[67107,67109],{"type":603,"value":67108},"ILRuntime中继承Unity项目中的类,需要实现",{"type":597,"tag":1080,"props":67110,"children":67111},{},[67112],{"type":603,"value":67113},"继承适配器",{"type":597,"tag":807,"props":67115,"children":67116},{},[67117,67119,67122,67124,67130,67132,67135,67137,67143,67145,67151,67154],{"type":603,"value":67118},"通常情况下，如果要从热更DLL中调用Unity主工程或者Unity的接口，是需要通过反射接口来调用的，包括市面上不少其他热更方案，也是通过这种方式来对CLR方接口进行调用的。(反射一个类,然后创建对象,然后保存到runtime中,调用方法也是通过反射)",{"type":597,"tag":1595,"props":67120,"children":67121},{},[],{"type":603,"value":67123},"但是这种方式有着明显的弊端，最突出的一点就是通过反射来调用接口调用效率会比直接调用低很多，再加上反射传递函数参数时需要使用",{"type":597,"tag":629,"props":67125,"children":67127},{"className":67126},[],[67128],{"type":603,"value":67129},"object[]",{"type":603,"value":67131},"数组，这样不可避免的每次调用都会产生不少GC Alloc。众所周知GC Alloc高意味着在Unity中执行会存在较大的性能问题。",{"type":597,"tag":1595,"props":67133,"children":67134},{},[],{"type":603,"value":67136},"ILRuntime通过CLR方法绑定机制，可以",{"type":597,"tag":629,"props":67138,"children":67140},{"className":67139},[],[67141],{"type":603,"value":67142},"选择性",{"type":603,"value":67144},"的对经常使用的CLR接口进行直接调用，从而尽可能的消除反射调用开销以及额外的",{"type":597,"tag":629,"props":67146,"children":67148},{"className":67147},[],[67149],{"type":603,"value":67150},"GC Alloc",{"type":597,"tag":1595,"props":67152,"children":67153},{},[],{"type":603,"value":67155},"CLR绑定借助了ILRuntime的CLR重定向机制来实现，因为实质上也是将对CLR方法的反射调用重定向到我们自己定义的方法里面来。",{"type":597,"tag":857,"props":67157,"children":67158},{"id":32788},[67159],{"type":603,"value":32788},{"type":597,"tag":1321,"props":67161,"children":67162},{},[67163,67172,67181,67190,67199,67208],{"type":597,"tag":807,"props":67164,"children":67165},{},[67166],{"type":597,"tag":886,"props":67167,"children":67170},{"href":67168,"rel":67169},"https://docs.microsoft.com/zh-cn/dotnet/framework/app-domains/use",[890],[67171],{"type":603,"value":67168},{"type":597,"tag":807,"props":67173,"children":67174},{},[67175],{"type":597,"tag":886,"props":67176,"children":67179},{"href":67177,"rel":67178},"https://www.cnblogs.com/murongxiaopifu/p/4278947.html",[890],[67180],{"type":603,"value":67177},{"type":597,"tag":807,"props":67182,"children":67183},{},[67184],{"type":597,"tag":886,"props":67185,"children":67188},{"href":67186,"rel":67187},"https://www.cnblogs.com/murongxiaopifu/p/4211964.html",[890],[67189],{"type":603,"value":67186},{"type":597,"tag":807,"props":67191,"children":67192},{},[67193],{"type":597,"tag":886,"props":67194,"children":67197},{"href":67195,"rel":67196},"https://www.cnblogs.com/zblade/p/9100146.html",[890],[67198],{"type":603,"value":67195},{"type":597,"tag":807,"props":67200,"children":67201},{},[67202],{"type":597,"tag":886,"props":67203,"children":67206},{"href":67204,"rel":67205},"http://ourpalm.github.io/ILRuntime/public/v1/guide/bind.html",[890],[67207],{"type":603,"value":67204},{"type":597,"tag":807,"props":67209,"children":67210},{},[67211],{"type":597,"tag":886,"props":67212,"children":67215},{"href":67213,"rel":67214},"https://www.jianshu.com/p/4bef7f66aefd",[890],[67216],{"type":603,"value":67213},{"title":591,"searchDepth":787,"depth":787,"links":67218},[67219,67220,67221,67222,67223,67224,67225],{"id":66272,"depth":1530,"text":66272},{"id":66327,"depth":1530,"text":66330},{"id":66420,"depth":1530,"text":66423},{"id":66463,"depth":1530,"text":66466},{"id":66573,"depth":1530,"text":66576},{"id":66805,"depth":1530,"text":66808},{"id":66883,"depth":1530,"text":66886},"content:unity:2019-09-02-ilruntime.md","unity/2019-09-02-ilruntime.md",{"_path":406,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":405,"description":67229,"body":67230,"_type":791,"_id":67878,"_source":793,"_file":67879,"_extension":795,"date":64501},"unity默认的#defind宏变量\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProperty:Function:UNITY_EDITOR#define directive for calling Unity Editor scripts from your game code.UNITY_EDITOR_WIN#define directive for Editor code on Windows.UNITY_EDITOR_O",{"type":594,"children":67231,"toc":67872},[67232,67238,67240,67719,67725,67730,67762,67776,67782,67787,67795,67808,67816,67821,67847,67851],{"type":597,"tag":857,"props":67233,"children":67235},{"id":67234},"unity默认的defind宏变量",[67236],{"type":603,"value":67237},"unity默认的#defind宏变量",{"type":603,"value":67239},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":67241,"children":67242},{},[67243,67265],{"type":597,"tag":1941,"props":67244,"children":67245},{},[67246],{"type":597,"tag":1945,"props":67247,"children":67248},{},[67249,67257],{"type":597,"tag":1949,"props":67250,"children":67251},{},[67252],{"type":597,"tag":1080,"props":67253,"children":67254},{},[67255],{"type":603,"value":67256},"Property:",{"type":597,"tag":1949,"props":67258,"children":67259},{},[67260],{"type":597,"tag":1080,"props":67261,"children":67262},{},[67263],{"type":603,"value":67264},"Function:",{"type":597,"tag":1963,"props":67266,"children":67267},{},[67268,67284,67300,67316,67332,67348,67364,67380,67396,67412,67434,67450,67473,67495,67511,67527,67563,67586,67607,67627,67648,67664,67680,67703],{"type":597,"tag":1945,"props":67269,"children":67270},{},[67271,67279],{"type":597,"tag":1970,"props":67272,"children":67273},{},[67274],{"type":597,"tag":1080,"props":67275,"children":67276},{},[67277],{"type":603,"value":67278},"UNITY_EDITOR",{"type":597,"tag":1970,"props":67280,"children":67281},{},[67282],{"type":603,"value":67283},"#define directive for calling Unity Editor scripts from your game code.",{"type":597,"tag":1945,"props":67285,"children":67286},{},[67287,67295],{"type":597,"tag":1970,"props":67288,"children":67289},{},[67290],{"type":597,"tag":1080,"props":67291,"children":67292},{},[67293],{"type":603,"value":67294},"UNITY_EDITOR_WIN",{"type":597,"tag":1970,"props":67296,"children":67297},{},[67298],{"type":603,"value":67299},"#define directive for Editor code on Windows.",{"type":597,"tag":1945,"props":67301,"children":67302},{},[67303,67311],{"type":597,"tag":1970,"props":67304,"children":67305},{},[67306],{"type":597,"tag":1080,"props":67307,"children":67308},{},[67309],{"type":603,"value":67310},"UNITY_EDITOR_OSX",{"type":597,"tag":1970,"props":67312,"children":67313},{},[67314],{"type":603,"value":67315},"#define directive for Editor code on Mac OS X.",{"type":597,"tag":1945,"props":67317,"children":67318},{},[67319,67327],{"type":597,"tag":1970,"props":67320,"children":67321},{},[67322],{"type":597,"tag":1080,"props":67323,"children":67324},{},[67325],{"type":603,"value":67326},"UNITY_STANDALONE_OSX",{"type":597,"tag":1970,"props":67328,"children":67329},{},[67330],{"type":603,"value":67331},"#define directive for compiling/executing code specifically for Mac OS X (including Universal, PPC and Intel architectures).",{"type":597,"tag":1945,"props":67333,"children":67334},{},[67335,67343],{"type":597,"tag":1970,"props":67336,"children":67337},{},[67338],{"type":597,"tag":1080,"props":67339,"children":67340},{},[67341],{"type":603,"value":67342},"UNITY_STANDALONE_WIN",{"type":597,"tag":1970,"props":67344,"children":67345},{},[67346],{"type":603,"value":67347},"#define directive for compiling/executing code specifically for Windows standalone applications.",{"type":597,"tag":1945,"props":67349,"children":67350},{},[67351,67359],{"type":597,"tag":1970,"props":67352,"children":67353},{},[67354],{"type":597,"tag":1080,"props":67355,"children":67356},{},[67357],{"type":603,"value":67358},"UNITY_STANDALONE_LINUX",{"type":597,"tag":1970,"props":67360,"children":67361},{},[67362],{"type":603,"value":67363},"#define directive for compiling/executing code specifically for Linux standalone applications.",{"type":597,"tag":1945,"props":67365,"children":67366},{},[67367,67375],{"type":597,"tag":1970,"props":67368,"children":67369},{},[67370],{"type":597,"tag":1080,"props":67371,"children":67372},{},[67373],{"type":603,"value":67374},"UNITY_STANDALONE",{"type":597,"tag":1970,"props":67376,"children":67377},{},[67378],{"type":603,"value":67379},"#define directive for compiling/executing code for any standalone platform (Mac OS X, Windows or Linux).",{"type":597,"tag":1945,"props":67381,"children":67382},{},[67383,67391],{"type":597,"tag":1970,"props":67384,"children":67385},{},[67386],{"type":597,"tag":1080,"props":67387,"children":67388},{},[67389],{"type":603,"value":67390},"UNITY_WII",{"type":597,"tag":1970,"props":67392,"children":67393},{},[67394],{"type":603,"value":67395},"#define directive for compiling/executing code for the Wii console.",{"type":597,"tag":1945,"props":67397,"children":67398},{},[67399,67407],{"type":597,"tag":1970,"props":67400,"children":67401},{},[67402],{"type":597,"tag":1080,"props":67403,"children":67404},{},[67405],{"type":603,"value":67406},"UNITY_IOS",{"type":597,"tag":1970,"props":67408,"children":67409},{},[67410],{"type":603,"value":67411},"#define directive for compiling/executing code for the iOS platform.",{"type":597,"tag":1945,"props":67413,"children":67414},{},[67415,67423],{"type":597,"tag":1970,"props":67416,"children":67417},{},[67418],{"type":597,"tag":1080,"props":67419,"children":67420},{},[67421],{"type":603,"value":67422},"UNITY_IPHONE",{"type":597,"tag":1970,"props":67424,"children":67425},{},[67426,67428,67432],{"type":603,"value":67427},"Deprecated. Use ",{"type":597,"tag":1080,"props":67429,"children":67430},{},[67431],{"type":603,"value":67406},{"type":603,"value":67433}," instead.",{"type":597,"tag":1945,"props":67435,"children":67436},{},[67437,67445],{"type":597,"tag":1970,"props":67438,"children":67439},{},[67440],{"type":597,"tag":1080,"props":67441,"children":67442},{},[67443],{"type":603,"value":67444},"UNITY_ANDROID",{"type":597,"tag":1970,"props":67446,"children":67447},{},[67448],{"type":603,"value":67449},"#define directive for the Android platform.",{"type":597,"tag":1945,"props":67451,"children":67452},{},[67453,67461],{"type":597,"tag":1970,"props":67454,"children":67455},{},[67456],{"type":597,"tag":1080,"props":67457,"children":67458},{},[67459],{"type":603,"value":67460},"UNITY_PS4",{"type":597,"tag":1970,"props":67462,"children":67463},{},[67464,67466,67471],{"type":603,"value":67465},"#define directive for running ",{"type":597,"tag":1080,"props":67467,"children":67468},{},[67469],{"type":603,"value":67470},"PlayStation 4",{"type":603,"value":67472},"  code.",{"type":597,"tag":1945,"props":67474,"children":67475},{},[67476,67484],{"type":597,"tag":1970,"props":67477,"children":67478},{},[67479],{"type":597,"tag":1080,"props":67480,"children":67481},{},[67482],{"type":603,"value":67483},"UNITY_XBOXONE",{"type":597,"tag":1970,"props":67485,"children":67486},{},[67487,67489,67494],{"type":603,"value":67488},"#define directive for executing ",{"type":597,"tag":1080,"props":67490,"children":67491},{},[67492],{"type":603,"value":67493},"Xbox One",{"type":603,"value":67472},{"type":597,"tag":1945,"props":67496,"children":67497},{},[67498,67506],{"type":597,"tag":1970,"props":67499,"children":67500},{},[67501],{"type":597,"tag":1080,"props":67502,"children":67503},{},[67504],{"type":603,"value":67505},"UNITY_TIZEN",{"type":597,"tag":1970,"props":67507,"children":67508},{},[67509],{"type":603,"value":67510},"#define directive for the Tizen platform.",{"type":597,"tag":1945,"props":67512,"children":67513},{},[67514,67522],{"type":597,"tag":1970,"props":67515,"children":67516},{},[67517],{"type":597,"tag":1080,"props":67518,"children":67519},{},[67520],{"type":603,"value":67521},"UNITY_TVOS",{"type":597,"tag":1970,"props":67523,"children":67524},{},[67525],{"type":603,"value":67526},"#define directive for the Apple TV platform.",{"type":597,"tag":1945,"props":67528,"children":67529},{},[67530,67538],{"type":597,"tag":1970,"props":67531,"children":67532},{},[67533],{"type":597,"tag":1080,"props":67534,"children":67535},{},[67536],{"type":603,"value":67537},"UNITY_WSA",{"type":597,"tag":1970,"props":67539,"children":67540},{},[67541,67543,67548,67550,67555,67557,67562],{"type":603,"value":67542},"#define directive for ",{"type":597,"tag":1080,"props":67544,"children":67545},{},[67546],{"type":603,"value":67547},"Universal Windows Platform",{"type":603,"value":67549}," . Additionally, ",{"type":597,"tag":1080,"props":67551,"children":67552},{},[67553],{"type":603,"value":67554},"NETFX_CORE",{"type":603,"value":67556}," is defined when compiling C# files against .NET Core and using .NET ",{"type":597,"tag":1080,"props":67558,"children":67559},{},[67560],{"type":603,"value":67561},"scripting backend",{"type":603,"value":27948},{"type":597,"tag":1945,"props":67564,"children":67565},{},[67566,67574],{"type":597,"tag":1970,"props":67567,"children":67568},{},[67569],{"type":597,"tag":1080,"props":67570,"children":67571},{},[67572],{"type":603,"value":67573},"UNITY_WSA_10_0",{"type":597,"tag":1970,"props":67575,"children":67576},{},[67577,67579,67584],{"type":603,"value":67578},"#define directive for Universal Windows Platform. Additionally ",{"type":597,"tag":1080,"props":67580,"children":67581},{},[67582],{"type":603,"value":67583},"WINDOWS_UWP",{"type":603,"value":67585}," is defined when compiling C# files against .NET Core.",{"type":597,"tag":1945,"props":67587,"children":67588},{},[67589,67597],{"type":597,"tag":1970,"props":67590,"children":67591},{},[67592],{"type":597,"tag":1080,"props":67593,"children":67594},{},[67595],{"type":603,"value":67596},"UNITY_WINRT",{"type":597,"tag":1970,"props":67598,"children":67599},{},[67600,67602,67606],{"type":603,"value":67601},"Same as ",{"type":597,"tag":1080,"props":67603,"children":67604},{},[67605],{"type":603,"value":67537},{"type":603,"value":9674},{"type":597,"tag":1945,"props":67608,"children":67609},{},[67610,67618],{"type":597,"tag":1970,"props":67611,"children":67612},{},[67613],{"type":597,"tag":1080,"props":67614,"children":67615},{},[67616],{"type":603,"value":67617},"UNITY_WINRT_10_0",{"type":597,"tag":1970,"props":67619,"children":67620},{},[67621,67623],{"type":603,"value":67622},"Equivalent to ",{"type":597,"tag":1080,"props":67624,"children":67625},{},[67626],{"type":603,"value":67573},{"type":597,"tag":1945,"props":67628,"children":67629},{},[67630,67638],{"type":597,"tag":1970,"props":67631,"children":67632},{},[67633],{"type":597,"tag":1080,"props":67634,"children":67635},{},[67636],{"type":603,"value":67637},"UNITY_WEBGL",{"type":597,"tag":1970,"props":67639,"children":67640},{},[67641,67642,67647],{"type":603,"value":67542},{"type":597,"tag":1080,"props":67643,"children":67644},{},[67645],{"type":603,"value":67646},"WebGL",{"type":603,"value":27948},{"type":597,"tag":1945,"props":67649,"children":67650},{},[67651,67659],{"type":597,"tag":1970,"props":67652,"children":67653},{},[67654],{"type":597,"tag":1080,"props":67655,"children":67656},{},[67657],{"type":603,"value":67658},"UNITY_FACEBOOK",{"type":597,"tag":1970,"props":67660,"children":67661},{},[67662],{"type":603,"value":67663},"#define directive for the Facebook platform (WebGL or Windows standalone).",{"type":597,"tag":1945,"props":67665,"children":67666},{},[67667,67675],{"type":597,"tag":1970,"props":67668,"children":67669},{},[67670],{"type":597,"tag":1080,"props":67671,"children":67672},{},[67673],{"type":603,"value":67674},"UNITY_ADS",{"type":597,"tag":1970,"props":67676,"children":67677},{},[67678],{"type":603,"value":67679},"#define directive for calling Unity Ads methods from your game code. Version 5.2 and above.",{"type":597,"tag":1945,"props":67681,"children":67682},{},[67683,67691],{"type":597,"tag":1970,"props":67684,"children":67685},{},[67686],{"type":597,"tag":1080,"props":67687,"children":67688},{},[67689],{"type":603,"value":67690},"UNITY_ANALYTICS",{"type":597,"tag":1970,"props":67692,"children":67693},{},[67694,67696,67701],{"type":603,"value":67695},"#define directive for calling Unity ",{"type":597,"tag":1080,"props":67697,"children":67698},{},[67699],{"type":603,"value":67700},"Analytics",{"type":603,"value":67702},"  methods from your game code. Version 5.2 and above.",{"type":597,"tag":1945,"props":67704,"children":67705},{},[67706,67714],{"type":597,"tag":1970,"props":67707,"children":67708},{},[67709],{"type":597,"tag":1080,"props":67710,"children":67711},{},[67712],{"type":603,"value":67713},"UNITY_ASSERTIONS",{"type":597,"tag":1970,"props":67715,"children":67716},{},[67717],{"type":603,"value":67718},"#define directive for assertions control process.",{"type":597,"tag":598,"props":67720,"children":67722},{"id":67721},"在-net-4x-和-net-standard-20-配置文件之间进行选择",[67723],{"type":603,"value":67724},"在 .NET 4.x 和 .NET Standard 2.0 配置文件之间进行选择",{"type":597,"tag":606,"props":67726,"children":67727},{},[67728],{"type":603,"value":67729},"一旦切换到 .NET 4.x 等效脚本运行时，可使用 PlayerSettings 中的下拉菜单指定“Api Compatibility Level”（“Edit > Project Settings > Player”）。 有两种选项：",{"type":597,"tag":1321,"props":67731,"children":67732},{},[67733,67752],{"type":597,"tag":807,"props":67734,"children":67735},{},[67736,67741,67743,67750],{"type":597,"tag":1080,"props":67737,"children":67738},{},[67739],{"type":603,"value":67740},".NET Standard 2.0",{"type":603,"value":67742},"。 此配置文件与 .NET Foundation 发布的 ",{"type":597,"tag":886,"props":67744,"children":67747},{"href":67745,"rel":67746},"https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md",[890],[67748],{"type":603,"value":67749},".NET Standard 2.0 配置文件",{"type":603,"value":67751},"匹配。 Unity 建议新项目使用 .NET Standard 2.0。 它比 .NET 4.x 小，有利于尺寸受限的平台。 此外，Unity 承诺在 Unity 支持的所有平台上支持此配置文件。",{"type":597,"tag":807,"props":67753,"children":67754},{},[67755,67760],{"type":597,"tag":1080,"props":67756,"children":67757},{},[67758],{"type":603,"value":67759},".NET 4.x",{"type":603,"value":67761},"。 此配置文件提供对最新 .NET 4 API 的访问权限。 它包括 .NET Framework 类库中提供的所有代码，并且支持 .NET Standard 2.0 配置文件。 如果 .NET Standard 2.0 配置文件中未包含项目所需的部分 API，请使用 .NET 4.x 配置文件。 但此 API 的某些部分并非在所有 Unity 平台上均受支持。",{"type":597,"tag":606,"props":67763,"children":67764},{},[67765,67767,67774],{"type":603,"value":67766},"可在 Unity 的",{"type":597,"tag":886,"props":67768,"children":67771},{"href":67769,"rel":67770},"https://blogs.unity3d.com/2018/03/28/updated-scripting-runtime-in-unity-2018-1-what-does-the-future-hold/",[890],[67772],{"type":603,"value":67773},"博客文章",{"type":603,"value":67775},"中阅读有关这些选项的更多信息。",{"type":597,"tag":1023,"props":67777,"children":67779},{"id":67778},"使用-net-4x-api-兼容级别时添加程序集引用",[67780],{"type":603,"value":67781},"使用 .NET 4.x API 兼容级别时添加程序集引用",{"type":597,"tag":606,"props":67783,"children":67784},{},[67785],{"type":603,"value":67786},"在“API 兼容级别”下拉列表中使用 .NET Standard 2.0 设置时，将引用和使用 API 配置文件中的所有程序集。 但是，在使用较大的 .NET 4.x 配置文件时，默认情况下不会引用 Unity 附带的某些程序集。 若要使用这些 API，必须手动添加程序集引用。 可在 Unity 编辑器安装的 MonoBleedingEdge/lib/mono 目录中查看 Unity 附带的程序集：",{"type":597,"tag":606,"props":67788,"children":67789},{},[67790],{"type":597,"tag":719,"props":67791,"children":67794},{"alt":67792,"src":67793},"MonoBleedingEdge 目录","/images/2019-09-02-unity-reference-dll/vstu_monobleedingedge.png",[],{"type":597,"tag":606,"props":67796,"children":67797},{},[67798,67800,67806],{"type":603,"value":67799},"例如，如果使用的是 .NET 4.x 配置文件且希望使用 ",{"type":597,"tag":629,"props":67801,"children":67803},{"className":67802},[],[67804],{"type":603,"value":67805},"HttpClient",{"type":603,"value":67807},"，则必须为 System.Net.Http.dll 添加程序集引用。 如果没有它，编译器将报错，指示缺少程序集引用：",{"type":597,"tag":606,"props":67809,"children":67810},{},[67811],{"type":597,"tag":719,"props":67812,"children":67815},{"alt":67813,"src":67814},"缺少程序集引用","/images/2019-09-02-unity-reference-dll/vstu_missing-reference.png",[],{"type":597,"tag":606,"props":67817,"children":67818},{},[67819],{"type":603,"value":67820},"每次打开 Unity 项目时 Visual Studio 都会为其重新生成 .csproj 和 .sln 文件。 因此，无法直接在 Visual Studio 中添加程序集引用，因为它们将在重新打开项目时丢失。 相反，必须使用名为 mcs.rsp 的特殊文本文件：",{"type":597,"tag":803,"props":67822,"children":67823},{},[67824,67829,67842],{"type":597,"tag":807,"props":67825,"children":67826},{},[67827],{"type":603,"value":67828},"在 Unity 项目的根Assets目录中创建名为 mcs.rsp 的新文本文件。",{"type":597,"tag":807,"props":67830,"children":67831},{},[67832,67834,67840],{"type":603,"value":67833},"在空文本文件的第一行，输入：",{"type":597,"tag":629,"props":67835,"children":67837},{"className":67836},[],[67838],{"type":603,"value":67839},"-r:System.Net.Http.dll",{"type":603,"value":67841},"，然后保存文件。 可将“System.Net.Http.dll”替换为可能缺少引用的任何包含的程序集。",{"type":597,"tag":807,"props":67843,"children":67844},{},[67845],{"type":603,"value":67846},"重启 Unity 编辑器。",{"type":597,"tag":598,"props":67848,"children":67849},{"id":32788},[67850],{"type":603,"value":32788},{"type":597,"tag":1321,"props":67852,"children":67853},{},[67854,67863],{"type":597,"tag":807,"props":67855,"children":67856},{},[67857],{"type":597,"tag":886,"props":67858,"children":67861},{"href":67859,"rel":67860},"https://docs.microsoft.com/zh-cn/visualstudio/cross-platform/unity-scripting-upgrade?view=vs-2019",[890],[67862],{"type":603,"value":67859},{"type":597,"tag":807,"props":67864,"children":67865},{},[67866],{"type":597,"tag":886,"props":67867,"children":67870},{"href":67868,"rel":67869},"https://docs.unity3d.com/Manual/PlatformDependentCompilation.html",[890],[67871],{"type":603,"value":67868},{"title":591,"searchDepth":787,"depth":787,"links":67873},[67874,67877],{"id":67721,"depth":787,"text":67724,"children":67875},[67876],{"id":67778,"depth":1530,"text":67781},{"id":32788,"depth":787,"text":32788},"content:unity:2019-09-02-unity-reference-dll.md","unity/2019-09-02-unity-reference-dll.md",{"_path":397,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":396,"description":67881,"body":67882,"_type":791,"_id":68436,"_source":793,"_file":68437,"_extension":795,"date":68438},"在本文中将详细的描述Addressable对于内存的管理，如果正确的卸载资源",{"type":594,"children":67883,"toc":68426},[67884,67888,67893,67938,67943,67948,67999,68010,68015,68050,68069,68089,68095,68123,68193,68206,68225,68252,68286,68297,68303,68321,68328,68333,68351,68359,68364,68369,68389,68401,68413,68418],{"type":597,"tag":606,"props":67885,"children":67886},{},[67887],{"type":603,"value":67881},{"type":597,"tag":598,"props":67889,"children":67891},{"id":67890},"镜像资源的加载与卸载",[67892],{"type":603,"value":67890},{"type":597,"tag":606,"props":67894,"children":67895},{},[67896,67898,67904,67906,67912,67914,67920,67922,67928,67930,67936],{"type":603,"value":67897},"Addressables是否能够正确的清理内存主要的取决于是否正确的进行镜像资源的加载与卸载，而如何做到这点又取决于加载的资源的类型与使用加载的方法。",{"type":597,"tag":629,"props":67899,"children":67901},{"className":67900},[],[67902],{"type":603,"value":67903},"Addressables.Release",{"type":603,"value":67905},"方法可以接受加载到的对象，也可以接受加载时返回的操作句柄(",{"type":597,"tag":629,"props":67907,"children":67909},{"className":67908},[],[67910],{"type":603,"value":67911},"AsyncOperationHandle",{"type":603,"value":67913},").比如，进行场景创建时，加载后返回一个",{"type":597,"tag":629,"props":67915,"children":67917},{"className":67916},[],[67918],{"type":603,"value":67919},"AsyncOperationHandle\u003CSceneInstance>",{"type":603,"value":67921},"，你可以通过返回的句柄或者",{"type":597,"tag":629,"props":67923,"children":67925},{"className":67924},[],[67926],{"type":603,"value":67927},"handle.Result",{"type":603,"value":67929},"(在这种情况下返回的Result为",{"type":597,"tag":629,"props":67931,"children":67933},{"className":67932},[],[67934],{"type":603,"value":67935},"SceneInstance",{"type":603,"value":67937},"对象)进行场景的的释放。",{"type":597,"tag":606,"props":67939,"children":67940},{},[67941],{"type":603,"value":67942},"接下来将详细的描述一下不同资源的释放方式及规则。",{"type":597,"tag":598,"props":67944,"children":67946},{"id":67945},"资源加载",[67947],{"type":603,"value":67945},{"type":597,"tag":606,"props":67949,"children":67950},{},[67951,67953,67959,67960,67966,67968,67974,67976,67981,67983,67989,67991,67997],{"type":603,"value":67952},"此处的资源指的是使用",{"type":597,"tag":629,"props":67954,"children":67956},{"className":67955},[],[67957],{"type":603,"value":67958},"Addressables.LoadAssetAsync",{"type":603,"value":27152},{"type":597,"tag":629,"props":67961,"children":67963},{"className":67962},[],[67964],{"type":603,"value":67965},"Addressables.LoadAssetsAsync",{"type":603,"value":67967},"加载的资源。\n使用上述的两个方法会将资源加载到内存中，但是并不实例化它，每次调用后对应的资源的引用记数都会增加1。如果您使用",{"type":597,"tag":629,"props":67969,"children":67971},{"className":67970},[],[67972],{"type":603,"value":67973},"LoadAssetAsync",{"type":603,"value":67975},"对同一个“地址”的资源调用了3次，您将会得到三个不同的",{"type":597,"tag":629,"props":67977,"children":67979},{"className":67978},[],[67980],{"type":603,"value":67911},{"type":603,"value":67982},"的实例，同时这些实例均引用相同的底层操作，对就应的底层操作的引用记数会变成3。如果资源加载成功，加载到的资源将会被存储到",{"type":597,"tag":629,"props":67984,"children":67986},{"className":67985},[],[67987],{"type":603,"value":67988},"AsyncOperationHandle.Result",{"type":603,"value":67990},"中，您可以使用Unity的方法进行实例化",{"type":597,"tag":629,"props":67992,"children":67994},{"className":67993},[],[67995],{"type":603,"value":67996},"Object.instantite",{"type":603,"value":67998},"，但是这种操作方式不会造成Adressables的引用记数发生变化。",{"type":597,"tag":606,"props":68000,"children":68001},{},[68002,68003,68008],{"type":603,"value":8220},{"type":597,"tag":629,"props":68004,"children":68006},{"className":68005},[],[68007],{"type":603,"value":67903},{"type":603,"value":68009},"方法可以进行卸载，调用后引用记数会减1，一旦资源的引用记数为0，那么它会被彻底的卸载掉。",{"type":597,"tag":598,"props":68011,"children":68013},{"id":68012},"场景加载",[68014],{"type":603,"value":68012},{"type":597,"tag":606,"props":68016,"children":68017},{},[68018,68020,68026,68028,68034,68035,68041,68043,68048],{"type":603,"value":68019},"可以使用",{"type":597,"tag":629,"props":68021,"children":68023},{"className":68022},[],[68024],{"type":603,"value":68025},"Addressables.LoadSceneAsync",{"type":603,"value":68027},"进行场景的加载，同时可以在参数中指定使用",{"type":597,"tag":629,"props":68029,"children":68031},{"className":68030},[],[68032],{"type":603,"value":68033},"Single",{"type":603,"value":3320},{"type":597,"tag":629,"props":68036,"children":68038},{"className":68037},[],[68039],{"type":603,"value":68040},"Additive",{"type":603,"value":68042},"模式，如果指定使用",{"type":597,"tag":629,"props":68044,"children":68046},{"className":68045},[],[68047],{"type":603,"value":68033},{"type":603,"value":68049},"模式，那么当前所在打开的场景都会被关闭。",{"type":597,"tag":606,"props":68051,"children":68052},{},[68053,68054,68060,68062,68067],{"type":603,"value":68019},{"type":597,"tag":629,"props":68055,"children":68057},{"className":68056},[],[68058],{"type":603,"value":68059},"Addressables.UnloadSceneAsync",{"type":603,"value":68061},"进行场景的卸载，或者打开新场景时使用",{"type":597,"tag":629,"props":68063,"children":68065},{"className":68064},[],[68066],{"type":603,"value":68033},{"type":603,"value":68068},"模式。",{"type":597,"tag":606,"props":68070,"children":68071},{},[68072,68074,68080,68081,68087],{"type":603,"value":68073},"当想要打开一个新场景时可以使用上述Addressables提供的方法或者使用 ",{"type":597,"tag":629,"props":68075,"children":68077},{"className":68076},[],[68078],{"type":603,"value":68079},"SceneManager.LoadScene",{"type":603,"value":3326},{"type":597,"tag":629,"props":68082,"children":68084},{"className":68083},[],[68085],{"type":603,"value":68086},"SceneManager.LoadSceneAsync",{"type":603,"value":68088},"，一个新场景的打开会关闭当前的场景，那么对应的引用记数也会正确的减少。",{"type":597,"tag":598,"props":68090,"children":68092},{"id":68091},"gameobject的实例化",[68093],{"type":603,"value":68094},"GameObject的实例化",{"type":597,"tag":606,"props":68096,"children":68097},{},[68098,68100,68106,68108,68113,68115,68121],{"type":603,"value":68099},"GameObject的实例化相对其它的资源有些特殊，在Unity中使用",{"type":597,"tag":629,"props":68101,"children":68103},{"className":68102},[],[68104],{"type":603,"value":68105},"Resources.Load",{"type":603,"value":68107},"其实只是将Prefab的数据加载到了内存中，并未真正的实例化，所以需要再次调用",{"type":597,"tag":629,"props":68109,"children":68111},{"className":68110},[],[68112],{"type":603,"value":67996},{"type":603,"value":68114},"才能正确的得到需要的GameObject，在Addressables中也是这样的，不过Addressable提供了一些便利的方法",{"type":597,"tag":629,"props":68116,"children":68118},{"className":68117},[],[68119],{"type":603,"value":68120},"Addressables.InstantiateAsync",{"type":603,"value":68122},"可以直接得到对应的GameObject。",{"type":597,"tag":606,"props":68124,"children":68125},{},[68126,68128,68133,68135,68141,68143,68148,68150,68155,68157,68162,68164,68169,68171,68176,68178,68184,68186,68191],{"type":603,"value":68127},"当使用",{"type":597,"tag":629,"props":68129,"children":68131},{"className":68130},[],[68132],{"type":603,"value":68120},{"type":603,"value":68134},"加载一个Prefab时，Addressable会自动实例化，同时在加载的过程中Addressable在加载Prefab的同时也会加载其依赖，将所有的引用记数全部增加。对同一“地址”的资源调用",{"type":597,"tag":629,"props":68136,"children":68138},{"className":68137},[],[68139],{"type":603,"value":68140},"InstantiateAsync",{"type":603,"value":68142},"三次，将会使其依赖的所有资源的引用记数均增加为3.但是与三次调用",{"type":597,"tag":629,"props":68144,"children":68146},{"className":68145},[],[68147],{"type":603,"value":67973},{"type":603,"value":68149},"不同的是每次调用",{"type":597,"tag":629,"props":68151,"children":68153},{"className":68152},[],[68154],{"type":603,"value":68140},{"type":603,"value":68156},"将会得到一个指向同一个操作的",{"type":597,"tag":629,"props":68158,"children":68160},{"className":68159},[],[68161],{"type":603,"value":67911},{"type":603,"value":68163},",这是因为每一个",{"type":597,"tag":629,"props":68165,"children":68167},{"className":68166},[],[68168],{"type":603,"value":68140},{"type":603,"value":68170},"都将得到一个唯一的实例。与其它调用方法的另外一个区别在于",{"type":597,"tag":629,"props":68172,"children":68174},{"className":68173},[],[68175],{"type":603,"value":68140},{"type":603,"value":68177},"有一个可选参数",{"type":597,"tag":629,"props":68179,"children":68181},{"className":68180},[],[68182],{"type":603,"value":68183},"trackHandle",{"type":603,"value":68185},"，如果将其设置为false，在",{"type":597,"tag":629,"props":68187,"children":68189},{"className":68188},[],[68190],{"type":603,"value":67911},{"type":603,"value":68192},"释放前，您必须自己保管着此对象，在此期间您可以执行一些操作。这种方法可以提高效率但是需要更多格外的代码来实现。",{"type":597,"tag":606,"props":68194,"children":68195},{},[68196,68198,68204],{"type":603,"value":68197},"关闭实例所在场景或者使用",{"type":597,"tag":629,"props":68199,"children":68201},{"className":68200},[],[68202],{"type":603,"value":68203},"Addressables.ReleaseInstance",{"type":603,"value":68205},"可以卸载掉实例化的对象。",{"type":597,"tag":606,"props":68207,"children":68208},{},[68209,68211,68216,68218,68223],{"type":603,"value":68210},"如果您在加载时将",{"type":597,"tag":629,"props":68212,"children":68214},{"className":68213},[],[68215],{"type":603,"value":68183},{"type":603,"value":68217},"设置为false,那么您只能通过调用",{"type":597,"tag":629,"props":68219,"children":68221},{"className":68220},[],[68222],{"type":603,"value":68203},{"type":603,"value":68224},"并将返回的句柄做为参数，而不能再使用真实的GameObject做为参数进行释放了。",{"type":597,"tag":606,"props":68226,"children":68227},{},[68228,68230,68235,68237,68242,68244,68250],{"type":603,"value":68229},"关于",{"type":597,"tag":629,"props":68231,"children":68233},{"className":68232},[],[68234],{"type":603,"value":68203},{"type":603,"value":68236},"格外的说明：如果调用",{"type":597,"tag":629,"props":68238,"children":68240},{"className":68239},[],[68241],{"type":603,"value":68203},{"type":603,"value":68243},"方法来释放一个实例,但是此实例不是由Addressable创建或者说在使用Addressable创建时设置了",{"type":597,"tag":629,"props":68245,"children":68247},{"className":68246},[],[68248],{"type":603,"value":68249},"trackHandle=false",{"type":603,"value":68251},"，此方法调用后将会返回false，以表示Addressable无法释放此实例",{"type":597,"tag":606,"props":68253,"children":68254},{},[68255,68256,68261,68263,68268,68270,68276,68278,68284],{"type":603,"value":8220},{"type":597,"tag":629,"props":68257,"children":68259},{"className":68258},[],[68260],{"type":603,"value":68120},{"type":603,"value":68262},"方法本身会有一些格外的开销，如果您需要实例化同一个对象很多次，比如说一帧内实例化100个，使用此方法就不再合适，可以考虑使用",{"type":597,"tag":629,"props":68264,"children":68266},{"className":68265},[],[68267],{"type":603,"value":67958},{"type":603,"value":68269},"进行资源的加载，同时自己保存返回的结果，然后再使用",{"type":597,"tag":629,"props":68271,"children":68273},{"className":68272},[],[68274],{"type":603,"value":68275},"GameObject.Instantiate()",{"type":603,"value":68277},"进行实例化，同时当所有的GameObject不再使用后，再通过",{"type":597,"tag":629,"props":68279,"children":68281},{"className":68280},[],[68282],{"type":603,"value":68283},"Addessables.Release",{"type":603,"value":68285},"方法将保存的结果进行释放。使用此种方法虽然可以提高部分性能，但是需要对其增加格外的管理。",{"type":597,"tag":606,"props":68287,"children":68288},{},[68289,68290,68295],{"type":603,"value":8220},{"type":597,"tag":629,"props":68291,"children":68293},{"className":68292},[],[68294],{"type":603,"value":68120},{"type":603,"value":68296},"方法本身会有一些格外的开销，如果您需要实例化同一个对象很多次，比如说一帧内实例化100个，可以考虑使用Addressable进行资源的加载",{"type":597,"tag":598,"props":68298,"children":68300},{"id":68299},"addressable分析工具",[68301],{"type":603,"value":68302},"Addressable分析工具",{"type":597,"tag":606,"props":68304,"children":68305},{},[68306,68307,68312,68314,68319],{"type":603,"value":27177},{"type":597,"tag":1733,"props":68308,"children":68309},{},[68310],{"type":603,"value":68311},"Window->Asset Management->Addressable Profiler",{"type":603,"value":68313},"可以打开Addressable的分析工具，在使用此工具前需要将配置中的",{"type":597,"tag":1733,"props":68315,"children":68316},{},[68317],{"type":603,"value":68318},"Send Profiler Events",{"type":603,"value":68320},"打开（默认情况下配置文件为Assets/AddressableAssetsData/AddressableAssetSettings)",{"type":597,"tag":606,"props":68322,"children":68323},{},[68324],{"type":597,"tag":719,"props":68325,"children":68327},{"alt":68318,"src":68326},"/images/2019-09-01-addressable/sendprofilerevent.png",[],{"type":597,"tag":606,"props":68329,"children":68330},{},[68331],{"type":603,"value":68332},"窗口中显示了Addressable操作的引用记数，包括加载的AssetBundle及加载的资源等等。",{"type":597,"tag":1321,"props":68334,"children":68335},{},[68336,68341,68346],{"type":597,"tag":807,"props":68337,"children":68338},{},[68339],{"type":603,"value":68340},"白色的竖线表示选择的当前的帧",{"type":597,"tag":807,"props":68342,"children":68343},{},[68344],{"type":603,"value":68345},"蓝色的背景当前加载的资源",{"type":597,"tag":807,"props":68347,"children":68348},{},[68349],{"type":603,"value":68350},"绿色的部分表示引用记数",{"type":597,"tag":606,"props":68352,"children":68353},{},[68354],{"type":597,"tag":719,"props":68355,"children":68358},{"alt":68356,"src":68357},"Profiler","/images/2019-09-01-addressable/profiler.png",[],{"type":597,"tag":598,"props":68360,"children":68362},{"id":68361},"内存清理时机",[68363],{"type":603,"value":68361},{"type":597,"tag":606,"props":68365,"children":68366},{},[68367],{"type":603,"value":68368},"即使一个资源的不再被引用也不代表此资源被卸载了，因为一个AssetBundle中可能包含有多个资源，比如：一个名称\"stuff\"的AssetBundle中包含有三个资源\"tree\",“tank”,“cow”，当资源\"tree”被加载后，能够看到\"tree\"的引用记录会是1，同时\"stuff\"的引用记数也是1，接着如果加载了\"tank\"资源，此时\"tree\"与\"tank\"的引用记数均为1，同时\"stuff\"的记数会是2。接下来卸载资源\"tree\"，则\"tree\"的引用记数将会减少为0，在\"Addressable Profiler\"中对应于\"tree\"的记录将会被删除，但是此时由于AssetBundle对应的\"stuff\"并未被卸载，因为还有其它的在使用此AssetBundle。使用AssetBundle时可以从AssetBundle中加载部分内容，但是不能部分卸载AssetBundle，只有AssetBundle中的任何资源都不再被使用时，此AssetBundle才会被卸载",{"type":597,"tag":606,"props":68370,"children":68371},{},[68372,68374,68380,68382],{"type":603,"value":68373},"当使用Unity的",{"type":597,"tag":629,"props":68375,"children":68377},{"className":68376},[],[68378],{"type":603,"value":68379},"Resources.UnloadUnusedAssets",{"type":603,"value":68381}," (查看",{"type":597,"tag":886,"props":68383,"children":68386},{"href":68384,"rel":68385},"https://docs.unity3d.com/ScriptReference/Resources.UnloadUnusedAssets.html)%E6%97%B6%EF%BC%8C%E4%B8%8A%E8%BF%B0%E6%8F%8F%E8%BF%B0%E4%B8%AD%E7%9A%84%22tree%22%E5%B0%86%E4%BC%9A%E8%A2%AB%E5%8D%B8%E8%BD%BD%E6%8E%89%EF%BC%8C%E4%BD%86%E6%98%AF%E7%94%B1%E4%BA%8E%E6%88%91%E4%BB%AC%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E5%88%B0%E6%AD%A4%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E5%8F%8D%E6%98%A0%E5%BC%95%E7%94%A8%E8%AE%B0%E6%95%B0%E7%9A%84%E5%8F%98%E5%8C%96%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E5%86%85%E5%AD%98%E4%B8%AD%E5%86%85%E5%AE%B9%E7%9A%84%E5%8F%98%E5%8C%96%E3%80%82",[890],[68387],{"type":603,"value":68388},"https://docs.unity3d.com/ScriptReference/Resources.UnloadUnusedAssets.html)时，上述描述中的\"tree\"将会被卸载掉，但是由于我们无法检测到此操作，所以我们只能反映引用记数的变化，而不是真正内存中内容的变化。",{"type":597,"tag":606,"props":68390,"children":68391},{},[68392,68394,68399],{"type":603,"value":68393},"需要注意的是：使用",{"type":597,"tag":629,"props":68395,"children":68397},{"className":68396},[],[68398],{"type":603,"value":68379},{"type":603,"value":68400},"是一个很费时的操作，一般情况下不建议频繁使用，只有在场景切换时进行调用",{"type":597,"tag":606,"props":68402,"children":68403},{},[68404,68406,68411],{"type":603,"value":68405},"此段文字有些绕口，简单来说就是由于一个AssetBundle中包含有多个资源，其中的多个资源被加载出来后，只有所有的资源均不再使用时才会正确的卸载掉AssetBundle，同时对于加载出来的资源一般情况下，即使不再使用后也不是立即卸载的，依赖于引擎底层的实现。在Unity中通过使用",{"type":597,"tag":629,"props":68407,"children":68409},{"className":68408},[],[68410],{"type":603,"value":68379},{"type":603,"value":68412},"可以将不再使用的资源给卸载掉，但是由于此接口过于耗时，并不推荐频繁使用。可以使用的情况一般有：1 进行场景切换时，2 在某些大资源被销毁时，比如说：某此UI界面占用资源特别多，当此UI界面关闭时可以调用。",{"type":597,"tag":1023,"props":68414,"children":68416},{"id":68415},"一些注意点",[68417],{"type":603,"value":68415},{"type":597,"tag":1321,"props":68419,"children":68420},{},[68421],{"type":597,"tag":807,"props":68422,"children":68423},{},[68424],{"type":603,"value":68425},"不要想着用异步加载ui..那会很卡..会出现莫名其妙的事情",{"title":591,"searchDepth":787,"depth":787,"links":68427},[68428,68429,68430,68431,68432,68433],{"id":67890,"depth":787,"text":67890},{"id":67945,"depth":787,"text":67945},{"id":68012,"depth":787,"text":68012},{"id":68091,"depth":787,"text":68094},{"id":68299,"depth":787,"text":68302},{"id":68361,"depth":787,"text":68361,"children":68434},[68435],{"id":68415,"depth":1530,"text":68415},"content:unity:2019-09-01-addressable.md","unity/2019-09-01-addressable.md","2019-09-01",{"_path":400,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":399,"description":68440,"body":68441,"_type":791,"_id":68585,"_source":793,"_file":68586,"_extension":795,"date":68438},"UGUI的合图是在什么时候发生的？Unity合大图的时机是根据设置来的。Edit->ProjectSetting->Editor如上图，可以在打包的时候合，也可以编辑器运行的时候就合。Editor中合成的大图是放在缓存目录里：Library/AtlasCache。Enabled For Builds  （Unity将精灵打包到Sprite Atlas中，仅用于已发布的版本。Editor和Play模式引用原始源纹理而不是Sprite Atlas中的纹理。）。Always Enabled   （默认情况下启用此选项。Unity将选定的纹理打包到Sprite Atlases中，Sprite在运行时引",{"type":594,"children":68442,"toc":68579},[68443,68449,68459,68467,68479,68492,68497,68510,68516,68521,68527,68545,68550,68563,68567],{"type":597,"tag":1023,"props":68444,"children":68446},{"id":68445},"ugui的合图是在什么时候发生的",[68447],{"type":603,"value":68448},"UGUI的合图是在什么时候发生的？",{"type":597,"tag":606,"props":68450,"children":68451},{},[68452,68454],{"type":603,"value":68453},"Unity合大图的时机是根据设置来的。",{"type":597,"tag":1733,"props":68455,"children":68456},{},[68457],{"type":603,"value":68458},"Edit->ProjectSetting->Editor",{"type":597,"tag":606,"props":68460,"children":68461},{},[68462],{"type":597,"tag":719,"props":68463,"children":68466},{"alt":68464,"src":68465},"1567211125212","/images/2019-09-01-spriteAtlas/1567211125212.png",[],{"type":597,"tag":606,"props":68468,"children":68469},{},[68470,68472,68478],{"type":603,"value":68471},"如上图，可以在打包的时候合，也可以编辑器运行的时候就合。Editor中合成的大图是放在缓存目录里：",{"type":597,"tag":629,"props":68473,"children":68475},{"className":68474},[],[68476],{"type":603,"value":68477},"Library/AtlasCache",{"type":603,"value":758},{"type":597,"tag":1321,"props":68480,"children":68481},{},[68482,68487],{"type":597,"tag":807,"props":68483,"children":68484},{},[68485],{"type":603,"value":68486},"Enabled For Builds  （Unity将精灵打包到Sprite Atlas中，仅用于已发布的版本。Editor和Play模式引用原始源纹理而不是Sprite Atlas中的纹理。）。",{"type":597,"tag":807,"props":68488,"children":68489},{},[68490],{"type":603,"value":68491},"Always Enabled   （默认情况下启用此选项。Unity将选定的纹理打包到Sprite Atlases中，Sprite在运行时引用打包的Textures。但是，Sprites将在Editor模式期间引用原始未压缩的纹理。）。",{"type":597,"tag":606,"props":68493,"children":68494},{},[68495],{"type":603,"value":68496},"简单的说:",{"type":597,"tag":1321,"props":68498,"children":68499},{},[68500,68505],{"type":597,"tag":807,"props":68501,"children":68502},{},[68503],{"type":603,"value":68504},"如果想测试spritepacker是否生效以及代码相关..这时候选择Always Enabled..可以理解为生产模式",{"type":597,"tag":807,"props":68506,"children":68507},{},[68508],{"type":603,"value":68509},"如果平时开发Enabled For Builds,只有打包的时候才构建..可以理解为开发模式",{"type":597,"tag":1023,"props":68511,"children":68513},{"id":68512},"include-in-build到底干了什么",[68514],{"type":603,"value":68515},"Include in Build到底干了什么？",{"type":597,"tag":606,"props":68517,"children":68518},{},[68519],{"type":603,"value":68520},"勾选了Include in Build后，图集资源会被打进App包体里（不是AssetBundle包）。如果图集是AssetBundle包管理的，最好不要勾选它，会造成资源双份。至于哪些资源会双份，需要实验下看看。",{"type":597,"tag":1023,"props":68522,"children":68524},{"id":68523},"禁用include-in-build使用late-binding",[68525],{"type":603,"value":68526},"禁用Include in Build,使用Late Binding",{"type":597,"tag":803,"props":68528,"children":68529},{},[68530,68535,68540],{"type":597,"tag":807,"props":68531,"children":68532},{},[68533],{"type":603,"value":68534},"只要精灵打包到任何精灵图集内，但精灵图集未绑定为默认图集（例如未选中“Include in build”选项），精灵便会在场景中不可见。",{"type":597,"tag":807,"props":68536,"children":68537},{},[68538],{"type":603,"value":68539},"用户可以监听回调 SpriteAtlas.atlasRequested。",{"type":597,"tag":807,"props":68541,"children":68542},{},[68543],{"type":603,"value":68544},"此委托方法将提供一个要绑定的图集标签和一个接受 SpriteAtlas 资源的 System.Action。用户应按任意方式（脚本引用、Resources.load、资源包）加载该资源，并将该资源提供给 System.Action。",{"type":597,"tag":606,"props":68546,"children":68547},{},[68548],{"type":603,"value":68549},"注意:",{"type":597,"tag":1321,"props":68551,"children":68552},{},[68553,68558],{"type":597,"tag":807,"props":68554,"children":68555},{},[68556],{"type":603,"value":68557},"SpriteAtlas.atlasRequested只会请求一次无论成功还是失败,所以要确保你的atlasRequested回调一定能返回正确的值",{"type":597,"tag":807,"props":68559,"children":68560},{},[68561],{"type":603,"value":68562},"当使用addressable异步加载spriteatlas的时候,也会触发SpriteAtlas.atlasRequested,这个时候内存中可能会存在两份资源的引用..记得释放其中的一份",{"type":597,"tag":1023,"props":68564,"children":68565},{"id":32788},[68566],{"type":603,"value":32788},{"type":597,"tag":1321,"props":68568,"children":68569},{},[68570],{"type":597,"tag":807,"props":68571,"children":68572},{},[68573],{"type":597,"tag":886,"props":68574,"children":68577},{"href":68575,"rel":68576},"https://connect.unity.com/doc/Manual/SpriteAtlas",[890],[68578],{"type":603,"value":68575},{"title":591,"searchDepth":787,"depth":787,"links":68580},[68581,68582,68583,68584],{"id":68445,"depth":1530,"text":68448},{"id":68512,"depth":1530,"text":68515},{"id":68523,"depth":1530,"text":68526},{"id":32788,"depth":1530,"text":32788},"content:unity:2019-09-01-spriteAtlas.md","unity/2019-09-01-spriteAtlas.md",{"_path":273,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":272,"description":68588,"body":68589,"_type":791,"_id":69033,"_source":793,"_file":69034,"_extension":795,"date":69035},"安装scoop前提版本大于等于3的powershell> $psversiontable.psversion.major\n确保您已允许PowerShell执行本地脚本> set-executionpolicy remotesigned -scope currentuser\n常用命令#打开powershell,win+r,然后输入powershell\n#更改策略\nSet-ExecutionPolicy RemoteSigned -scope CurrentUser\n\n#安装\niex (new-object net.webclient).downloadstring('https://get.sc",{"type":594,"children":68590,"toc":69025},[68591,68596,68601,68609,68614,68622,68627,68635,68648,68653,68664,68674,68679,68687,68692,68700,68705,68713,68718,68727,68745,68754,68766,68775,68780,68785,68794,68799,68807,68812,68823,68831,68837,68845,68851,68856,68864,68869,68877,68882,68893,68902,68907,68918,68923,68928,68936,68941,68946,68954,68959,68965,68970,68978,68991,68999,69004,69012,69017],{"type":597,"tag":857,"props":68592,"children":68594},{"id":68593},"安装scoop前提",[68595],{"type":603,"value":68593},{"type":597,"tag":606,"props":68597,"children":68598},{},[68599],{"type":603,"value":68600},"版本大于等于3的powershell",{"type":597,"tag":621,"props":68602,"children":68604},{"code":68603},"> $psversiontable.psversion.major\n",[68605],{"type":597,"tag":629,"props":68606,"children":68607},{"__ignoreMap":591},[68608],{"type":603,"value":68603},{"type":597,"tag":606,"props":68610,"children":68611},{},[68612],{"type":603,"value":68613},"确保您已允许PowerShell执行本地脚本",{"type":597,"tag":621,"props":68615,"children":68617},{"code":68616},"> set-executionpolicy remotesigned -scope currentuser\n",[68618],{"type":597,"tag":629,"props":68619,"children":68620},{"__ignoreMap":591},[68621],{"type":603,"value":68616},{"type":597,"tag":857,"props":68623,"children":68625},{"id":68624},"常用命令",[68626],{"type":603,"value":68624},{"type":597,"tag":621,"props":68628,"children":68630},{"code":68629},"#打开powershell,win+r,然后输入powershell\n#更改策略\nSet-ExecutionPolicy RemoteSigned -scope CurrentUser\n\n#安装\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n\n#安装git或者特定版本\nscoop install git\nscoop install shotcut@21.09.13 \n\n#开启extras库\nscoop bucket add extras\n\n#开启java库\nscoop bucket add java\n\n#更新\nscoop update\n\n#查看安装软件列表\nscoop list\n\n#搜索某软件\nscoop search xxx\n\n#打开某软件官网\nscoop home xxx\n\n#查看某软件安装信息\nscoop info xxx\n\n#查看某软件执行命令位置\nscoop which xxx\n\n#查看某软件当前状态，是否有更新等信息\nscoop status xxx\n\n#更新某软件\nscoop update xxx\n\n#卸载某软件,以xxx为例\nscoop uninstall xxx\n",[68631],{"type":597,"tag":629,"props":68632,"children":68633},{"__ignoreMap":591},[68634],{"type":603,"value":68629},{"type":597,"tag":606,"props":68636,"children":68637},{},[68638,68640,68647],{"type":603,"value":68639},"这里是一个按照 Github score（由 Star 数量、Fork 数量和 App 数量综合决定的 Github score）排列的 bucket 列表：",{"type":597,"tag":886,"props":68641,"children":68644},{"href":68642,"rel":68643},"https://github.com/rasa/scoop-directory/blob/master/by-score.md",[890],[68645],{"type":603,"value":68646},"Scoop buckets by Github score",{"type":603,"value":758},{"type":597,"tag":857,"props":68649,"children":68651},{"id":68650},"安装scoop到自定义目录",[68652],{"type":603,"value":68650},{"type":597,"tag":606,"props":68654,"children":68655},{},[68656,68658],{"type":603,"value":68657},"如果重新安装系统.只需要将shime路径添加到环境变量path中",{"type":597,"tag":629,"props":68659,"children":68661},{"className":68660},[],[68662],{"type":603,"value":68663},"D:\\Applications\\Scoop\\shims",{"type":597,"tag":621,"props":68665,"children":68669},{"code":68666,"language":39591,"meta":591,"className":68667},"set-executionpolicy remotesigned -scope currentuser\n\n[environment]::setEnvironmentVariable('SCOOP','D:\\Applications\\Scoop','User')\n\n[environment]::setEnvironmentVariable('Path',[System.Environment]::GetEnvironmentVariable('Path',[System.EnvironmentVariableTarget]::User)+\";D:\\Applications\\Scoop\\shims\",'User')\n\n$env:SCOOP='D:\\Applications\\Scoop'\n\n[environment]::setEnvironmentVariable('SCOOP_GLOBAL','D:\\Applications\\ScoopGlobal','Machine')\n\n[environment]::setEnvironmentVariable('Path',[System.Environment]::GetEnvironmentVariable('Path',[System.EnvironmentVariableTarget]::Machine)+\";D:\\Applications\\ScoopGlobal\\shims\",'Machine')\n\n$env:SCOOP_GLOBAL='D:\\Applications\\ScoopGlobal'\n",[68668],"language-powershell",[68670],{"type":597,"tag":629,"props":68671,"children":68672},{"__ignoreMap":591},[68673],{"type":603,"value":68666},{"type":597,"tag":606,"props":68675,"children":68676},{},[68677],{"type":603,"value":68678},"使用第二种方法:",{"type":597,"tag":621,"props":68680,"children":68682},{"code":68681},"\n[environment]::setEnvironmentVariable('Path',[System.Environment]::GetEnvironmentVariable('Path',[System.EnvironmentVariableTarget]::User)+\";D:\\Applications\\Scoop\\shims\",'User')\n# 然后关闭powershell 重新打开\nscoop config root_path D:\\Applications\\Scoop\n",[68683],{"type":597,"tag":629,"props":68684,"children":68685},{"__ignoreMap":591},[68686],{"type":603,"value":68681},{"type":597,"tag":606,"props":68688,"children":68689},{},[68690],{"type":603,"value":68691},"一个脚本",{"type":597,"tag":621,"props":68693,"children":68695},{"code":68694},"# 获取当前用户环境变量的\"Path\"\n$currentPath = [Environment]::GetEnvironmentVariable('Path', 'User')\n\n# 检查是否包含指定路径\n$targetPath = 'D:\\Applications\\Scoop\\shims'\n$containsTargetPath = $currentPath -split ';' -contains $targetPath\n\nif (-not $containsTargetPath) {\n    # 如果不包含指定路径，则添加\n    $newPath = $currentPath + ';' + $targetPath\n    [Environment]::SetEnvironmentVariable('Path', $newPath, 'User')\n    Write-Host \"已成功添加路径: $targetPath\"\n\n    # 刷新环境变量（仅适用于当前会话）\n    $env:Path = [Environment]::GetEnvironmentVariable('Path', 'User')\n\n} else {\n    Write-Host \"路径已存在: $targetPath\"\n}\n\n# 打印出所有的\"Path\"\n$newPathList = [Environment]::GetEnvironmentVariable('Path', 'User') -split ';'\nWrite-Host \"所有的Path:\"\n$newPathList\n\n\n# 设置SCOOP的ROOT PATH\nscoop config root_path D:\\Applications\\Scoop\n\n# 打印所有配置\nscoop config\n\n# 添加git仓库都为 安全\ngit config --global --add safe.directory \"*\"\n",[68696],{"type":597,"tag":629,"props":68697,"children":68698},{"__ignoreMap":591},[68699],{"type":603,"value":68694},{"type":597,"tag":606,"props":68701,"children":68702},{},[68703],{"type":603,"value":68704},"重置应用以解决冲突,会重置环境变量,快捷方式等..",{"type":597,"tag":621,"props":68706,"children":68708},{"code":68707},"scoop reset *\n#检查潜在的问题..执行下看看使用scoop会有什么问题\nscoop checkup\n#如果使用了aria2感觉慢的话可以修改下参数或者关闭\nscoop config aria2-max-connection-per-server 16\nscoop config aria2-split 16\nscoop config aria2-min-split-size 1M\nscoop config aria2-enabled false  \n#下面是日常更新软件命令\nsudo scoop update * -g ; scoop update * ; sudo scoop cleanup * -g ; scoop cleanup *\n# 查看 Scoop 还能直接识别哪些 bucket\nscoop bucket known\n",[68709],{"type":597,"tag":629,"props":68710,"children":68711},{"__ignoreMap":591},[68712],{"type":603,"value":68707},{"type":597,"tag":1023,"props":68714,"children":68716},{"id":68715},"快捷方式",[68717],{"type":603,"value":68715},{"type":597,"tag":621,"props":68719,"children":68722},{"code":68720,"language":39591,"meta":591,"className":68721},"Invoke-Item \"~\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Scoop Apps\"\n",[68668],[68723],{"type":597,"tag":629,"props":68724,"children":68725},{"__ignoreMap":591},[68726],{"type":603,"value":68720},{"type":597,"tag":606,"props":68728,"children":68729},{},[68730,68735,68737,68743],{"type":597,"tag":1080,"props":68731,"children":68732},{},[68733],{"type":603,"value":68734},"将Scoop安装到自定义目录",{"type":603,"value":68736},"\n假设目标目录是",{"type":597,"tag":629,"props":68738,"children":68740},{"className":68739},[],[68741],{"type":603,"value":68742},"D:\\Applications\\Scoop",{"type":603,"value":68744},",在PowerShell命令控制台中运行：",{"type":597,"tag":621,"props":68746,"children":68749},{"code":68747,"language":39591,"meta":591,"className":68748},"[environment]::setEnvironmentVariable('SCOOP','D:\\Applications\\Scoop','User')\n$env:SCOOP='D:\\Applications\\Scoop'\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n",[68668],[68750],{"type":597,"tag":629,"props":68751,"children":68752},{"__ignoreMap":591},[68753],{"type":603,"value":68747},{"type":597,"tag":606,"props":68755,"children":68756},{},[68757,68759,68765],{"type":603,"value":68758},"将全局应用安装到自定义目录,假设目标目录是",{"type":597,"tag":629,"props":68760,"children":68762},{"className":68761},[],[68763],{"type":603,"value":68764},"D:\\Applications\\ScoopGlobal",{"type":603,"value":68744},{"type":597,"tag":621,"props":68767,"children":68770},{"code":68768,"language":39591,"meta":591,"className":68769},"[environment]::setEnvironmentVariable('SCOOP_GLOBAL','D:\\Applications\\ScoopGlobal','Machine')\n$env:SCOOP_GLOBAL='D:\\Applications\\ScoopGlobal'\n",[68668],[68771],{"type":597,"tag":629,"props":68772,"children":68773},{"__ignoreMap":591},[68774],{"type":603,"value":68768},{"type":597,"tag":1023,"props":68776,"children":68778},{"id":68777},"安装应用",[68779],{"type":603,"value":68777},{"type":597,"tag":606,"props":68781,"children":68782},{},[68783],{"type":603,"value":68784},"以我常用应用为例(可作为脚本文件,后缀ps1)",{"type":597,"tag":621,"props":68786,"children":68789},{"code":68787,"language":39591,"meta":591,"className":68788},"###安装scoop并自定义安装路径\n[environment]::setEnvironmentVariable('SCOOP','D:\\Applications\\Scoop','User')\n$env:SCOOP='D:\\Applications\\Scoop'\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n[environment]::setEnvironmentVariable('SCOOP_GLOBAL','D:\\Applications\\ScoopGlobal','Machine')\n$env:SCOOP_GLOBAL='D:\\Applications\\ScoopGlobal'\n\n#git,程序员必备,只有安装了git才能添加其他桶\nscoop install git;\n#arias2 scoop 下载会用到\nscoop install aria2;\n#7zip 一些app会用到\nscoop install 7zip\n#scoop checkup提示装的软件\nscoop install wixtoolset\n\n###添加桶\n#scoop内置的桶\n#scoop bucket known;\n\n### D:\\Applications\\Scoop\\buckets,如果发现bucket中有错误可以检查并删除\nscoop bucket add extras;\nscoop bucket add Java;\nscoop bucket add versions;\n \n# 自用的一个bucket\nscoop bucket add Hass https://github.com/zhemima/Scoop-Hass\n\n\n\n#一个还不错的\nshovel bucket add 'ash258.ash258' 'https://github.com/Ash258/Shovel-Ash258.git'\n#因为ash258的bucket对scoop做了改变,想要安装ash258,需要配置和安装以下\nscoop install 7zip git\nscoop config SCOOP_REPO 'https://github.com/Ash258/Scoop-Core'\nscoop update\nscoop status\nscoop checkup\n\n\n\n\n\n### 添加代理\nscoop config proxy 127.0.0.1:1080\n# 删除代理\nscoop config rm proxy\n\n\n###安装全局应用\nscoop install apache -g;\nscoop install redis -g;\nscoop install mysql -g;\n# jdk最好使用8,否则android-sdk会有问题\nscoop install ojdkbuild8 -g; \nscoop install php -g;\n#整合apache php\niex (new-object net.webclient).downloadstring('https://gist.githubusercontent.com/nilkesede/c98a275b80b6d373131df82eaba96c63/raw/apache-php-init.ps1')\n# 或者手动修改apache配置\n#LoadModule php7_module 'C:/Users/xxxxx/scoop/apps/php71/current/php7apache2_4.dll'\n#AddHandler application/x-httpd-php .php\n#PHPIniDir \"C:\\Users\\xxxxx\\scoop\\apps\\php71\\current\"\n\n###安装APP\n#使用nvm安装nodejs  https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\nscoop install nvm\nnvm list available\nnvm install 12.18.2\n#效率启动神器\nscoop install wox;\n#文件检索\nscoop install everything;\n#解压\nscoop install bandizip;\n#远程终端\nscoop install MobaXterm;\nscoop install electerm;\n#桌面控制\nscoop install teamviewer;\n#markdown编写\nscoop install typora;\n#编辑器 注意使用vscode-portable,这样data文件夹就会持久化在scoop,而不是c盘用户目录\n#From \"$env:USERPROFILE\\.vscode\\extensions\" to \"$env:USERPROFILE\\scoop\\persist\\vscode-portable\\data\\extensions\"\n#From \"$env:APPDATA\\Code\" to \"$env:USERPROFILE\\scoop\\persist\\vscode-portable\\data\\user-data\"\n#如果想添加右键菜单.执行下current文件夹下的vscode-install-context.reg\nscoop install vscode-portable;\n#ditto 剪贴板\nscoop install ditto\n#postman\nscoop install postman\n#heidisql\nscoop install heidisql\n#imageglass 图片浏览器\nscoop install imageglass\n#quick look\nscoop install quicklook\n#obs  录制视频或者直播\nscoop install obs-studio\n# 录像软件\nscoop install captura\n#switchhosts\nscoop install switchhosts\n# gradle\nscoop install gradle\n# android-sdk\nscoop install android-sdk\n# 安装ndk 老版本下载https://developer.android.com/ndk/downloads/older_releases.html\n# sdkmanager ndk-bundle\n# shadowsocksr-csharp\nscoop install shadowsocksr-csharp\n# 截图软件\nscoop install picpick\nscoop install snipaste\nscoop install sharex \nscoop install lightshot\n#xmind8\nscoop install XMind2020\n# android-studio\nscoop install android-studio\n#记住sourcetree的git最好使用内嵌版本\nscoop install sourcetree\n# php的包工具\nscoop intstall composer\n# 反向代理\nscoop install frp\n#网易云音乐\nscoop install neteasemusic\n# ftp工具\nscoop install filezilla \n# pdf阅读工具\n scoop install foxit-reader\n# 播放器\nscoop install potplayer \n# draw工程图,uml工具\nscoop install draw.io\n# 定时提醒休息工具\nscoop install wnr\n# 投屏工具\nscoop install scrcpy \n# 卸载工具\nscoop install geekuninstaller\n#浏览器\nscoop install  firefox-developer-zh-cn\nscoop install  googlechrome\n#wechat\nscoop install wechat\n#steam\nscoop install steam\n# pwsh\nscoop install pwsh\n#windows teraminal\nscoop install windows-terminal\n# 反编译 ilspy  https://github.com/sailro/Reflexil下载Reflexil将Reflexil.ILSpy.Plugin.dll直接扔到ilspy目录下即行\nscoop install ilspy\nscoop install dnspy\n#win+x菜单编辑\nscoop install WinXMenuEditor   \n#发送到菜单编辑\nscoop install SendToMenuEditor\n# 上下文菜单\nscoop install EasyContextMenu\n# 备份开始屏幕\nscoop install BackupStartMenuLayout\n#定时关机\nscoop install kshutdown\n# 创建可启动U盘的工具  https://www.ventoy.net/cn/index.html\nscoop install ventoy\n# 修改dns工具\nscoop install dnsjumper\n#space sniffer 查看硬盘被哪些大文件占用\nscoop install spacesniffer\n#shotcut 视频剪辑工具\nscoop install shotcut\n",[68668],[68790],{"type":597,"tag":629,"props":68791,"children":68792},{"__ignoreMap":591},[68793],{"type":603,"value":68787},{"type":597,"tag":857,"props":68795,"children":68797},{"id":68796},"apache",[68798],{"type":603,"value":68796},{"type":597,"tag":621,"props":68800,"children":68802},{"code":68801},"sudo httpd -k install -n apache  \nstart-service apache\nremove-service apache\n",[68803],{"type":597,"tag":629,"props":68804,"children":68805},{"__ignoreMap":591},[68806],{"type":603,"value":68801},{"type":597,"tag":598,"props":68808,"children":68810},{"id":68809},"修改配置",[68811],{"type":603,"value":68809},{"type":597,"tag":606,"props":68813,"children":68814},{},[68815,68817],{"type":603,"value":68816},"文件路径",{"type":597,"tag":629,"props":68818,"children":68820},{"className":68819},[],[68821],{"type":603,"value":68822},"D:\\Applications\\ScoopGlobal\\apps\\apache\\current\\conf\\httpd.conf",{"type":597,"tag":621,"props":68824,"children":68826},{"code":68825},"Define SRVROOT \"D:\\Applications\\ScoopGlobal\\apps\\apache\\current\"\nServerName localhost\n",[68827],{"type":597,"tag":629,"props":68828,"children":68829},{"__ignoreMap":591},[68830],{"type":603,"value":68825},{"type":597,"tag":857,"props":68832,"children":68834},{"id":68833},"redis",[68835],{"type":603,"value":68836},"Redis",{"type":597,"tag":621,"props":68838,"children":68840},{"code":68839},"redis-server --service-install D:\\Applications\\ScoopGlobal\\apps\\redis\\current\\redis.windows-service.conf --loglevel verbose\n",[68841],{"type":597,"tag":629,"props":68842,"children":68843},{"__ignoreMap":591},[68844],{"type":603,"value":68839},{"type":597,"tag":857,"props":68846,"children":68848},{"id":68847},"mysql",[68849],{"type":603,"value":68850},"MySQL",{"type":597,"tag":606,"props":68852,"children":68853},{},[68854],{"type":603,"value":68855},"注册MySQL服务,(因为scoop是低污染的,所以要自己做):",{"type":597,"tag":621,"props":68857,"children":68859},{"code":68858},"mysqld --install MySQL --defaults-file=\"D:\\Applications\\ScoopGlobal\\apps\\mysql\\current\\my.ini\"\n",[68860],{"type":597,"tag":629,"props":68861,"children":68862},{"__ignoreMap":591},[68863],{"type":603,"value":68858},{"type":597,"tag":606,"props":68865,"children":68866},{},[68867],{"type":603,"value":68868},"注意mysql8密码可能认证有错误my.ini中需要设置",{"type":597,"tag":621,"props":68870,"children":68872},{"code":68871},"default_authentication_plugin=mysql_native_password \n",[68873],{"type":597,"tag":629,"props":68874,"children":68875},{"__ignoreMap":591},[68876],{"type":603,"value":68871},{"type":597,"tag":857,"props":68878,"children":68880},{"id":68879},"pwsh",[68881],{"type":603,"value":68879},{"type":597,"tag":606,"props":68883,"children":68884},{},[68885,68887],{"type":603,"value":68886},"将pwsh添加到terminal中,配置默认路径:",{"type":597,"tag":629,"props":68888,"children":68890},{"className":68889},[],[68891],{"type":603,"value":68892},"C:\\Users\\zhepama\\AppData\\Local\\Microsoft\\Windows Terminal\\settings.json",{"type":597,"tag":621,"props":68894,"children":68897},{"code":68895,"language":57856,"meta":591,"className":68896},"// This file was initially generated by Windows 终端(未打包) 1.0.200517002-release1.0\n// It should still be usable in newer versions, but newer versions might have additional\n// settings, help text, or changes that you will not see unless you clear this file\n// and let us generate a new one for you.\n\n// To view the default settings, hold \"alt\" while clicking on the \"Settings\" button.\n// For documentation on these settings, see: https://aka.ms/terminal-documentation\n{\n  \"$schema\": \"https://aka.ms/terminal-profiles-schema\",\n\n  \"defaultProfile\": \"{90cbdc15-f4fe-49d2-a245-ec066b70845f}\",\n\n  // You can add more global application settings here.\n  // To learn more about global settings, visit https://aka.ms/terminal-global-settings\n\n  // If enabled, selections are automatically copied to your clipboard.\n  \"copyOnSelect\": false,\n\n  // If enabled, formatted data is also copied to your clipboard\n  \"copyFormatting\": false,\n\n  // A profile specifies a command to execute paired with information about how it should look and feel.\n  // Each one of them will appear in the 'New Tab' dropdown,\n  //   and can be invoked from the commandline with `wt.exe -p xxx`\n  // To learn more about profiles, visit https://aka.ms/terminal-profile-settings\n  \"profiles\": {\n    \"defaults\": {\n      // Put settings here that you want to apply to all profiles.\n    },\n    \"list\": [\n      {\n        // Make changes here to the powershell.exe profile.\n        \"guid\": \"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\",\n        \"name\": \"Windows PowerShell\",\n        \"commandline\": \"powershell.exe\",\n        \"hidden\": false\n      },\n      {\n        // Make changes here to the cmd.exe profile.\n        \"guid\": \"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}\",\n        \"name\": \"命令提示符\",\n        \"commandline\": \"cmd.exe\",\n        \"hidden\": false\n      },\n      {\n        \"guid\": \"{b453ae62-4e3d-5e58-b989-0a998ec441b8}\",\n        \"hidden\": false,\n        \"name\": \"Azure Cloud Shell\",\n        \"source\": \"Windows.Terminal.Azure\"\n      },\n      {\n        \"guid\": \"{90cbdc15-f4fe-49d2-a245-ec066b70845f}\",\n        \"name\": \"pwsh\",\n        \"commandline\": \"D:\\\\Application\\\\Scoop\\\\apps\\\\pwsh\\\\current\\\\pwsh.exe\",\n        \"hidden\": false,\n        \"startingDirectory\": \"%USERPROFILE%\"\n      }\n    ]\n  },\n\n  // Add custom color schemes to this array.\n  // To learn more about color schemes, visit https://aka.ms/terminal-color-schemes\n  \"schemes\": [],\n\n  // Add custom keybindings to this array.\n  // To unbind a key combination from your defaults.json, set the command to \"unbound\".\n  // To learn more about keybindings, visit https://aka.ms/terminal-keybindings\n  \"keybindings\": [\n    // Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.\n    // These two lines additionally bind them to Ctrl+C and Ctrl+V.\n    // To learn more about selection, visit https://aka.ms/terminal-selection\n    {\n      \"command\": {\n        \"action\": \"copy\",\n        \"singleLine\": false\n      },\n      \"keys\": \"ctrl+c\"\n    },\n    {\n      \"command\": \"paste\",\n      \"keys\": \"ctrl+v\"\n    },\n\n    // Press Ctrl+Shift+F to open the search box\n    {\n      \"command\": \"find\",\n      \"keys\": \"ctrl+shift+f\"\n    },\n\n    // Press Alt+Shift+D to open a new pane.\n    // - \"split\": \"auto\" makes this pane open in the direction that provides the most surface area.\n    // - \"splitMode\": \"duplicate\" makes the new pane use the focused pane's profile.\n    // To learn more about panes, visit https://aka.ms/terminal-panes\n    {\n      \"command\": {\n        \"action\": \"splitPane\",\n        \"split\": \"auto\",\n        \"splitMode\": \"duplicate\"\n      },\n      \"keys\": \"alt+shift+d\"\n    }\n  ]\n}\n",[57858],[68898],{"type":597,"tag":629,"props":68899,"children":68900},{"__ignoreMap":591},[68901],{"type":603,"value":68895},{"type":597,"tag":857,"props":68903,"children":68905},{"id":68904},"自制bucket",[68906],{"type":603,"value":68904},{"type":597,"tag":606,"props":68908,"children":68909},{},[68910,68912],{"type":603,"value":68911},"最佳方式是使用模板 ",{"type":597,"tag":886,"props":68913,"children":68916},{"href":68914,"rel":68915},"https://github.com/Ash258/GenericBucket",[890],[68917],{"type":603,"value":68914},{"type":597,"tag":1023,"props":68919,"children":68921},{"id":68920},"如何解压exe的程序",[68922],{"type":603,"value":68920},{"type":597,"tag":606,"props":68924,"children":68925},{},[68926],{"type":603,"value":68927},"首先下载的时候后面加上#/dl.7z类似的后缀..然后scoop保存的时候.会把他存在7z格式的文件夹",{"type":597,"tag":621,"props":68929,"children":68931},{"code":68930},"    \"architecture\": {\n        \"64bit\": {\n            \"url\": \"https://github.com/RoderickQiu/wnr/releases/download/v1.17.1/wnr-1.17.1-Setup-64.exe#/dl.7z\",\n            \"hash\": \"BE14DE68FDBFB3663F57B6B28E8B0CC90AE876DD06CA899839BEB9377FE21436\"\n        },\n        \"32bit\": {\n            \"url\": \"https://github.com/RoderickQiu/wnr/releases/download/v1.17.1/wnr-1.17.1-Setup-32.exe#/dl.7z\",\n            \"hash\": \"9C437170019E8AFC82B64A5475E349602E03A9493DD6AC6CACF58FDFD75762DD\"\n        }\n    },\n",[68932],{"type":597,"tag":629,"props":68933,"children":68934},{"__ignoreMap":591},[68935],{"type":603,"value":68930},{"type":597,"tag":606,"props":68937,"children":68938},{},[68939],{"type":603,"value":68940},"例如上面旧会被存在scoop/cache/wnr#1.17.1#https_github.com_RoderickQiu_wnr_releases_download_v1.17.1_wnr-1.17.1-Setup-64.exe_dl.7z",{"type":597,"tag":606,"props":68942,"children":68943},{},[68944],{"type":603,"value":68945},"然后旧可以解压了",{"type":597,"tag":621,"props":68947,"children":68949},{"code":68948},"    \"installer\": {\n        \"script\": [\n            \"Expand-7zipArchive -Path (Join-Path $dir '$PLUGINSDIR\\\\*.7z') -DestinationPath $dir\",\n            \"Remove-Item -Path (Join-Path $dir '$PLUGINSDIR') -Recurse\",\n            \"Remove-Item \\\"$dir\\\\Uninstall wnr.exe\\\"\"\n        ]\n    },\n",[68950],{"type":597,"tag":629,"props":68951,"children":68952},{"__ignoreMap":591},[68953],{"type":603,"value":68948},{"type":597,"tag":606,"props":68955,"children":68956},{},[68957],{"type":603,"value":68958},"安装脚本都是执行在Scoop\\apps\\wnr\\11.XXX\\下面",{"type":597,"tag":1023,"props":68960,"children":68962},{"id":68961},"导出-scoop-软件列表",[68963],{"type":603,"value":68964},"导出 Scoop 软件列表",{"type":597,"tag":606,"props":68966,"children":68967},{},[68968],{"type":603,"value":68969},"备份 Scoop 的方式为：",{"type":597,"tag":621,"props":68971,"children":68973},{"code":68972},"scoop export > scoop.txt\n",[68974],{"type":597,"tag":629,"props":68975,"children":68976},{"__ignoreMap":591},[68977],{"type":603,"value":68972},{"type":597,"tag":606,"props":68979,"children":68980},{},[68981,68983,68989],{"type":603,"value":68982},"可以对 Scoop 的导出列表进行额外处理，以方便后续安装。使用 VSCode 打开 ",{"type":597,"tag":629,"props":68984,"children":68986},{"className":68985},[],[68987],{"type":603,"value":68988},"scoop.txt",{"type":603,"value":68990}," 文件，以正则表达式搜索：",{"type":597,"tag":621,"props":68992,"children":68994},{"code":68993},"(.*?) .*\n",[68995],{"type":597,"tag":629,"props":68996,"children":68997},{"__ignoreMap":591},[68998],{"type":603,"value":68993},{"type":597,"tag":606,"props":69000,"children":69001},{},[69002],{"type":603,"value":69003},"并全部替换成：",{"type":597,"tag":621,"props":69005,"children":69007},{"code":69006},"$1\n",[69008],{"type":597,"tag":629,"props":69009,"children":69010},{"__ignoreMap":591},[69011],{"type":603,"value":69006},{"type":597,"tag":606,"props":69013,"children":69014},{},[69015],{"type":603,"value":69016},"注意正则式中包含空格，请完整复制。",{"type":597,"tag":606,"props":69018,"children":69019},{},[69020],{"type":597,"tag":719,"props":69021,"children":69024},{"alt":69022,"src":69023},"VSCode 中的正则式替换","/images/2019-08-20-scoop-use/03.jpg",[],{"title":591,"searchDepth":787,"depth":787,"links":69026},[69027,69028,69029],{"id":68715,"depth":1530,"text":68715},{"id":68777,"depth":1530,"text":68777},{"id":68809,"depth":787,"text":68809,"children":69030},[69031,69032],{"id":68920,"depth":1530,"text":68920},{"id":68961,"depth":1530,"text":68964},"content:tool:2019-08-20-scoop-use.md","tool/2019-08-20-scoop-use.md","2019-08-20",{"_path":394,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":393,"description":69037,"body":69038,"_type":791,"_id":70376,"_source":793,"_file":70377,"_extension":795,"date":70378},"Raycasters 用来检测当前事件发送给哪个对象，检测原理就是 Raycast。当给定一个屏幕坐标系中的位置，Raycasters 就会利用射线检测寻找潜在的对象，并返回一个离当前屏幕最近的对象。",{"type":594,"children":69039,"toc":70366},[69040,69044,69049,69067,69072,69077,69085,69091,69096,69109,69117,69151,69156,69162,69167,69179,69205,69230,69238,69243,69251,69278,69286,69307,69312,69318,69330,69343,69348,69389,69395,69400,69405,69410,69412,69491,69520,69539,69545,69556,69569,69574,69582,69587,69600,69606,69611,69619,69631,69676,69710,69716,69721,69729,69741,69747,69752,69763,69775,69874,69923,69929,69934,69940,69952,70000,70006,70016,70024,70036,70041,70046,70058,70066,70087,70095,70100,70108,70128,70136,70184,70189,70197,70217,70225,70230,70235,70240,70248,70261,70269,70274,70282,70290,70295,70303,70308,70313,70327,70335,70340,70348,70353,70361],{"type":597,"tag":606,"props":69041,"children":69042},{},[69043],{"type":603,"value":69037},{"type":597,"tag":606,"props":69045,"children":69046},{},[69047],{"type":603,"value":69048},"在 Unity Raycasters 中有三种类型的 Raycasters:",{"type":597,"tag":1321,"props":69050,"children":69051},{},[69052,69057,69062],{"type":597,"tag":807,"props":69053,"children":69054},{},[69055],{"type":603,"value":69056},"Graphic Raycaster - 存在于 Canvas 下，用于检测 Canvas 中所有的物体",{"type":597,"tag":807,"props":69058,"children":69059},{},[69060],{"type":603,"value":69061},"Physics 2D Raycaster - 用于检测 2D 物体",{"type":597,"tag":807,"props":69063,"children":69064},{},[69065],{"type":603,"value":69066},"Physics Raycaster - 用于检测 3D 物体",{"type":597,"tag":606,"props":69068,"children":69069},{},[69070],{"type":603,"value":69071},"接下来，就来分析一下各个类型 Raycaster 的源码来看看其的工作流程。",{"type":597,"tag":606,"props":69073,"children":69074},{},[69075],{"type":603,"value":69076},"Raycast 在 Event System 流程中所处的位置大致如下图:",{"type":597,"tag":606,"props":69078,"children":69079},{},[69080],{"type":597,"tag":719,"props":69081,"children":69084},{"alt":69082,"src":69083},"unity_event_system_raycaster.png","/images/2019-08-12-ugui-Raycasters/unity_event_system_raycaster.png",[],{"type":597,"tag":598,"props":69086,"children":69088},{"id":69087},"baseraycaster-类",[69089],{"type":603,"value":69090},"BaseRaycaster 类",{"type":597,"tag":606,"props":69092,"children":69093},{},[69094],{"type":603,"value":69095},"Unity Raycasters 中的三个 Raycaster 类都继承自 BaseRaycaster。首先就来看看 BaseRaycaster 类。",{"type":597,"tag":606,"props":69097,"children":69098},{},[69099,69101,69107],{"type":603,"value":69100},"BaseRaycaster 类很简单，它包含一个抽象方法 ",{"type":597,"tag":629,"props":69102,"children":69104},{"className":69103},[],[69105],{"type":603,"value":69106},"Raycast",{"type":603,"value":69108},"，定义如下:",{"type":597,"tag":621,"props":69110,"children":69112},{"code":69111},"abstract void Raycast(PointerEventData eventData, List\u003CRaycastResult> resultAppendList);\n",[69113],{"type":597,"tag":629,"props":69114,"children":69115},{"__ignoreMap":591},[69116],{"type":603,"value":69111},{"type":597,"tag":606,"props":69118,"children":69119},{},[69120,69122,69128,69129,69135,69137,69142,69144,69149],{"type":603,"value":69121},"这个方法供子类覆写以实现对不同类别的物体进行射线检测。BaseRaycaster 类还继承自 UIBehaviour 类，因此它还覆写了 ",{"type":597,"tag":629,"props":69123,"children":69125},{"className":69124},[],[69126],{"type":603,"value":69127},"OnEnable",{"type":603,"value":13757},{"type":597,"tag":629,"props":69130,"children":69132},{"className":69131},[],[69133],{"type":603,"value":69134},"OnDisable",{"type":603,"value":69136}," 方法，在 ",{"type":597,"tag":629,"props":69138,"children":69140},{"className":69139},[],[69141],{"type":603,"value":69127},{"type":603,"value":69143}," 方法中向 RaycasterManager 类注册了自己，在 ",{"type":597,"tag":629,"props":69145,"children":69147},{"className":69146},[],[69148],{"type":603,"value":69134},{"type":603,"value":69150}," 方法中从 RaycasterManager 类移除了自己的注册。",{"type":597,"tag":606,"props":69152,"children":69153},{},[69154],{"type":603,"value":69155},"另外该类中还包含了 eventCamera、sortOrderPriority、renderOrderPriority 等属性，在射线检测物体时会用到。",{"type":597,"tag":598,"props":69157,"children":69159},{"id":69158},"physics-raycaster",[69160],{"type":603,"value":69161},"Physics Raycaster",{"type":597,"tag":606,"props":69163,"children":69164},{},[69165],{"type":603,"value":69166},"Physics Raycaster 用于检测场景中的 3D 物体对象。",{"type":597,"tag":606,"props":69168,"children":69169},{},[69170,69172,69177],{"type":603,"value":69171},"PhysicsRaycaster 类继承自 BaseRaycaster，既然是射线检测那么最重要的方法莫过于 ",{"type":597,"tag":629,"props":69173,"children":69175},{"className":69174},[],[69176],{"type":603,"value":69106},{"type":603,"value":69178},"，接下来就一起看看这个方法。",{"type":597,"tag":606,"props":69180,"children":69181},{},[69182,69183,69188,69190,69196,69198,69204],{"type":603,"value":9329},{"type":597,"tag":629,"props":69184,"children":69186},{"className":69185},[],[69187],{"type":603,"value":69106},{"type":603,"value":69189}," 方法中，首先使用传入的 PointerEventData 参数调用 ",{"type":597,"tag":629,"props":69191,"children":69193},{"className":69192},[],[69194],{"type":603,"value":69195},"ComputeRayAndDistance",{"type":603,"value":69197}," 方法，计算得到从当前射线检测使用的 Camera 的近裁剪面处出发，穿过屏幕事件发生处位置的一条射线；这个方法还会计算一个射线检测使用的最大距离 ",{"type":597,"tag":629,"props":69199,"children":69201},{"className":69200},[],[69202],{"type":603,"value":69203},"distanceToClipPlane",{"type":603,"value":758},{"type":597,"tag":606,"props":69206,"children":69207},{},[69208,69213,69215,69221,69223,69228],{"type":597,"tag":629,"props":69209,"children":69211},{"className":69210},[],[69212],{"type":603,"value":69195},{"type":603,"value":69214}," 内部使用了 Camera 类的 ",{"type":597,"tag":629,"props":69216,"children":69218},{"className":69217},[],[69219],{"type":603,"value":69220},"ScreenPointToRay",{"type":603,"value":69222}," 方法将某点转换成一条射线，根据得到的射线的方向以及 Camera 的 farClipPlane 和 nearClipPlane 求得检测最大距离 ",{"type":597,"tag":629,"props":69224,"children":69226},{"className":69225},[],[69227],{"type":603,"value":69203},{"type":603,"value":69229},"。具体代码如下:",{"type":597,"tag":621,"props":69231,"children":69233},{"code":69232},"void ComputeRayAndDistance(PointerEventData eventData, out Ray ray, out float distanceToClipPlane)\n{\n    ray = eventCamera.ScreenPointToRay(eventData.position);\n    float projectionDirection = ray.direction.z;\n    // 这里加了个保护，因为 projectionDirection 近似为 0 的时候不能被除，因此 distanceToClipPlane 取 Mathf.Infinity 无限大\n    distanceToClipPlane = Mathf.Approximately(0.0f, projectionDirection) ? Mathf.Infinity : Mathf.Abs((eventCamera.farClipPlane - eventCamera.nearClipPlane) / projectionDirection);\n}\n",[69234],{"type":597,"tag":629,"props":69235,"children":69236},{"__ignoreMap":591},[69237],{"type":603,"value":69232},{"type":597,"tag":606,"props":69239,"children":69240},{},[69241],{"type":603,"value":69242},"接下来就是进行射线检测了，代码如下:",{"type":597,"tag":621,"props":69244,"children":69246},{"code":69245},"var hits = ReflectionMethodsCache.Singleton.raycast3DAll(ray, distanceToClipPlane, finalEventMask);\n",[69247],{"type":597,"tag":629,"props":69248,"children":69249},{"__ignoreMap":591},[69250],{"type":603,"value":69245},{"type":597,"tag":606,"props":69252,"children":69253},{},[69254,69255,69261,69263,69269,69271,69276],{"type":603,"value":39860},{"type":597,"tag":629,"props":69256,"children":69258},{"className":69257},[],[69259],{"type":603,"value":69260},"ReflectionMethodsCache",{"type":603,"value":69262}," 类里面缓存了一些通过反射得到的射线检测相关的类方法。在上面的代码中使用了 ",{"type":597,"tag":629,"props":69264,"children":69266},{"className":69265},[],[69267],{"type":603,"value":69268},"raycast3DAll",{"type":603,"value":69270}," 这个代理，最终执行的是 Physics 类的 ",{"type":597,"tag":629,"props":69272,"children":69274},{"className":69273},[],[69275],{"type":603,"value":35742},{"type":603,"value":69277}," 方法。传入的三个参数就是射线 ray，最大检测距离 distanceToClipPlane 以及需要检测的层 finalEventMask，返回结果就是检测成功得到的 RaycastHit 数组。第三个参数 finalEventMask 定义如下:",{"type":597,"tag":621,"props":69279,"children":69281},{"code":69280},"public int finalEventMask\n{\n    get { return (eventCamera != null) ? eventCamera.cullingMask & m_EventMask : kNoEventMaskSet; }\n}\n",[69282],{"type":597,"tag":629,"props":69283,"children":69284},{"__ignoreMap":591},[69285],{"type":603,"value":69280},{"type":597,"tag":606,"props":69287,"children":69288},{},[69289,69291,69297,69299,69305],{"type":603,"value":69290},"我们知道，射线检测的时候可以设置哪些 layer 可以接收检测碰撞。上面定义的 finalEventMask 就是需要检测的 layer，如果当前 raycaster 所在的对象有 Camera 组件，那么 finalEventMask 就是摄像机设置的渲染的所有层(",{"type":597,"tag":629,"props":69292,"children":69294},{"className":69293},[],[69295],{"type":603,"value":69296},"eventCamera.cullingMask & m_EventMask",{"type":603,"value":69298},")，否则就是默认所有的层(",{"type":597,"tag":629,"props":69300,"children":69302},{"className":69301},[],[69303],{"type":603,"value":69304},"int kNoEventMaskSet = -1",{"type":603,"value":69306},")都可以接收射线碰撞检测。",{"type":597,"tag":606,"props":69308,"children":69309},{},[69310],{"type":603,"value":69311},"然后对检测得到的 RaycastHit 数组按照 distance 由小到大排序。最后将这些射线检测结果依次拼装成 RaycastResult 并返回给 Event System，这里的 RaycastResult 中的 distance 就是 RaycastHit 的 distance(射线起点到射线碰撞点的距离)。",{"type":597,"tag":598,"props":69313,"children":69315},{"id":69314},"physics2d-raycaster",[69316],{"type":603,"value":69317},"Physics2D Raycaster",{"type":597,"tag":606,"props":69319,"children":69320},{},[69321,69323,69328],{"type":603,"value":69322},"Physics2DRaycaster 类继承自 PhysicsRaycaster，主要就是 ",{"type":597,"tag":629,"props":69324,"children":69326},{"className":69325},[],[69327],{"type":603,"value":69106},{"type":603,"value":69329}," 方法中的一点点细小的区别。",{"type":597,"tag":606,"props":69331,"children":69332},{},[69333,69335,69341],{"type":603,"value":69334},"第一，在进行射线检测的时候，Physics2DRaycaster 中最后调用的是 Physics2D 的 ",{"type":597,"tag":629,"props":69336,"children":69338},{"className":69337},[],[69339],{"type":603,"value":69340},"GetRayIntersectionAll",{"type":603,"value":69342}," 方法。",{"type":597,"tag":606,"props":69344,"children":69345},{},[69346],{"type":603,"value":69347},"第二处同 PhysicsRaycaster 的不同之处是在返回构造 RaycastResult 时，填充的部分值不一样，包括以下几个:",{"type":597,"tag":1321,"props":69349,"children":69350},{},[69351,69364,69377],{"type":597,"tag":807,"props":69352,"children":69353},{},[69354,69356,69362],{"type":603,"value":69355},"distance，这个值是摄像机到射线检测碰撞点的距离，而在 PhysicsRaycaster 中是 RaycastHit 的 ",{"type":597,"tag":629,"props":69357,"children":69359},{"className":69358},[],[69360],{"type":603,"value":69361},"distance",{"type":603,"value":69363}," 值(射线起点在近裁剪面发出到碰撞点的距离)。",{"type":597,"tag":807,"props":69365,"children":69366},{},[69367,69369,69375],{"type":603,"value":69368},"sortingLayer，这个值是当前对象 SpriteRenderer 组件中的 ",{"type":597,"tag":629,"props":69370,"children":69372},{"className":69371},[],[69373],{"type":603,"value":69374},"sortingLayerID",{"type":603,"value":69376}," 值，在 PhysicsRaycaster 为 0。",{"type":597,"tag":807,"props":69378,"children":69379},{},[69380,69382,69388],{"type":603,"value":69381},"sortingOrder，这个同样为当前对象 SpriteRenderer 组件中的 ",{"type":597,"tag":629,"props":69383,"children":69385},{"className":69384},[],[69386],{"type":603,"value":69387},"sortingOrder",{"type":603,"value":69376},{"type":597,"tag":598,"props":69390,"children":69392},{"id":69391},"graphic-raycaster",[69393],{"type":603,"value":69394},"Graphic Raycaster",{"type":597,"tag":606,"props":69396,"children":69397},{},[69398],{"type":603,"value":69399},"Graphic Raycaster 用于射线检测 Canvas 中的 Graphic 对象物体，通常绑定在 Canvas 所在的对象身上。",{"type":597,"tag":1023,"props":69401,"children":69403},{"id":69402},"属性或方法",[69404],{"type":603,"value":69402},{"type":597,"tag":606,"props":69406,"children":69407},{},[69408],{"type":603,"value":69409},"GraphicRaycaster 类的成员属性很少，除了继承 BaseRaycaster 类的一些属性和方法外，它还拥有以下一些常用的属性或方法:",{"type":603,"value":69411},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1937,"props":69413,"children":69414},{},[69415,69430],{"type":597,"tag":1941,"props":69416,"children":69417},{},[69418],{"type":597,"tag":1945,"props":69419,"children":69420},{},[69421,69425],{"type":597,"tag":1949,"props":69422,"children":69423},{},[69424],{"type":603,"value":1953},{"type":597,"tag":1949,"props":69426,"children":69427},{},[69428],{"type":603,"value":69429},"描述",{"type":597,"tag":1963,"props":69431,"children":69432},{},[69433,69450,69467],{"type":597,"tag":1945,"props":69434,"children":69435},{},[69436,69445],{"type":597,"tag":1970,"props":69437,"children":69438},{},[69439],{"type":597,"tag":629,"props":69440,"children":69442},{"className":69441},[],[69443],{"type":603,"value":69444},"Ignore Reversed Graphics",{"type":597,"tag":1970,"props":69446,"children":69447},{},[69448],{"type":603,"value":69449},"射线检测时是否忽略背向的 Graphics",{"type":597,"tag":1945,"props":69451,"children":69452},{},[69453,69462],{"type":597,"tag":1970,"props":69454,"children":69455},{},[69456],{"type":597,"tag":629,"props":69457,"children":69459},{"className":69458},[],[69460],{"type":603,"value":69461},"Blocked Objects",{"type":597,"tag":1970,"props":69463,"children":69464},{},[69465],{"type":603,"value":69466},"哪些类型的对象会阻挡 Graphic raycasts",{"type":597,"tag":1945,"props":69468,"children":69469},{},[69470,69479],{"type":597,"tag":1970,"props":69471,"children":69472},{},[69473],{"type":597,"tag":629,"props":69474,"children":69476},{"className":69475},[],[69477],{"type":603,"value":69478},"Blocking Mask",{"type":597,"tag":1970,"props":69480,"children":69481},{},[69482,69484,69489],{"type":603,"value":69483},"哪些 Layer 会阻挡 Graphic raycasts(对 ",{"type":597,"tag":629,"props":69485,"children":69487},{"className":69486},[],[69488],{"type":603,"value":69461},{"type":603,"value":69490}," 指定的对象生效)",{"type":597,"tag":606,"props":69492,"children":69493},{},[69494,69496,69502,69504,69510,69512,69518],{"type":603,"value":69495},"不同于 PhysicsRaycaster 和 Physics2DRaycaster 类中直接使用父类的 ",{"type":597,"tag":629,"props":69497,"children":69499},{"className":69498},[],[69500],{"type":603,"value":69501},"sortOrderPriority",{"type":603,"value":69503}," 方法和 ",{"type":597,"tag":629,"props":69505,"children":69507},{"className":69506},[],[69508],{"type":603,"value":69509},"renderOrderPriority",{"type":603,"value":69511},"，GraphicRaycaster 覆写了这两个方法，并且当 Canvas 的 render mode 设置为 ",{"type":597,"tag":629,"props":69513,"children":69515},{"className":69514},[],[69516],{"type":603,"value":69517},"RenderMode.ScreenSpaceOverlay",{"type":603,"value":69519}," 时，上面两个方法分别返回 canvas 的 sortingOrder 以及 rootCanvas 的 renderOrder。",{"type":597,"tag":606,"props":69521,"children":69522},{},[69523,69525,69530,69531,69537],{"type":603,"value":69524},"对于 eventCamera 的 get 方法，如果 Canvas 的 render mode 设置为 ",{"type":597,"tag":629,"props":69526,"children":69528},{"className":69527},[],[69529],{"type":603,"value":69517},{"type":603,"value":27152},{"type":597,"tag":629,"props":69532,"children":69534},{"className":69533},[],[69535],{"type":603,"value":69536},"enderMode.ScreenSpaceCamera",{"type":603,"value":69538}," 并且 Canvas 的 worldCamera 未设置时，返回 null，否则返回 Canvas 的 worldCamera 或者 Main Camera。",{"type":597,"tag":1023,"props":69540,"children":69542},{"id":69541},"graphicraycasterraycast",[69543],{"type":603,"value":69544},"GraphicRaycaster.Raycast",{"type":597,"tag":606,"props":69546,"children":69547},{},[69548,69550,69555],{"type":603,"value":69549},"接下来就来到最重要的覆写的 ",{"type":597,"tag":629,"props":69551,"children":69553},{"className":69552},[],[69554],{"type":603,"value":69106},{"type":603,"value":69342},{"type":597,"tag":606,"props":69557,"children":69558},{},[69559,69561,69567],{"type":603,"value":69560},"首先调用 ",{"type":597,"tag":629,"props":69562,"children":69564},{"className":69563},[],[69565],{"type":603,"value":69566},"GraphicRegistry.GetGraphicsForCanvas",{"type":603,"value":69568}," 方法获取当前 Canvas 下所有的 Graphic(canvasGraphics，这些 Graphics 在进行射线检测的时候会用到)。",{"type":597,"tag":606,"props":69570,"children":69571},{},[69572],{"type":603,"value":69573},"紧接着就是 MultiDisplay 的一些检测，代码如下:",{"type":597,"tag":621,"props":69575,"children":69577},{"code":69576},"int displayIndex;\nvar currentEventCamera = eventCamera;\nif (canvas.renderMode == RenderMode.ScreenSpaceOverlay || currentEventCamera == null)\n    displayIndex = canvas.targetDisplay;\nelse\n    displayIndex = currentEventCamera.targetDisplay;\nvar eventPosition = Display.RelativeMouseAt(eventData.position);\nif (eventPosition != Vector3.zero)\n{\n    // 当前平台支持 MultiDisplay\n    int eventDisplayIndex = (int)eventPosition.z;\n    if (eventDisplayIndex != displayIndex)\n        return;\n}\nelse\n{\n    // 当前平台不支持 MultiDiplay\n    eventPosition = eventData.position;\n}\n",[69578],{"type":597,"tag":629,"props":69579,"children":69580},{"__ignoreMap":591},[69581],{"type":603,"value":69576},{"type":597,"tag":606,"props":69583,"children":69584},{},[69585],{"type":603,"value":69586},"可以看出，当平台支持 MultiDisplay 时，如果用户操作的不是当前的 Display，那么所有的其他 Display 上产生的事件都会被舍弃。",{"type":597,"tag":606,"props":69588,"children":69589},{},[69590,69592,69598],{"type":603,"value":69591},"然后将屏幕坐标转换到 Camera 视窗坐标下。如果 eventCamera 不为空，则使用 ",{"type":597,"tag":629,"props":69593,"children":69595},{"className":69594},[],[69596],{"type":603,"value":69597},"Camera.ScreenToViewportPoint",{"type":603,"value":69599}," 方法转换坐标，否则直接使用当前 Display 的宽高除以 eventPosition 转换为视窗坐标([0,1]之间)。转换后的坐标若超出 Cmera 的范围(0 - 1)，则舍弃该事件。",{"type":597,"tag":3995,"props":69601,"children":69603},{"id":69602},"blocked-objects-和-blocked-mask-出场",[69604],{"type":603,"value":69605},"Blocked Objects 和 Blocked Mask 出场",{"type":597,"tag":606,"props":69607,"children":69608},{},[69609],{"type":603,"value":69610},"前面讲到 GraphicRaycaster 可以设置 Blocked Objects 和 Blocked Mask 来指定射线检测阻挡，下面一步就到了使用这两个属性来阻断射线检测部分。",{"type":597,"tag":621,"props":69612,"children":69614},{"code":69613},"if (canvas.renderMode != RenderMode.ScreenSpaceOverlay && blockingObjects != BlockingObjects.None)\n{\n    float distanceToClipPlane\n    // 计算 distanceToClipPlane...\n    if (blockingObjects == BlockingObjects.ThreeD || blockingObjects == BlockingObjects.All)\n    {\n        if (ReflectionMethodsCache.Singleton.raycast3D != null)\n        {\n            var hits = ReflectionMethodsCache.Singleton.raycast3DAll(ray, distanceToClipPlane, (int)m_BlockingMask);\n            if (hits.Length > 0)\n                hitDistance = hits[0].distance;\n        }    \n    }\n    //如果 blockingObjects 包含 BlockingObjects.TwoD，使用 ReflectionMethodsCache.Singleton.getRayIntersectionAll 方法再次计算 hitDistance\n}\n",[69615],{"type":597,"tag":629,"props":69616,"children":69617},{"__ignoreMap":591},[69618],{"type":603,"value":69613},{"type":597,"tag":606,"props":69620,"children":69621},{},[69622,69624,69629],{"type":603,"value":69623},"当 Canvas renderMode 不为 ",{"type":597,"tag":629,"props":69625,"children":69627},{"className":69626},[],[69628],{"type":603,"value":69517},{"type":603,"value":69630}," 并且设置了 blockingObjects，此时就会 Blocked Objects 和 Blocked Mask 就会生效。",{"type":597,"tag":1321,"props":69632,"children":69633},{},[69634,69655],{"type":597,"tag":807,"props":69635,"children":69636},{},[69637,69639,69645,69647,69653],{"type":603,"value":69638},"如果 blockingObjects 包含了 ",{"type":597,"tag":629,"props":69640,"children":69642},{"className":69641},[],[69643],{"type":603,"value":69644},"BlockingObjects.ThreeD",{"type":603,"value":69646}," 那么则会使用 ",{"type":597,"tag":629,"props":69648,"children":69650},{"className":69649},[],[69651],{"type":603,"value":69652},"ReflectionMethodsCache.Singleton.raycast3DAll",{"type":603,"value":69654}," 方法计算 hitDistance(PhysicsRaycaster 中也使用的该方法进行射线检测)。",{"type":597,"tag":807,"props":69656,"children":69657},{},[69658,69660,69666,69668,69674],{"type":603,"value":69659},"如果 blockingObjects 也包含了 ",{"type":597,"tag":629,"props":69661,"children":69663},{"className":69662},[],[69664],{"type":603,"value":69665},"BlockingObjects.TwoD",{"type":603,"value":69667},"，那么会使用 ",{"type":597,"tag":629,"props":69669,"children":69671},{"className":69670},[],[69672],{"type":603,"value":69673},"ReflectionMethodsCache.Singleton.getRayIntersectionAll",{"type":603,"value":69675}," 方法(Physics2DRaycaster 射线检测使用)再计算 hitDistance。",{"type":597,"tag":606,"props":69677,"children":69678},{},[69679,69681,69687,69689,69694,69696,69701,69703,69708],{"type":603,"value":69680},"具体的计算过程大致是: 这上面的代码中 raycast3DAll 时指定了射线检测层 ",{"type":597,"tag":629,"props":69682,"children":69684},{"className":69683},[],[69685],{"type":603,"value":69686},"m_BlockingMask",{"type":603,"value":69688},"，这个参数就是自定义设定的 ",{"type":597,"tag":629,"props":69690,"children":69692},{"className":69691},[],[69693],{"type":603,"value":69478},{"type":603,"value":69695},"，属于 block mask 的对象在这里就会就行射线检测，并得到最小的一个 hitDistance；",{"type":597,"tag":1080,"props":69697,"children":69698},{},[69699],{"type":603,"value":69700},"后面对所有的 Graphics 进行射线检测时，如果检测结果 distance 大于 hitDistance，那么那个结果会被舍弃",{"type":603,"value":69702},"。如此一来，",{"type":597,"tag":629,"props":69704,"children":69706},{"className":69705},[],[69707],{"type":603,"value":69478},{"type":603,"value":69709}," 就起到了阻挡的作用，属于这个 layer 的所有对象的一旦被射线检测成功并得到 hitDistance，PhysicsRaycaster 最后的射线检测结果都只会包含这个 hitDistance 距离以内的对象。",{"type":597,"tag":3995,"props":69711,"children":69713},{"id":69712},"graphicraycaster-类重载了-真-raycast-方法",[69714],{"type":603,"value":69715},"GraphicRaycaster 类重载了 “真” Raycast 方法",{"type":597,"tag":606,"props":69717,"children":69718},{},[69719],{"type":603,"value":69720},"终于可以进行真真切切的 Graphic Raycast 了。",{"type":597,"tag":621,"props":69722,"children":69724},{"code":69723},"private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList\u003CGraphic> foundGraphics, List\u003CGraphic> results)\n{\n    int totalCount = foundGraphics.Count;\n    for (int i = 0; i \u003C totalCount; ++i)\n    {\n        Graphic graphic = foundGraphics[i];\n        // depth 为 -1 说明没有被 canvas 处理(未被绘制)\n        // raycastTarget 为 false 说明当前 graphic 不需要被射线检测\n        // graphic.canvasRenderer.cull 为 true，忽略当前 graphic 的 CanvasRender 渲染的物体\n        if (graphic.depth == -1 || !graphic.raycastTarget || graphic.canvasRenderer.cull)\n            continue;\n        // 从指定的 eventCamera 计算 pointerPosition 是否在 graphic 的 Rectangle 区域内 \n        if (!RectTransformUtility.RectangleContainsScreenPoint(graphic.rectTransform, pointerPosition, eventCamera))\n            continue;\n        if (graphic.Raycast(pointerPosition, eventCamera))\n        {\n            s_SortedGraphics.Add(graphic);\n        }\n    }\n    s_SortedGraphics.Sort((g1, g2) => g2.depth.CompareTo(g1.depth));\n    // return result\n}\n",[69725],{"type":597,"tag":629,"props":69726,"children":69727},{"__ignoreMap":591},[69728],{"type":603,"value":69723},{"type":597,"tag":606,"props":69730,"children":69731},{},[69732,69734,69739],{"type":603,"value":69733},"在循环中对每一个 Graphic 首先进行了初步的筛选，满足条件的 Graphic 才会调用其 ",{"type":597,"tag":629,"props":69735,"children":69737},{"className":69736},[],[69738],{"type":603,"value":69106},{"type":603,"value":69740}," 方法，这里的条件筛选包括 deth、raycastTarget 设置、位置信息是否满足等。",{"type":597,"tag":3995,"props":69742,"children":69744},{"id":69743},"graphicraycast",[69745],{"type":603,"value":69746},"Graphic.Raycast",{"type":597,"tag":606,"props":69748,"children":69749},{},[69750],{"type":603,"value":69751},"对 Canvas 下所有的 graphic 遍历，满足条件则进行射线检测。Graphic 射线检测过程如下:",{"type":597,"tag":606,"props":69753,"children":69754},{},[69755,69757,69761],{"type":603,"value":69756},"整个检测过程是在一个循环中实现的，从当前 Graphic 节点开始不断向上",{"type":597,"tag":1080,"props":69758,"children":69759},{},[69760],{"type":603,"value":49606},{"type":603,"value":69762},"，直至向上再没有节点或者节点绑定的组件中有被射线检测出来结果而返回。",{"type":597,"tag":606,"props":69764,"children":69765},{},[69766,69768,69773],{"type":603,"value":69767},"对于节点对象，首先获取其绑定的所有组件，依次",{"type":597,"tag":1080,"props":69769,"children":69770},{},[69771],{"type":603,"value":69772},"遍历",{"type":603,"value":69774},"判断组件:",{"type":597,"tag":1321,"props":69776,"children":69777},{},[69778,69816],{"type":597,"tag":807,"props":69779,"children":69780},{},[69781,69783,69788,69790,69796,69798,69802,69804,69808,69810,69815],{"type":603,"value":69782},"当组件是 ",{"type":597,"tag":629,"props":69784,"children":69786},{"className":69785},[],[69787],{"type":603,"value":28854},{"type":603,"value":69789}," 并且其 overrideSorting 为 ",{"type":597,"tag":629,"props":69791,"children":69793},{"className":69792},[],[69794],{"type":603,"value":69795},"true",{"type":603,"value":69797}," 则指定: 若在当前节点绑定的一系列的组件中都未能成功唤起检测，则当前节点组件",{"type":597,"tag":1080,"props":69799,"children":69800},{},[69801],{"type":603,"value":69772},{"type":603,"value":69803},"结束后将跳出节点",{"type":597,"tag":1080,"props":69805,"children":69806},{},[69807],{"type":603,"value":49606},{"type":603,"value":69809},"并默认返回 ",{"type":597,"tag":629,"props":69811,"children":69813},{"className":69812},[],[69814],{"type":603,"value":69795},{"type":603,"value":758},{"type":597,"tag":807,"props":69817,"children":69818},{},[69819,69821,69827,69829,69835,69837,69842,69844,69849,69851,69857,69859,69865,69867,69872],{"type":603,"value":69820},"如果组件是实现了 ",{"type":597,"tag":629,"props":69822,"children":69824},{"className":69823},[],[69825],{"type":603,"value":69826},"ICanvasRaycastFilter",{"type":603,"value":69828}," 接口，则判断组件是否是 ",{"type":597,"tag":629,"props":69830,"children":69832},{"className":69831},[],[69833],{"type":603,"value":69834},"CanvasGroup",{"type":603,"value":69836},"。若是 ",{"type":597,"tag":629,"props":69838,"children":69840},{"className":69839},[],[69841],{"type":603,"value":69834},{"type":603,"value":69843}," 且设置了 ignoreParentGroups 为 ",{"type":597,"tag":629,"props":69845,"children":69847},{"className":69846},[],[69848],{"type":603,"value":69795},{"type":603,"value":69850},"，那么对于接下来的所有 CanvasGroup 组件将不会调用 ",{"type":597,"tag":629,"props":69852,"children":69854},{"className":69853},[],[69855],{"type":603,"value":69856},"IsRaycastLocationValid",{"type":603,"value":69858}," 方法检测；若 CanvasGroup 都未设置 ",{"type":597,"tag":629,"props":69860,"children":69862},{"className":69861},[],[69863],{"type":603,"value":69864},"ignoreParentGroups",{"type":603,"value":69866},"或者不包含 CanvasGroup 组件，则直接调用组件实现的 ",{"type":597,"tag":629,"props":69868,"children":69870},{"className":69869},[],[69871],{"type":603,"value":69856},{"type":603,"value":69873}," 方法计算是否射线检测成功。",{"type":597,"tag":606,"props":69875,"children":69876},{},[69877,69879,69884,69886,69891,69893,69899,69901,69907,69909,69914,69916,69921],{"type":603,"value":69878},"从整个 Graphic.Raycast 检测过程可以看出，检测是自当前 graphic 节点开始，一旦检测到某个节点添加实现了 ",{"type":597,"tag":629,"props":69880,"children":69882},{"className":69881},[],[69883],{"type":603,"value":69826},{"type":603,"value":69885}," 接口且 ",{"type":597,"tag":629,"props":69887,"children":69889},{"className":69888},[],[69890],{"type":603,"value":69856},{"type":603,"value":69892}," 方法返回 ",{"type":597,"tag":629,"props":69894,"children":69896},{"className":69895},[],[69897],{"type":603,"value":69898},"false",{"type":603,"value":69900}," 则此 graphic 检测失败并结束检测；否则还会继续向上递归检测父节点，当所有节点(绑定了 Canvas 组件并设置了 ",{"type":597,"tag":629,"props":69902,"children":69904},{"className":69903},[],[69905],{"type":603,"value":69906},"Canvas.overrideSorting",{"type":603,"value":69908}," 为 ",{"type":597,"tag":629,"props":69910,"children":69912},{"className":69911},[],[69913],{"type":603,"value":69795},{"type":603,"value":69915},"的节点会截止此次检测)都射线检测成功或是不需要使用 ",{"type":597,"tag":629,"props":69917,"children":69919},{"className":69918},[],[69920],{"type":603,"value":69856},{"type":603,"value":69922}," 方法进行检测，则此次 Graphic.Raycast 成功。",{"type":597,"tag":3995,"props":69924,"children":69926},{"id":69925},"graphicraycast-成功的对象深度排序",[69927],{"type":603,"value":69928},"Graphic.Raycast 成功的对象深度排序",{"type":597,"tag":606,"props":69930,"children":69931},{},[69932],{"type":603,"value":69933},"对所有射线检测成功的 graphics 按照深度 depth 从小到大排序。",{"type":597,"tag":3995,"props":69935,"children":69937},{"id":69936},"reversed-graphics-过滤",[69938],{"type":603,"value":69939},"Reversed Graphics 过滤",{"type":597,"tag":606,"props":69941,"children":69942},{},[69943,69945,69950],{"type":603,"value":69944},"最后对检测结果再过滤。如果设置了 ",{"type":597,"tag":629,"props":69946,"children":69948},{"className":69947},[],[69949],{"type":603,"value":69444},{"type":603,"value":69951}," 为 true，则将背向 Camera 的对象过滤掉，这里面又分为两种情况:",{"type":597,"tag":1321,"props":69953,"children":69954},{},[69955,69995],{"type":597,"tag":807,"props":69956,"children":69957},{},[69958,69960,69966,69968,69976,69979,69981,69986,69988,69993],{"type":603,"value":69959},"Camera 为空，直接判断当前 Graphic 方向与正方向 ",{"type":597,"tag":629,"props":69961,"children":69963},{"className":69962},[],[69964],{"type":603,"value":69965},"Vector3.forward",{"type":603,"value":69967}," 是否相交，如下:",{"type":597,"tag":621,"props":69969,"children":69971},{"code":69970},"var dir = go.transform.rotation * Vector3.forward;\nappendGraphic = Vector3.Dot(Vector3.forward, dir) > 0;\n",[69972],{"type":597,"tag":629,"props":69973,"children":69974},{"__ignoreMap":591},[69975],{"type":603,"value":69970},{"type":597,"tag":1595,"props":69977,"children":69978},{},[],{"type":603,"value":69980},"首先将 ",{"type":597,"tag":629,"props":69982,"children":69984},{"className":69983},[],[69985],{"type":603,"value":69965},{"type":603,"value":69987}," 绕着当前 Graphic 的 rotation 旋转得到 Graphic 的正方向，然后通过点积判断 Graphic 正方向是否与默认正方向(没有 Camera 所以默认正方向为 ",{"type":597,"tag":629,"props":69989,"children":69991},{"className":69990},[],[69992],{"type":603,"value":69965},{"type":603,"value":69994},")相交。点积大于 0 则相交，说明当前 Graphic 可以加入射线加测结果中。",{"type":597,"tag":807,"props":69996,"children":69997},{},[69998],{"type":603,"value":69999},"当 Camera 不为空，就使用 Camera 的正方向与 Graphic 的正方向比较是否相交。",{"type":597,"tag":3995,"props":70001,"children":70003},{"id":70002},"distance-检测是最终一道坎",[70004],{"type":603,"value":70005},"distance 检测是最终一道坎",{"type":597,"tag":606,"props":70007,"children":70008},{},[70009,70014],{"type":597,"tag":629,"props":70010,"children":70012},{"className":70011},[],[70013],{"type":603,"value":69444},{"type":603,"value":70015}," 检测完，对结果进行 distance 计算:",{"type":597,"tag":621,"props":70017,"children":70019},{"code":70018},"float distance = 0;\nif (currentEventCamera == null || canvas.renderMode == RenderMode.ScreenSpaceOverlay)\n    distance = 0;\nelse\n{\n    Transform trans = go.transform;\n    Vector3 transForward = trans.forward;\n    distance = (Vector3.Dot(transForward, trans.position - currentEventCamera.transform.position) / Vector3.Dot(transForward, ray.direction));\n    if (distance \u003C 0)\n        continue;\n}\n",[70020],{"type":597,"tag":629,"props":70021,"children":70022},{"__ignoreMap":591},[70023],{"type":603,"value":70018},{"type":597,"tag":606,"props":70025,"children":70026},{},[70027,70029,70034],{"type":603,"value":70028},"Render Mode 为 ",{"type":597,"tag":629,"props":70030,"children":70032},{"className":70031},[],[70033],{"type":603,"value":69517},{"type":603,"value":70035}," 或者 Camera 为 null，distance 为 0；否则就计算 Graphic 和 Camera 之间的向量在 Graphic 正方向上的投影以及计算射线方向在 Graphic 正方向上的投影，两者相除就得到最终的 distance。",{"type":597,"tag":606,"props":70037,"children":70038},{},[70039],{"type":603,"value":70040},"如果 distance 小于 hitDistance(设置的 Blocked Objects 和 Blocked Mask 产生)，则结果通过最终的测试可被用作事件的接收者之一。",{"type":597,"tag":1023,"props":70042,"children":70044},{"id":70043},"射线检测前后的一些操作",[70045],{"type":603,"value":70043},{"type":597,"tag":606,"props":70047,"children":70048},{},[70049,70051,70056],{"type":603,"value":70050},"首先来看看这些 Raycaster 被唤起的部分，也就是最开始的流程图中的第三步。Input Module 中使用 Raycaster 处理射线检测，真正的 Raycaster 实施代码又回到了 EventSystem 类中的 ",{"type":597,"tag":629,"props":70052,"children":70054},{"className":70053},[],[70055],{"type":603,"value":35742},{"type":603,"value":70057}," 方法，具体代码如下:",{"type":597,"tag":621,"props":70059,"children":70061},{"code":70060},"public void RaycastAll(PointerEventData eventData, List\u003CRaycastResult> raycastResults)\n{\n    raycastResults.Clear();\n    var modules = RaycasterManager.GetRaycasters();\n    for (int i = 0; i \u003C modules.Count; ++i)\n    {\n        var module = modules[i];\n        if (module == null || !module.IsActive())\n            continue;\n        module.Raycast(eventData, raycastResults);\n    }\n    raycastResults.Sort(s_RaycastComparer);\n}\n",[70062],{"type":597,"tag":629,"props":70063,"children":70064},{"__ignoreMap":591},[70065],{"type":603,"value":70060},{"type":597,"tag":606,"props":70067,"children":70068},{},[70069,70071,70077,70079,70085],{"type":603,"value":70070},"场景中可以存在一个或多个 Raycaster。当存在多个时，如果需要发起射线检测，那么每个处于 Active 状态的 Raycaster 都会工作，所有 Raycaster 检测得到的结果都会存放在 ",{"type":597,"tag":629,"props":70072,"children":70074},{"className":70073},[],[70075],{"type":603,"value":70076},"raycastResults",{"type":603,"value":70078}," 中(这些 RaycastResult 都是在各自射线检测器中根据 distance 从小到大排过序的)。方法最后使用自定义 Comparer 对所有的 RaycastResult 排序。",{"type":597,"tag":629,"props":70080,"children":70082},{"className":70081},[],[70083],{"type":603,"value":70084},"s_RaycastComparer",{"type":603,"value":70086}," 有以下几种比较流程:",{"type":597,"tag":1321,"props":70088,"children":70089},{},[70090],{"type":597,"tag":807,"props":70091,"children":70092},{},[70093],{"type":603,"value":70094},"两个 RaycastResult 检测所在的 Raycaster 不同",{"type":597,"tag":606,"props":70096,"children":70097},{},[70098],{"type":603,"value":70099},"首先比较两个对象的 Camera 的 depth。在渲染中，Camera depth 越小会越先渲染，越大越往后渲染，因此对于射线检测来说，Camera 的 depth 越大，它对应的物体应该先于 Camera depth 小的物体进行射线检测，检测得到的结果也应排在前面。代码如下:",{"type":597,"tag":621,"props":70101,"children":70103},{"code":70102},"if (lhsEventCamera.depth \u003C rhsEventCamera.depth)\n    return 1;\nif (lhsEventCamera.depth == rhsEventCamera.depth)\n    return 0;\nreturn -1;\n",[70104],{"type":597,"tag":629,"props":70105,"children":70106},{"__ignoreMap":591},[70107],{"type":603,"value":70102},{"type":597,"tag":606,"props":70109,"children":70110},{},[70111,70113,70118,70120,70126],{"type":603,"value":70112},"当 Camera depth 相等的时候，使用 ",{"type":597,"tag":629,"props":70114,"children":70116},{"className":70115},[],[70117],{"type":603,"value":69501},{"type":603,"value":70119}," 进行比较。优先级数值越大，越先被射线检测选中，所以这里的 ",{"type":597,"tag":629,"props":70121,"children":70123},{"className":70122},[],[70124],{"type":603,"value":70125},"CompareTo",{"type":603,"value":70127}," 方法使用的是右边的参数去比较左边的参数，最终的结果就是按照从大到小(降序)的顺序排列。",{"type":597,"tag":621,"props":70129,"children":70131},{"code":70130},"return rhs.module.sortOrderPriority.CompareTo(lhs.module.sortOrderPriority);\n",[70132],{"type":597,"tag":629,"props":70133,"children":70134},{"__ignoreMap":591},[70135],{"type":603,"value":70130},{"type":597,"tag":606,"props":70137,"children":70138},{},[70139,70141,70146,70148,70154,70156,70161,70163,70168,70170,70175,70177,70182],{"type":603,"value":70140},"在 PhysicsRaycaster 和 Physics2DRaycaster 类中没有覆写 ",{"type":597,"tag":629,"props":70142,"children":70144},{"className":70143},[],[70145],{"type":603,"value":69501},{"type":603,"value":70147}," 方法，因此都返回基类的 ",{"type":597,"tag":629,"props":70149,"children":70151},{"className":70150},[],[70152],{"type":603,"value":70153},"int.MinValue",{"type":603,"value":70155},"；但在 GraphicRaycaster 类中覆写了此方法，当对应的 Canvas 的 renderMode 设置为 ",{"type":597,"tag":629,"props":70157,"children":70159},{"className":70158},[],[70160],{"type":603,"value":69517},{"type":603,"value":70162}," 时，此时的 ",{"type":597,"tag":629,"props":70164,"children":70166},{"className":70165},[],[70167],{"type":603,"value":69501},{"type":603,"value":70169}," 返回 Canvas 的 sortingOrder(Sort Order越大越在上层)，否则同样也是返回基类设置的 ",{"type":597,"tag":629,"props":70171,"children":70173},{"className":70172},[],[70174],{"type":603,"value":70153},{"type":603,"value":70176},"，这是因为在 ",{"type":597,"tag":629,"props":70178,"children":70180},{"className":70179},[],[70181],{"type":603,"value":69517},{"type":603,"value":70183}," 模式下，所有的 distance 都将是 0。",{"type":597,"tag":606,"props":70185,"children":70186},{},[70187],{"type":603,"value":70188},"当 sortOrderPriority 相同，再使用 renderOrderPriority 比较。",{"type":597,"tag":621,"props":70190,"children":70192},{"code":70191},"return rhs.module.renderOrderPriority.CompareTo(lhs.module.renderOrderPriority);\n",[70193],{"type":597,"tag":629,"props":70194,"children":70195},{"__ignoreMap":591},[70196],{"type":603,"value":70191},{"type":597,"tag":606,"props":70198,"children":70199},{},[70200,70202,70207,70209,70215],{"type":603,"value":70201},"renderOrderPriority 和 sortOrderPriority 类似，仅在 GraphicRaycaster 类中被覆写，也只有在 Canvas 的 renderMode 设置为 ",{"type":597,"tag":629,"props":70203,"children":70205},{"className":70204},[],[70206],{"type":603,"value":69517},{"type":603,"value":70208}," 时才返回 ",{"type":597,"tag":629,"props":70210,"children":70212},{"className":70211},[],[70213],{"type":603,"value":70214},"canvas.rootCanvas.renderOrder",{"type":603,"value":70216},"，这是因为 Canvas 在其他几种 renderMode 下，渲染的先后顺序都和距离摄像机的距离有关。所以 renderOrderPriority 比较也是按照从大到小的顺序得到最终的结果。",{"type":597,"tag":1321,"props":70218,"children":70219},{},[70220],{"type":597,"tag":807,"props":70221,"children":70222},{},[70223],{"type":603,"value":70224},"同属于一个 Raycaster 检测得到，但是它们的 sortingLayer 不一样",{"type":597,"tag":606,"props":70226,"children":70227},{},[70228],{"type":603,"value":70229},"对于 PhysicsRaycaster 检测得到的对象，sortingLayer 都为 0。",{"type":597,"tag":606,"props":70231,"children":70232},{},[70233],{"type":603,"value":70234},"对于 Physics2DRaycaster 检测得到的对象，如果对象上挂载有 SpriteRenderer 组件，那么 sortingLayer 对应的 sortingLayerID，否则也为 0。",{"type":597,"tag":606,"props":70236,"children":70237},{},[70238],{"type":603,"value":70239},"对于 GraphicRaycaster 检测所得，sortingLayer 就是所在 Canvas 的 sortingLayerID。",{"type":597,"tag":621,"props":70241,"children":70243},{"code":70242},"var rid = SortingLayer.GetLayerValueFromID(rhs.sortingLayer);\nvar lid = SortingLayer.GetLayerValueFromID(lhs.sortingLayer);\nreturn rid.CompareTo(lid);\n",[70244],{"type":597,"tag":629,"props":70245,"children":70246},{"__ignoreMap":591},[70247],{"type":603,"value":70242},{"type":597,"tag":606,"props":70249,"children":70250},{},[70251,70253,70259],{"type":603,"value":70252},"通过 ",{"type":597,"tag":629,"props":70254,"children":70256},{"className":70255},[],[70257],{"type":603,"value":70258},"SortingLayer.GetLayerValueFromID",{"type":603,"value":70260}," 方法计算 sortingLayer 最终的 sorting layer 值，同样是按照降序排列，因此计算得到的 sorting layer 值越大越先排在前面。",{"type":597,"tag":1321,"props":70262,"children":70263},{},[70264],{"type":597,"tag":807,"props":70265,"children":70266},{},[70267],{"type":603,"value":70268},"sortingLayer 也相同，使用 sortingOrder 比较",{"type":597,"tag":606,"props":70270,"children":70271},{},[70272],{"type":603,"value":70273},"sortingOrder 和 sortingLayer 类似，PhysicsRaycaster 检测得到的对象 sortingOrder 为 0；Physics2DRaycaster 检测得到的对象是 SpriteRenderer 中的 sortingOrder；GraphicRaycaster 检测所得是所在 Canvas 的 sortingOrder。最终 sortingOrder 越大的对象越排前面。代码如下:",{"type":597,"tag":621,"props":70275,"children":70277},{"code":70276},"return rhs.sortingOrder.CompareTo(lhs.sortingOrder);\n",[70278],{"type":597,"tag":629,"props":70279,"children":70280},{"__ignoreMap":591},[70281],{"type":603,"value":70276},{"type":597,"tag":1321,"props":70283,"children":70284},{},[70285],{"type":597,"tag":807,"props":70286,"children":70287},{},[70288],{"type":603,"value":70289},"sortingOrder 相同，使用 depth 比较",{"type":597,"tag":606,"props":70291,"children":70292},{},[70293],{"type":603,"value":70294},"PhysicsRaycaster 和 Physics2DRaycaster 中 depth 都被设置为了 0；GraphicRaycaster 检测所得的对象的 depth 就是继承自 Graphic 类的对象所在的 Graphic 的 depth，即 Canvas 下所有 Graphic 深度遍历的顺序。比较同样也是按照降序进行的，因此越嵌套在靠近 Canvas 的对象越排在前面。",{"type":597,"tag":1321,"props":70296,"children":70297},{},[70298],{"type":597,"tag":807,"props":70299,"children":70300},{},[70301],{"type":603,"value":70302},"depth 相同，使用 distance 比较",{"type":597,"tag":606,"props":70304,"children":70305},{},[70306],{"type":603,"value":70307},"PhysicsRaycaster 中的 distance 就是 RaycastHit 的 distance(射线起点到射线碰撞点的距离)。",{"type":597,"tag":606,"props":70309,"children":70310},{},[70311],{"type":603,"value":70312},"Physics2DRaycaster 类中返回的是 Camera 的位置和射线碰撞点之间的距离。",{"type":597,"tag":606,"props":70314,"children":70315},{},[70316,70318,70325],{"type":603,"value":70317},"GraphicRaycaster 类中 distance ",{"type":597,"tag":886,"props":70319,"children":70322},{"href":70320,"rel":70321},"http://geomalgorithms.com/a06-_intersect-2.html",[890],[70323],{"type":603,"value":70324},"计算",{"type":603,"value":70326},"如下:",{"type":597,"tag":621,"props":70328,"children":70330},{"code":70329},"var go = m_RaycastResults[index].gameObject;\nTransform trans = go.transform;\nVector3 transForward = trans.forward;\n// TODO why user DOT to caculate distance?\ndistance = Vector3.Dot(transForward, trans.position - currentEventCamera.transform.position) / Vector3.Dot(transForward, ray.direction);\n",[70331],{"type":597,"tag":629,"props":70332,"children":70333},{"__ignoreMap":591},[70334],{"type":603,"value":70329},{"type":597,"tag":606,"props":70336,"children":70337},{},[70338],{"type":603,"value":70339},"距离 distance 越小越靠前。",{"type":597,"tag":1321,"props":70341,"children":70342},{},[70343],{"type":597,"tag":807,"props":70344,"children":70345},{},[70346],{"type":603,"value":70347},"最后如果上述情况都不能满足，使用 index 比较。先被射线检测到的对象排在前面。",{"type":597,"tag":606,"props":70349,"children":70350},{},[70351],{"type":603,"value":70352},"Raycaster 后段部分的流程: 取排过序的 RaycastResult 中第一个结果作为响应事件的输入事件的 pointerCurrentRaycast，根据它来在 Messaging System 中分发事件，大致代码如下:",{"type":597,"tag":621,"props":70354,"children":70356},{"code":70355},"// 获取 Raycast 结果中对应的 GameObject\nvar currentOverGo = pointerEvent.pointerCurrentRaycast.gameObject;\n// 分发事件\nExecuteEvents.ExecuteHierarchy(currentOverGo, pointerEvent, ExecuteEvents.pointerDownHandler);\n",[70357],{"type":597,"tag":629,"props":70358,"children":70359},{"__ignoreMap":591},[70360],{"type":603,"value":70355},{"type":597,"tag":606,"props":70362,"children":70363},{},[70364],{"type":603,"value":70365},"Raycaster 在 Event System 中的作用和流程基本就是上述的内容。",{"title":591,"searchDepth":787,"depth":787,"links":70367},[70368,70369,70370,70371],{"id":69087,"depth":787,"text":69090},{"id":69158,"depth":787,"text":69161},{"id":69314,"depth":787,"text":69317},{"id":69391,"depth":787,"text":69394,"children":70372},[70373,70374,70375],{"id":69402,"depth":1530,"text":69402},{"id":69541,"depth":1530,"text":69544},{"id":70043,"depth":1530,"text":70043},"content:unity:2019-08-12-ugui-Raycasters.md","unity/2019-08-12-ugui-Raycasters.md","2019-08-12",{"_path":391,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":390,"description":70380,"body":70381,"_type":791,"_id":70958,"_source":793,"_file":70959,"_extension":795,"date":70378},"为什么想看看事件系统的实现很简单，策划又提奇奇怪怪的需求了！比如这些事件要穿透啦，那些事件要做特殊处理啦！之类的……依旧先贴出源码地址：Unity-Technologies / UI - Bitbucketbitbucket.org入手点好那么我们从何处入手呢？当然是我们的EventTrigger了！我们都知道，我们可以通过实现以下接口来实现事件捕捉：大家都爱用的EventTrigger具体怎么做我想大家已经明白了，也就是实现上线的接口中的函数，例如我要监听点击事件我就实现一下IPointerClickHandler然后挂在物体上就好了。这个技巧在很早的时候我在雨松的文章第一次看到，那时候也是",{"type":594,"children":70382,"toc":70939},[70383,70391,70396,70401,70411,70419,70424,70433,70438,70446,70451,70470,70479,70488,70493,70502,70507,70516,70521,70529,70538,70543,70552,70557,70566,70571,70576,70581,70586,70595,70600,70608,70615,70620,70628,70633,70638,70645,70650,70659,70664,70671,70676,70683,70688,70697,70702,70709,70714,70721,70726,70735,70740,70748,70757,70762,70780,70787,70792,70799,70804,70809,70816,70821,70829,70834,70841,70853,70860,70865,70873,70885,70892,70897,70904,70909,70917,70922,70929,70934],{"type":597,"tag":598,"props":70384,"children":70386},{"id":70385},"为什么想看看事件系统的实现",[70387],{"type":597,"tag":1080,"props":70388,"children":70389},{},[70390],{"type":603,"value":70385},{"type":597,"tag":606,"props":70392,"children":70393},{},[70394],{"type":603,"value":70395},"很简单，策划又提奇奇怪怪的需求了！比如这些事件要穿透啦，那些事件要做特殊处理啦！之类的……",{"type":597,"tag":606,"props":70397,"children":70398},{},[70399],{"type":603,"value":70400},"依旧先贴出源码地址：",{"type":597,"tag":606,"props":70402,"children":70403},{},[70404],{"type":597,"tag":886,"props":70405,"children":70408},{"href":70406,"rel":70407},"https://link.zhihu.com/?target=https%3A//bitbucket.org/Unity-Technologies/ui",[890],[70409],{"type":603,"value":70410},"Unity-Technologies / UI - Bitbucketbitbucket.org",{"type":597,"tag":598,"props":70412,"children":70414},{"id":70413},"入手点",[70415],{"type":597,"tag":1080,"props":70416,"children":70417},{},[70418],{"type":603,"value":70413},{"type":597,"tag":606,"props":70420,"children":70421},{},[70422],{"type":603,"value":70423},"好那么我们从何处入手呢？当然是我们的EventTrigger了！我们都知道，我们可以通过实现以下接口来实现事件捕捉：",{"type":597,"tag":606,"props":70425,"children":70426},{},[70427,70431],{"type":597,"tag":719,"props":70428,"children":70430},{"alt":719,"src":70429},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-fed09bee3103f18eb1ee5938dbfdc812_hd.jpg",[],{"type":603,"value":70432},"大家都爱用的EventTrigger",{"type":597,"tag":606,"props":70434,"children":70435},{},[70436],{"type":603,"value":70437},"具体怎么做我想大家已经明白了，也就是实现上线的接口中的函数，例如我要监听点击事件我就实现一下IPointerClickHandler然后挂在物体上就好了。这个技巧在很早的时候我在雨松的文章第一次看到，那时候也是4.6时期UGUI刚出来的时候发现的。由于和当初的NGUI很像所以被大家广泛使用，但是也会发现如果全部实现了接口但是不实现的话可能会影响上层例如ScrollView的监听，下面我们看下去也可以知道到底是为啥。",{"type":597,"tag":598,"props":70439,"children":70441},{"id":70440},"顺藤摸瓜",[70442],{"type":597,"tag":1080,"props":70443,"children":70444},{},[70445],{"type":603,"value":70440},{"type":597,"tag":606,"props":70447,"children":70448},{},[70449],{"type":603,"value":70450},"既然我们已经找到了这个宝贝，那我们就可以通过查找引用大法，顺藤摸瓜看看到底是什么地方在调用我们实现的接口。",{"type":597,"tag":606,"props":70452,"children":70453},{},[70454,70456,70461,70463,70468],{"type":603,"value":70455},"最后理出来所有事件的入口其实都是放在",{"type":597,"tag":1080,"props":70457,"children":70458},{},[70459],{"type":603,"value":70460},"EventSystem",{"type":603,"value":70462},"当中，而具体处理则是放在了",{"type":597,"tag":1080,"props":70464,"children":70465},{},[70466],{"type":603,"value":70467},"InputModule",{"type":603,"value":70469},"里面。在刚刚Enable的时候会更新输入模块列表，也就是我们可以看到的StandaloneInputModule以及TouchInputModule：",{"type":597,"tag":606,"props":70471,"children":70472},{},[70473,70477],{"type":597,"tag":719,"props":70474,"children":70476},{"alt":719,"src":70475},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-8df2e07d1b1c5d050ce04c0afd436b16_hd.jpg",[],{"type":603,"value":70478},"初始化InputModule",{"type":597,"tag":606,"props":70480,"children":70481},{},[70482,70486],{"type":597,"tag":719,"props":70483,"children":70485},{"alt":719,"src":70484},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-054935593d03e1601cdf74d9e29839b0_hd.jpg",[],{"type":603,"value":70487},"Unity自己提供的各种InputModule",{"type":597,"tag":606,"props":70489,"children":70490},{},[70491],{"type":603,"value":70492},"在EventSystem的Update当中就会分别调用这些InputModule",{"type":597,"tag":606,"props":70494,"children":70495},{},[70496,70500],{"type":597,"tag":719,"props":70497,"children":70499},{"alt":719,"src":70498},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-8f1c906ba904af7ef5d374a45992a9e7_hd.jpg",[],{"type":603,"value":70501},"EventSystem主循环",{"type":597,"tag":606,"props":70503,"children":70504},{},[70505],{"type":603,"value":70506},"首先Tick所有的输入模块，然后选出一个当前在使用的输入模块中的Process进行处理。",{"type":597,"tag":606,"props":70508,"children":70509},{},[70510,70514],{"type":597,"tag":719,"props":70511,"children":70513},{"alt":719,"src":70512},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-0e03e0e59611f1fac21575bb3cc56b8f_hd.jpg",[],{"type":603,"value":70515},"EventSystem处理函数",{"type":597,"tag":606,"props":70517,"children":70518},{},[70519],{"type":603,"value":70520},"最前面是判断是否处于聚焦状态，其实也就只是应用程序的聚焦状态。其中中间是针对Navigation也就是类似于通过键盘上下左右或者手柄进行UI位置切换的操作。最下面两句才是针对所有的Touch以及Mouse的操作的处理。",{"type":597,"tag":598,"props":70522,"children":70524},{"id":70523},"触摸事件处理",[70525],{"type":597,"tag":1080,"props":70526,"children":70527},{},[70528],{"type":603,"value":70523},{"type":597,"tag":606,"props":70530,"children":70531},{},[70532,70536],{"type":597,"tag":719,"props":70533,"children":70535},{"alt":719,"src":70534},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-88eee10ae51d59b799637945e8117fce_hd.jpg",[],{"type":603,"value":70537},"处理输入事件",{"type":597,"tag":606,"props":70539,"children":70540},{},[70541],{"type":603,"value":70542},"首先看看，首先获取Pointer数据，然后对该数据进行处理。",{"type":597,"tag":598,"props":70544,"children":70546},{"id":70545},"首先处理点击事件-processtouchpress",[70547],{"type":597,"tag":1080,"props":70548,"children":70549},{},[70550],{"type":603,"value":70551},"首先处理点击事件 ProcessTouchPress",{"type":597,"tag":606,"props":70553,"children":70554},{},[70555],{"type":603,"value":70556},"首先判断是为按下事件还是释放事件",{"type":597,"tag":606,"props":70558,"children":70559},{},[70560,70564],{"type":597,"tag":719,"props":70561,"children":70563},{"alt":719,"src":70562},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-9947ebbae68433f48ef3a929a8b2001c_hd.jpg",[],{"type":603,"value":70565},"处理点击事件",{"type":597,"tag":598,"props":70567,"children":70569},{"id":70568},"按下的情形",[70570],{"type":603,"value":70568},{"type":597,"tag":606,"props":70572,"children":70573},{},[70574],{"type":603,"value":70575},"首先找到Raycast找到的对象如果为按下事件，如果按下的对象并不是之前Hover的对象，则触发进入事件。然后就处理PointerDown事件，如果找不到该事件的话就触发PointerClick事件。如果多次点击的话还会增加PointerEventData的clickTime，双击间隔是固定为0.3秒钟。同时保存下拖拽初始状态，如果有相对应的处理方法IInitializePotentialDragHandler的话就一起触发。",{"type":597,"tag":598,"props":70577,"children":70579},{"id":70578},"放开的情形",[70580],{"type":603,"value":70578},{"type":597,"tag":606,"props":70582,"children":70583},{},[70584],{"type":603,"value":70585},"首先触发PointUp事件。之后寻找PointClick事件，并且触发。如果不存在的话那就查看是否存在Drag事件并且执行，最后再执行PointerExit事件。",{"type":597,"tag":598,"props":70587,"children":70589},{"id":70588},"之后处理move以及drag事件",[70590],{"type":597,"tag":1080,"props":70591,"children":70592},{},[70593],{"type":603,"value":70594},"之后处理Move以及Drag事件",{"type":597,"tag":606,"props":70596,"children":70597},{},[70598],{"type":603,"value":70599},"主要还是触发Enter、Exit以及BeginDrag还有Drag等逻辑，比较业务向也就不再写了。",{"type":597,"tag":598,"props":70601,"children":70603},{"id":70602},"点击事件处理",[70604],{"type":597,"tag":1080,"props":70605,"children":70606},{},[70607],{"type":603,"value":70602},{"type":597,"tag":606,"props":70609,"children":70610},{},[70611],{"type":597,"tag":719,"props":70612,"children":70614},{"alt":719,"src":70613},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-e45c89369a8c438b54d3b8169863a8d6_hd.jpg",[],{"type":597,"tag":606,"props":70616,"children":70617},{},[70618],{"type":603,"value":70619},"写得比Touch更加紧凑，左键中建以及右键的处理都是分开的。而且实现方式与Touch也太像了，所以也就不再赘述了。",{"type":597,"tag":598,"props":70621,"children":70623},{"id":70622},"射线检测",[70624],{"type":597,"tag":1080,"props":70625,"children":70626},{},[70627],{"type":603,"value":70622},{"type":597,"tag":606,"props":70629,"children":70630},{},[70631],{"type":603,"value":70632},"射线检测绝对是其中非常重要的一个东西，在NGUI中我们都知道事件触发靠射线检测，同样在UGUI中射线检测也是同样的存在。",{"type":597,"tag":606,"props":70634,"children":70635},{},[70636],{"type":603,"value":70637},"我们在上面的Touch事件处理的地方会看到这么一段代码：",{"type":597,"tag":606,"props":70639,"children":70640},{},[70641],{"type":597,"tag":719,"props":70642,"children":70644},{"alt":719,"src":70643},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-c17f0ef64287112427f0a1f74ed2b323_hd.jpg",[],{"type":597,"tag":606,"props":70646,"children":70647},{},[70648],{"type":603,"value":70649},"通过射线raycast来检测我们的射线数据中包含哪些东西。并且取其中的第一个并且进行事件触发。这个数据我们可以具体看RaycastResult这个类：",{"type":597,"tag":606,"props":70651,"children":70652},{},[70653,70657],{"type":597,"tag":719,"props":70654,"children":70656},{"alt":719,"src":70655},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-942bda4b880dac3f71dfe3c00285c067_hd.jpg",[],{"type":603,"value":70658},"射线检测的结果",{"type":597,"tag":606,"props":70660,"children":70661},{},[70662],{"type":603,"value":70663},"而具体cast的步骤则在下面这个函数中，其实是依次调用所有的Raycaster中的射线检测。",{"type":597,"tag":606,"props":70665,"children":70666},{},[70667],{"type":597,"tag":719,"props":70668,"children":70670},{"alt":719,"src":70669},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-116715b89672f76517469347d2d35ae1_hd.jpg",[],{"type":597,"tag":606,"props":70672,"children":70673},{},[70674],{"type":603,"value":70675},"我们会去Raycaster Manager中寻找所有的Raycaster。所有Raycast在Enable的时候就会自动注册到Raycaster Manager中",{"type":597,"tag":606,"props":70677,"children":70678},{},[70679],{"type":597,"tag":719,"props":70680,"children":70682},{"alt":719,"src":70681},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-61ed280285611f5e56d858e174fb8846_hd.jpg",[],{"type":597,"tag":606,"props":70684,"children":70685},{},[70686],{"type":603,"value":70687},"现在就明白Graphic Raycaster是用来做什么的了吧。当然除了Graphic Raycaster以外还有各种各样的Raycaster:",{"type":597,"tag":606,"props":70689,"children":70690},{},[70691,70695],{"type":597,"tag":719,"props":70692,"children":70694},{"alt":719,"src":70693},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-6307b8a8e615d5c840203f91244d0e74_hd.jpg",[],{"type":603,"value":70696},"Unity内部提供的各类Raycaster",{"type":597,"tag":606,"props":70698,"children":70699},{},[70700],{"type":603,"value":70701},"我们这里就只着重看一下Graphic Raycaster",{"type":597,"tag":598,"props":70703,"children":70704},{"id":69391},[70705],{"type":597,"tag":1080,"props":70706,"children":70707},{},[70708],{"type":603,"value":69394},{"type":597,"tag":606,"props":70710,"children":70711},{},[70712],{"type":603,"value":70713},"核心方法就是经过重写的Raycaster，这个函数帮助我们检测画布上被射线触发的地方并且返回结果。",{"type":597,"tag":606,"props":70715,"children":70716},{},[70717],{"type":597,"tag":719,"props":70718,"children":70720},{"alt":719,"src":70719},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-e1049a6eef487dc07f5163b2f5df3a51_hd.jpg",[],{"type":597,"tag":606,"props":70722,"children":70723},{},[70724],{"type":603,"value":70725},"其实就是普通的射线检测，无非需要针对多屏幕、以及不同的Block模式进行判断，最终调用的是另外一个Raycast。",{"type":597,"tag":606,"props":70727,"children":70728},{},[70729,70733],{"type":597,"tag":719,"props":70730,"children":70732},{"alt":719,"src":70731},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-d37195700a8277f762d5da5382e23fd5_hd.jpg",[],{"type":603,"value":70734},"找到被射线穿过的Graphic",{"type":597,"tag":606,"props":70736,"children":70737},{},[70738],{"type":603,"value":70739},"获得射线所穿过的Graphic，将这些结果逐一加入到Result当中。在放入到Result之前会将这些Graphic根据深度进行排序。当然最终结果的筛选规则会有更多，例如是否在摄像机后面、是否大于最大射线距离等等。最终得到的就是我们最终射线结果。",{"type":597,"tag":598,"props":70741,"children":70743},{"id":70742},"如何执行事件",[70744],{"type":597,"tag":1080,"props":70745,"children":70746},{},[70747],{"type":603,"value":70742},{"type":597,"tag":598,"props":70749,"children":70751},{"id":70750},"直接调用事件-executeeventsexecute",[70752],{"type":597,"tag":1080,"props":70753,"children":70754},{},[70755],{"type":603,"value":70756},"直接调用事件 ExecuteEvents.Execute",{"type":597,"tag":606,"props":70758,"children":70759},{},[70760],{"type":603,"value":70761},"核心方法为ExecuteEvents.Execute，如果需要触发事件就调用该方法吧！我们需要向其中传3个参数：",{"type":597,"tag":1321,"props":70763,"children":70764},{},[70765,70770,70775],{"type":597,"tag":807,"props":70766,"children":70767},{},[70768],{"type":603,"value":70769},"一个是传递的GameObject，也就是挂载事件的对象。",{"type":597,"tag":807,"props":70771,"children":70772},{},[70773],{"type":603,"value":70774},"第二个参数则是PointEventData，这个参数最终会传给事件处理函数，通常是UGUI自己对输入进行处理并且输出的。",{"type":597,"tag":807,"props":70776,"children":70777},{},[70778],{"type":603,"value":70779},"最后一个参数就是一个传入的delegate，用于接收各种EventData，最后经由一个验证函数来获得具体的EventData。",{"type":597,"tag":606,"props":70781,"children":70782},{},[70783],{"type":597,"tag":719,"props":70784,"children":70786},{"alt":719,"src":70785},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-de00fc2cb10360aede52694d0cb5710c_hd.jpg",[],{"type":597,"tag":606,"props":70788,"children":70789},{},[70790],{"type":603,"value":70791},"接下来我们就看一下具体是如何针对一个GameObject进行事件调用的：",{"type":597,"tag":606,"props":70793,"children":70794},{},[70795],{"type":597,"tag":719,"props":70796,"children":70798},{"alt":719,"src":70797},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-d6090585e8a6f6c36c638d487b363ec1_hd.jpg",[],{"type":597,"tag":606,"props":70800,"children":70801},{},[70802],{"type":603,"value":70803},"首先调用GetEventList然后获得具体有哪些Handler，然后逐一进行调用。如果handler的数量大于0则返回true。",{"type":597,"tag":606,"props":70805,"children":70806},{},[70807],{"type":603,"value":70808},"我们看一下获取EventList的规则：",{"type":597,"tag":606,"props":70810,"children":70811},{},[70812],{"type":597,"tag":719,"props":70813,"children":70815},{"alt":719,"src":70814},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-2d6a993c83da534a4c0ec78939d144b4_hd.jpg",[],{"type":597,"tag":606,"props":70817,"children":70818},{},[70819],{"type":603,"value":70820},"其实也只是判断了一下是否为IEventSystemHandler这么简单。",{"type":597,"tag":598,"props":70822,"children":70824},{"id":70823},"向上查找",[70825],{"type":597,"tag":1080,"props":70826,"children":70827},{},[70828],{"type":603,"value":70823},{"type":597,"tag":606,"props":70830,"children":70831},{},[70832],{"type":603,"value":70833},"在很多地方例如Click事件触发的时候往往不是在该射线检测到的GameObject上，而是会向上查找Handler:",{"type":597,"tag":606,"props":70835,"children":70836},{},[70837],{"type":597,"tag":719,"props":70838,"children":70840},{"alt":719,"src":70839},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-e50bb99557b9d0a2b43b77f5a92abda2_hd.jpg",[],{"type":597,"tag":606,"props":70842,"children":70843},{},[70844,70846,70851],{"type":603,"value":70845},"其中核心方法就是",{"type":597,"tag":1080,"props":70847,"children":70848},{},[70849],{"type":603,"value":70850},"GetEventHandler",{"type":603,"value":70852},"，我们看看其中的实现：",{"type":597,"tag":606,"props":70854,"children":70855},{},[70856],{"type":597,"tag":719,"props":70857,"children":70859},{"alt":719,"src":70858},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-ffd1913afa8218040803d0dd1889f696_hd.jpg",[],{"type":597,"tag":606,"props":70861,"children":70862},{},[70863],{"type":603,"value":70864},"获得UGUI会从射线检测到的GameObject开始，不断向上查找，直到根为止，如果找到则返回，如果找不到可以处理的相应事件则直接返回Null。",{"type":597,"tag":598,"props":70866,"children":70868},{"id":70867},"事件链",[70869],{"type":597,"tag":1080,"props":70870,"children":70871},{},[70872],{"type":603,"value":70867},{"type":597,"tag":606,"props":70874,"children":70875},{},[70876,70878,70883],{"type":603,"value":70877},"除了获取EventHandler这种情形之外，还有触发GameObject树结构中所有挂载事件的物体。这个时候就有了我们上面看到的",{"type":597,"tag":1080,"props":70879,"children":70880},{},[70881],{"type":603,"value":70882},"ExecuteHierarchy",{"type":603,"value":70884},"，它的作用就是调用Hierarchy中所有挂载事件的GameObject。",{"type":597,"tag":606,"props":70886,"children":70887},{},[70888],{"type":597,"tag":719,"props":70889,"children":70891},{"alt":719,"src":70890},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-0c8983d7cf4d5e22c296ca5af93ac859_hd.jpg",[],{"type":597,"tag":606,"props":70893,"children":70894},{},[70895],{"type":603,"value":70896},"我们看到，该函数首先获取事件链，然后逐个进行触发，比较重要的就是获取事件链的过程：",{"type":597,"tag":606,"props":70898,"children":70899},{},[70900],{"type":597,"tag":719,"props":70901,"children":70903},{"alt":719,"src":70902},"/images/2019-08-12-ugui-eventsystem-sourcecode/v2-3c2ddef8ca9458a8235db5cb8278bcb3_hd.jpg",[],{"type":597,"tag":606,"props":70905,"children":70906},{},[70907],{"type":603,"value":70908},"从下往上进行遍历，将所有拥有事件的对象通通都调用一遍就是这个事件链的本质。",{"type":597,"tag":598,"props":70910,"children":70912},{"id":70911},"事件触发机制总结",[70913],{"type":597,"tag":1080,"props":70914,"children":70915},{},[70916],{"type":603,"value":70911},{"type":597,"tag":606,"props":70918,"children":70919},{},[70920],{"type":603,"value":70921},"不同的组件触发事件的方法都不一样，比如我们上面 看到的OnPointDown是用事件链，而PointClick则是使用的向上查找。我们要防止类似于PointClick这类事件，因为如果下层已经实现了该回调则上层回调则再也无法被调用到，因为已经被下层拦截，所以也不要一口气把所有的事件全给重载了，要用的时候再加呗。",{"type":597,"tag":598,"props":70923,"children":70924},{"id":1464},[70925],{"type":597,"tag":1080,"props":70926,"children":70927},{},[70928],{"type":603,"value":1464},{"type":597,"tag":606,"props":70930,"children":70931},{},[70932],{"type":603,"value":70933},"总的来说UGUI的事件系统并不复杂，各个部分还是较为清晰的，如果我们的UI编写当中遇到了问题，或者我们要自己魔改一个组件出来都可以通过看源码来进行解决。",{"type":597,"tag":606,"props":70935,"children":70936},{},[70937],{"type":603,"value":70938},"了解了其中原理之后就算是事件穿透之类的也完全可以通过源码实现来倒推解决方案，不用到处搜索解决方案了！",{"title":591,"searchDepth":787,"depth":787,"links":70940},[70941,70942,70943,70944,70945,70946,70947,70948,70949,70950,70951,70952,70953,70954,70955,70956,70957],{"id":70385,"depth":787,"text":70385},{"id":70413,"depth":787,"text":70413},{"id":70440,"depth":787,"text":70440},{"id":70523,"depth":787,"text":70523},{"id":70545,"depth":787,"text":70551},{"id":70568,"depth":787,"text":70568},{"id":70578,"depth":787,"text":70578},{"id":70588,"depth":787,"text":70594},{"id":70602,"depth":787,"text":70602},{"id":70622,"depth":787,"text":70622},{"id":69391,"depth":787,"text":69394},{"id":70742,"depth":787,"text":70742},{"id":70750,"depth":787,"text":70756},{"id":70823,"depth":787,"text":70823},{"id":70867,"depth":787,"text":70867},{"id":70911,"depth":787,"text":70911},{"id":1464,"depth":787,"text":1464},"content:unity:2019-08-12-ugui-eventsystem-sourcecode.md","unity/2019-08-12-ugui-eventsystem-sourcecode.md",{"_path":388,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":387,"description":70961,"body":70962,"_type":791,"_id":71865,"_source":793,"_file":71866,"_extension":795,"date":71867},"我们先来看看eventmanager之前unity处理事件的方法,首当其冲的就是MonoBehavior上的事件回调，可以参看MonoBehaviour文档。这是一系列的OnMouse开头的回调函数。",{"type":594,"children":70963,"toc":71855},[70964,70970,70983,70991,70996,71024,71047,71054,71059,71065,71073,71078,71083,71088,71093,71098,71103,71108,71116,71122,71145,71150,71156,71160,71164,71179,71183,71187,71194,71199,71232,71244,71249,71254,71262,71270,71275,71283,71291,71296,71314,71322,71330,71335,71343,71353,71361,71380,71385,71393,71401,71431,71439,71451,71459,71464,71469,71474,71487,71496,71501,71509,71515,71521,71548,71549,71658,71664,71669,71696,71704,71709,71717,71722,71730,71742,71747,71755,71761,71774,71782,71787,71795,71802,71807,71812,71817,71825,71830,71837,71842,71850],{"type":597,"tag":857,"props":70965,"children":70967},{"id":70966},"onmouse事件",[70968],{"type":603,"value":70969},"OnMouse事件",{"type":597,"tag":606,"props":70971,"children":70972},{},[70973,70975,70981],{"type":603,"value":70974},"我们先来看看eventmanager之前unity处理事件的方法,首当其冲的就是MonoBehavior上的事件回调，可以参看",{"type":597,"tag":886,"props":70976,"children":70979},{"href":70977,"rel":70978},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/ScriptReference/MonoBehaviour.html",[890],[70980],{"type":603,"value":26859},{"type":603,"value":70982},"文档。这是一系列的OnMouse开头的回调函数。",{"type":597,"tag":621,"props":70984,"children":70986},{"code":70985},"OnMouseDown\nOnMouseDrag\nOnMouseEnter\nOnMouseExit\nOnMouseOver\nOnMouseUp\n",[70987],{"type":597,"tag":629,"props":70988,"children":70989},{"__ignoreMap":591},[70990],{"type":603,"value":70985},{"type":597,"tag":606,"props":70992,"children":70993},{},[70994],{"type":603,"value":70995},"这个处理方式有以下几个特点：",{"type":597,"tag":1321,"props":70997,"children":70998},{},[70999,71004,71009,71014,71019],{"type":597,"tag":807,"props":71000,"children":71001},{},[71002],{"type":603,"value":71003},"MonoBehavior所在的GameObject需要有Collider碰撞组件，并且Physics.queriesHitTriggers设置为True，这个在Edit -> Physics Settings -> Physics or Physics2D中设置。",{"type":597,"tag":807,"props":71005,"children":71006},{},[71007],{"type":603,"value":71008},"或者MonoBehavior所在的GameObject存在GUIElement。",{"type":597,"tag":807,"props":71010,"children":71011},{},[71012],{"type":603,"value":71013},"OnMouse处理函数可以是协程。",{"type":597,"tag":807,"props":71015,"children":71016},{},[71017],{"type":603,"value":71018},"GameObject所有MonoBehavior实现OnMouse的函数都会调用。",{"type":597,"tag":807,"props":71020,"children":71021},{},[71022],{"type":603,"value":71023},"Collider或GUIElement的层级顺序，会遮挡事件的传递。",{"type":597,"tag":606,"props":71025,"children":71026},{},[71027,71029,71036,71038,71045],{"type":603,"value":71028},"按照官方的解释，这是GUI事件的一部分，参看",{"type":597,"tag":886,"props":71030,"children":71033},{"href":71031,"rel":71032},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Manual/EventFunctions.html",[890],[71034],{"type":603,"value":71035},"EventFunctions",{"type":603,"value":71037},"。设计的初衷也是为了GUI服务的。参看",{"type":597,"tag":886,"props":71039,"children":71042},{"href":71040,"rel":71041},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Manual/ExecutionOrder.html",[890],[71043],{"type":603,"value":71044},"ExecutionOrder",{"type":603,"value":71046},"最后的unity执行流程图，会发现OnMouse事件是一个独立的Input Event。",{"type":597,"tag":606,"props":71048,"children":71049},{},[71050],{"type":597,"tag":719,"props":71051,"children":71053},{"alt":719,"src":71052},"/images/2019-08-11-ugui-eventmanager/20171106145111819.png",[],{"type":597,"tag":606,"props":71055,"children":71056},{},[71057],{"type":603,"value":71058},"可以看到，OnMouse事件在，Physics事件之后，Update之前，记住这个顺序，后面会用到。并且，这是引擎本身回调的，就引擎使用而言可以看成是，消息驱动。至于引擎的实现，可是轮询也可以是消息驱动。",{"type":597,"tag":3995,"props":71060,"children":71062},{"id":71061},"在update中輪詢input物件",[71063],{"type":603,"value":71064},"在Update中輪詢Input物件",{"type":597,"tag":621,"props":71066,"children":71068},{"code":71067},"public class ExampleClass : MonoBehaviour\n{ \n    public void Update() \n    { \n       if (Input.GetButtonDown(\"Fire1\")) \n       { \n            Debug.Log(Input.mousePosition); \n       } \n    }\n}\n",[71069],{"type":597,"tag":629,"props":71070,"children":71071},{"__ignoreMap":591},[71072],{"type":603,"value":71067},{"type":597,"tag":606,"props":71074,"children":71075},{},[71076],{"type":603,"value":71077},"这是官方的例子，Input拥有各种输入设备的数据信息。每一帧不断的检测，查看有没有需要处理的输入信息，利用GameObject本身的层级顺序来控制Update的调用顺序，从而控制了Input的处理顺序。",{"type":597,"tag":606,"props":71079,"children":71080},{},[71081],{"type":603,"value":71082},"Input的信息由引擎自己设置的，明显Unity需要实现不同平台的事件处理，然后对Input进行设置。另外有一个InputManager面板用来配置Input相关属性的，在Edit -> Physics Settings -> Input中。",{"type":597,"tag":606,"props":71084,"children":71085},{},[71086],{"type":603,"value":71087},"由前面的执行流程图可知，OnMouse事件会在Update之前调用，当然我们也可以在OnMouse中使用Input，这样就变成了消息驱动，而不是轮询了。但这样的缺点是，事件必须由touch或pointer碰撞触发，比如键盘或控制器按钮的事件就没有办法捕获了。",{"type":597,"tag":857,"props":71089,"children":71091},{"id":71090},"eventsystem",[71092],{"type":603,"value":70460},{"type":597,"tag":606,"props":71094,"children":71095},{},[71096],{"type":603,"value":71097},"EventSystem组件主要负责处理输入、射线投射以及发送事件。一个场景中只能有一个EventSystem组件，并且需要BaseInputModule类型组件的协助才能工作。EventSystem在一开始的时候会把自己所属对象下的BaseInputModule类型组件加到一个内部列表，并且在每个Update周期通过接口UpdateModules接口调用这些基本输入模块的UpdateModule接口，然后BaseInputModule会在UpdateModule接口中将自己的状态修改成'Updated'，之后BaseInputModule的Process接口才会被调用。",{"type":597,"tag":606,"props":71099,"children":71100},{},[71101],{"type":603,"value":71102},"BaseInputModule是一个基类模块，负责发送输入事件（点击、拖拽、选中等）到具体对象。EventSystem下的所有输入模块都必须继承自BaseInputModule组件。StandaloneInputModule和TouchInputModule组件是系统提供的标准输入模块和触摸输入模块，我们可以通过继承BaseInputModule实现自己的输入模块。",{"type":597,"tag":606,"props":71104,"children":71105},{},[71106],{"type":603,"value":71107},"BaseRaycaster也是一个基类，前面说的输入模块要检测到鼠标事件必须有射线投射组件才能确定目标对象。系统实现的射线投射类组件有PhysicsRaycaster, Physics2DRaycaster, GraphicRaycaster。这个模块也是可以自己继承BaseRaycaster实现个性化定制。",{"type":597,"tag":606,"props":71109,"children":71110},{},[71111],{"type":597,"tag":1080,"props":71112,"children":71113},{},[71114],{"type":603,"value":71115},"总的来说，EventSystem负责管理，BaseInputModule负责输入，BaseRaycaster负责确定目标对象，目标对象负责接收事件并处理，然后一个完整的事件系统就有了。",{"type":597,"tag":857,"props":71117,"children":71119},{"id":71118},"eventsystem與onmouse的區別",[71120],{"type":603,"value":71121},"EventSystem與OnMouse的區別",{"type":597,"tag":1321,"props":71123,"children":71124},{},[71125,71130,71135,71140],{"type":597,"tag":807,"props":71126,"children":71127},{},[71128],{"type":603,"value":71129},"OnMouse 会先于 EventSystem 触发。因为EventSystem的源码显示，其在Update中去轮询检测处理Input的输入。而OnMouse事件先于Update调用。",{"type":597,"tag":807,"props":71131,"children":71132},{},[71133],{"type":603,"value":71134},"OnMouse脚本需要在同一个GameObject上挂载Collider才能检测。EventSystem的脚本会根据子节点的Collider来触发(平行节点不行)。",{"type":597,"tag":807,"props":71136,"children":71137},{},[71138],{"type":603,"value":71139},"Rigidbody有个特点，会把子节点所有的Collider统一检测和处理。也就是说，OnMouse脚本与RigidBody在一起就可以检测所有的子节点Collider，而不再需要同级的Collider。而EventSystem的脚本则不依赖于Rigidbody，都可以检测子节点的Collider。",{"type":597,"tag":807,"props":71141,"children":71142},{},[71143],{"type":603,"value":71144},"OnMouse依赖于Tag为MainCamera相机的Culling Mask来过滤射线。EventSystem则是依赖挂载Physics Raycaster的相机。",{"type":597,"tag":606,"props":71146,"children":71147},{},[71148],{"type":603,"value":71149},"另外，当在有Collider的子节点都挂载OnMouse或EventSystem事件的时候，只会触发一次事件。但在同一个GameObject上挂载多个脚本，就会触发多次。",{"type":597,"tag":857,"props":71151,"children":71153},{"id":71152},"unity-raycasters-和事件处理",[71154],{"type":603,"value":71155},"Unity Raycasters 和事件处理",{"type":597,"tag":606,"props":71157,"children":71158},{},[71159],{"type":603,"value":69037},{"type":597,"tag":606,"props":71161,"children":71162},{},[71163],{"type":603,"value":69048},{"type":597,"tag":1321,"props":71165,"children":71166},{},[71167,71171,71175],{"type":597,"tag":807,"props":71168,"children":71169},{},[71170],{"type":603,"value":69056},{"type":597,"tag":807,"props":71172,"children":71173},{},[71174],{"type":603,"value":69061},{"type":597,"tag":807,"props":71176,"children":71177},{},[71178],{"type":603,"value":69066},{"type":597,"tag":606,"props":71180,"children":71181},{},[71182],{"type":603,"value":69071},{"type":597,"tag":606,"props":71184,"children":71185},{},[71186],{"type":603,"value":69076},{"type":597,"tag":606,"props":71188,"children":71189},{},[71190],{"type":597,"tag":719,"props":71191,"children":71193},{"alt":69082,"src":71192},"/images/2019-08-11-ugui-eventmanager/unity_event_system_raycaster.png",[],{"type":597,"tag":1023,"props":71195,"children":71197},{"id":71196},"unity的事件处理",[71198],{"type":603,"value":71196},{"type":597,"tag":606,"props":71200,"children":71201},{},[71202,71204,71209,71210,71215,71217,71223,71225,71230],{"type":603,"value":71203},"当 Event System 处理输入事件并找到合适的接收者，将该接收者作为参数执行 ExecuteEvents 类中的 ",{"type":597,"tag":629,"props":71205,"children":71207},{"className":71206},[],[71208],{"type":603,"value":60773},{"type":603,"value":36397},{"type":597,"tag":629,"props":71211,"children":71213},{"className":71212},[],[71214],{"type":603,"value":70882},{"type":603,"value":71216}," 方法；如果此时该接收对象 GameObject 绑定了 EventTrigger 组件，由于 EventTrigger 类实现了所有常用的 UI 事件接口(即实现了 ",{"type":597,"tag":629,"props":71218,"children":71220},{"className":71219},[],[71221],{"type":603,"value":71222},"IEventSystemHandler",{"type":603,"value":71224}," 接口)，因此会执行 EventTrigger 类中相应事件接口对应的方法，转而执行 EventTrigger 类的 ",{"type":597,"tag":629,"props":71226,"children":71228},{"className":71227},[],[71229],{"type":603,"value":60773},{"type":603,"value":71231}," 方法，最终回调在编辑器中设定的方法。",{"type":597,"tag":606,"props":71233,"children":71234},{},[71235,71237,71242],{"type":603,"value":71236},"所以如果当一个点击事件被触发,首先会拿到射线检测返回的gameobject，然后搜索当前的",{"type":597,"tag":1080,"props":71238,"children":71239},{},[71240],{"type":603,"value":71241},"gameobejct以及其父节点",{"type":603,"value":71243},"上面是否有实现了IPointerDownHandler的接口的控件，如果有实现了的就把newPressed赋值为这个控件的gameobject，如果没有，就去搜索实现了IPointerClickHandler这个接口的控件，如果没有在自身上找到的话，会依次地向父节点层层搜索，直到找到为止，然后依然是把newPressed赋值为这个控件的gameobject。接着会按照类似的方式去搜索自身以及父节点上是否有实现了IDragHandler的组件，如果有的话紧接着便会去触发OnPointerDown和OnDrag方法。",{"type":597,"tag":606,"props":71245,"children":71246},{},[71247],{"type":603,"value":71248},"当鼠标按下并抬起的时候，首先会触发IPointerUpHandler接口中的函数OnPointerUp()，然后会再次搜索当前gameobject以及其父节点上是否有实现了IPointerClickHandler接口的控件，如果有的的话，会和之前存下来的newPressd进行比较，看两者是否为同一个gameobject。如果两者为同一个gameobject的话就会触发Click事件。",{"type":597,"tag":606,"props":71250,"children":71251},{},[71252],{"type":603,"value":71253},"因此我们需要注意，如果一个物体没有父节点的话，那么只实现IPointerClickHandler接口便是可以接收到点击事件的。如果他有父节点，父节点挂载的脚本也是只实现IPointerClickHandler接口的话，点击事件也是可以接收到的。但是如果父节点实现了IPointerDownHandler和IPointerClickHandler接口，子节点只实现IPointerClickHandler接口的话，两者便会都接收不到点击事件，需要子节点也实现IPointerDownHandler这个接口才行。",{"type":597,"tag":606,"props":71255,"children":71256},{},[71257],{"type":597,"tag":719,"props":71258,"children":71261},{"alt":71259,"src":71260},"unity_event_trigger_2.jpeg","/images/2019-08-11-ugui-eventmanager/unity_event_trigger_2.jpeg",[],{"type":597,"tag":606,"props":71263,"children":71264},{},[71265],{"type":597,"tag":1080,"props":71266,"children":71267},{},[71268],{"type":603,"value":71269},"事件透传",{"type":597,"tag":606,"props":71271,"children":71272},{},[71273],{"type":603,"value":71274},"如果事件被接收后,就不会再被父节点的监听处理,如果需要,则得使用message手动触发",{"type":597,"tag":621,"props":71276,"children":71278},{"code":71277},"using UnityEngine;\nusing System.Collections;\nusing UnityEngine.EventSystems;\nusing UnityEngine.UI;\nusing System.Collections.Generic;\n \npublic class Test : MonoBehaviour,IPointerClickHandler ,IPointerDownHandler,IPointerUpHandler\n{ \n \n    //监听按下\n    public void OnPointerDown(PointerEventData eventData)\n    {\n        PassEvent(eventData,ExecuteEvents.pointerDownHandler);\n    }\n \n    //监听抬起\n    public void OnPointerUp(PointerEventData eventData)\n    {\n        PassEvent(eventData,ExecuteEvents.pointerUpHandler);\n    }\n \n    //监听点击\n    public void OnPointerClick(PointerEventData eventData)\n    {\n        PassEvent(eventData,ExecuteEvents.submitHandler);\n        PassEvent(eventData,ExecuteEvents.pointerClickHandler);\n    }\n \n \n    //把事件透下去\n    public void  PassEvent\u003CT>(PointerEventData data,ExecuteEvents.EventFunction\u003CT> function)\n        where T : IEventSystemHandler\n    {\n        List\u003CRaycastResult> results = new List\u003CRaycastResult>();\n        EventSystem.current.RaycastAll(data, results); \n        GameObject current = data.pointerCurrentRaycast.gameObject ;\n        for(int i =0; i\u003C results.Count;i++)\n        {\n            if(current!= results[i].gameObject)\n            {\n                ExecuteEvents.Execute(results[i].gameObject, data,function);\n                //RaycastAll后ugui会自己排序，如果你只想响应透下去的最近的一个响应，这里ExecuteEvents.Execute后直接break就行。\n            }\n        }\n    }\n}\n",[71279],{"type":597,"tag":629,"props":71280,"children":71281},{"__ignoreMap":591},[71282],{"type":603,"value":71277},{"type":597,"tag":606,"props":71284,"children":71285},{},[71286],{"type":597,"tag":1080,"props":71287,"children":71288},{},[71289],{"type":603,"value":71290},"事件忽略",{"type":597,"tag":606,"props":71292,"children":71293},{},[71294],{"type":603,"value":71295},"如果需要当前节点及子节点都不响应UI事件",{"type":597,"tag":1321,"props":71297,"children":71298},{},[71299,71304,71309],{"type":597,"tag":807,"props":71300,"children":71301},{},[71302],{"type":603,"value":71303},"勾选Raycast Targe",{"type":597,"tag":807,"props":71305,"children":71306},{},[71307],{"type":603,"value":71308},"在当前节点上添加一个组件CanvasGroup，然后取消其Interactable和Blocks Raycasts的勾选",{"type":597,"tag":807,"props":71310,"children":71311},{},[71312],{"type":603,"value":71313},"添加脚本",{"type":597,"tag":621,"props":71315,"children":71317},{"code":71316},"using UnityEngine;\nusing System.Collections;\npublic class TouchIgnore : MonoBehaviour, ICanvasRaycastFilter\n{\n    public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)\n    {\n        return false;\n    }\n}\n",[71318],{"type":597,"tag":629,"props":71319,"children":71320},{"__ignoreMap":591},[71321],{"type":603,"value":71316},{"type":597,"tag":606,"props":71323,"children":71324},{},[71325],{"type":597,"tag":1080,"props":71326,"children":71327},{},[71328],{"type":603,"value":71329},"事件阻止",{"type":597,"tag":606,"props":71331,"children":71332},{},[71333],{"type":603,"value":71334},"父子之间阻止向父级传递事件,只要在该对象加上一个EventTrigger起就可以了,代表这个事件已经被处理了.",{"type":597,"tag":621,"props":71336,"children":71338},{"code":71337}," this.GameObject.GetOrAddComponent\u003CEventTrigger>()\n",[71339],{"type":597,"tag":629,"props":71340,"children":71341},{"__ignoreMap":591},[71342],{"type":603,"value":71337},{"type":597,"tag":606,"props":71344,"children":71345},{},[71346,71348],{"type":603,"value":71347},"比如一个案例,点击最顶级的遮罩(白色部分)窗口关闭,但是点击到窗口内部(红色部分)不做处理\n",{"type":597,"tag":719,"props":71349,"children":71352},{"alt":71350,"src":71351},"image-20200727011714966","/images/2019-08-11-ugui-eventmanager/image-20200727011714966.png",[],{"type":597,"tag":606,"props":71354,"children":71355},{},[71356],{"type":597,"tag":1080,"props":71357,"children":71358},{},[71359],{"type":603,"value":71360},"ugui事件和射线穿透的问题",{"type":597,"tag":606,"props":71362,"children":71363},{},[71364,71366,71371,71373,71378],{"type":603,"value":71365},"eventsystem也是向场景发送射线,然后找到",{"type":597,"tag":1080,"props":71367,"children":71368},{},[71369],{"type":603,"value":71370},"第一个",{"type":603,"value":71372},"触碰的有",{"type":597,"tag":1080,"props":71374,"children":71375},{},[71376],{"type":603,"value":71377},"Raycast Target",{"type":603,"value":71379},"的game object.然后在向这个gameobject的父级去找.",{"type":597,"tag":606,"props":71381,"children":71382},{},[71383],{"type":603,"value":71384},"所有如果ui即使全屏了,但是没有设置Raycast Target,仍然会穿透ui.射线会检测到下面的立方体,如图:",{"type":597,"tag":606,"props":71386,"children":71387},{},[71388],{"type":597,"tag":719,"props":71389,"children":71392},{"alt":71390,"src":71391},"image-20200727010842873","/images/2019-08-11-ugui-eventmanager/image-20200727010842873.png",[],{"type":597,"tag":606,"props":71394,"children":71395},{},[71396],{"type":597,"tag":1080,"props":71397,"children":71398},{},[71399],{"type":603,"value":71400},"事件和handler的连接触发方式",{"type":597,"tag":803,"props":71402,"children":71403},{},[71404,71409,71414],{"type":597,"tag":807,"props":71405,"children":71406},{},[71407],{"type":603,"value":71408},"对于某些ui组件，可以直接设置其对自己产生的事件的handler，如button的onpointerclick",{"type":597,"tag":807,"props":71410,"children":71411},{},[71412],{"type":603,"value":71413},"对于任何ui组件，都可以使用eventtrigger这个component，这个trigger放置在产生事件的UI组件上，里面包含了一个事件的类型，以及这个类型关联的处理函数，处理函数可以使用两种函数参数，一种是使用int string简单类型，一种是使用BaseEventData类型，因为当event发生时，会跟随者把这个事件包装成一个PointerEventData类型的参数送进来，里面包含ui事件的详细信息，包括鼠标在哪，而对于前一种简单类型，在编辑器上可以填写当事件发生时传什么参数，这就好比qt的signal和slot连接。",{"type":597,"tag":807,"props":71415,"children":71416},{},[71417,71419,71424,71426,71429],{"type":603,"value":71418},"强制让某个事件发生在某个handler上（也就是强制某个handler执行）：调用ExecuteEvents.Execute\u003C",{"type":597,"tag":1080,"props":71420,"children":71421},{},[71422],{"type":603,"value":71423},"ICustomMessageTarget",{"type":603,"value":71425},">(target, null, (x,y)=>x.Message1());",{"type":597,"tag":1595,"props":71427,"children":71428},{},[],{"type":603,"value":71430},"这个调用将执行target身上所有继承 了ICustomMessageTarget接口的mono的Message1函数，个人认为这个和给target发送Message1 的sendmessage没什么区别，可能是我还没有立即好这个接口。",{"type":597,"tag":606,"props":71432,"children":71433},{},[71434],{"type":597,"tag":1080,"props":71435,"children":71436},{},[71437],{"type":603,"value":71438},"自定义事件处理",{"type":597,"tag":606,"props":71440,"children":71441},{},[71442,71444],{"type":603,"value":71443},"建立一個 Script，繼承 Event Interfaces，這裡是IPointerDownHandler(點下事件)，",{"type":597,"tag":886,"props":71445,"children":71448},{"href":71446,"rel":71447},"http://docs.unity3d.com/Manual/SupportedEvents.html",[890],[71449],{"type":603,"value":71450},"看更多 Event 請點我",{"type":597,"tag":621,"props":71452,"children":71454},{"code":71453},"using UnityEngine;\nusing UnityEngine.EventSystems;\n \npublic class EventTest : MonoBehaviour, IPointerDownHandler\n{\n    public void OnPointerDown(PointerEventData eventData)\n    {\n        print(gameObject.name);\n    }\n}\n",[71455],{"type":597,"tag":629,"props":71456,"children":71457},{"__ignoreMap":591},[71458],{"type":603,"value":71453},{"type":597,"tag":598,"props":71460,"children":71462},{"id":71461},"阻止手动发送射线穿透ugui问题",[71463],{"type":603,"value":71461},{"type":597,"tag":606,"props":71465,"children":71466},{},[71467],{"type":603,"value":71468},"UGUI 提供了一个检测是否点击在UI上的方法\nEventSystem.current.IsPointerOverGameObject();\n在EventSystem的标准输入Standalone Input Model下是正常的，",{"type":597,"tag":606,"props":71470,"children":71471},{},[71472],{"type":603,"value":71473},"但是在Touch Input Module输入模式下不正常",{"type":597,"tag":606,"props":71475,"children":71476},{},[71477,71479,71486],{"type":603,"value":71478},"参考网络资料，解决办法(直接上",{"type":597,"tag":886,"props":71480,"children":71483},{"href":71481,"rel":71482},"http://blog.csdn.net/andyhebear/article/details/51433748",[890],[71484],{"type":603,"value":71485},"源码",{"type":603,"value":61616},{"type":597,"tag":621,"props":71488,"children":71491},{"code":71489,"language":8105,"meta":591,"className":71490}," using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.EventSystems;\n\npublic class PointerCheck : MonoBehaviour\n{\n //UGUI 提供了一个检测是否点击在UI上的方法\n    //EventSystem.current.IsPointerOverGameObject();\n    //但是该方法在PC上检测正常，结果拿到Android真机测试上，永远检测不到。\n    //方法一， 使用该方法的另一个重载方法，使用时给该方法传递一个整形参数\n    // 该参数即使触摸手势的 id\n    // int id = Input.GetTouch(0).fingerId;\n    //public static bool IsPointerOverGameObject(int fingerID) {\n    //    return UnityEngine.EventSystems.EventSystem.current.IsPointerOverGameObject(fingerID);//移动输入模式下一样不行\n \n    //}\n    public static bool IsPointerOverGameObject() {\n        //if (Input.touchCount > 0) {\n                        \n        //    int id = Input.GetTouch(0).fingerId;\n        //    return UnityEngine.EventSystems.EventSystem.current.IsPointerOverGameObject(id);//安卓机上不行\n        //}\n        //else {\n            //return UnityEngine.EventSystems.EventSystem.current.IsPointerOverGameObject();\n            PointerEventData eventData = new PointerEventData(UnityEngine.EventSystems.EventSystem.current);\n            eventData.pressPosition = Input.mousePosition;\n            eventData.position = Input.mousePosition;\n \n            List\u003CRaycastResult> list = new List\u003CRaycastResult>();\n            UnityEngine.EventSystems.EventSystem.current.RaycastAll(eventData, list);\n            //Debug.Log(list.Count);\n            return list.Count > 0;\n       // }\n    }\n    //方法二 通过UI事件发射射线\n    //是 2D UI 的位置，非 3D 位置\n    public static bool IsPointerOverGameObject(Vector2 screenPosition) {\n        //实例化点击事件\n        PointerEventData eventDataCurrentPosition = new PointerEventData(UnityEngine.EventSystems.EventSystem.current);\n        //将点击位置的屏幕坐标赋值给点击事件\n        eventDataCurrentPosition.position = new Vector2(screenPosition.x, screenPosition.y);\n \n        List\u003CRaycastResult> results = new List\u003CRaycastResult>();\n        //向点击处发射射线\n        EventSystem.current.RaycastAll(eventDataCurrentPosition, results);\n \n        return results.Count > 0;\n    }\n    //方法三 通过画布上的 GraphicRaycaster 组件发射射线\n    public static bool IsPointerOverGameObject(Canvas canvas, Vector2 screenPosition) {\n        //实例化点击事件\n        PointerEventData eventDataCurrentPosition = new PointerEventData(EventSystem.current);\n        //将点击位置的屏幕坐标赋值给点击事件\n        eventDataCurrentPosition.position = screenPosition;\n        //获取画布上的 GraphicRaycaster 组件\n        GraphicRaycaster uiRaycaster = canvas.gameObject.GetComponent\u003CGraphicRaycaster>();\n \n        List\u003CRaycastResult> results = new List\u003CRaycastResult>();\n        // GraphicRaycaster 发射射线\n        uiRaycaster.Raycast(eventDataCurrentPosition, results);\n \n        return results.Count > 0;\n    }\n// For Details => https://blog.csdn.net/andyhebear/article/details/51433748\n}\n",[8107],[71492],{"type":597,"tag":629,"props":71493,"children":71494},{"__ignoreMap":591},[71495],{"type":603,"value":71489},{"type":597,"tag":606,"props":71497,"children":71498},{},[71499],{"type":603,"value":71500},"网友解决办法：",{"type":597,"tag":621,"props":71502,"children":71504},{"code":71503},"      /// \u003Csummary>\n     /// Cast a ray to test if Input.mousePosition is over any UI object in EventSystem.current. This is a replacement\n     /// for IsPointerOverGameObject() which does not work on Android in 4.6.0f3\n     /// \u003C/summary>\n     private static bool IsPointerOverUIObject()\n     {\n         if (EventSystem.current == null)\n             return false;\n \n         // Referencing this code for GraphicRaycaster https://gist.github.com/stramit/ead7ca1f432f3c0f181f\n         // the ray cast appears to require only eventData.position.\n         PointerEventData eventDataCurrentPosition = new PointerEventData(EventSystem.current);\n         eventDataCurrentPosition.position = new Vector2(Input.mousePosition.x, Input.mousePosition.y);\n \n         List\u003CRaycastResult> results = new List\u003CRaycastResult>();\n         EventSystem.current.RaycastAll(eventDataCurrentPosition, results);\n \n         return results.Count > 0;\n     }\n \n     /// \u003Csummary>\n     /// Cast a ray to test if screenPosition is over any UI object in canvas. This is a replacement\n     /// for IsPointerOverGameObject() which does not work on Android in 4.6.0f3\n     /// \u003C/summary>\n     private bool IsPointerOverUIObject(Canvas canvas, Vector2 screenPosition)\n     {\n         if (EventSystem.current == null)\n             return false;\n \n         // Referencing this code for GraphicRaycaster https://gist.github.com/stramit/ead7ca1f432f3c0f181f\n         // the ray cast appears to require only eventData.position.\n         PointerEventData eventDataCurrentPosition = new PointerEventData(EventSystem.current);\n         eventDataCurrentPosition.position = screenPosition;\n \n         GraphicRaycaster uiRaycaster = canvas.gameObject.GetComponent\u003CGraphicRaycaster>();\n         List\u003CRaycastResult> results = new List\u003CRaycastResult>();\n         uiRaycaster.Raycast(eventDataCurrentPosition, results);\n         return results.Count > 0;\n     }\n",[71505],{"type":597,"tag":629,"props":71506,"children":71507},{"__ignoreMap":591},[71508],{"type":603,"value":71503},{"type":597,"tag":857,"props":71510,"children":71512},{"id":71511},"message-system改进的消息系统",[71513],{"type":603,"value":71514},"Message System（改进的消息系统）",{"type":597,"tag":1023,"props":71516,"children":71518},{"id":71517},"传统方式进行-message-通信",[71519],{"type":603,"value":71520},"传统方式进行 Message 通信",{"type":597,"tag":606,"props":71522,"children":71523},{},[71524,71526,71532,71533,71539,71540,71546],{"type":603,"value":71525},"传统消息通信，通常我们会使用 GameObject 类中的 ",{"type":597,"tag":629,"props":71527,"children":71529},{"className":71528},[],[71530],{"type":603,"value":71531},"SendMessage",{"type":603,"value":687},{"type":597,"tag":629,"props":71534,"children":71536},{"className":71535},[],[71537],{"type":603,"value":71538},"SendMessageUpwards",{"type":603,"value":13757},{"type":597,"tag":629,"props":71541,"children":71543},{"className":71542},[],[71544],{"type":603,"value":71545},"BroadcastMessage",{"type":603,"value":71547}," 方法",{"type":603,"value":2680},{"type":597,"tag":1937,"props":71550,"children":71551},{},[71552,71573],{"type":597,"tag":1941,"props":71553,"children":71554},{},[71555],{"type":597,"tag":1945,"props":71556,"children":71557},{},[71558,71561,71565,71569],{"type":597,"tag":1949,"props":71559,"children":71560},{},[],{"type":597,"tag":1949,"props":71562,"children":71563},{},[71564],{"type":603,"value":71531},{"type":597,"tag":1949,"props":71566,"children":71567},{},[71568],{"type":603,"value":71538},{"type":597,"tag":1949,"props":71570,"children":71571},{},[71572],{"type":603,"value":71545},{"type":597,"tag":1963,"props":71574,"children":71575},{},[71576,71597,71618,71638],{"type":597,"tag":1945,"props":71577,"children":71578},{},[71579,71584,71589,71593],{"type":597,"tag":1970,"props":71580,"children":71581},{},[71582],{"type":603,"value":71583},"自身节点",{"type":597,"tag":1970,"props":71585,"children":71586},{},[71587],{"type":603,"value":71588},"√",{"type":597,"tag":1970,"props":71590,"children":71591},{},[71592],{"type":603,"value":71588},{"type":597,"tag":1970,"props":71594,"children":71595},{},[71596],{"type":603,"value":71588},{"type":597,"tag":1945,"props":71598,"children":71599},{},[71600,71605,71610,71614],{"type":597,"tag":1970,"props":71601,"children":71602},{},[71603],{"type":603,"value":71604},"兄弟节点",{"type":597,"tag":1970,"props":71606,"children":71607},{},[71608],{"type":603,"value":71609},"×",{"type":597,"tag":1970,"props":71611,"children":71612},{},[71613],{"type":603,"value":71609},{"type":597,"tag":1970,"props":71615,"children":71616},{},[71617],{"type":603,"value":71609},{"type":597,"tag":1945,"props":71619,"children":71620},{},[71621,71626,71630,71634],{"type":597,"tag":1970,"props":71622,"children":71623},{},[71624],{"type":603,"value":71625},"父/祖先节点",{"type":597,"tag":1970,"props":71627,"children":71628},{},[71629],{"type":603,"value":71609},{"type":597,"tag":1970,"props":71631,"children":71632},{},[71633],{"type":603,"value":71588},{"type":597,"tag":1970,"props":71635,"children":71636},{},[71637],{"type":603,"value":71609},{"type":597,"tag":1945,"props":71639,"children":71640},{},[71641,71646,71650,71654],{"type":597,"tag":1970,"props":71642,"children":71643},{},[71644],{"type":603,"value":71645},"子/孙节点",{"type":597,"tag":1970,"props":71647,"children":71648},{},[71649],{"type":603,"value":71609},{"type":597,"tag":1970,"props":71651,"children":71652},{},[71653],{"type":603,"value":71609},{"type":597,"tag":1970,"props":71655,"children":71656},{},[71657],{"type":603,"value":71588},{"type":597,"tag":1023,"props":71659,"children":71661},{"id":71660},"messaging-system",[71662],{"type":603,"value":71663},"Messaging System",{"type":597,"tag":606,"props":71665,"children":71666},{},[71667],{"type":603,"value":71668},"在 UGUI 的 Event System 中，所有的事件通信都是用了 Messaging System 来实现，它也解决了传统方式进行 Message 通信中可能会遇到的一些问题。下面就来让我们好好看看这套 Messaging System。",{"type":597,"tag":606,"props":71670,"children":71671},{},[71672,71674,71679,71681,71687,71689,71694],{"type":603,"value":71673},"首先，要想让 Component 能够从 Messaging System 接收消息，Component 要实现 ",{"type":597,"tag":629,"props":71675,"children":71677},{"className":71676},[],[71678],{"type":603,"value":71222},{"type":603,"value":71680}," 这个接口。",{"type":597,"tag":629,"props":71682,"children":71684},{"className":71683},[],[71685],{"type":603,"value":71686},"IPointerDownHandler",{"type":603,"value":71688},"等都继承了",{"type":597,"tag":629,"props":71690,"children":71692},{"className":71691},[],[71693],{"type":603,"value":71222},{"type":603,"value":71695}," 接口",{"type":597,"tag":621,"props":71697,"children":71699},{"code":71698},"public interface ICustomMessageTarget : IEventSystemHandler\n{\n    // functions that can be called via the messaging system\n    void Message1();\n    void Message2();\n}\n",[71700],{"type":597,"tag":629,"props":71701,"children":71702},{"__ignoreMap":591},[71703],{"type":603,"value":71698},{"type":597,"tag":606,"props":71705,"children":71706},{},[71707],{"type":603,"value":71708},"实现这个接口 , 把这个脚本挂在某个物体上，这里假设为物体AAA",{"type":597,"tag":621,"props":71710,"children":71712},{"code":71711},"public class CustomMessageTarget : MonoBehaviour, ICustomMessageTarget\n{\n    public void Message1()\n    {\n        Debug.Log (\"Message 1 received\");\n    }\n\n    public void Message2()\n    {\n        Debug.Log (\"Message 2 received\");\n    }\n}\n",[71713],{"type":597,"tag":629,"props":71714,"children":71715},{"__ignoreMap":591},[71716],{"type":603,"value":71711},{"type":597,"tag":606,"props":71718,"children":71719},{},[71720],{"type":603,"value":71721},"在任何脚本中使用ExecuteEvents静态类发送Message，来执行接口中定义的方法",{"type":597,"tag":621,"props":71723,"children":71725},{"code":71724},"ExecuteEvents.Execute\u003CICustomMessageTarget>(target, null, (x,y)=>x.Message1());\n",[71726],{"type":597,"tag":629,"props":71727,"children":71728},{"__ignoreMap":591},[71729],{"type":603,"value":71724},{"type":597,"tag":606,"props":71731,"children":71732},{},[71733,71735,71740],{"type":603,"value":71734},"Excute泛型方法，有3个参数，第一个参数是发送message的gameobject对象，只有当对象上有",{"type":597,"tag":629,"props":71736,"children":71738},{"className":71737},[],[71739],{"type":603,"value":71222},{"type":603,"value":71741},"实现类的时候才可以，这个例子中自然就是AAA物体。",{"type":597,"tag":606,"props":71743,"children":71744},{},[71745],{"type":603,"value":71746},"ExecuteEvents静态类还有其他方法：",{"type":597,"tag":621,"props":71748,"children":71750},{"code":71749},"EventSystems.ExecuteEvents.CanHandleEvent    判断给定的gameobejct是否能处理这个事件\nEventSystems.ExecuteEvents.Execute     执行事件\nEventSystems.ExecuteEvents.ExecuteHierarchy  是递归寻找适合的gameobject，并执行事件 \nEventSystems.ExecuteEvents.GetEventHandler   \nEventSystems.ExecuteEvents.ValidateEventData   \n",[71751],{"type":597,"tag":629,"props":71752,"children":71753},{"__ignoreMap":591},[71754],{"type":603,"value":71749},{"type":597,"tag":857,"props":71756,"children":71758},{"id":71757},"eventsystem-处理physics",[71759],{"type":603,"value":71760},"eventsystem 处理Physics",{"type":597,"tag":606,"props":71762,"children":71763},{},[71764,71766,71773],{"type":603,"value":71765},"首先，我们看一个官方文档的说明 ",{"type":597,"tag":886,"props":71767,"children":71770},{"href":71768,"rel":71769},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Manual/Raycasters.html",[890],[71771],{"type":603,"value":71772},"Raycasters",{"type":603,"value":758},{"type":597,"tag":617,"props":71775,"children":71776},{},[71777],{"type":597,"tag":606,"props":71778,"children":71779},{},[71780],{"type":603,"value":71781},"If multiple Raycasters are used then they will all have casting happen against them and the results will be sorted based on distance to the elements.",{"type":597,"tag":606,"props":71783,"children":71784},{},[71785],{"type":603,"value":71786},"当多个Raycaster被使用的时候，结果会按照元素之间的距离排序，然后事件就会按照这个顺序被传递。",{"type":597,"tag":598,"props":71788,"children":71790},{"id":71789},"第一步",[71791],{"type":597,"tag":1080,"props":71792,"children":71793},{},[71794],{"type":603,"value":71789},{"type":597,"tag":606,"props":71796,"children":71797},{},[71798],{"type":597,"tag":719,"props":71799,"children":71801},{"alt":719,"src":71800},"/images/2019-08-11-ugui-eventmanager/v2-733f4cd159b935aeb26518e97b902a7d_hd.jpg",[],{"type":597,"tag":606,"props":71803,"children":71804},{},[71805],{"type":603,"value":71806},"在相机上添加Physics2DRaycaster，我这里只需要对Physics2D检测，如果是3D就用Physics3DRaycaster。Physics Raycaster 依赖一个相机，如果没有会自动添加。我挂载在相机上，射线检测就会依赖这个相机。",{"type":597,"tag":606,"props":71808,"children":71809},{},[71810],{"type":603,"value":71811},"这里我用在GameCamera上面，当然也可以放在UICamera上面，Physics Raycaster挂载在哪个相机上面，射线就依赖这个相机的Culling Mask。",{"type":597,"tag":606,"props":71813,"children":71814},{},[71815],{"type":603,"value":71816},"另外需要注意的是，Physics Raycaster所在的相机层级，也就是Depth，会影响到事件传递的顺序。比如，UI Camera层级高于Game Camera，就会永远先出发UI上的事件。同样，OnMouse事件会默认依赖Main Camera的层级。",{"type":597,"tag":598,"props":71818,"children":71820},{"id":71819},"第二步",[71821],{"type":597,"tag":1080,"props":71822,"children":71823},{},[71824],{"type":603,"value":71819},{"type":597,"tag":606,"props":71826,"children":71827},{},[71828],{"type":603,"value":71829},"给需要碰撞检测的GameObject，添加Collider和EventSystem的事件处理回调接口。注意GameObject的Layer也要与Camera和Raycaster一致，才能正确被检测到。",{"type":597,"tag":606,"props":71831,"children":71832},{},[71833],{"type":597,"tag":719,"props":71834,"children":71836},{"alt":719,"src":71835},"/images/2019-08-11-ugui-eventmanager/v2-3c1713c6226906982501aa7c4dd8252d_hd.jpg",[],{"type":597,"tag":606,"props":71838,"children":71839},{},[71840],{"type":603,"value":71841},"事件接口实现脚本(图中的Test)需要Collider，事件才能正确回调，并且GameObject和相机的距离决定了Collider的层级，也就是事件阻挡关系。",{"type":597,"tag":598,"props":71843,"children":71845},{"id":71844},"第三步",[71846],{"type":597,"tag":1080,"props":71847,"children":71848},{},[71849],{"type":603,"value":71844},{"type":597,"tag":606,"props":71851,"children":71852},{},[71853],{"type":603,"value":71854},"这样一来，EventSystem的SupportEvents的接口全部被应用到了Physics上面。也就不再需要自己手动去调用射线去检测Physics碰撞了。那么，还隐含着一个事情就是，EventSystem的IsPointerOverGameObject()就无法在判断对UI的点击了。因为现在点击到Physics也会让这个函数返回True。",{"title":591,"searchDepth":787,"depth":787,"links":71856},[71857,71858,71862,71863,71864],{"id":71196,"depth":1530,"text":71196},{"id":71461,"depth":787,"text":71461,"children":71859},[71860,71861],{"id":71517,"depth":1530,"text":71520},{"id":71660,"depth":1530,"text":71663},{"id":71789,"depth":787,"text":71789},{"id":71819,"depth":787,"text":71819},{"id":71844,"depth":787,"text":71844},"content:unity:2019-08-11-ugui-eventmanager.md","unity/2019-08-11-ugui-eventmanager.md","2019-08-11",{"_path":270,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":269,"description":71869,"body":71870,"_type":791,"_id":72039,"_source":793,"_file":72040,"_extension":795,"date":72041},"常用命令Get-PSDrive  Windows PowerShell 驱动器是一个数据存储位置，你可以像访问 Windows PowerShell 中的文件系统驱动器那样访问它。Get-Alias 和   ls Alias:(驱动器)     列出所有aliasls Env:(驱动器)    列出所有的环境变量ls Variable:(驱动器) 和 Get-Variable 列出所有的变量ls Function:(驱动器)  列出所有的函数get-command   查看命令信息 可以查看某个命令的path  get-command mysqldumpinvoke-item  向window",{"type":594,"children":71871,"toc":72035},[71872,71876,71927,71935,71943,71948,71956,71961,71970,71976,71983,71988,71996,72001,72009,72014,72022,72027],{"type":597,"tag":1023,"props":71873,"children":71874},{"id":68624},[71875],{"type":603,"value":68624},{"type":597,"tag":1321,"props":71877,"children":71878},{},[71879,71884,71889,71894,71899,71904,71909,71914,71919,71924],{"type":597,"tag":807,"props":71880,"children":71881},{},[71882],{"type":603,"value":71883},"Get-PSDrive  Windows PowerShell 驱动器是一个数据存储位置，你可以像访问 Windows PowerShell 中的文件系统驱动器那样访问它。",{"type":597,"tag":807,"props":71885,"children":71886},{},[71887],{"type":603,"value":71888},"Get-Alias 和   ls Alias:(驱动器)     列出所有alias",{"type":597,"tag":807,"props":71890,"children":71891},{},[71892],{"type":603,"value":71893},"ls Env:(驱动器)    列出所有的环境变量",{"type":597,"tag":807,"props":71895,"children":71896},{},[71897],{"type":603,"value":71898},"ls Variable:(驱动器) 和 Get-Variable 列出所有的变量",{"type":597,"tag":807,"props":71900,"children":71901},{},[71902],{"type":603,"value":71903},"ls Function:(驱动器)  列出所有的函数",{"type":597,"tag":807,"props":71905,"children":71906},{},[71907],{"type":603,"value":71908},"get-command   查看命令信息 可以查看某个命令的path  get-command mysqldump",{"type":597,"tag":807,"props":71910,"children":71911},{},[71912],{"type":603,"value":71913},"invoke-item  向windows桌面双击操作一样打开某个文件或者目录",{"type":597,"tag":807,"props":71915,"children":71916},{},[71917],{"type":603,"value":71918},"$env -split \";\"  以列表形式列出所有path",{"type":597,"tag":807,"props":71920,"children":71921},{},[71922],{"type":603,"value":71923},"ls env:    列出env驱动器中的内容",{"type":597,"tag":807,"props":71925,"children":71926},{},[],{"type":597,"tag":621,"props":71928,"children":71930},{"code":71929},"```powershell\n $path = [environment]::GetEnvironmentvariable(\"path\",\"user\")\n [environment]::SetEnvironmentvariable(\"Path\", $path+\";c:\\powershellscript\", \"User\")\n",[71931],{"type":597,"tag":629,"props":71932,"children":71933},{"__ignoreMap":591},[71934],{"type":603,"value":71929},{"type":597,"tag":621,"props":71936,"children":71938},{"code":71937},"\n# Running PowerShell Scripts From C#\n\n使用`-Command`参数，传递简单的字符串。 可以使用`-File`参数,传递一个ps脚本。 如果需要传递复杂（或者可能是换行符）的脚本文本，可以使用`-EncodedCommand`参数，它接受Base64编码的内容。\n\n",[71939],{"type":597,"tag":629,"props":71940,"children":71941},{"__ignoreMap":591},[71942],{"type":603,"value":71937},{"type":597,"tag":606,"props":71944,"children":71945},{},[71946],{"type":603,"value":71947},"void NoError()\n{\nvar command = @\"pwd\";\nvar startInfo = new ProcessStartInfo()\n{\nFileName = \"powershell.exe\",\nArguments = $\"-NoProfile -ExecutionPolicy unrestricted -Command \"{command}\"\",\nUseShellExecute = false\n};\nProcess.Start(startInfo);\n}",{"type":597,"tag":621,"props":71949,"children":71951},{"code":71950},"\n执行一个ps文件:\n\n```csharp\nvoid NoError()\n{\n    var ps1File = @\"C:\\my script folder\\script.ps1\";\n    var startInfo = new ProcessStartInfo()\n    {\n        FileName = \"powershell.exe\",\n        Arguments = $\"-NoProfile -ExecutionPolicy unrestricted -file \\\"{ps1File}\\\"\",\n        UseShellExecute = false\n    };\n    Process.Start(startInfo);\n}\n",[71952],{"type":597,"tag":629,"props":71953,"children":71954},{"__ignoreMap":591},[71955],{"type":603,"value":71950},{"type":597,"tag":606,"props":71957,"children":71958},{},[71959],{"type":603,"value":71960},"先编码执行一个复杂的命令:",{"type":597,"tag":621,"props":71962,"children":71965},{"code":71963,"language":8105,"meta":591,"className":71964},"void Base64EncodedCommand()\n{\n    var psCommmand = @\"echo \"\"quoted value\"\" \n    echo \"\"Second Line\"\"\n    pause\";\n    var psCommandBytes = System.Text.Encoding.Unicode.GetBytes(psCommmand);\n    var psCommandBase64 = Convert.ToBase64String(psCommandBytes);\n\n    var startInfo = new ProcessStartInfo()\n    {\n        FileName = \"powershell.exe\",\n        Arguments = $\"-NoProfile -ExecutionPolicy unrestricted -EncodedCommand {psCommandBase64}\",\n        UseShellExecute = false\n    };\n    Process.Start(startInfo);\n}\n",[8107],[71966],{"type":597,"tag":629,"props":71967,"children":71968},{"__ignoreMap":591},[71969],{"type":603,"value":71963},{"type":597,"tag":1023,"props":71971,"children":71973},{"id":71972},"使用c类调用powershell-命令",[71974],{"type":603,"value":71975},"使用c#类调用powershell 命令",{"type":597,"tag":606,"props":71977,"children":71978},{},[71979],{"type":597,"tag":719,"props":71980,"children":71982},{"alt":719,"src":71981},"/images/2019-08-10-powershell-command/image.png",[],{"type":597,"tag":606,"props":71984,"children":71985},{},[71986],{"type":603,"value":71987},"接著我們在 Program.cs 檔案引用兩個命名空間如下：",{"type":597,"tag":621,"props":71989,"children":71991},{"code":71990},"using System.Management.Automation;\nusing System.Management.Automation.Runspaces;\n",[71992],{"type":597,"tag":629,"props":71993,"children":71994},{"__ignoreMap":591},[71995],{"type":603,"value":71990},{"type":597,"tag":606,"props":71997,"children":71998},{},[71999],{"type":603,"value":72000},"大功告成，現在你可以將 PowerShell 指令整合到你的 C# 應用程式中了！",{"type":597,"tag":621,"props":72002,"children":72004},{"code":72003},"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service | Where-Object { $_.Status -eq 'Stopped' }\");\n\n    foreach (PSObject result in powershell.Invoke())\n    {\n        Console.WriteLine(result.Members[\"Name\"].Value);\n    }\n}\n",[72005],{"type":597,"tag":629,"props":72006,"children":72007},{"__ignoreMap":591},[72008],{"type":603,"value":72003},{"type":597,"tag":606,"props":72010,"children":72011},{},[72012],{"type":603,"value":72013},"返回字符窜:",{"type":597,"tag":621,"props":72015,"children":72017},{"code":72016},"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service | Out-String\");\n\n    foreach (string str in powershell.Invoke\u003Cstring>())\n    {\n        Console.WriteLine(str);\n    }\n}\n",[72018],{"type":597,"tag":629,"props":72019,"children":72020},{"__ignoreMap":591},[72021],{"type":603,"value":72016},{"type":597,"tag":606,"props":72023,"children":72024},{},[72025],{"type":603,"value":72026},"捕捉错误:",{"type":597,"tag":621,"props":72028,"children":72030},{"code":72029},"using (PowerShell powershell = PowerShell.Create())\n{\n    powershell.AddScript(\"Get-Service99\");\n\n    foreach (PSObject result in powershell.Invoke())\n    {\n        Console.WriteLine(result.Members[\"Name\"].Value);\n    }\n\n    Console.WriteLine(\"執行過程中發生錯誤\\n\");\n    PSDataCollection\u003CErrorRecord> errors = powershell.Streams.Error;\n    if (errors != null && errors.Count > 0)\n    {\n        foreach (ErrorRecord err in errors)\n        {\n            System.Console.WriteLine(\"錯誤: {0}\", err.ToString());\n        }\n    }\n}\n",[72031],{"type":597,"tag":629,"props":72032,"children":72033},{"__ignoreMap":591},[72034],{"type":603,"value":72029},{"title":591,"searchDepth":787,"depth":787,"links":72036},[72037,72038],{"id":68624,"depth":1530,"text":68624},{"id":71972,"depth":1530,"text":71975},"content:tool:2019-08-10-powershell-command.md","tool/2019-08-10-powershell-command.md","2019-08-10",{"_path":385,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":384,"description":72043,"body":72044,"_type":791,"_id":73032,"_source":793,"_file":73033,"_extension":795,"date":72041},"在編輯器中快速設定 RectTransform快速控制器的基本操作我們就不在這裡贅述，基本上都可以在 Unity 網站裡找到很好的教學文件與影片。RectTransform 的控制精髓：錨點們 Anchor Points在透過快速設定器修改 RectTransform 的過程中，你會發現右上區域會隨著不同的配置出現不同的屬性設定如下圖：Pos X 與 Left、Pos Y 與 Top、Width 與 Right、Height 與 Bottom 這四對屬性個別不會同時出現，有 Pos X 就沒有 Left，有 Width 就沒有 Right，那麼他們出現的規則是什麼呢？簡單來說其實就是：「當兩個",{"type":594,"children":72045,"toc":73013},[72046,72052,72057,72064,72070,72075,72082,72087,72092,72097,72114,72119,72125,72130,72141,72147,72152,72163,72169,72174,72185,72191,72196,72207,72212,72217,72222,72231,72241,72251,72270,72277,72282,72290,72295,72303,72308,72316,72321,72326,72331,72336,72344,72349,72357,72362,72409,72426,72439,72457,72472,72479,72494,72501,72507,72556,72563,72570,72575,72580,72585,72590,72599,72605,72610,72616,72621,72629,72645,72668,72679,72687,72692,72697,72718,72726,72734,72742,72752,72760,72765,72773,72781,72786,72794,72802,72810,72815,72825,72833,72846,72854,72859,72867,72875,72883,72895,72903,72911,72916,72922,72930,72936,72941,72948,72954,72959,72964,72972,72977,72985,72990],{"type":597,"tag":598,"props":72047,"children":72049},{"id":72048},"在編輯器中快速設定-recttransform",[72050],{"type":603,"value":72051},"在編輯器中快速設定 RectTransform",{"type":597,"tag":606,"props":72053,"children":72054},{},[72055],{"type":603,"value":72056},"快速控制器的基本操作我們就不在這裡贅述，基本上都可以在 Unity 網站裡找到很好的教學文件與影片。",{"type":597,"tag":606,"props":72058,"children":72059},{},[72060],{"type":597,"tag":719,"props":72061,"children":72063},{"alt":719,"src":72062},"/images/2019-08-10-ugui-RectTransform/4B112FCB-1D5E-41FC-A19D-AA5322C52414.png",[],{"type":597,"tag":598,"props":72065,"children":72067},{"id":72066},"recttransform-的控制精髓錨點們-anchor-points",[72068],{"type":603,"value":72069},"RectTransform 的控制精髓：錨點們 Anchor Points",{"type":597,"tag":606,"props":72071,"children":72072},{},[72073],{"type":603,"value":72074},"在透過快速設定器修改 RectTransform 的過程中，你會發現右上區域會隨著不同的配置出現不同的屬性設定如下圖：",{"type":597,"tag":606,"props":72076,"children":72077},{},[72078],{"type":597,"tag":719,"props":72079,"children":72081},{"alt":719,"src":72080},"/images/2019-08-10-ugui-RectTransform/B30BC54C-DA7C-4882-9B3C-FA194FE9ACA5.png",[],{"type":597,"tag":606,"props":72083,"children":72084},{},[72085],{"type":603,"value":72086},"Pos X 與 Left、Pos Y 與 Top、Width 與 Right、Height 與 Bottom 這四對屬性個別不會同時出現，有 Pos X 就沒有 Left，有 Width 就沒有 Right，那麼他們出現的規則是什麼呢？",{"type":597,"tag":606,"props":72088,"children":72089},{},[72090],{"type":603,"value":72091},"簡單來說其實就是：",{"type":597,"tag":606,"props":72093,"children":72094},{},[72095],{"type":603,"value":72096},"「當兩個錨點的某一維度值相等時，該維度的尺寸則是固定的（跟 Parent 尺寸無關），反之該維度的尺寸則是相對於 Parent 的尺寸而變化。」",{"type":597,"tag":606,"props":72098,"children":72099},{},[72100,72102,72106,72108,72112],{"type":603,"value":72101},"其實全部都取決於控制 ",{"type":597,"tag":1733,"props":72103,"children":72104},{},[72105],{"type":603,"value":27144},{"type":603,"value":72107}," 型態最重要的屬性「最大與最小錨點們（Min / Max Anchors）」，而快速設定器其實也只是在幫你快速的調整這兩個錨點的值，所以只要了解這兩個設定值關係與行為，其實你已經完全掌握了 ",{"type":597,"tag":1733,"props":72109,"children":72110},{},[72111],{"type":603,"value":27144},{"type":603,"value":72113}," ，而依照上述邏輯，透過兩個錨點所產生出的配置型態總共有四種：",{"type":597,"tag":606,"props":72115,"children":72116},{},[72117],{"type":603,"value":72118},"A. 當兩錨點 x, y 維度的值都相等時。\nB. 當兩錨點 x 維度的值不相等、y 維度值相等時。\nC. 當兩錨點 x 維度的值相等、y 維度值不相等時。\nD. 當兩錨點 x, y 維度的值都不相等時。",{"type":597,"tag":1023,"props":72120,"children":72122},{"id":72121},"a-當兩錨點-x-y-維度的值都相等時",[72123],{"type":603,"value":72124},"A. 當兩錨點 x, y 維度的值都相等時：",{"type":597,"tag":606,"props":72126,"children":72127},{},[72128],{"type":603,"value":72129},"當兩錨點 x, y 值都相等時，代表此物件的寬高尺寸都是固定值，所以我們會透過 PosX、PosY、Width 以及 Height 來定義此物件的顯示方式，PosX 與 PosY 則分別表示錨點到物件 Pivot 點的位移，而此物件的實際顯示區域則會受到 Pivot 的 x, y 值設定所影響。",{"type":597,"tag":606,"props":72131,"children":72132},{},[72133,72137],{"type":597,"tag":719,"props":72134,"children":72136},{"alt":719,"src":72135},"/images/2019-08-10-ugui-RectTransform/static-anchors.png",[],{"type":597,"tag":719,"props":72138,"children":72140},{"alt":719,"src":72139},"/images/2019-08-10-ugui-RectTransform/ezgif-1-eea893f81f2e.gif",[],{"type":597,"tag":1023,"props":72142,"children":72144},{"id":72143},"b-當兩錨點-x-維度的值不相等y-維度值相等時",[72145],{"type":603,"value":72146},"B. 當兩錨點 x 維度的值不相等、y 維度值相等時：",{"type":597,"tag":606,"props":72148,"children":72149},{},[72150],{"type":603,"value":72151},"當兩錨點 x 維度的值不相等、y 維度值相等時，代表 x 維度的尺寸會受到 Parent 的尺寸影響，在 x 維度上則是使用間距（Padding）的概念來排版，所以會用到 Left、PosY、Right 以及 Height，實際的 Width 是由 Left 與 Right 來控制。",{"type":597,"tag":606,"props":72153,"children":72154},{},[72155,72159],{"type":597,"tag":719,"props":72156,"children":72158},{"alt":719,"src":72157},"/images/2019-08-10-ugui-RectTransform/anchor_x1.png",[],{"type":597,"tag":719,"props":72160,"children":72162},{"alt":719,"src":72161},"/images/2019-08-10-ugui-RectTransform/anchor_x.gif",[],{"type":597,"tag":1023,"props":72164,"children":72166},{"id":72165},"c-當兩錨點-x-維度的值相等y-維度值不相等時",[72167],{"type":603,"value":72168},"C. 當兩錨點 x 維度的值相等、y 維度值不相等時：",{"type":597,"tag":606,"props":72170,"children":72171},{},[72172],{"type":603,"value":72173},"當兩錨點 x 維度的值相等、y 維度值不相等時，代表 y 維度的尺寸會受到 Parent 的尺寸影響，在 y 維度上則是使用間距（Padding）的概念來排版，所以會用到 PosX、Top、Width 以及 Bottom，實際的 Height 是由 Top 與 Bottom 來控制。",{"type":597,"tag":606,"props":72175,"children":72176},{},[72177,72181],{"type":597,"tag":719,"props":72178,"children":72180},{"alt":719,"src":72179},"/images/2019-08-10-ugui-RectTransform/anchor_y1.png",[],{"type":597,"tag":719,"props":72182,"children":72184},{"alt":719,"src":72183},"/images/2019-08-10-ugui-RectTransform/anchor_y.gif",[],{"type":597,"tag":1023,"props":72186,"children":72188},{"id":72187},"d-當兩錨點-x-y-維度的值都不相等時",[72189],{"type":603,"value":72190},"D. 當兩錨點 x, y 維度的值都不相等時：",{"type":597,"tag":606,"props":72192,"children":72193},{},[72194],{"type":603,"value":72195},"當兩錨點 x, y 維度的值都不相等時，代表物件的寬高尺寸都會受到 Parent 的影響，完全是使用四個方向的間距來定義此物件的顯示區域 Left、Top、Right 以及 Bottom。",{"type":597,"tag":606,"props":72197,"children":72198},{},[72199,72203],{"type":597,"tag":719,"props":72200,"children":72202},{"alt":719,"src":72201},"/images/2019-08-10-ugui-RectTransform/anchor_xy.png",[],{"type":597,"tag":719,"props":72204,"children":72206},{"alt":719,"src":72205},"/images/2019-08-10-ugui-RectTransform/anchor_xy.gif",[],{"type":597,"tag":857,"props":72208,"children":72210},{"id":72209},"一些术语解释",[72211],{"type":603,"value":72209},{"type":597,"tag":1023,"props":72213,"children":72215},{"id":72214},"pivot",[72216],{"type":603,"value":72214},{"type":597,"tag":606,"props":72218,"children":72219},{},[72220],{"type":603,"value":72221},"物體自身的支點，影響物體的旋轉、縮放、位置，改變 UI Pivot 必須先開啟控制面板的 Pivot 按鈕，如下圖",{"type":597,"tag":606,"props":72223,"children":72224},{},[72225,72230],{"type":597,"tag":719,"props":72226,"children":72229},{"alt":72227,"src":72228},"Pivot_01","/images/2019-08-10-ugui-RectTransform/Pivot_01.png",[],{"type":603,"value":9343},{"type":597,"tag":606,"props":72232,"children":72233},{},[72234,72236],{"type":603,"value":72235},"Pivot (0.5, 0.5)\n",{"type":597,"tag":719,"props":72237,"children":72240},{"alt":72238,"src":72239},"Pivot_02","/images/2019-08-10-ugui-RectTransform/Pivot_02.gif",[],{"type":597,"tag":606,"props":72242,"children":72243},{},[72244,72246],{"type":603,"value":72245},"Pivot (0, 1)\n",{"type":597,"tag":719,"props":72247,"children":72250},{"alt":72248,"src":72249},"Pivot_03","/images/2019-08-10-ugui-RectTransform/Pivot_03.gif",[],{"type":597,"tag":606,"props":72252,"children":72253},{},[72254,72256,72261,72263,72268],{"type":603,"value":72255},"它是一个X,Y值范围是0到1的点，这个点的会在",{"type":597,"tag":1080,"props":72257,"children":72258},{},[72259],{"type":603,"value":72260},"Anchor",{"type":603,"value":72262},"（锚点）计算位置的时候会使用到，下面用一张图来解释",{"type":597,"tag":1080,"props":72264,"children":72265},{},[72266],{"type":603,"value":72267},"Pivot",{"type":603,"value":72269},"点的位置",{"type":597,"tag":606,"props":72271,"children":72272},{},[72273],{"type":597,"tag":719,"props":72274,"children":72276},{"alt":719,"src":72275},"/images/2019-08-10-ugui-RectTransform/84177-b27df7bbe9d3c829.webp",[],{"type":597,"tag":606,"props":72278,"children":72279},{},[72280],{"type":603,"value":72281},"pivot和text的填充",{"type":597,"tag":606,"props":72283,"children":72284},{},[72285],{"type":597,"tag":719,"props":72286,"children":72289},{"alt":72287,"src":72288},"image-20200420000104602","/images/2019-08-10-ugui-RectTransform/image-20200420000104602.png",[],{"type":597,"tag":606,"props":72291,"children":72292},{},[72293],{"type":603,"value":72294},"当pivot为0.5和0.5时数字的填充时以中心点向上下方向扩展rect",{"type":597,"tag":606,"props":72296,"children":72297},{},[72298],{"type":597,"tag":719,"props":72299,"children":72302},{"alt":72300,"src":72301},"image-20200420000313192","/images/2019-08-10-ugui-RectTransform/image-20200420000313192.png",[],{"type":597,"tag":606,"props":72304,"children":72305},{},[72306],{"type":603,"value":72307},"一般来讲,动态改变文本,为了使其按照从上到下,可以把pivot设置在左上角  0,1",{"type":597,"tag":606,"props":72309,"children":72310},{},[72311],{"type":597,"tag":719,"props":72312,"children":72315},{"alt":72313,"src":72314},"image-20200420000549965","/images/2019-08-10-ugui-RectTransform/image-20200420000549965.png",[],{"type":597,"tag":606,"props":72317,"children":72318},{},[72319],{"type":603,"value":72320},"点击上方的pivot可以切换pivot的所在位置",{"type":597,"tag":606,"props":72322,"children":72323},{},[72324],{"type":603,"value":72325},"center 的中心点",{"type":597,"tag":606,"props":72327,"children":72328},{},[72329],{"type":603,"value":72330},"pivot的点所在位置",{"type":597,"tag":606,"props":72332,"children":72333},{},[72334],{"type":603,"value":72335},"这同样适用于layout,下图设置成0,1.在中间位置添加panel,他会向下扩充,加上verticallayoutgroup和contentsizefitter两个组件",{"type":597,"tag":606,"props":72337,"children":72338},{},[72339],{"type":597,"tag":719,"props":72340,"children":72343},{"alt":72341,"src":72342},"image-20200420013535477","/images/2019-08-10-ugui-RectTransform/image-20200420013535477.png",[],{"type":597,"tag":606,"props":72345,"children":72346},{},[72347],{"type":603,"value":72348},"设置成0.5,0.5.他会向上下扩充",{"type":597,"tag":606,"props":72350,"children":72351},{},[72352],{"type":597,"tag":719,"props":72353,"children":72356},{"alt":72354,"src":72355},"image-20200420013708207","/images/2019-08-10-ugui-RectTransform/image-20200420013708207.png",[],{"type":597,"tag":1023,"props":72358,"children":72360},{"id":72359},"位置",[72361],{"type":603,"value":72359},{"type":597,"tag":1321,"props":72363,"children":72364},{},[72365,72376,72387,72398],{"type":597,"tag":807,"props":72366,"children":72367},{},[72368,72374],{"type":597,"tag":629,"props":72369,"children":72371},{"className":72370},[],[72372],{"type":603,"value":72373},"position",{"type":603,"value":72375},"世界坐标是三维的全局坐标,一般作为基准坐标",{"type":597,"tag":807,"props":72377,"children":72378},{},[72379,72385],{"type":597,"tag":629,"props":72380,"children":72382},{"className":72381},[],[72383],{"type":603,"value":72384},"localPosition",{"type":603,"value":72386}," 相对于父级物体的相对位置",{"type":597,"tag":807,"props":72388,"children":72389},{},[72390,72396],{"type":597,"tag":629,"props":72391,"children":72393},{"className":72392},[],[72394],{"type":603,"value":72395},"anchoredPosition",{"type":603,"value":72397}," 相对位置，但是相对的是自身的Anchor",{"type":597,"tag":807,"props":72399,"children":72400},{},[72401,72407],{"type":597,"tag":629,"props":72402,"children":72404},{"className":72403},[],[72405],{"type":603,"value":72406},"anchoredPosition3D",{"type":603,"value":72408},"  相对位置，但是相对的是自身的Anchor",{"type":597,"tag":606,"props":72410,"children":72411},{},[72412,72413,72418,72419,72424],{"type":603,"value":68229},{"type":597,"tag":629,"props":72414,"children":72416},{"className":72415},[],[72417],{"type":603,"value":72373},{"type":603,"value":695},{"type":597,"tag":629,"props":72420,"children":72422},{"className":72421},[],[72423],{"type":603,"value":72384},{"type":603,"value":72425},"，它们的值根其所属的Canvas的渲染模式有关。",{"type":597,"tag":1321,"props":72427,"children":72428},{},[72429,72434],{"type":597,"tag":807,"props":72430,"children":72431},{},[72432],{"type":603,"value":72433},"在Screen Space——Overlay的模式下，由于Canvas的世界尺寸与其像素尺寸在数值上相等，因此其rectTransform的position与其在屏幕空间的坐标在数值上也相等。这种模式下，要获取某个RectTransform的屏幕坐标，直接使用position就可以。",{"type":597,"tag":807,"props":72435,"children":72436},{},[72437],{"type":603,"value":72438},"在Screen Space——Camera的模式和World Space下，RectTransform的渲染与摄像机有关，在获取其屏幕坐标时，需要利用canvas.worldCamera，或者transform.TransformPoint等坐标转换函数进行坐标转换。",{"type":597,"tag":606,"props":72440,"children":72441},{},[72442,72443,72448,72449,72455],{"type":603,"value":68229},{"type":597,"tag":629,"props":72444,"children":72446},{"className":72445},[],[72447],{"type":603,"value":72395},{"type":603,"value":695},{"type":597,"tag":629,"props":72450,"children":72452},{"className":72451},[],[72453],{"type":603,"value":72454},"anchoredPositoin3D",{"type":603,"value":72456},"都可以认为是以像素为单位。",{"type":597,"tag":1321,"props":72458,"children":72459},{},[72460],{"type":597,"tag":807,"props":72461,"children":72462},{},[72463,72465,72470],{"type":603,"value":72464},"当锚点全部重合时，",{"type":597,"tag":629,"props":72466,"children":72468},{"className":72467},[],[72469],{"type":603,"value":72395},{"type":603,"value":72471},"代表的就是自身Pivot到Anchor的向量。",{"type":597,"tag":606,"props":72473,"children":72474},{},[72475],{"type":597,"tag":719,"props":72476,"children":72478},{"alt":591,"src":72477},"/images/2019-08-10-ugui-RectTransform/20171218185814418.png",[],{"type":597,"tag":1321,"props":72480,"children":72481},{},[72482],{"type":597,"tag":807,"props":72483,"children":72484},{},[72485,72487,72492],{"type":603,"value":72486},"当Anchor不重合时,Pivot相对于四个锚点",{"type":597,"tag":1080,"props":72488,"children":72489},{},[72490],{"type":603,"value":72491},"中点",{"type":603,"value":72493},"的坐标",{"type":597,"tag":606,"props":72495,"children":72496},{},[72497],{"type":597,"tag":719,"props":72498,"children":72500},{"alt":591,"src":72499},"/images/2019-08-10-ugui-RectTransform/20171218185822581.png",[],{"type":597,"tag":1023,"props":72502,"children":72504},{"id":72503},"offsetmin-和-offsetmax",[72505],{"type":603,"value":72506},"offsetMin 和 offsetMax",{"type":597,"tag":606,"props":72508,"children":72509},{},[72510,72516,72517,72522,72524,72529,72531,72537,72538,72543,72544,72549,72551],{"type":597,"tag":629,"props":72511,"children":72513},{"className":72512},[],[72514],{"type":603,"value":72515},"offsetMax",{"type":603,"value":28269},{"type":597,"tag":1080,"props":72518,"children":72519},{},[72520],{"type":603,"value":72521},"RectTransform右上角",{"type":603,"value":72523},"相对于",{"type":597,"tag":1080,"props":72525,"children":72526},{},[72527],{"type":603,"value":72528},"右上Anchor",{"type":603,"value":72530},"的距离；",{"type":597,"tag":629,"props":72532,"children":72534},{"className":72533},[],[72535],{"type":603,"value":72536},"offsetMin",{"type":603,"value":28269},{"type":597,"tag":1080,"props":72539,"children":72540},{},[72541],{"type":603,"value":72542},"RectTransform左下角",{"type":603,"value":72523},{"type":597,"tag":1080,"props":72545,"children":72546},{},[72547],{"type":603,"value":72548},"左下Anchor",{"type":603,"value":72550},"的距离。",{"type":597,"tag":1733,"props":72552,"children":72553},{},[72554],{"type":603,"value":72555},"這就是為什麼 offsetMax 的值跟編輯器中 Top、Right 值剛好正負相反的原因。",{"type":597,"tag":606,"props":72557,"children":72558},{},[72559],{"type":597,"tag":719,"props":72560,"children":72562},{"alt":719,"src":72561},"/images/2019-08-10-ugui-RectTransform/84177-3bd3ac83352a431b.webp",[],{"type":597,"tag":606,"props":72564,"children":72565},{},[72566],{"type":597,"tag":719,"props":72567,"children":72569},{"alt":719,"src":72568},"/images/2019-08-10-ugui-RectTransform/84177-6feb68ae67ceaae8.webp",[],{"type":597,"tag":1023,"props":72571,"children":72573},{"id":72572},"rect",[72574],{"type":603,"value":72572},{"type":597,"tag":606,"props":72576,"children":72577},{},[72578],{"type":603,"value":72579},"如果想要获取一个RectTransform的矩形信息，应该使用rectTransform.rect属性。",{"type":597,"tag":606,"props":72581,"children":72582},{},[72583],{"type":603,"value":72584},"rect属性同样是一个计算出来的值，但是它表示的是该rectTransform对应的矩形的相关信息。",{"type":597,"tag":606,"props":72586,"children":72587},{},[72588],{"type":603,"value":72589},"rect 的 x 和 y 返回左下角相对于pivot的距离,w 和 h 返回本身的宽高.",{"type":597,"tag":606,"props":72591,"children":72592},{},[72593,72594],{"type":603,"value":68549},{"type":597,"tag":1080,"props":72595,"children":72596},{},[72597],{"type":603,"value":72598},"Awake中Rectangle还没有初始化出来,所以不要在awake中获取rect",{"type":597,"tag":1023,"props":72600,"children":72602},{"id":72601},"anchormin-和-anchormax",[72603],{"type":603,"value":72604},"anchorMin 和 anchorMax",{"type":597,"tag":606,"props":72606,"children":72607},{},[72608],{"type":603,"value":72609},"这个是针对锚点的,锚点时相对于父容器定义的,所以这两个属性也是相对于父容器的.分别指锚点占父容器尺寸的百分比位置.",{"type":597,"tag":1023,"props":72611,"children":72613},{"id":72612},"sizedelta",[72614],{"type":603,"value":72615},"sizeDelta",{"type":597,"tag":606,"props":72617,"children":72618},{},[72619],{"type":603,"value":72620},"sizeDelta是个由引擎计算出来的值，这个值很容易被错误地使用。要正确地使用sizeDelta，就要先理解它是怎么算出来的。",{"type":597,"tag":617,"props":72622,"children":72623},{},[72624],{"type":597,"tag":606,"props":72625,"children":72626},{},[72627],{"type":603,"value":72628},"The size of this RectTransform relative to the distances between the anchors.\nIf the anchors are together, sizeDelta is the same as size. If the anchors are in each of the four corners of the parent, the sizeDelta is how much bigger or smaller the rectangle is compared to its parent.",{"type":597,"tag":606,"props":72630,"children":72631},{},[72632,72636,72637,72643],{"type":597,"tag":1733,"props":72633,"children":72634},{},[72635],{"type":603,"value":72615},{"type":603,"value":28269},{"type":597,"tag":629,"props":72638,"children":72640},{"className":72639},[],[72641],{"type":603,"value":72642},"offsetMax-offsetMin",{"type":603,"value":72644},"的结果。在锚点全部重合的情况下，它的值就是面板上的*（Width，Height）*。在锚点完全不重合的情况下，它是相对于父矩形的尺寸。",{"type":597,"tag":606,"props":72646,"children":72647},{},[72648,72650,72654,72656,72660,72662,72666],{"type":603,"value":72649},"一个常见的错误是，当",{"type":597,"tag":1733,"props":72651,"children":72652},{},[72653],{"type":603,"value":27144},{"type":603,"value":72655},"的锚点并非全部重合时，使用",{"type":597,"tag":1733,"props":72657,"children":72658},{},[72659],{"type":603,"value":72615},{"type":603,"value":72661},"作为这个",{"type":597,"tag":1733,"props":72663,"children":72664},{},[72665],{"type":603,"value":27144},{"type":603,"value":72667},"的尺寸。此时拿到的结果一般来说并非预期的结果。",{"type":597,"tag":606,"props":72669,"children":72670},{},[72671,72673,72677],{"type":603,"value":72672},"所以 ",{"type":597,"tag":1733,"props":72674,"children":72675},{},[72676],{"type":603,"value":27144},{"type":603,"value":72678}," 宽和高真正的計算方法是:",{"type":597,"tag":621,"props":72680,"children":72682},{"code":72681},"GUI.Label(new Rect(20, 20, 600, 40), \"Rect : \" + rect.rect);\nvar width =  (rect.anchorMax.x - rect.anchorMin.x) * parent.rect.width + rect.sizeDelta.x;\nvar height = (rect.anchorMax.y - rect.anchorMin.y) * parent.rect.height + rect.sizeDelta.y;\nGUI.Label(new Rect(20, 60, 600, 40), $\"width :{width} height:{height} \");\n",[72683],{"type":597,"tag":629,"props":72684,"children":72685},{"__ignoreMap":591},[72686],{"type":603,"value":72681},{"type":597,"tag":606,"props":72688,"children":72689},{},[72690],{"type":603,"value":72691},"意思就是 sizeDelta 個別維度的值是跟兩錨點個別維度的差值相關，所以只有當兩錨點某的維度的值相等的時候，sizeDelta 在此維度的值才會剛好等於最後顯示的 size 大小。",{"type":597,"tag":857,"props":72693,"children":72695},{"id":72694},"代码修改坐标及大小",[72696],{"type":603,"value":72694},{"type":597,"tag":606,"props":72698,"children":72699},{},[72700,72705,72707,72711,72712,72716],{"type":597,"tag":1080,"props":72701,"children":72702},{},[72703],{"type":603,"value":72704},"1.改变RectTransform的top",{"type":603,"value":72706}," 注意offsetMax`是",{"type":597,"tag":1080,"props":72708,"children":72709},{},[72710],{"type":603,"value":72521},{"type":603,"value":72523},{"type":597,"tag":1080,"props":72713,"children":72714},{},[72715],{"type":603,"value":72528},{"type":603,"value":72717},"的距离,所以top的值应该是一个负值",{"type":597,"tag":621,"props":72719,"children":72721},{"code":72720},"GetComponent\u003CRectTransform>().offsetMax = new Vector2(GetComponent\u003CRectTransform>().offsetMax.x, top);\n",[72722],{"type":597,"tag":629,"props":72723,"children":72724},{"__ignoreMap":591},[72725],{"type":603,"value":72720},{"type":597,"tag":606,"props":72727,"children":72728},{},[72729],{"type":597,"tag":1080,"props":72730,"children":72731},{},[72732],{"type":603,"value":72733},"2.改变RectTransform的bottom",{"type":597,"tag":621,"props":72735,"children":72737},{"code":72736},"GetComponent\u003CRectTransform>().offsetMin = new Vector2(GetComponent\u003CRectTransform>().offsetMin.x, bottom);\n",[72738],{"type":597,"tag":629,"props":72739,"children":72740},{"__ignoreMap":591},[72741],{"type":603,"value":72736},{"type":597,"tag":606,"props":72743,"children":72744},{},[72745,72750],{"type":597,"tag":1080,"props":72746,"children":72747},{},[72748],{"type":603,"value":72749},"3.改变RectTransform的width，height",{"type":603,"value":72751}," ,会根据上面的计算公式重新计算得出width和height,所以如果锚点不是在同一个点的情况下,你设置的值和实际的值是有很大区别的",{"type":597,"tag":621,"props":72753,"children":72755},{"code":72754},"GetComponent\u003CRectTransform>().sizeDelta = new Vector2(width, height);\n",[72756],{"type":597,"tag":629,"props":72757,"children":72758},{"__ignoreMap":591},[72759],{"type":603,"value":72754},{"type":597,"tag":606,"props":72761,"children":72762},{},[72763],{"type":603,"value":72764},"例如:",{"type":597,"tag":606,"props":72766,"children":72767},{},[72768],{"type":597,"tag":719,"props":72769,"children":72772},{"alt":72770,"src":72771},"1566677675284","/images/2019-08-10-ugui-RectTransform/1566677675284.png",[],{"type":597,"tag":606,"props":72774,"children":72775},{},[72776],{"type":597,"tag":719,"props":72777,"children":72780},{"alt":72778,"src":72779},"1566678423941","/images/2019-08-10-ugui-RectTransform/1566678423941.png",[],{"type":597,"tag":606,"props":72782,"children":72783},{},[72784],{"type":603,"value":72785},"当使用脚本直接改变大小后",{"type":597,"tag":621,"props":72787,"children":72789},{"code":72788},"rect.sizeDelta = new Vector2(750, 200);\n",[72790],{"type":597,"tag":629,"props":72791,"children":72792},{"__ignoreMap":591},[72793],{"type":603,"value":72788},{"type":597,"tag":606,"props":72795,"children":72796},{},[72797],{"type":597,"tag":719,"props":72798,"children":72801},{"alt":72799,"src":72800},"1566677736663","/images/2019-08-10-ugui-RectTransform/1566677736663.png",[],{"type":597,"tag":621,"props":72803,"children":72805},{"code":72804},"var width =  (rect.anchorMax.x - rect.anchorMin.x) * parent.rect.width + rect.sizeDelta.x;\nvar height = (rect.anchorMax.y - rect.anchorMin.y) * parent.rect.height + rect.sizeDelta.y;\n",[72806],{"type":597,"tag":629,"props":72807,"children":72808},{"__ignoreMap":591},[72809],{"type":603,"value":72804},{"type":597,"tag":606,"props":72811,"children":72812},{},[72813],{"type":603,"value":72814},"他的宽和高经过了运算使其分别为1500,1534",{"type":597,"tag":606,"props":72816,"children":72817},{},[72818,72823],{"type":597,"tag":1080,"props":72819,"children":72820},{},[72821],{"type":603,"value":72822},"4.改变RectTransform的pos",{"type":603,"value":72824}," 注意anchoredPosition是相对于锚点的位置",{"type":597,"tag":621,"props":72826,"children":72828},{"code":72827},"GetComponent\u003CRectTransform>().anchoredPosition3D = new Vector3(posx,posy,posz);\nGetComponent\u003CRectTransform>().anchoredPosition = new Vector2(posx,posy);\n",[72829],{"type":597,"tag":629,"props":72830,"children":72831},{"__ignoreMap":591},[72832],{"type":603,"value":72827},{"type":597,"tag":606,"props":72834,"children":72835},{},[72836,72838,72844],{"type":603,"value":72837},"**5.使用SetSizeWithCurrentAnchors函数来进行设定，其中Horizontal和Vertical分别对应宽和高。此函数受当前锚点和中心点的影响。**由于会受到",{"type":597,"tag":629,"props":72839,"children":72841},{"className":72840},[],[72842],{"type":603,"value":72843},"povit",{"type":603,"value":72845},"的影响设置的高度是根据povit进行上下缩小的",{"type":597,"tag":621,"props":72847,"children":72849},{"code":72848},"var rt = gameObject.GetComponent\u003CRectTransform>();\nrt.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 100);\nrt.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 30);\n",[72850],{"type":597,"tag":629,"props":72851,"children":72852},{"__ignoreMap":591},[72853],{"type":603,"value":72848},{"type":597,"tag":606,"props":72855,"children":72856},{},[72857],{"type":603,"value":72858},"上面同样的示例:",{"type":597,"tag":606,"props":72860,"children":72861},{},[72862],{"type":597,"tag":719,"props":72863,"children":72866},{"alt":72864,"src":72865},"1566678433363","/images/2019-08-10-ugui-RectTransform/1566678433363.png",[],{"type":597,"tag":621,"props":72868,"children":72870},{"code":72869},"rect.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 200);\n",[72871],{"type":597,"tag":629,"props":72872,"children":72873},{"__ignoreMap":591},[72874],{"type":603,"value":72869},{"type":597,"tag":606,"props":72876,"children":72877},{},[72878],{"type":597,"tag":719,"props":72879,"children":72882},{"alt":72880,"src":72881},"1566678329701","/images/2019-08-10-ugui-RectTransform/1566678329701.png",[],{"type":597,"tag":606,"props":72884,"children":72885},{},[72886,72888,72893],{"type":603,"value":72887},"可以看到它围绕着",{"type":597,"tag":629,"props":72889,"children":72891},{"className":72890},[],[72892],{"type":603,"value":72214},{"type":603,"value":72894},"上下都缩减了180",{"type":597,"tag":606,"props":72896,"children":72897},{},[72898],{"type":597,"tag":1080,"props":72899,"children":72900},{},[72901],{"type":603,"value":72902},"6.使用SetInsetAndSizeFromParentEdge函数来进行设定。此函数不受锚点和中心的影响，其中第一个参数代表对齐方式，第二个参数为距离边界的距离，第三个参数为宽度。",{"type":597,"tag":621,"props":72904,"children":72906},{"code":72905},"var rt = gameObject.GetComponent\u003CRectTransform>();\nrt.SetInsetAndSizeFromParentEdge(RectTransform.Edge.Right, 0, 100);\nrt.SetInsetAndSizeFromParentEdge(RectTransform.Edge.Bottom, 0, 30);\n",[72907],{"type":597,"tag":629,"props":72908,"children":72909},{"__ignoreMap":591},[72910],{"type":603,"value":72905},{"type":597,"tag":857,"props":72912,"children":72914},{"id":72913},"recttransform的一些其他操做",[72915],{"type":603,"value":72913},{"type":597,"tag":1023,"props":72917,"children":72919},{"id":72918},"blue-print-mode藍圖模式-raw-edit-mode原始编辑模式",[72920],{"type":603,"value":72921},"Blue Print Mode(藍圖模式) 、 Raw Edit Mode(原始编辑模式)",{"type":597,"tag":598,"props":72923,"children":72924},{"id":591},[72925],{"type":597,"tag":719,"props":72926,"children":72929},{"alt":72927,"src":72928},"BluePrint_RawEdit_01","/images/2019-08-10-ugui-RectTransform/BluePrint_RawEdit_01.png",[],{"type":597,"tag":3995,"props":72931,"children":72933},{"id":72932},"blue-print-mode-藍圖模式",[72934],{"type":603,"value":72935},"Blue Print Mode (藍圖模式)",{"type":597,"tag":606,"props":72937,"children":72938},{},[72939],{"type":603,"value":72940},"忽略了物體的 Local Rotation 和 Local Scale，方便以原來的旋轉與大小調整物體",{"type":597,"tag":606,"props":72942,"children":72943},{},[72944],{"type":597,"tag":719,"props":72945,"children":72947},{"alt":719,"src":72946},"/images/2019-08-10-ugui-RectTransform/BluePrintMode_m2-1024x711.png",[],{"type":597,"tag":3995,"props":72949,"children":72951},{"id":72950},"raw-edit-mode-原始编辑模式",[72952],{"type":603,"value":72953},"Raw Edit Mode (原始编辑模式)",{"type":597,"tag":606,"props":72955,"children":72956},{},[72957],{"type":603,"value":72958},"在 Inspector 中調整 Pivot 和 Anchor 時，物體會維持目前的位置與大小(Inspector 中數值部分)，調整情形如下，請注意數值部分",{"type":597,"tag":606,"props":72960,"children":72961},{},[72962],{"type":603,"value":72963},"Inspector 中調整  Pivot",{"type":597,"tag":606,"props":72965,"children":72966},{},[72967],{"type":597,"tag":719,"props":72968,"children":72971},{"alt":72969,"src":72970},"RawEditMode_02","/images/2019-08-10-ugui-RectTransform/RawEditMode_02.gif",[],{"type":597,"tag":606,"props":72973,"children":72974},{},[72975],{"type":603,"value":72976},"Inspector 中調整  Anchor",{"type":597,"tag":606,"props":72978,"children":72979},{},[72980],{"type":597,"tag":719,"props":72981,"children":72984},{"alt":72982,"src":72983},"RawEditMode_01","/images/2019-08-10-ugui-RectTransform/RawEditMode_01.gif",[],{"type":597,"tag":1023,"props":72986,"children":72988},{"id":72987},"參考資料",[72989],{"type":603,"value":72987},{"type":597,"tag":1321,"props":72991,"children":72992},{},[72993,73003],{"type":597,"tag":807,"props":72994,"children":72995},{},[72996],{"type":597,"tag":886,"props":72997,"children":73000},{"href":72998,"rel":72999},"http://docs.unity3d.com/Manual/UIBasicLayout.html",[890],[73001],{"type":603,"value":73002},"Unity – Manual: Basic Layout",{"type":597,"tag":807,"props":73004,"children":73005},{},[73006],{"type":597,"tag":886,"props":73007,"children":73010},{"href":73008,"rel":73009},"http://tsubakit1.hateblo.jp/entry/2014/12/19/033946",[890],[73011],{"type":603,"value":73012},"UnityのuGUIのレイアウト調整機能について解説してみる（RectTransform入門）",{"title":591,"searchDepth":787,"depth":787,"links":73014},[73015,73016,73029],{"id":72048,"depth":787,"text":72051},{"id":72066,"depth":787,"text":72069,"children":73017},[73018,73019,73020,73021,73022,73023,73024,73025,73026,73027,73028],{"id":72121,"depth":1530,"text":72124},{"id":72143,"depth":1530,"text":72146},{"id":72165,"depth":1530,"text":72168},{"id":72187,"depth":1530,"text":72190},{"id":72214,"depth":1530,"text":72214},{"id":72359,"depth":1530,"text":72359},{"id":72503,"depth":1530,"text":72506},{"id":72572,"depth":1530,"text":72572},{"id":72601,"depth":1530,"text":72604},{"id":72612,"depth":1530,"text":72615},{"id":72918,"depth":1530,"text":72921},{"id":591,"depth":787,"text":591,"children":73030},[73031],{"id":72987,"depth":1530,"text":72987},"content:unity:2019-08-10-ugui-RectTransform.md","unity/2019-08-10-ugui-RectTransform.md",{"_path":382,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":381,"description":73035,"body":73036,"_type":791,"_id":73505,"_source":793,"_file":73506,"_extension":795,"date":73507},"先说明一些基本的概念：1.屏幕的宽高比Aspect Ratio = 屏幕宽度/屏幕高度2.Unity2D中摄像机镜头的尺寸决定了我们实际看到游戏内容的多少，在编辑器中我们可以通过调整摄像机Camera的orthographicSize属性值来调整摄像机的大小。如下图所示，当摄像机orthographicSize属性值等于当前屏幕高度单位的一半时，摄像机大小正好与屏幕大小相等。注意这里提到的是屏幕单位高度的一半，这个数值是经过像素到单位比即Pixels To Units换算的，Unity2D中这个比例的默认值是100，即100像素等于1单位。如果我们的游戏屏幕有640像素高，那么实际换算成单位高",{"type":594,"children":73037,"toc":73491},[73038,73043,73051,73059,73064,73071,73076,73083,73089,73094,73102,73107,73115,73120,73125,73131,73149,73154,73160,73165,73170,73178,73183,73191,73196,73201,73209,73215,73220,73228,73236,73241,73249,73255,73260,73265,73270,73289,73296,73303,73308,73313,73318,73323,73329,73334,73339,73345,73357,73363,73368,73376,73388,73393,73398,73403,73408,73413,73418,73423,73428,73433,73438,73443,73449,73454,73459,73464,73468],{"type":597,"tag":606,"props":73039,"children":73040},{},[73041],{"type":603,"value":73042},"先说明一些基本的概念：",{"type":597,"tag":606,"props":73044,"children":73045},{},[73046],{"type":597,"tag":1080,"props":73047,"children":73048},{},[73049],{"type":603,"value":73050},"1.屏幕的宽高比Aspect Ratio = 屏幕宽度/屏幕高度",{"type":597,"tag":606,"props":73052,"children":73053},{},[73054],{"type":597,"tag":1080,"props":73055,"children":73056},{},[73057],{"type":603,"value":73058},"2.Unity2D中摄像机镜头的尺寸决定了我们实际看到游戏内容的多少，在编辑器中我们可以通过调整摄像机Camera的orthographicSize属性值来调整摄像机的大小。",{"type":597,"tag":606,"props":73060,"children":73061},{},[73062],{"type":603,"value":73063},"如下图所示，当摄像机orthographicSize属性值等于当前屏幕高度单位的一半时，摄像机大小正好与屏幕大小相等。注意这里提到的是屏幕单位高度的一半，这个数值是经过像素到单位比即Pixels To Units换算的，Unity2D中这个比例的默认值是100，即100像素等于1单位。如果我们的游戏屏幕有640像素高，那么实际换算成单位高度则是6.4个单位，当我们摄像机的orthographicSize值是3.2时，摄像机大小刚好与屏幕大小相等。",{"type":597,"tag":606,"props":73065,"children":73066},{},[73067],{"type":597,"tag":719,"props":73068,"children":73070},{"alt":719,"src":73069},"/images/2019-08-09-unity2d-shipei/041527387365011.png",[],{"type":597,"tag":606,"props":73072,"children":73073},{},[73074],{"type":603,"value":73075},"可以通过此选项调整每张图片的像素单位比",{"type":597,"tag":606,"props":73077,"children":73078},{},[73079],{"type":597,"tag":719,"props":73080,"children":73082},{"alt":719,"src":73081},"/images/2019-08-09-unity2d-shipei/041505358774753.png",[],{"type":597,"tag":1023,"props":73084,"children":73086},{"id":73085},"unity编辑器中只能直接调整摄像机的高度那摄像机的宽度是如何确定的呢",[73087],{"type":603,"value":73088},"Unity编辑器中只能直接调整摄像机的高度，那摄像机的宽度是如何确定的呢？",{"type":597,"tag":606,"props":73090,"children":73091},{},[73092],{"type":603,"value":73093},"答案就是我们最前面提到的屏幕宽高比。Unity会根据当前屏幕实际的宽高比和摄像机的orthographicSize值来计算出摄像机的宽度值，即：",{"type":597,"tag":606,"props":73095,"children":73096},{},[73097],{"type":597,"tag":1080,"props":73098,"children":73099},{},[73100],{"type":603,"value":73101},"摄像机实际宽度 = 摄像机orthographicSize * 2 * 屏幕宽高比",{"type":597,"tag":606,"props":73103,"children":73104},{},[73105],{"type":603,"value":73106},"也即是",{"type":597,"tag":606,"props":73108,"children":73109},{},[73110],{"type":597,"tag":1080,"props":73111,"children":73112},{},[73113],{"type":603,"value":73114},"摄像机实际宽度 = 摄像机高度 * 屏幕宽高比",{"type":597,"tag":606,"props":73116,"children":73117},{},[73118],{"type":603,"value":73119},"我举个例子说明一下，iPhone4的屏幕像素为640*960，宽高比为2:3，假设Pixels To Units值为100，那么如果设摄像机高度size值为4.8，那么摄像机实际宽度按照公式算出6.4，刚好就是屏幕的单位宽度。",{"type":597,"tag":857,"props":73121,"children":73123},{"id":73122},"场景适配",[73124],{"type":603,"value":73122},{"type":597,"tag":598,"props":73126,"children":73128},{"id":73127},"_2d场景和3d摄像机的适配",[73129],{"type":603,"value":73130},"2d场景和3d摄像机的适配",{"type":597,"tag":803,"props":73132,"children":73133},{},[73134,73139,73144],{"type":597,"tag":807,"props":73135,"children":73136},{},[73137],{"type":603,"value":73138},"因为需要引入3d的内容所以 worldcamera,使用了透视摄像机",{"type":597,"tag":807,"props":73140,"children":73141},{},[73142],{"type":603,"value":73143},"透视摄像机旋转了15度使其可以看到地面..因为是透视相机,这就造成了2d角色在相机移动后会发生偏移的问题..这个时候需要将2d角色始终面向相机.所以2d单位的容器也需要旋转15度",{"type":597,"tag":807,"props":73145,"children":73146},{},[73147],{"type":603,"value":73148},"为什么不单独使用一个正交摄像机看角色?因为这样的画,地面和角色不是用一个相机,且其中一个使用的是透视,会造成人物移动后,地面和角色形成视差,造成其他角色看起来不像站在地面上一样",{"type":597,"tag":598,"props":73150,"children":73152},{"id":73151},"场景和ui位置的适配",[73153],{"type":603,"value":73151},{"type":597,"tag":1023,"props":73155,"children":73157},{"id":73156},"_3d形象如何展现在ui中",[73158],{"type":603,"value":73159},"3d形象如何展现在ui中",{"type":597,"tag":606,"props":73161,"children":73162},{},[73163],{"type":603,"value":73164},"直接将3d物品拖到ui中然后添加rect transform属性,3d物品会根据ui的位置改变而改变",{"type":597,"tag":606,"props":73166,"children":73167},{},[73168],{"type":603,"value":73169},"然后可能会出现看不到3d对象的问题.这个可能和canvas的plane distance有关,即摄像机和canvas的z的距离",{"type":597,"tag":606,"props":73171,"children":73172},{},[73173],{"type":597,"tag":719,"props":73174,"children":73177},{"alt":73175,"src":73176},"image-20200828173613476","/images/2019-08-09-unity2d-shipei/image-20200828173613476.png",[],{"type":597,"tag":606,"props":73179,"children":73180},{},[73181],{"type":603,"value":73182},"用3d视图看下",{"type":597,"tag":606,"props":73184,"children":73185},{},[73186],{"type":597,"tag":719,"props":73187,"children":73190},{"alt":73188,"src":73189},"image-20200828173814986","/images/2019-08-09-unity2d-shipei/image-20200828173814986.png",[],{"type":597,"tag":606,"props":73192,"children":73193},{},[73194],{"type":603,"value":73195},"这个时候是看不到cube的",{"type":597,"tag":606,"props":73197,"children":73198},{},[73199],{"type":603,"value":73200},"注意: 想用canvas中的ui去遮挡3d物品是做不到的,sortingGroup也不会有用处..如下图想用绿色盖住cube,是做不到的.因为他们在摄像机的显示是按照z去排的",{"type":597,"tag":606,"props":73202,"children":73203},{},[73204],{"type":597,"tag":719,"props":73205,"children":73208},{"alt":73206,"src":73207},"image-20200828174105986","/images/2019-08-09-unity2d-shipei/image-20200828174105986.png",[],{"type":597,"tag":1023,"props":73210,"children":73212},{"id":73211},"根据场景位置设置ui位置",[73213],{"type":603,"value":73214},"根据场景位置设置ui位置..",{"type":597,"tag":606,"props":73216,"children":73217},{},[73218],{"type":603,"value":73219},"比如竖屏游戏.有一半是场景一半是ui,如何让ui去准确的盖住场景",{"type":597,"tag":621,"props":73221,"children":73223},{"code":73222},"        public static Vector3 WorldToCanvasPosition(Camera objectCamera, Vector3 objectTransformPosition, RectTransform CanvasRect)\n        {\n            // Get the position on the canvas\n            Vector3 ViewportPosition = objectCamera.WorldToViewportPoint(objectTransformPosition);\n            Vector3 result = new Vector3(\n            ((ViewportPosition.x * CanvasRect.sizeDelta.x) - (CanvasRect.sizeDelta.x * 0.5f)),\n            ((ViewportPosition.y * CanvasRect.sizeDelta.y) - (CanvasRect.sizeDelta.y * 0.5f)), 0);\n\n            return CanvasRect.TransformPoint(result);\n        }\n",[73224],{"type":597,"tag":629,"props":73225,"children":73226},{"__ignoreMap":591},[73227],{"type":603,"value":73222},{"type":597,"tag":621,"props":73229,"children":73231},{"code":73230},"       public static Vector3 WorldToCanvasPosition(Camera objectCamera, Vector3 objectTransformPosition, RectTransform CanvasRect, Canvas Canvas, Camera UICamera)\n        {\n            Vector3 screenPoint = RectTransformUtility.WorldToScreenPoint(objectCamera, objectTransformPosition);\n\n            RectTransformUtility.ScreenPointToLocalPointInRectangle(CanvasRect, screenPoint, Canvas.renderMode == RenderMode.ScreenSpaceOverlay ? null : UICamera, out Vector2 result);\n\n            return CanvasRect.TransformPoint(result);\n        }\n",[73232],{"type":597,"tag":629,"props":73233,"children":73234},{"__ignoreMap":591},[73235],{"type":603,"value":73230},{"type":597,"tag":606,"props":73237,"children":73238},{},[73239],{"type":603,"value":73240},"使用:",{"type":597,"tag":621,"props":73242,"children":73244},{"code":73243},"                    //0.3盖住半个单位的地形\n                    var pos = CameraUtils.WorldToCanvasPosition(this.mainCamera, new Vector3(boardRoot.position.x, boardRoot.position.y, boardRoot.position.z), rect);\n                    var perUnit = rect.sizeDelta.y / (2f * this.uiCamera.orthographicSize);\n                    (notification.Body as RectTransform).offsetMax = new Vector2(0, -(this.uiCamera.orthographicSize - pos.y) * perUnit);\n",[73245],{"type":597,"tag":629,"props":73246,"children":73247},{"__ignoreMap":591},[73248],{"type":603,"value":73243},{"type":597,"tag":857,"props":73250,"children":73252},{"id":73251},"ugui的适配",[73253],{"type":603,"value":73254},"UGUI的适配",{"type":597,"tag":606,"props":73256,"children":73257},{},[73258],{"type":603,"value":73259},"锚点是解决ui控件在canvas里面位置的问题.而Canvas Scaler主要是设置canvas(ui控件)显示的大小(缩放)问题",{"type":597,"tag":598,"props":73261,"children":73263},{"id":73262},"锚点",[73264],{"type":603,"value":73262},{"type":597,"tag":606,"props":73266,"children":73267},{},[73268],{"type":603,"value":73269},"锚点这个概念在Unity文档的多分辨率适配中被明确的提到其作用。简单的说，就是定位。如果一个物体相对于屏幕位置左上角，那么无论屏幕分辨率怎么变化，它始终位于左上角。同理，如果是在（0,0）原点，那么也始终在中心原点。我对锚点定义为，锚点，是相对于父节点的偏移量，这个偏移量随屏幕分辨率变化而按比例变化，如果将分辨率的宽，高，看做归一化的数值（即0~1，实际UGUI就是这么做的），那么锚点是指一个偏移百分比。所以有了锚点，子节点在相对于父节点的位置上保持不变的。",{"type":597,"tag":606,"props":73271,"children":73272},{},[73273,73275,73280,73282,73287],{"type":603,"value":73274},"如图，参考分辨率960",{"type":597,"tag":1733,"props":73276,"children":73277},{},[73278],{"type":603,"value":73279},"640，我改变GameView的分辨率为800",{"type":603,"value":73281},"468，图中绿色背景大小960",{"type":597,"tag":1733,"props":73283,"children":73284},{},[73285],{"type":603,"value":73286},"640，红色Image大小100",{"type":603,"value":73288},"100，红色图片的锚点为左上，轴点为左上，在参考分辨率下，红色正方形的左上顶点距离Canvas左上顶点距离（50，-150）",{"type":597,"tag":606,"props":73290,"children":73291},{},[73292],{"type":597,"tag":719,"props":73293,"children":73295},{"alt":719,"src":73294},"/images/2019-08-09-unity2d-shipei/php2Hv6xD.1469191739.png",[],{"type":597,"tag":606,"props":73297,"children":73298},{},[73299],{"type":597,"tag":719,"props":73300,"children":73302},{"alt":719,"src":73301},"/images/2019-08-09-unity2d-shipei/phpwptKbd.1469191746.png",[],{"type":597,"tag":606,"props":73304,"children":73305},{},[73306],{"type":603,"value":73307},"​    当我将屏幕分辨率切换为800*468后，",{"type":597,"tag":606,"props":73309,"children":73310},{},[73311],{"type":603,"value":73312},"​    因为我选的Screen Match Mode为Weight = 0，所以在800 * 468分辨率下的实际屏幕高度为 960 * （468/800）= 561.6。",{"type":597,"tag":606,"props":73314,"children":73315},{},[73316],{"type":603,"value":73317},"​    又因为我的UI Scale Mode选的是Scale with Screen Size随屏幕尺寸变化，这个时候的缩放比是由宽度决定的，960/800 = 1.2 ,所以红色正方形此时的高度为100 / 1.2= 83.333",{"type":597,"tag":606,"props":73319,"children":73320},{},[73321],{"type":603,"value":73322},"​    红色正方向锚点y轴坐标 = 参考锚点位置 * 缩放比 = 150 * 1.2 = 125，",{"type":597,"tag":598,"props":73324,"children":73326},{"id":73325},"canvas-scaler",[73327],{"type":603,"value":73328},"Canvas Scaler",{"type":597,"tag":606,"props":73330,"children":73331},{},[73332],{"type":603,"value":73333},"看名字就知道..是设置canvas如何根据屏幕进行缩放",{"type":597,"tag":606,"props":73335,"children":73336},{},[73337],{"type":603,"value":73338},"UGUI的屏幕自适应，是通过Canvas Scaler来做的，根据屏幕的分辨率，计算出canvas的大小，同时计算ScaleXY,通过Size + Scale来控制Canvas的变换，UI作为canvas的子物体，也会跟随着一起变化；为了保证UI的位置，需要在设计UI的时候，利用锚点来保证UI与边缘或角落的距离，",{"type":597,"tag":1023,"props":73340,"children":73342},{"id":73341},"固定像素-constant-pixel-size",[73343],{"type":603,"value":73344},"固定像素 (Constant Pixel Size)",{"type":597,"tag":606,"props":73346,"children":73347},{},[73348,73350,73355],{"type":603,"value":73349},"忽略屏幕的大小根据UI元素的实际像素显示 ,像素大小始终不变，即一个100",{"type":597,"tag":1733,"props":73351,"children":73352},{},[73353],{"type":603,"value":73354},"100的图片在任何的分辨率下都占用100",{"type":603,"value":73356},"100的像素。一般PC上会使用这种方式，因为PC端分辨率差异并不大。",{"type":597,"tag":1023,"props":73358,"children":73360},{"id":73359},"根据屏幕大小进行缩放screen-match-mode",[73361],{"type":603,"value":73362},"根据屏幕大小进行缩放(Screen Match Mode)",{"type":597,"tag":606,"props":73364,"children":73365},{},[73366],{"type":603,"value":73367},"此项会根据设备真实分辨率与设计分辨率来对Canvas进行缩放。有三种模式：",{"type":597,"tag":803,"props":73369,"children":73370},{},[73371],{"type":597,"tag":807,"props":73372,"children":73373},{},[73374],{"type":603,"value":73375},"Match Width or Height",{"type":597,"tag":606,"props":73377,"children":73378},{},[73379,73381,73386],{"type":603,"value":73380},"根据宽或者高来对Canvas进行缩放，比如设备分辨率为1920",{"type":597,"tag":1733,"props":73382,"children":73383},{},[73384],{"type":603,"value":73385},"900，设计分辨率为1280",{"type":603,"value":73387},"720，此时，如果采用宽进行匹配那么可以通过公式计算出此时应该缩放多少倍，公式如下：",{"type":597,"tag":606,"props":73389,"children":73390},{},[73391],{"type":603,"value":73392},"缩放因子：1920/1280 = 1.5",{"type":597,"tag":606,"props":73394,"children":73395},{},[73396],{"type":603,"value":73397},"缩放后的Canvas的宽为：1920（刚好能够完全显示）",{"type":597,"tag":606,"props":73399,"children":73400},{},[73401],{"type":603,"value":73402},"缩放后的Canvas的高为：720*1.5 = 1080",{"type":597,"tag":606,"props":73404,"children":73405},{},[73406],{"type":603,"value":73407},"由于设备的高为900所以会导致高度上的一部分不会被显示出来",{"type":597,"tag":606,"props":73409,"children":73410},{},[73411],{"type":603,"value":73412},"2.Expand",{"type":597,"tag":606,"props":73414,"children":73415},{},[73416],{"type":603,"value":73417},"适配的计算公式同上，只是在此模式下会保证设计分辨率下的东西能够全部显示出来，及选择设备分辨率和设计分辨率的宽、高比中选择最小值作为缩放因子。",{"type":597,"tag":606,"props":73419,"children":73420},{},[73421],{"type":603,"value":73422},"3.Shrink",{"type":597,"tag":606,"props":73424,"children":73425},{},[73426],{"type":603,"value":73427},"和Expand恰好相反，在此模式下不会留黑边但是会导致显示不完全。及选择设备分辨率和设计分辨率的宽、高比中选择最大值作为缩放因子。",{"type":597,"tag":606,"props":73429,"children":73430},{},[73431],{"type":603,"value":73432},"UiScaleMode一般选择Scale With Screen Size，并设置好设计分辨率。其他两个选项都是固定像素大小。",{"type":597,"tag":606,"props":73434,"children":73435},{},[73436],{"type":603,"value":73437},"Screen Match Mode中一般选择Expand，它可以保证ui中的所有元素都在屏幕内部。 相对比的一个选项是Shrink，它可以保证不留空白边。",{"type":597,"tag":606,"props":73439,"children":73440},{},[73441],{"type":603,"value":73442},"3、多分辨率的思路是Scaler中选择Expand保证所有ui元素在屏幕内部。少部分界面，如主界面、战斗界面等根据需要设置Anchors中的全屏拉伸。注意，这里的拉伸的含义仅仅是设置Panel的宽、高，并不影响子控件的缩放，但是会影响其布局。",{"type":597,"tag":1023,"props":73444,"children":73446},{"id":73445},"固定物理大小constant-physical-size",[73447],{"type":603,"value":73448},"固定物理大小(Constant Physical Size)",{"type":597,"tag":606,"props":73450,"children":73451},{},[73452],{"type":603,"value":73453},"忽略屏幕大小和分辨率根据UI的实际物理大小来显示。",{"type":597,"tag":857,"props":73455,"children":73457},{"id":73456},"刘海屏的适配",[73458],{"type":603,"value":73456},{"type":597,"tag":606,"props":73460,"children":73461},{},[73462],{"type":603,"value":73463},"待续",{"type":597,"tag":857,"props":73465,"children":73466},{"id":12178},[73467],{"type":603,"value":12178},{"type":597,"tag":1321,"props":73469,"children":73470},{},[73471,73481],{"type":597,"tag":807,"props":73472,"children":73473},{},[73474],{"type":597,"tag":886,"props":73475,"children":73478},{"href":73476,"rel":73477},"https://blog.csdn.net/shitangdejiaozi/article/details/88964850",[890],[73479],{"type":603,"value":73480},"Unity记录-UGUI的屏幕自适应原理和应用_shitangdejiaozi的博客-CSDN博客",{"type":597,"tag":807,"props":73482,"children":73483},{},[73484],{"type":597,"tag":886,"props":73485,"children":73488},{"href":73486,"rel":73487},"https://www.jianshu.com/p/8ead0701d8ef",[890],[73489],{"type":603,"value":73490},"Android刘海屏适配方案总结 - 简书 (jianshu.com)",{"title":591,"searchDepth":787,"depth":787,"links":73492},[73493,73494,73495,73499,73500],{"id":73085,"depth":1530,"text":73088},{"id":73127,"depth":787,"text":73130},{"id":73151,"depth":787,"text":73151,"children":73496},[73497,73498],{"id":73156,"depth":1530,"text":73159},{"id":73211,"depth":1530,"text":73214},{"id":73262,"depth":787,"text":73262},{"id":73325,"depth":787,"text":73328,"children":73501},[73502,73503,73504],{"id":73341,"depth":1530,"text":73344},{"id":73359,"depth":1530,"text":73362},{"id":73445,"depth":1530,"text":73448},"content:unity:2019-08-09-unity2d-shipei.md","unity/2019-08-09-unity2d-shipei.md","2019-08-09",{"_path":267,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":266,"description":73509,"body":73510,"_type":791,"_id":73919,"_source":793,"_file":73920,"_extension":795,"date":73921},"Git密钥存储相关幸运的是，Git 拥有一个凭证系统来处理这个事情。 下面有一些 Git 的选项：默认所有都不缓存。 每一次连接都会询问你的用户名和密码。“cache” 模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除。“store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期。 这意味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你的凭证信息。 这种方式的缺点是你的密码是用明文的方式存放在你的 home 目录下。如果你使用的是 Mac，Git 还有一种 “osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙",{"type":594,"children":73511,"toc":73908},[73512,73518,73523,73560,73566,73577,73585,73591,73599,73605,73613,73622,73628,73636,73645,73676,73681,73690,73711,73717,73722,73730,73735,73741,73746,73755,73760,73768,73774,73778,73787,73791,73799,73804,73812,73817,73825,73830,73836,73841,73846,73850,73859,73863,73868,73873,73878,73891,73895],{"type":597,"tag":598,"props":73513,"children":73515},{"id":73514},"git密钥存储相关",[73516],{"type":603,"value":73517},"Git密钥存储相关",{"type":597,"tag":606,"props":73519,"children":73520},{},[73521],{"type":603,"value":73522},"幸运的是，Git 拥有一个凭证系统来处理这个事情。 下面有一些 Git 的选项：",{"type":597,"tag":1321,"props":73524,"children":73525},{},[73526,73531,73536,73541,73546],{"type":597,"tag":807,"props":73527,"children":73528},{},[73529],{"type":603,"value":73530},"默认所有都不缓存。 每一次连接都会询问你的用户名和密码。",{"type":597,"tag":807,"props":73532,"children":73533},{},[73534],{"type":603,"value":73535},"“cache” 模式会将凭证存放在内存中一段时间。 密码永远不会被存储在磁盘中，并且在15分钟后从内存中清除。",{"type":597,"tag":807,"props":73537,"children":73538},{},[73539],{"type":603,"value":73540},"“store” 模式会将凭证用明文的形式存放在磁盘中，并且永不过期。 这意味着除非你修改了你在 Git 服务器上的密码，否则你永远不需要再次输入你的凭证信息。 这种方式的缺点是你的密码是用明文的方式存放在你的 home 目录下。",{"type":597,"tag":807,"props":73542,"children":73543},{},[73544],{"type":603,"value":73545},"如果你使用的是 Mac，Git 还有一种 “osxkeychain” 模式，它会将凭证缓存到你系统用户的钥匙串中。 这种方式将凭证存放在磁盘中，并且永不过期，但是是被加密的，这种加密方式与存放 HTTPS 凭证以及 Safari 的自动填写是相同的。",{"type":597,"tag":807,"props":73547,"children":73548},{},[73549,73551,73558],{"type":603,"value":73550},"如果你使用的是 Windows，你可以安装一个叫做 “winstore” 的辅助工具。 这和上面说的 “osxkeychain” 十分类似，但是是使用 Windows Credential Store 来控制敏感信息。 可以在 ",{"type":597,"tag":886,"props":73552,"children":73555},{"href":73553,"rel":73554},"https://gitcredentialstore.codeplex.com/",[890],[73556],{"type":603,"value":73557},"https://gitcredentialstore.codeplex.com",{"type":603,"value":73559}," 下载。",{"type":597,"tag":598,"props":73561,"children":73563},{"id":73562},"推荐使用凭证存储模式-manager",[73564],{"type":603,"value":73565},"推荐使用凭证存储模式 \"manager\"",{"type":597,"tag":1321,"props":73567,"children":73568},{},[73569,73574],{"type":597,"tag":807,"props":73570,"children":73571},{},[73572],{"type":603,"value":73573},"在这里对比 \"wincred\" 和 \"manager\"的区别",{"type":597,"tag":807,"props":73575,"children":73576},{},[],{"type":597,"tag":621,"props":73578,"children":73580},{"code":73579},"-   **相同点：**\n\n-\n\n    -   都会将用户信息存储到Windows凭据管理器中\n",[73581],{"type":597,"tag":629,"props":73582,"children":73583},{"__ignoreMap":591},[73584],{"type":603,"value":73579},{"type":597,"tag":1321,"props":73586,"children":73587},{},[73588],{"type":597,"tag":807,"props":73589,"children":73590},{},[],{"type":597,"tag":621,"props":73592,"children":73594},{"code":73593},"-   **不同点：**\n\n-\n\n    -   Windows凭据管理器中**用户信息是否加密**\n",[73595],{"type":597,"tag":629,"props":73596,"children":73597},{"__ignoreMap":591},[73598],{"type":603,"value":73593},{"type":597,"tag":1321,"props":73600,"children":73601},{},[73602],{"type":597,"tag":807,"props":73603,"children":73604},{},[],{"type":597,"tag":621,"props":73606,"children":73608},{"code":73607},"-\n\n    -   \"wincred\" 模式下的用户信息展示如下\n",[73609],{"type":597,"tag":629,"props":73610,"children":73611},{"__ignoreMap":591},[73612],{"type":603,"value":73607},{"type":597,"tag":621,"props":73614,"children":73617},{"code":73615,"language":603,"meta":591,"className":73616},"Internet 地址或网络地址：git:https://用户名@github.com； \n用户名：真实用户名 \n",[29933],[73618],{"type":597,"tag":629,"props":73619,"children":73620},{"__ignoreMap":591},[73621],{"type":603,"value":73615},{"type":597,"tag":1321,"props":73623,"children":73624},{},[73625],{"type":597,"tag":807,"props":73626,"children":73627},{},[],{"type":597,"tag":621,"props":73629,"children":73631},{"code":73630},"-\n\n    -   \"manager\" 模式下的用户信息展示如下\n",[73632],{"type":597,"tag":629,"props":73633,"children":73634},{"__ignoreMap":591},[73635],{"type":603,"value":73630},{"type":597,"tag":621,"props":73637,"children":73640},{"code":73638,"language":603,"meta":591,"className":73639},"Internet 地址或网络地址：git:https://github.com； \n用户名：PersonalAccessToken\n",[29933],[73641],{"type":597,"tag":629,"props":73642,"children":73643},{"__ignoreMap":591},[73644],{"type":603,"value":73638},{"type":597,"tag":1321,"props":73646,"children":73647},{},[73648],{"type":597,"tag":807,"props":73649,"children":73650},{},[73651,73653,73658,73660,73667,73669,73674],{"type":603,"value":73652},"很明显，在",{"type":597,"tag":1080,"props":73654,"children":73655},{},[73656],{"type":603,"value":73657},"用户信息暴露",{"type":603,"value":73659},"的情况下，其他人很容易通过 ",{"type":597,"tag":886,"props":73661,"children":73664},{"href":73662,"rel":73663},"https://%E7%94%A8%E6%88%B7%E5%90%8D@%5Bhttp://github.com%5D(https://link.zhihu.com/?target=http%3A//github.com)",[890],[73665],{"type":603,"value":73666},"https://用户名@[http://github.com](https://link.zhihu.com/?target=http%3A//github.com)",{"type":603,"value":73668}," 访问到路径对应的项目，为了避免这种",{"type":597,"tag":1080,"props":73670,"children":73671},{},[73672],{"type":603,"value":73673},"风险",{"type":603,"value":73675},"的存在，我们可以安装 “Git Credential Manager for Windows” 的辅助工具。",{"type":597,"tag":1023,"props":73677,"children":73679},{"id":73678},"store的使用",[73680],{"type":603,"value":73678},{"type":597,"tag":606,"props":73682,"children":73683},{},[73684],{"type":597,"tag":629,"props":73685,"children":73687},{"className":73686},[],[73688],{"type":603,"value":73689},"git config --global credential.helper store ",{"type":597,"tag":606,"props":73691,"children":73692},{},[73693,73695,73701,73703,73709],{"type":603,"value":73694},"“store” 模式可以接受一个 ",{"type":597,"tag":629,"props":73696,"children":73698},{"className":73697},[],[73699],{"type":603,"value":73700},"--file \u003Cpath>",{"type":603,"value":73702}," 参数，可以自定义存放密码的文件路径（默认是 ",{"type":597,"tag":629,"props":73704,"children":73706},{"className":73705},[],[73707],{"type":603,"value":73708},"~/.git-credentials",{"type":603,"value":73710}," ）",{"type":597,"tag":1023,"props":73712,"children":73714},{"id":73713},"微软特有的git-credential-manager",[73715],{"type":603,"value":73716},"微软特有的Git Credential Manager",{"type":597,"tag":606,"props":73718,"children":73719},{},[73720],{"type":603,"value":73721},"WINDOS部分版本的GIT会提示",{"type":597,"tag":621,"props":73723,"children":73725},{"code":73724},"git: 'credential-cache' is not a git command. See 'get --help'.\n",[73726],{"type":597,"tag":629,"props":73727,"children":73728},{"__ignoreMap":591},[73729],{"type":603,"value":73724},{"type":597,"tag":606,"props":73731,"children":73732},{},[73733],{"type":603,"value":73734},"实际上是缺少微软的 Git Credential Manager",{"type":597,"tag":3995,"props":73736,"children":73738},{"id":73737},"安裝-git-credential-manager-for-windows解决",[73739],{"type":603,"value":73740},"安裝 Git Credential Manager for Windows解决",{"type":597,"tag":606,"props":73742,"children":73743},{},[73744],{"type":603,"value":73745},"最新的下载地址为：",{"type":597,"tag":606,"props":73747,"children":73748},{},[73749],{"type":597,"tag":886,"props":73750,"children":73753},{"href":73751,"rel":73752},"https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/latest",[890],[73754],{"type":603,"value":73751},{"type":597,"tag":606,"props":73756,"children":73757},{},[73758],{"type":603,"value":73759},"下载安装完后可以通过命令进行查看是否生效",{"type":597,"tag":621,"props":73761,"children":73763},{"code":73762},"git config --global credential.helper manager\n",[73764],{"type":597,"tag":629,"props":73765,"children":73766},{"__ignoreMap":591},[73767],{"type":603,"value":73762},{"type":597,"tag":3995,"props":73769,"children":73771},{"id":73770},"安裝-git-credential-manager-core解决",[73772],{"type":603,"value":73773},"安裝 Git-Credential-Manager-Core解决",{"type":597,"tag":606,"props":73775,"children":73776},{},[73777],{"type":603,"value":73745},{"type":597,"tag":606,"props":73779,"children":73780},{},[73781],{"type":597,"tag":886,"props":73782,"children":73785},{"href":73783,"rel":73784},"https://github.com/microsoft/Git-Credential-Manager-Core",[890],[73786],{"type":603,"value":73783},{"type":597,"tag":606,"props":73788,"children":73789},{},[73790],{"type":603,"value":73759},{"type":597,"tag":621,"props":73792,"children":73794},{"code":73793},"git config --global credential.helper manager-core\n",[73795],{"type":597,"tag":629,"props":73796,"children":73797},{"__ignoreMap":591},[73798],{"type":603,"value":73793},{"type":597,"tag":3995,"props":73800,"children":73802},{"id":73801},"检查验证工具是否在path中",[73803],{"type":603,"value":73801},{"type":597,"tag":621,"props":73805,"children":73807},{"code":73806},"git config --system --list\n\ncore.symlinks=false\ncore.autocrlf=true\ncore.fscache=true\ncolor.diff=auto\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=true\nhelp.format=html\ndiff.astextplain.textconv=astextplain\nrebase.autosquash=true\nfilter.lfs.clean=git-lfs clean -- %f\nfilter.lfs.smudge=git-lfs smudge -- %f\nfilter.lfs.process=git-lfs filter-process\nfilter.lfs.required=true\ncredential.helper=!\"D:/Application/Scoop/apps/git/2.32.0.windows.1/mingw64/libexec/git-core/git-credential-manager-core.exe\"\n",[73808],{"type":597,"tag":629,"props":73809,"children":73810},{"__ignoreMap":591},[73811],{"type":603,"value":73806},{"type":597,"tag":606,"props":73813,"children":73814},{},[73815],{"type":603,"value":73816},"如果提交的时候仍有问题,提示xxxxcommad不可用.查看下你现在使用的credential.helper是否在path中.如果不在则进行手动添加",{"type":597,"tag":621,"props":73818,"children":73820},{"code":73819},"D:\\Application\\Scoop\\apps\\git\\2.32.0.windows.1\\mingw64\\libexec\\git-core\n",[73821],{"type":597,"tag":629,"props":73822,"children":73823},{"__ignoreMap":591},[73824],{"type":603,"value":73819},{"type":597,"tag":606,"props":73826,"children":73827},{},[73828],{"type":603,"value":73829},"如果使用的是sourcetree 还得查看,他默认使用的git是不是全局的",{"type":597,"tag":857,"props":73831,"children":73833},{"id":73832},"sourcetree删除git密码",[73834],{"type":603,"value":73835},"SourceTree删除GIT密码",{"type":597,"tag":598,"props":73837,"children":73839},{"id":73838},"store",[73840],{"type":603,"value":73838},{"type":597,"tag":606,"props":73842,"children":73843},{},[73844],{"type":603,"value":73845},"删除~/.git-credentials",{"type":597,"tag":598,"props":73847,"children":73848},{"id":31620},[73849],{"type":603,"value":31620},{"type":597,"tag":606,"props":73851,"children":73852},{},[73853,73855],{"type":603,"value":73854},"windows存储的初始密码账号不对，导致每次请求远程url都会报错，我们要到控制面板\\用户帐户\\凭据管理器中手动更改我们的credential凭证;如下，是我的凭证配置；只需要编辑下即可，当然你也可以删除你要请求的远程的凭证,我没试过，当你git pull，GIT会让你输入一次用户明和密码，以后每次请求，GIT会从windows凭证中查找；",{"type":597,"tag":719,"props":73856,"children":73858},{"alt":35421,"src":73857},"/images/2019-08-07-sourcetree-git-password/20190404111514753.png",[],{"type":597,"tag":598,"props":73860,"children":73861},{"id":58136},[73862],{"type":603,"value":58136},{"type":597,"tag":606,"props":73864,"children":73865},{},[73866],{"type":603,"value":73867},"当GIT服务器修改密码后，sourcetree本地记住的密码，会导致提交代码失败。\n本地删除当前用户目录下保存密码的文件，文件路径：\nC:\\Users\\wuxiaoyuan\\AppData\\Local\\Atlassian\\SourceTree\\passwd\n清空文件内容即可",{"type":597,"tag":857,"props":73869,"children":73871},{"id":73870},"同网站多账号的问题",[73872],{"type":603,"value":73870},{"type":597,"tag":606,"props":73874,"children":73875},{},[73876],{"type":603,"value":73877},"如果同一个网站有多个账号..查看->选项->验证",{"type":597,"tag":1321,"props":73879,"children":73880},{},[73881,73886],{"type":597,"tag":807,"props":73882,"children":73883},{},[73884],{"type":603,"value":73885},"编辑那个网站的账号,就会新建一个用户名@xxx.com的账号",{"type":597,"tag":807,"props":73887,"children":73888},{},[73889],{"type":603,"value":73890},"然后把那个公用的删除",{"type":597,"tag":598,"props":73892,"children":73893},{"id":32788},[73894],{"type":603,"value":32788},{"type":597,"tag":1321,"props":73896,"children":73897},{},[73898],{"type":597,"tag":807,"props":73899,"children":73900},{},[73901],{"type":597,"tag":886,"props":73902,"children":73905},{"href":73903,"rel":73904},"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8",[890],[73906],{"type":603,"value":73907},"https://git-scm.com/book/zh/v2/Git-工具-凭证存储",{"title":591,"searchDepth":787,"depth":787,"links":73909},[73910,73911,73915,73916,73917,73918],{"id":73514,"depth":787,"text":73517},{"id":73562,"depth":787,"text":73565,"children":73912},[73913,73914],{"id":73678,"depth":1530,"text":73678},{"id":73713,"depth":1530,"text":73716},{"id":73838,"depth":787,"text":73838},{"id":31620,"depth":787,"text":31620},{"id":58136,"depth":787,"text":58136},{"id":32788,"depth":787,"text":32788},"content:tool:2019-08-07-sourcetree-git-password.md","tool/2019-08-07-sourcetree-git-password.md","2019-08-07",{"_path":264,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":263,"description":73923,"body":73924,"_type":791,"_id":74372,"_source":793,"_file":74373,"_extension":795,"date":74374},"Desktop.ini Contents for Various Shell FoldersFor Windows 7Contacts[.ShellClassInfo]\nLocalizedResourceName=@%CommonProgramFiles%\\system\\wab32res.dll,-10100\nInfoTip=@%CommonProgramFiles%\\system\\wab32res.dll,-10200\nIconResource=%SystemRoot%\\system32\\imageres.dll,-181\nDocuments[.ShellClassInfo]\nLocaliz",{"type":594,"children":73925,"toc":74366},[73926,73932,73938,73946,73954,73962,73970,73978,73986,73994,74002,74010,74018,74026,74034,74042,74050,74058,74066,74074,74082,74090,74098,74106,74114,74117,74123,74130,74137,74144,74152,74159,74167,74175,74183,74192,74200,74207,74214,74221,74228,74235,74242,74249,74257,74264,74272,74279,74286,74294,74302,74310,74318,74326,74334,74342,74350,74358],{"type":597,"tag":598,"props":73927,"children":73929},{"id":73928},"desktopini-contents-for-various-shell-folders",[73930],{"type":603,"value":73931},"Desktop.ini Contents for Various Shell Folders",{"type":597,"tag":1023,"props":73933,"children":73935},{"id":73934},"for-windows-7",[73936],{"type":603,"value":73937},"For Windows 7",{"type":597,"tag":606,"props":73939,"children":73940},{},[73941],{"type":597,"tag":1080,"props":73942,"children":73943},{},[73944],{"type":603,"value":73945},"Contacts",{"type":597,"tag":621,"props":73947,"children":73949},{"code":73948},"[.ShellClassInfo]\nLocalizedResourceName=@%CommonProgramFiles%\\system\\wab32res.dll,-10100\nInfoTip=@%CommonProgramFiles%\\system\\wab32res.dll,-10200\nIconResource=%SystemRoot%\\system32\\imageres.dll,-181\n",[73950],{"type":597,"tag":629,"props":73951,"children":73952},{"__ignoreMap":591},[73953],{"type":603,"value":73948},{"type":597,"tag":606,"props":73955,"children":73956},{},[73957],{"type":597,"tag":1080,"props":73958,"children":73959},{},[73960],{"type":603,"value":73961},"Documents",{"type":597,"tag":621,"props":73963,"children":73965},{"code":73964},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21770\nIconResource=%SystemRoot%\\system32\\imageres.dll,-112\nIconFile=%SystemRoot%\\system32\\shell32.dll\nIconIndex=-235\n",[73966],{"type":597,"tag":629,"props":73967,"children":73968},{"__ignoreMap":591},[73969],{"type":603,"value":73964},{"type":597,"tag":606,"props":73971,"children":73972},{},[73973],{"type":597,"tag":1080,"props":73974,"children":73975},{},[73976],{"type":603,"value":73977},"Desktop",{"type":597,"tag":621,"props":73979,"children":73981},{"code":73980},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21769\nIconResource=%SystemRoot%\\system32\\imageres.dll,-183\n[LocalizedFileNames]\nGameExplorer.lnk=@%SystemRoot%\\system32\\gameux.dll,-10082\nWindows Media Player.lnk=@%SystemRoot%\\system32\\unregmp2.exe,-4\nChess.lnk=@%SystemRoot%\\system32\\gameux.dll,-10054\nFreeCell.lnk=@%SystemRoot%\\system32\\gameux.dll,-10055\nHearts.lnk=@%SystemRoot%\\system32\\gameux.dll,-10056\nInternet Checkers.lnk=@%SystemRoot%\\system32\\gameux.dll,-10101\nMinesweeper.lnk=@%SystemRoot%\\system32\\gameux.dll,-10057\nSpider Solitaire.lnk=@%SystemRoot%\\system32\\gameux.dll,-10061\n",[73982],{"type":597,"tag":629,"props":73983,"children":73984},{"__ignoreMap":591},[73985],{"type":603,"value":73980},{"type":597,"tag":606,"props":73987,"children":73988},{},[73989],{"type":597,"tag":1080,"props":73990,"children":73991},{},[73992],{"type":603,"value":73993},"Downloads",{"type":597,"tag":621,"props":73995,"children":73997},{"code":73996},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21798\nIconResource=%SystemRoot%\\system32\\imageres.dll,-184\n",[73998],{"type":597,"tag":629,"props":73999,"children":74000},{"__ignoreMap":591},[74001],{"type":603,"value":73996},{"type":597,"tag":606,"props":74003,"children":74004},{},[74005],{"type":597,"tag":1080,"props":74006,"children":74007},{},[74008],{"type":603,"value":74009},"Favorites",{"type":597,"tag":621,"props":74011,"children":74013},{"code":74012},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21796\nIconResource=%SystemRoot%\\system32\\imageres.dll,-115\nIconFile=%SystemRoot%\\system32\\shell32.dll\nIconIndex=-173\n",[74014],{"type":597,"tag":629,"props":74015,"children":74016},{"__ignoreMap":591},[74017],{"type":603,"value":74012},{"type":597,"tag":606,"props":74019,"children":74020},{},[74021],{"type":597,"tag":1080,"props":74022,"children":74023},{},[74024],{"type":603,"value":74025},"Links",{"type":597,"tag":621,"props":74027,"children":74029},{"code":74028},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21810\nIconResource=%SystemRoot%\\system32\\imageres.dll,-185\nDefaultDropEffect=4\n[LocalizedFileNames]\nRecentPlaces.lnk=@shell32.dll,-37217\nDesktop.lnk=@shell32.dll,-21769\nDownloads.lnk=@shell32.dll,-21798\n",[74030],{"type":597,"tag":629,"props":74031,"children":74032},{"__ignoreMap":591},[74033],{"type":603,"value":74028},{"type":597,"tag":606,"props":74035,"children":74036},{},[74037],{"type":597,"tag":1080,"props":74038,"children":74039},{},[74040],{"type":603,"value":74041},"Music",{"type":597,"tag":621,"props":74043,"children":74045},{"code":74044},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21790\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12689\nIconResource=%SystemRoot%\\system32\\imageres.dll,-108\nIconFile=%SystemRoot%\\system32\\shell32.dll\nIconIndex=-237\n",[74046],{"type":597,"tag":629,"props":74047,"children":74048},{"__ignoreMap":591},[74049],{"type":603,"value":74044},{"type":597,"tag":606,"props":74051,"children":74052},{},[74053],{"type":597,"tag":1080,"props":74054,"children":74055},{},[74056],{"type":603,"value":74057},"Pictures",{"type":597,"tag":621,"props":74059,"children":74061},{"code":74060},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21779\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12688\nIconResource=%SystemRoot%\\system32\\imageres.dll,-113\nIconFile=%SystemRoot%\\system32\\shell32.dll\nIconIndex=-236\n",[74062],{"type":597,"tag":629,"props":74063,"children":74064},{"__ignoreMap":591},[74065],{"type":603,"value":74060},{"type":597,"tag":606,"props":74067,"children":74068},{},[74069],{"type":597,"tag":1080,"props":74070,"children":74071},{},[74072],{"type":603,"value":74073},"Recent",{"type":597,"tag":621,"props":74075,"children":74077},{"code":74076},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21797\nInfoTip=@shell32,dll,-12692\nIconResource=%SystemRoot%\\system32\\imageres.dll,-117\nCLSID={0C39A5CF-1A7A-40C8-BA74-8900E6DF5FCD}\n",[74078],{"type":597,"tag":629,"props":74079,"children":74080},{"__ignoreMap":591},[74081],{"type":603,"value":74076},{"type":597,"tag":606,"props":74083,"children":74084},{},[74085],{"type":597,"tag":1080,"props":74086,"children":74087},{},[74088],{"type":603,"value":74089},"Saved Games",{"type":597,"tag":621,"props":74091,"children":74093},{"code":74092},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21814\nIconResource=%SystemRoot%\\system32\\imageres.dll,-186\n",[74094],{"type":597,"tag":629,"props":74095,"children":74096},{"__ignoreMap":591},[74097],{"type":603,"value":74092},{"type":597,"tag":606,"props":74099,"children":74100},{},[74101],{"type":597,"tag":1080,"props":74102,"children":74103},{},[74104],{"type":603,"value":74105},"Searches",{"type":597,"tag":621,"props":74107,"children":74109},{"code":74108},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-9031\nIconResource=%SystemRoot%\\system32\\imageres.dll,-18\n[LocalizedFileNames]\nIndexed Locations.search-ms=@searchfolder.dll,-32820\nEverywhere.search-ms=@searchfolder.dll,-32822\n",[74110],{"type":597,"tag":629,"props":74111,"children":74112},{"__ignoreMap":591},[74113],{"type":603,"value":74108},{"type":597,"tag":3720,"props":74115,"children":74116},{},[],{"type":597,"tag":1023,"props":74118,"children":74120},{"id":74119},"for-windows-vista",[74121],{"type":603,"value":74122},"For Windows Vista",{"type":597,"tag":606,"props":74124,"children":74125},{},[74126],{"type":597,"tag":1080,"props":74127,"children":74128},{},[74129],{"type":603,"value":73961},{"type":597,"tag":621,"props":74131,"children":74132},{"code":73964},[74133],{"type":597,"tag":629,"props":74134,"children":74135},{"__ignoreMap":591},[74136],{"type":603,"value":73964},{"type":597,"tag":606,"props":74138,"children":74139},{},[74140],{"type":597,"tag":1080,"props":74141,"children":74142},{},[74143],{"type":603,"value":74057},{"type":597,"tag":621,"props":74145,"children":74147},{"code":74146},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21779\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12688\nIconResource=%SystemRoot%\\system32\\imageres.dll,-113\nIconFile=%SystemRoot%\\system32\\shell32.dll\nIconIndex=-236\n[LocalizedFileNames]\nSample Pictures.lnk=@%SystemRoot%\\system32\\shell32.dll,-21805\n",[74148],{"type":597,"tag":629,"props":74149,"children":74150},{"__ignoreMap":591},[74151],{"type":603,"value":74146},{"type":597,"tag":606,"props":74153,"children":74154},{},[74155],{"type":597,"tag":1080,"props":74156,"children":74157},{},[74158],{"type":603,"value":74041},{"type":597,"tag":621,"props":74160,"children":74162},{"code":74161},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21790\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12689\nIconResource=%SystemRoot%\\system32\\imageres.dll,-108\nIconFile=%SystemRoot%\\system32\\shell32.dll\nIconIndex=-237\n[LocalizedFileNames]\nSample Music.lnk=@%SystemRoot%\\system32\\shell32.dll,-21806\n",[74163],{"type":597,"tag":629,"props":74164,"children":74165},{"__ignoreMap":591},[74166],{"type":603,"value":74161},{"type":597,"tag":606,"props":74168,"children":74169},{},[74170],{"type":597,"tag":1080,"props":74171,"children":74172},{},[74173],{"type":603,"value":74174},"Videos",{"type":597,"tag":621,"props":74176,"children":74178},{"code":74177},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21791\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12690\nIconResource=%SystemRoot%\\system32\\imageres.dll,-189\nIconFile=%SystemRoot%\\system32\\shell32.dll\nIconIndex=-238\n[LocalizedFileNames]\nSample Videos.lnk=@%SystemRoot%\\system32\\shell32.dll,-21807\n",[74179],{"type":597,"tag":629,"props":74180,"children":74181},{"__ignoreMap":591},[74182],{"type":603,"value":74177},{"type":597,"tag":606,"props":74184,"children":74185},{},[74186,74190],{"type":597,"tag":1080,"props":74187,"children":74188},{},[74189],{"type":603,"value":74105},{"type":603,"value":74191},"report this ad",{"type":597,"tag":621,"props":74193,"children":74195},{"code":74194},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-9031\nIconResource=%SystemRoot%\\system32\\imageres.dll,-18\n[LocalizedFileNames]\nIndexed Locations.search-ms=@shell32.dll,-32811\nEverywhere.search-ms=@shell32.dll,-32814\nShared By Me.search-ms=@shell32.dll,-32802\nRecent Music.search-ms=@shell32.dll,-32803\nRecent Documents.search-ms=@shell32.dll,-32804\nRecent Pictures and Videos.search-ms=@shell32.dll,-32806\nRecent E-mail.search-ms=@shell32.dll,-32807\nRecently Changed.search-ms=@shell32.dll,-32813\n",[74196],{"type":597,"tag":629,"props":74197,"children":74198},{"__ignoreMap":591},[74199],{"type":603,"value":74194},{"type":597,"tag":606,"props":74201,"children":74202},{},[74203],{"type":597,"tag":1080,"props":74204,"children":74205},{},[74206],{"type":603,"value":73993},{"type":597,"tag":621,"props":74208,"children":74209},{"code":73996},[74210],{"type":597,"tag":629,"props":74211,"children":74212},{"__ignoreMap":591},[74213],{"type":603,"value":73996},{"type":597,"tag":606,"props":74215,"children":74216},{},[74217],{"type":597,"tag":1080,"props":74218,"children":74219},{},[74220],{"type":603,"value":74009},{"type":597,"tag":621,"props":74222,"children":74223},{"code":74012},[74224],{"type":597,"tag":629,"props":74225,"children":74226},{"__ignoreMap":591},[74227],{"type":603,"value":74012},{"type":597,"tag":606,"props":74229,"children":74230},{},[74231],{"type":597,"tag":1080,"props":74232,"children":74233},{},[74234],{"type":603,"value":73945},{"type":597,"tag":621,"props":74236,"children":74237},{"code":73948},[74238],{"type":597,"tag":629,"props":74239,"children":74240},{"__ignoreMap":591},[74241],{"type":603,"value":73948},{"type":597,"tag":606,"props":74243,"children":74244},{},[74245],{"type":597,"tag":1080,"props":74246,"children":74247},{},[74248],{"type":603,"value":73977},{"type":597,"tag":621,"props":74250,"children":74252},{"code":74251},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21769\nIconResource=%SystemRoot%\\system32\\imageres.dll,-183\n",[74253],{"type":597,"tag":629,"props":74254,"children":74255},{"__ignoreMap":591},[74256],{"type":603,"value":74251},{"type":597,"tag":606,"props":74258,"children":74259},{},[74260],{"type":597,"tag":1080,"props":74261,"children":74262},{},[74263],{"type":603,"value":74025},{"type":597,"tag":621,"props":74265,"children":74267},{"code":74266},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21810\nIconResource=%SystemRoot%\\system32\\imageres.dll,-185\nDefaultDropEffect=4\n[LocalizedFileNames]\nPublic.lnk=@shell32.dll,-21816\nSearches.lnk=@shell32.dll,-9031\nRecently Changed.lnk=@shell32.dll,-32813\nMusic.lnk=@shell32.dll,-21790\nPictures.lnk=@shell32.dll,-21779\nDocuments.lnk=@shell32.dll,-21770\n",[74268],{"type":597,"tag":629,"props":74269,"children":74270},{"__ignoreMap":591},[74271],{"type":603,"value":74266},{"type":597,"tag":606,"props":74273,"children":74274},{},[74275],{"type":597,"tag":1080,"props":74276,"children":74277},{},[74278],{"type":603,"value":74089},{"type":597,"tag":621,"props":74280,"children":74281},{"code":74092},[74282],{"type":597,"tag":629,"props":74283,"children":74284},{"__ignoreMap":591},[74285],{"type":603,"value":74092},{"type":597,"tag":606,"props":74287,"children":74288},{},[74289],{"type":597,"tag":1080,"props":74290,"children":74291},{},[74292],{"type":603,"value":74293},"Public Desktop",{"type":597,"tag":621,"props":74295,"children":74297},{"code":74296},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21799\n",[74298],{"type":597,"tag":629,"props":74299,"children":74300},{"__ignoreMap":591},[74301],{"type":603,"value":74296},{"type":597,"tag":606,"props":74303,"children":74304},{},[74305],{"type":597,"tag":1080,"props":74306,"children":74307},{},[74308],{"type":603,"value":74309},"Public Documents",{"type":597,"tag":621,"props":74311,"children":74313},{"code":74312},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21801\nIconResource=%SystemRoot%\\system32\\shell32.dll,-235\n",[74314],{"type":597,"tag":629,"props":74315,"children":74316},{"__ignoreMap":591},[74317],{"type":603,"value":74312},{"type":597,"tag":606,"props":74319,"children":74320},{},[74321],{"type":597,"tag":1080,"props":74322,"children":74323},{},[74324],{"type":603,"value":74325},"Public Music",{"type":597,"tag":621,"props":74327,"children":74329},{"code":74328},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21803\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12689\nIconResource=%SystemRoot%\\system32\\shell32.dll,-237\n",[74330],{"type":597,"tag":629,"props":74331,"children":74332},{"__ignoreMap":591},[74333],{"type":603,"value":74328},{"type":597,"tag":606,"props":74335,"children":74336},{},[74337],{"type":597,"tag":1080,"props":74338,"children":74339},{},[74340],{"type":603,"value":74341},"Public Pictures",{"type":597,"tag":621,"props":74343,"children":74345},{"code":74344},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21802\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12688\nIconResource=%SystemRoot%\\system32\\shell32.dll,-236\n",[74346],{"type":597,"tag":629,"props":74347,"children":74348},{"__ignoreMap":591},[74349],{"type":603,"value":74344},{"type":597,"tag":606,"props":74351,"children":74352},{},[74353],{"type":597,"tag":1080,"props":74354,"children":74355},{},[74356],{"type":603,"value":74357},"Public Videos",{"type":597,"tag":621,"props":74359,"children":74361},{"code":74360},"[.ShellClassInfo]\nLocalizedResourceName=@%SystemRoot%\\system32\\shell32.dll,-21804\nInfoTip=@%SystemRoot%\\system32\\shell32.dll,-12690\nIconResource=%SystemRoot%\\system32\\shell32.dll,-238\n",[74362],{"type":597,"tag":629,"props":74363,"children":74364},{"__ignoreMap":591},[74365],{"type":603,"value":74360},{"title":591,"searchDepth":787,"depth":787,"links":74367},[74368],{"id":73928,"depth":787,"text":73931,"children":74369},[74370,74371],{"id":73934,"depth":1530,"text":73937},{"id":74119,"depth":1530,"text":74122},"content:tool:2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows.md","tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows.md","2019-06-24",{"_path":379,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":378,"description":74376,"body":74377,"_type":791,"_id":74631,"_source":793,"_file":74632,"_extension":795,"date":74633},"使用这个站点https://app-privacy-policy-generator.firebaseapp.com/ 根据app的名称，类型，平台等等，选择对应的选项，右边按钮还包含对应的第三方隐私服务链接，如果你用到的话，比如google play service, firebase等等，那么就勾选上。最后点击GENERATE，就会生成一个适合你自己app的privacy-policy页面了。\n最后的最后，记得将这个url输入到google play后台的隐私设置区域，点击保存，重新发布app等候google play团队的审核。一两个小时就好了。",{"type":594,"children":74378,"toc":74627},[74379,74385,74398,74407,74413,74418,74424,74442,74448,74453,74471,74476,74482,74493,74499,74504,74517,74523,74528,74533,74539,74545,74578,74584,74612,74616],{"type":597,"tag":857,"props":74380,"children":74382},{"id":74381},"问题-隐私声明",[74383],{"type":603,"value":74384},"问题 隐私声明",{"type":597,"tag":606,"props":74386,"children":74387},{},[74388,74390,74396],{"type":603,"value":74389},"使用这个站点",{"type":597,"tag":886,"props":74391,"children":74394},{"href":74392,"rel":74393},"https://app-privacy-policy-generator.firebaseapp.com/",[890],[74395],{"type":603,"value":74392},{"type":603,"value":74397}," 根据app的名称，类型，平台等等，选择对应的选项，右边按钮还包含对应的第三方隐私服务链接，如果你用到的话，比如google play service, firebase等等，那么就勾选上。最后点击GENERATE，就会生成一个适合你自己app的privacy-policy页面了。\n最后的最后，记得将这个url输入到google play后台的隐私设置区域，点击保存，重新发布app等候google play团队的审核。一两个小时就好了。",{"type":597,"tag":606,"props":74399,"children":74400},{},[74401],{"type":597,"tag":886,"props":74402,"children":74405},{"href":74403,"rel":74404},"https://blog.usejournal.com/how-to-fix-advertising-id-policy-violation-in-google-play-store-6d9cf92d335d",[890],[74406],{"type":603,"value":74403},{"type":597,"tag":857,"props":74408,"children":74410},{"id":74409},"问题-1002",[74411],{"type":603,"value":74412},"问题 -1002",{"type":597,"tag":606,"props":74414,"children":74415},{},[74416],{"type":603,"value":74417},"Google Play应用需要授予\"允许后台弹窗\"的权限",{"type":597,"tag":857,"props":74419,"children":74421},{"id":74420},"问题-此商品无法在您设备所在的国家地区安装",[74422],{"type":603,"value":74423},"问题  此商品无法在您设备所在的国家地区安装",{"type":597,"tag":1321,"props":74425,"children":74426},{},[74427,74432,74437],{"type":597,"tag":807,"props":74428,"children":74429},{},[74430],{"type":603,"value":74431},"删除家庭内容..",{"type":597,"tag":807,"props":74433,"children":74434},{},[74435],{"type":603,"value":74436},"使用vpn切换到指定国家",{"type":597,"tag":807,"props":74438,"children":74439},{},[74440],{"type":603,"value":74441},"googleplay--账号里切换地区",{"type":597,"tag":857,"props":74443,"children":74445},{"id":74444},"问题-无法购买您要的商品",[74446],{"type":603,"value":74447},"问题 无法购买您要的商品",{"type":597,"tag":606,"props":74449,"children":74450},{},[74451],{"type":603,"value":74452},"做Google Play 支付， 遇到“无法购买您要的商品”的问题，在网上搜了些答案，下面罗列了一些",{"type":597,"tag":803,"props":74454,"children":74455},{},[74456,74461,74466],{"type":597,"tag":807,"props":74457,"children":74458},{},[74459],{"type":603,"value":74460},"保证 versionCode 和版本号与你上传的apk的包的一样。",{"type":597,"tag":807,"props":74462,"children":74463},{},[74464],{"type":603,"value":74465},"保证后台和你传入的购买商品的 id 一致。",{"type":597,"tag":807,"props":74467,"children":74468},{},[74469],{"type":603,"value":74470},"确保你所使用的账号是在测试人员里。",{"type":597,"tag":606,"props":74472,"children":74473},{},[74474],{"type":603,"value":74475},"在\"APK\"页面里，有一个“选择使用网址”，把这个网址给你的测试人员，让你的测试人员用他的google账号点进去，点那个“成为测试人员”（前提是你把他加进了测试人员列表），还需要把连接地址发送给测试人员，必须要测试人员点击同意参加测试才行！！",{"type":597,"tag":857,"props":74477,"children":74479},{"id":74478},"问题-无法使用该应用此应用的测试版尚未发布或者无法通过此帐号使用",[74480],{"type":603,"value":74481},"问题 无法使用该应用,此应用的测试版尚未发布，或者无法通过此帐号使用。",{"type":597,"tag":606,"props":74483,"children":74484},{},[74485,74491],{"type":597,"tag":886,"props":74486,"children":74489},{"href":74487,"rel":74488},"https://play.google.com/apps/testing/com.zhepama.gyj",[890],[74490],{"type":603,"value":74487},{"type":603,"value":74492},"  发给测试人员激活..记住..登录的用户一定是测试人员",{"type":597,"tag":857,"props":74494,"children":74496},{"id":74495},"问题-此版本的应用未配置为通过googleplay-结算",[74497],{"type":603,"value":74498},"问题 此版本的应用未配置为通过googleplay 结算",{"type":597,"tag":606,"props":74500,"children":74501},{},[74502],{"type":603,"value":74503},"造成这个错误的原因有两个:",{"type":597,"tag":1321,"props":74505,"children":74506},{},[74507,74512],{"type":597,"tag":807,"props":74508,"children":74509},{},[74510],{"type":603,"value":74511},"第一个是打包的时候，versionCode的值比提交到google play后台的版本要高。",{"type":597,"tag":807,"props":74513,"children":74514},{},[74515],{"type":603,"value":74516},"第二个就是：打包的时候，和google play后台上的包的签名不一致。",{"type":597,"tag":857,"props":74518,"children":74520},{"id":74519},"问题-关于如何测试",[74521],{"type":603,"value":74522},"问题  关于如何测试",{"type":597,"tag":606,"props":74524,"children":74525},{},[74526],{"type":603,"value":74527},"先使用release版本发布到googleplay.测试的时候可以使用debug版本,先测试下基本功能..查看哪里报错..",{"type":597,"tag":606,"props":74529,"children":74530},{},[74531],{"type":603,"value":74532},"apk可以使用谷歌提供的测试地址下载",{"type":597,"tag":1023,"props":74534,"children":74536},{"id":74535},"以下是google-iab测试的要求清单",[74537],{"type":603,"value":74538},"以下是Google IAB测试的要求清单。",{"type":597,"tag":3995,"props":74540,"children":74542},{"id":74541},"先决条件",[74543],{"type":603,"value":74544},"先决条件：",{"type":597,"tag":1321,"props":74546,"children":74547},{},[74548,74553,74558,74563,74568,74573],{"type":597,"tag":807,"props":74549,"children":74550},{},[74551],{"type":603,"value":74552},"AndroidManifest必须包含“com.android.vending.BILLING”权限 。",{"type":597,"tag":807,"props":74554,"children":74555},{},[74556],{"type":603,"value":74557},"APK内置于发行模式 。",{"type":597,"tag":807,"props":74559,"children":74560},{},[74561],{"type":603,"value":74562},"APK已使用发行证书进行 签名 。",{"type":597,"tag":807,"props":74564,"children":74565},{},[74566],{"type":603,"value":74567},"至少一次将APK上传到Alpha / Beta版本的渠道（以前 - 作为草稿）到开发者控制台。 （需要一段时间〜2h-24h ）。",{"type":597,"tag":807,"props":74569,"children":74570},{},[74571],{"type":603,"value":74572},"IAB 产品已发布 ，其状态设置为活动 。",{"type":597,"tag":807,"props":74574,"children":74575},{},[74576],{"type":603,"value":74577},"测试帐户被添加到开发者控制台中。",{"type":597,"tag":3995,"props":74579,"children":74581},{"id":74580},"测试要求",[74582],{"type":603,"value":74583},"测试要求：",{"type":597,"tag":1321,"props":74585,"children":74586},{},[74587,74592,74597,74602,74607],{"type":597,"tag":807,"props":74588,"children":74589},{},[74590],{"type":603,"value":74591},"测试APK 与上传到开发者控制台的版本号相同 。",{"type":597,"tag":807,"props":74593,"children":74594},{},[74595],{"type":603,"value":74596},"测试APK的签名与上传到dev.console的证书相同 。",{"type":597,"tag":807,"props":74598,"children":74599},{},[74600],{"type":603,"value":74601},"测试帐户 （不是开发人员） - 是设备上的主要帐户 。",{"type":597,"tag":807,"props":74603,"children":74604},{},[74605],{"type":603,"value":74606},"测试帐户作为测试者选择加入，并与有效的付款方式相关联 。 （ @Kyone ）",{"type":597,"tag":807,"props":74608,"children":74609},{},[74610],{"type":603,"value":74611},"PS： 使用发行证书进行调试",{"type":597,"tag":598,"props":74613,"children":74614},{"id":32788},[74615],{"type":603,"value":32788},{"type":597,"tag":1321,"props":74617,"children":74618},{},[74619],{"type":597,"tag":807,"props":74620,"children":74621},{},[74622],{"type":597,"tag":886,"props":74623,"children":74624},{"href":591},[74625],{"type":603,"value":74626},"https : //stackoverflow.com/a/15754187/1321401",{"title":591,"searchDepth":787,"depth":787,"links":74628},[74629,74630],{"id":74535,"depth":1530,"text":74538},{"id":32788,"depth":787,"text":32788},"content:unity:2019-06-23-googlplay-pulish.md","unity/2019-06-23-googlplay-pulish.md","2019-06-23",{"_path":261,"_dir":1014,"_draft":590,"_partial":590,"_locale":591,"title":260,"description":74635,"body":74636,"_type":791,"_id":74688,"_source":793,"_file":74689,"_extension":795,"date":74690},"右键发送到菜单位置右键点击系统桌面左下角的【开始】，在开始菜单中点击【运行】，在运行对话框中输入：shell:sendto命令,点击确定或者回车，打开SendTo（发送到）窗口；或者直接打开 目录\ninvoke-item \"C:\\Users\\zhepama\\AppData\\Roaming\\Microsoft\\Windows\\SendTo\"\n\n",{"type":594,"children":74637,"toc":74685},[74638,74643,74678],{"type":597,"tag":598,"props":74639,"children":74641},{"id":74640},"右键发送到菜单位置",[74642],{"type":603,"value":74640},{"type":597,"tag":1321,"props":74644,"children":74645},{},[74646,74651,74664],{"type":597,"tag":807,"props":74647,"children":74648},{},[74649],{"type":603,"value":74650},"右键点击系统桌面左下角的【开始】，在开始菜单中点击【运行】，",{"type":597,"tag":807,"props":74652,"children":74653},{},[74654,74656,74662],{"type":603,"value":74655},"在运行对话框中输入：",{"type":597,"tag":629,"props":74657,"children":74659},{"className":74658},[],[74660],{"type":603,"value":74661},"shell:sendto",{"type":603,"value":74663},"命令,点击确定或者回车，打开SendTo（发送到）窗口；",{"type":597,"tag":807,"props":74665,"children":74666},{},[74667,74669],{"type":603,"value":74668},"或者直接打开 目录",{"type":597,"tag":621,"props":74670,"children":74673},{"className":74671,"code":74672,"language":39591,"meta":591},[68668],"\ninvoke-item \"C:\\Users\\zhepama\\AppData\\Roaming\\Microsoft\\Windows\\SendTo\"\n\n",[74674],{"type":597,"tag":629,"props":74675,"children":74676},{"__ignoreMap":591},[74677],{"type":603,"value":74672},{"type":597,"tag":606,"props":74679,"children":74680},{},[74681],{"type":597,"tag":719,"props":74682,"children":74684},{"alt":591,"src":74683},"/images/2019-06-20-windows-send-to-ftp/2019-06-21-18-29-28.png",[],{"title":591,"searchDepth":787,"depth":787,"links":74686},[74687],{"id":74640,"depth":787,"text":74640},"content:tool:2019-06-20-windows-send-to-ftp.md","tool/2019-06-20-windows-send-to-ftp.md","2019-06-20",{"_path":373,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":372,"description":74692,"body":74693,"_type":791,"_id":74845,"_source":793,"_file":74846,"_extension":795,"date":74690},"导出说明Unity supports x64 since 2017 LTS. To enable it you can go to File > Build Settings > Player Settings.There under \"Other Settings\" you have to change your Script Backend to IL2CPP, and you will have the ARM64 checkbox active. Check it.And then you can either select to generate Split APKs by Targ",{"type":594,"children":74694,"toc":74840},[74695,74700,74705,74710,74717,74722,74729,74734,74741,74746,74751,74756,74769,74790,74795,74800,74812,74824,74828],{"type":597,"tag":598,"props":74696,"children":74698},{"id":74697},"导出说明",[74699],{"type":603,"value":74697},{"type":597,"tag":606,"props":74701,"children":74702},{},[74703],{"type":603,"value":74704},"Unity supports x64 since 2017 LTS. To enable it you can go to File > Build Settings > Player Settings.",{"type":597,"tag":606,"props":74706,"children":74707},{},[74708],{"type":603,"value":74709},"There under \"Other Settings\" you have to change your Script Backend to IL2CPP, and you will have the ARM64 checkbox active. Check it.",{"type":597,"tag":606,"props":74711,"children":74712},{},[74713],{"type":597,"tag":719,"props":74714,"children":74716},{"alt":591,"src":74715},"/images/2019-06-20-unity-android-x64/2019-06-20-04-48-21.png",[],{"type":597,"tag":606,"props":74718,"children":74719},{},[74720],{"type":603,"value":74721},"And then you can either select to generate Split APKs by Target Architecture",{"type":597,"tag":606,"props":74723,"children":74724},{},[74725],{"type":597,"tag":719,"props":74726,"children":74728},{"alt":591,"src":74727},"/images/2019-06-20-unity-android-x64/2019-06-20-04-48-48.png",[],{"type":597,"tag":606,"props":74730,"children":74731},{},[74732],{"type":603,"value":74733},"or in your Build Settings dialog choose to Build App Bundle (Google Play)",{"type":597,"tag":606,"props":74735,"children":74736},{},[74737],{"type":597,"tag":719,"props":74738,"children":74740},{"alt":591,"src":74739},"/images/2019-06-20-unity-android-x64/2019-06-20-04-49-44.png",[],{"type":597,"tag":606,"props":74742,"children":74743},{},[74744],{"type":603,"value":74745},"Hope it helps, you will need to have the Android NDK for this.",{"type":597,"tag":606,"props":74747,"children":74748},{},[74749],{"type":603,"value":74750},"如果选择Build ，Unity会生成AAB文件，该文件可以直接发布到Google Play。",{"type":597,"tag":606,"props":74752,"children":74753},{},[74754],{"type":603,"value":74755},"如果选择Build and Run，Unity会生成AAB文件，该文件会为关联设备生成临时APK文件，然后安装APK文件到设备并运行应用程序。",{"type":597,"tag":606,"props":74757,"children":74758},{},[74759,74761,74767],{"type":603,"value":74760},"如果选择Build 并希望手动安装应用程序到设备上，可以使用Google提供的bundletool utility ,你可在Unity安装目录中的",{"type":597,"tag":629,"props":74762,"children":74764},{"className":74763},[],[74765],{"type":603,"value":74766},"Editor/Data/PlaybackEngines/AndroidPlayer/Tools",{"type":603,"value":74768},"目录下找到它。",{"type":597,"tag":606,"props":74770,"children":74771},{},[74772,74774,74780,74782,74788],{"type":603,"value":74773},"请注意，当构建应用程序包时，菜单",{"type":597,"tag":629,"props":74775,"children":74777},{"className":74776},[],[74778],{"type":603,"value":74779},"Edit > Setting > Player",{"type":603,"value":74781},"下的",{"type":597,"tag":629,"props":74783,"children":74785},{"className":74784},[],[74786],{"type":603,"value":74787},"Split APKs by target architecture",{"type":603,"value":74789}," 会被禁用，因为生成的应用程序包应包含所有支持目标的库。",{"type":597,"tag":598,"props":74791,"children":74793},{"id":74792},"使用技巧",[74794],{"type":603,"value":74792},{"type":597,"tag":606,"props":74796,"children":74797},{},[74798],{"type":603,"value":74799},"在开发期间，为了减少使用构建和运行时的迭代次数，可以禁用应用程序包的生成功能，并使用常规的APK文件，因为从应用程序包生成APK需要额外时间，之后才会部署到设备上。",{"type":597,"tag":606,"props":74801,"children":74802},{},[74803,74805,74811],{"type":603,"value":74804},"应用程序包还可以从Android Studio生成，它使用从Unity导出的Gradle项目。为此，你需要使用Android Studio 3.2或更高版本，并选择",{"type":597,"tag":629,"props":74806,"children":74808},{"className":74807},[],[74809],{"type":603,"value":74810},"Build > Build Bundle(s) / APK(s) > Build Bundle(s)",{"type":603,"value":758},{"type":597,"tag":606,"props":74813,"children":74814},{},[74815,74817,74822],{"type":603,"value":74816},"如果目标商店不支持Android App Bundles，你可以使用Player settings中的",{"type":597,"tag":629,"props":74818,"children":74820},{"className":74819},[],[74821],{"type":603,"value":74787},{"type":603,"value":74823},"选项，从而根据终端用户设备的CPU架构提供APK文件，或使用bundletool，该工具可以构建支持运行在任何环境的“通用APK”文件",{"type":597,"tag":598,"props":74825,"children":74826},{"id":32788},[74827],{"type":603,"value":32788},{"type":597,"tag":1321,"props":74829,"children":74830},{},[74831],{"type":597,"tag":807,"props":74832,"children":74833},{},[74834],{"type":597,"tag":886,"props":74835,"children":74838},{"href":74836,"rel":74837},"https://connect.unity.com/p/unity-2018-3-betazhong-de-android-app-bundle-aab-zhi-chi",[890],[74839],{"type":603,"value":74836},{"title":591,"searchDepth":787,"depth":787,"links":74841},[74842,74843,74844],{"id":74697,"depth":787,"text":74697},{"id":74792,"depth":787,"text":74792},{"id":32788,"depth":787,"text":32788},"content:unity:2019-06-20-unity-android-x64.md","unity/2019-06-20-unity-android-x64.md",{"_path":376,"_dir":4683,"_draft":590,"_partial":590,"_locale":591,"title":375,"description":74848,"body":74849,"_type":791,"_id":75602,"_source":793,"_file":75603,"_extension":795,"date":74690},"unity是运行在mono下的,il2cpp有自己的运行时,il2cpp不是运行在mono下的不是mono的aotmono的gc和.net的gc是不同的,il2cpp运行时实现了自己的垃圾回收(Boehm-Demers-Weiser garbage collector)编译和运行时是两个阶段,可以用csc.exe编译然后运行在mono上, .NET 4.x可以使用就是这个原理Note that the .rsp file needs to match the compiler being invoked. For example:when targeting the .NET 3.5 Equi",{"type":594,"children":74850,"toc":75582},[74851,74922,74927,74932,74937,74945,74950,74956,74961,74966,74971,74977,74982,74987,74992,75000,75005,75010,75015,75020,75026,75031,75040,75045,75053,75058,75067,75078,75089,75102,75113,75124,75133,75138,75143,75148,75156,75161,75166,75171,75177,75182,75187,75193,75198,75203,75208,75213,75218,75223,75228,75234,75240,75260,75264,75269,75274,75282,75290,75303,75308,75328,75333,75338,75343,75363,75369,75377,75389,75396,75419,75423,75436,75441,75446,75451,75459,75465,75487,75500,75505,75523,75527],{"type":597,"tag":803,"props":74852,"children":74853},{},[74854,74859,74864],{"type":597,"tag":807,"props":74855,"children":74856},{},[74857],{"type":603,"value":74858},"unity是运行在mono下的,il2cpp有自己的运行时,il2cpp不是运行在mono下的不是mono的aot",{"type":597,"tag":807,"props":74860,"children":74861},{},[74862],{"type":603,"value":74863},"mono的gc和.net的gc是不同的,il2cpp运行时实现了自己的垃圾回收(Boehm-Demers-Weiser garbage collector)",{"type":597,"tag":807,"props":74865,"children":74866},{},[74867,74869,74872,74874,74879,74881],{"type":603,"value":74868},"编译和运行时是两个阶段,可以用csc.exe编译然后运行在mono上, .NET 4.x可以使用就是这个原理",{"type":597,"tag":1595,"props":74870,"children":74871},{},[],{"type":603,"value":74873},"Note that the ",{"type":597,"tag":1080,"props":74875,"children":74876},{},[74877],{"type":603,"value":74878},".rsp",{"type":603,"value":74880}," file needs to match the compiler being invoked. For example:",{"type":597,"tag":1321,"props":74882,"children":74883},{},[74884,74904],{"type":597,"tag":807,"props":74885,"children":74886},{},[74887,74889,74894,74896,74902],{"type":603,"value":74888},"when targeting the .NET 3.5 Equivalent (deprecated) scripting runtime version, ",{"type":597,"tag":1080,"props":74890,"children":74891},{},[74892],{"type":603,"value":74893},"mcs",{"type":603,"value":74895}," is used with ",{"type":597,"tag":629,"props":74897,"children":74899},{"className":74898},[],[74900],{"type":603,"value":74901},"mcs.rsp",{"type":603,"value":74903},", and",{"type":597,"tag":807,"props":74905,"children":74906},{},[74907,74909,74914,74915,74921],{"type":603,"value":74908},"when targeting the .NET 4.x Eqivalent scripting runtime version compiler, ",{"type":597,"tag":1080,"props":74910,"children":74911},{},[74912],{"type":603,"value":74913},"csc",{"type":603,"value":74895},{"type":597,"tag":629,"props":74916,"children":74918},{"className":74917},[],[74919],{"type":603,"value":74920},"csc.rsp",{"type":603,"value":9674},{"type":597,"tag":606,"props":74923,"children":74924},{},[74925],{"type":603,"value":74926},"大约在一年以前，我们写了一篇博客讨论Unity中脚本将来会是个什么样子，在那篇博客中我们提到了崭新的IL2CPP后端，并许诺其会为Unity带来更高效和更适合于各个平台的虚拟机。在2015年的一月份，我们正式发布了第一个使用IL2CPP的平台：iOS 64-bit。而随着Unity 5的发布，又带给大家另一个使用IL2CPP的平台：WebGL。感谢我们社区中用户的大量宝贵的反馈，我们在接下来的时间里根据这些反馈得以更新IL2CPP，发布补丁版本，从而持续的改进IL2CPP的编译器和运行时库。",{"type":597,"tag":606,"props":74928,"children":74929},{},[74930],{"type":603,"value":74931},"我们没有停止改进IL2CPP的打算，但是在目前这个时间点上，我们觉得可以回过头来抽出点时间告诉大家一些IL2CPP的内部工作机制。在接下来的几个月的时间里，我们打算对以下话题（或者还有其他未列出的话题）进行讨论，来做一个IL2CPP深入讲解系列。目前准备讨论的话题有：",{"type":597,"tag":606,"props":74933,"children":74934},{},[74935],{"type":603,"value":74936},"1.基础 - 工具链和命令行参数（本篇博文）\n2.IL2CPP生成代码介绍\n3.IL2CPP生成代码调试小窍门\n4.方法调用介绍（一般方法调用和虚方法调用等）",{"type":597,"tag":803,"props":74938,"children":74939},{},[74940],{"type":597,"tag":807,"props":74941,"children":74942},{},[74943],{"type":603,"value":74944},"通用代码共享的实现\n6.P/invoke(Platform Invocation Service)对于类型（types）和方法（methods）的封装\n7.垃圾回收器的集成\n8.测试框架（Testing frameworks）及其使用",{"type":597,"tag":606,"props":74946,"children":74947},{},[74948],{"type":603,"value":74949},"为了能让这个系列的讨论成为可能，我们会涉及到一些将来肯定会进行改动的IL2CPP的实现细节。但这也没有关系，通过这些讨论，我们希望能给大家提供一些有用和有趣的信息。",{"type":597,"tag":598,"props":74951,"children":74953},{"id":74952},"什么是il2cpp",[74954],{"type":603,"value":74955},"什么是IL2CPP？",{"type":597,"tag":606,"props":74957,"children":74958},{},[74959],{"type":603,"value":74960},"从技术层面上来说，我们说的IL2CPP包含了两部分：一个进行 预先编译（译注：ahead-of-time，又叫AOT，以下一律使用AOT缩写）的编译器。",{"type":597,"tag":598,"props":74962,"children":74964},{"id":74963},"一个支持虚拟机的运行时库",[74965],{"type":603,"value":74963},{"type":597,"tag":606,"props":74967,"children":74968},{},[74969],{"type":603,"value":74970},"AOT编译器将由.NET 输出的中间语言(IL)代码生成为C++代码。运行时库则提供诸如垃圾回收，与平台无关的线程，IO以及内部调用（C++原生代码直接访问托管代码结构）这样的服务和抽象层。",{"type":597,"tag":598,"props":74972,"children":74974},{"id":74973},"aot编译器",[74975],{"type":603,"value":74976},"AOT编译器",{"type":597,"tag":606,"props":74978,"children":74979},{},[74980],{"type":603,"value":74981},"IL2CPP AOT编译器实际的执行文件是il2cpp.exe。在Windows平台你可以在Unity安装路径的Editor\\Data\\il2cpp目录下找到。对于OSX平台，它位于Unity安装路径的Contents/Frameworks/il2cpp/build目录内。 il2cpp.exe这个工具是一个托管代码可执行文件，其完全由C#写成。在开发IL2CPP的过程中，我们同时使用.NET和Mono编译器对其进行编译。",{"type":597,"tag":606,"props":74983,"children":74984},{},[74985],{"type":603,"value":74986},"il2cpp 接受来自Unity自带的或者由Mono编译器产生的托管程序集，将这些程序集转换成C++代码。这些转换出的C++代码最终由部署目标平台上的C++编译器进行编译。",{"type":597,"tag":606,"props":74988,"children":74989},{},[74990],{"type":603,"value":74991},"你可以参照下图理解IL2CPP工具链的作用：",{"type":597,"tag":606,"props":74993,"children":74994},{},[74995],{"type":597,"tag":719,"props":74996,"children":74999},{"alt":74997,"src":74998},"il2cpp toolchain smaller","/images/2019-06-20-unity-il2cpp-debugger/il2cpp-toolchain-smaller.png",[],{"type":597,"tag":598,"props":75001,"children":75003},{"id":75002},"运行时库",[75004],{"type":603,"value":75002},{"type":597,"tag":606,"props":75006,"children":75007},{},[75008],{"type":603,"value":75009},"IL2CPP的另外一个部分就是对虚拟机提供支持的运行时库。我们基本上是用C++代码来实现整个运行时库的（好吧，其实里面还是有一些和平台相关的代码使用了程序集，这个只要你知我知便好，不要告诉别人 ）。我们把运行时库称之为libli2cpp，它是作为一个静态库被连接到最终的游戏可执行文件中。这么做的一个主要的好处是可以使得整个IL2CPP技术是简单并且是可移植的。",{"type":597,"tag":606,"props":75011,"children":75012},{},[75013],{"type":603,"value":75014},"你能通过查看随Unity一起发布的libil2cpp头文件来窥探其代码组织方式（Windows平台，头文件在Editor\\Data\\PlaybackEngines\\webglsupport\\BuildTools\\Libraries\\libil2cpp\\include目录中。OSX平台，头文件在Contents/Frameworks/il2cpp/libil2cpp目录中）。举个例子，由il2cpp产生的C++代码和libil2cpp之间的接口API，存在于codegen/il2cpp-codegen.h这个文件中。",{"type":597,"tag":606,"props":75016,"children":75017},{},[75018],{"type":603,"value":75019},"运行时的另外一个重要的部分，就是垃圾收集器。在Unity 5中，我们使用libgc垃圾收集器。它是一个典型的贝姆垃圾收集器（Boehm-Demers-Weiser garbage collector）。（译注：相对使用保守垃圾回收策略）。然而我们的libil2cpp被设计成可以方便使用其他垃圾回收器。因此我们现在也在研究集成微软开源的垃圾回收器（Microsoft GC）。对于垃圾回收器这一点，我们会在后续的一篇中专门的讨论，这里就不多说了。",{"type":597,"tag":598,"props":75021,"children":75023},{"id":75022},"il2cpp是如何执行的",[75024],{"type":603,"value":75025},"il2cpp是如何执行的？",{"type":597,"tag":606,"props":75027,"children":75028},{},[75029],{"type":603,"value":75030},"让我们从一个简单的例子入手。这里使用Unity的版本是5.0.1，在Windows环境并且建立一个全新的空项目。然后创建一个带MonoBehaviour的脚本文件，将其作为组件加入到Main Camera上。代码也是非常的简单，输出Hello World：",{"type":597,"tag":621,"props":75032,"children":75035},{"code":75033,"language":32269,"meta":591,"className":75034},"using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start () {\n    Debug.Log(\"Hello, IL2CPP!\");\n  }\n}\n",[32271],[75036],{"type":597,"tag":629,"props":75037,"children":75038},{"__ignoreMap":591},[75039],{"type":603,"value":75033},{"type":597,"tag":606,"props":75041,"children":75042},{},[75043],{"type":603,"value":75044},"当我切换到WebGL平台进行项目生成的时候，我们可以用Process Explorer来对il2cpp的命令行进行观察，得到以下内容：",{"type":597,"tag":621,"props":75046,"children":75048},{"code":75047},"\n \"C:\\Program Files\\Unity\\Editor\\Data\\MonoBleedingEdge\\bin\\mono.exe\" \"C:\\Program Files\\Unity\\Editor\\Data\\il2cpp/il2cpp.exe\" --copy-level=None --enable-generic-sharing --enable-unity-event-support --output-format=Compact --extra-types.file=\"C:\\Program Files\\Unity\\Editor\\Data\\il2cpp\\il2cpp_default_extra_types.txt\" \"C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\Assembly-CSharp.dll\" \"C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\UnityEngine.UI.dll\" \"C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\il2cppOutput\"\n",[75049],{"type":597,"tag":629,"props":75050,"children":75051},{"__ignoreMap":591},[75052],{"type":603,"value":75047},{"type":597,"tag":606,"props":75054,"children":75055},{},[75056],{"type":603,"value":75057},"嗯，这个真是老太太的裹脚布 - 又臭又长......，所以让我们把命令分拆一下，Unity运行的是这个可执行文件：",{"type":597,"tag":606,"props":75059,"children":75060},{},[75061],{"type":597,"tag":629,"props":75062,"children":75064},{"className":75063},[],[75065],{"type":603,"value":75066},"\"C:\\Program Files\\Unity\\Editor\\Data\\MonoBleedingEdge\\bin\\mono.exe\"",{"type":597,"tag":606,"props":75068,"children":75069},{},[75070,75072],{"type":603,"value":75071},"下一个参数是il2cpp.exe工具本身：\n",{"type":597,"tag":629,"props":75073,"children":75075},{"className":75074},[],[75076],{"type":603,"value":75077},"\"C:\\Program Files\\Unity\\Editor\\Data\\il2cpp/il2cpp.exe\"",{"type":597,"tag":606,"props":75079,"children":75080},{},[75081,75083],{"type":603,"value":75082},"请注意剩下的参数其实都是传递给il2cpp.exe的而不是mono.exe。上面的例子里传递了5个参数给il2cpp.exe：\n",{"type":597,"tag":629,"props":75084,"children":75086},{"className":75085},[],[75087],{"type":603,"value":75088},"–copy-level=None",{"type":597,"tag":606,"props":75090,"children":75091},{},[75092,75094,75100],{"type":603,"value":75093},"指明il2cpp.exe不对生成的C++文件进行copy操作\n",{"type":597,"tag":629,"props":75095,"children":75097},{"className":75096},[],[75098],{"type":603,"value":75099}," –enable-generic-sharing",{"type":603,"value":75101},"\n告诉IL2CPP如果可以，对通用方法进行共享。这个可以减少代码并降低最后二进制文件的尺寸",{"type":597,"tag":606,"props":75103,"children":75104},{},[75105,75111],{"type":597,"tag":629,"props":75106,"children":75108},{"className":75107},[],[75109],{"type":603,"value":75110},"–enable-unity-event-support",{"type":603,"value":75112},"\n确保和Unity events相关的，通过反射机制来运作的代码，能够正确生成。",{"type":597,"tag":606,"props":75114,"children":75115},{},[75116,75122],{"type":597,"tag":629,"props":75117,"children":75119},{"className":75118},[],[75120],{"type":603,"value":75121},"–output-format=Compact",{"type":603,"value":75123},"\n在生成C++代码时为里面的类型和方法使用更短的名字。这会使得C++代码难以阅读，因为原来在IL中的名字被更短的取代了。但好处是可以让C++编译器运行的更快。",{"type":597,"tag":606,"props":75125,"children":75126},{},[75127],{"type":597,"tag":629,"props":75128,"children":75130},{"className":75129},[],[75131],{"type":603,"value":75132},"–extra-types.file=”C:\\Program Files\\Unity\\Editor\\Data\\il2cpp\\il2cpp_default_extra_types.txt”",{"type":597,"tag":606,"props":75134,"children":75135},{},[75136],{"type":603,"value":75137},"使用默认的（也是空的）额外类型文件。il2cpp.exe会将在这个文件中出现的基本类型或者数组类型看作是在运行时生成的而不是一开始出现在IL代码中来对待。",{"type":597,"tag":606,"props":75139,"children":75140},{},[75141],{"type":603,"value":75142},"需要注意的是这些参数可能会在以后的Unity版本中有所变化。我们现在还没有稳定到把il2cpp.exe的命令行参数整理固定下来的阶段。",{"type":597,"tag":606,"props":75144,"children":75145},{},[75146],{"type":603,"value":75147},"最后，我们有由两个文件组成的一个列表和一个目录在这个长长的命令行中：",{"type":597,"tag":621,"props":75149,"children":75151},{"code":75150},"\n“C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\Assembly-CSharp.dll”\n“C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\UnityEngine.UI.dll”\n“C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\il2cppOutput”\n",[75152],{"type":597,"tag":629,"props":75153,"children":75154},{"__ignoreMap":591},[75155],{"type":603,"value":75150},{"type":597,"tag":606,"props":75157,"children":75158},{},[75159],{"type":603,"value":75160},"il2cpp.exe工具可以接收一个由IL程序集组成的列表。在上面这个例子中，程序集包含了项目中的简单脚本程序集：Assembly-CSharp.dll，和GUI程序集：UnityEngine.UI.dll。大家可能会注意到这里面明显少了什么：UnityEngine.dll到哪去了？系统底层的mscorlib.dll也不见了踪影。实际上，il2cpp.exe会在内部自动引用这些程序集。你当然也可以把这些放入列表中，但他们不是必须的。你只需要提及那些根程序集（那些没有被其他任何程序集引用到的程序集），剩下的il2cpp.exe会根据引用关系自动加入。",{"type":597,"tag":606,"props":75162,"children":75163},{},[75164],{"type":603,"value":75165},"裹脚布的最后一块是一个目录，il2cpp.exe会将最终的C++代码生成到这里。如果你还保持着一颗好奇的心，可以看看这个目录中产生的文件。这些文件是我们下一个讨论的主题。在你审视这些代码前，可以考虑将WebGL构建设置中的“Development Player”选项勾上。这么做会移除–output-format=Compact命令行参数从而让C++代码中的类型和方法的名字更加可读。",{"type":597,"tag":606,"props":75167,"children":75168},{},[75169],{"type":603,"value":75170},"尝试在WebGL或者iOS构建设置中进行些改变。这样你会发现传递给il2cpp.exe的参数也会相应的发生变化。例如，将“Enable Exceptions” 设置成“Full” 会将–emit-null-checks，–enable-stacktrace，和 –enable-array-bounds-check这三个参数加入il2cpp.exe命令行。",{"type":597,"tag":598,"props":75172,"children":75174},{"id":75173},"il2cpp没做的事情",[75175],{"type":603,"value":75176},"IL2CPP没做的事情",{"type":597,"tag":606,"props":75178,"children":75179},{},[75180],{"type":603,"value":75181},"我想指出IL2CPP有一向挑战我们没有接受,而且我们也高兴我们忽略了它。我们没有尝试重写整个C#标准库。当你使用IL2CPP后端构建Unity项目的时候，所有在mscorlib.dll，System.dll等中的C#标准库和原来使用Mono编译时候的一模一样。",{"type":597,"tag":606,"props":75183,"children":75184},{},[75185],{"type":603,"value":75186},"我们可以依赖健壮的且久经考验的C#标准库，所以当处理有关IL2CPP的bug的时候，我们可以很肯定的说问题出在AOT编译器或者运行时库这两个地方而不是在其他地方。",{"type":597,"tag":598,"props":75188,"children":75190},{"id":75189},"我们如何开发测试发布il2cpp",[75191],{"type":603,"value":75192},"我们如何开发，测试，发布IL2CPP",{"type":597,"tag":606,"props":75194,"children":75195},{},[75196],{"type":603,"value":75197},"自从我们在一月份的4.6.1 p5版本中首次引入IL2CPP以来，我们已经连续发布了6个Unity版本和7个补丁（Unity版本号跨越4.6和5.0）。在这些发布中我们修正了超过100个bug。",{"type":597,"tag":606,"props":75199,"children":75200},{},[75201],{"type":603,"value":75202},"为了确保持续的改进得以实施，我们内部只保留一份最新的开发代码在主干分之（trunk branch）上，在发布各个版本之前，我们会将IL2CPP的改动挂到一个特定的分之下，然后进行测试，确保所有的bug已经正确的修正了。我们的QA和维护工作组为此付出了惊人的努力才得以保证发布版本的快速迭代。（译注：感觉是版本管理的标准的开发流程）",{"type":597,"tag":606,"props":75204,"children":75205},{},[75206],{"type":603,"value":75207},"提供高质量Bug的用户社区被证明是一个无价之宝。我们非常感谢用户的反馈来帮助我们改进IL2CPP，并且希望这类反馈越多越好。",{"type":597,"tag":606,"props":75209,"children":75210},{},[75211],{"type":603,"value":75212},"我们的IL2CPP研发组有很强烈的“测试优先”意识。我们时常使用“Test Driven Design”方法，在没有进行足够全面的测试的情况下，几乎不会进行代码的合并工作。这个策略用在IL2CPP项目上非常的棒。我们现在所面对的大部分bug并不是意想不到的行为产生的，而是由意想不到的特殊情况产生的。（例如在一个32位的索引数组中使用了64位的指针从而导致C++编译器失败）面对这种类型的bug我们可以快速的并且很自信的进行修正。",{"type":597,"tag":606,"props":75214,"children":75215},{},[75216],{"type":603,"value":75217},"有了社区的帮助，我们非常努力的让IL2CPP既快又稳定。顺便说一句，如果你对我刚才说的这些有兴趣，我们正在招人（嗯.....我只是这么一说）",{"type":597,"tag":598,"props":75219,"children":75221},{"id":75220},"好戏连台",[75222],{"type":603,"value":75220},{"type":597,"tag":606,"props":75224,"children":75225},{},[75226],{"type":603,"value":75227},"关于IL2CPP我们还有很多可以说的。下一次我们会深入到il2cpp.exe代码生成的细节中。看看对于C++编译器来说，由il2cpp.exe生成的代码会是个什么样子。",{"type":597,"tag":857,"props":75229,"children":75231},{"id":75230},"il2cpp-脚本限制",[75232],{"type":603,"value":75233},"IL2CPP 脚本限制",{"type":597,"tag":598,"props":75235,"children":75237},{"id":75236},"systemreflectionemit",[75238],{"type":603,"value":75239},"System.Reflection.Emit",{"type":597,"tag":606,"props":75241,"children":75242},{},[75243,75245,75250,75252,75258],{"type":603,"value":75244},"AOT 平台无法实现 ",{"type":597,"tag":629,"props":75246,"children":75248},{"className":75247},[],[75249],{"type":603,"value":75239},{"type":603,"value":75251}," 命名空间中的任何方法。",{"type":597,"tag":629,"props":75253,"children":75255},{"className":75254},[],[75256],{"type":603,"value":75257},"System.Reflection",{"type":603,"value":75259}," 的其余部分是可接受的，只要编译器可以推断通过反射使用的代码需要在运行时存在。",{"type":597,"tag":598,"props":75261,"children":75262},{"id":49176},[75263],{"type":603,"value":49176},{"type":597,"tag":606,"props":75265,"children":75266},{},[75267],{"type":603,"value":75268},"AOT 平台可能会由于使用了反射而遇到序列化和反序列化问题。如果仅通过反射将某个类型或方法作为序列化或反序列化的一部分使用，则 AOT 编译器无法检测到需要为该类型或方法生成代码。",{"type":597,"tag":606,"props":75270,"children":75271},{},[75272],{"type":603,"value":75273},"这是我们常遇到的问题..一个是scriptobject的asset,一个是网络协议都是序列化数据",{"type":597,"tag":803,"props":75275,"children":75276},{},[75277],{"type":597,"tag":807,"props":75278,"children":75279},{},[75280],{"type":603,"value":75281},"odin,最佳模式新建一个aot场景,将需要的scriptobject放在该场景.或者声明序列化字段",{"type":597,"tag":621,"props":75283,"children":75285},{"code":75284},"public class OdinAOTSetting : Sirenix.OdinInspector.SerializedMonoBehaviour\n{\n\n    public List\u003CScriptableObject> Configs;\n\n\n    [NonSerialized, OdinSerialize]\n    public UnityEngine.Color Color;\n\n    [NonSerialized, OdinSerialize]\n    public CityMapLandType CityMapLandType;\n\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, InventoryItemConfig> InventoryItemConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, LootTableConfig> LootTableConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, MerchantConfig> MerchantConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, LandConfig> LandConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, MapConfig> MapConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Clong, NPCConfig> NPCConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Clong, QuestConfig> QuestConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, RedeemCodeConfig> RedeemCodeConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, BuffConfig> BuffConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, ProjectileConfig> ProjectileConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, SkillConfig> SkillConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, AttrAsset> AttrAssets;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, StatAsset> StatAssets;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, StatusEffectAsset> StatusEffectAssets;\n}\n",[75286],{"type":597,"tag":629,"props":75287,"children":75288},{"__ignoreMap":591},[75289],{"type":603,"value":75284},{"type":597,"tag":803,"props":75291,"children":75292},{},[75293,75298],{"type":597,"tag":807,"props":75294,"children":75295},{},[75296],{"type":603,"value":75297},"网络协议Json,使用字段,而不是使用属性(get,set),il2cpp 在运行时会剥离去除Get属性，",{"type":597,"tag":807,"props":75299,"children":75300},{},[75301],{"type":603,"value":75302},"网络协议protobuf,虽然protobuf本身是支持Dictionary的,但是aot就不能使用了..未找到解决办法 ,用class代替",{"type":597,"tag":598,"props":75304,"children":75306},{"id":75305},"泛型",[75307],{"type":603,"value":75305},{"type":597,"tag":606,"props":75309,"children":75310},{},[75311,75313,75319,75320,75326],{"type":603,"value":75312},"每个泛型实例实际上都是一个独立的类型，",{"type":597,"tag":629,"props":75314,"children":75316},{"className":75315},[],[75317],{"type":603,"value":75318},"List\u003CA>",{"type":603,"value":13757},{"type":597,"tag":629,"props":75321,"children":75323},{"className":75322},[],[75324],{"type":603,"value":75325},"List\u003CB>",{"type":603,"value":75327},"是两个完全没有关系的类型，这意味着，如果在运行时无法通过JIT来创建新类型的话，代码中没有直接使用过的泛型实例都会在运行时出现问题。",{"type":597,"tag":606,"props":75329,"children":75330},{},[75331],{"type":603,"value":75332},"在ILRuntime中解决这个问题有两种方式，一个是使用CLR绑定，把用到的泛型实例都进行CLR绑定。另外一个方式是在Unity主工程中，建立一个类，然后在里面定义用到的那些泛型实例的public变量。这两种方式都可以告诉IL2CPP保留这个类型的代码供运行中使用。",{"type":597,"tag":606,"props":75334,"children":75335},{},[75336],{"type":603,"value":75337},"因此建议大家在实际开发中，尽量使用热更DLL内部的类作为泛型参数，因为DLL内部的类型都是ILTypeInstance，只需处理一个就行了。此外如果泛型模版类就是在DLL里定义的的话，那就完全不需要进行任何处理。",{"type":597,"tag":1023,"props":75339,"children":75341},{"id":75340},"泛型方法",[75342],{"type":603,"value":75340},{"type":597,"tag":606,"props":75344,"children":75345},{},[75346,75348,75354,75355,75361],{"type":603,"value":75347},"跟泛型实例一样，",{"type":597,"tag":629,"props":75349,"children":75351},{"className":75350},[],[75352],{"type":603,"value":75353},"foo.Bar\u003CTypeA>",{"type":603,"value":12404},{"type":597,"tag":629,"props":75356,"children":75358},{"className":75357},[],[75359],{"type":603,"value":75360},"foo.Bar\u003CTypeB>",{"type":603,"value":75362},"是两个完全不同的方法，需要在主工程中显式调用过，IL2CPP才能够完整保留，因此需要尽量避免在热更DLL中调用Unity主工程的泛型方法。如果在iOS上实际运行遇到报错，可以尝试在Unity的主工程中随便写一个static的方法，然后对这个泛型方法调用一下即可，这个方法无需被调用，只是用来告诉IL2CPP我们需要这个方法",{"type":597,"tag":598,"props":75364,"children":75366},{"id":75365},"animatorcontroller-等",[75367],{"type":603,"value":75368},"AnimatorController 等",{"type":597,"tag":621,"props":75370,"children":75372},{"code":75371},"错误信息#\nCould not produce class with ID #\nCould not produce class with ID XXX.\nThis could be caused by a class being stripped from the build even though it is needed. Try disabling 'Strip Engine Code' in Player Settings.:\u003CLoadWWWIEnumerator>c__Iterator99:MoveNext()\n",[75373],{"type":597,"tag":629,"props":75374,"children":75375},{"__ignoreMap":591},[75376],{"type":603,"value":75371},{"type":597,"tag":606,"props":75378,"children":75379},{},[75380,75382,75387],{"type":603,"value":75381},"如果提示的ID的是Editor的，比如 AnimatorController(ID 91)属于Editor包里的，不能用link.xm加回来，可以在",{"type":597,"tag":1080,"props":75383,"children":75384},{},[75385],{"type":603,"value":75386},"Resource",{"type":603,"value":75388},"下建一个空的prefab,在上面挂一个AnimatorController，打包时留下这个prefab就可以确保这个类不被strip掉了。",{"type":597,"tag":606,"props":75390,"children":75391},{},[75392],{"type":597,"tag":1080,"props":75393,"children":75394},{},[75395],{"type":603,"value":36461},{"type":597,"tag":1321,"props":75397,"children":75398},{},[75399,75409],{"type":597,"tag":807,"props":75400,"children":75401},{},[75402],{"type":597,"tag":886,"props":75403,"children":75406},{"href":75404,"rel":75405},"https://forum.unity.com/threads/could-not-produce-class-with-id-91-ios.267548/",[890],[75407],{"type":603,"value":75408},"Could not produce class with ID 91 - iOS - Unity Forum",{"type":597,"tag":807,"props":75410,"children":75411},{},[75412],{"type":597,"tag":886,"props":75413,"children":75416},{"href":75414,"rel":75415},"https://docs.unity3d.com/cn/2020.2/Manual/ClassIDReference.html",[890],[75417],{"type":603,"value":75418},"YAML 类 ID 参考 - Unity 手册 (unity3d.com)",{"type":597,"tag":598,"props":75420,"children":75421},{"id":58136},[75422],{"type":603,"value":58136},{"type":597,"tag":1321,"props":75424,"children":75425},{},[75426,75431],{"type":597,"tag":807,"props":75427,"children":75428},{},[75429],{"type":603,"value":75430},"不要用dynamic关键字",{"type":597,"tag":807,"props":75432,"children":75433},{},[75434],{"type":603,"value":75435},"没有使用的字段都不会被编译..",{"type":597,"tag":857,"props":75437,"children":75439},{"id":75438},"托管代码剥离",[75440],{"type":603,"value":75438},{"type":597,"tag":606,"props":75442,"children":75443},{},[75444],{"type":603,"value":75445},"IL2CPP在打包时会自动对Unity工程的DLL进行裁剪，将代码中没有引用到的类型裁剪掉，以达到减小发布后ipa包的尺寸的目的。然而在实际使用过程中，很多类型有可能会被意外剪裁掉，造成运行时抛出找不到某个类型的异常。特别是通过反射等方式在编译时无法得知的函数调用，在运行时都很有可能遇到问题。",{"type":597,"tag":606,"props":75447,"children":75448},{},[75449],{"type":603,"value":75450},"Unity提供了一个方式来告诉Unity引擎，哪些类型是不能够被剪裁掉的。具体做法就是在Unity工程的Assets目录中建立一个叫link.xml的XML文件，然后按照下面的格式指定你需要保留的类型：",{"type":597,"tag":621,"props":75452,"children":75454},{"code":75453},"\u003Clinker>\n  \u003Cassembly fullname=\"UnityEngine\" preserve=\"all\"/>\n  \u003Cassembly fullname=\"Assembly-CSharp\">\n    \u003Cnamespace fullname=\"MyGame.Utils\" preserve=\"all\"/>\n    \u003Ctype fullname=\"MyGame.SomeClass\" preserve=\"all\"/>\n  \u003C/assembly>  \n\u003C/linker>\n",[75455],{"type":597,"tag":629,"props":75456,"children":75457},{"__ignoreMap":591},[75458],{"type":603,"value":75453},{"type":597,"tag":598,"props":75460,"children":75462},{"id":75461},"il2cpp限制",[75463],{"type":603,"value":75464},"IL2CPP限制",{"type":597,"tag":606,"props":75466,"children":75467},{},[75468,75470,75476,75478,75485],{"type":603,"value":75469},"将游戏导出到 iOS 等平台时，Unity 将使用其 IL2CPP 引擎将 IL“转换”为 C++ 代码，然后使用目标平台的本机编译器进行编译。 在此方案中，有几个不支持的 .NET 功能，例如反射的部分内容和使用 ",{"type":597,"tag":629,"props":75471,"children":75473},{"className":75472},[],[75474],{"type":603,"value":75475},"dynamic",{"type":603,"value":75477}," 关键字。 虽然可在自己的代码中使用这些功能，但使用第三方 DLL 和 SDK 时可能会遇到问题，这些 DLL 和 SDK 并非使用 Unity 和 IL2CPP 编写。 有关此主题的详细信息，请参阅 Unity 站点上的",{"type":597,"tag":886,"props":75479,"children":75482},{"href":75480,"rel":75481},"https://docs.unity3d.com/Manual/ScriptingRestrictions.html",[890],[75483],{"type":603,"value":75484},"脚本限制",{"type":603,"value":75486},"文档。",{"type":597,"tag":606,"props":75488,"children":75489},{},[75490,75492,75499],{"type":603,"value":75491},"此外，如之前 Json.NET 示例中所述，Unity 将尝试在 IL2CPP 导出过程中裁剪掉未使用的代码。 虽然这通常不是问题，但对于使用反射的库，它可能会意外地删除在导出时无法确定是否被调用而在运行时可能被调用的属性或方法。 若要解决这些问题，请添加一个 link.xml 文件到项目中，该文件中包含的程序集和命名空间列表不会执行裁剪过程。 有关完整详细信息，请参阅",{"type":597,"tag":886,"props":75493,"children":75496},{"href":75494,"rel":75495},"https://docs.unity3d.com/Manual/IL2CPP-BytecodeStripping.html",[890],[75497],{"type":603,"value":75498},"有关字节码裁剪的 Unity 文档",{"type":603,"value":758},{"type":597,"tag":598,"props":75501,"children":75503},{"id":75502},"编译速度优化",[75504],{"type":603,"value":75502},{"type":597,"tag":803,"props":75506,"children":75507},{},[75508,75513,75518],{"type":597,"tag":807,"props":75509,"children":75510},{},[75511],{"type":603,"value":75512},"增量编译",{"type":597,"tag":807,"props":75514,"children":75515},{},[75516],{"type":603,"value":75517},"关闭实时保护",{"type":597,"tag":807,"props":75519,"children":75520},{},[75521],{"type":603,"value":75522},"使用ssd",{"type":597,"tag":598,"props":75524,"children":75525},{"id":32788},[75526],{"type":603,"value":32788},{"type":597,"tag":1321,"props":75528,"children":75529},{},[75530,75539,75548,75556,75564,75573],{"type":597,"tag":807,"props":75531,"children":75532},{},[75533],{"type":597,"tag":886,"props":75534,"children":75537},{"href":75535,"rel":75536},"https://docs.microsoft.com/en-us/visualstudio/cross-platform/unity-scripting-upgrade?view=vs-2019",[890],[75538],{"type":603,"value":75535},{"type":597,"tag":807,"props":75540,"children":75541},{},[75542],{"type":597,"tag":886,"props":75543,"children":75546},{"href":75544,"rel":75545},"https://docs.unity3d.com/Manual/IL2CPP-OptimizingBuildTimes.html",[890],[75547],{"type":603,"value":75544},{"type":597,"tag":807,"props":75549,"children":75550},{},[75551],{"type":597,"tag":886,"props":75552,"children":75554},{"href":75494,"rel":75553},[890],[75555],{"type":603,"value":75494},{"type":597,"tag":807,"props":75557,"children":75558},{},[75559],{"type":597,"tag":886,"props":75560,"children":75562},{"href":75480,"rel":75561},[890],[75563],{"type":603,"value":75480},{"type":597,"tag":807,"props":75565,"children":75566},{},[75567],{"type":597,"tag":886,"props":75568,"children":75571},{"href":75569,"rel":75570},"https://www.jianshu.com/p/7cfcb7b0cfe7",[890],[75572],{"type":603,"value":75569},{"type":597,"tag":807,"props":75574,"children":75575},{},[75576],{"type":597,"tag":886,"props":75577,"children":75580},{"href":75578,"rel":75579},"https://blogs.unity3d.com/cn/2015/05/06/an-introduction-to-ilcpp-internals/",[890],[75581],{"type":603,"value":75578},{"title":591,"searchDepth":787,"depth":787,"links":75583},[75584,75585,75586,75587,75588,75589,75590,75591,75592,75593,75594,75597,75598,75599,75600,75601],{"id":74952,"depth":787,"text":74955},{"id":74963,"depth":787,"text":74963},{"id":74973,"depth":787,"text":74976},{"id":75002,"depth":787,"text":75002},{"id":75022,"depth":787,"text":75025},{"id":75173,"depth":787,"text":75176},{"id":75189,"depth":787,"text":75192},{"id":75220,"depth":787,"text":75220},{"id":75236,"depth":787,"text":75239},{"id":49176,"depth":787,"text":49176},{"id":75305,"depth":787,"text":75305,"children":75595},[75596],{"id":75340,"depth":1530,"text":75340},{"id":75365,"depth":787,"text":75368},{"id":58136,"depth":787,"text":58136},{"id":75461,"depth":787,"text":75464},{"id":75502,"depth":787,"text":75502},{"id":32788,"depth":787,"text":32788},"content:unity:2019-06-20-unity-il2cpp-debugger.md","unity/2019-06-20-unity-il2cpp-debugger.md",{"_path":20,"_dir":8400,"_draft":590,"_partial":590,"_locale":591,"title":19,"description":75605,"body":75606,"_type":791,"_id":75749,"_source":793,"_file":75750,"_extension":795,"date":75751},"DaemonLinux Daemon（守护进程）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。它不需要用户输入就能运行而且提供某种服务，不是对整个系统就是对某个用户程序提供服务。Linux系统的大多数服务器就是通过守护进程实现的。常见的守护进程包括系统日志进程syslogd、 web服务器httpd、邮件服务器sendmail和数据库服务器mysqld等...配置文件sudo vi /etc/systemd/system/KestrelDemoSer.service\n修改配置[Unit]\nDescription=KestrelDemo runni",{"type":594,"children":75607,"toc":75739},[75608,75614,75619,75624,75632,75636,75644,75649,75657,75662,75671,75677,75686,75691,75699,75703,75708,75716,75721,75726,75734],{"type":597,"tag":598,"props":75609,"children":75611},{"id":75610},"daemon",[75612],{"type":603,"value":75613},"Daemon",{"type":597,"tag":606,"props":75615,"children":75616},{},[75617],{"type":603,"value":75618},"Linux Daemon（守护进程）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。它不需要用户输入就能运行而且提供某种服务，不是对整个系统就是对某个用户程序提供服务。Linux系统的大多数服务器就是通过守护进程实现的。常见的守护进程包括系统日志进程syslogd、 web服务器httpd、邮件服务器sendmail和数据库服务器mysqld等...",{"type":597,"tag":1023,"props":75620,"children":75622},{"id":75621},"配置文件",[75623],{"type":603,"value":75621},{"type":597,"tag":621,"props":75625,"children":75627},{"code":75626},"sudo vi /etc/systemd/system/KestrelDemoSer.service\n",[75628],{"type":597,"tag":629,"props":75629,"children":75630},{"__ignoreMap":591},[75631],{"type":603,"value":75626},{"type":597,"tag":606,"props":75633,"children":75634},{},[75635],{"type":603,"value":68809},{"type":597,"tag":621,"props":75637,"children":75639},{"code":75638},"[Unit]\nDescription=KestrelDemo running on CentOS\n[Service]\nWorkingDirectory=/cusD/wwwroot/KesPublish\nType=simple\nUser=root\nGroup=root\nExecStart=/usr/bin/dotnet /cusD/wwwroot/KesPublish/KestrelDemo.dll\nRestart=always\n# Restart service after 10 seconds if the dotnet service crashes:\nRestartSec=10\nSyslogIdentifier=dotnet-example\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\nEnvironment=DOTNET_PRINT_TELEMETRY_MESSAGE=false\n[Install]\nWantedBy=multi-user.target\n",[75640],{"type":597,"tag":629,"props":75641,"children":75642},{"__ignoreMap":591},[75643],{"type":603,"value":75638},{"type":597,"tag":1023,"props":75645,"children":75647},{"id":75646},"命令",[75648],{"type":603,"value":75646},{"type":597,"tag":621,"props":75650,"children":75652},{"code":75651},"systemctl enable KestrelDemoSer.service\nsystemctl start KestrelDemoSer.service\nsystemctl status KestrelDemoSer.service\nsudo journalctl -fu KestrelDemoSer.service  //查看日志\n",[75653],{"type":597,"tag":629,"props":75654,"children":75655},{"__ignoreMap":591},[75656],{"type":603,"value":75651},{"type":597,"tag":598,"props":75658,"children":75660},{"id":75659},"jenkins",[75661],{"type":603,"value":75659},{"type":597,"tag":621,"props":75663,"children":75666},{"code":75664,"language":41059,"meta":591,"className":75665},"sudo systemctl stop edu\nsudo dotnet publish -c Release ${WORKSPACE}/src/Edu.Web/Edu.Web.csproj -o /usr/local/src/edu\nsudo systemctl start edu\n",[41057],[75667],{"type":597,"tag":629,"props":75668,"children":75669},{"__ignoreMap":591},[75670],{"type":603,"value":75664},{"type":597,"tag":1023,"props":75672,"children":75674},{"id":75673},"efcore-update",[75675],{"type":603,"value":75676},"efcore update",{"type":597,"tag":621,"props":75678,"children":75681},{"code":75679,"language":41059,"meta":591,"className":75680},"dotnet ef database update --context Edu.EntityFrameworkCore.EduMigrationsDbContext --startup-project ./src/Edu.Web/Edu.Web.csproj --project ./src/Edu.EntityFrameworkCore.DbMigrations/Edu.EntityFrameworkCore.DbMigrations.csproj   -v\n",[41057],[75682],{"type":597,"tag":629,"props":75683,"children":75684},{"__ignoreMap":591},[75685],{"type":603,"value":75679},{"type":597,"tag":606,"props":75687,"children":75688},{},[75689],{"type":603,"value":75690},"不能使用sudo的解决办法",{"type":597,"tag":621,"props":75692,"children":75694},{"code":75693},"sudo visudo\n\njenkins ALL=(ALL) NOPASSWD: ALL\n\nsystemctl restart jenkins\n",[75695],{"type":597,"tag":629,"props":75696,"children":75697},{"__ignoreMap":591},[75698],{"type":603,"value":75693},{"type":597,"tag":598,"props":75700,"children":75701},{"id":68847},[75702],{"type":603,"value":68847},{"type":597,"tag":606,"props":75704,"children":75705},{},[75706],{"type":603,"value":75707},"从windows迁移到linux时..mysql数据库的表明可能会有大小写敏感的问题\n修改mysql配置my.ini",{"type":597,"tag":621,"props":75709,"children":75711},{"code":75710},"lower_case_table_names = 0 //mysql会根据表名直接操作，大小写敏感。 \nlower_case_table_names = 1 //mysql会先把表名转为小写，再执行操作。 \n",[75712],{"type":597,"tag":629,"props":75713,"children":75714},{"__ignoreMap":591},[75715],{"type":603,"value":75710},{"type":597,"tag":857,"props":75717,"children":75719},{"id":75718},"windows下绝对路径启动问题",[75720],{"type":603,"value":75718},{"type":597,"tag":606,"props":75722,"children":75723},{},[75724],{"type":603,"value":75725},"注册成services后.他的启动目录是C:\\Windows\\System32..所以需要手动设置下contentRoot",{"type":597,"tag":621,"props":75727,"children":75729},{"code":75728},"F:\\DotHass.Blog\\aspnet-core\\src\\DotHass.Blog.Web\\bin\\Release\\publish\\DotHass.Blog.Web.exe --contentRoot F:\\DotHass.Blog\\aspnet-core\\src\\DotHass.Blog.Web\\bin\\Release\\publish\n",[75730],{"type":597,"tag":629,"props":75731,"children":75732},{"__ignoreMap":591},[75733],{"type":603,"value":75728},{"type":597,"tag":606,"props":75735,"children":75736},{},[75737],{"type":603,"value":75738},"如果启动失败..先查看错误日志..最好是用文件存储",{"title":591,"searchDepth":787,"depth":787,"links":75740},[75741,75745,75748],{"id":75610,"depth":787,"text":75613,"children":75742},[75743,75744],{"id":75621,"depth":1530,"text":75621},{"id":75646,"depth":1530,"text":75646},{"id":75659,"depth":787,"text":75659,"children":75746},[75747],{"id":75673,"depth":1530,"text":75676},{"id":68847,"depth":787,"text":68847},"content:dotnet:2019-06-05-linux-dotnet-daemon.md","dotnet/2019-06-05-linux-dotnet-daemon.md","2019-06-05",1710779032274]