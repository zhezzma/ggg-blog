[{"data":1,"prerenderedAt":1149},["Reactive",2],{"content-query-kSBcwvnqm6":3,"content-navigation-8C37fagqQL":567},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":561,"_id":562,"_source":563,"_file":564,"_extension":565,"date":566},"/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization","dotnet",false,"","延迟补偿在C/S架构游戏协议设计和优化中的应用","第一人称角色网络游戏的设计是一项很有挑战性的工作。网络环境下的健壮性，是动作游戏能否成功的一个重要因素。另外，PC上面的开发者需要考虑到玩家层次不齐的机器配置以及网络状况，很多用户的硬件配置跟网络跟当前最好的配置跟网络有一定差距。",{"type":11,"children":12,"toc":558},"root",[13,22,27,32,37,43,48,53,62,67,112,117,122,157,162,168,173,186,191,196,202,207,212,217,222,227,235,240,245,250,255,261,266,271,277,282,287,293,298,303,308,313,318,323,346,351,356,361,366,371,376,382,387,392,428,433,439,444,449,454,459,464,469,475,480,485,490,505,510,515,520,525,530,535,540,545],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"_1综述",[19],{"type":20,"value":21},"text","1.综述",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26],{"type":20,"value":9},{"type":14,"tag":23,"props":28,"children":29},{},[30],{"type":20,"value":31},"宽带网络的出现有利于在线游戏开发，但是开发者还是需要考虑网络延迟和其它网络特性。而且宽带网络在美国被广泛采用还需要一段时间，在世界上其它国家可能需要更长的一段时间。另外，很多宽带网络质量很差，用户虽然偶尔能够享受到高带宽，但更多的时候他们不得不面对高延迟和高丢包率。",{"type":14,"tag":23,"props":33,"children":34},{},[35],{"type":20,"value":36},"我们应该提供给玩家良好的游戏。本篇文章讨论了如何提供给玩家顶尖的操作体验；介绍了很多在线动作游戏中采用的C/S架构背景。此外，我们还讨论了如何通过一个预测模型来掩饰延迟带来的影响。文章的最后描述了一个叫做延迟补偿的机制，弥补了因为网络质量不好带来的负面影响",{"type":14,"tag":15,"props":38,"children":40},{"id":39},"_2cs游戏的基本架构",[41],{"type":20,"value":42},"2.C/S游戏的基本架构",{"type":14,"tag":23,"props":44,"children":45},{},[46],{"type":20,"value":47},"网络上可玩的大部分动作游戏都是C/S结构游戏基础上修改完成的，比如半条命以及其修改版反恐精英、军团要塞，以及一些基于quake3引擎和虚幻引擎的游戏。这类游戏都有一个用来执行游戏逻辑的服务器以及连接到这个服务器的多个客户端。客户端仅仅是用来接收玩家的操作并发给服务器，服务器对这些操作作出响应，移动玩家周围物体，并将游戏世界的信息发给客户端显示出来。当然世界的游戏系统有更多组件，我们这样简化有利于分析预测和延迟补偿。",{"type":14,"tag":23,"props":49,"children":50},{},[51],{"type":20,"value":52},"基于这种考虑，典型的C/S游戏引擎通常看起来是这样的",{"type":14,"tag":23,"props":54,"children":55},{},[56],{"type":14,"tag":57,"props":58,"children":61},"img",{"alt":59,"src":60},"General Client / Server Architecture","/images/2020-02-02-Latency_Compensating_Methods_in_ClientServer_In-game_Protocol_Design_and_Optimization/Lagcomp1.png",[],{"type":14,"tag":23,"props":63,"children":64},{},[65],{"type":20,"value":66},"为了便于讨论，我们假定客户端跟服务器之间已经建立连接；客户端的每一帧循环如下：",{"type":14,"tag":68,"props":69,"children":70},"ol",{},[71,77,82,87,92,97,102,107],{"type":14,"tag":72,"props":73,"children":74},"li",{},[75],{"type":20,"value":76},"获取帧开始时间",{"type":14,"tag":72,"props":78,"children":79},{},[80],{"type":20,"value":81},"采集用户输入",{"type":14,"tag":72,"props":83,"children":84},{},[85],{"type":20,"value":86},"根据模拟时间将移动命令打包发送给服务器",{"type":14,"tag":72,"props":88,"children":89},{},[90],{"type":20,"value":91},"获取处理服务器传过来的数据包",{"type":14,"tag":72,"props":93,"children":94},{},[95],{"type":20,"value":96},"根据服务器数据包的内容决定可见物体及其状态",{"type":14,"tag":72,"props":98,"children":99},{},[100],{"type":20,"value":101},"渲染场景",{"type":14,"tag":72,"props":103,"children":104},{},[105],{"type":20,"value":106},"获取帧结束时间",{"type":14,"tag":72,"props":108,"children":109},{},[110],{"type":20,"value":111},"结束时间减去开始时间就是下一帧的模拟时间",{"type":14,"tag":23,"props":113,"children":114},{},[115],{"type":20,"value":116},"客户端每完成一个帧循环，就用“frametime”来决定下一帧需要多少时间，如果帧率恒定，“frametime”就是准确的，否则就没办法获得准确的“frametime”（因为在没一帧开始你不可能知道这一帧需要多长时间）",{"type":14,"tag":23,"props":118,"children":119},{},[120],{"type":20,"value":121},"服务器的循环大同小异：",{"type":14,"tag":68,"props":123,"children":124},{},[125,129,134,139,144,149,153],{"type":14,"tag":72,"props":126,"children":127},{},[128],{"type":20,"value":76},{"type":14,"tag":72,"props":130,"children":131},{},[132],{"type":20,"value":133},"读取客户端发过来的操作信息",{"type":14,"tag":72,"props":135,"children":136},{},[137],{"type":20,"value":138},"根据客户端操作执行逻辑运算",{"type":14,"tag":72,"props":140,"children":141},{},[142],{"type":20,"value":143},"采用上一个循环得到的模拟时间来模拟服务器控制的物体移动状态",{"type":14,"tag":72,"props":145,"children":146},{},[147],{"type":20,"value":148},"对每一个连接的客户端，发送打包相应的物体/世界状态",{"type":14,"tag":72,"props":150,"children":151},{},[152],{"type":20,"value":106},{"type":14,"tag":72,"props":154,"children":155},{},[156],{"type":20,"value":111},{"type":14,"tag":23,"props":158,"children":159},{},[160],{"type":20,"value":161},"在这个模型中，非玩家物体完全由服务器控制其状态，每个玩家根据服务器发过来的数据包控制自己的移动。这是一种很自然的方法，当然还有其它的方法也可以完成这个功能。",{"type":14,"tag":15,"props":163,"children":165},{"id":164},"_3用户消息的内容",[166],{"type":20,"value":167},"3.用户消息的内容",{"type":14,"tag":23,"props":169,"children":170},{},[171],{"type":20,"value":172},"基于half-life引擎的游戏用户消息都很简单，只需要封装在一个包含几个关键成员的结构中：",{"type":14,"tag":174,"props":175,"children":180},"pre",{"code":176,"language":177,"meta":7,"className":178},"typedef struct usercmd_s\n{\n    // Interpolation time on client\n    short lerp_msec;  \n    // Duration in ms of command\n    byte msec;    \n    // Command view angles.\n    vec3_t viewangles;  \n    // intended velocities\n    // Forward velocity.\n    float forwardmove;  \n    // Sideways velocity.\n    float sidemove;   \n    // Upward velocity.\n    float upmove;  \n    // Attack buttons\n    unsigned short buttons; \n    //\n    // Additional fields omitted...\n    //\n} usercmd_t;\n","c++",[179],"language-c++",[181],{"type":14,"tag":182,"props":183,"children":184},"code",{"__ignoreMap":7},[185],{"type":20,"value":176},{"type":14,"tag":23,"props":187,"children":188},{},[189],{"type":20,"value":190},"结构中最关键的变量时msec,viewangles,forward,side,upmove和buttons。msec表示这个命令执行对应的毫秒数（也就是上面提到的“frametime”）。viewangles是一个三维向量，表示玩家的朝向。forward,side和upmove表示玩家是否通过键盘、鼠标或控制杆控制移动。最后，buttons这个字段包含一个或多个比特，标志玩家是否按着某些按键。",{"type":14,"tag":23,"props":192,"children":193},{},[194],{"type":20,"value":195},"基于C/S架构的游戏采用以上数据结构运行如下：客户端创建命令并发送到服务器，服务器响应这些命令并把更新了的世界和物体位置信息发回客户端，客户端收到以后进行渲染。这种方式非常简单，但是在实际应用中效果差强人意，用户会感觉到网络连接带来的明显延迟。这主要是由于客户端完全没有逻辑操作，发出消息以后就等待服务器响应。如果客户端跟服务器有500ms的延迟，客户端执行了操作到看到操作的结果就需要500ms，这种延迟在局域网通常可以接受（因为通常延迟比较小），但在因特网上是没法接受的",{"type":14,"tag":15,"props":197,"children":199},{"id":198},"_4客户端预测",[200],{"type":20,"value":201},"4.客户端预测",{"type":14,"tag":23,"props":203,"children":204},{},[205],{"type":20,"value":206},"有一种方法可以改善这种情况：客户端本地即时执行移动操作，假定服务器即时通知客户端可以执行操作，这种方法可以称为客户端预测。",{"type":14,"tag":23,"props":208,"children":209},{},[210],{"type":20,"value":211},"采用客户端运动预测以后，客户端就不再是一个“小型客户端”，不再单单响应服务器命令；但也不是说客户端可以像没有中央服务器的p2p游戏完全自治。服务器仍然在运行并保证在客户端跟服务器运行结果不一致的情况下纠正客户端错误的模拟。由于网络延迟，修正在一个网络传输周期以后才会执行，这个时候纠正信息通常已经过期，这样会导致明显的位置漂移，因为客户端收到的修正信息是过去某个时间的。",{"type":14,"tag":23,"props":213,"children":214},{},[215],{"type":20,"value":216},"为了使客户端运动预测有效，我们采用以下方法：还是客户端采样并生成命令发送到服务器，但是每个包含生成时间的命令在客户端本地存起来并在预测算法中使用。",{"type":14,"tag":23,"props":218,"children":219},{},[220],{"type":20,"value":221},"预测的过程中，我们把服务器确认的移动信息作为开始，这样客户端就可以确定服务器执行上次命令以后游戏中玩家的准确信息（比如位置）。如果网络有延迟，这个确认命令也会有一定延迟。假设客户端运行帧率为50fps，网络延时为100ms，这样在客户端收到服务器的确认命令的时候，本地命令队列中已经有5条信息，这5条信息被用来执行客户端预测。假设执行完全预测【1】客户端在收到来自服务器的最新信息后，就开始按照与服务器相同的逻辑执行本地消息队列中的5个命令。这些命令执行以后得到当前状态（最重要的是位置），然后根据玩家的状态信息渲染当前帧。",{"type":14,"tag":23,"props":223,"children":224},{},[225],{"type":20,"value":226},"在半条命这个游戏中，客户端跟服务器采用相同的代码来计算移动，这样可以减小客户端预测跟服务器之间的误差。这些代码位于HLSDK中的pm_shared/（意思是“player movement shared”）。这段代码的输入是玩家操作和客户端的初始状态，输出是玩家操作以后的状态。客户端算法大致如下：",{"type":14,"tag":174,"props":228,"children":230},{"code":229},"\"from state\" \u003C- state after last user command acknowledged by the server;\n\n\"command\" \u003C- first command after last user command acknowledged by server;\n\nwhile (true)\n{\n    run \"command\" on \"from state\" to generate \"to state\";\n    if (this was the most up to date \"command\")\n    break;\n\n    \"from state\" = \"to state\";\n    \"command\" = next \"command\";\n};\n",[231],{"type":14,"tag":182,"props":232,"children":233},{"__ignoreMap":7},[234],{"type":20,"value":229},{"type":14,"tag":23,"props":236,"children":237},{},[238],{"type":20,"value":239},"玩家的初始状态和预测结果用来渲染场景。命令的执行过程就是：将玩家状态复制到共享数据结构中，执行玩家操作（执行hlsdk中pm_shared中的共用代码），然后将结果复制到目标状态（to state）",{"type":14,"tag":23,"props":241,"children":242},{},[243],{"type":20,"value":244},"这个系统中有几个需要注意的地方，首先，由于网络延迟，客户端又在不停地以一定速度（客户端帧率）生成命令，一个命令通常会被客户端多次执行，知道得到服务器的确定以后将其从命令列表中删除（这就是半条命中的滑动窗口）。首先要考虑的是如何处理共享代码中生成的声效和动画效果。因为命令可能会被多次执行，预测位置的过程被多次执行的时候要注意避免重声等不正确的效果。另外，服务器也要避免客户端意见预测的效果。然而，客户端必须重新运行旧的命令，否则就没法根据服务器来纠正客户端的预测错误。解决方法很简单：客户端将没有执行的客户端命令进行标记，如果这些命令在客户端第一次执行，则播放相应的效果。",{"type":14,"tag":23,"props":246,"children":247},{},[248],{"type":20,"value":249},"另外需要注意的是服务器不处理，只有客户端才有的一些数据；如果没有这种类型的数据，我们可以如上面所述，以服务器第一条消息作为起点进行预测得到下一帧状态（包括用来渲染的位置信息）。然而，如果有些逻辑是纯客户端的，服务器不会处理（比如玩家蹲下来眼睛的位置-然而这也不是纯客户端信息，因为服务器也会处理这个数据），这种情况下我们需要将预测的中间结果存起来。可以用一个滑动窗口完成这项工作，其中“开始状态”是开始，以后每次执行一个玩家命令预测完成后，填写窗口中的下一个状态；当服务器通知某个命令被接受并执行以后，从窗口中查找服务器处理的是哪条命令并将相应的数据传到下一个帧的“起始状态”",{"type":14,"tag":23,"props":251,"children":252},{},[253],{"type":20,"value":254},"到此为止，我们描述了客户端的运动预测。quakeworld2中采用了这种类型的预测",{"type":14,"tag":15,"props":256,"children":258},{"id":257},"_5开火过程中的客户端预测",[259],{"type":20,"value":260},"5.开火过程中的客户端预测",{"type":14,"tag":23,"props":262,"children":263},{},[264],{"type":20,"value":265},"上面描述的系统可以很自然地用于武器开火效果预测。客户端玩家需要记录一些状态，比如身上有哪些武器，正在使用的是哪一个，每把武器都还剩多少弹药。有了这些信息，开火逻辑可以建立在运动逻辑上面，只需要在客户端和服务器使用的命令里面加上玩家开火的按键信息。在半条命中，为了简单，武器开火逻辑代码也跟运动代码一样也作为“共享代码”。所有会影响到武器状态的变量，比如弹药、下次可开火时间、正在播放那个武器动画，都作为服务器的状态，这些状态会通知给客户端用来预测武器状态。",{"type":14,"tag":23,"props":267,"children":268},{},[269],{"type":20,"value":270},"客户端武器开火预测包括预测武器切换、部署、手枪皮套。这样，玩家会感觉游戏中的移动和武器状态100%受他控制。这在减小网络延迟给玩家带来的不爽上面迈出了一大步。",{"type":14,"tag":15,"props":272,"children":274},{"id":273},"_6一些工作",[275],{"type":20,"value":276},"6.一些工作",{"type":14,"tag":23,"props":278,"children":279},{},[280],{"type":20,"value":281},"服务器需要将必要的字段发给客户端，并且处理很多中间状态，有人可能有这样的疑问，为什么不把服务器逻辑取消，让客户端广播自己的位置，也就是将所有的移动、开火逻辑放在客户端。这样，客户端就会给服务器发送类似这样的结果报告：“我在X位置，我爆了玩家2的脑袋”。如果客户端可信的话，这样做是可以的，很多军方仿真系统就是这样做的（他们是一个封闭系统，所有客户端都可信）。点对点的游戏也是这么做的。对于半条命来说不可以这样做，因为客户端可能“欺骗”服务器。如果我们以这种方法封装状态数据，就会诱导玩家破解客户端【3】。对于我们的游戏来说这样做奉献太大，我们还是选择采用服务器模式来做校验。",{"type":14,"tag":23,"props":283,"children":284},{},[285],{"type":20,"value":286},"客户端进行运动和武器效果预测是非常可行的。例如quake3就支持这样的预测。这个系统需要注意一点，在判断目标的时候需要考虑到延迟（比如即时射击武器）。换句话说，虽然你看到自己用\\即时\\武器进行了射击，你自己的位置也是最新的，射击结果仍然跟延迟有关。例如，如果你射击一个玩家，这个玩家沿与你实现垂直的方向奔跑，假设你客户端延迟为100ms，玩家奔跑速度是500单位每秒，这样你需要瞄准玩家前方50单位才能准确击中。延迟越大，就需要更大的提前量。靠感觉弥补延迟太困难了。为了减轻这种效果，quake3对你的射击播放一个短音来进行确定。这样，玩家可以算出快速发射武器的时候需要多大的提前量，同时调整提前量直到听到稳定的音调串。如果延迟比较大，而你的对手又在不断躲避，就很难获得足够的反馈判断。如果延迟也不断变化，就更难了。",{"type":14,"tag":15,"props":288,"children":290},{"id":289},"_7目标的显示",[291],{"type":20,"value":292},"7.目标的显示",{"type":14,"tag":23,"props":294,"children":295},{},[296],{"type":20,"value":297},"影响玩家游戏体验的另一个重要方面是客户端如何渲染其它玩家。两种基本的判断机制是：外推法和内插法【4】",{"type":14,"tag":23,"props":299,"children":300},{},[301],{"type":20,"value":302},"外推法把其它玩家/物体看作一个点，这个点开始的位置、方向、速度已知，沿着自己的弹道向前移动。因此，假设延时是100ms，最新的协议通知客户端这个玩家奔跑速度是500单位每秒，方向垂直于玩家视线，客户端就可以假设事实上这个玩家当前实际的位置已经向前移动了50个单位。客户端可以在这个外推的位置渲染这个玩家，这样本地玩家就差不多可以正确瞄准。",{"type":14,"tag":23,"props":304,"children":305},{},[306],{"type":20,"value":307},"外推法的最大缺点是玩家的移动并不是完全弹道的，而是不确定的并且高\"jerk\"【5】。大部分FPS游戏采用非现实的玩家系统，玩家可以随时转弯，可以在任意角度作用不现实的加速度，因此外推法得到的结果经常是错误地。开发者可以通过限制外推时间来减轻外推误差（比如quake限制不能超过100ms）。这种限制使得在客户端收到玩家正确位置以后，纠错不至于太大。当前大部分玩家的网络延迟高于150ms，玩家必须对游戏中的其他玩家进行外推以便正确击中。如果别的玩家因为外推错误，被服务器拉回，游戏体验将非常差。",{"type":14,"tag":23,"props":309,"children":310},{},[311],{"type":20,"value":312},"另一种方法叫插值法。插值法可以这样理解：客户端物体实际移动位置总是滞后一段时间。举个例子，如果服务器每秒同步10次世界信息，客户端渲染的时候会有100ms滞后。这样，每一帧渲染的时候，我们通过最新收到的位置信息和前100ms的位置信息（或者上一帧渲染位置）进行差值得到结果。我们每收到一个物体位置的更新信息，（每秒10个更新意味着每100ms收到一个更新）接下来的100ms我们就可以朝这个新的位置移动。",{"type":14,"tag":23,"props":314,"children":315},{},[316],{"type":20,"value":317},"如果一个更新包没有收到，有2种处理方法：第一、用上面介绍的外推法（有可能产生较大误差）；第二、保持玩家位于当前位置直到收到下一个更新包（会导致玩家移动顿挫）",{"type":14,"tag":23,"props":319,"children":320},{},[321],{"type":20,"value":322},"内插法的大致过程如下：",{"type":14,"tag":68,"props":324,"children":325},{},[326,331,336,341],{"type":14,"tag":72,"props":327,"children":328},{},[329],{"type":20,"value":330},"每个更新包包含生成的服务器时间戳【6】",{"type":14,"tag":72,"props":332,"children":333},{},[334],{"type":20,"value":335},"根据客户端当前时间，客户端通过减去时间差（100ms）计算 一个目标时间",{"type":14,"tag":72,"props":337,"children":338},{},[339],{"type":20,"value":340},"如果计算得到的目标时间在上一个更新时间和上上个更新时间之间，这些时间戳可以决定目标时间在过去的时间间隙中的情况",{"type":14,"tag":72,"props":342,"children":343},{},[344],{"type":20,"value":345},"目标时间情况用来通过插值计算结果（如位置、角度）",{"type":14,"tag":23,"props":347,"children":348},{},[349],{"type":20,"value":350},"上面提到的插值法，本质上是客户端缓存了接下来100ms的数据。对于每一个周围的玩家，他们都位于过去某个时间的位置，根据每一个具体的时间点进行插值。如果偶尔发生丢包，我们就将插值时间延长到200ms。这样我们就可以忽略一次更新（假设同步频率还是10次每秒），玩家还可以移动到合理的目标位置，这样进行插值通常不会有什么问题。当然，插值多少时间需要权衡，因为这种方法是用延时（玩家更难击中）来换取平滑。",{"type":14,"tag":23,"props":352,"children":353},{},[354],{"type":20,"value":355},"另外，上述插值方法（客户端通过2个更新信息插值并且朝最新更新位置移动）需要服务器更新信息间隔固定。对于所谓的“视觉效果因素”，这种方式很难处理，“视觉效果因素”是这样的：假设我们插值的物体是弹球（这种模型可以准确描述某些玩家）。极端情况下，球或者在空中，或者正在碰地板。然而，通常情况下球在这两种状态之间。如果我们只插值上一个位置，这个位置可能既不在地面上，也不是最高点，这样，弹球弹的效果就被平滑掉了，好像永远没有弹到地面一样。这是一个经典问题，增加采样率可以减轻这种影响，但是仍然有可能我们采样不到球在地面的点跟最高点，这些点会给平滑掉。",{"type":14,"tag":23,"props":357,"children":358},{},[359],{"type":20,"value":360},"另外，不同用户网络状况不同，强迫每个用户都以固定速度更新（比如每秒10次）效果不是很好，在半条命中，用户每秒可以请求任意数量的更新包（没有限制）。这样，高速网络用户可以每秒更新50次，只要用户愿意。半条命的默认设置是每秒每个用户（以及游戏中其它物体）发送20次更新，以100ms为时间窗口进行插值。【7】",{"type":14,"tag":23,"props":362,"children":363},{},[364],{"type":20,"value":365},"为了避免“反弹球\"平滑问题，我们在插值的过程中采用了一个不同的算法，这种算法中我们对每一个可能插值的物体记录了一个完整的“历史位置”信息。",{"type":14,"tag":23,"props":367,"children":368},{},[369],{"type":20,"value":370},"历史位置信息记录了物体的时间戳、远点、角度（以及其它我们需要插值计算的数据）。我们每收到一个服务器的更新，我们就创建一条包含时间戳的记录，其中包含原始位置、角度信息。在插值过程中，我们用上面的方法计算目标时间，然后搜索位置历史信息，找到包含目标时间的记录区间。然后用找到的信息插值计算当前帧的位置。这样我们就可以平滑跟踪到包含所有采样点的曲线。如果客户端帧率比服务器更新频率大，我们就可以将采样点平滑处理，减小上面提到的平滑处理带来的问题（当然没法避免，因为采用频率限制，而世界本身是连续的）。",{"type":14,"tag":23,"props":372,"children":373},{},[374],{"type":20,"value":375},"需要注意的是，上面提到的插值方法使用的时候，物体有时候会被服务器拉回，而不是快速移动。当然我们也可以平滑地将物体移动一段较长的距离，这样看起来物体移动很快。更新的过程中我们可以设一个标志表示不插值或清除历史记录，或者如果起始点与目标点距离过长，我们就认为数据不正常。这种情况我们就将物体直接拉过去。并以这个位置为起始点进行插值。",{"type":14,"tag":15,"props":377,"children":379},{"id":378},"_8延迟补偿",[380],{"type":20,"value":381},"8.延迟补偿",{"type":14,"tag":23,"props":383,"children":384},{},[385],{"type":20,"value":386},"插值也会带来延迟，所以考虑延迟补偿的过程中需要理解插值过程。玩家看到的别的物体是经过插值计算出来的，所以插值过程中需要考虑在服务器上玩家的目标是否正确。",{"type":14,"tag":23,"props":388,"children":389},{},[390],{"type":20,"value":391},"延迟补偿是服务器执行的一种策略，当服务器收到客户端命令并执行的过程中，根据客户端的具体情况进行归一。延迟补偿可以看做服务器处理用户命令的时候回退一段时间，退到客户端发送命令时候的准确时间。算法流程如下：",{"type":14,"tag":68,"props":393,"children":394},{},[395,418,423],{"type":14,"tag":72,"props":396,"children":397},{},[398,400],{"type":20,"value":399},"服务器执行客户端命令之前执行以下操作：",{"type":14,"tag":68,"props":401,"children":402},{},[403,408,413],{"type":14,"tag":72,"props":404,"children":405},{},[406],{"type":20,"value":407},"计算玩家正确的延迟",{"type":14,"tag":72,"props":409,"children":410},{},[411],{"type":20,"value":412},"对每个玩家，从服务器历史信息中找到发送给玩家信息和收到玩家响应的信息。",{"type":14,"tag":72,"props":414,"children":415},{},[416],{"type":20,"value":417},"对于每一个玩家，将其拉回到这个更新时间（插值得到的精确时间）中执行用户命令。这个回退时间需要考虑到命令执行的时候的网络延时和插值量【8】",{"type":14,"tag":72,"props":419,"children":420},{},[421],{"type":20,"value":422},"执行玩家命令（包括武器开火等。）",{"type":14,"tag":72,"props":424,"children":425},{},[426],{"type":20,"value":427},"将所有移动的、错位的玩家移动到他们当前正确位置。",{"type":14,"tag":23,"props":429,"children":430},{},[431],{"type":20,"value":432},"注意：我们把时间往后推算的时候，需要考虑那个时候玩家的状态，比如玩家是或者还是已经已经死掉，玩家是否处于躲避状态。执行运动补偿以后，玩家就可以直接瞄准目标进行设计，而不需要计算一个提前量。当然，这种方案是游戏中的权衡设计。",{"type":14,"tag":15,"props":434,"children":436},{"id":435},"_9游戏涉及中延迟补偿的使用",[437],{"type":20,"value":438},"9.游戏涉及中延迟补偿的使用",{"type":14,"tag":23,"props":440,"children":441},{},[442],{"type":20,"value":443},"采用延迟补偿以后，每个玩家游戏的过程中感觉不到明显延迟。在这里需要理解可能会产生一些矛盾和不一致。当然，验证服务器和无逻辑的客户端老系统也会有自相矛盾的情况。最后，这个这种事游戏设计决定的。对于半条命，我们相信采用延迟补偿是正确的游戏决定。",{"type":14,"tag":23,"props":445,"children":446},{},[447],{"type":20,"value":448},"老系统的一个问题是，由于网络延迟，目标需要有一个提前量。瞄准敌人进行射击几乎总是不能击中。这种不一致导致射击很不真实，响应也不可控制。",{"type":14,"tag":23,"props":450,"children":451},{},[452],{"type":20,"value":453},"采用延迟补偿以后带来的是另一种形式的不一致。对于大部分玩家，他们只需要专注于得到更多的射击技能来武装他们（当然他们也是需要瞄准的）。延时补偿使得玩家只需要直接瞄准他的目标并按下开火按钮即可（对于即时击中武器【9】）。不一致也时有发生，但是是在击中以后。",{"type":14,"tag":23,"props":455,"children":456},{},[457],{"type":20,"value":458},"例如，如果一个延时比较大的玩家击中一个延时比较小的玩家并且得到一分，低延时的玩家会感觉高延时玩家“在角落里被击中”【10】。这种情况下，低延迟玩家可能已经从角落里冲出，而高延时玩家看到的是过去的信息。每一个有延迟的玩家都有一个朝向别的玩家的直的视线，直的视线指向一个瞄准点然后开火。这个时候，低延时的玩家可能已经跑到角落里并且蹲在一个箱子后面，如果高延迟玩家延迟比较大，比如500ms，这是经常发生的；这样当高延时玩家的命令传到服务器的时候，已经隐藏起来的玩家需要取一个历史位置并计算是否击中，在这种极端情况下，低延时玩家会觉得他再角落里被击中了。然而，对于高延时玩家来说，他是正对着别的玩家开火的。从游戏设计的角度来讲，我们需要这样决定：让每个玩家即时与世界交互并开火。",{"type":14,"tag":23,"props":460,"children":461},{},[462],{"type":20,"value":463},"此外，在正常战斗中，上面提到的不一致并不明显。对于第一人称射击游戏，有两种典型情况。第一、考虑两个玩家直线跑向对方并且开火；这种情况下，延时补偿只会把玩家在移动直线上往后拉。被击中的玩家看他的射击者在前方，这样就不会有“子弹拐到角落里”的情况发生。",{"type":14,"tag":23,"props":465,"children":466},{},[467],{"type":20,"value":468},"第二种情况是两个玩家中的一个射击，另外一个玩家在垂直于第一个玩家视线的方向冲锋。这种情况下的解决问题的原理与刚才不同。刚才提到的冲锋的玩家视野差不多是90°（至少第一人称射击游戏是这样），因此，这个玩家看不到正在射击他的那个人。因此他被击中也不会感觉奇怪或者错误（谁让你在空旷区域狂奔呢，活该）。当然，如果你开发的是一个坦克游戏，或者在你的游戏中玩家朝一个方向跑的时候可以看到别的方向，错误可能就会比较明显，你可能发现玩家设计方向不对。",{"type":14,"tag":15,"props":470,"children":472},{"id":471},"_10总结",[473],{"type":20,"value":474},"10.总结",{"type":14,"tag":23,"props":476,"children":477},{},[478],{"type":20,"value":479},"延迟补偿是当前动作游戏改善延迟影响的一种方法。是否采用这种方法取决于游戏设计者，因为如何设计直接影响到游戏的体验。对于把那条命、军团要塞、cs这样的游戏，延迟补偿所带来的效果提升显著大于其带来的错误。",{"type":14,"tag":15,"props":481,"children":483},{"id":482},"脚注",[484],{"type":20,"value":482},{"type":14,"tag":23,"props":486,"children":487},{},[488],{"type":20,"value":489},"【1】在半条命引擎中，预测的过程中允许一定的延迟，但不能容忍实际网络延迟这么大的延迟。通过调整参数，我们可以控制预测过程中的延迟，这个参数pushlatency是一个负数，以毫秒为单位表示预测过程中的延迟。如果这个值大于（绝对值）实际网络延迟，这时预测就是完全的预测（译注：客户端服务器完全同步）。这种情况下玩家感觉不到任何延迟。实际应用中，一些人错误地认为参数pushlatency应该设为实际网络延迟的一半，这种情况下玩家移动仍然有网络延迟一半的延迟（感觉类似于冰面移动）。基于这个原因，实际应用总应该总是采用完全预测，pushlatency这个变量应该从半条命引擎中移除",{"type":14,"tag":23,"props":491,"children":492},{},[493,495,503],{"type":20,"value":494},"【2】",{"type":14,"tag":496,"props":497,"children":501},"a",{"href":498,"rel":499},"http://www.quakeforge.net/files/q1source.zip",[500],"nofollow",[502],{"type":20,"value":498},{"type":20,"value":504}," (Return)",{"type":14,"tag":23,"props":506,"children":507},{},[508],{"type":20,"value":509},"【3】关于作弊和反作弊的问题超出了本篇文章讨论的范围",{"type":14,"tag":23,"props":511,"children":512},{},[513],{"type":20,"value":514},"【4】虽然混合纠正方法也可以使用",{"type":14,"tag":23,"props":516,"children":517},{},[518],{"type":20,"value":519},"【5】“jerk”用来度量使玩家改变加速度的作用的快慢",{"type":14,"tag":23,"props":521,"children":522},{},[523],{"type":20,"value":524},"【6】本文假设计算连接延时的时候客户端与服务器完全同步，也就是说，每次更新的时候客户端收到服务器发过来的时间被直接当做客户端的时间使用。这样，客户端跟服务器完全匹配，只是客户端稍微晚一点（晚多少取决于延时多少）。平滑客户端时钟差值可以有很多方法。",{"type":14,"tag":23,"props":526,"children":527},{},[528],{"type":20,"value":529},"【7】更新时间间隔没必要是固定的。因为对于剧烈运动的游戏，如果带宽不够，很有可能客户端发过来的数据超过了处理能力。如果采用固定更新间隔，在发完一个更新包以后就需要等待一个固定更新周期时间以后再发下一个包。这种逻辑不能很好地使用带宽。因此，服务器发给每个客户端数据包以后，应该自己决定下一个包什么时候发，决定的依据是用户的带宽、用户设置的每秒更新频率。如果用户要求更新20次每秒，那么需要等待50ms以后下个更新包才能发送。如果激活了带宽限制（而服务器帧率又足够高），我们可能就需要等待比如61ms（或其他值）以后发送下一个更新包。因此，半条命游戏数据包发送间隔是随机的。基于服务器的这种情况，将启动点作为一个变量，移动到最新目标点进行插值这种方法效果欠佳。",{"type":14,"tag":23,"props":531,"children":532},{},[533],{"type":20,"value":534},"【8】半条命代码中usercmd_t结构中变量lerp_msec前面描述过。",{"type":14,"tag":23,"props":536,"children":537},{},[538],{"type":20,"value":539},"【9】对于发射导弹的武器，延迟补偿有更多需要解决的问题。假如\\导弹是由服务器处理的，那么导弹应该位于哪个时间区间？每次导弹准备发射的时候，是否需要把每个玩家往后拉一段时间的？如果是这样，那么需要往后拉多少？这些问题是需要考虑的。在半条命中，为了避免这种问题，我们对导弹不进行延迟补偿（这并不意味着客户端不进行声音预测，只是实际的导弹不进行延迟补偿）。",{"type":14,"tag":23,"props":541,"children":542},{},[543],{"type":20,"value":544},"【10】用户社区通常采用这种情况来描述不一致性。",{"type":14,"tag":546,"props":547,"children":548},"ul",{},[549],{"type":14,"tag":72,"props":550,"children":551},{},[552],{"type":14,"tag":496,"props":553,"children":556},{"href":554,"rel":555},"https://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization",[500],[557],{"type":20,"value":554},{"title":7,"searchDepth":559,"depth":559,"links":560},2,[],"markdown","content:dotnet:2020-02-02-Latency_Compensating_Methods_in_ClientServer_In-game_Protocol_Design_and_Optimization.md","content","dotnet/2020-02-02-Latency_Compensating_Methods_in_ClientServer_In-game_Protocol_Design_and_Optimization.md","md","2020-02-02",[568,578,703,752,804,817,929],{"title":569,"_path":570,"children":571},"Art","/art",[572,575],{"title":573,"_path":574},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":576,"_path":577},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":579,"_path":580,"children":581},"Dotnet","/dotnet",[582,585,588,591,594,597,600,603,606,609,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694,697,700],{"title":583,"_path":584},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":586,"_path":587},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":589,"_path":590},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":592,"_path":593},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":595,"_path":596},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":598,"_path":599},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":601,"_path":602},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":604,"_path":605},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":607,"_path":608},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":8,"_path":4},{"title":611,"_path":612},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":614,"_path":615},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":617,"_path":618},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":620,"_path":621},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":623,"_path":624},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":626,"_path":627},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":629,"_path":630},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":632,"_path":633},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":635,"_path":636},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":638,"_path":639},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":641,"_path":642},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":644,"_path":645},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":647,"_path":648},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":650,"_path":651},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":653,"_path":654},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":656,"_path":657},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":659,"_path":660},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":662,"_path":663},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":665,"_path":666},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":668,"_path":669},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":671,"_path":672},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":674,"_path":675},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":677,"_path":678},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":680,"_path":681},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":683,"_path":684},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":686,"_path":687},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":689,"_path":690},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":692,"_path":693},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":695,"_path":696},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":698,"_path":699},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":701,"_path":702},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":704,"_path":705,"children":706},"Game","/game",[707,710,713,716,719,722,725,728,731,734,737,740,743,746,749],{"title":708,"_path":709},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":711,"_path":712},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":714,"_path":715},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":717,"_path":718},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":720,"_path":721},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":723,"_path":724},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":726,"_path":727},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":729,"_path":730},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":732,"_path":733},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":735,"_path":736},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":738,"_path":739},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":741,"_path":742},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":744,"_path":745},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":747,"_path":748},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":750,"_path":751},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":753,"_path":754,"children":755},"Gyj","/gyj",[756,759,762,765,768,771,774,777,780,783,786,789,792,795,798,801],{"title":757,"_path":758},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":760,"_path":761},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":763,"_path":764},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":766,"_path":767},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":769,"_path":770},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":772,"_path":773},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":775,"_path":776},"玩法","/gyj/2022-08-22-wanfa",{"title":778,"_path":779},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":781,"_path":782},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":784,"_path":785},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":787,"_path":788},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":790,"_path":791},"门派内容相关","/gyj/2022-11-17-sect",{"title":793,"_path":794},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":796,"_path":797},"种植","/gyj/2022-12-01-zhongzhi",{"title":799,"_path":800},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":802,"_path":803},"跑商","/gyj/2023-11-01-paoshang",{"title":805,"_path":806,"children":807},"Js","/js",[808,811,814],{"title":809,"_path":810},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":812,"_path":813},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":815,"_path":816},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":818,"_path":819,"children":820},"Tool","/tool",[821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,896,899,902,905,908,911,914,917,920,923,926],{"title":822,"_path":823},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":825,"_path":826},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":828,"_path":829},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":831,"_path":832},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":834,"_path":835},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":837,"_path":838},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":840,"_path":841},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":843,"_path":844},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":846,"_path":847},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":849,"_path":850},"mac下brew 使用","/tool/2020-01-13-brew",{"title":852,"_path":853},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":855,"_path":856},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":858,"_path":859},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":861,"_path":862},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":864,"_path":865},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":867,"_path":868},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":870,"_path":871},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":873,"_path":874},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":876,"_path":877},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":879,"_path":880},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":882,"_path":883},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":885,"_path":886},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":888,"_path":889},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":891,"_path":892},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":894,"_path":895},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":897,"_path":898},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":900,"_path":901},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":903,"_path":904},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":906,"_path":907},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":909,"_path":910},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":912,"_path":913},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":915,"_path":916},"rider的使用","/tool/2022-08-02-rider-use",{"title":918,"_path":919},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":921,"_path":922},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":924,"_path":925},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":927,"_path":928},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":930,"_path":931,"children":932},"Unity","/unity",[933,936,939,942,945,948,951,954,957,960,963,966,969,972,975,978,981,984,987,990,993,996,999,1002,1005,1008,1011,1014,1017,1020,1023,1026,1029,1032,1035,1038,1041,1044,1047,1050,1053,1056,1059,1062,1065,1068,1071,1074,1077,1080,1083,1086,1089,1092,1095,1098,1101,1104,1107,1110,1113,1116,1119,1122,1125,1128,1131,1134,1137,1140,1143,1146],{"title":934,"_path":935},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":937,"_path":938},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":940,"_path":941},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":943,"_path":944},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":946,"_path":947},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":949,"_path":950},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":952,"_path":953},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":955,"_path":956},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":958,"_path":959},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":961,"_path":962},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":964,"_path":965},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":967,"_path":968},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":970,"_path":971},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":973,"_path":974},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":976,"_path":977},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":979,"_path":980},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":982,"_path":983},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":985,"_path":986},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":988,"_path":989},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":991,"_path":992},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":994,"_path":995},"技能系统","/unity/2020-02-15-skill-system",{"title":997,"_path":998},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1000,"_path":1001},"角色状态设计","/unity/2020-02-17-character-states",{"title":1003,"_path":1004},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1006,"_path":1007},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1009,"_path":1010},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1012,"_path":1013},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1015,"_path":1016},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1018,"_path":1019},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1021,"_path":1022},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1024,"_path":1025},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1027,"_path":1028},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1030,"_path":1031},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1033,"_path":1034},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1036,"_path":1037},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1039,"_path":1040},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1042,"_path":1043},"unity的addressables","/unity/2020-09-12-addressables",{"title":1045,"_path":1046},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1048,"_path":1049},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1051,"_path":1052},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1054,"_path":1055},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1057,"_path":1058},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1060,"_path":1061},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1063,"_path":1064},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1066,"_path":1067},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1069,"_path":1070},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1072,"_path":1073},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1075,"_path":1076},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1078,"_path":1079},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1081,"_path":1082},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1084,"_path":1085},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1087,"_path":1088},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1090,"_path":1091},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1093,"_path":1094},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1096,"_path":1097},"ability","/unity/2020-11-16-dotssample",{"title":1099,"_path":1100},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1102,"_path":1103},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1105,"_path":1106},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1108,"_path":1109},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1111,"_path":1112},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1114,"_path":1115},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1117,"_path":1118},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1120,"_path":1121},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1123,"_path":1124},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1126,"_path":1127},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1129,"_path":1130},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1132,"_path":1133},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1135,"_path":1136},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1138,"_path":1139},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1141,"_path":1142},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1144,"_path":1145},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1147,"_path":1148},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040959]