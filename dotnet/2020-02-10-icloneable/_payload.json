[{"data":1,"prerenderedAt":898},["Reactive",2],{"content-query-X9Je30aVDl":3,"content-navigation-8C37fagqQL":316},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":310,"_id":311,"_source":312,"_file":313,"_extension":314,"date":315},"/dotnet/2020-02-10-icloneable","dotnet",false,"","C# 深浅复制","关于深浅复制大家可参考MSDN：https://msdn.microsoft.com/zh-cn/library/system.object.memberwiseclone.aspx",{"type":11,"children":12,"toc":303},"root",[13,29,34,39,44,55,62,67,77,82,87,92,97,105,110,118,128,133,141,149,154,162,170,175,183,191,199,204,212,217,226,234,242,247,255,265,276,284,289,295],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18,21],{"type":19,"value":20},"text","关于深浅复制大家可参考MSDN：",{"type":14,"tag":22,"props":23,"children":27},"a",{"href":24,"rel":25},"https://msdn.microsoft.com/zh-cn/library/system.object.memberwiseclone.aspx",[26],"nofollow",[28],{"type":19,"value":24},{"type":14,"tag":15,"props":30,"children":31},{},[32],{"type":19,"value":33},"所谓深浅复制可解读为：",{"type":14,"tag":15,"props":35,"children":36},{},[37],{"type":19,"value":38},"浅复制：C#语言种的MemberwiseClone方法仅仅是再内存种创建一个新对象，然后将原有对象的所有字段直接复制过去，无论是值类型还是引用类型，是值类型的就复制值类型，是应用类型的就复制引用本身（而不会复制所引用的对象），因此，是浅拷贝。",{"type":14,"tag":15,"props":40,"children":41},{},[42],{"type":19,"value":43},"需要注意的是:  在利用MemberwiseClone()创建新对象的时候，不会像利用new的时候一样，也就是不会先执行字段的创建和构造方法条用的过程。",{"type":14,"tag":15,"props":45,"children":46},{},[47,49],{"type":19,"value":48},"深复制：如果字段是值类型的，则对字段执行逐位复制，如果字段是引用类型的，则把引用类型的对象指向",{"type":14,"tag":50,"props":51,"children":52},"strong",{},[53],{"type":19,"value":54},"一个全新的对象！",{"type":14,"tag":56,"props":57,"children":59},"h2",{"id":58},"icloneable接口",[60],{"type":19,"value":61},"ICloneable接口",{"type":14,"tag":15,"props":63,"children":64},{},[65],{"type":19,"value":66},"ICloneable接口包含一个Clone方法，可以用来创建当前对象的拷贝。",{"type":14,"tag":68,"props":69,"children":71},"pre",{"code":70},"public interface ICloneable \n{ \n    object Clone(); \n}\n",[72],{"type":14,"tag":73,"props":74,"children":75},"code",{"__ignoreMap":7},[76],{"type":19,"value":70},{"type":14,"tag":15,"props":78,"children":79},{},[80],{"type":19,"value":81},"ICloneable的问题是Clone方法并不会显式地指定是执行浅拷贝或深拷贝，因此调用者将无法确定实际情况。因此，有一些关于把ICloneable从.NET框架中淘汰的讨论。MSDN文档似乎暗示Clone方法是进行的深拷贝，但是文档没有明确的说明：",{"type":14,"tag":15,"props":83,"children":84},{},[85],{"type":19,"value":86},"ICloneable接口包含一个成员方法，Clone，意在支持超过MemberWiseClone所提供的功能... MemberWiseClone进行的是浅拷贝...",{"type":14,"tag":15,"props":88,"children":89},{},[90],{"type":19,"value":91},"类型安全的克隆",{"type":14,"tag":15,"props":93,"children":94},{},[95],{"type":19,"value":96},"ICloneable的另一个缺点是Clone方法返回的是一个对象，因此每次调用Clone都要进行一次强制类型转换。",{"type":14,"tag":68,"props":98,"children":100},{"code":99},"Person joe = new Person(); \njoe.Name = \"Joe Smith\"; \nPerson joeClone = (Person)joe.Clone();\n",[101],{"type":14,"tag":73,"props":102,"children":103},{"__ignoreMap":7},[104],{"type":19,"value":99},{"type":14,"tag":15,"props":106,"children":107},{},[108],{"type":19,"value":109},"一种可以避免进行强制类型转换的方式是提供你自己的类型安全的Clone方法。注意，你依然要提供ICloneable.Clone方法的以满足iCloneable接口的要求。",{"type":14,"tag":68,"props":111,"children":113},{"code":112},"public class Person : ICloneable \n{ \n    public string Name; \n    object ICloneable.Clone() \n    { \n        return this.Clone(); \n    } \n    public Person Clone() \n    { \n        return (Person)this.MemberwiseClone(); \n    } \n}\n",[114],{"type":14,"tag":73,"props":115,"children":116},{"__ignoreMap":7},[117],{"type":19,"value":112},{"type":14,"tag":119,"props":120,"children":121},"ol",{},[122],{"type":14,"tag":123,"props":124,"children":125},"li",{},[126],{"type":19,"value":127},"手工克隆",{"type":14,"tag":15,"props":129,"children":130},{},[131],{"type":19,"value":132},"一个能够保证对象完全按照你所想的那样进行克隆的方式是手工克隆对象的每一个域（field）。这种方式的缺点是麻烦而且容易出错：如果你在类中增 加了一个域，你很可能会忘记更新Clone方法。还要在克隆引用对象指向原始对象的时候，注意避免无限循环引用。下面是一个进行深拷贝的简单例子：",{"type":14,"tag":68,"props":134,"children":136},{"code":135},"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        Person p = new Person(); \n        p.Name = this.Name; \n        if (this.Spouse != null) \n            p.Spouse = (Person)this.Spouse.Clone(); \n        return p; \n    } \n}\n",[137],{"type":14,"tag":73,"props":138,"children":139},{"__ignoreMap":7},[140],{"type":19,"value":135},{"type":14,"tag":119,"props":142,"children":143},{},[144],{"type":14,"tag":123,"props":145,"children":146},{},[147],{"type":19,"value":148},"使用MemberWiseClone方法",{"type":14,"tag":15,"props":150,"children":151},{},[152],{"type":19,"value":153},"MemberWiseClone是Object类的受保护方法，能够通过创建一个新对象，并把所有当前对象中的非静态域复制到新对象中，从而创建一 个浅拷贝。对于值类型的域，进行的是按位拷贝。对于引用类型的域，引用会被赋值而引用的对象则不会。因此，原始对象及其克隆都会引用同一个对象。注意，这 种方法对派生类都是有效的，也就是说，你只需在基类中定义一次Clone方法。下面是一个简单的例子：",{"type":14,"tag":68,"props":155,"children":157},{"code":156},"public class Person : ICloneable \n{ \n    public string Name; \n    public Person Spouse; \n    public object Clone() \n    { \n        return this.MemberwiseClone(); \n    } \n}\n",[158],{"type":14,"tag":73,"props":159,"children":160},{"__ignoreMap":7},[161],{"type":19,"value":156},{"type":14,"tag":119,"props":163,"children":164},{},[165],{"type":14,"tag":123,"props":166,"children":167},{},[168],{"type":19,"value":169},"用反射进行克隆",{"type":14,"tag":15,"props":171,"children":172},{},[173],{"type":19,"value":174},"用反射进行克隆是使用Activator.CreateInstance方法来创建一个相同类型的新对象，然后用反射对所有域进行浅拷贝。这种方法 的优点是它是全自动的，不需要在对象中添加或删除成员的时候修改克隆方法。另外它也能被写成提供深拷贝的方法。缺点是使用了反射，因此会比较慢，而且在部 分受信任的环境中是不可用的。示例代码",{"type":14,"tag":68,"props":176,"children":178},{"code":177},"private static TOut TransReflection\u003CTIn, TOut>(TIn tIn)\n        {\n            TOut tOut = Activator.CreateInstance\u003CTOut>();\n            var tInType = tIn.GetType();\n            foreach (var itemOut in tOut.GetType().GetProperties())\n            {\n                var itemIn = tInType.GetProperty(itemOut.Name); ;\n                if (itemIn != null)\n                {\n                    itemOut.SetValue(tOut, itemIn.GetValue(tIn));\n                }\n            }\n            return tOut;\n        }\n",[179],{"type":14,"tag":73,"props":180,"children":181},{"__ignoreMap":7},[182],{"type":19,"value":177},{"type":14,"tag":15,"props":184,"children":185},{},[186],{"type":14,"tag":50,"props":187,"children":188},{},[189],{"type":19,"value":190},"调用一百万次耗时：2464毫秒",{"type":14,"tag":119,"props":192,"children":193},{},[194],{"type":14,"tag":123,"props":195,"children":196},{},[197],{"type":19,"value":198},"使用序列化进行克隆",{"type":14,"tag":15,"props":200,"children":201},{},[202],{"type":19,"value":203},"克隆一个对象的最简单的方法是将它序列化并立刻反序列化为一个新对象。和反射方法一样，序列化方法是自动的，无需在对对象成员进行增删的时候做出修 改。缺点是序列化比其他方法慢，甚至比用反射还慢，所有引用的对象都必须是可序列化的（Serializable）。另外，取决于你所使用的序列化的类型 （XML，SOAP，二进制）的不同，私有成员可能不能像期望的那样被克隆。示例代码在这里，这里和这里。",{"type":14,"tag":68,"props":205,"children":207},{"code":206},"StudentSecond ss= JsonConvert.DeserializeObject\u003CStudentSecond>(JsonConvert.SerializeObject(s));\n",[208],{"type":14,"tag":73,"props":209,"children":210},{"__ignoreMap":7},[211],{"type":19,"value":206},{"type":14,"tag":15,"props":213,"children":214},{},[215],{"type":19,"value":216},"**调用一百万次耗时：**2984毫秒",{"type":14,"tag":15,"props":218,"children":219},{},[220],{"type":14,"tag":22,"props":221,"children":224},{"href":222,"rel":223},"http://wiki.unity3d.com/index.php/ObjectCopier",[26],[225],{"type":19,"value":222},{"type":14,"tag":68,"props":227,"children":229},{"code":228},"using System;\nusing System.Collections;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.IO;\n \n/// \u003Csummary>\n/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx\n/// \n/// Provides a method for performing a deep copy of an object.\n/// Binary Serialization is used to perform the copy.\n/// \u003C/summary>\npublic static class ObjectCopier\n{\n    /// \u003Csummary>\n    /// Perform a deep Copy of the object.\n    /// \u003C/summary>\n    /// \u003Ctypeparam name=\"T\">The type of object being copied.\u003C/typeparam>\n    /// \u003Cparam name=\"source\">The object instance to copy.\u003C/param>\n    /// \u003Creturns>The copied object.\u003C/returns>\n    public static T Clone\u003CT>(this T source)\n    {\n        if (!typeof(T).IsSerializable)\n        {\n            throw new ArgumentException(\"The type must be serializable.\", \"source\");\n        }\n \n        // Don't serialize a null object, simply return the default for that object\n        if (Object.ReferenceEquals(source, null))\n        {\n            return default(T);\n        }\n \n        IFormatter formatter = new BinaryFormatter();\n        Stream stream = new MemoryStream();\n        using (stream)\n        {\n            formatter.Serialize(stream, source);\n            stream.Seek(0, SeekOrigin.Begin);\n            return (T)formatter.Deserialize(stream);\n        }\n     }\n}\n",[230],{"type":14,"tag":73,"props":231,"children":232},{"__ignoreMap":7},[233],{"type":19,"value":228},{"type":14,"tag":119,"props":235,"children":236},{},[237],{"type":14,"tag":123,"props":238,"children":239},{},[240],{"type":19,"value":241},"使用IL进行克隆",{"type":14,"tag":15,"props":243,"children":244},{},[245],{"type":19,"value":246},"一种罕见的解决方案是使用IL（中间语言）来进行对象克隆。这种方式创建一个动态方法（DynamicMethod），获取中间语言生成器 （ILGenerator），向方法中注入代码，把它编译成一个委托，然后执行这个委托。委托会被缓存，因此中间语言只在初次克隆的时候才会生成，后续的 克隆都不会重新生成一遍。尽管这种方法比使用反射快，但是这种方法难以理解和维护。示例代码",{"type":14,"tag":68,"props":248,"children":250},{"code":249},"　 public static class TransExpV2\u003CTIn, TOut>\n    {\n\n        private static readonly Func\u003CTIn, TOut> cache = GetFunc();\n        private static Func\u003CTIn, TOut> GetFunc()\n        {\n            ParameterExpression parameterExpression = Expression.Parameter(typeof(TIn), \"p\");\n            List\u003CMemberBinding> memberBindingList = new List\u003CMemberBinding>();\n\n            foreach (var item in typeof(TOut).GetProperties())\n            {\n　　　　　　　　　if (!item.CanWrite)\n　　　　　　　　　　    continue;\n\n                MemberExpression property = Expression.Property(parameterExpression, typeof(TIn).GetProperty(item.Name));\n                MemberBinding memberBinding = Expression.Bind(item, property);\n                memberBindingList.Add(memberBinding);\n            }\n\n            MemberInitExpression memberInitExpression = Expression.MemberInit(Expression.New(typeof(TOut)), memberBindingList.ToArray());\n            Expression\u003CFunc\u003CTIn, TOut>> lambda = Expression.Lambda\u003CFunc\u003CTIn, TOut>>(memberInitExpression, new ParameterExpression[] { parameterExpression });\n\n            return lambda.Compile();\n        }\n\n        public static TOut Trans(TIn tIn)\n        {\n            return cache(tIn);\n        }\n\n    }\n",[251],{"type":14,"tag":73,"props":252,"children":253},{"__ignoreMap":7},[254],{"type":19,"value":249},{"type":14,"tag":15,"props":256,"children":257},{},[258,260],{"type":19,"value":259},"调用：",{"type":14,"tag":50,"props":261,"children":262},{},[263],{"type":19,"value":264},"StudentSecond ss= TransExpV2.Trans(s);",{"type":14,"tag":15,"props":266,"children":267},{},[268,270],{"type":19,"value":269},"*",{"type":14,"tag":271,"props":272,"children":273},"em",{},[274],{"type":19,"value":275},"调用一百万次耗时：107毫秒*",{"type":14,"tag":119,"props":277,"children":278},{},[279],{"type":14,"tag":123,"props":280,"children":281},{},[282],{"type":19,"value":283},"使用扩展方法进行克隆",{"type":14,"tag":15,"props":285,"children":286},{},[287],{"type":19,"value":288},"Havard Stranden用扩展方法（extention method）创建了一个自定义的克隆框架。这个框架能够创建对象及其引用的对象的深拷贝，不管对象结构有多复杂。缺点是，这是一个不提供源代码的自定义 框架（更新：现在已经包括源代码了，参见本文评论），并且它不能在不使用无参数构造器的时候，拷贝由私有方法创建的对象。另一个问题，也是所有自动化的深 克隆方法共有的问题是，深拷贝通常需要灵活地处理不能进行简单自动化特殊情况（例如未受管理的资源）。",{"type":14,"tag":290,"props":291,"children":293},"h3",{"id":292},"一个测试类",[294],{"type":19,"value":292},{"type":14,"tag":68,"props":296,"children":298},{"code":297},"\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\nnamespace dotnet_samples_test\n{\n\n    public class Person : ICloneable \n    {\n        public IdInfo IdInfo;\n        public int Age { get; set; }\n        public string Name { get; set; }\n        public string Address { get; set; }\n        public List\u003Cstring> Phones { get; set; } = new List\u003Cstring>();\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public Person ShallowCopy()\n        {\n            return (Person)this.Clone();\n        }\n\n        public Person DeepCopy()\n        {\n            var result =  (Person)this.Clone();\n            result.IdInfo = result.IdInfo.DeepCopy();\n            result.Phones = result.Phones.ToList();\n            return result;\n        }\n    }\n\n\n    public class IdInfo\n    {\n        public int IdNumber;\n        public IdInfo(int IdNumber)\n        {\n            this.IdNumber = IdNumber;\n        }\n\n        public object Clone()\n        {\n            return this.MemberwiseClone();\n        }\n\n        public IdInfo ShallowCopy()\n        {\n            return (IdInfo)this.Clone();\n        }\n\n        public IdInfo DeepCopy()\n        {\n            var result =  (IdInfo)this.Clone();\n\n            return result;\n        }\n\n    }\n\n\n\n\n\n    [TestClass]\n    public class CloneTest1\n    {\n        [TestMethod]\n        public void TestMethod1()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List\u003Cstring> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.ShallowCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            person2.Name=\"冈本伊朗\";\n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n                      Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n\n        [TestMethod]\n        public void TestMethod2()\n        {\n            var person1 = new Person\n            {\n                Name = \"長澤雅美\",\n                Age = 30,\n                Address = \"日本静岡縣磐田市\",\n                Phones = new List\u003Cstring> { \"9\", \"1\", \"1\" },\n                IdInfo = new IdInfo(1)\n            };\n            var person2 = person1.DeepCopy();\n            person2.IdInfo.IdNumber = 2;\n            person2.Phones.RemoveAt(0);\n            \n            Console.WriteLine(\"person1的名字:\"+person1.Name);\n            Console.WriteLine(\"person1第一个数字是:\"+person1.Phones[0]);\n            Console.WriteLine(\"person1id是:\"+person1.IdInfo.IdNumber);\n\n            Console.WriteLine(\"person2的名字:\"+person2.Name);\n            Console.WriteLine(\"person2第一个数字是:\"+person2.Phones[0]);\n            Console.WriteLine(\"person2id是:\"+person2.IdInfo.IdNumber);\n\n            Assert.AreEqual(person1.IdInfo.IdNumber,person2.IdInfo.IdNumber);\n        }\n    }\n}\n",[299],{"type":14,"tag":73,"props":300,"children":301},{"__ignoreMap":7},[302],{"type":19,"value":297},{"title":7,"searchDepth":304,"depth":304,"links":305},2,[306],{"id":58,"depth":304,"text":61,"children":307},[308],{"id":292,"depth":309,"text":292},3,"markdown","content:dotnet:2020-02-10-Icloneable.md","content","dotnet/2020-02-10-Icloneable.md","md","2020-02-10",[317,327,452,501,553,566,678],{"title":318,"_path":319,"children":320},"Art","/art",[321,324],{"title":322,"_path":323},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":325,"_path":326},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":328,"_path":329,"children":330},"Dotnet","/dotnet",[331,334,337,340,343,346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449],{"title":332,"_path":333},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":335,"_path":336},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":338,"_path":339},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":341,"_path":342},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":344,"_path":345},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":347,"_path":348},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":350,"_path":351},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":353,"_path":354},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":356,"_path":357},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":359,"_path":360},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":362,"_path":363},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":365,"_path":366},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":368,"_path":369},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":371,"_path":372},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":374,"_path":375},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":377,"_path":378},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":380,"_path":381},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":383,"_path":384},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":386,"_path":387},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":389,"_path":390},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":392,"_path":393},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":8,"_path":4},{"title":396,"_path":397},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":399,"_path":400},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":402,"_path":403},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":405,"_path":406},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":408,"_path":409},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":411,"_path":412},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":414,"_path":415},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":417,"_path":418},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":420,"_path":421},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":423,"_path":424},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":426,"_path":427},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":429,"_path":430},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":432,"_path":433},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":435,"_path":436},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":438,"_path":439},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":441,"_path":442},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":444,"_path":445},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":447,"_path":448},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":450,"_path":451},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":453,"_path":454,"children":455},"Game","/game",[456,459,462,465,468,471,474,477,480,483,486,489,492,495,498],{"title":457,"_path":458},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":460,"_path":461},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":463,"_path":464},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":466,"_path":467},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":469,"_path":470},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":472,"_path":473},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":475,"_path":476},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":478,"_path":479},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":481,"_path":482},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":484,"_path":485},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":487,"_path":488},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":490,"_path":491},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":493,"_path":494},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":496,"_path":497},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":499,"_path":500},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":502,"_path":503,"children":504},"Gyj","/gyj",[505,508,511,514,517,520,523,526,529,532,535,538,541,544,547,550],{"title":506,"_path":507},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":509,"_path":510},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":512,"_path":513},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":515,"_path":516},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":518,"_path":519},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":521,"_path":522},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":524,"_path":525},"玩法","/gyj/2022-08-22-wanfa",{"title":527,"_path":528},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":530,"_path":531},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":533,"_path":534},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":536,"_path":537},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":539,"_path":540},"门派内容相关","/gyj/2022-11-17-sect",{"title":542,"_path":543},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":545,"_path":546},"种植","/gyj/2022-12-01-zhongzhi",{"title":548,"_path":549},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":551,"_path":552},"跑商","/gyj/2023-11-01-paoshang",{"title":554,"_path":555,"children":556},"Js","/js",[557,560,563],{"title":558,"_path":559},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":561,"_path":562},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":564,"_path":565},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":567,"_path":568,"children":569},"Tool","/tool",[570,573,576,579,582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675],{"title":571,"_path":572},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":574,"_path":575},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":577,"_path":578},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":580,"_path":581},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":583,"_path":584},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":586,"_path":587},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":589,"_path":590},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":592,"_path":593},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":595,"_path":596},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":598,"_path":599},"mac下brew 使用","/tool/2020-01-13-brew",{"title":601,"_path":602},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":604,"_path":605},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":607,"_path":608},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":610,"_path":611},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":613,"_path":614},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":616,"_path":617},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":619,"_path":620},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":622,"_path":623},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":625,"_path":626},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":628,"_path":629},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":631,"_path":632},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":634,"_path":635},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":637,"_path":638},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":640,"_path":641},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":643,"_path":644},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":646,"_path":647},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":649,"_path":650},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":652,"_path":653},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":655,"_path":656},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":658,"_path":659},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":661,"_path":662},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":664,"_path":665},"rider的使用","/tool/2022-08-02-rider-use",{"title":667,"_path":668},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":670,"_path":671},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":673,"_path":674},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":676,"_path":677},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":679,"_path":680,"children":681},"Unity","/unity",[682,685,688,691,694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832,835,838,841,844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895],{"title":683,"_path":684},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":686,"_path":687},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":689,"_path":690},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":692,"_path":693},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":695,"_path":696},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":698,"_path":699},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":701,"_path":702},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":704,"_path":705},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":707,"_path":708},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":710,"_path":711},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":713,"_path":714},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":716,"_path":717},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":719,"_path":720},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":722,"_path":723},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":725,"_path":726},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":728,"_path":729},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":731,"_path":732},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":734,"_path":735},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":737,"_path":738},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":740,"_path":741},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":743,"_path":744},"技能系统","/unity/2020-02-15-skill-system",{"title":746,"_path":747},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":749,"_path":750},"角色状态设计","/unity/2020-02-17-character-states",{"title":752,"_path":753},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":755,"_path":756},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":758,"_path":759},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":761,"_path":762},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":764,"_path":765},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":767,"_path":768},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":770,"_path":771},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":773,"_path":774},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":776,"_path":777},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":779,"_path":780},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":782,"_path":783},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":785,"_path":786},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":788,"_path":789},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":791,"_path":792},"unity的addressables","/unity/2020-09-12-addressables",{"title":794,"_path":795},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":797,"_path":798},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":800,"_path":801},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":803,"_path":804},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":806,"_path":807},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":809,"_path":810},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":812,"_path":813},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":815,"_path":816},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":818,"_path":819},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":821,"_path":822},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":824,"_path":825},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":827,"_path":828},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":830,"_path":831},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":833,"_path":834},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":836,"_path":837},"简单保存工具","/unity/2020-11-13-simple-save",{"title":839,"_path":840},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":842,"_path":843},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":845,"_path":846},"ability","/unity/2020-11-16-dotssample",{"title":848,"_path":849},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":851,"_path":852},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":854,"_path":855},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":857,"_path":858},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":860,"_path":861},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":863,"_path":864},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":866,"_path":867},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":869,"_path":870},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":872,"_path":873},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":875,"_path":876},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":878,"_path":879},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":881,"_path":882},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":884,"_path":885},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":887,"_path":888},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":890,"_path":891},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":893,"_path":894},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":896,"_path":897},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040557]