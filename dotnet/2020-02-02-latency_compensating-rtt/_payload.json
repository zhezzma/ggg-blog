[{"data":1,"prerenderedAt":1026},["Reactive",2],{"content-query-Rd5ZNSvlaF":3,"content-navigation-8C37fagqQL":444},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":438,"_id":439,"_source":440,"_file":441,"_extension":442,"date":443},"/dotnet/2020-02-02-latency_compensating-rtt","dotnet",false,"","延迟补偿和对时的相关总结","国内的网络游戏多是客户端/服务器方式，而对于游戏实时性要求比较高的网游，如 果采用客户端发送时间包给服务器，服务器校验后再下发给客户端表现的话，网络延时 和抖动都会恶化游戏体验。对于客户端和服务器的同步问题， 一般有两种算法解决：",{"type":11,"children":12,"toc":425},"root",[13,20,25,30,35,41,46,54,74,87,92,97,102,107,112,123,131,137,143,155,166,185,204,213,218,237,246,254,265,277,282,295,301,306,311,316,324,329,334,343,349,357,362,367,372,377,383,388,393,398,407,412],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"① 、客户端和服务器之间进行对时后，客户端发送数据包给服务器，服务器根据收 到的客户端数据包先后进行排序，先到达的服务器端的事件包被判定为先发生，后到达 服务器的事件包被判定为后发生。在此情况下，往往网络延时较大的客户端先发送了游 戏事件包，但由于网络延时和抖动的影响，后到达服务器，而被判定为后发生时间，这 样对该客户端就不公平了。",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":19,"value":29},"② 、客户端和服务器进行对时后，客户端预测服务器收到客户端数据包的时间，并 把该时间写入数据包中发送给服务器，在网络抖动比较大的情况下，这种情况可以保证一定的公平性。但是还是出现了上述的情况，网络延时大的数据包预测的到达时间也就 更晚，依然会出现先发生的事件被服务器判定为后发生，同样不能保证游戏的公平性。",{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":19,"value":34},"因此，在现有的解决网络实时性较差问题的技术方案中，当采用TimeWarp同步机制 时，则需要保存数量较多的快照，同时也会使回滚的次数较多，导致过多的消耗内存和 CPU资源，以及降低游戏体验；对于国内网络游戏采用的网络时间同步机制，无论服务器 根据客户端数据包到达的时间进行排序，或客户端预测服务器收到客户端数据包的时间 并把该时间写入数据包中发送给服务器，对于网络延时越大的玩家同样会降低游戏体 验。",{"type":14,"tag":36,"props":37,"children":39},"h2",{"id":38},"网络对时",[40],{"type":19,"value":38},{"type":14,"tag":15,"props":42,"children":43},{},[44],{"type":19,"value":45},"大部分的强交互网游会做对时, 使 client 和 server 保持时间基本一致.",{"type":14,"tag":15,"props":47,"children":48},{},[49],{"type":14,"tag":50,"props":51,"children":53},"img",{"alt":50,"src":52},"/images/2020-02-02-Latency_Compensating-rtt/iyeruicpsm.png",[],{"type":14,"tag":55,"props":56,"children":57},"ol",{},[58,64,69],{"type":14,"tag":59,"props":60,"children":61},"li",{},[62],{"type":19,"value":63},"client 带上本地时间 t0 向 server 发送对时请求.",{"type":14,"tag":59,"props":65,"children":66},{},[67],{"type":19,"value":68},"server 回复当前自己的系统时间 t1.",{"type":14,"tag":59,"props":70,"children":71},{},[72],{"type":19,"value":73},"client ack 收到 server 回复时的本地时间 t2.",{"type":14,"tag":15,"props":75,"children":76},{},[77,79,85],{"type":19,"value":78},"如果只有 client 关心对时结果, 这时可以优化到",{"type":14,"tag":80,"props":81,"children":82},"strong",{},[83],{"type":19,"value":84},"只做1,2步甚至只做第2步",{"type":19,"value":86},", 相当于 client 主动发起 ping;",{"type":14,"tag":15,"props":88,"children":89},{},[90],{"type":19,"value":91},"同样, 如果只有 server 关心对时结果, sever 主动发起 ping (第2,3步)即可.",{"type":14,"tag":15,"props":93,"children":94},{},[95],{"type":19,"value":96},"单次对时往往会受到网络波动的影响, 所以一般还需要做多次统计一个比较合理的时间偏移.",{"type":14,"tag":15,"props":98,"children":99},{},[100],{"type":19,"value":101},"网络对时, 一般在进游戏之初做. 如果在游戏过程中发现有网络波动过大的情况(在下行协议包中带上 server 的时间, 很容易检查到提前或者滞后), 也需要重新发起对时.",{"type":14,"tag":15,"props":103,"children":104},{},[105],{"type":19,"value":106},"考虑到反外挂(比如加速齿轮, 或者减速器)的因素, server 端需要对主动发起的client对时请求做一些安全校验, 例如时间递增, 是否满足阈值等等.",{"type":14,"tag":15,"props":108,"children":109},{},[110],{"type":19,"value":111},"光从对时的角度来看, UDP 协议比 TCP 更合适一些, 不过取决于项目需要.",{"type":14,"tag":36,"props":113,"children":115},{"id":114},"服务器和客户端时间差算法-st0st2-2ct12",[116,118],{"type":19,"value":117},"服务器和客户端时间差算法 ",{"type":14,"tag":80,"props":119,"children":120},{},[121],{"type":19,"value":122},"(st0+st2-2ct1)/2",{"type":14,"tag":15,"props":124,"children":125},{},[126],{"type":14,"tag":50,"props":127,"children":130},{"alt":128,"src":129},"image-20200221152318844","/images/2020-02-02-Latency_Compensating-rtt/image-20200221152318844.png",[],{"type":14,"tag":132,"props":133,"children":135},"h3",{"id":134},"两种理解方式",[136],{"type":19,"value":134},{"type":14,"tag":138,"props":139,"children":141},"h4",{"id":140},"第一种方式",[142],{"type":19,"value":140},{"type":14,"tag":15,"props":144,"children":145},{},[146,153],{"type":14,"tag":147,"props":148,"children":150},"code",{"className":149},[],[151],{"type":19,"value":152},"ct1-st0 = &0 +(ct1-st1) ",{"type":19,"value":154},"  延迟+ 时间差(同一时刻下客户端减去服务端的时间差)",{"type":14,"tag":15,"props":156,"children":157},{},[158,164],{"type":14,"tag":147,"props":159,"children":161},{"className":160},[],[162],{"type":19,"value":163},"st2-ct1 = &1+(st2-ct2)",{"type":19,"value":165},"  延迟+ 时间差(同一时刻下服务端减去客户端的时间差)",{"type":14,"tag":15,"props":167,"children":168},{},[169,171,177,179],{"type":19,"value":170},"我们需要的就是",{"type":14,"tag":147,"props":172,"children":174},{"className":173},[],[175],{"type":19,"value":176},"st2-ct2",{"type":19,"value":178}," 由上可以转换为",{"type":14,"tag":147,"props":180,"children":182},{"className":181},[],[183],{"type":19,"value":184},"-(ct1-st1) = st2-ct2",{"type":14,"tag":15,"props":186,"children":187},{},[188,190,196,198],{"type":19,"value":189},"现假设 ",{"type":14,"tag":147,"props":191,"children":193},{"className":192},[],[194],{"type":19,"value":195},"o = st2-ct2 ",{"type":19,"value":197},"同时假设延迟相等 ",{"type":14,"tag":147,"props":199,"children":201},{"className":200},[],[202],{"type":19,"value":203},"p = &0 = &1",{"type":14,"tag":205,"props":206,"children":208},"pre",{"code":207},"ct1-st0 = p - o\n\nst2-ct1 = p + o\n\nct1-st0-st2+ct1 = -2o\n\no =(st0+st2-2ct1)/2\n",[209],{"type":14,"tag":147,"props":210,"children":211},{"__ignoreMap":7},[212],{"type":19,"value":207},{"type":14,"tag":138,"props":214,"children":216},{"id":215},"第二种方式",[217],{"type":19,"value":215},{"type":14,"tag":15,"props":219,"children":220},{},[221,227,229,235],{"type":14,"tag":147,"props":222,"children":224},{"className":223},[],[225],{"type":19,"value":226},"&0 = &1 = (st2-st0)/2 ",{"type":19,"value":228},"    我们知道",{"type":14,"tag":147,"props":230,"children":232},{"className":231},[],[233],{"type":19,"value":234},"(st2-st0)/2",{"type":19,"value":236},"是单次延迟 即",{"type":14,"tag":15,"props":238,"children":239},{},[240,245],{"type":14,"tag":147,"props":241,"children":243},{"className":242},[],[244],{"type":19,"value":163},{"type":19,"value":165},{"type":14,"tag":205,"props":247,"children":249},{"code":248}," st2-ct1 = (st2-st0)/2 + o\n\n 2st2-2ct1 = st2-st0 + 2o\n\n o = (st0+st2-2ct1)/2\n",[250],{"type":14,"tag":147,"props":251,"children":252},{"__ignoreMap":7},[253],{"type":19,"value":248},{"type":14,"tag":15,"props":255,"children":256},{},[257],{"type":14,"tag":258,"props":259,"children":263},"a",{"href":260,"rel":261},"https://patents.google.com/patent/CN101577715A/zh",[262],"nofollow",[264],{"type":19,"value":260},{"type":14,"tag":15,"props":266,"children":267},{},[268,270,275],{"type":19,"value":269},"服务器获得服务器与客户端的时间差值后，与服务器接收到来自客户端的数据包的时间做差值可以获得客户端在游 戏过程中实际向服务器发送数据包的时间，",{"type":14,"tag":80,"props":271,"children":272},{},[273],{"type":19,"value":274},"并通过客户端在游戏过程 中实际向服务器发送数据包的时间来判定在游戏时间中事件发生的实际顺序",{"type":19,"value":276},"， 从而较好的保持了游戏的公平性，提高了游戏玩家的游戏体验。",{"type":14,"tag":138,"props":278,"children":280},{"id":279},"检查安全性",[281],{"type":19,"value":279},{"type":14,"tag":55,"props":283,"children":284},{},[285,290],{"type":14,"tag":59,"props":286,"children":287},{},[288],{"type":19,"value":289},"第一次连接的对时..时差不该查过三分钟.",{"type":14,"tag":59,"props":291,"children":292},{},[293],{"type":19,"value":294},"校验包客户端有没有修改时间,能够求得发包的时间,对比服务器接收到包的时间以及延迟",{"type":14,"tag":36,"props":296,"children":298},{"id":297},"移动的延迟补偿",[299],{"type":19,"value":300},"移动的延迟补偿.",{"type":14,"tag":15,"props":302,"children":303},{},[304],{"type":19,"value":305},"使用了客户端预测的话,客户端的移动位置要优先于服务端的,因为有来回两次延迟..",{"type":14,"tag":15,"props":307,"children":308},{},[309],{"type":19,"value":310},"由于状态同步以服务端为准,使用服务器校对不会出什么问题.",{"type":14,"tag":15,"props":312,"children":313},{},[314],{"type":19,"value":315},"所以这里的补偿是补偿从客户端到服务端这段延迟.",{"type":14,"tag":205,"props":317,"children":319},{"code":318},"public class move\n{\n    DatetimeOffset clientTime\n}\nvar o = xxx;//服务端和客户端的时间差\nvar startMoveTime =   move.clientTime+o;\nvar delay = DateTimeOffset.Now()-startMoveTime;//延迟时间\n\n//todo:将延迟时间参与到pos的计算当中\n\n",[320],{"type":14,"tag":147,"props":321,"children":322},{"__ignoreMap":7},[323],{"type":19,"value":318},{"type":14,"tag":15,"props":325,"children":326},{},[327],{"type":19,"value":328},"如果使用了服务器校对不补偿也并没有什么太大的问题,因为最终仍然是以服务器为准的.",{"type":14,"tag":15,"props":330,"children":331},{},[332],{"type":19,"value":333},"但是补偿了之后减少了延迟,会更平缓一点.",{"type":14,"tag":15,"props":335,"children":336},{},[337],{"type":14,"tag":258,"props":338,"children":341},{"href":339,"rel":340},"https://patents.google.com/patent/CN102404279A/zh",[262],[342],{"type":19,"value":339},{"type":14,"tag":36,"props":344,"children":346},{"id":345},"boss攻击的延迟补偿",[347],{"type":19,"value":348},"boss攻击的延迟补偿.",{"type":14,"tag":15,"props":350,"children":351},{},[352],{"type":14,"tag":50,"props":353,"children":356},{"alt":354,"src":355},"image-20200221164609309","/images/2020-02-02-Latency_Compensating-rtt/image-20200221164609309.png",[],{"type":14,"tag":15,"props":358,"children":359},{},[360],{"type":19,"value":361},"玩家ct2的时候开始移动,但是服务器收到的时候已经是st4",{"type":14,"tag":15,"props":363,"children":364},{},[365],{"type":19,"value":366},"而服务器st2的时候boss发动了攻击.这个时候.玩家在服务器的位置是在ct3",{"type":14,"tag":15,"props":368,"children":369},{},[370],{"type":19,"value":371},"需要boss把攻击作为关键事件...直到客户端有ct4事件出来时再执行st2,",{"type":14,"tag":15,"props":373,"children":374},{},[375],{"type":19,"value":376},"可以使用时间轮算法触发关键事件",{"type":14,"tag":36,"props":378,"children":380},{"id":379},"玩家-的延迟补偿",[381],{"type":19,"value":382},"玩家 的延迟补偿",{"type":14,"tag":15,"props":384,"children":385},{},[386],{"type":19,"value":387},"这是由于客户端使用了插值算法造成的",{"type":14,"tag":15,"props":389,"children":390},{},[391],{"type":19,"value":392},"比如fps游戏,玩家看到的敌人的位置永远是过去的,当你开枪的时候,那个人其实已不在那个位置",{"type":14,"tag":15,"props":394,"children":395},{},[396],{"type":19,"value":397},"所以需要记录游戏的世界状态..找到子弹打出时那一刻的世界状态.然后判定",{"type":14,"tag":15,"props":399,"children":400},{},[401],{"type":14,"tag":258,"props":402,"children":405},{"href":403,"rel":404},"https://patents.google.com/patent/CN102739608A/zh",[262],[406],{"type":19,"value":403},{"type":14,"tag":36,"props":408,"children":410},{"id":409},"一些模拟恶劣网络环境工具",[411],{"type":19,"value":409},{"type":14,"tag":413,"props":414,"children":415},"ul",{},[416],{"type":14,"tag":59,"props":417,"children":418},{},[419],{"type":14,"tag":258,"props":420,"children":423},{"href":421,"rel":422},"http://jagt.github.io/clumsy/cn/index.html",[262],[424],{"type":19,"value":421},{"title":7,"searchDepth":426,"depth":426,"links":427},2,[428,429,434,435,436,437],{"id":38,"depth":426,"text":38},{"id":114,"depth":426,"text":430,"children":431},"服务器和客户端时间差算法 (st0+st2-2ct1)/2",[432],{"id":134,"depth":433,"text":134},3,{"id":297,"depth":426,"text":300},{"id":345,"depth":426,"text":348},{"id":379,"depth":426,"text":382},{"id":409,"depth":426,"text":409},"markdown","content:dotnet:2020-02-02-Latency_Compensating-rtt.md","content","dotnet/2020-02-02-Latency_Compensating-rtt.md","md","2020-02-02",[445,455,580,629,681,694,806],{"title":446,"_path":447,"children":448},"Art","/art",[449,452],{"title":450,"_path":451},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":453,"_path":454},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":456,"_path":457,"children":458},"Dotnet","/dotnet",[459,462,465,468,471,474,477,480,483,486,489,490,493,496,499,502,505,508,511,514,517,520,523,526,529,532,535,538,541,544,547,550,553,556,559,562,565,568,571,574,577],{"title":460,"_path":461},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":463,"_path":464},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":466,"_path":467},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":469,"_path":470},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":472,"_path":473},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":475,"_path":476},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":478,"_path":479},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":481,"_path":482},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":484,"_path":485},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":487,"_path":488},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":8,"_path":4},{"title":491,"_path":492},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":494,"_path":495},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":497,"_path":498},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":500,"_path":501},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":503,"_path":504},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":506,"_path":507},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":509,"_path":510},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":512,"_path":513},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":515,"_path":516},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":518,"_path":519},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":521,"_path":522},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":524,"_path":525},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":527,"_path":528},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":530,"_path":531},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":533,"_path":534},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":536,"_path":537},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":539,"_path":540},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":542,"_path":543},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":545,"_path":546},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":548,"_path":549},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":551,"_path":552},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":554,"_path":555},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":557,"_path":558},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":560,"_path":561},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":563,"_path":564},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":566,"_path":567},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":569,"_path":570},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":572,"_path":573},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":575,"_path":576},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":578,"_path":579},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":581,"_path":582,"children":583},"Game","/game",[584,587,590,593,596,599,602,605,608,611,614,617,620,623,626],{"title":585,"_path":586},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":588,"_path":589},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":591,"_path":592},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":594,"_path":595},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":597,"_path":598},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":600,"_path":601},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":603,"_path":604},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":606,"_path":607},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":609,"_path":610},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":612,"_path":613},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":615,"_path":616},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":618,"_path":619},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":621,"_path":622},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":624,"_path":625},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":627,"_path":628},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":630,"_path":631,"children":632},"Gyj","/gyj",[633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678],{"title":634,"_path":635},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":637,"_path":638},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":640,"_path":641},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":643,"_path":644},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":646,"_path":647},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":649,"_path":650},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":652,"_path":653},"玩法","/gyj/2022-08-22-wanfa",{"title":655,"_path":656},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":658,"_path":659},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":661,"_path":662},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":664,"_path":665},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":667,"_path":668},"门派内容相关","/gyj/2022-11-17-sect",{"title":670,"_path":671},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":673,"_path":674},"种植","/gyj/2022-12-01-zhongzhi",{"title":676,"_path":677},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":679,"_path":680},"跑商","/gyj/2023-11-01-paoshang",{"title":682,"_path":683,"children":684},"Js","/js",[685,688,691],{"title":686,"_path":687},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":689,"_path":690},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":692,"_path":693},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":695,"_path":696,"children":697},"Tool","/tool",[698,701,704,707,710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,755,758,761,764,767,770,773,776,779,782,785,788,791,794,797,800,803],{"title":699,"_path":700},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":702,"_path":703},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":705,"_path":706},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":708,"_path":709},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":711,"_path":712},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":714,"_path":715},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":717,"_path":718},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":720,"_path":721},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":723,"_path":724},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":726,"_path":727},"mac下brew 使用","/tool/2020-01-13-brew",{"title":729,"_path":730},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":732,"_path":733},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":735,"_path":736},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":738,"_path":739},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":741,"_path":742},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":744,"_path":745},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":747,"_path":748},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":750,"_path":751},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":753,"_path":754},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":756,"_path":757},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":759,"_path":760},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":762,"_path":763},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":765,"_path":766},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":768,"_path":769},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":771,"_path":772},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":774,"_path":775},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":777,"_path":778},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":780,"_path":781},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":783,"_path":784},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":786,"_path":787},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":789,"_path":790},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":792,"_path":793},"rider的使用","/tool/2022-08-02-rider-use",{"title":795,"_path":796},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":798,"_path":799},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":801,"_path":802},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":804,"_path":805},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":807,"_path":808,"children":809},"Unity","/unity",[810,813,816,819,822,825,828,831,834,837,840,843,846,849,852,855,858,861,864,867,870,873,876,879,882,885,888,891,894,897,900,903,906,909,912,915,918,921,924,927,930,933,936,939,942,945,948,951,954,957,960,963,966,969,972,975,978,981,984,987,990,993,996,999,1002,1005,1008,1011,1014,1017,1020,1023],{"title":811,"_path":812},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":814,"_path":815},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":817,"_path":818},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":820,"_path":821},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":823,"_path":824},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":826,"_path":827},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":829,"_path":830},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":832,"_path":833},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":835,"_path":836},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":838,"_path":839},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":841,"_path":842},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":844,"_path":845},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":847,"_path":848},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":850,"_path":851},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":853,"_path":854},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":856,"_path":857},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":859,"_path":860},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":862,"_path":863},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":865,"_path":866},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":868,"_path":869},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":871,"_path":872},"技能系统","/unity/2020-02-15-skill-system",{"title":874,"_path":875},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":877,"_path":878},"角色状态设计","/unity/2020-02-17-character-states",{"title":880,"_path":881},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":883,"_path":884},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":886,"_path":887},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":889,"_path":890},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":892,"_path":893},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":895,"_path":896},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":898,"_path":899},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":901,"_path":902},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":904,"_path":905},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":907,"_path":908},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":910,"_path":911},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":913,"_path":914},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":916,"_path":917},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":919,"_path":920},"unity的addressables","/unity/2020-09-12-addressables",{"title":922,"_path":923},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":925,"_path":926},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":928,"_path":929},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":931,"_path":932},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":934,"_path":935},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":937,"_path":938},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":940,"_path":941},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":943,"_path":944},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":946,"_path":947},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":949,"_path":950},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":952,"_path":953},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":955,"_path":956},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":958,"_path":959},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":961,"_path":962},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":964,"_path":965},"简单保存工具","/unity/2020-11-13-simple-save",{"title":967,"_path":968},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":970,"_path":971},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":973,"_path":974},"ability","/unity/2020-11-16-dotssample",{"title":976,"_path":977},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":979,"_path":980},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":982,"_path":983},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":985,"_path":986},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":988,"_path":989},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":991,"_path":992},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":994,"_path":995},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":997,"_path":998},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1000,"_path":1001},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1003,"_path":1004},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1006,"_path":1007},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1009,"_path":1010},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1012,"_path":1013},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1015,"_path":1016},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1018,"_path":1019},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1021,"_path":1022},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1024,"_path":1025},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040953]