[{"data":1,"prerenderedAt":1124},["Reactive",2],{"content-query-r0niQR0hhl":3,"content-navigation-8C37fagqQL":542},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":536,"_id":537,"_source":538,"_file":539,"_extension":540,"date":541},"/dotnet/2020-02-11-gc","dotnet",false,"","C#引用类型对象在循环引用时会不会内存泄漏","对于垃圾收集（GC）, 我们需要考虑三件事情：哪些内存需要回收？如何判断是垃圾对象？垃圾回收算法有哪些？",{"type":11,"children":12,"toc":529},"root",[13,20,27,36,41,46,51,59,64,69,74,80,85,92,97,102,107,112,117,122,127,132,138,143,148,156,168,176,181,186,191,196,201,209,214,219,224,229,235,241,246,251,260,265,270,275,284,289,294,303,308,313,317,322,326,331,337,346,351,356,361,366,371,376,382,387,392,397,402,407,412,417,422,428,433,442,447,452,457,462,468,473,480,485,490,498,503,508,524],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":21,"props":22,"children":24},"h2",{"id":23},"一gc的工作区域",[25],{"type":19,"value":26},"一、GC的工作区域",{"type":14,"tag":15,"props":28,"children":29},{},[30],{"type":14,"tag":31,"props":32,"children":33},"strong",{},[34],{"type":19,"value":35},"1、不是GC的工作区域",{"type":14,"tag":15,"props":37,"children":38},{},[39],{"type":19,"value":40},"(1)程序计数器、虚拟机栈和本地方法栈三个区域是线程私有的，随线程生而生，随线程灭而灭；",{"type":14,"tag":15,"props":42,"children":43},{},[44],{"type":19,"value":45},"(2)栈中的栈帧随着方法的进入和退出而进行入栈和出栈操作，每个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，因此这几个区域的内存分配和回收都具有确定性。",{"type":14,"tag":15,"props":47,"children":48},{},[49],{"type":19,"value":50},"在这几个区域不需要过多考虑回收的问题，因为方法结束或线程结束时，内存自然就跟随着回收了。",{"type":14,"tag":15,"props":52,"children":53},{},[54],{"type":14,"tag":31,"props":55,"children":56},{},[57],{"type":19,"value":58},"2、GC的工作区域（哪些内存需要GC回收？）",{"type":14,"tag":15,"props":60,"children":61},{},[62],{"type":19,"value":63},"(1)垃圾回收重点关注的是堆和方法区部分的内存。",{"type":14,"tag":15,"props":65,"children":66},{},[67],{"type":19,"value":68},"​    因为一个接口中的多个实现类需要的内存可能不一样，一个方法的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间才能知道会创建哪些对象，这部分内存的分",{"type":14,"tag":15,"props":70,"children":71},{},[72],{"type":19,"value":73},"配和回收都是动态的，所以垃圾回收器所关注的主要是这部分的内存。",{"type":14,"tag":21,"props":75,"children":77},{"id":76},"二垃圾对象的判定",[78],{"type":19,"value":79},"二、垃圾对象的判定",{"type":14,"tag":15,"props":81,"children":82},{},[83],{"type":19,"value":84},"Java堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，哪些还活着。对象死去的时候才需要回收。",{"type":14,"tag":86,"props":87,"children":89},"h4",{"id":88},"_1引用计数法",[90],{"type":19,"value":91},"1、引用计数法",{"type":14,"tag":15,"props":93,"children":94},{},[95],{"type":19,"value":96},"引用计数法的逻辑是：在堆中存储对象时，在对象头处维护一个counter计数器，如果一个对象增加了一个引用与之相连，则将counter++。",{"type":14,"tag":15,"props":98,"children":99},{},[100],{"type":19,"value":101},"如果一个引用关系失效则counter–。如果一个对象的counter变为0，则说明该对象已经被废弃，不处于存活状态。",{"type":14,"tag":15,"props":103,"children":104},{},[105],{"type":19,"value":106},"优点",{"type":14,"tag":15,"props":108,"children":109},{},[110],{"type":19,"value":111},"1)可即刻回收垃圾，每个对象都知道自己的被引用数，当counter为0时，对象就会把自己作为空闲空间连接到空闲链表，也就是在对象变成垃圾的同时就会被回收.",{"type":14,"tag":15,"props":113,"children":114},{},[115],{"type":19,"value":116},"2）最大暂停时间短，每次通过指向mutator生成垃圾时，这部分垃圾都会被回收，大幅削减了mutator的最大暂停时间。",{"type":14,"tag":15,"props":118,"children":119},{},[120],{"type":19,"value":121},"缺点",{"type":14,"tag":15,"props":123,"children":124},{},[125],{"type":19,"value":126},"1)引用和去引用伴随加法和减法，影响性能",{"type":14,"tag":15,"props":128,"children":129},{},[130],{"type":19,"value":131},"2)很难处理循环引用",{"type":14,"tag":86,"props":133,"children":135},{"id":134},"_2可达性分析算法",[136],{"type":19,"value":137},"2、可达性分析算法",{"type":14,"tag":15,"props":139,"children":140},{},[141],{"type":19,"value":142},"这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，就证明此对象是不可用的。",{"type":14,"tag":15,"props":144,"children":145},{},[146],{"type":19,"value":147},"Java语言是通过可达性分析算法来判断对象是否存活的。",{"type":14,"tag":15,"props":149,"children":150},{},[151],{"type":14,"tag":152,"props":153,"children":155},"img",{"alt":152,"src":154},"/images/2020-02-11-gc/1090617-20180621212836385-64372595.png",[],{"type":14,"tag":15,"props":157,"children":158},{},[159,161,166],{"type":19,"value":160},"C#与Java中，",{"type":14,"tag":31,"props":162,"children":163},{},[164],{"type":19,"value":165},"GC采用的是GC Root 的链路可达性分析算法解决的GC标记问题",{"type":19,"value":167},"。原理就是一个对象只要有GC Root引用，就不会释放",{"type":14,"tag":15,"props":169,"children":170},{},[171],{"type":14,"tag":31,"props":172,"children":173},{},[174],{"type":19,"value":175},".NET中可以当作GC Root的对象有如下几种：",{"type":14,"tag":15,"props":177,"children":178},{},[179],{"type":19,"value":180},"1、全局变量",{"type":14,"tag":15,"props":182,"children":183},{},[184],{"type":19,"value":185},"2、静态变量",{"type":14,"tag":15,"props":187,"children":188},{},[189],{"type":19,"value":190},"3、栈上的所有局部变量(JIT)",{"type":14,"tag":15,"props":192,"children":193},{},[194],{"type":19,"value":195},"4、栈上传入的参数变量",{"type":14,"tag":15,"props":197,"children":198},{},[199],{"type":19,"value":200},"5、寄存器中的变量",{"type":14,"tag":15,"props":202,"children":203},{},[204],{"type":14,"tag":31,"props":205,"children":206},{},[207],{"type":19,"value":208},"在Java中，可以当做GC Root的对象有以下几种：",{"type":14,"tag":15,"props":210,"children":211},{},[212],{"type":19,"value":213},"1、虚拟机（JVM）栈中的引用的对象",{"type":14,"tag":15,"props":215,"children":216},{},[217],{"type":19,"value":218},"2、方法区中的类静态属性引用的对象",{"type":14,"tag":15,"props":220,"children":221},{},[222],{"type":19,"value":223},"3、方法区中的常量引用的对象（主要指声明为final的常量值）",{"type":14,"tag":15,"props":225,"children":226},{},[227],{"type":19,"value":228},"4、本地方法栈中JNI的引用的对象",{"type":14,"tag":21,"props":230,"children":232},{"id":231},"三垃圾回收算法",[233],{"type":19,"value":234},"三、垃圾回收算法",{"type":14,"tag":86,"props":236,"children":238},{"id":237},"_1标记-清除算法",[239],{"type":19,"value":240},"1、标记-清除算法",{"type":14,"tag":15,"props":242,"children":243},{},[244],{"type":19,"value":245},"简单来说有两个步骤：标记、清除。",{"type":14,"tag":15,"props":247,"children":248},{},[249],{"type":19,"value":250},"(1). 标记阶段：找到所有可访问的对象，做个标记",{"type":14,"tag":15,"props":252,"children":253},{},[254,256],{"type":19,"value":255},"(2). 清除阶段：遍历堆，把未被标记的对象回收\n",{"type":14,"tag":152,"props":257,"children":259},{"alt":152,"src":258},"/images/2020-02-11-gc/1090617-20180621213112064-1445464345.png",[],{"type":14,"tag":15,"props":261,"children":262},{},[263],{"type":19,"value":264},"缺 点",{"type":14,"tag":15,"props":266,"children":267},{},[268],{"type":19,"value":269},"(1)因为涉及大量的内存遍历工作，所以执行性能较低，这也会导致“stop the world”时间较长，java程序吞吐量降低；",{"type":14,"tag":15,"props":271,"children":272},{},[273],{"type":19,"value":274},"(2)对象被清除之后，被清除的对象留下内存的空缺位置会造成内存不连续，空间浪费。",{"type":14,"tag":86,"props":276,"children":278},{"id":277},"_2标记整理压缩算法",[279],{"type":14,"tag":31,"props":280,"children":281},{},[282],{"type":19,"value":283},"2、标记整理(压缩)算法",{"type":14,"tag":15,"props":285,"children":286},{},[287],{"type":19,"value":288},"标记-整理算法适合用于存活对象较多的场合，如老年代。它在标记-清除算法的基础上做了一些优化。",{"type":14,"tag":15,"props":290,"children":291},{},[292],{"type":19,"value":293},"(1)、标记阶段：它的第一个阶段与标记/清除算法是一模一样的。",{"type":14,"tag":15,"props":295,"children":296},{},[297,299],{"type":19,"value":298},"(2)、整理阶段：移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。\n",{"type":14,"tag":152,"props":300,"children":302},{"alt":152,"src":301},"/images/2020-02-11-gc/1090617-20180621213518377-283931527.png",[],{"type":14,"tag":15,"props":304,"children":305},{},[306],{"type":19,"value":307},"​    上图中可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲",{"type":14,"tag":15,"props":309,"children":310},{},[311],{"type":19,"value":312},"列表显然少了许多开销。",{"type":14,"tag":15,"props":314,"children":315},{},[316],{"type":19,"value":106},{"type":14,"tag":15,"props":318,"children":319},{},[320],{"type":19,"value":321},"标记/整理算法不仅可以弥补标记/清除算法当中，内存区域分散的缺点，也消除了复制算法当中，内存减半的高额代价。",{"type":14,"tag":15,"props":323,"children":324},{},[325],{"type":19,"value":121},{"type":14,"tag":15,"props":327,"children":328},{},[329],{"type":19,"value":330},"标记/整理算法唯一的缺点就是效率也不高。不仅要标记所有存活对象，还要整理所有存活对象的引用地址。从效率上来说，标记/整理算法要低于复制算法。",{"type":14,"tag":86,"props":332,"children":334},{"id":333},"_3复制算法",[335],{"type":19,"value":336},"3、复制算法",{"type":14,"tag":15,"props":338,"children":339},{},[340,342],{"type":19,"value":341},"复制算法简单来说就是把内存一分为二，但只使用其中一份，在垃圾回收时，将正在使用的那份内存中存活的对象复制到另一份空白的内存中，最后将正在使用的内存空间的对象清除，完成垃圾回收。\n",{"type":14,"tag":152,"props":343,"children":345},{"alt":152,"src":344},"/images/2020-02-11-gc/1090617-20180621213541943-2048983954.png",[],{"type":14,"tag":15,"props":347,"children":348},{},[349],{"type":19,"value":350},"优点\n复制算法使得每次都只对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。\n缺点\n复制算法的代价是将内存缩小为原来的一半，这个太要命了。",{"type":14,"tag":15,"props":352,"children":353},{},[354],{"type":19,"value":355},"注意（重要）",{"type":14,"tag":15,"props":357,"children":358},{},[359],{"type":19,"value":360},"​    现在的虚拟机使用复制算法来进行新生代的内存回收。因为在新生代中绝大多数的对象都是“朝生夕亡”，所以不需要将整个内存分为两个部分，而是分为三个部分，一块为Eden（伊面区）和两块较小的",{"type":14,"tag":15,"props":362,"children":363},{},[364],{"type":19,"value":365},"Survivor（幸存区）空间(默认比例->8:1:1)。每次使用Eden和其中的一块Survivor，垃圾回收时候将上述两块中存活的对象复制到另外一块Survivor上，同时清理上述Eden和Survivor。所以每次新生代就可以使用90%",{"type":14,"tag":15,"props":367,"children":368},{},[369],{"type":19,"value":370},"的内存。只有10%的内存是浪费的。(不能保证每次新生代都少于10%的对象存活，当在垃圾回收复制时候如果一块Survivor不够时候，需要老年代来分担，大对象直接进入老年代)",{"type":14,"tag":15,"props":372,"children":373},{},[374],{"type":19,"value":375},"总的来讲：复制算法不适用于存活对象较多的场合，如老年代（复制算法适合做新生代的GC）",{"type":14,"tag":86,"props":377,"children":379},{"id":378},"_4三种算法总结",[380],{"type":19,"value":381},"4、三种算法总结",{"type":14,"tag":15,"props":383,"children":384},{},[385],{"type":19,"value":386},"相同点",{"type":14,"tag":15,"props":388,"children":389},{},[390],{"type":19,"value":391},"(1)三个算法都基于根搜索算法去判断一个对象是否应该被回收，而支撑根搜索算法可以正常工作的理论依据，就是语法中变量作用域的相关内容。",{"type":14,"tag":15,"props":393,"children":394},{},[395],{"type":19,"value":396},"(2)在GC线程开启时，或者说GC过程开始时，它们都要暂停应用程序（stop the world）。",{"type":14,"tag":15,"props":398,"children":399},{},[400],{"type":19,"value":401},"区别",{"type":14,"tag":15,"props":403,"children":404},{},[405],{"type":19,"value":406},"三种算法比较：",{"type":14,"tag":15,"props":408,"children":409},{},[410],{"type":19,"value":411},"​    效率：复制算法>标记-整理算法>标记-清除算法；",{"type":14,"tag":15,"props":413,"children":414},{},[415],{"type":19,"value":416},"​    内存整齐度：复制算法=标记-整理算法>标记-清除算法",{"type":14,"tag":15,"props":418,"children":419},{},[420],{"type":19,"value":421},"​    内存利用率：标记-整理算法=标记-清除算法>复制算法",{"type":14,"tag":86,"props":423,"children":425},{"id":424},"_5分代收集算法",[426],{"type":19,"value":427},"5、分代收集算法",{"type":14,"tag":15,"props":429,"children":430},{},[431],{"type":19,"value":432},"首先这不是一种新算法，它是一种思想。现在使用的Java虚拟机并不是只是使用一种内存回收机制，而是分代收集的算法。就是将内存根据对象存活的周期划分为几块。一般是把堆分为新生代、和老年代。短命对",{"type":14,"tag":15,"props":434,"children":435},{},[436,438],{"type":19,"value":437},"象存放在新生代中，长命对象放在老年代中。\n",{"type":14,"tag":152,"props":439,"children":441},{"alt":152,"src":440},"/images/2020-02-11-gc/1090617-20180621214050767-1145517463.png",[],{"type":14,"tag":15,"props":443,"children":444},{},[445],{"type":19,"value":446},"这个图是我拷贝来的，但要记住java8以后，已经没有永久区了，之前永久区存放的东西基本上放到了元空间中。",{"type":14,"tag":15,"props":448,"children":449},{},[450],{"type":19,"value":451},"对于不同的代，采用不同的收集算法：",{"type":14,"tag":15,"props":453,"children":454},{},[455],{"type":19,"value":456},"​    新生代：由于存活的对象相对比较少，因此可以采用复制算法该算法效率比较快。",{"type":14,"tag":15,"props":458,"children":459},{},[460],{"type":19,"value":461},"​    老年代：由于存活的对象比较多哈，可以采用标记-清除算法或是标记-整理算法。",{"type":14,"tag":21,"props":463,"children":465},{"id":464},"各平台gc算法",[466],{"type":19,"value":467},"各平台GC算法",{"type":14,"tag":15,"props":469,"children":470},{},[471],{"type":19,"value":472},"关于Mono和unity ，集成的是开源项目BOEHM ，BOEHM算法采用标记清除法,il2cpp也是实现了boehm算法",{"type":14,"tag":474,"props":475,"children":477},"h1",{"id":476},"关于c和java中的循环引用",[478],{"type":19,"value":479},"关于c#和java中的循环引用",{"type":14,"tag":15,"props":481,"children":482},{},[483],{"type":19,"value":484},"循环引用指的是A引用了B，而B又引用了A。在写代码的时候，都难免会这样写：地图引用了战斗单位，战斗单位又引用了地图。。",{"type":14,"tag":15,"props":486,"children":487},{},[488],{"type":19,"value":489},"如图：（来源于国外大神的解释）",{"type":14,"tag":15,"props":491,"children":492},{},[493],{"type":14,"tag":152,"props":494,"children":497},{"alt":495,"src":496},"小议C#引用类型对象在循环引用时会不会内存泄漏","/images/2020-02-11-mem/5b1933eb47c2a.png",[],{"type":14,"tag":15,"props":499,"children":500},{},[501],{"type":19,"value":502},"当A没有再被其他类引用，则A，B，C都应该被垃圾回收。如果判断该对象是否需要被回收的依据是基于引用计数的，那上面代码就会是这样：B被C和A引了，引用计数为2，C被B引了，引用计数为1，这样内存就泄露了。",{"type":14,"tag":15,"props":504,"children":505},{},[506],{"type":19,"value":507},"所以C#的GC并没有用引用计数。GC有一些“根”，对象都挂在上面。从“根”往其子结点进行遍历，就可以标注出哪些对象是被使用的。A对象没有被其他引用，A作为B，C的入口，所以A,B,C都变成了被回收的对象。",{"type":14,"tag":15,"props":509,"children":510},{},[511,513,522],{"type":19,"value":512},"只要是涉及到的对象不能从GC Roots",{"type":14,"tag":514,"props":515,"children":519},"a",{"href":516,"rel":517},"https://droidyue.com/blog/2014/10/12/understanding-weakreference-in-java/",[518],"nofollow",[520],{"type":19,"value":521},"强引用",{"type":19,"value":523},"可到达，垃圾回收器都会进行清理来释放内存。",{"type":14,"tag":15,"props":525,"children":526},{},[527],{"type":19,"value":528},"综上，C#在做循环引用的时候是不会出现垃圾回收问题的。",{"title":7,"searchDepth":530,"depth":530,"links":531},2,[532,533,534,535],{"id":23,"depth":530,"text":26},{"id":76,"depth":530,"text":79},{"id":231,"depth":530,"text":234},{"id":464,"depth":530,"text":467},"markdown","content:dotnet:2020-02-11-gc.md","content","dotnet/2020-02-11-gc.md","md","2020-02-11",[543,553,678,727,779,792,904],{"title":544,"_path":545,"children":546},"Art","/art",[547,550],{"title":548,"_path":549},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":551,"_path":552},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":554,"_path":555,"children":556},"Dotnet","/dotnet",[557,560,563,566,569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,614,617,620,623,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675],{"title":558,"_path":559},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":561,"_path":562},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":564,"_path":565},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":567,"_path":568},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":570,"_path":571},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":573,"_path":574},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":576,"_path":577},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":579,"_path":580},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":582,"_path":583},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":585,"_path":586},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":588,"_path":589},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":591,"_path":592},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":594,"_path":595},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":597,"_path":598},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":600,"_path":601},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":603,"_path":604},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":606,"_path":607},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":609,"_path":610},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":612,"_path":613},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":615,"_path":616},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":618,"_path":619},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":621,"_path":622},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":8,"_path":4},{"title":625,"_path":626},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":628,"_path":629},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":631,"_path":632},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":634,"_path":635},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":637,"_path":638},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":640,"_path":641},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":643,"_path":644},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":646,"_path":647},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":649,"_path":650},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":652,"_path":653},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":655,"_path":656},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":658,"_path":659},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":661,"_path":662},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":664,"_path":665},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":667,"_path":668},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":670,"_path":671},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":673,"_path":674},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":676,"_path":677},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":679,"_path":680,"children":681},"Game","/game",[682,685,688,691,694,697,700,703,706,709,712,715,718,721,724],{"title":683,"_path":684},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":686,"_path":687},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":689,"_path":690},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":692,"_path":693},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":695,"_path":696},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":698,"_path":699},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":701,"_path":702},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":704,"_path":705},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":707,"_path":708},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":710,"_path":711},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":713,"_path":714},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":716,"_path":717},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":719,"_path":720},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":722,"_path":723},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":725,"_path":726},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":728,"_path":729,"children":730},"Gyj","/gyj",[731,734,737,740,743,746,749,752,755,758,761,764,767,770,773,776],{"title":732,"_path":733},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":735,"_path":736},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":738,"_path":739},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":741,"_path":742},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":744,"_path":745},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":747,"_path":748},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":750,"_path":751},"玩法","/gyj/2022-08-22-wanfa",{"title":753,"_path":754},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":756,"_path":757},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":759,"_path":760},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":762,"_path":763},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":765,"_path":766},"门派内容相关","/gyj/2022-11-17-sect",{"title":768,"_path":769},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":771,"_path":772},"种植","/gyj/2022-12-01-zhongzhi",{"title":774,"_path":775},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":777,"_path":778},"跑商","/gyj/2023-11-01-paoshang",{"title":780,"_path":781,"children":782},"Js","/js",[783,786,789],{"title":784,"_path":785},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":787,"_path":788},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":790,"_path":791},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":793,"_path":794,"children":795},"Tool","/tool",[796,799,802,805,808,811,814,817,820,823,826,829,832,835,838,841,844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901],{"title":797,"_path":798},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":800,"_path":801},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":803,"_path":804},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":806,"_path":807},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":809,"_path":810},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":812,"_path":813},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":815,"_path":816},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":818,"_path":819},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":821,"_path":822},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":824,"_path":825},"mac下brew 使用","/tool/2020-01-13-brew",{"title":827,"_path":828},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":830,"_path":831},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":833,"_path":834},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":836,"_path":837},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":839,"_path":840},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":842,"_path":843},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":845,"_path":846},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":848,"_path":849},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":851,"_path":852},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":854,"_path":855},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":857,"_path":858},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":860,"_path":861},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":863,"_path":864},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":866,"_path":867},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":869,"_path":870},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":872,"_path":873},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":875,"_path":876},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":878,"_path":879},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":881,"_path":882},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":884,"_path":885},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":887,"_path":888},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":890,"_path":891},"rider的使用","/tool/2022-08-02-rider-use",{"title":893,"_path":894},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":896,"_path":897},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":899,"_path":900},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":902,"_path":903},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":905,"_path":906,"children":907},"Unity","/unity",[908,911,914,917,920,923,926,929,932,935,938,941,944,947,950,953,956,959,962,965,968,971,974,977,980,983,986,989,992,995,998,1001,1004,1007,1010,1013,1016,1019,1022,1025,1028,1031,1034,1037,1040,1043,1046,1049,1052,1055,1058,1061,1064,1067,1070,1073,1076,1079,1082,1085,1088,1091,1094,1097,1100,1103,1106,1109,1112,1115,1118,1121],{"title":909,"_path":910},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":912,"_path":913},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":915,"_path":916},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":918,"_path":919},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":921,"_path":922},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":924,"_path":925},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":927,"_path":928},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":930,"_path":931},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":933,"_path":934},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":936,"_path":937},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":939,"_path":940},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":942,"_path":943},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":945,"_path":946},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":948,"_path":949},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":951,"_path":952},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":954,"_path":955},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":957,"_path":958},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":960,"_path":961},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":963,"_path":964},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":966,"_path":967},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":969,"_path":970},"技能系统","/unity/2020-02-15-skill-system",{"title":972,"_path":973},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":975,"_path":976},"角色状态设计","/unity/2020-02-17-character-states",{"title":978,"_path":979},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":981,"_path":982},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":984,"_path":985},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":987,"_path":988},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":990,"_path":991},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":993,"_path":994},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":996,"_path":997},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":999,"_path":1000},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1002,"_path":1003},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1005,"_path":1006},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1008,"_path":1009},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1011,"_path":1012},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1014,"_path":1015},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1017,"_path":1018},"unity的addressables","/unity/2020-09-12-addressables",{"title":1020,"_path":1021},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1023,"_path":1024},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1026,"_path":1027},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1029,"_path":1030},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1032,"_path":1033},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1035,"_path":1036},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1038,"_path":1039},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1041,"_path":1042},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1044,"_path":1045},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1047,"_path":1048},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1050,"_path":1051},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1053,"_path":1054},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1056,"_path":1057},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1059,"_path":1060},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1062,"_path":1063},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1065,"_path":1066},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1068,"_path":1069},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1071,"_path":1072},"ability","/unity/2020-11-16-dotssample",{"title":1074,"_path":1075},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1077,"_path":1078},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1080,"_path":1081},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1083,"_path":1084},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1086,"_path":1087},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1089,"_path":1090},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1092,"_path":1093},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1095,"_path":1096},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1098,"_path":1099},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1101,"_path":1102},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1104,"_path":1105},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1107,"_path":1108},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1110,"_path":1111},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1113,"_path":1114},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1116,"_path":1117},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1119,"_path":1120},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1122,"_path":1123},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040552]