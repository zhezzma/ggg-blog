[{"data":1,"prerenderedAt":859},["Reactive",2],{"content-query-jyEI8SJ0x6":3,"content-navigation-8C37fagqQL":277},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":271,"_id":272,"_source":273,"_file":274,"_extension":275,"date":276},"/dotnet/2020-11-13-reflection-method","dotnet",false,"",".NET Core/Framework 创建委托以大幅度提高反射调用的性能","都知道反射伤性能，但不得不反射的时候又怎么办呢？当真的被问题逼迫的时候还是能找到解决办法的。",{"type":11,"children":12,"toc":265},"root",[13,20,25,29,35,45,50,118,123,136,141,154,159,173,178,191,200,221,234,243],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"为反射得到的方法创建一个委托，此后调用此委托将能够提高近乎直接调用方法本身的性能。（当然 Emit 也能够帮助我们显著提升性能，不过直接得到可以调用的委托不是更加方便吗？）",{"type":14,"tag":26,"props":27,"children":28},"hr",{},[],{"type":14,"tag":30,"props":31,"children":33},"h3",{"id":32},"性能对比数据",[34],{"type":19,"value":32},{"type":14,"tag":15,"props":36,"children":37},{},[38,43],{"type":14,"tag":39,"props":40,"children":42},"img",{"alt":32,"src":41},"/images/2020-11-13-Reflection-Method/20180227195855828",[],{"type":19,"value":44},"\n▲ 没有什么能够比数据更有说服力（注意后面两行是有秒数的）",{"type":14,"tag":15,"props":46,"children":47},{},[48],{"type":19,"value":49},"可能我还需要解释一下那五行数据的含义：",{"type":14,"tag":51,"props":52,"children":53},"ol",{},[54,68,79,96,107],{"type":14,"tag":55,"props":56,"children":57},"li",{},[58,60,66],{"type":19,"value":59},"直接调用（��",{"type":14,"tag":61,"props":62,"children":63},"em",{},[64],{"type":19,"value":65},"应该没有什么比直接调用函数本身更有性能优势的吧",{"type":19,"value":67},"）",{"type":14,"tag":55,"props":69,"children":70},{},[71,73,78],{"type":19,"value":72},"做一个跟直接调用的方法功能一模一样的委托（��",{"type":14,"tag":61,"props":74,"children":75},{},[76],{"type":19,"value":77},"目的是看看调用委托相比调用方法本身是否有性能损失，从数据上看，损失非常小",{"type":19,"value":67},{"type":14,"tag":55,"props":80,"children":81},{},[82,88,90,95],{"type":14,"tag":83,"props":84,"children":85},"strong",{},[86],{"type":19,"value":87},"本文重点",{"type":19,"value":89}," 将反射出来的方法创建一个委托，然后调用这个委托（��",{"type":14,"tag":61,"props":91,"children":92},{},[93],{"type":19,"value":94},"看看吧，性能跟直接调差别也不大嘛",{"type":19,"value":67},{"type":14,"tag":55,"props":97,"children":98},{},[99,101,106],{"type":19,"value":100},"先反射得到方法，然后一直调用这个方法（��",{"type":14,"tag":61,"props":102,"children":103},{},[104],{"type":19,"value":105},"终于可以看出来反射本身还是挺伤性能的了，50 多倍的性能损失啊",{"type":19,"value":67},{"type":14,"tag":55,"props":108,"children":109},{},[110,112,117],{"type":19,"value":111},"缓存都不用，从头开始反射然后调用得到的方法（��",{"type":14,"tag":61,"props":113,"children":114},{},[115],{"type":19,"value":116},"100 多倍的性能损失了",{"type":19,"value":67},{"type":14,"tag":15,"props":119,"children":120},{},[121],{"type":19,"value":122},"以下是测试代码，可以更好地理解上图数据的含义：",{"type":14,"tag":124,"props":125,"children":130},"pre",{"className":126,"code":128,"language":129,"meta":7},[127],"language-csharp","using System;\nusing System.Diagnostics;\nusing System.Reflection;\n\nnamespace Walterlv.Demo\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // 调用的目标实例。\n            var instance = new StubClass();\n\n            // 使用反射找到的方法。\n            var method = typeof(StubClass).GetMethod(nameof(StubClass.Test), new[] { typeof(int) });\n            Assert.IsNotNull(method);\n\n            // 将反射找到的方法创建一个委托。\n            var func = InstanceMethodBuilder\u003Cint, int>.CreateInstanceMethod(instance, method);\n\n            // 跟被测方法功能一样的纯委托。\n            Func\u003Cint, int> pureFunc = value => value;\n\n            // 测试次数。\n            var count = 10000000;\n\n            // 直接调用。\n            var watch = new Stopwatch();\n            watch.Start();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = instance.Test(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 直接调用\");\n\n            // 使用同样功能的 Func 调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = pureFunc(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用同样功能的 Func 调用\");\n\n            // 使用反射创建出来的委托调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = func(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用反射创建出来的委托调用\");\n\n            // 使用反射得到的方法缓存调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = method.Invoke(instance, new object[] { 5 });\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用反射得到的方法缓存调用\");\n\n            // 直接使用反射调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = typeof(StubClass).GetMethod(nameof(StubClass.Test), new[] { typeof(int) })\n                    ?.Invoke(instance, new object[] { 5 });\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 直接使用反射调用\");\n        }\n\n        private class StubClass\n        {\n            public int Test(int i)\n            {\n                return i;\n            }\n        }\n    }\n}\n","csharp",[131],{"type":14,"tag":132,"props":133,"children":134},"code",{"__ignoreMap":7},[135],{"type":19,"value":128},{"type":14,"tag":30,"props":137,"children":139},{"id":138},"如何实现",[140],{"type":19,"value":138},{"type":14,"tag":15,"props":142,"children":143},{},[144,146,152],{"type":19,"value":145},"实现的关键就在于 ",{"type":14,"tag":132,"props":147,"children":149},{"className":148},[],[150],{"type":19,"value":151},"MethodInfo.CreateDelegate",{"type":19,"value":153}," 方法。这是 .NET Standard 中就有的方法，这意味着 .NET Framework 和 .NET Core 中都可以使用。",{"type":14,"tag":15,"props":155,"children":156},{},[157],{"type":19,"value":158},"此方法有两个重载：",{"type":14,"tag":160,"props":161,"children":162},"ul",{},[163,168],{"type":14,"tag":55,"props":164,"children":165},{},[166],{"type":19,"value":167},"要求传入一个类型，而这个类型就是应该转成的委托的类型",{"type":14,"tag":55,"props":169,"children":170},{},[171],{"type":19,"value":172},"要求传入一个类型和一个实例，一样的，类型是应该转成的委托的类型",{"type":14,"tag":15,"props":174,"children":175},{},[176],{"type":19,"value":177},"他们的区别在于前者创建出来的委托是直接调用那个实例方法本身，后者则更原始一些，真正调用的时候还需要传入一个实例对象。",{"type":14,"tag":15,"props":179,"children":180},{},[181,183,189],{"type":19,"value":182},"拿上面的 ",{"type":14,"tag":132,"props":184,"children":186},{"className":185},[],[187],{"type":19,"value":188},"StubClass",{"type":19,"value":190}," 来说明会更直观一些：",{"type":14,"tag":124,"props":192,"children":195},{"className":193,"code":194,"language":129,"meta":7},[127],"private class StubClass\n{\n    public int Test(int i)\n    {\n        return i;\n    }\n}\n",[196],{"type":14,"tag":132,"props":197,"children":198},{"__ignoreMap":7},[199],{"type":19,"value":194},{"type":14,"tag":15,"props":201,"children":202},{},[203,205,211,213,219],{"type":19,"value":204},"前者得到的委托相当于 ",{"type":14,"tag":132,"props":206,"children":208},{"className":207},[],[209],{"type":19,"value":210},"int Test(int i)",{"type":19,"value":212}," 方法，后者得到的委托相当于 ",{"type":14,"tag":132,"props":214,"children":216},{"className":215},[],[217],{"type":19,"value":218},"int Test(StubClass instance, int i)",{"type":19,"value":220}," 方法。（在 IL 里实例的方法其实都是后者，而前者更像 C# 中的代码，容易理解。）",{"type":14,"tag":15,"props":222,"children":223},{},[224,226,232],{"type":19,"value":225},"单独使用 ",{"type":14,"tag":132,"props":227,"children":229},{"className":228},[],[230],{"type":19,"value":231},"CreateDelegate",{"type":19,"value":233}," 方法可能每次都需要尝试第一个参数到底应该传入些什么，于是我将其封装成了泛型版本，增加易用性。",{"type":14,"tag":124,"props":235,"children":238},{"className":236,"code":237,"language":129,"meta":7},[127],"using System;\nusing System.Linq;\nusing System.Reflection;\nusing System.Diagnostics.Contracts;\n\nnamespace Walterlv.Demo\n{\n    public static class InstanceMethodBuilder\u003CT, TReturnValue>\n    {\n        /// \u003Csummary>\n        /// 调用时就像 var result = func(t)。\n        /// \u003C/summary>\n        [Pure]\n        public static Func\u003CT, TReturnValue> CreateInstanceMethod\u003CTInstanceType>(TInstanceType instance, MethodInfo method)\n        {\n            if (instance == null) throw new ArgumentNullException(nameof(instance));\n            if (method == null) throw new ArgumentNullException(nameof(method));\n\n            return (Func\u003CT, TReturnValue>) method.CreateDelegate(typeof(Func\u003CT, TReturnValue>), instance);\n        }\n\n        /// \u003Csummary>\n        /// 调用时就像 var result = func(this, t)。\n        /// \u003C/summary>\n        [Pure]\n        public static Func\u003CTInstanceType, T, TReturnValue> CreateMethod\u003CTInstanceType>(MethodInfo method)\n        {\n            if (method == null)\n                throw new ArgumentNullException(nameof(method));\n\n            return (Func\u003CTInstanceType, T, TReturnValue>) method.CreateDelegate(typeof(Func\u003CTInstanceType, T, TReturnValue>));\n        }\n    }\n}\n",[239],{"type":14,"tag":132,"props":240,"children":241},{"__ignoreMap":7},[242],{"type":19,"value":237},{"type":14,"tag":15,"props":244,"children":245},{},[246,248,257,263],{"type":19,"value":247},"泛型的多参数版本可以使用泛型类型生成器生成，我在 ",{"type":14,"tag":249,"props":250,"children":254},"a",{"href":251,"rel":252},"http://blog.csdn.net/WPwalter/article/details/79216183",[253],"nofollow",[255],{"type":19,"value":256},"生成代码，从 ",{"type":14,"tag":132,"props":258,"children":260},{"className":259},[],[261],{"type":19,"value":262},"到",{"type":19,"value":264}," —— 自动生成多个类型的泛型 - 吕毅 一文中写了一个泛型生成器，可以稍加修改以便适应这种泛型类。",{"title":7,"searchDepth":266,"depth":266,"links":267},2,[268,270],{"id":32,"depth":269,"text":32},3,{"id":138,"depth":269,"text":138},"markdown","content:dotnet:2020-11-13-Reflection-Method.md","content","dotnet/2020-11-13-Reflection-Method.md","md","2020-11-13",[278,288,413,462,514,527,639],{"title":279,"_path":280,"children":281},"Art","/art",[282,285],{"title":283,"_path":284},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":286,"_path":287},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":289,"_path":290,"children":291},"Dotnet","/dotnet",[292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,401,404,407,410],{"title":293,"_path":294},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":296,"_path":297},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":299,"_path":300},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":302,"_path":303},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":305,"_path":306},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":308,"_path":309},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":311,"_path":312},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":314,"_path":315},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":317,"_path":318},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":320,"_path":321},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":323,"_path":324},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":326,"_path":327},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":329,"_path":330},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":332,"_path":333},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":335,"_path":336},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":338,"_path":339},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":341,"_path":342},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":344,"_path":345},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":347,"_path":348},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":350,"_path":351},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":353,"_path":354},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":356,"_path":357},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":359,"_path":360},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":362,"_path":363},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":365,"_path":366},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":368,"_path":369},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":371,"_path":372},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":374,"_path":375},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":377,"_path":378},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":380,"_path":381},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":383,"_path":384},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":386,"_path":387},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":389,"_path":390},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":392,"_path":393},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":395,"_path":396},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":398,"_path":399},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":8,"_path":4},{"title":402,"_path":403},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":405,"_path":406},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":408,"_path":409},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":411,"_path":412},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":414,"_path":415,"children":416},"Game","/game",[417,420,423,426,429,432,435,438,441,444,447,450,453,456,459],{"title":418,"_path":419},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":421,"_path":422},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":424,"_path":425},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":427,"_path":428},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":430,"_path":431},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":433,"_path":434},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":436,"_path":437},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":439,"_path":440},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":442,"_path":443},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":445,"_path":446},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":448,"_path":449},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":451,"_path":452},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":454,"_path":455},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":457,"_path":458},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":460,"_path":461},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":463,"_path":464,"children":465},"Gyj","/gyj",[466,469,472,475,478,481,484,487,490,493,496,499,502,505,508,511],{"title":467,"_path":468},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":470,"_path":471},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":473,"_path":474},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":476,"_path":477},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":479,"_path":480},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":482,"_path":483},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":485,"_path":486},"玩法","/gyj/2022-08-22-wanfa",{"title":488,"_path":489},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":491,"_path":492},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":494,"_path":495},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":497,"_path":498},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":500,"_path":501},"门派内容相关","/gyj/2022-11-17-sect",{"title":503,"_path":504},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":506,"_path":507},"种植","/gyj/2022-12-01-zhongzhi",{"title":509,"_path":510},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":512,"_path":513},"跑商","/gyj/2023-11-01-paoshang",{"title":515,"_path":516,"children":517},"Js","/js",[518,521,524],{"title":519,"_path":520},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":522,"_path":523},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":525,"_path":526},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":528,"_path":529,"children":530},"Tool","/tool",[531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,576,579,582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636],{"title":532,"_path":533},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":535,"_path":536},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":538,"_path":539},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":541,"_path":542},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":544,"_path":545},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":547,"_path":548},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":550,"_path":551},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":553,"_path":554},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":556,"_path":557},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":559,"_path":560},"mac下brew 使用","/tool/2020-01-13-brew",{"title":562,"_path":563},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":565,"_path":566},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":568,"_path":569},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":571,"_path":572},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":574,"_path":575},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":577,"_path":578},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":580,"_path":581},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":583,"_path":584},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":586,"_path":587},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":589,"_path":590},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":592,"_path":593},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":595,"_path":596},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":598,"_path":599},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":601,"_path":602},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":604,"_path":605},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":607,"_path":608},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":610,"_path":611},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":613,"_path":614},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":616,"_path":617},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":619,"_path":620},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":622,"_path":623},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":625,"_path":626},"rider的使用","/tool/2022-08-02-rider-use",{"title":628,"_path":629},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":631,"_path":632},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":634,"_path":635},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":637,"_path":638},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":640,"_path":641,"children":642},"Unity","/unity",[643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832,835,838,841,844,847,850,853,856],{"title":644,"_path":645},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":647,"_path":648},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":650,"_path":651},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":653,"_path":654},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":656,"_path":657},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":659,"_path":660},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":662,"_path":663},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":665,"_path":666},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":668,"_path":669},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":671,"_path":672},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":674,"_path":675},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":677,"_path":678},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":680,"_path":681},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":683,"_path":684},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":686,"_path":687},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":689,"_path":690},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":692,"_path":693},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":695,"_path":696},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":698,"_path":699},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":701,"_path":702},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":704,"_path":705},"技能系统","/unity/2020-02-15-skill-system",{"title":707,"_path":708},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":710,"_path":711},"角色状态设计","/unity/2020-02-17-character-states",{"title":713,"_path":714},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":716,"_path":717},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":719,"_path":720},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":722,"_path":723},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":725,"_path":726},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":728,"_path":729},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":731,"_path":732},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":734,"_path":735},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":737,"_path":738},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":740,"_path":741},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":743,"_path":744},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":746,"_path":747},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":749,"_path":750},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":752,"_path":753},"unity的addressables","/unity/2020-09-12-addressables",{"title":755,"_path":756},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":758,"_path":759},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":761,"_path":762},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":764,"_path":765},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":767,"_path":768},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":770,"_path":771},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":773,"_path":774},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":776,"_path":777},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":779,"_path":780},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":782,"_path":783},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":785,"_path":786},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":788,"_path":789},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":791,"_path":792},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":794,"_path":795},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":797,"_path":798},"简单保存工具","/unity/2020-11-13-simple-save",{"title":800,"_path":801},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":803,"_path":804},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":806,"_path":807},"ability","/unity/2020-11-16-dotssample",{"title":809,"_path":810},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":812,"_path":813},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":815,"_path":816},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":818,"_path":819},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":821,"_path":822},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":824,"_path":825},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":827,"_path":828},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":830,"_path":831},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":833,"_path":834},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":836,"_path":837},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":839,"_path":840},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":842,"_path":843},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":845,"_path":846},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":848,"_path":849},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":851,"_path":852},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":854,"_path":855},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":857,"_path":858},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038199]