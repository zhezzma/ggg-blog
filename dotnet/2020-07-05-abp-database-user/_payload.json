[{"data":1,"prerenderedAt":962},["Reactive",2],{"content-query-061i98kH4h":3,"content-navigation-8C37fagqQL":380},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":374,"_id":375,"_source":376,"_file":377,"_extension":378,"date":379},"/dotnet/2020-07-05-abp-database-user","dotnet",false,"","关于abp的用户的一些问题","abp的dbcontext是分成两种的,一个是程序运行的dbcontext,一个是数据迁移的dbcontext",{"type":11,"children":12,"toc":367},"root",[13,21,26,36,45,54,62,67,74,103,108,113,121,126,134,145,156,164,169,177,182,190,196,202,207,216,221,226,235,243,251,259,268,276,281,289,298,303,312,320,325,353],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"数据迁移上下文",[19],{"type":20,"value":17},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25],{"type":20,"value":9},{"type":14,"tag":22,"props":27,"children":28},{},[29],{"type":14,"tag":30,"props":31,"children":33},"code",{"className":32},[],[34],{"type":20,"value":35},"PlayGroundMigrationsDbContext.cs",{"type":14,"tag":37,"props":38,"children":40},"pre",{"code":39},"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Include modules to your migration db context */\n\n            builder.ConfigurePermissionManagement();\n            builder.ConfigureSettingManagement();\n            builder.ConfigureBackgroundJobs();\n            builder.ConfigureAuditLogging();\n            builder.ConfigureIdentity();\n            builder.ConfigureIdentityServer();\n            builder.ConfigureFeatureManagement();\n            builder.ConfigureTenantManagement();\n\n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n            builder.ConfigureBlogging();\n        }\n",[41],{"type":14,"tag":30,"props":42,"children":43},{"__ignoreMap":7},[44],{"type":20,"value":39},{"type":14,"tag":22,"props":46,"children":47},{},[48],{"type":14,"tag":30,"props":49,"children":51},{"className":50},[],[52],{"type":20,"value":53},"PlayGroundDbContext.cs",{"type":14,"tag":37,"props":55,"children":57},{"code":56},"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Configure the shared tables (with included modules) here */\n\n            builder.Entity\u003CAppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n            });\n \n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n        }\n",[58],{"type":14,"tag":30,"props":59,"children":60},{"__ignoreMap":7},[61],{"type":20,"value":56},{"type":14,"tag":22,"props":63,"children":64},{},[65],{"type":20,"value":66},"我们看到他们共同执行了 builder.ConfigurePlayGround();",{"type":14,"tag":68,"props":69,"children":71},"h2",{"id":70},"为什么这样设计",[72],{"type":20,"value":73},"为什么这样设计?",{"type":14,"tag":75,"props":76,"children":77},"ul",{},[78,92],{"type":14,"tag":79,"props":80,"children":81},"li",{},[82,84],{"type":20,"value":83},"为了模块间不产生依赖,例如用户表,迁移dbcontext中使用了IdentityUser,而运行的dbcontext使用了appuser进行了对其的映射,",{"type":14,"tag":85,"props":86,"children":90},"a",{"href":87,"rel":88},"https://github.com/abpframework/abp/issues/1998",[89],"nofollow",[91],{"type":20,"value":87},{"type":14,"tag":79,"props":93,"children":94},{},[95,97],{"type":20,"value":96},"如何为user添加属性.",{"type":14,"tag":85,"props":98,"children":101},{"href":99,"rel":100},"https://github.com/abpframework/abp/issues/2453",[89],[102],{"type":20,"value":99},{"type":14,"tag":15,"props":104,"children":106},{"id":105},"如何共用user",[107],{"type":20,"value":105},{"type":14,"tag":22,"props":109,"children":110},{},[111],{"type":20,"value":112},"我们来看下定义的Iuser接口",{"type":14,"tag":37,"props":114,"children":116},{"code":115},"    public interface IUser : IAggregateRoot\u003CGuid>, IMultiTenant\n    {\n        string UserName { get; }\n\n        [CanBeNull]\n        string Email { get; }\n\n        [CanBeNull]\n        string Name  { get; }\n\n        [CanBeNull]\n        string Surname { get; }\n\n        bool EmailConfirmed { get; }\n\n        [CanBeNull]\n        string PhoneNumber { get; }\n\n        bool PhoneNumberConfirmed { get; }\n    }\n",[117],{"type":14,"tag":30,"props":118,"children":119},{"__ignoreMap":7},[120],{"type":20,"value":115},{"type":14,"tag":22,"props":122,"children":123},{},[124],{"type":20,"value":125},"dbcontext中的配置字段",{"type":14,"tag":37,"props":127,"children":129},{"code":128},"        public static void ConfigureAbpUser\u003CTUser>(this EntityTypeBuilder\u003CTUser> b)\n            where TUser : class, IUser\n        {\n            b.Property(u => u.TenantId).HasColumnName(nameof(IUser.TenantId));\n            b.Property(u => u.UserName).IsRequired().HasMaxLength(AbpUserConsts.MaxUserNameLength).HasColumnName(nameof(IUser.UserName));\n            b.Property(u => u.Email).IsRequired().HasMaxLength(AbpUserConsts.MaxEmailLength).HasColumnName(nameof(IUser.Email));\n            b.Property(u => u.Name).HasMaxLength(AbpUserConsts.MaxNameLength).HasColumnName(nameof(IUser.Name));\n            b.Property(u => u.Surname).HasMaxLength(AbpUserConsts.MaxSurnameLength).HasColumnName(nameof(IUser.Surname));\n            b.Property(u => u.EmailConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.EmailConfirmed));\n            b.Property(u => u.PhoneNumber).HasMaxLength(AbpUserConsts.MaxPhoneNumberLength).HasColumnName(nameof(IUser.PhoneNumber));\n            b.Property(u => u.PhoneNumberConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.PhoneNumberConfirmed));\n        }\n",[130],{"type":14,"tag":30,"props":131,"children":132},{"__ignoreMap":7},[133],{"type":20,"value":128},{"type":14,"tag":22,"props":135,"children":136},{},[137,139],{"type":20,"value":138},"dbcontext中的user表是如何创建,更新和使用的..",{"type":14,"tag":30,"props":140,"children":142},{"className":141},[],[143],{"type":20,"value":144},"UserLookupService.cs",{"type":14,"tag":22,"props":146,"children":147},{},[148,150],{"type":20,"value":149},"先看下查找,其中",{"type":14,"tag":30,"props":151,"children":153},{"className":152},[],[154],{"type":20,"value":155},"IdentityUserRepositoryExternalUserLookupServiceProvider : IExternalUserLookupServiceProvider,",{"type":14,"tag":37,"props":157,"children":159},{"code":158}," public async Task\u003CTUser> FindByIdAsync(Guid id, CancellationToken cancellationToken = default)\n        {\n            var localUser = await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n\n            if (ExternalUserLookupServiceProvider == null)\n            {\n                return localUser;\n            }\n\n            if (SkipExternalLookupIfLocalUserExists && localUser != null)\n            {\n                return localUser;\n            }\n\n            IUserData externalUser;\n\n            try\n            {\n                externalUser = await ExternalUserLookupServiceProvider.FindByIdAsync(id, cancellationToken);\n                if (externalUser == null)\n                {\n                    if (localUser != null)\n                    {\n                        //TODO: Instead of deleting, should be make it inactive or something like that?\n                        await WithNewUowAsync(() => _userRepository.DeleteAsync(localUser, cancellationToken: cancellationToken));\n                    }\n\n                    return null;\n                }\n            }\n            catch (Exception ex)\n            {\n                Logger.LogException(ex);\n                return localUser;\n            }\n\n            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n\n            return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n        }\n",[160],{"type":14,"tag":30,"props":161,"children":162},{"__ignoreMap":7},[163],{"type":20,"value":158},{"type":14,"tag":22,"props":165,"children":166},{},[167],{"type":20,"value":168},"根据上面代码可见,如果找不到该用户..会自动创建一个,如何继承了IUpdateUserData则会更新",{"type":14,"tag":37,"props":170,"children":172},{"code":171},"            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n",[173],{"type":14,"tag":30,"props":174,"children":175},{"__ignoreMap":7},[176],{"type":20,"value":171},{"type":14,"tag":22,"props":178,"children":179},{},[180],{"type":20,"value":181},"更新还可以通过eventbus",{"type":14,"tag":37,"props":183,"children":185},{"code":184},"    public class BlogUserSynchronizer :\n        IDistributedEventHandler\u003CEntityUpdatedEto\u003CUserEto>>,\n        ITransientDependency\n    {\n        protected IBlogUserRepository UserRepository { get; }\n        protected IBlogUserLookupService UserLookupService { get; }\n\n        public BlogUserSynchronizer(\n            IBlogUserRepository userRepository, \n            IBlogUserLookupService userLookupService)\n        {\n            UserRepository = userRepository;\n            UserLookupService = userLookupService;\n        }\n\n        public async Task HandleEventAsync(EntityUpdatedEto\u003CUserEto> eventData)\n        {\n            var user = await UserRepository.FindAsync(eventData.Entity.Id);\n            if (user == null)\n            {\n                user = await UserLookupService.FindByIdAsync(eventData.Entity.Id);\n                if (user == null)\n                {\n                    return;\n                }\n            }\n\n            if (user.Update(eventData.Entity))\n            {\n                await UserRepository.UpdateAsync(user);\n            }\n        }\n    }\n",[186],{"type":14,"tag":30,"props":187,"children":188},{"__ignoreMap":7},[189],{"type":20,"value":184},{"type":14,"tag":15,"props":191,"children":193},{"id":192},"如何给identityuser添加额外的属性",[194],{"type":20,"value":195},"如何给IdentityUser添加额外的属性",{"type":14,"tag":68,"props":197,"children":199},{"id":198},"extra-properties",[200],{"type":20,"value":201},"Extra Properties",{"type":14,"tag":22,"props":203,"children":204},{},[205],{"type":20,"value":206},"首先IdentityUser已经被定义,虽然我们可以通过dbcontext配置修改数据表的字段,,但是不能被映射,所以有了Extra Properties",{"type":14,"tag":22,"props":208,"children":209},{},[210],{"type":14,"tag":85,"props":211,"children":214},{"href":212,"rel":213},"https://docs.abp.io/zh-Hans/abp/latest/Customizing-Application-Modules-Extending-Entities",[89],[215],{"type":20,"value":212},{"type":14,"tag":68,"props":217,"children":219},{"id":218},"映射",[220],{"type":20,"value":218},{"type":14,"tag":22,"props":222,"children":223},{},[224],{"type":20,"value":225},"会在数据库中创建字段",{"type":14,"tag":22,"props":227,"children":228},{},[229],{"type":14,"tag":30,"props":230,"children":232},{"className":231},[],[233],{"type":20,"value":234},"AppUser.cs",{"type":14,"tag":37,"props":236,"children":238},{"code":237},"        public virtual string Sex { get; private set; }\n\n        private AppUser()\n        {\n\n        }\n",[239],{"type":14,"tag":30,"props":240,"children":241},{"__ignoreMap":7},[242],{"type":20,"value":237},{"type":14,"tag":22,"props":244,"children":245},{},[246],{"type":14,"tag":30,"props":247,"children":249},{"className":248},[],[250],{"type":20,"value":53},{"type":14,"tag":37,"props":252,"children":254},{"code":253},"            builder.Entity\u003CAppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n\n                b.Property(x => x.Sex).HasMaxLength(128);\n            });\n",[255],{"type":14,"tag":30,"props":256,"children":257},{"__ignoreMap":7},[258],{"type":20,"value":253},{"type":14,"tag":22,"props":260,"children":261},{},[262],{"type":14,"tag":30,"props":263,"children":265},{"className":264},[],[266],{"type":20,"value":267},"PlayGroundEfCoreEntityExtensionMappings.cs",{"type":14,"tag":37,"props":269,"children":271},{"code":270},"       public static void Configure()\n        {\n            PlayGroundModulePropertyConfigurator.Configure();\n\n            OneTimeRunner.Run(() =>\n            {\n                /* You can configure entity extension properties for the\n                 * entities defined in the used modules.\n                 *\n                 * The properties defined here becomes table fields.\n                 * If you want to use the ExtraProperties dictionary of the entity\n                 * instead of creating a new field, then define the property in the\n                 * PlayGroundDomainObjectExtensions class.\n                 *\n                 * Example:\n                 *\n                 * ObjectExtensionManager.Instance\n                 *    .MapEfCoreProperty\u003CIdentityUser, string>(\n                 *        \"MyProperty\",\n                 *        b => b.HasMaxLength(128)\n                 *    );\n                 *\n                 * See the documentation for more:\n                 * https://docs.abp.io/en/abp/latest/Customizing-Application-Modules-Extending-Entities\n                 */\n\n                ObjectExtensionManager.Instance\n                      .MapEfCoreProperty\u003CIdentityUser, string>(\n                  nameof(AppUser.Sex),\n                  b => b.HasMaxLength(128)\n                      );\n            });\n        }\n",[272],{"type":14,"tag":30,"props":273,"children":274},{"__ignoreMap":7},[275],{"type":20,"value":270},{"type":14,"tag":22,"props":277,"children":278},{},[279],{"type":20,"value":280},"我们来看看生成的迁移表",{"type":14,"tag":37,"props":282,"children":284},{"code":283},"    public partial class Added_Sex_T_User : Migration\n    {\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.AddColumn\u003Cstring>(\n                name: \"Sex\",\n                table: \"AbpUsers\",\n                maxLength: 128,\n                nullable: true);\n        }\n\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropColumn(\n                name: \"Sex\",\n                table: \"AbpUsers\");\n        }\n    }\n",[285],{"type":14,"tag":30,"props":286,"children":287},{"__ignoreMap":7},[288],{"type":20,"value":283},{"type":14,"tag":22,"props":290,"children":291},{},[292],{"type":14,"tag":293,"props":294,"children":297},"img",{"alt":295,"src":296},"image-20200714123314743","/images/2020-07-05-abp-database-migration/image-20200714123314743.png",[],{"type":14,"tag":22,"props":299,"children":300},{},[301],{"type":20,"value":302},"它时如何被添加到迁移dbcontext中的",{"type":14,"tag":22,"props":304,"children":305},{},[306],{"type":14,"tag":30,"props":307,"children":309},{"className":308},[],[310],{"type":20,"value":311},"AbpEntityTypeBuilderExtensions.cs",{"type":14,"tag":37,"props":313,"children":315},{"code":314},"        public static void ConfigureByConvention(this EntityTypeBuilder b)\n        {\n            b.TryConfigureConcurrencyStamp();\n            b.TryConfigureExtraProperties();  //配置扩展属性,就是ExtraProperties字段\n            b.TryConfigureObjectExtensions();//就是这里对象扩展,ObjectExtensionManager.Instance添加属性,然后从这里再根据类型读取出来\n            b.TryConfigureMayHaveCreator();\n            b.TryConfigureMustHaveCreator();\n            b.TryConfigureSoftDelete();\n            b.TryConfigureDeletionTime();\n            b.TryConfigureDeletionAudited();\n            b.TryConfigureCreationTime();\n            b.TryConfigureLastModificationTime();\n            b.TryConfigureModificationAudited();\n            b.TryConfigureMultiTenant();\n        }\n",[316],{"type":14,"tag":30,"props":317,"children":318},{"__ignoreMap":7},[319],{"type":20,"value":314},{"type":14,"tag":68,"props":321,"children":323},{"id":322},"同步",[324],{"type":20,"value":322},{"type":14,"tag":22,"props":326,"children":327},{},[328,330,336,338,344,346,351],{"type":20,"value":329},"你可以创建",{"type":14,"tag":331,"props":332,"children":333},"strong",{},[334],{"type":20,"value":335},"自己的表",{"type":20,"value":337},"来存储属性,而不是创建新实体并映射到同一表. 你通常复制原始实体的一些值. 例如可以将 ",{"type":14,"tag":30,"props":339,"children":341},{"className":340},[],[342],{"type":20,"value":343},"Name",{"type":20,"value":345}," 字段添加到你自己的表中,它是原表中 ",{"type":14,"tag":30,"props":347,"children":349},{"className":348},[],[350],{"type":20,"value":343},{"type":20,"value":352}," 字段的副本.",{"type":14,"tag":22,"props":354,"children":355},{},[356,358,365],{"type":20,"value":357},"在这种情况下你不需要处理迁移问题,但是需要处理数据复制问题. 当重复的值发生变化时,你应该在表中同步相同的变化. 你可以使用本地或分布式",{"type":14,"tag":85,"props":359,"children":362},{"href":360,"rel":361},"https://docs.abp.io/zh-Hans/abp/latest/Event-Bus",[89],[363],{"type":20,"value":364},"事件总线",{"type":20,"value":366},"订阅原始实体的更改事件. 这是根据来自另一个微服务的数据推荐的方法,特别是如果它们有单独的物理数据库(你可以在网络中搜索关于微服务设计的数据共享,这是一个广泛的主题).",{"title":7,"searchDepth":368,"depth":368,"links":369},2,[370,371,372,373],{"id":70,"depth":368,"text":73},{"id":198,"depth":368,"text":201},{"id":218,"depth":368,"text":218},{"id":322,"depth":368,"text":322},"markdown","content:dotnet:2020-07-05-abp-database-user.md","content","dotnet/2020-07-05-abp-database-user.md","md","2020-07-05",[381,391,516,565,617,630,742],{"title":382,"_path":383,"children":384},"Art","/art",[385,388],{"title":386,"_path":387},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":389,"_path":390},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":392,"_path":393,"children":394},"Dotnet","/dotnet",[395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,477,480,483,486,489,492,495,498,501,504,507,510,513],{"title":396,"_path":397},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":399,"_path":400},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":402,"_path":403},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":405,"_path":406},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":408,"_path":409},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":411,"_path":412},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":414,"_path":415},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":417,"_path":418},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":420,"_path":421},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":423,"_path":424},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":426,"_path":427},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":429,"_path":430},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":432,"_path":433},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":435,"_path":436},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":438,"_path":439},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":441,"_path":442},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":444,"_path":445},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":447,"_path":448},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":450,"_path":451},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":453,"_path":454},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":456,"_path":457},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":459,"_path":460},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":462,"_path":463},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":465,"_path":466},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":468,"_path":469},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":471,"_path":472},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":474,"_path":475},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":8,"_path":4},{"title":478,"_path":479},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":481,"_path":482},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":484,"_path":485},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":487,"_path":488},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":490,"_path":491},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":493,"_path":494},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":496,"_path":497},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":499,"_path":500},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":502,"_path":503},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":505,"_path":506},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":508,"_path":509},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":511,"_path":512},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":514,"_path":515},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":517,"_path":518,"children":519},"Game","/game",[520,523,526,529,532,535,538,541,544,547,550,553,556,559,562],{"title":521,"_path":522},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":524,"_path":525},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":527,"_path":528},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":530,"_path":531},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":533,"_path":534},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":536,"_path":537},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":539,"_path":540},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":542,"_path":543},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":545,"_path":546},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":548,"_path":549},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":551,"_path":552},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":554,"_path":555},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":557,"_path":558},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":560,"_path":561},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":563,"_path":564},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":566,"_path":567,"children":568},"Gyj","/gyj",[569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,614],{"title":570,"_path":571},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":573,"_path":574},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":576,"_path":577},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":579,"_path":580},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":582,"_path":583},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":585,"_path":586},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":588,"_path":589},"玩法","/gyj/2022-08-22-wanfa",{"title":591,"_path":592},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":594,"_path":595},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":597,"_path":598},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":600,"_path":601},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":603,"_path":604},"门派内容相关","/gyj/2022-11-17-sect",{"title":606,"_path":607},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":609,"_path":610},"种植","/gyj/2022-12-01-zhongzhi",{"title":612,"_path":613},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":615,"_path":616},"跑商","/gyj/2023-11-01-paoshang",{"title":618,"_path":619,"children":620},"Js","/js",[621,624,627],{"title":622,"_path":623},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":625,"_path":626},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":628,"_path":629},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":631,"_path":632,"children":633},"Tool","/tool",[634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,739],{"title":635,"_path":636},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":638,"_path":639},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":641,"_path":642},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":644,"_path":645},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":647,"_path":648},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":650,"_path":651},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":653,"_path":654},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":656,"_path":657},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":659,"_path":660},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":662,"_path":663},"mac下brew 使用","/tool/2020-01-13-brew",{"title":665,"_path":666},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":668,"_path":669},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":671,"_path":672},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":674,"_path":675},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":677,"_path":678},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":680,"_path":681},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":683,"_path":684},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":686,"_path":687},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":689,"_path":690},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":692,"_path":693},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":695,"_path":696},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":698,"_path":699},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":701,"_path":702},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":704,"_path":705},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":707,"_path":708},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":710,"_path":711},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":713,"_path":714},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":716,"_path":717},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":719,"_path":720},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":722,"_path":723},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":725,"_path":726},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":728,"_path":729},"rider的使用","/tool/2022-08-02-rider-use",{"title":731,"_path":732},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":734,"_path":735},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":737,"_path":738},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":740,"_path":741},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":743,"_path":744,"children":745},"Unity","/unity",[746,749,752,755,758,761,764,767,770,773,776,779,782,785,788,791,794,797,800,803,806,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,896,899,902,905,908,911,914,917,920,923,926,929,932,935,938,941,944,947,950,953,956,959],{"title":747,"_path":748},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":750,"_path":751},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":753,"_path":754},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":756,"_path":757},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":759,"_path":760},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":762,"_path":763},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":765,"_path":766},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":768,"_path":769},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":771,"_path":772},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":774,"_path":775},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":777,"_path":778},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":780,"_path":781},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":783,"_path":784},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":786,"_path":787},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":789,"_path":790},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":792,"_path":793},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":795,"_path":796},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":798,"_path":799},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":801,"_path":802},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":804,"_path":805},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":807,"_path":808},"技能系统","/unity/2020-02-15-skill-system",{"title":810,"_path":811},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":813,"_path":814},"角色状态设计","/unity/2020-02-17-character-states",{"title":816,"_path":817},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":819,"_path":820},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":822,"_path":823},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":825,"_path":826},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":828,"_path":829},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":831,"_path":832},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":834,"_path":835},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":837,"_path":838},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":840,"_path":841},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":843,"_path":844},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":846,"_path":847},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":849,"_path":850},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":852,"_path":853},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":855,"_path":856},"unity的addressables","/unity/2020-09-12-addressables",{"title":858,"_path":859},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":861,"_path":862},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":864,"_path":865},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":867,"_path":868},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":870,"_path":871},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":873,"_path":874},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":876,"_path":877},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":879,"_path":880},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":882,"_path":883},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":885,"_path":886},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":888,"_path":889},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":891,"_path":892},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":894,"_path":895},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":897,"_path":898},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":900,"_path":901},"简单保存工具","/unity/2020-11-13-simple-save",{"title":903,"_path":904},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":906,"_path":907},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":909,"_path":910},"ability","/unity/2020-11-16-dotssample",{"title":912,"_path":913},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":915,"_path":916},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":918,"_path":919},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":921,"_path":922},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":924,"_path":925},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":927,"_path":928},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":930,"_path":931},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":933,"_path":934},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":936,"_path":937},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":939,"_path":940},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":942,"_path":943},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":945,"_path":946},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":948,"_path":949},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":951,"_path":952},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":954,"_path":955},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":957,"_path":958},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":960,"_path":961},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038460]