[{"data":1,"prerenderedAt":1303},["Reactive",2],{"content-query-lFTuG2ruDL":3,"content-navigation-8C37fagqQL":721},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":715,"_id":716,"_source":717,"_file":718,"_extension":719,"date":720},"/dotnet/2020-02-13-csharp-run","dotnet",false,"","c#编译和运行启动原理","用C#编写的源代码被编译为一种符合CLI规范的中间语言（IL）。IL代码与资源（例如位图和字符串）一起作为一种称为程序集的可执行文件存储在磁盘上，通常具有的扩展名为.exe（应用程序）或.dll（库）。程序集包含清单，它提供有关程序集的类型、版本、区域性和安全要求等信息。",{"type":11,"children":12,"toc":703},"root",[13,20,25,38,45,51,65,104,113,182,187,196,209,215,226,231,250,256,270,275,325,331,336,358,364,369,374,380,392,410,423,429,434,439,447,454,459,464,469,474,482,487,495,500,505,510,515,520,525,532,537,542,547,555,560,565,573,578,583,588,593,598,603,608,613,621,628,639,644,649,654,659,664],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"执行C#程序时，程序集将加载到CLR中，它可能会根据清单中的信息执行不同的操作。然后，如果符合安全要求，CLR就会执行实时（JIT）编译以将IL代码转换为本机机器指令。CLR还提供与自动垃圾回收、异常处理和资源管理有关的其他服务。由CLR执行的代码有时会称为“托管代码”。",{"type":14,"tag":15,"props":26,"children":27},{},[28,30,36],{"type":19,"value":29},"[",{"type":14,"tag":31,"props":32,"children":35},"img",{"alt":33,"src":34},"什么是C#语言？作用有哪些？","/images/2020-02-13-csharp-run/094920_15170513.gif",[],{"type":19,"value":37},"]",{"type":14,"tag":15,"props":39,"children":40},{},[41],{"type":14,"tag":31,"props":42,"children":44},{"alt":31,"src":43},"/images/2020-02-13-csharp-run/v2-757e0e6e8813e7441cd758121e564729_1440w.jpg",[],{"type":14,"tag":46,"props":47,"children":49},"h2",{"id":48},"编译器",[50],{"type":19,"value":48},{"type":14,"tag":15,"props":52,"children":53},{},[54,63],{"type":14,"tag":55,"props":56,"children":60},"a",{"href":57,"rel":58},"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/",[59],"nofollow",[61],{"type":19,"value":62},"CSC.exe",{"type":19,"value":64},"是C＃编译器，可以编译您的C＃代码并生成可执行（.exe）文件，动态链接库（.dll）或代码模块（.netmodule）。",{"type":14,"tag":15,"props":66,"children":67},{},[68,75,77,84,86,93,95,102],{"type":14,"tag":55,"props":69,"children":72},{"href":70,"rel":71},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/msbuild",[59],[73],{"type":19,"value":74},"MSBuild",{"type":19,"value":76},"是Microsoft Build Engine，可用于从Visual Studio生成",{"type":14,"tag":55,"props":78,"children":81},{"href":79,"rel":80},"https://docs.microsoft.com/zh-cn/visualstudio/ide/solutions-and-projects-in-visual-studio",[59],[82],{"type":19,"value":83},"项目和解决方案",{"type":19,"value":85}," 。 此外，即使我编写了一些.cs文件和一个自定义项目文件（.xxproj）来构建它们，我们也可以使用msbuild.exe并使用",{"type":14,"tag":87,"props":88,"children":90},"code",{"className":89},[],[91],{"type":19,"value":92},"msbuild xxx.xxproj",{"type":19,"value":94},"类的命令来构建它们。 请参阅",{"type":14,"tag":55,"props":96,"children":99},{"href":97,"rel":98},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/walkthrough-creating-an-msbuild-project-file-from-scratch",[59],[100],{"type":19,"value":101},"本文档",{"type":19,"value":103}," 。",{"type":14,"tag":15,"props":105,"children":106},{},[107],{"type":14,"tag":108,"props":109,"children":110},"strong",{},[111],{"type":19,"value":112},"它们之间的关系：",{"type":14,"tag":114,"props":115,"children":116},"ol",{},[117,140,177],{"type":14,"tag":118,"props":119,"children":120},"li",{},[121,123,130,132,138],{"type":19,"value":122},"如果我只有几个.cs文件，并且想要编译它们以输出.exe及其它内容，那么csc.exe就足够了。 ",{"type":14,"tag":55,"props":124,"children":127},{"href":125,"rel":126},"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe",[59],[128],{"type":19,"value":129},"在命令行中",{"type":19,"value":131}," （ ",{"type":14,"tag":87,"props":133,"children":135},{"className":134},[],[136],{"type":19,"value":137},"by cmd.exe or other things",{"type":19,"value":139}," ） 使用它来编译代码。",{"type":14,"tag":118,"props":141,"children":142},{},[143,145,152,154,160,162,168,170,176],{"type":19,"value":144},"如果创建项目文件（.xxproj）以更好地控制资源，.cs文件和其他文件，则可以",{"type":14,"tag":55,"props":146,"children":149},{"href":147,"rel":148},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/msbuild-command-line-reference",[59],[150],{"type":19,"value":151},"在命令行中使用msbuild",{"type":19,"value":153},"来构建它们以输出.exe或其他内容。 我们应该知道的一点是，msbuild.exe不仅可以构建C＃代码，而且还可以构建",{"type":14,"tag":87,"props":155,"children":157},{"className":156},[],[158],{"type":19,"value":159},"VB.net, C++, F#",{"type":19,"value":161}," ...当我使用msbuild使用",{"type":14,"tag":87,"props":163,"children":165},{"className":164},[],[166],{"type":19,"value":167},"msbuild xx.csproj",{"type":19,"value":169},"类的命令来构建C＃代码时，它将",{"type":14,"tag":87,"props":171,"children":173},{"className":172},[],[174],{"type":19,"value":175},"call csc.exe to compile C# code and pass parameters read from the .csproj file to it",{"type":19,"value":103},{"type":14,"tag":118,"props":178,"children":179},{},[180],{"type":19,"value":181},"尽管msbuild是Visual Studio中的构建系统，但它并不依赖于Visual Studio。",{"type":14,"tag":15,"props":183,"children":184},{},[185],{"type":19,"value":186},"您可能想知道msbuild传递给特定构建的csc的信息。 在这种情况下，只需使用msbuild的详细程度开关即可：",{"type":14,"tag":188,"props":189,"children":191},"pre",{"code":190},"msbuild MyProject.csproj /target:rebuild /verbosity:diag\n",[192],{"type":14,"tag":87,"props":193,"children":194},{"__ignoreMap":7},[195],{"type":19,"value":190},{"type":14,"tag":15,"props":197,"children":198},{},[199,201,208],{"type":19,"value":200},"请参阅",{"type":14,"tag":55,"props":202,"children":205},{"href":203,"rel":204},"https://docs.microsoft.com/zh-cn/visualstudio/msbuild/obtaining-build-logs-with-msbuild?view=vs-2015&redirectedfrom=MSDN",[59],[206],{"type":19,"value":207},"使用MSBuild获取构建日志",{"type":19,"value":103},{"type":14,"tag":210,"props":211,"children":213},"h3",{"id":212},"mono系列",[214],{"type":19,"value":212},{"type":14,"tag":15,"props":216,"children":217},{},[218,220],{"type":19,"value":219},"Mono C＃编译器被认为是C＃1.0，C＃2.0，C＃3.0，C＃4.0，C＃5.0和C＃6.0（ECMA）的完整功能，并且部分支持C＃7。",{"type":14,"tag":55,"props":221,"children":224},{"href":222,"rel":223},"https://www.mono-project.com/docs/about-mono/languages/csharp/",[59],[225],{"type":19,"value":222},{"type":14,"tag":15,"props":227,"children":228},{},[229],{"type":19,"value":230},"从历史上看，存在相同编译器的各种版本。",{"type":14,"tag":232,"props":233,"children":234},"ul",{},[235,240,245],{"type":14,"tag":118,"props":236,"children":237},{},[238],{"type":19,"value":239},"gmcs：编译器以2.0 mscorlib为目标。引用2.0概要文件库（在.NET 2.0和.NET 3.5中定义的API）并公开完整的C＃3.0语言。",{"type":14,"tag":118,"props":241,"children":242},{},[243],{"type":19,"value":244},"smcs：以2.1 mscorlib为目标的编译器，以构建Moonlight应用程序。 引用2.1概要文件库（为Silverlight定义的API）并公开完整的C＃3.0语言。这是用于创建Silverlight / Moonlight应用程序的编译器。",{"type":14,"tag":118,"props":246,"children":247},{},[248],{"type":19,"value":249},"dmcs：编译器针对4.0 mscorlib。引用4.0概要文件库（.NET 4.0中定义的API）并支持C＃4.0。",{"type":14,"tag":46,"props":251,"children":253},{"id":252},"编译为-msil",[254],{"type":19,"value":255},"编译为 MSIL",{"type":14,"tag":15,"props":257,"children":258},{},[259,261,268],{"type":19,"value":260},"编译为托管代码时，编译器将源代码转换为 Microsoft 中间语言 (MSIL)，这是一组独立于 CPU 且可以有效地转换为本机代码的说明。 MSIL 包括有关加载、存储、初始化和调用对象方法的说明，以及有关算术和逻辑运算、控制流、直接内存访问、异常处理和其他操作的说明。 代码可以运行之前，必须将 MSIL 转换为特定于 CPU 的代码，通常通过 ",{"type":14,"tag":55,"props":262,"children":265},{"href":263,"rel":264},"https://docs.microsoft.com/zh-cn/dotnet/standard/managed-execution-process?redirectedfrom=MSDN#compiling_msil_to_native_code",[59],[266],{"type":19,"value":267},"实时 (JIT) 编译器",{"type":19,"value":269},"实现。 由于公共语言运行时为其支持的每个计算机基础结构提供一个或多个 JIT 编译器，同一组的 MSIL 可以在任何受支持的基础结构上进行 JIT 编译和运行。",{"type":14,"tag":15,"props":271,"children":272},{},[273],{"type":19,"value":274},"当编译器生成 MSIL 时，它还生成元数据。 元数据描述代码中的类型，包括每种类型的定义、每种类型的成员的签名、代码引用的成员以及运行时在执行时间使用的其他数据。 MSIL 和元数据包含在一个可移植的可执行 (PE) 文件中，该文件基于且扩展已发布的 Microsoft PE 和历来用于可执行内容的通用对象文件格式 (COFF)。 容纳 MSIL 或本机代码以及元数据的这种文件格式使操作系统能够识别公共语言运行时映像。 文件中元数据的存在以及 MSIL 使代码能够描述自身，这意味着将不需要类型库或接口定义语言 (IDL)。 运行时在执行期间会根据需要从文件中查找并提取元数据。",{"type":14,"tag":276,"props":277,"children":278},"blockquote",{},[279,287,310,315,320],{"type":14,"tag":15,"props":280,"children":281},{},[282],{"type":14,"tag":108,"props":283,"children":284},{},[285],{"type":19,"value":286},"什么是非托管代码(unmanaged code)？",{"type":14,"tag":15,"props":288,"children":289},{},[290,295,305],{"type":14,"tag":108,"props":291,"children":292},{},[293],{"type":19,"value":294},"非托管代码，直接编译成目标计算机码，在",{"type":14,"tag":55,"props":296,"children":299},{"href":297,"rel":298},"http://baike.baidu.com/view/159628.htm",[59],[300],{"type":14,"tag":108,"props":301,"children":302},{},[303],{"type":19,"value":304},"公共语言运行库",{"type":14,"tag":108,"props":306,"children":307},{},[308],{"type":19,"value":309},"环境的外部，由操作系统直接执行的代码，代码必须自己提供垃圾回收，类型检查，安全支持等服务。如需要内存管理等服务，必须显示调用操作系统的接口，通常调用Windows SDK所提供的API来实现内存管理。",{"type":14,"tag":15,"props":311,"children":312},{},[313],{"type":19,"value":314},"当项目选择名字以MFC，ATL，Win32开头的项目类型，那么这个项目所产生的就是非托管程序。",{"type":14,"tag":15,"props":316,"children":317},{},[318],{"type":19,"value":319},"非托管代码就是在Visual Studio .NET 2002发布之前所创建的代码。例如Visual Basic 6, Visual C++ 6, 最糟糕的是，连那些依然残存在你的硬盘中、拥有超过15年历史的陈旧C编译器所产生的代码都是非托管代码。托管代码直接编译成目标计算机的机械码，这些代码只能运行在编译出它们的计算机上，或者是其它相同处理器或者几乎一样处理器的计算机上。非托管代码不能享受一些运行库所提供的服务，例如安全和内存管理等。如果非托管代码需要进行内存管理等服务，就必须显式地调用操作系统的接口，通常来说，它们会调用Windows SDK所提供的API来实现。就最近的情况来看，非托管程序会通过COM接口来获取操作系统服务。",{"type":14,"tag":15,"props":321,"children":322},{},[323],{"type":19,"value":324},"跟Visual Studio平台的其他编程语言不一样，Visual C++可以创建非托管程序。当你创建一个项目，并且选择名字以M FC，ATL或者Win32开头的项目类型，那么这个项目所产生的就是非托管程序。",{"type":14,"tag":46,"props":326,"children":328},{"id":327},"将-msil-编译为本机代码",[329],{"type":19,"value":330},"将 MSIL 编译为本机代码",{"type":14,"tag":15,"props":332,"children":333},{},[334],{"type":19,"value":335},"运行 Microsoft 中间语言 (MSIL) 前，必须根据CLR公共语言运行时将其编译为目标计算机基础结构的本机代码。 .NET Framework 提供两种方法来执行此转换：",{"type":14,"tag":232,"props":337,"children":338},{},[339,344],{"type":14,"tag":118,"props":340,"children":341},{},[342],{"type":19,"value":343},".NET Framework 实时 (JIT) 编译器。",{"type":14,"tag":118,"props":345,"children":346},{},[347,349,356],{"type":19,"value":348},".NET Framework ",{"type":14,"tag":55,"props":350,"children":353},{"href":351,"rel":352},"https://docs.microsoft.com/zh-cn/dotnet/framework/tools/ngen-exe-native-image-generator",[59],[354],{"type":19,"value":355},"Ngen.exe（本机映像生成器）",{"type":19,"value":357},"。",{"type":14,"tag":210,"props":359,"children":361},{"id":360},"由-jit-编译器编译",[362],{"type":19,"value":363},"由 JIT 编译器编译",{"type":14,"tag":15,"props":365,"children":366},{},[367],{"type":19,"value":368},"在加载和执行程序集的内容时，JIT 编译在应用程序运行时按需将 MSIL 转换为本机代码。 由于公共语言运行时为每个受支持的 CPU 基础结构提供 JIT 编译器，开发人员可以构建一组 MSIL 程序集，这些程序集可以进行 JIT 编译并可在具有不同计算机基础结构的不同计算机上运行。 但是，如果你的托管代码调用特定于平台的本机 API 或特定于平台的类库，它将仅在该操作系统上运行。",{"type":14,"tag":15,"props":370,"children":371},{},[372],{"type":19,"value":373},"JIT 编译将执行期间可能永远不会调用的某些代码的可能性考虑在内。 它根据需要在执行期间转换 MSIL，而不是使用时间和内存来将 PE 文件中所有 MSIL 转换为本机代码，并在内存中存储生成的本机代码，以便该进程上下文中的后续调用可以对其进行访问。 加载类型并将其初始化时，加载程序创建并将存根附加到类型中的每个方法。 第一次调用某个方法时，存根将控件传递给 JIT 编译器，后者将该方法的 MSIL 转换为本机代码，并将存根修改为直接指向生成的本机代码。 因此，对 JIT 编译的方法的后续调用会直接转到本机代码。",{"type":14,"tag":210,"props":375,"children":377},{"id":376},"使用-ngenexe-的安装时代码生成",[378],{"type":19,"value":379},"使用 NGen.exe 的安装时代码生成",{"type":14,"tag":15,"props":381,"children":382},{},[383,385,390],{"type":19,"value":384},"由于在调用该程序集中定义的各个方法时，JIT 编译器将程序集的 MSIL 转换为本机代码，因此它在运行时中对性能产生负面影响。 在大多数情况下，这种性能降低的程度是可以接受的。 更为重要的是，由 JIT 编译器生成的代码会绑定到触发编译的进程上。 它无法在多个进程之间进行共享。 若要允许生成的代码跨应用程序的多个调用或跨共享一组程序集的多个进程进行共享，则公共语言运行时支持预编译模式。 这种预编译模式使用 ",{"type":14,"tag":55,"props":386,"children":388},{"href":351,"rel":387},[59],[389],{"type":19,"value":355},{"type":19,"value":391},"将 MSIL 程序集转换为本机代码，非常类似 JIT 编译器执行的操作。 但是，Ngen.exe 的操作在三个方面不同于 JIT 编译器的操作：",{"type":14,"tag":232,"props":393,"children":394},{},[395,400,405],{"type":14,"tag":118,"props":396,"children":397},{},[398],{"type":19,"value":399},"它在运行应用程序之前而非运行该应用程序时，将 MSIL 转换为本机代码。",{"type":14,"tag":118,"props":401,"children":402},{},[403],{"type":19,"value":404},"它一次编译整个程序集，而不是一次编译一种方法。",{"type":14,"tag":118,"props":406,"children":407},{},[408],{"type":19,"value":409},"它将本机映像缓存中生成的代码作为磁盘上的文件保存。",{"type":14,"tag":276,"props":411,"children":412},{},[413,418],{"type":14,"tag":15,"props":414,"children":415},{},[416],{"type":19,"value":417},"基本上每个人都知道的是，所有.Net语言都将被编译成为一个叫做IL汇编的中间语言。但是计算机是如何执行这个中间代码的，却是很多人不知道，甚至理解错误了的。JIT是.NET程序运行的重要部件之一，全称是即时编译器。很多人都以为JIT其实就是跟Java VM差不多的东西，是一个Interpreter，在运行时读取IL汇编代码，然后模拟成x86代码（也就是俗称的虚拟机）。但是事实上，.NET使用的是更为高级的技术。 .Net程序被加载入内存以后，当某段IL代码被第一次运行的时候，JIT编译器就会将这段IL代码，全部编译成本地代码，然后再执行。这也就是为什么.NET程序第一次运行都启动很慢的原因！ 随.NET库，微软还附带了一个工具，可以事先将.NET程序所有的IL代码都编译成本地代码并保存在缓存区中，这样一来，这个程序就跟c++编译的一模一样了，没有任何区别，运行时也可以脱离JIT了（这里不要混淆了，这里不是说可以脱离.NET库，而是说不需要在进行即时编译这个过程了）。所以，请不要将.NET和Java混为一谈，两个的运行效率根本不是一个等级的！",{"type":14,"tag":15,"props":419,"children":420},{},[421],{"type":19,"value":422},"JIT的优化指的是可以针对本地CPU，在编译时进行优化。传统程序在编译时，为了保证兼容性，通常使用最通用的指令集（比如古老的386指令集）来编译。而JIT知道CPU的具体类型，可以充分利用这些附加指令集进行编译，这样的性能提升是很可观的。",{"type":14,"tag":424,"props":425,"children":427},"h1",{"id":426},"运行",[428],{"type":19,"value":426},{"type":14,"tag":15,"props":430,"children":431},{},[432],{"type":19,"value":433},"PE（Portable Execute）文件是Windows下可执行文件的总称，常见的有DLL，EXE，OCX，SYS等，事实上，一个文件是否是PE文件与其扩展名无关，PE文件可以是任何扩展名。那Windows是怎么区分可执行文件和非可执行文件的呢？我们调用LoadLibrary传递了一个文件名，系统是如何判断这个文件是一个合法的动态库呢？这就涉及到PE文件结构了",{"type":14,"tag":15,"props":435,"children":436},{},[437],{"type":19,"value":438},"C#生成的exe既然是window下可执行文件，那也就是标准的PE文件，和普通win32的exe文件格式一样。我们来看下exe文件的格式：",{"type":14,"tag":276,"props":440,"children":441},{},[442],{"type":14,"tag":15,"props":443,"children":444},{},[445],{"type":19,"value":446},"dll文件本质上和exe一样，只是少了入口函数。",{"type":14,"tag":15,"props":448,"children":449},{},[450],{"type":14,"tag":31,"props":451,"children":453},{"alt":31,"src":452},"/images/2020-02-13-csharp-run/884430-20160313213206835-2135598609.png",[],{"type":14,"tag":15,"props":455,"children":456},{},[457],{"type":19,"value":458},"MS-DOC MZ Header和MS-DOS Stub是为了兼容DOS系统存在的，目的是使这个exe在DOS下执行时弹出一个提示\"This program cannot be run in DOS mode\"。",{"type":14,"tag":15,"props":460,"children":461},{},[462],{"type":19,"value":463},"PE Header包含了这个文件的一些信息，如：文件创建日期，文件类型，Section的数量，Optional Header的大小等等。详细可以参考Winnt.h里的结构_IMAGE_FILE_HEADER。",{"type":14,"tag":15,"props":465,"children":466},{},[467],{"type":19,"value":468},"PE Optional Header则包含了文件的版本号以及重要的基地址和AddressOfEntryPoint（RVA-Relative Virtual Address)，这是程序执行的入口地址，双击exe后就从这里开始执行。对C#程序来说，这里指向的是.net的核心库MsCorEE.dll的_CorExeMain()函数。当然这是针对XP系统的，XP以后的系统，OS Loader已经可以判断出这个PE是否包含CLR头来决定是否运行MsCorEE.dll的_CorExeMain()函数。",{"type":14,"tag":15,"props":470,"children":471},{},[472],{"type":19,"value":473},"Section有很多，包括代码节，数据节等，C#程序会把CLR头，元数据，IL放在这里面。",{"type":14,"tag":276,"props":475,"children":476},{},[477],{"type":14,"tag":15,"props":478,"children":479},{},[480],{"type":19,"value":481},"CLR是什么呢，全称Common Language Runtime，公共语言运行时，CLR主要是管理程序集，托管堆内存，异常处理和线程同步等等。",{"type":14,"tag":15,"props":483,"children":484},{},[485],{"type":19,"value":486},"CLR头具体可以参考CorHdr.h中的IMAGE_COR20_HEADER结构，如下：",{"type":14,"tag":188,"props":488,"children":490},{"code":489},"typedef struct IMAGE_COR20_HEADER\n    {\n        // CLR版本信息\n        ULONG cb;\n        USHORT MajorRuntimeVersion;\n        USHORT MinorRuntimeVersion;\n\n        IMAGE_DATA_DIRECTORY MetaData; //元数据\n        ULONG Flags;\n        ULONG EntryPointToken;  //入口函数Main的标识\n\n\n        IMAGE_DATA_DIRECTORY Resources;  //资源\n        IMAGE_DATA_DIRECTORY StrongNameSignature;  //强名称标识\n\n\n        // Regular fixup and binding information\n        IMAGE_DATA_DIRECTORY CodeManagerTable;\n        IMAGE_DATA_DIRECTORY VTableFixups;\n        IMAGE_DATA_DIRECTORY ExportAddressTableJumps;\n\n        // Precompiled image info (internal use only - set to zero)\n        IMAGE_DATA_DIRECTORY ManagedNativeHeader;\n\n    }\n    IMAGE_COR20_HEADER;\n",[491],{"type":14,"tag":87,"props":492,"children":493},{"__ignoreMap":7},[494],{"type":19,"value":489},{"type":14,"tag":15,"props":496,"children":497},{},[498],{"type":19,"value":499},"元数据很重要，验证代码类型安全，GC的对象引用跟踪还有我们常用的反射都需要用到元数据。",{"type":14,"tag":15,"props":501,"children":502},{},[503],{"type":19,"value":504},"元数据主要由定义表，引用表，清单表组成。",{"type":14,"tag":15,"props":506,"children":507},{},[508],{"type":19,"value":509},"定义表包括应用所有的类型，方法，字段，属性，参数，事件的定义,代码里任何的定义项都可以在这个表里找到，反射就是靠这个表只要一个名字就能得到属性或函数。运行时的类型安全检查也离不开它。",{"type":14,"tag":15,"props":511,"children":512},{},[513],{"type":19,"value":514},"引用表包括程序集，类型和成员的引用，我们知道GC在回收内存时先默认认为所有对象都是垃圾，然后通过线程栈上的根（cpu寄存器，局部变量，参数，静态变量）找引用的对象，能找到的说明还在使用就去掉垃圾标记，这个表可以让GC在回收内存时方便从根找到所有引用。",{"type":14,"tag":15,"props":516,"children":517},{},[518],{"type":19,"value":519},"清单表主要是程序集，文件，资源的定义。",{"type":14,"tag":15,"props":521,"children":522},{},[523],{"type":19,"value":524},"现在来看看双击后是怎样运行的：",{"type":14,"tag":15,"props":526,"children":527},{},[528],{"type":14,"tag":31,"props":529,"children":531},{"alt":31,"src":530},"/images/2020-02-13-csharp-run/884430-20160313222148397-1732805152.png",[],{"type":14,"tag":15,"props":533,"children":534},{},[535],{"type":19,"value":536},"双击文件后OS Loader加载PE文件并解析，在PE Optional Header里找到基地址和RVA，通过这两个确定了程序的入口地址，这个地址指向MsCorEE.dll的_CorExeMain()，执行它。_CorExeMain()开始执行，选择加载合适版本的CLR，CLR开始运行，CLR运行时会分配一个连续的地址空间用作托管堆，并用一个指针NextObjPtr指到开始位置，下次分配内存时就从指针指的位置开始。",{"type":14,"tag":15,"props":538,"children":539},{},[540],{"type":19,"value":541},"CLR运行后从CLR头里找到应用程序入口标识，也就是Main()方法的MethodDefToken，通过这个标识在元数据表MethodDef里找到Main方法的偏移位置，这样就可以找到Main()的IL代码。",{"type":14,"tag":15,"props":543,"children":544},{},[545],{"type":19,"value":546},"CLR检查Main方法里面是否有没加载的类型，没有的话就加载进来并在托管堆上建一个类型对象，类型对象包含静态字段，方法，基类的引用。然后给类型的方法表里每个方法一个存根，存根是用于标识是否被JIT编译过。",{"type":14,"tag":276,"props":548,"children":549},{},[550],{"type":14,"tag":15,"props":551,"children":552},{},[553],{"type":19,"value":554},"JIT: just-in-time Compiler，即时编译器。",{"type":14,"tag":15,"props":556,"children":557},{},[558],{"type":19,"value":559},"JIT编译之前CLR会对Main方法的代码进行验证，确保类型安全且元数据正确，一切没问题后先检查类型方法表里这个方法的存根，不为空的话表示已经编译过就不需要再次编译，没有的话JIT把这段IL代码编译成本地代码保存到内存中并方法表的存根做上标记，然后JIT返回编译前的位置并把原来CLR指向JIT的地址修改为指向本地代码的地址，这样函数的本地代码开始执行。程序执行到哪里就编译到哪里，没有执行到的就不会加载和编译，同样的代码再次执行的话就直接在内存里拿了，这也是为什么第一次运行C#时比较慢而后面就快的原因。这样就开始陆续执行所有的代码，程序也就跑起来了。",{"type":14,"tag":15,"props":561,"children":562},{},[563],{"type":19,"value":564},"在内存上，运行线程会把函数的参数和局部变量压入线程栈上，栈上的空间默认是1M，方法的参数和局部变量都会压到函数的栈帧上，方法里的对象在托管堆NextObjPtr指向的位置分配内存并把内存地址存到栈上的局部变量里。CLR会给托管堆上的每个对象包括对象类型都添加两个字段，一个对象类型指针，一个同步块索引。",{"type":14,"tag":276,"props":566,"children":567},{},[568],{"type":14,"tag":15,"props":569,"children":570},{},[571],{"type":19,"value":572},"说起栈帧，大家在调试代码时应该都喜欢用CallStack吧，这可以通过看调用栈很方便来定位出问题的具体原因，这个CallStack也就是方法的栈帧的具体显示，一级一级的。",{"type":14,"tag":15,"props":574,"children":575},{},[576],{"type":19,"value":577},"对象类型指针从字面上就很容易知道跟类型有关。CLR刚开始运行时就分配了一个Type的对象类型，他的对象类型指针指向自己，后面创建的对象类型的对象类型指针指针就指向这个Type，而new出来的对象的对象类型指针就指向它的类型，这样所有对象都能找到自己的类型使CLR在运行时能确保类型安全。",{"type":14,"tag":15,"props":579,"children":580},{},[581],{"type":19,"value":582},"同步块索引的格式是前6个标志位加后面26位内容（32位系统），作用则有好几个。",{"type":14,"tag":15,"props":584,"children":585},{},[586],{"type":19,"value":587},"\\1. 调用对象的gethashcode()后标志位改变一位，后26位会存储对象的hashcode，保证对象生命周期内hashcode的唯一；",{"type":14,"tag":15,"props":589,"children":590},{},[591],{"type":19,"value":592},"\\2. lock时用到，CLR会维护一个同步块数组，每项由一个指向同步块的指针和对象指针组成，lock时同样改变标识位，然后去同步块数组找一个闲置项，后26则变成这项在数组中的索引，有人要问了，刚才hashcode不是用了这26位吗，现在变了，hashcode岂不是丢了。确实，hashcode在lock之后不能直接存到索引了，不过同步块中专门准备了一个字段用来存hashcode，所以可以转移到同步块中，这样设计是为了节省内存，因为大部分情况下是不用lock的，也就不需要增加多余的同步块。",{"type":14,"tag":15,"props":594,"children":595},{},[596],{"type":19,"value":597},"另外为什么是索引而不是地址呢，因为同步块数组的大小不是固定的，随着对象的增多而变大，在内存上的位置可能会发生变化，所以用索引就不用管数组在哪个位置了。",{"type":14,"tag":15,"props":599,"children":600},{},[601],{"type":19,"value":602},"当线程进入lock后检查同步块的m_motion，发现没有标识则进入lock区域并把标识改变，如果已经有同一个线程进去则把计数器加1，如果已经有其他线程则等待。",{"type":14,"tag":15,"props":604,"children":605},{},[606],{"type":19,"value":607},"\\3. 垃圾回收时的标识，GC触发时首先认为所有的对象都是垃圾，由局部变量，寄存器，静态变量这些根向上找，凡是包含的对象都认为还有引用，在同步块索引上修改一位标识，当所有对象都遍历过后没有标识的对象就会被清掉，然后再是整理内存、修改引用地址等。",{"type":14,"tag":15,"props":609,"children":610},{},[611],{"type":19,"value":612},"看个简单的例子，只用于演示，不考虑合理性：",{"type":14,"tag":188,"props":614,"children":616},{"code":615},"using System;\n\nnamespace Test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int height = 170;\n            int weight = 60;\n            People.Find();\n            People developer = new Developer()(height, weight);\n            bool isHealthyWeight = developer.IsHealthyWeight();\n            bool isRich = developer.IsRich();\n        }\n    }\n\n    class People\n    {\n        int _height;\n        int _weight;\n\n        public People(int height, int weight)\n        {\n            _height = height;\n            _weight = weight;\n        }\n\n        public virtual bool IsRich();\n\n        public bool IsHealthyWeight()\n        {\n            var healthyWeight = (Height - 80) * 0.7;\n            return Weight \u003C= healthyWeight * 1.1 && Weight >= healthyWeight * 0.9;\n        }\n\n        public static string Find(string id) { return \"\"; }\n    }\n\n    class Developer : People\n    {\n        public Developer(int height, int weight) : base(height, weight)\n        { }\n\n        public override bool IsRich()\n        {\n            return false;\n        }\n    }\n    \n}\n",[617],{"type":14,"tag":87,"props":618,"children":619},{"__ignoreMap":7},[620],{"type":19,"value":615},{"type":14,"tag":15,"props":622,"children":623},{},[624],{"type":14,"tag":31,"props":625,"children":627},{"alt":31,"src":626},"/images/2020-02-13-csharp-run/884430-20160313222410850-1585024295.png",[],{"type":14,"tag":15,"props":629,"children":630},{},[631,633],{"type":19,"value":632},"*",{"type":14,"tag":634,"props":635,"children":636},"em",{},[637],{"type":19,"value":638},"图片不清楚可以放大看",{"type":14,"tag":15,"props":640,"children":641},{},[642],{"type":19,"value":643},"首先判断类型是否都加载，用到了int，bool，string，这些是在mscorlib.dll程序集的system命名空间下，所以先加载mscorlib.dll程序集，再把int，bool，string加到类型对象里。另外还有我们自己定义的Developer和People，也把类型对象创建好，另外也别忘了基类object，也要加载进来。（实际上还有double啊，这里就没画了）另外继承类的类型对象里面都有个字段指向基类，所以才能往上执行到基类方法表里的方法。",{"type":14,"tag":15,"props":645,"children":646},{},[647],{"type":19,"value":648},"局部变量都在线程栈上，Find()方法是静态方法，直接去People类型对象的方法表里去找，找到后看是否有存根标识，没有的话做JIT编译，有的话直接运行。",{"type":14,"tag":15,"props":650,"children":651},{},[652],{"type":19,"value":653},"developer的实例化虽然是用People定义的，但实例还是Developer，所以developer的类型对象指针指向Developer，对象里除了类型对象指针还有实例字段，包括基类的。内存分配在托管堆上，并把地址给到线程栈上的变量中。",{"type":14,"tag":15,"props":655,"children":656},{},[657],{"type":19,"value":658},"虚函数也一样，在运行时已经确定是Developer，所以会调用Developer方法表里的IsRich方法，一样先JIT，再运行。",{"type":14,"tag":15,"props":660,"children":661},{},[662],{"type":19,"value":663},"以上就是一个简单的C#程序的运行过程和在内存上的表现，本篇主要内容来自CLR via C#这本书",{"type":14,"tag":232,"props":665,"children":666},{},[667,676,685,694],{"type":14,"tag":118,"props":668,"children":669},{},[670],{"type":14,"tag":55,"props":671,"children":674},{"href":672,"rel":673},"https://www.cnblogs.com/brookshi/p/5273281.html",[59],[675],{"type":19,"value":672},{"type":14,"tag":118,"props":677,"children":678},{},[679],{"type":14,"tag":55,"props":680,"children":683},{"href":681,"rel":682},"https://docs.microsoft.com/zh-cn/dotnet/standard/managed-execution-process?redirectedfrom=MSDN#compiling_to_msil",[59],[684],{"type":19,"value":681},{"type":14,"tag":118,"props":686,"children":687},{},[688],{"type":14,"tag":55,"props":689,"children":692},{"href":690,"rel":691},"https://docs.microsoft.com/zh-cn/dotnet/standard/clr",[59],[693],{"type":19,"value":690},{"type":14,"tag":118,"props":695,"children":696},{},[697],{"type":14,"tag":55,"props":698,"children":701},{"href":699,"rel":700},"https://www.cnblogs.com/qtiger/p/11176575.html",[59],[702],{"type":19,"value":699},{"title":7,"searchDepth":704,"depth":704,"links":705},2,[706,710,711],{"id":48,"depth":704,"text":48,"children":707},[708],{"id":212,"depth":709,"text":212},3,{"id":252,"depth":704,"text":255},{"id":327,"depth":704,"text":330,"children":712},[713,714],{"id":360,"depth":709,"text":363},{"id":376,"depth":709,"text":379},"markdown","content:dotnet:2020-02-13-csharp-run.md","content","dotnet/2020-02-13-csharp-run.md","md","2020-02-13",[722,732,857,906,958,971,1083],{"title":723,"_path":724,"children":725},"Art","/art",[726,729],{"title":727,"_path":728},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":730,"_path":731},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":733,"_path":734,"children":735},"Dotnet","/dotnet",[736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,854],{"title":737,"_path":738},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":740,"_path":741},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":743,"_path":744},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":746,"_path":747},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":749,"_path":750},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":752,"_path":753},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":755,"_path":756},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":758,"_path":759},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":761,"_path":762},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":764,"_path":765},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":767,"_path":768},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":770,"_path":771},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":773,"_path":774},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":776,"_path":777},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":779,"_path":780},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":782,"_path":783},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":785,"_path":786},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":788,"_path":789},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":791,"_path":792},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":794,"_path":795},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":797,"_path":798},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":800,"_path":801},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":803,"_path":804},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":806,"_path":807},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":8,"_path":4},{"title":810,"_path":811},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":813,"_path":814},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":816,"_path":817},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":819,"_path":820},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":822,"_path":823},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":825,"_path":826},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":828,"_path":829},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":831,"_path":832},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":834,"_path":835},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":837,"_path":838},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":840,"_path":841},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":843,"_path":844},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":846,"_path":847},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":849,"_path":850},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":852,"_path":853},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":855,"_path":856},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":858,"_path":859,"children":860},"Game","/game",[861,864,867,870,873,876,879,882,885,888,891,894,897,900,903],{"title":862,"_path":863},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":865,"_path":866},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":868,"_path":869},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":871,"_path":872},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":874,"_path":875},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":877,"_path":878},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":880,"_path":881},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":883,"_path":884},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":886,"_path":887},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":889,"_path":890},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":892,"_path":893},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":895,"_path":896},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":898,"_path":899},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":901,"_path":902},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":904,"_path":905},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":907,"_path":908,"children":909},"Gyj","/gyj",[910,913,916,919,922,925,928,931,934,937,940,943,946,949,952,955],{"title":911,"_path":912},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":914,"_path":915},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":917,"_path":918},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":920,"_path":921},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":923,"_path":924},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":926,"_path":927},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":929,"_path":930},"玩法","/gyj/2022-08-22-wanfa",{"title":932,"_path":933},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":935,"_path":936},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":938,"_path":939},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":941,"_path":942},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":944,"_path":945},"门派内容相关","/gyj/2022-11-17-sect",{"title":947,"_path":948},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":950,"_path":951},"种植","/gyj/2022-12-01-zhongzhi",{"title":953,"_path":954},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":956,"_path":957},"跑商","/gyj/2023-11-01-paoshang",{"title":959,"_path":960,"children":961},"Js","/js",[962,965,968],{"title":963,"_path":964},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":966,"_path":967},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":969,"_path":970},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":972,"_path":973,"children":974},"Tool","/tool",[975,978,981,984,987,990,993,996,999,1002,1005,1008,1011,1014,1017,1020,1023,1026,1029,1032,1035,1038,1041,1044,1047,1050,1053,1056,1059,1062,1065,1068,1071,1074,1077,1080],{"title":976,"_path":977},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":979,"_path":980},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":982,"_path":983},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":985,"_path":986},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":988,"_path":989},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":991,"_path":992},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":994,"_path":995},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":997,"_path":998},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1000,"_path":1001},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1003,"_path":1004},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1006,"_path":1007},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1009,"_path":1010},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1012,"_path":1013},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1015,"_path":1016},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1018,"_path":1019},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1021,"_path":1022},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1024,"_path":1025},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1027,"_path":1028},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1030,"_path":1031},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1033,"_path":1034},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1036,"_path":1037},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1039,"_path":1040},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1042,"_path":1043},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1045,"_path":1046},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1048,"_path":1049},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1051,"_path":1052},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1054,"_path":1055},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1057,"_path":1058},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1060,"_path":1061},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1063,"_path":1064},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1066,"_path":1067},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1069,"_path":1070},"rider的使用","/tool/2022-08-02-rider-use",{"title":1072,"_path":1073},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1075,"_path":1076},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1078,"_path":1079},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1081,"_path":1082},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1084,"_path":1085,"children":1086},"Unity","/unity",[1087,1090,1093,1096,1099,1102,1105,1108,1111,1114,1117,1120,1123,1126,1129,1132,1135,1138,1141,1144,1147,1150,1153,1156,1159,1162,1165,1168,1171,1174,1177,1180,1183,1186,1189,1192,1195,1198,1201,1204,1207,1210,1213,1216,1219,1222,1225,1228,1231,1234,1237,1240,1243,1246,1249,1252,1255,1258,1261,1264,1267,1270,1273,1276,1279,1282,1285,1288,1291,1294,1297,1300],{"title":1088,"_path":1089},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1091,"_path":1092},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1094,"_path":1095},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1097,"_path":1098},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1100,"_path":1101},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1103,"_path":1104},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1106,"_path":1107},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1109,"_path":1110},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1112,"_path":1113},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1115,"_path":1116},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":1118,"_path":1119},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":1121,"_path":1122},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1124,"_path":1125},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1127,"_path":1128},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1130,"_path":1131},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1133,"_path":1134},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1136,"_path":1137},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1139,"_path":1140},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1142,"_path":1143},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1145,"_path":1146},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1148,"_path":1149},"技能系统","/unity/2020-02-15-skill-system",{"title":1151,"_path":1152},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1154,"_path":1155},"角色状态设计","/unity/2020-02-17-character-states",{"title":1157,"_path":1158},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1160,"_path":1161},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1163,"_path":1164},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1166,"_path":1167},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1169,"_path":1170},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1172,"_path":1173},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1175,"_path":1176},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1178,"_path":1179},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1181,"_path":1182},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1184,"_path":1185},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1187,"_path":1188},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1190,"_path":1191},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1193,"_path":1194},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1196,"_path":1197},"unity的addressables","/unity/2020-09-12-addressables",{"title":1199,"_path":1200},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1202,"_path":1203},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1205,"_path":1206},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1208,"_path":1209},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1211,"_path":1212},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1214,"_path":1215},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1217,"_path":1218},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1220,"_path":1221},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1223,"_path":1224},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1226,"_path":1227},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1229,"_path":1230},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1232,"_path":1233},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1235,"_path":1236},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1238,"_path":1239},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1241,"_path":1242},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1244,"_path":1245},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1247,"_path":1248},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1250,"_path":1251},"ability","/unity/2020-11-16-dotssample",{"title":1253,"_path":1254},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1256,"_path":1257},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1259,"_path":1260},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1262,"_path":1263},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1265,"_path":1266},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1268,"_path":1269},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1271,"_path":1272},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1274,"_path":1275},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1277,"_path":1278},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1280,"_path":1281},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1283,"_path":1284},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1286,"_path":1287},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1289,"_path":1290},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1292,"_path":1293},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1295,"_path":1296},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1298,"_path":1299},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1301,"_path":1302},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040533]