[{"data":1,"prerenderedAt":881},["Reactive",2],{"content-query-MXvGQSodo3":3,"content-navigation-8C37fagqQL":299},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":293,"_id":294,"_source":295,"_file":296,"_extension":297,"date":298},"/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation","dotnet",false,"","快节奏多人游戏同步(2)-客户端预测与服务器校对","PART 1 概述在第一篇文章中，我们介绍了一种权威服务器的C-S模型，在这种模型中，客户端只将输入发送到服务器中，当收到来自服务器的游戏状态更新的时候再将结果渲染出来。单纯地依赖这种模型会导致玩家输入命令和画面更新之间的延迟感，比如，当玩家按下向右的按钮，然后玩家等了半秒钟才开始移动，因为首先客户端需要把输入传给服务器，然后服务器处理了出入之后计算出新的游戏状态，然后再将新的游戏状态传回给客户端。在实际的网络环境中，延迟可能会达到零点几秒，这时游戏就有点感觉延迟了，最坏的情况是直接没法玩了。在这篇文章中，我们将找到减小这种延迟感的方法，甚至能够消除这种延迟。PART 2 客户端预测虽然存在着",{"type":11,"children":12,"toc":284},"root",[13,22,28,33,42,47,53,58,63,68,76,81,86,94,99,105,110,115,123,169,174,180,185,190,198,203,208,213,238,244,249,254,259,265,270],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"part-1-概述",[19],{"type":20,"value":21},"text","PART 1 概述",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26],{"type":20,"value":27},"在第一篇文章中，我们介绍了一种权威服务器的C-S模型，在这种模型中，客户端只将输入发送到服务器中，当收到来自服务器的游戏状态更新的时候再将结果渲染出来。",{"type":14,"tag":23,"props":29,"children":30},{},[31],{"type":20,"value":32},"单纯地依赖这种模型会导致玩家输入命令和画面更新之间的延迟感，比如，当玩家按下向右的按钮，然后玩家等了半秒钟才开始移动，因为首先客户端需要把输入传给服务器，然后服务器处理了出入之后计算出新的游戏状态，然后再将新的游戏状态传回给客户端。",{"type":14,"tag":23,"props":34,"children":35},{},[36],{"type":14,"tag":37,"props":38,"children":41},"img",{"alt":39,"src":40},"Effect of network delays.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-01.png",[],{"type":14,"tag":23,"props":43,"children":44},{},[45],{"type":20,"value":46},"在实际的网络环境中，延迟可能会达到零点几秒，这时游戏就有点感觉延迟了，最坏的情况是直接没法玩了。在这篇文章中，我们将找到减小这种延迟感的方法，甚至能够消除这种延迟。",{"type":14,"tag":15,"props":48,"children":50},{"id":49},"part-2-客户端预测",[51],{"type":20,"value":52},"PART 2 客户端预测",{"type":14,"tag":23,"props":54,"children":55},{},[56],{"type":20,"value":57},"虽然存在着作弊的玩家，但是大部分时候服务器是处理有效访问的（来自非作弊玩家的），这也意味着服务器收到大部分的输入都是有效的，而且游戏状态的更新也是按照预期的，也即是说：如果你的角色在（10，10），然后方向键右被按下了，那么你的角色就会移动到（11，10）。",{"type":14,"tag":23,"props":59,"children":60},{},[61],{"type":20,"value":62},"我们可以利用这一点，如果游戏世界的确定性足够（给定一个游戏状态和一些列的输入，得到的结果是完全可预测的）。",{"type":14,"tag":23,"props":64,"children":65},{},[66],{"type":20,"value":67},"现在假设有100ms的延迟，角色移动一格需要花费100ms，使用之前说的实现方式，那么整个动作完成需要花费200ms:",{"type":14,"tag":23,"props":69,"children":70},{},[71],{"type":14,"tag":37,"props":72,"children":75},{"alt":73,"src":74},"Network delay + animation.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-02.png",[],{"type":14,"tag":23,"props":77,"children":78},{},[79],{"type":20,"value":80},"因为游戏世界是确定的，我们假设传送到服务器的输入都能够成功执行。在这种假设下，客户端能够预测游戏世界在接受输入后的状态，并且绝大部分情况下，结果是正确的。",{"type":14,"tag":23,"props":82,"children":83},{},[84],{"type":20,"value":85},"与之前说的将客户端的输入发送到客户端然后等待服务器的响应再在客户端做出反应，我们可以将两者同时进行，即当在发送输入信息的时候，就当作它们已经正确执行，通常服务器返回的结果和客户端的执行的结果是一致的:",{"type":14,"tag":23,"props":87,"children":88},{},[89],{"type":14,"tag":37,"props":90,"children":93},{"alt":91,"src":92},"Animation plays while the server confirms the action.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-03.png",[],{"type":14,"tag":23,"props":95,"children":96},{},[97],{"type":20,"value":98},"现在玩家输入和运行结果之间就没有任何延迟存在了，同时服务器还是权威服务器。（如果有作弊的客户端发送无用的消息，他可以把角色放在他想要的任何地方，但这并不会影响到服务器，也就是其他玩家也不会受到他的影响）。",{"type":14,"tag":15,"props":100,"children":102},{"id":101},"part-3-同步问题",[103],{"type":20,"value":104},"PART 3 同步问题",{"type":14,"tag":23,"props":106,"children":107},{},[108],{"type":20,"value":109},"在上面的例子里，我选用了一些比较特例的数字来让所有事情看起都很完美，现在假设另一种情况，假设现在服务器延时250ms，移动一格花费100ms，现在玩家按了两下方向键右，想要往右移动两格。",{"type":14,"tag":23,"props":111,"children":112},{},[113],{"type":20,"value":114},"使用之前我们说的技术，情况如下图所示",{"type":14,"tag":23,"props":116,"children":117},{},[118],{"type":14,"tag":37,"props":119,"children":122},{"alt":120,"src":121},"Predicted state and authoritative state mismatch.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-04.png",[],{"type":14,"tag":23,"props":124,"children":125},{},[126,128,134,136,141,143,148,150,154,156,160,162,167],{"type":20,"value":127},"于是我们在 ",{"type":14,"tag":129,"props":130,"children":131},"strong",{},[132],{"type":20,"value":133},"t = 250 ms",{"type":20,"value":135}," 的时候就会面临一个非常 interesting 的问题，当接收到新的游戏状态时，客户端预测的位置已经到达 ",{"type":14,"tag":129,"props":137,"children":138},{},[139],{"type":20,"value":140},"x = 12",{"type":20,"value":142},"，但是服务器认为最新的坐标是 ",{"type":14,"tag":129,"props":144,"children":145},{},[146],{"type":20,"value":147},"x = 11",{"type":20,"value":149},"，因为权威服务器的缘故，客户端必须将角色移回 ",{"type":14,"tag":129,"props":151,"children":152},{},[153],{"type":20,"value":147},{"type":20,"value":155},"，但是紧接着，新的 ",{"type":14,"tag":129,"props":157,"children":158},{},[159],{"type":20,"value":140},{"type":20,"value":161}," 的状态在 ",{"type":14,"tag":129,"props":163,"children":164},{},[165],{"type":20,"value":166},"t = 350",{"type":20,"value":168}," 的时间到达，因此角色的位置又顺移回去了。。",{"type":14,"tag":23,"props":170,"children":171},{},[172],{"type":20,"value":173},"从玩家的角度来看，他按下两次向右按钮后，角色向右移动两格，原地停留50ms后，向左顺移一格，又原地停留100ms再向右顺移一格，很明显这种情况令人难以接受。",{"type":14,"tag":15,"props":175,"children":177},{"id":176},"part-4-服务器校对",[178],{"type":20,"value":179},"PART 4 服务器校对",{"type":14,"tag":23,"props":181,"children":182},{},[183],{"type":20,"value":184},"解决上面说的问题的办法就是你得意识到，客户端所看到的世界是当前的，但是因为延迟，客户端得到的游戏状态都是过去的，当服务器在发送更新的时候，它并没有把客户端发来的所有的命令都处理掉。",{"type":14,"tag":23,"props":186,"children":187},{},[188],{"type":20,"value":189},"这并不是一个非常严重的问题，首先，客户端在每次请求的时候加上一个编号，在我们的例子中，第一次按键请求编号为 #1，第二次按键的请求编号为 #2。服务器回复的时候将其处理过最后一个请求的编号包含在消息中。",{"type":14,"tag":23,"props":191,"children":192},{},[193],{"type":14,"tag":37,"props":194,"children":197},{"alt":195,"src":196},"Client-side prediction + server reconciliation.","/images/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation/fpm2-05.png",[],{"type":14,"tag":23,"props":199,"children":200},{},[201],{"type":20,"value":202},"当t = 250的时候，服务器说“基于#1的输入请求，你的位置是11”.因为服务器是权威的，所以角色的位置是x=11， 现在假设客户端保存了一份发送到服务器的请求，基于新的游戏状态，它知道服务器已经处理了请求 #1，所以他将这个备份丢弃掉，但是客户端知道服务器还需要将#2请求的回复发过来，所以再一次进行客户端预测，客户端可以基于上次服务器发来的状态和#2输入来计算当前的状态。",{"type":14,"tag":23,"props":204,"children":205},{},[206],{"type":20,"value":207},"所以当t=250ms的时候，客户端得到“经过#1的输入之后，x=11”，它将#1输入的拷贝丢弃掉，但是还有一份并没有得到服务器返回的#2的拷贝，客户端将内部游戏状态更新为服务器所发来的游戏状态，也就是x=11，然后将所有未收到回复但已经发送给服务器的输入用于预测，在上面的例子，输入就是向右移动，最终状态就是x=12，这是正确的。当t=350的时候，一个新的游戏状态从服务器获得；这种情况它说“基于#2输入，x=12”。在这是，客户端将#2请求之前的请求都丢弃，然后将游戏状态更新为x=12，没有需要预测的输入，所以不需要预测，现在得到的结果都是正确的。",{"type":14,"tag":23,"props":209,"children":210},{},[211],{"type":20,"value":212},"客户端具体如何处理，这里有一个统一的处理方式：",{"type":14,"tag":214,"props":215,"children":216},"ul",{},[217,223,228,233],{"type":14,"tag":218,"props":219,"children":220},"li",{},[221],{"type":20,"value":222},"根据server的new state更新#1里的缓存状态",{"type":14,"tag":218,"props":224,"children":225},{},[226],{"type":20,"value":227},"回滚input到#1，将#1之后的所有缓存的操作都应用到#1的new state中进行计算，得到最新的结果",{"type":14,"tag":218,"props":229,"children":230},{},[231],{"type":20,"value":232},"客户端根据最新的结果进行更新",{"type":14,"tag":218,"props":234,"children":235},{},[236],{"type":20,"value":237},"将#1的状态和input 从缓存buffer里删除",{"type":14,"tag":15,"props":239,"children":241},{"id":240},"part-5-误差",[242],{"type":20,"value":243},"PART 5 误差",{"type":14,"tag":23,"props":245,"children":246},{},[247],{"type":20,"value":248},"上面讨论的例子里只讨论了移动，但是这个方法在其他方面也可以使用。比如，在一个回合制的游戏里，当玩家攻击其他玩家的时候，你可以播放飙血的特效和伤害值，但是你不应该在收到服务器回复之前直接更新玩家的血量。",{"type":14,"tag":23,"props":250,"children":251},{},[252],{"type":20,"value":253},"因为游戏状态的复杂性，它并不能保证是绝对可逆的，你也许希望只有再收到服务器确认的时候才将一个玩家杀死，即使这个玩家的血量降到负的了。（但假象一种情况，一个玩家实际上已经死了，但是在没有收到服务器确认之前他使用了药包，这个时候你该怎么处理？）",{"type":14,"tag":23,"props":255,"children":256},{},[257],{"type":20,"value":258},"这又带来了一个有趣的问题，即使世界是绝对的确定的，并且没有玩家在作弊，还是有客户端的预测和服务器不吻合的情况。上面说的情况在单人游戏中不会出现，但是在多人接入同一个服务器的时候就会发生，这个问题会在下面的文章中进行讨论。",{"type":14,"tag":15,"props":260,"children":262},{"id":261},"part-6-总结",[263],{"type":20,"value":264},"PART 6 总结",{"type":14,"tag":23,"props":266,"children":267},{},[268],{"type":20,"value":269},"当使用权威服务器的时候，你需要给玩家即时的响应，即使是当在等待服务器处理出入。为了达到这样的目的，客户端模拟出输入的结果，当收到服务器的回复时，客户端的游戏状态需要通过服务器的回复和还未处理的输入进行重新计算。",{"type":14,"tag":214,"props":271,"children":272},{},[273],{"type":14,"tag":218,"props":274,"children":275},{},[276],{"type":14,"tag":277,"props":278,"children":282},"a",{"href":279,"rel":280},"http://www.gabrielgambetta.com/client-side-prediction-server-reconciliation.html",[281],"nofollow",[283],{"type":20,"value":279},{"title":7,"searchDepth":285,"depth":285,"links":286},2,[287,288,289,290,291,292],{"id":17,"depth":285,"text":21},{"id":49,"depth":285,"text":52},{"id":101,"depth":285,"text":104},{"id":176,"depth":285,"text":179},{"id":240,"depth":285,"text":243},{"id":261,"depth":285,"text":264},"markdown","content:dotnet:2020-02-02-net-sync-client-side-prediction-and-server-reconciliation.md","content","dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation.md","md","2020-02-02",[300,310,435,484,536,549,661],{"title":301,"_path":302,"children":303},"Art","/art",[304,307],{"title":305,"_path":306},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":308,"_path":309},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":311,"_path":312,"children":313},"Dotnet","/dotnet",[314,317,320,323,326,329,332,335,338,341,344,347,350,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423,426,429,432],{"title":315,"_path":316},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":318,"_path":319},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":321,"_path":322},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":324,"_path":325},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":327,"_path":328},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":330,"_path":331},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":333,"_path":334},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":336,"_path":337},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":339,"_path":340},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":342,"_path":343},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":345,"_path":346},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":348,"_path":349},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":8,"_path":4},{"title":352,"_path":353},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":355,"_path":356},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":358,"_path":359},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":361,"_path":362},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":364,"_path":365},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":367,"_path":368},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":370,"_path":371},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":373,"_path":374},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":376,"_path":377},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":379,"_path":380},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":382,"_path":383},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":385,"_path":386},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":388,"_path":389},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":391,"_path":392},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":394,"_path":395},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":397,"_path":398},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":400,"_path":401},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":403,"_path":404},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":406,"_path":407},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":409,"_path":410},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":412,"_path":413},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":415,"_path":416},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":418,"_path":419},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":421,"_path":422},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":424,"_path":425},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":427,"_path":428},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":430,"_path":431},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":433,"_path":434},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":436,"_path":437,"children":438},"Game","/game",[439,442,445,448,451,454,457,460,463,466,469,472,475,478,481],{"title":440,"_path":441},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":443,"_path":444},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":446,"_path":447},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":449,"_path":450},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":452,"_path":453},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":455,"_path":456},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":458,"_path":459},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":461,"_path":462},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":464,"_path":465},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":467,"_path":468},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":470,"_path":471},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":473,"_path":474},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":476,"_path":477},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":479,"_path":480},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":482,"_path":483},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":485,"_path":486,"children":487},"Gyj","/gyj",[488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533],{"title":489,"_path":490},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":492,"_path":493},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":495,"_path":496},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":498,"_path":499},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":501,"_path":502},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":504,"_path":505},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":507,"_path":508},"玩法","/gyj/2022-08-22-wanfa",{"title":510,"_path":511},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":513,"_path":514},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":516,"_path":517},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":519,"_path":520},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":522,"_path":523},"门派内容相关","/gyj/2022-11-17-sect",{"title":525,"_path":526},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":528,"_path":529},"种植","/gyj/2022-12-01-zhongzhi",{"title":531,"_path":532},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":534,"_path":535},"跑商","/gyj/2023-11-01-paoshang",{"title":537,"_path":538,"children":539},"Js","/js",[540,543,546],{"title":541,"_path":542},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":544,"_path":545},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":547,"_path":548},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":550,"_path":551,"children":552},"Tool","/tool",[553,556,559,562,565,568,571,574,577,580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658],{"title":554,"_path":555},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":557,"_path":558},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":560,"_path":561},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":563,"_path":564},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":566,"_path":567},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":569,"_path":570},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":572,"_path":573},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":575,"_path":576},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":578,"_path":579},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":581,"_path":582},"mac下brew 使用","/tool/2020-01-13-brew",{"title":584,"_path":585},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":587,"_path":588},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":590,"_path":591},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":593,"_path":594},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":596,"_path":597},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":599,"_path":600},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":602,"_path":603},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":605,"_path":606},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":608,"_path":609},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":611,"_path":612},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":614,"_path":615},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":617,"_path":618},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":620,"_path":621},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":623,"_path":624},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":626,"_path":627},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":629,"_path":630},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":632,"_path":633},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":635,"_path":636},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":638,"_path":639},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":641,"_path":642},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":644,"_path":645},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":647,"_path":648},"rider的使用","/tool/2022-08-02-rider-use",{"title":650,"_path":651},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":653,"_path":654},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":656,"_path":657},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":659,"_path":660},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":662,"_path":663,"children":664},"Unity","/unity",[665,668,671,674,677,680,683,686,689,692,695,698,701,704,707,710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,755,758,761,764,767,770,773,776,779,782,785,788,791,794,797,800,803,806,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878],{"title":666,"_path":667},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":669,"_path":670},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":672,"_path":673},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":675,"_path":676},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":678,"_path":679},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":681,"_path":682},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":684,"_path":685},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":687,"_path":688},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":690,"_path":691},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":693,"_path":694},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":696,"_path":697},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":699,"_path":700},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":702,"_path":703},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":705,"_path":706},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":708,"_path":709},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":711,"_path":712},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":714,"_path":715},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":717,"_path":718},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":720,"_path":721},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":723,"_path":724},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":726,"_path":727},"技能系统","/unity/2020-02-15-skill-system",{"title":729,"_path":730},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":732,"_path":733},"角色状态设计","/unity/2020-02-17-character-states",{"title":735,"_path":736},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":738,"_path":739},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":741,"_path":742},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":744,"_path":745},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":747,"_path":748},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":750,"_path":751},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":753,"_path":754},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":756,"_path":757},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":759,"_path":760},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":762,"_path":763},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":765,"_path":766},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":768,"_path":769},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":771,"_path":772},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":774,"_path":775},"unity的addressables","/unity/2020-09-12-addressables",{"title":777,"_path":778},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":780,"_path":781},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":783,"_path":784},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":786,"_path":787},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":789,"_path":790},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":792,"_path":793},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":795,"_path":796},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":798,"_path":799},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":801,"_path":802},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":804,"_path":805},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":807,"_path":808},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":810,"_path":811},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":813,"_path":814},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":816,"_path":817},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":819,"_path":820},"简单保存工具","/unity/2020-11-13-simple-save",{"title":822,"_path":823},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":825,"_path":826},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":828,"_path":829},"ability","/unity/2020-11-16-dotssample",{"title":831,"_path":832},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":834,"_path":835},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":837,"_path":838},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":840,"_path":841},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":843,"_path":844},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":846,"_path":847},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":849,"_path":850},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":852,"_path":853},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":855,"_path":856},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":858,"_path":859},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":861,"_path":862},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":864,"_path":865},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":867,"_path":868},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":870,"_path":871},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":873,"_path":874},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":876,"_path":877},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":879,"_path":880},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779041011]