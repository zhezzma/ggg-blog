[{"data":1,"prerenderedAt":812},["Reactive",2],{"content-query-pr5pmGGoLp":3,"content-navigation-8C37fagqQL":230},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":224,"_id":225,"_source":226,"_file":227,"_extension":228,"date":229},"/dotnet/2020-02-03-orleans-deployment","dotnet",false,"","orleans的部署模式","过去的 10 年里，很多公司都在使用蓝绿部署（发布）来实现热部署，这种部署方式具有安全、可靠的特点。蓝绿部署虽然算不上“ Sliver Bullet”，但确实很实用。\n蓝绿部署是最常见的一种0 downtime部署的方式，是一种以可预测的方式发布应用的技术，目的是减少发布过程中服务停止的时间。蓝绿部署原理上很简单，就是通过冗余来解决问题。通常生产环境需要两组配置（蓝绿配置），一组是active的生产环境的配置（绿配置），一组是inactive的配置（蓝绿配置）。用户访问的时候，只会让用户访问active的服务器集群。在绿色环境（active）运行当前生产环境中的应用，也就是旧版本应用version1。当你想要升级到version2 ，在蓝色环境（inactive）中进行操作，即部署新版本应用，并进行测试。如果测试没问题，就可以把负载均衡器／反向代理／路由指向蓝色环境了。随后需要监测新版本应用，也就是version2 是否有故障和异常。如果运行良好，就可以删除version1 使用的资源。如果运行出现了问题，可以通过负载均衡器指向快速回滚到绿色环境。\n蓝绿部署的优点：\n这种方式的好处在你可以始终很放心的去部署inactive环境，如果出错并不影响生产环境的服务，如果切换后出现问题，也可以在非常短的时间内把再做一次切换，就完成了回滚。而且同时在线的只有一个版本。蓝绿部署无需停机，并且风险较小。\n(1) 部署版本1的应用（一开始的状态），所有外部请求的流量都打到这个版本上。\n(2) 部署版本2的应用，版本2的代码与版本1不同(新功能、Bug修复等)。\n(3) 将流量从版本1切换到版本2。\n(4) 如版本2测试正常，就删除版本1正在使用的资源（例如实例），从此正式用版本2。\n从过程不难发现，在部署的过程中，应用始终在线。并且，新版本上线的过程中，并没有修改老版本的任何内容，在部署期间，老版本的状态不受影响。这样风险很小，并且，只要老版本的资源不被删除，理论上，可以在任何时间回滚到老版本。\n蓝绿部署的弱点：\n使用蓝绿部署需要注意的一些细节包括：\n1、当切换到蓝色环境时，需要妥当处理未完成的业务和新的业务。如果数据库后端无法处理，会是一个比较麻烦的问题。\n2、有可能会出现需要同时处理“微服务架构应用”和“传统架构应用”的情况，如果在蓝绿部署中协调不好这两者，还是有可能导致服务停止；\n3、需要提前考虑数据库与应用部署同步迁移/回滚的问题。\n4、蓝绿部署需要有基础设施支持。\n5、在非隔离基础架构（ VM 、 Docker 等）上执行蓝绿部署，蓝色环境和绿色环境有被摧毁的风险。\n6、另外，这种方式不好的地方还在于冗余产生的额外维护、配置的成本，以及服务器本身运行的开销。\n蓝绿部署适用的场景：\n1、不停止老版本，额外搞一套新版本，等测试发现新版本OK后，删除老版本。\n2、蓝绿发布是一种用于升级与更新的发布策略，部署的最小维度是容器，而发布的最小维度是应用。\n3、蓝绿发布对于增量升级有比较好的支持，但是对于涉及数据表结构变更等等不可逆转的升级，并不完全合适用蓝绿发布来实现，需要结合一些业务的逻辑以及数据迁移与回滚的策略才可以完全满足需求。",{"type":11,"children":12,"toc":221},"root",[13,22,27,33,38,46,65,80,109,128,152,157,175,180,210],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"蓝绿部署bluegreen-deployment",[19],{"type":20,"value":21},"text","蓝绿部署（Blue/Green Deployment）",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26],{"type":20,"value":9},{"type":14,"tag":15,"props":28,"children":30},{"id":29},"滚动发布rolling-update",[31],{"type":20,"value":32},"滚动发布（rolling update）",{"type":14,"tag":23,"props":34,"children":35},{},[36],{"type":20,"value":37},"滚动发布，一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用。周而复始，直到集群中所有的实例都更新成新版本。这种部署方式相对于蓝绿部署，更加节约资源——它不需要运行两个集群、两倍的实例数。我们可以部分部署，例如每次只取出集群的20%进行升级。\n这种方式也有很多缺点，例如：\n(1) 没有一个确定OK的环境。使用蓝绿部署，我们能够清晰地知道老版本是OK的，而使用滚动发布，我们无法确定。\n(2) 修改了现有的环境。\n(3) 如果需要回滚，很困难。举个例子，在某一次发布中，我们需要更新100个实例，每次更新10个实例，每次部署需要5分钟。当滚动发布到第80个实例时，发现了问题，需要回滚。此时，脾气不好的程序猿很可能想掀桌子，因为回滚是一个痛苦，并且漫长的过程。\n(4) 有的时候，我们还可能对系统进行动态伸缩，如果部署期间，系统自动扩容/缩容了，我们还需判断到底哪个节点使用的是哪个代码。尽管有一些自动化的运维工具，但是依然令人心惊胆战。\n并不是说滚动发布不好，滚动发布也有它非常合适的场景。",{"type":14,"tag":23,"props":39,"children":40},{},[41],{"type":14,"tag":42,"props":43,"children":45},"img",{"alt":42,"src":44},"/images/2020-02-03-orleans-Deployment/20190516171224267.png",[],{"type":14,"tag":15,"props":47,"children":49},{"id":48},"orleans支持-蓝绿部署模型以及滚动部署模型",[50,52,58,60],{"type":20,"value":51},"orleans支持 ",{"type":14,"tag":53,"props":54,"children":55},"em",{},[56],{"type":20,"value":57},"蓝绿部署模型",{"type":20,"value":59},"以及",{"type":14,"tag":53,"props":61,"children":62},{},[63],{"type":20,"value":64},"滚动部署模型",{"type":14,"tag":66,"props":67,"children":68},"ul",{},[69,75],{"type":14,"tag":70,"props":71,"children":72},"li",{},[73],{"type":20,"value":74},"ClusterId：这是Orleans集群的唯一ID。使用此ID的所有客户端和Silo将能够直接相互通信。但是，您可以选择ClusterId对不同的部署使用不同的名称。",{"type":14,"tag":70,"props":76,"children":77},{},[78],{"type":20,"value":79},"ServiceId：这是您的应用程序的唯一ID，将由某些提供程序（例如持久性提供程序）使用。此ID应该保持稳定，并且在整个部署中都不应更改。",{"type":14,"tag":23,"props":81,"children":82},{},[83,85,92,94,100,102,107],{"type":20,"value":84},"Orleans has both ",{"type":14,"tag":86,"props":87,"children":89},"code",{"className":88},[],[90],{"type":20,"value":91},"ClusterId",{"type":20,"value":93}," & ",{"type":14,"tag":86,"props":95,"children":97},{"className":96},[],[98],{"type":20,"value":99},"ServiceId",{"type":20,"value":101}," to support the ",{"type":14,"tag":53,"props":103,"children":104},{},[105],{"type":20,"value":106},"blue/green deployment model",{"type":20,"value":108},".",{"type":14,"tag":23,"props":110,"children":111},{},[112,114,119,121,126],{"type":20,"value":113},"In this model, each deployment slot will have a distinct ",{"type":14,"tag":86,"props":115,"children":117},{"className":116},[],[118],{"type":20,"value":91},{"type":20,"value":120}," (eg, the values could be \"blue-slot\" & \"green-slot\") but they will always have the same ",{"type":14,"tag":86,"props":122,"children":124},{"className":123},[],[125],{"type":20,"value":99},{"type":20,"value":127}," (eg, \"my-service\"). The \"blue-slot\" silos will only talk to other \"blue-slot\" silos.",{"type":14,"tag":23,"props":129,"children":130},{},[131,136,138,144,146,150],{"type":14,"tag":53,"props":132,"children":133},{},[134],{"type":20,"value":135},"However",{"type":20,"value":137}," ",{"type":14,"tag":139,"props":140,"children":141},"strong",{},[142],{"type":20,"value":143},"Grain A",{"type":20,"value":145}," in the blue cluster and ",{"type":14,"tag":139,"props":147,"children":148},{},[149],{"type":20,"value":143},{"type":20,"value":151}," in the green cluster will still share the same storage - if they are both active then one will see a conflict when writing to the state if the other activation has already written it.",{"type":14,"tag":23,"props":153,"children":154},{},[155],{"type":20,"value":156},"This allows for the state in the database to remain consistent when multiple clusters are active (which is usually a short period of time - during the upgrade).",{"type":14,"tag":23,"props":158,"children":159},{},[160,162,167,168,173],{"type":20,"value":161},"If you do not use blue/green deployments then you can set ",{"type":14,"tag":86,"props":163,"children":165},{"className":164},[],[166],{"type":20,"value":91},{"type":20,"value":93},{"type":14,"tag":86,"props":169,"children":171},{"className":170},[],[172],{"type":20,"value":99},{"type":20,"value":174}," to the same value.",{"type":14,"tag":23,"props":176,"children":177},{},[178],{"type":20,"value":179},"To say this in a different way:",{"type":14,"tag":66,"props":181,"children":182},{},[183,200],{"type":14,"tag":70,"props":184,"children":185},{},[186,191,193,198],{"type":14,"tag":86,"props":187,"children":189},{"className":188},[],[190],{"type":20,"value":91},{"type":20,"value":192}," + ",{"type":14,"tag":86,"props":194,"children":196},{"className":195},[],[197],{"type":20,"value":99},{"type":20,"value":199}," are used for cluster membership",{"type":14,"tag":70,"props":201,"children":202},{},[203,208],{"type":14,"tag":86,"props":204,"children":206},{"className":205},[],[207],{"type":20,"value":99},{"type":20,"value":209}," is used for storage",{"type":14,"tag":23,"props":211,"children":212},{},[213],{"type":14,"tag":214,"props":215,"children":219},"a",{"href":216,"rel":217},"https://github.com/dotnet/orleans/issues/5696#issuecomment-503595998",[218],"nofollow",[220],{"type":20,"value":216},{"title":7,"searchDepth":222,"depth":222,"links":223},2,[],"markdown","content:dotnet:2020-02-03-orleans-Deployment.md","content","dotnet/2020-02-03-orleans-Deployment.md","md","2020-02-03",[231,241,366,415,467,480,592],{"title":232,"_path":233,"children":234},"Art","/art",[235,238],{"title":236,"_path":237},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":239,"_path":240},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":242,"_path":243,"children":244},"Dotnet","/dotnet",[245,248,251,254,257,260,263,266,269,272,275,278,281,284,287,290,293,296,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363],{"title":246,"_path":247},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":249,"_path":250},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":252,"_path":253},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":255,"_path":256},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":258,"_path":259},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":261,"_path":262},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":264,"_path":265},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":267,"_path":268},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":270,"_path":271},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":273,"_path":274},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":276,"_path":277},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":279,"_path":280},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":282,"_path":283},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":285,"_path":286},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":288,"_path":289},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":291,"_path":292},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":294,"_path":295},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":8,"_path":4},{"title":298,"_path":299},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":301,"_path":302},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":304,"_path":305},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":307,"_path":308},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":310,"_path":311},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":313,"_path":314},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":316,"_path":317},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":319,"_path":320},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":322,"_path":323},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":325,"_path":326},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":328,"_path":329},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":331,"_path":332},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":334,"_path":335},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":337,"_path":338},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":340,"_path":341},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":343,"_path":344},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":346,"_path":347},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":349,"_path":350},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":352,"_path":353},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":355,"_path":356},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":358,"_path":359},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":361,"_path":362},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":364,"_path":365},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":367,"_path":368,"children":369},"Game","/game",[370,373,376,379,382,385,388,391,394,397,400,403,406,409,412],{"title":371,"_path":372},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":374,"_path":375},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":377,"_path":378},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":380,"_path":381},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":383,"_path":384},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":386,"_path":387},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":389,"_path":390},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":392,"_path":393},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":395,"_path":396},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":398,"_path":399},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":401,"_path":402},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":404,"_path":405},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":407,"_path":408},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":410,"_path":411},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":413,"_path":414},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":416,"_path":417,"children":418},"Gyj","/gyj",[419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464],{"title":420,"_path":421},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":423,"_path":424},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":426,"_path":427},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":429,"_path":430},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":432,"_path":433},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":435,"_path":436},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":438,"_path":439},"玩法","/gyj/2022-08-22-wanfa",{"title":441,"_path":442},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":444,"_path":445},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":447,"_path":448},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":450,"_path":451},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":453,"_path":454},"门派内容相关","/gyj/2022-11-17-sect",{"title":456,"_path":457},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":459,"_path":460},"种植","/gyj/2022-12-01-zhongzhi",{"title":462,"_path":463},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":465,"_path":466},"跑商","/gyj/2023-11-01-paoshang",{"title":468,"_path":469,"children":470},"Js","/js",[471,474,477],{"title":472,"_path":473},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":475,"_path":476},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":478,"_path":479},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":481,"_path":482,"children":483},"Tool","/tool",[484,487,490,493,496,499,502,505,508,511,514,517,520,523,526,529,532,535,538,541,544,547,550,553,556,559,562,565,568,571,574,577,580,583,586,589],{"title":485,"_path":486},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":488,"_path":489},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":491,"_path":492},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":494,"_path":495},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":497,"_path":498},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":500,"_path":501},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":503,"_path":504},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":506,"_path":507},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":509,"_path":510},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":512,"_path":513},"mac下brew 使用","/tool/2020-01-13-brew",{"title":515,"_path":516},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":518,"_path":519},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":521,"_path":522},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":524,"_path":525},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":527,"_path":528},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":530,"_path":531},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":533,"_path":534},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":536,"_path":537},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":539,"_path":540},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":542,"_path":543},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":545,"_path":546},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":548,"_path":549},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":551,"_path":552},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":554,"_path":555},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":557,"_path":558},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":560,"_path":561},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":563,"_path":564},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":566,"_path":567},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":569,"_path":570},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":572,"_path":573},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":575,"_path":576},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":578,"_path":579},"rider的使用","/tool/2022-08-02-rider-use",{"title":581,"_path":582},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":584,"_path":585},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":587,"_path":588},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":590,"_path":591},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":593,"_path":594,"children":595},"Unity","/unity",[596,599,602,605,608,611,614,617,620,623,626,629,632,635,638,641,644,647,650,653,656,659,662,665,668,671,674,677,680,683,686,689,692,695,698,701,704,707,710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,755,758,761,764,767,770,773,776,779,782,785,788,791,794,797,800,803,806,809],{"title":597,"_path":598},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":600,"_path":601},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":603,"_path":604},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":606,"_path":607},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":609,"_path":610},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":612,"_path":613},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":615,"_path":616},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":618,"_path":619},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":621,"_path":622},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":624,"_path":625},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":627,"_path":628},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":630,"_path":631},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":633,"_path":634},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":636,"_path":637},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":639,"_path":640},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":642,"_path":643},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":645,"_path":646},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":648,"_path":649},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":651,"_path":652},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":654,"_path":655},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":657,"_path":658},"技能系统","/unity/2020-02-15-skill-system",{"title":660,"_path":661},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":663,"_path":664},"角色状态设计","/unity/2020-02-17-character-states",{"title":666,"_path":667},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":669,"_path":670},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":672,"_path":673},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":675,"_path":676},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":678,"_path":679},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":681,"_path":682},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":684,"_path":685},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":687,"_path":688},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":690,"_path":691},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":693,"_path":694},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":696,"_path":697},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":699,"_path":700},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":702,"_path":703},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":705,"_path":706},"unity的addressables","/unity/2020-09-12-addressables",{"title":708,"_path":709},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":711,"_path":712},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":714,"_path":715},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":717,"_path":718},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":720,"_path":721},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":723,"_path":724},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":726,"_path":727},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":729,"_path":730},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":732,"_path":733},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":735,"_path":736},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":738,"_path":739},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":741,"_path":742},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":744,"_path":745},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":747,"_path":748},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":750,"_path":751},"简单保存工具","/unity/2020-11-13-simple-save",{"title":753,"_path":754},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":756,"_path":757},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":759,"_path":760},"ability","/unity/2020-11-16-dotssample",{"title":762,"_path":763},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":765,"_path":766},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":768,"_path":769},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":771,"_path":772},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":774,"_path":775},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":777,"_path":778},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":780,"_path":781},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":783,"_path":784},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":786,"_path":787},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":789,"_path":790},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":792,"_path":793},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":795,"_path":796},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":798,"_path":799},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":801,"_path":802},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":804,"_path":805},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":807,"_path":808},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":810,"_path":811},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040875]