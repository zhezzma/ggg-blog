[{"data":1,"prerenderedAt":4636},["Reactive",2],{"content-navigation-8C37fagqQL":3,"content-query-xyUMZ28JrO":587},[4,14,141,190,242,255,367],{"title":5,"_path":6,"children":7},"Art","/art",[8,11],{"title":9,"_path":10},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":12,"_path":13},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":15,"_path":16,"children":17},"Dotnet","/dotnet",[18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138],{"title":19,"_path":20},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":22,"_path":23},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":25,"_path":26},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":28,"_path":29},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":31,"_path":32},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":34,"_path":35},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":37,"_path":38},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":40,"_path":41},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":43,"_path":44},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":46,"_path":47},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":49,"_path":50},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":52,"_path":53},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":55,"_path":56},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":58,"_path":59},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":61,"_path":62},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":64,"_path":65},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":67,"_path":68},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":70,"_path":71},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":73,"_path":74},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":76,"_path":77},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":79,"_path":80},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":82,"_path":83},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":85,"_path":86},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":88,"_path":89},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":91,"_path":92},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":94,"_path":95},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":97,"_path":98},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":100,"_path":101},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":103,"_path":104},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":106,"_path":107},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":109,"_path":110},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":112,"_path":113},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":115,"_path":116},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":118,"_path":119},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":121,"_path":122},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":124,"_path":125},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":127,"_path":128},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":130,"_path":131},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":133,"_path":134},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":136,"_path":137},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":139,"_path":140},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":142,"_path":143,"children":144},"Game","/game",[145,148,151,154,157,160,163,166,169,172,175,178,181,184,187],{"title":146,"_path":147},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":149,"_path":150},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":152,"_path":153},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":155,"_path":156},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":158,"_path":159},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":161,"_path":162},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":164,"_path":165},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":167,"_path":168},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":170,"_path":171},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":173,"_path":174},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":176,"_path":177},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":179,"_path":180},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":182,"_path":183},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":185,"_path":186},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":188,"_path":189},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":191,"_path":192,"children":193},"Gyj","/gyj",[194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239],{"title":195,"_path":196},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":198,"_path":199},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":201,"_path":202},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":204,"_path":205},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":207,"_path":208},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":210,"_path":211},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":213,"_path":214},"玩法","/gyj/2022-08-22-wanfa",{"title":216,"_path":217},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":219,"_path":220},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":222,"_path":223},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":225,"_path":226},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":228,"_path":229},"门派内容相关","/gyj/2022-11-17-sect",{"title":231,"_path":232},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":234,"_path":235},"种植","/gyj/2022-12-01-zhongzhi",{"title":237,"_path":238},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":240,"_path":241},"跑商","/gyj/2023-11-01-paoshang",{"title":243,"_path":244,"children":245},"Js","/js",[246,249,252],{"title":247,"_path":248},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":250,"_path":251},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":253,"_path":254},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":256,"_path":257,"children":258},"Tool","/tool",[259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364],{"title":260,"_path":261},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":263,"_path":264},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":266,"_path":267},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":269,"_path":270},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":272,"_path":273},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":275,"_path":276},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":278,"_path":279},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":281,"_path":282},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":284,"_path":285},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":287,"_path":288},"mac下brew 使用","/tool/2020-01-13-brew",{"title":290,"_path":291},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":293,"_path":294},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":296,"_path":297},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":299,"_path":300},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":302,"_path":303},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":305,"_path":306},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":308,"_path":309},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":311,"_path":312},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":314,"_path":315},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":317,"_path":318},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":320,"_path":321},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":323,"_path":324},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":326,"_path":327},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":329,"_path":330},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":332,"_path":333},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":335,"_path":336},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":338,"_path":339},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":341,"_path":342},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":344,"_path":345},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":347,"_path":348},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":350,"_path":351},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":353,"_path":354},"rider的使用","/tool/2022-08-02-rider-use",{"title":356,"_path":357},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":359,"_path":360},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":362,"_path":363},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":365,"_path":366},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":368,"_path":369,"children":370},"Unity","/unity",[371,374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584],{"title":372,"_path":373},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":375,"_path":376},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":378,"_path":379},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":381,"_path":382},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":384,"_path":385},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":387,"_path":388},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":390,"_path":391},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":393,"_path":394},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":396,"_path":397},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":399,"_path":400},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":402,"_path":403},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":405,"_path":406},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":408,"_path":409},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":411,"_path":412},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":414,"_path":415},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":417,"_path":418},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":420,"_path":421},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":423,"_path":424},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":426,"_path":427},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":429,"_path":430},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":432,"_path":433},"技能系统","/unity/2020-02-15-skill-system",{"title":435,"_path":436},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":438,"_path":439},"角色状态设计","/unity/2020-02-17-character-states",{"title":441,"_path":442},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":444,"_path":445},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":447,"_path":448},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":450,"_path":451},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":453,"_path":454},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":456,"_path":457},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":459,"_path":460},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":462,"_path":463},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":465,"_path":466},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":468,"_path":469},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":471,"_path":472},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":474,"_path":475},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":477,"_path":478},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":480,"_path":481},"unity的addressables","/unity/2020-09-12-addressables",{"title":483,"_path":484},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":486,"_path":487},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":489,"_path":490},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":492,"_path":493},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":495,"_path":496},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":498,"_path":499},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":501,"_path":502},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":504,"_path":505},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":507,"_path":508},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":510,"_path":511},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":513,"_path":514},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":516,"_path":517},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":519,"_path":520},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":522,"_path":523},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":525,"_path":526},"简单保存工具","/unity/2020-11-13-simple-save",{"title":528,"_path":529},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":531,"_path":532},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":534,"_path":535},"ability","/unity/2020-11-16-dotssample",{"title":537,"_path":538},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":540,"_path":541},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":543,"_path":544},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":546,"_path":547},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":549,"_path":550},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":552,"_path":553},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":555,"_path":556},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":558,"_path":559},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":561,"_path":562},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":564,"_path":565},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":567,"_path":568},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":570,"_path":571},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":573,"_path":574},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":576,"_path":577},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":579,"_path":580},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":582,"_path":583},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":585,"_path":586},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",[588,681,1632,1808,1991,2238,2468,2514,3182,3363,3385,3496,3885,4078,4432],{"_path":140,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":139,"description":592,"body":593,"_type":675,"_id":676,"_source":677,"_file":678,"_extension":679,"date":680},"dotnet",false,"","先看一个不负责任的写法//先看一个不负责任的写法\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\n \n \nnamespace nothing\n{\n    class MyMethod\n    {\n        //用a值代替Hash值\n        public int a { get; set; }\n         public override int GetHashCode()\n        {\n            return a;\n  ",{"type":594,"children":595,"toc":672},"root",[596,604,614,619,627,632,637,642,647,652,657,662,667],{"type":597,"tag":598,"props":599,"children":600},"element","p",{},[601],{"type":602,"value":603},"text","先看一个不负责任的写法",{"type":597,"tag":605,"props":606,"children":608},"pre",{"code":607},"//先看一个不负责任的写法\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\n \n \nnamespace nothing\n{\n    class MyMethod\n    {\n        //用a值代替Hash值\n        public int a { get; set; }\n         public override int GetHashCode()\n        {\n            return a;\n        }\n        public override bool Equals(object obj)\n        {\n            return true;\n        }\n \n    }\n    class Program\n    {\n            \n        static void Sum\u003CT>() where T : MyMethod, new()\n        {\n            T t1 = new T();\n            T t2 = new T();\n             \n            t1.a = 3; t2.a = 4;//不会报错           \n             //t1.a=3;t2.a=3;报错，字典中已经存在相同键\n             Dictionary\u003CMyMethod, int> d = new Dictionary\u003CMyMethod, int>();\n            d.Add(t1, 1);\n            d.Add(t2, 2);\n            \n            \n        }\n        static void Main(string[] args)\n        {\n            \n            Sum\u003CMyMethod>();\n            Console.Read();\n \n        }\n       \n    }\n \n}\n \n",[609],{"type":597,"tag":610,"props":611,"children":612},"code",{"__ignoreMap":591},[613],{"type":602,"value":607},{"type":597,"tag":598,"props":615,"children":616},{},[617],{"type":602,"value":618},"再说Dictionary的Add的具体实现,ILSpy反编译中C#Dictionary的Add方法源码：",{"type":597,"tag":605,"props":620,"children":622},{"code":621},"public void Add(TKey key, TValue value)\n{\n    this.Insert(key, value, true);\n}\n \n \nprivate void Insert(TKey key, TValue value, bool add)\n{\n    if (key == null)\n    {\n        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.key);\n    }\n    if (this.buckets == null)\n    {\n        this.Initialize(0);\n    }\n    \n    int num = this.comparer.GetHashCode(key) & 2147483647;\n    int num2 = num % this.buckets.Length;\n    int num3 = 0;\n    for (int i = this.buckets[num2]; i >= 0; i = this.entries[i].next)\n    {\n        //如果hash值和字典中某个值的hash值相等 且 两个值的Equals返回值为True Trow 异常：已添加了具有相同键的项。\n        if (this.entries[i].hashCode == num && this.comparer.Equals(this.entries[i].key, key))\n        {\n            if (add)\n            {\n                ThrowHelper.ThrowArgumentException(ExceptionResource.Argument_AddingDuplicate);\n            }\n            this.entries[i].value = value;\n            this.version++;\n            return;\n        }\n        num3++;\n    }\n    int num4;\n    if (this.freeCount > 0)\n    {\n        num4 = this.freeList;\n        this.freeList = this.entries[num4].next;\n        this.freeCount--;\n    }\n    else\n    {\n        if (this.count == this.entries.Length)\n        {\n            this.Resize();\n            num2 = num % this.buckets.Length;\n        }\n        num4 = this.count;\n        this.count++;\n    }\n    this.entries[num4].hashCode = num;\n    this.entries[num4].next = this.buckets[num2];\n    this.entries[num4].key = key;\n    this.entries[num4].value = value;\n    this.buckets[num2] = num4;\n    this.version++;\n    if (num3 > 100 && HashHelpers.IsWellKnownEqualityComparer(this.comparer))\n    {\n        this.comparer = (IEqualityComparer\u003CTKey>)HashHelpers.GetRandomizedEqualityComparer(this.comparer);\n        this.Resize(this.entries.Length, true);\n    }\n}\n",[623],{"type":597,"tag":610,"props":624,"children":625},{"__ignoreMap":591},[626],{"type":602,"value":621},{"type":597,"tag":598,"props":628,"children":629},{},[630],{"type":602,"value":631},"当每次调用Dictionary的Add方法时，参数都将与Dictionary中的值进行Equals，大家都知道DIctionary是用Hash值进行存储的，而hash值的计算方法是通过Object.GetHashCode实现的，如果这2个方法不一致，那么很容易就出现问题，特别是Dictionary中的Add方法这种情况。",{"type":597,"tag":598,"props":633,"children":634},{},[635],{"type":602,"value":636},"个人理解Dictionary的Add方法的实现：",{"type":597,"tag":598,"props":638,"children":639},{},[640],{"type":602,"value":641},"Add()->GetHashCode(),Equals()->判断2个hashcode是否相等 和Equals返回值是否为True->若同时成立，抛异常。",{"type":597,"tag":598,"props":643,"children":644},{},[645],{"type":602,"value":646},"GetHashCode的目的不是为一个对象生成唯一的标识符，而是为了实现基于哈希表的数据结构，如Dictionary\u003CK, V>或HashSet。 哈希函数需要确保如果x == ==y，那么x.GetHashCode()==  y.GetHashCode()，但反过来就不对了：两个不同的对象可以有相同的哈希代码。这种情况被称为哈希碰撞。 如果存在碰撞，哈希表结构仍然可以工作，但它们的运行速度较慢，因为你的程序必须花时间来分辨你要搜索的是哪个碰撞对象。因此，一个好的散列函数将努力使碰撞最小化。(注意，如果一个类有232个以上的可能值，要完全避免碰撞在数学上是不可能的，因为有鸽子笼原则）。",{"type":597,"tag":598,"props":648,"children":649},{},[650],{"type":602,"value":651},"那么，你如何为你的类写一个好的GetHashCode实现呢？",{"type":597,"tag":598,"props":653,"children":654},{},[655],{"type":602,"value":656},"做一些复杂的数学运算，将你的类的每一个字段转换为int，然后通过剖析来确定其中的系数的最佳值？",{"type":597,"tag":598,"props":658,"children":659},{},[660],{"type":602,"value":661},"根据Troelsen的说法，不需要。",{"type":597,"tag":598,"props":663,"children":664},{},[665],{"type":602,"value":666},"只要在你的 \"最独特 \"的字符串字段上调用GetHashCode()就可以了。",{"type":597,"tag":598,"props":668,"children":669},{},[670],{"type":602,"value":671},"写System.String.GetHashCode的开发者知道他们在做什么，所以只要使用它，你就会自动利用他们的 \"坚实的哈希码算法\"。",{"title":591,"searchDepth":673,"depth":673,"links":674},2,[],"markdown","content:dotnet:2022-08-15-equal-hashcode.md","content","dotnet/2022-08-15-equal-hashcode.md","md","2022-08-15",{"_path":137,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":136,"description":682,"body":683,"_type":675,"_id":1629,"_source":677,"_file":1630,"_extension":679,"date":1631},"In object-oriented code bases, we tend to express most of not all of our data in highly semantic and contextual ways – that is, we use classes that contain both data and behaviour, and often even more information through inheritance, attributes, and more.",{"type":594,"children":684,"toc":1611},[685,689,694,699,706,711,716,721,726,732,737,742,747,752,762,777,782,803,816,821,829,834,842,847,860,867,872,884,889,901,906,911,916,921,926,931,943,948,966,984,989,994,1002,1007,1015,1020,1025,1030,1035,1040,1045,1070,1075,1080,1086,1091,1096,1101,1107,1112,1117,1130,1135,1206,1211,1219,1233,1238,1243,1248,1253,1258,1264,1269,1271,1385,1403,1421,1426,1427,1529,1554,1559,1564,1569,1575,1580,1591,1596,1601,1606],{"type":597,"tag":598,"props":686,"children":687},{},[688],{"type":602,"value":682},{"type":597,"tag":598,"props":690,"children":691},{},[692],{"type":602,"value":693},"However, sometimes we need to extract the data contained in these types – for example for sending network messages, or saving to disk. In this post we will look into converting between structs and byte arrays, to make exactly this possible.",{"type":597,"tag":598,"props":695,"children":696},{},[697],{"type":602,"value":698},"We will compare different ways of doing so, and analyse them for performance and easy of use.",{"type":597,"tag":700,"props":701,"children":703},"h2",{"id":702},"why-byte-arrays",[704],{"type":602,"value":705},"Why byte arrays?",{"type":597,"tag":598,"props":707,"children":708},{},[709],{"type":602,"value":710},"The reason we will be looking into serialising our data into byte arrays is because these are essentially the most fundamental data storage format. We can easily write them to a network buffer or stream, or to a file.",{"type":597,"tag":598,"props":712,"children":713},{},[714],{"type":602,"value":715},"There are many alternatives and none of them will be right for every single use case. For example, I like to use JSON files to store settings, scripts, and text-based assets, as well as asset meta data.",{"type":597,"tag":598,"props":717,"children":718},{},[719],{"type":602,"value":720},"In those cases performance is not the most important consideration. Instead it is more valuable to be able to edit and review files easily inside a text editor.",{"type":597,"tag":598,"props":722,"children":723},{},[724],{"type":602,"value":725},"In situations where performance is important however – such as the mentioned networking or compact file storage – serialising only the relevant data itself and skipping the encoding and formatting inherent to clear text files can be key.",{"type":597,"tag":700,"props":727,"children":729},{"id":728},"why-structures",[730],{"type":602,"value":731},"Why structures?",{"type":597,"tag":598,"props":733,"children":734},{},[735],{"type":602,"value":736},"There are several reasons for why we are talking about structures specifically.",{"type":597,"tag":598,"props":738,"children":739},{},[740],{"type":602,"value":741},"First, I want to make a clear distinction between data and behaviour, by using a type that contains exactly the data we are interested in serialising.",{"type":597,"tag":598,"props":743,"children":744},{},[745],{"type":602,"value":746},"Secondly, structures are much more reliable and controllable when it comes to binary data layout. We will see how this is important for our last method of serialisation.",{"type":597,"tag":598,"props":748,"children":749},{},[750],{"type":602,"value":751},"Overall, we can use structures to directly represent the data that will be written into our byte array. For our example of networking this means that we have a clear one to one correspondence between our structures and our network messages.",{"type":597,"tag":700,"props":753,"children":755},{"id":754},"binaryformatter",[756],{"type":597,"tag":610,"props":757,"children":759},{"className":758},[],[760],{"type":602,"value":761},"BinaryFormatter",{"type":597,"tag":598,"props":763,"children":764},{},[765,767,775],{"type":602,"value":766},"In our first method of converting between structs and byte arrays, we will make use of .NET’s ",{"type":597,"tag":768,"props":769,"children":773},"a",{"href":770,"rel":771},"https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter(v=vs.110).aspx",[772],"nofollow",[774],{"type":602,"value":761},{"type":602,"value":776}," class.",{"type":597,"tag":598,"props":778,"children":779},{},[780],{"type":602,"value":781},"The entire purpose of that class is to serialise an object into binary format (i.e. a byte array) – as well as deserialising the same back into objects.",{"type":597,"tag":598,"props":783,"children":784},{},[785,787,793,795,801],{"type":602,"value":786},"The class offers a lot of functionality – most of which we are not interested in here. Of interest to us are only two methods: ",{"type":597,"tag":610,"props":788,"children":790},{"className":789},[],[791],{"type":602,"value":792},"Serialize()",{"type":602,"value":794}," and ",{"type":597,"tag":610,"props":796,"children":798},{"className":797},[],[799],{"type":602,"value":800},"Deserialize()",{"type":602,"value":802},".",{"type":597,"tag":598,"props":804,"children":805},{},[806,808,814],{"type":602,"value":807},"These methods allow us to read/write our data to any stream. In many cases we could use this to write to a network – or file – buffer or stream directly. For our purpose – and for ease of testing, we will use the ",{"type":597,"tag":610,"props":809,"children":811},{"className":810},[],[812],{"type":602,"value":813},"MemoryStream",{"type":602,"value":815}," class which is little more than a stream wrapper around a byte array in the first place.",{"type":597,"tag":598,"props":817,"children":818},{},[819],{"type":602,"value":820},"Here are two generic methods that do exactly this:",{"type":597,"tag":605,"props":822,"children":824},{"code":823},"public static byte[] Serialize\u003CT>(T data)\n    where T : struct\n{\n    var formatter = new BinaryFormatter();\n    var stream = new MemoryStream();\n    formatter.Serialize(stream, data);\n    return stream.ToArray();\n}\npublic static T Deserialize\u003CT>(byte[] array)\n    where T : struct\n{\n    var stream = new MemoryStream(array);\n    var formatter = new BinaryFormatter();\n    return (T)formatter.Deserialize(stream);\n}\n",[825],{"type":597,"tag":610,"props":826,"children":827},{"__ignoreMap":591},[828],{"type":602,"value":823},{"type":597,"tag":598,"props":830,"children":831},{},[832],{"type":602,"value":833},"These methods can now be easily used like this:",{"type":597,"tag":605,"props":835,"children":837},{"code":836},"[Serializable] // BinaryFormatter needs this attribute\nstruct MyStruct\n{\n    // some fields here\n}\n\nvar data = new MyStruct();\nvar bytes = Serialize(data);\nvar data2 = Deserialize\u003CMyStruct>(bytes);\n// data and data2 now contain the same values\n",[838],{"type":597,"tag":610,"props":839,"children":840},{"__ignoreMap":591},[841],{"type":602,"value":836},{"type":597,"tag":598,"props":843,"children":844},{},[845],{"type":602,"value":846},"This looks great!",{"type":597,"tag":598,"props":848,"children":849},{},[850,852,858],{"type":602,"value":851},"It seems that we have found a solution that is both easy to use, and requires almost no work if we want to expand it. Allowing for the conversion of new structs simple requires the addition of the ",{"type":597,"tag":610,"props":853,"children":855},{"className":854},[],[856],{"type":602,"value":857},"Serializable",{"type":602,"value":859}," attribute, while we have to do nothing at all if we modify our structures to include more, less, or different data.",{"type":597,"tag":861,"props":862,"children":864},"h3",{"id":863},"performance",[865],{"type":602,"value":866},"Performance",{"type":597,"tag":598,"props":868,"children":869},{},[870],{"type":602,"value":871},"How about performance?",{"type":597,"tag":598,"props":873,"children":874},{},[875,877],{"type":602,"value":876},"I wrote a little test that both serialises and deserialises hundreds of thousands of times, and repeats that process several times to make sure we get accurate results. You can find the full code of it ",{"type":597,"tag":768,"props":878,"children":881},{"href":879,"rel":880},"https://github.com/amulware/genericgamedev-tests/tree/master/src/StructByteArrayConversion",[772],[882],{"type":602,"value":883},"on my GitHub",{"type":597,"tag":598,"props":885,"children":886},{},[887],{"type":602,"value":888},"Here are the results:",{"type":597,"tag":598,"props":890,"children":891},{},[892,894,899],{"type":602,"value":893},"Using ",{"type":597,"tag":610,"props":895,"children":897},{"className":896},[],[898],{"type":602,"value":761},{"type":602,"value":900},",\n– converting a 16 byte structs to an array one million times takes 4.86 seconds;\n– converting an array to a 16 byte struct one million times takes 3.85 seconds.",{"type":597,"tag":598,"props":902,"children":903},{},[904],{"type":602,"value":905},"This means that a single call to either of our methods takes less than 5 microseconds.",{"type":597,"tag":598,"props":907,"children":908},{},[909],{"type":602,"value":910},"That is pretty good!",{"type":597,"tag":598,"props":912,"children":913},{},[914],{"type":602,"value":915},"With this performance we can easily write and read thousands of networking messages per second before we will notice the performance impact. That is easily enough for most games and other real-time applications.",{"type":597,"tag":598,"props":917,"children":918},{},[919],{"type":602,"value":920},"There is another kind of performance measurement that is important however – and especially so when it comes to networking: Bandwidth.",{"type":597,"tag":598,"props":922,"children":923},{},[924],{"type":602,"value":925},"The struct I ran the tests with consisted of exactly 16 bytes. That means that in principle we should be able to write it into a byte array with length 16. The BinaryFormatter however – and this is related to the other features it has – writes a total of 218 bytes to the array.",{"type":597,"tag":598,"props":927,"children":928},{},[929],{"type":602,"value":930},"Suffice it to say: That is a whole lot more.",{"type":597,"tag":598,"props":932,"children":933},{},[934,936,942],{"type":602,"value":935},"The advantage of this is, that the object that is deserialised will actually be of the correct type. I merely made the method generic so that we could perform the cast and return the structure boxed in the result of ",{"type":597,"tag":610,"props":937,"children":939},{"className":938},[],[940],{"type":602,"value":941},"BinaryFormatter.Deserialize()",{"type":602,"value":802},{"type":597,"tag":598,"props":944,"children":945},{},[946],{"type":602,"value":947},"There are cases were we care less about the amount of data, and prefer to handle our data in this way. For this post however, I want to find a method that results in an array as small as possible.",{"type":597,"tag":700,"props":949,"children":951},{"id":950},"binarywriterbinaryreader",[952,958,960],{"type":597,"tag":610,"props":953,"children":955},{"className":954},[],[956],{"type":602,"value":957},"BinaryWriter",{"type":602,"value":959},"/",{"type":597,"tag":610,"props":961,"children":963},{"className":962},[],[964],{"type":602,"value":965},"BinaryReader",{"type":597,"tag":598,"props":967,"children":968},{},[969,971,977,978],{"type":602,"value":970},"Our second case study will be two other .NET classes: ",{"type":597,"tag":768,"props":972,"children":975},{"href":973,"rel":974},"https://msdn.microsoft.com/en-us/library/system.io.binaryreader(v=vs.110).aspx",[772],[976],{"type":602,"value":957},{"type":602,"value":794},{"type":597,"tag":768,"props":979,"children":982},{"href":980,"rel":981},"https://msdn.microsoft.com/en-us/library/system.io.binarywriter(v=vs.110).aspx",[772],[983],{"type":602,"value":965},{"type":597,"tag":598,"props":985,"children":986},{},[987],{"type":602,"value":988},"These classes are much simpler. They do little more than allowing us to write and read primitive types like integers and booleans to and from an arbitrary stream.",{"type":597,"tag":598,"props":990,"children":991},{},[992],{"type":602,"value":993},"This means that we cannot write the entire structure to our stream with just a single line of code any more. Instead we need to write and read all fields manually:",{"type":597,"tag":605,"props":995,"children":997},{"code":996},"struct MyStruct\n{\n    int anInteger;\n    float aFloat;\n    long aLong;\n\n    public byte[] ToArray()\n    {\n        var stream = new MemoryStream();\n        var writer = new BinaryWriter(stream);\n\n        writer.Write(this.anInteger);\n        writer.Write(this.aFloat);\n        writer.Write(this.aLong);\n\n        return stream.ToArray();\n    }\n\n    public static MyStruct FromArray(byte[] bytes)\n    {\n        var reader = new BinaryReader(new MemoryStream(bytes));\n\n        var s = default(MyStruct);\n\n        s.anInteger = reader.ReadInt32();\n        s.aFloat = reader.ReadSingle();\n        s.aLong = reader.ReadInt64();\n\n        return s;\n    }\n}\n",[998],{"type":597,"tag":610,"props":999,"children":1000},{"__ignoreMap":591},[1001],{"type":602,"value":996},{"type":597,"tag":598,"props":1003,"children":1004},{},[1005],{"type":602,"value":1006},"Using these methods is similarly easy to the ones above:",{"type":597,"tag":605,"props":1008,"children":1010},{"code":1009},"var data = new MyStruct();\nvar array = data.ToArray();\nvar data2 = MyStruct.FromArray(array);\n",[1011],{"type":597,"tag":610,"props":1012,"children":1013},{"__ignoreMap":591},[1014],{"type":602,"value":1009},{"type":597,"tag":598,"props":1016,"children":1017},{},[1018],{"type":602,"value":1019},"In this case, the returned array is indeed exactly 16 bytes long.",{"type":597,"tag":861,"props":1021,"children":1023},{"id":1022},"performance-1",[1024],{"type":602,"value":866},{"type":597,"tag":598,"props":1026,"children":1027},{},[1028],{"type":602,"value":1029},"But how does this manual approach measure up in performance?",{"type":597,"tag":598,"props":1031,"children":1032},{},[1033],{"type":602,"value":1034},"Very well!",{"type":597,"tag":598,"props":1036,"children":1037},{},[1038],{"type":602,"value":1039},"In my test, the times for serialising and deserialising went from 4.86 and 3.85 down to 0.50 and 0.20 seconds respectively (again for one million conversions each).",{"type":597,"tag":598,"props":1041,"children":1042},{},[1043],{"type":602,"value":1044},"It turns out this approach is not only space efficient, but it is also around ten times faster than the previous one – seemingly no reason to look back!",{"type":597,"tag":598,"props":1046,"children":1047},{},[1048,1050,1055,1057,1062,1063,1068],{"type":602,"value":1049},"In fact, there is an optimisation we can make to increase performance even further: We do not have to create new ",{"type":597,"tag":610,"props":1051,"children":1053},{"className":1052},[],[1054],{"type":602,"value":813},{"type":602,"value":1056},"s and ",{"type":597,"tag":610,"props":1058,"children":1060},{"className":1059},[],[1061],{"type":602,"value":965},{"type":602,"value":959},{"type":597,"tag":610,"props":1064,"children":1066},{"className":1065},[],[1067],{"type":602,"value":957},{"type":602,"value":1069},"s for each method call. Instead we can reuse them – either by having static ones (watch out for thread-safety!) or by keeping them in whatever object manages for example our network traffic.",{"type":597,"tag":598,"props":1071,"children":1072},{},[1073],{"type":602,"value":1074},"Doing so drops my measured time down to 0.14 and 0.11 seconds respectively.",{"type":597,"tag":598,"props":1076,"children":1077},{},[1078],{"type":602,"value":1079},"Note that the same optimisation can be applied to the first method. However – while positive – the performance increase is much less than in this case, relative to the overall much worse time.",{"type":597,"tag":861,"props":1081,"children":1083},{"id":1082},"some-concerns",[1084],{"type":602,"value":1085},"Some concerns",{"type":597,"tag":598,"props":1087,"children":1088},{},[1089],{"type":602,"value":1090},"If we do look back to the code however, note how if we add another structure that we would like to serialise, we have to add the two methods to it, and adapt them to its fields.",{"type":597,"tag":598,"props":1092,"children":1093},{},[1094],{"type":602,"value":1095},"Further, if we change one of our structures, we have to make sure to reflect that change in both of these methods. We are bound to forget – especially when adding a new field – which could easily result in a small debugging nightmare.",{"type":597,"tag":598,"props":1097,"children":1098},{},[1099],{"type":602,"value":1100},"Ideally we can find a solution that is fast, uses little space, and does not require us to continuously maintain our serialisation code.",{"type":597,"tag":700,"props":1102,"children":1104},{"id":1103},"marshalling",[1105],{"type":602,"value":1106},"Marshalling",{"type":597,"tag":598,"props":1108,"children":1109},{},[1110],{"type":602,"value":1111},"The last approach we will take a look at is that of marshalling.",{"type":597,"tag":598,"props":1113,"children":1114},{},[1115],{"type":602,"value":1116},"Marshalling refers to using both managed and unmanaged data and the transfer between them. By default, any object created in C# lives in managed memory, which has a lot of advantages – such as automatic garbage collection. Using unmanaged memory on the other hand is more difficult in C#, and requires us to allocate and free space manually. If we forget to do so, we may cause memory leaks that will eventually cause our application to crash.",{"type":597,"tag":598,"props":1118,"children":1119},{},[1120,1122,1129],{"type":602,"value":1121},"All of the functionality we are interested in can be found in the static ",{"type":597,"tag":768,"props":1123,"children":1126},{"href":1124,"rel":1125},"https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal(v=vs.100).aspx",[772],[1127],{"type":602,"value":1128},"Marshal",{"type":602,"value":776},{"type":597,"tag":598,"props":1131,"children":1132},{},[1133],{"type":602,"value":1134},"Specifically, we will use:",{"type":597,"tag":1136,"props":1137,"children":1138},"ul",{},[1139,1151,1162,1173,1184,1195],{"type":597,"tag":1140,"props":1141,"children":1142},"li",{},[1143,1149],{"type":597,"tag":610,"props":1144,"children":1146},{"className":1145},[],[1147],{"type":602,"value":1148},"Marshal.SizeOf()",{"type":602,"value":1150},"\nto determine the byte size of our structs;",{"type":597,"tag":1140,"props":1152,"children":1153},{},[1154,1160],{"type":597,"tag":610,"props":1155,"children":1157},{"className":1156},[],[1158],{"type":602,"value":1159},"Marshal.AllocHGlobal()",{"type":602,"value":1161},"\nto allocate unmanaged memory;",{"type":597,"tag":1140,"props":1163,"children":1164},{},[1165,1171],{"type":597,"tag":610,"props":1166,"children":1168},{"className":1167},[],[1169],{"type":602,"value":1170},"Marshal.StructureToPtr()",{"type":602,"value":1172},"\nto marshal (copy) our structure to the allocated unmanaged memory;",{"type":597,"tag":1140,"props":1174,"children":1175},{},[1176,1182],{"type":597,"tag":610,"props":1177,"children":1179},{"className":1178},[],[1180],{"type":602,"value":1181},"Marshal.PtrToStructure()",{"type":602,"value":1183},"\nto marshal (copy) from unmanaged memory back to our structure;",{"type":597,"tag":1140,"props":1185,"children":1186},{},[1187,1193],{"type":597,"tag":610,"props":1188,"children":1190},{"className":1189},[],[1191],{"type":602,"value":1192},"Marshal.Copy()",{"type":602,"value":1194},"\nto copy between the unmanaged memory and our byte array;",{"type":597,"tag":1140,"props":1196,"children":1197},{},[1198,1204],{"type":597,"tag":610,"props":1199,"children":1201},{"className":1200},[],[1202],{"type":602,"value":1203},"Marshal.FreeHGlobal()",{"type":602,"value":1205},"\nto free the allocated memory;",{"type":597,"tag":598,"props":1207,"children":1208},{},[1209],{"type":602,"value":1210},"Using these methods we can construct the following methods:",{"type":597,"tag":605,"props":1212,"children":1214},{"code":1213},"public static byte[] Serialize\u003CT>(T s)\n    where T : struct\n{\n    var size = Marshal.SizeOf(typeof(T));\n    var array = new byte[size];\n    var ptr = Marshal.AllocHGlobal(size);\n    Marshal.StructureToPtr(s, ptr, true);\n    Marshal.Copy(ptr, array, 0, size);\n    Marshal.FreeHGlobal(ptr);\n    return array;\n}\n\npublic static T Deserialize\u003CT>(byte[] array)\n    where T : struct\n{\n    var size = Marshal.SizeOf(typeof(T));\n    var ptr = Marshal.AllocHGlobal(size);\n    Marshal.Copy(array, 0, ptr, size);\n    var s = (T)Marshal.PtrToStructure(ptr, typeof(T));\n    Marshal.FreeHGlobal(ptr);\n    return s;\n}\n",[1215],{"type":597,"tag":610,"props":1216,"children":1217},{"__ignoreMap":591},[1218],{"type":602,"value":1213},{"type":597,"tag":598,"props":1220,"children":1221},{},[1222,1224,1231],{"type":602,"value":1223},"Note that due to the unsafety of using unmanaged memory, we may want to use a ",{"type":597,"tag":768,"props":1225,"children":1228},{"href":1226,"rel":1227},"https://msdn.microsoft.com/en-us/library/zwc8s4fz.aspx",[772],[1229],{"type":602,"value":1230},"try – finally",{"type":602,"value":1232}," block to make sure the memory will always be freed, even if something goes wrong. For brevity, this is left out here.",{"type":597,"tag":598,"props":1234,"children":1235},{},[1236],{"type":602,"value":1237},"When testing our code, which again is as easy to use as before – in fact the method signatures are exactly the same as our first pair – we see that it indeed works as we hope.",{"type":597,"tag":598,"props":1239,"children":1240},{},[1241],{"type":602,"value":1242},"Without any code inside our structures and completely generic methods there is no need to write or maintain any code when adding or modifying structures.",{"type":597,"tag":598,"props":1244,"children":1245},{},[1246],{"type":602,"value":1247},"Further the resulting array is the expected 16 bytes long.",{"type":597,"tag":861,"props":1249,"children":1251},{"id":1250},"performance-2",[1252],{"type":602,"value":866},{"type":597,"tag":598,"props":1254,"children":1255},{},[1256],{"type":602,"value":1257},"When running these methods through the tests, converting structs to byte arrays and vice versa takes a mere 0.47 and 0.60 seconds respectively (again for one million calls).",{"type":597,"tag":700,"props":1259,"children":1261},{"id":1260},"comparison",[1262],{"type":602,"value":1263},"Comparison",{"type":597,"tag":598,"props":1265,"children":1266},{},[1267],{"type":602,"value":1268},"Here is a table with the results from the performance tests:",{"type":602,"value":1270},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1272,"props":1273,"children":1274},"table",{},[1275,1299],{"type":597,"tag":1276,"props":1277,"children":1278},"thead",{},[1279],{"type":597,"tag":1280,"props":1281,"children":1282},"tr",{},[1283,1289,1294],{"type":597,"tag":1284,"props":1285,"children":1286},"th",{},[1287],{"type":602,"value":1288},"16 byte struct",{"type":597,"tag":1284,"props":1290,"children":1291},{},[1292],{"type":602,"value":1293},"struct to array",{"type":597,"tag":1284,"props":1295,"children":1296},{},[1297],{"type":602,"value":1298},"array to struct",{"type":597,"tag":1300,"props":1301,"children":1302},"tbody",{},[1303,1322,1340,1368],{"type":597,"tag":1280,"props":1304,"children":1305},{},[1306,1312,1317],{"type":597,"tag":1307,"props":1308,"children":1309},"td",{},[1310],{"type":602,"value":1311},"binary formatter (218 byte array!)",{"type":597,"tag":1307,"props":1313,"children":1314},{},[1315],{"type":602,"value":1316},"4.86s",{"type":597,"tag":1307,"props":1318,"children":1319},{},[1320],{"type":602,"value":1321},"3.85s",{"type":597,"tag":1280,"props":1323,"children":1324},{},[1325,1330,1335],{"type":597,"tag":1307,"props":1326,"children":1327},{},[1328],{"type":602,"value":1329},"binary writer/reader",{"type":597,"tag":1307,"props":1331,"children":1332},{},[1333],{"type":602,"value":1334},"0.50s",{"type":597,"tag":1307,"props":1336,"children":1337},{},[1338],{"type":602,"value":1339},"0.20s",{"type":597,"tag":1280,"props":1341,"children":1342},{},[1343,1352,1360],{"type":597,"tag":1307,"props":1344,"children":1345},{},[1346],{"type":597,"tag":1347,"props":1348,"children":1349},"strong",{},[1350],{"type":602,"value":1351},"binary w/r (singleton)",{"type":597,"tag":1307,"props":1353,"children":1354},{},[1355],{"type":597,"tag":1347,"props":1356,"children":1357},{},[1358],{"type":602,"value":1359},"0.14s",{"type":597,"tag":1307,"props":1361,"children":1362},{},[1363],{"type":597,"tag":1347,"props":1364,"children":1365},{},[1366],{"type":602,"value":1367},"0.11s",{"type":597,"tag":1280,"props":1369,"children":1370},{},[1371,1375,1380],{"type":597,"tag":1307,"props":1372,"children":1373},{},[1374],{"type":602,"value":1103},{"type":597,"tag":1307,"props":1376,"children":1377},{},[1378],{"type":602,"value":1379},"0.47s",{"type":597,"tag":1307,"props":1381,"children":1382},{},[1383],{"type":602,"value":1384},"0.60s",{"type":597,"tag":598,"props":1386,"children":1387},{},[1388,1390,1395,1396,1401],{"type":602,"value":1389},"Clearly, if what we care about most is performance, writing and reading our data manually, using shared ",{"type":597,"tag":610,"props":1391,"children":1393},{"className":1392},[],[1394],{"type":602,"value":957},{"type":602,"value":794},{"type":597,"tag":610,"props":1397,"children":1399},{"className":1398},[],[1400],{"type":602,"value":965},{"type":602,"value":1402}," objects is the fastest method.",{"type":597,"tag":598,"props":1404,"children":1405},{},[1406,1408,1413,1414,1419],{"type":602,"value":1407},"On the other hand, the ",{"type":597,"tag":610,"props":1409,"children":1411},{"className":1410},[],[1412],{"type":602,"value":761},{"type":602,"value":794},{"type":597,"tag":610,"props":1415,"children":1417},{"className":1416},[],[1418],{"type":602,"value":1128},{"type":602,"value":1420}," methods allow for much easier reuse and make our code significantly more robust to change since there is no code to update and maintain.",{"type":597,"tag":598,"props":1422,"children":1423},{},[1424],{"type":602,"value":1425},"To provide some more data, here are the results from the same test, but this time with a 128 byte structure:",{"type":602,"value":1270},{"type":597,"tag":1272,"props":1428,"children":1429},{},[1430,1449],{"type":597,"tag":1276,"props":1431,"children":1432},{},[1433],{"type":597,"tag":1280,"props":1434,"children":1435},{},[1436,1441,1445],{"type":597,"tag":1284,"props":1437,"children":1438},{},[1439],{"type":602,"value":1440},"128 byte struct",{"type":597,"tag":1284,"props":1442,"children":1443},{},[1444],{"type":602,"value":1293},{"type":597,"tag":1284,"props":1446,"children":1447},{},[1448],{"type":602,"value":1298},{"type":597,"tag":1300,"props":1450,"children":1451},{},[1452,1469,1486,1512],{"type":597,"tag":1280,"props":1453,"children":1454},{},[1455,1459,1464],{"type":597,"tag":1307,"props":1456,"children":1457},{},[1458],{"type":602,"value":1311},{"type":597,"tag":1307,"props":1460,"children":1461},{},[1462],{"type":602,"value":1463},"17.32s",{"type":597,"tag":1307,"props":1465,"children":1466},{},[1467],{"type":602,"value":1468},"14.47s",{"type":597,"tag":1280,"props":1470,"children":1471},{},[1472,1476,1481],{"type":597,"tag":1307,"props":1473,"children":1474},{},[1475],{"type":602,"value":1329},{"type":597,"tag":1307,"props":1477,"children":1478},{},[1479],{"type":602,"value":1480},"1.48s",{"type":597,"tag":1307,"props":1482,"children":1483},{},[1484],{"type":602,"value":1485},"0.66s",{"type":597,"tag":1280,"props":1487,"children":1488},{},[1489,1496,1504],{"type":597,"tag":1307,"props":1490,"children":1491},{},[1492],{"type":597,"tag":1347,"props":1493,"children":1494},{},[1495],{"type":602,"value":1351},{"type":597,"tag":1307,"props":1497,"children":1498},{},[1499],{"type":597,"tag":1347,"props":1500,"children":1501},{},[1502],{"type":602,"value":1503},"0.78s",{"type":597,"tag":1307,"props":1505,"children":1506},{},[1507],{"type":597,"tag":1347,"props":1508,"children":1509},{},[1510],{"type":602,"value":1511},"0.56s",{"type":597,"tag":1280,"props":1513,"children":1514},{},[1515,1519,1524],{"type":597,"tag":1307,"props":1516,"children":1517},{},[1518],{"type":602,"value":1103},{"type":597,"tag":1307,"props":1520,"children":1521},{},[1522],{"type":602,"value":1523},"0.84s",{"type":597,"tag":1307,"props":1525,"children":1526},{},[1527],{"type":602,"value":1528},"0.75s",{"type":597,"tag":598,"props":1530,"children":1531},{},[1532,1534,1539,1540,1545,1547,1552],{"type":602,"value":1533},"We can see that the relative ordering of the different measurements is still the same. However, note how the ",{"type":597,"tag":610,"props":1535,"children":1537},{"className":1536},[],[1538],{"type":602,"value":957},{"type":602,"value":794},{"type":597,"tag":610,"props":1541,"children":1543},{"className":1542},[],[1544],{"type":602,"value":965},{"type":602,"value":1546}," measurements are getting significantly closer to the ",{"type":597,"tag":610,"props":1548,"children":1550},{"className":1549},[],[1551],{"type":602,"value":1128},{"type":602,"value":1553}," ones.",{"type":597,"tag":598,"props":1555,"children":1556},{},[1557],{"type":602,"value":1558},"While I would not necessarily encourage structures of this size, I would argue that marshalling is the best approach for large structures in almost every case. The slightly slower performance is easily justified by the much more maintainable code.",{"type":597,"tag":598,"props":1560,"children":1561},{},[1562],{"type":602,"value":1563},"In fact, I would go as far and say that even for small structures the ease of using marshalling is still top advantageous despite the lower performance.",{"type":597,"tag":598,"props":1565,"children":1566},{},[1567],{"type":602,"value":1568},"In the end, binary serialization is unlikely to ever be a bottleneck, and unless it is, we should choose the option that fulfils our requirements of small array size and ease of use.",{"type":597,"tag":700,"props":1570,"children":1572},{"id":1571},"conclusion",[1573],{"type":602,"value":1574},"Conclusion",{"type":597,"tag":598,"props":1576,"children":1577},{},[1578],{"type":602,"value":1579},"We took a look at three – and a half – different ways of converting between structs and byte arrays.",{"type":597,"tag":598,"props":1581,"children":1582},{},[1583,1585,1590],{"type":602,"value":1584},"Judging by memory usage, performance, and ease of use, there is no clear winner – only a clear loser unless we specifically need the additional functionality of ",{"type":597,"tag":610,"props":1586,"children":1588},{"className":1587},[],[1589],{"type":602,"value":761},{"type":602,"value":802},{"type":597,"tag":598,"props":1592,"children":1593},{},[1594],{"type":602,"value":1595},"However, in marshalling we found a method that is reasonably fast, while acing our other requirements.",{"type":597,"tag":598,"props":1597,"children":1598},{},[1599],{"type":602,"value":1600},"While in extremely performance critical code we may want to write our data manually, marshalling is likely the best alternative in the vast majority of cases.",{"type":597,"tag":598,"props":1602,"children":1603},{},[1604],{"type":602,"value":1605},"Feel free to let me know if you agree with this analysis, or if you have other methods of achieving the same result that may be worth looking into.",{"type":597,"tag":598,"props":1607,"children":1608},{},[1609],{"type":602,"value":1610},"Enjoy the pixels!",{"title":591,"searchDepth":673,"depth":673,"links":1612},[1613,1614,1615,1619,1624,1627,1628],{"id":702,"depth":673,"text":705},{"id":728,"depth":673,"text":731},{"id":754,"depth":673,"text":761,"children":1616},[1617],{"id":863,"depth":1618,"text":866},3,{"id":950,"depth":673,"text":1620,"children":1621},"BinaryWriter/BinaryReader",[1622,1623],{"id":1022,"depth":1618,"text":866},{"id":1082,"depth":1618,"text":1085},{"id":1103,"depth":673,"text":1106,"children":1625},[1626],{"id":1250,"depth":1618,"text":866},{"id":1260,"depth":673,"text":1263},{"id":1571,"depth":673,"text":1574},"content:dotnet:2021-05-01-Converting-between-Structs-and-Byte-Arrays.md","dotnet/2021-05-01-Converting-between-Structs-and-Byte-Arrays.md","2021-05-01",{"_path":134,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":133,"description":1633,"body":1634,"_type":675,"_id":1805,"_source":677,"_file":1806,"_extension":679,"date":1807},"IntroductionWhen you use HTTP on your Identity Server 4 enabled website, users may not login because of the changes made by Chrome in the version 8x. This occurs when you use HTTP schema in your website. The issue is explained here https://docs.microsoft.com/en-gb/dotnet/core/compatibility/3.0-3.1#h",{"type":594,"children":1635,"toc":1797},[1636,1642,1653,1659,1665,1677,1688,1694,1714,1727,1736,1742,1768,1777,1782,1786],{"type":597,"tag":700,"props":1637,"children":1639},{"id":1638},"introduction",[1640],{"type":602,"value":1641},"Introduction",{"type":597,"tag":598,"props":1643,"children":1644},{},[1645,1647],{"type":602,"value":1646},"When you use HTTP on your Identity Server 4 enabled website, users may not login because of the changes made by Chrome in the version 8x. This occurs when you use HTTP schema in your website. The issue is explained here ",{"type":597,"tag":768,"props":1648,"children":1651},{"href":1649,"rel":1650},"https://docs.microsoft.com/en-gb/dotnet/core/compatibility/3.0-3.1#http-browser-samesite-changes-impact-authentication",[772],[1652],{"type":602,"value":1649},{"type":597,"tag":700,"props":1654,"children":1656},{"id":1655},"how-to-solve-it",[1657],{"type":602,"value":1658},"How to solve it?",{"type":597,"tag":861,"props":1660,"children":1662},{"id":1661},"step-1",[1663],{"type":602,"value":1664},"Step-1",{"type":597,"tag":598,"props":1666,"children":1667},{},[1668,1670,1675],{"type":602,"value":1669},"Create the below extension in your *",{"type":597,"tag":1347,"props":1671,"children":1672},{},[1673],{"type":602,"value":1674},".Web",{"type":602,"value":1676}," project.",{"type":597,"tag":605,"props":1678,"children":1683},{"className":1679,"code":1681,"language":1682,"meta":591},[1680],"language-csharp","using System;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public static class SameSiteCookiesServiceCollectionExtensions\n    {\n        /// \u003Csummary>\n        /// -1 defines the unspecified value, which tells ASPNET Core to NOT\n        /// send the SameSite attribute. With ASPNET Core 3.1 the\n        /// \u003Cseealso cref=\"SameSiteMode\" /> enum will have a definition for\n        /// Unspecified.\n        /// \u003C/summary>\n        private const SameSiteMode Unspecified = (SameSiteMode)(-1);\n\n        /// \u003Csummary>\n        /// Configures a cookie policy to properly set the SameSite attribute\n        /// for Browsers that handle unknown values as Strict. Ensure that you\n        /// add the \u003Cseealso cref=\"Microsoft.AspNetCore.CookiePolicy.CookiePolicyMiddleware\" />\n        /// into the pipeline before sending any cookies!\n        /// \u003C/summary>\n        /// \u003Cremarks>\n        /// Minimum ASPNET Core Version required for this code:\n        ///   - 2.1.14\n        ///   - 2.2.8\n        ///   - 3.0.1\n        ///   - 3.1.0-preview1\n        /// Starting with version 80 of Chrome (to be released in February 2020)\n        /// cookies with NO SameSite attribute are treated as SameSite=Lax.\n        /// In order to always get the cookies send they need to be set to\n        /// SameSite=None. But since the current standard only defines Lax and\n        /// Strict as valid values there are some browsers that treat invalid\n        /// values as SameSite=Strict. We therefore need to check the browser\n        /// and either send SameSite=None or prevent the sending of SameSite=None.\n        /// Relevant links:\n        /// - https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1\n        /// - https://tools.ietf.org/html/draft-west-cookie-incrementalism-00\n        /// - https://www.chromium.org/updates/same-site\n        /// - https://devblogs.microsoft.com/aspnet/upcoming-samesite-cookie-changes-in-asp-net-and-asp-net-core/\n        /// - https://bugs.webkit.org/show_bug.cgi?id=198181\n        /// \u003C/remarks>\n        /// \u003Cparam name=\"services\">The service collection to register \u003Csee cref=\"CookiePolicyOptions\" /> into.\u003C/param>\n        /// \u003Creturns>The modified \u003Csee cref=\"IServiceCollection\" />.\u003C/returns>\n        public static IServiceCollection ConfigureNonBreakingSameSiteCookies(this IServiceCollection services)\n        {\n            services.Configure\u003CCookiePolicyOptions>(options =>\n            {\n                options.MinimumSameSitePolicy = Unspecified;\n                options.OnAppendCookie = cookieContext =>\n                CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\n                options.OnDeleteCookie = cookieContext =>\n                CheckSameSite(cookieContext.Context, cookieContext.CookieOptions);\n            });\n\n            return services;\n        }\n\n        private static void CheckSameSite(HttpContext httpContext, CookieOptions options)\n        {\n            if (options.SameSite == SameSiteMode.None)\n            {\n                var userAgent = httpContext.Request.Headers[\"User-Agent\"].ToString();\n\n                if (DisallowsSameSiteNone(userAgent))\n                {\n                    options.SameSite = Unspecified;\n                }\n            }\n        }\n\n        /// \u003Csummary>\n        /// Checks if the UserAgent is known to interpret an unknown value as Strict.\n        /// For those the \u003Csee cref=\"CookieOptions.SameSite\" /> property should be\n        /// set to \u003Csee cref=\"Unspecified\" />.\n        /// \u003C/summary>\n        /// \u003Cremarks>\n        /// This code is taken from Microsoft:\n        /// https://devblogs.microsoft.com/aspnet/upcoming-samesite-cookie-changes-in-asp-net-and-asp-net-core/\n        /// \u003C/remarks>\n        /// \u003Cparam name=\"userAgent\">The user agent string to check.\u003C/param>\n        /// \u003Creturns>Whether the specified user agent (browser) accepts SameSite=None or not.\u003C/returns>\n        private static bool DisallowsSameSiteNone(string userAgent)\n        {\n            // Cover all iOS based browsers here. This includes:\n            //   - Safari on iOS 12 for iPhone, iPod Touch, iPad\n            //   - WkWebview on iOS 12 for iPhone, iPod Touch, iPad\n            //   - Chrome on iOS 12 for iPhone, iPod Touch, iPad\n            // All of which are broken by SameSite=None, because they use the\n            // iOS networking stack.\n            // Notes from Thinktecture:\n            // Regarding https://caniuse.com/#search=samesite iOS versions lower\n            // than 12 are not supporting SameSite at all. Starting with version 13\n            // unknown values are NOT treated as strict anymore. Therefore we only\n            // need to check version 12.\n            if (userAgent.Contains(\"CPU iPhone OS 12\")\n               || userAgent.Contains(\"iPad; CPU OS 12\"))\n            {\n                return true;\n            }\n\n            // Cover Mac OS X based browsers that use the Mac OS networking stack.\n            // This includes:\n            //   - Safari on Mac OS X.\n            // This does not include:\n            //   - Chrome on Mac OS X\n            // because they do not use the Mac OS networking stack.\n            // Notes from Thinktecture:\n            // Regarding https://caniuse.com/#search=samesite MacOS X versions lower\n            // than 10.14 are not supporting SameSite at all. Starting with version\n            // 10.15 unknown values are NOT treated as strict anymore. Therefore we\n            // only need to check version 10.14.\n            if (userAgent.Contains(\"Safari\")\n               && userAgent.Contains(\"Macintosh; Intel Mac OS X 10_14\")\n               && userAgent.Contains(\"Version/\"))\n            {\n                return true;\n            }\n\n            // Cover Chrome 50-69, because some versions are broken by SameSite=None\n            // and none in this range require it.\n            // Note: this covers some pre-Chromium Edge versions,\n            // but pre-Chromium Edge does not require SameSite=None.\n            // Notes from Thinktecture:\n            // We can not validate this assumption, but we trust Microsofts\n            // evaluation. And overall not sending a SameSite value equals to the same\n            // behavior as SameSite=None for these old versions anyways.\n            if (userAgent.Contains(\"Chrome/5\") || userAgent.Contains(\"Chrome/6\"))\n            {\n                return true;\n            }\n\n            if (GetChromeVersion(userAgent) >= 80)\n            {\n                return true;\n            }\n\n            return false;\n        }\n\n        private static int GetChromeVersion(string userAgent)\n        {\n            try\n            {\n                return Convert.ToInt32(userAgent.Split(\"Chrome/\")[1].Split('.')[0]);\n            }\n            catch (Exception)\n            {\n                return 0;\n            }\n        }\n    }\n}\n","csharp",[1684],{"type":597,"tag":610,"props":1685,"children":1686},{"__ignoreMap":591},[1687],{"type":602,"value":1681},{"type":597,"tag":861,"props":1689,"children":1691},{"id":1690},"step-2",[1692],{"type":602,"value":1693},"Step-2",{"type":597,"tag":598,"props":1695,"children":1696},{},[1697,1699,1705,1707,1713],{"type":602,"value":1698},"Assume that your project name is ",{"type":597,"tag":1700,"props":1701,"children":1702},"em",{},[1703],{"type":602,"value":1704},"Acme.BookStore",{"type":602,"value":1706},". Then open ",{"type":597,"tag":610,"props":1708,"children":1710},{"className":1709},[],[1711],{"type":602,"value":1712},"AcmeBookStoreWebModule.cs",{"type":602,"value":776},{"type":597,"tag":598,"props":1715,"children":1716},{},[1717,1719,1725],{"type":602,"value":1718},"Add the following line to ",{"type":597,"tag":610,"props":1720,"children":1722},{"className":1721},[],[1723],{"type":602,"value":1724},"ConfigureServices()",{"type":602,"value":1726}," method.",{"type":597,"tag":605,"props":1728,"children":1731},{"className":1729,"code":1730,"language":1682,"meta":591},[1680],"context.Services.ConfigureNonBreakingSameSiteCookies();\n",[1732],{"type":597,"tag":610,"props":1733,"children":1734},{"__ignoreMap":591},[1735],{"type":602,"value":1730},{"type":597,"tag":861,"props":1737,"children":1739},{"id":1738},"step-3",[1740],{"type":602,"value":1741},"Step-3",{"type":597,"tag":598,"props":1743,"children":1744},{},[1745,1747,1753,1755,1760,1762],{"type":602,"value":1746},"Go to",{"type":597,"tag":610,"props":1748,"children":1750},{"className":1749},[],[1751],{"type":602,"value":1752},"OnApplicationInitialization()",{"type":602,"value":1754}," method in ",{"type":597,"tag":610,"props":1756,"children":1758},{"className":1757},[],[1759],{"type":602,"value":1712},{"type":602,"value":1761}," add ",{"type":597,"tag":610,"props":1763,"children":1765},{"className":1764},[],[1766],{"type":602,"value":1767},"app.UseCookiePolicy();",{"type":597,"tag":605,"props":1769,"children":1772},{"className":1770,"code":1771,"language":1682,"meta":591},[1680],"public override void OnApplicationInitialization(ApplicationInitializationContext context)\n{\n        var app = context.GetApplicationBuilder();\n        var env = context.GetEnvironment();\n\n        if (env.IsDevelopment())\n        {\n                app.UseDeveloperExceptionPage();\n        }\n        else\n        {\n                app.UseErrorPage();\n                app.UseHsts();\n        }\n         // Before UseAuthentication or anything else that writes cookies.\n        app.UseCookiePolicy(); //\u003C--- added this --->\n\n    //....\n}\n",[1773],{"type":597,"tag":610,"props":1774,"children":1775},{"__ignoreMap":591},[1776],{"type":602,"value":1771},{"type":597,"tag":598,"props":1778,"children":1779},{},[1780],{"type":602,"value":1781},"It's all! You are ready to go!",{"type":597,"tag":1783,"props":1784,"children":1785},"hr",{},[],{"type":597,"tag":598,"props":1787,"children":1788},{},[1789,1791],{"type":602,"value":1790},"Referenced from ",{"type":597,"tag":768,"props":1792,"children":1795},{"href":1793,"rel":1794},"https://www.thinktecture.com/en/identity/samesite/prepare-your-identityserver/",[772],[1796],{"type":602,"value":1793},{"title":591,"searchDepth":673,"depth":673,"links":1798},[1799,1800],{"id":1638,"depth":673,"text":1641},{"id":1655,"depth":673,"text":1658,"children":1801},[1802,1803,1804],{"id":1661,"depth":1618,"text":1664},{"id":1690,"depth":1618,"text":1693},{"id":1738,"depth":1618,"text":1741},"content:dotnet:2020-12-11-chrome-login-fail.md","dotnet/2020-12-11-chrome-login-fail.md","2020-12-11",{"_path":131,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":130,"description":1809,"body":1810,"_type":675,"_id":1988,"_source":677,"_file":1989,"_extension":679,"date":1990},"假如有类型 Show 的定义如下十進位表示法\n[Flags]\nenum Days\n{\n    None      = 0,  // 0000 0000\n    Sunday    = 1,  // 0000 0001\n    Monday    = 2,  // 0000 0010\n    Tuesday   = 4,  // 0000 0100\n    Wednesday = 8,  // 0000 1000\n    Thursday  = 16, // 0001 0000\n    Friday    = 32, // 0010 0000\n    Saturday  = 64  // 010",{"type":594,"children":1811,"toc":1982},[1812,1817,1825,1848,1854,1859,1870,1879,1885,1894,1902,1908,1917,1925,1933,1939,1948,1953,1961,1974],{"type":597,"tag":598,"props":1813,"children":1814},{},[1815],{"type":602,"value":1816},"假如有类型 Show 的定义如下",{"type":597,"tag":605,"props":1818,"children":1820},{"code":1819},"十進位表示法\n[Flags]\nenum Days\n{\n    None      = 0,  // 0000 0000\n    Sunday    = 1,  // 0000 0001\n    Monday    = 2,  // 0000 0010\n    Tuesday   = 4,  // 0000 0100\n    Wednesday = 8,  // 0000 1000\n    Thursday  = 16, // 0001 0000\n    Friday    = 32, // 0010 0000\n    Saturday  = 64  // 0100 0000\n}\n位元移位表示法\n[Flags]\nenum Days\n{\n    None      = 0,      // 0000 0000\n    Sunday    = 1 \u003C\u003C 0, // 0000 0001\n    Monday    = 1 \u003C\u003C 1, // 0000 0010\n    Tuesday   = 1 \u003C\u003C 2, // 0000 0100\n    Wednesday = 1 \u003C\u003C 3, // 0000 1000\n    Thursday  = 1 \u003C\u003C 4, // 0001 0000\n    Friday    = 1 \u003C\u003C 5, // 0010 0000\n    Saturday  = 1 \u003C\u003C 6  // 0100 0000\n}\n二進位表示法 (C# 7.2新增)\n[Flags]\nenum Days\n{\n    None      = 0b_0000_0000, // 0000 0000\n    Sunday    = 0b_0000_0001, // 0000 0001\n    Monday    = 0b_0000_0010, // 0000 0010\n    Tuesday   = 0b_0000_0100, // 0000 0100\n    Wednesday = 0b_0000_1000, // 0000 1000\n    Thursday  = 0b_0001_0000, // 0001 0000\n    Friday    = 0b_0010_0000, // 0010 0000\n    Saturday  = 0b_0100_0000  // 0100 0000\n}\n \n十六進位表示法\n[Flags]\nenum RenderType\n{\n   None = 0x0,\n   DataUri = 0x1,\n   GZip = 0x2,\n   ContentPage = 0x4,\n   ViewPage = 0x8,\n   HomePage = 0x10 // Next two values could be 0x20, 0x40\n}\n",[1821],{"type":597,"tag":610,"props":1822,"children":1823},{"__ignoreMap":591},[1824],{"type":602,"value":1819},{"type":597,"tag":1136,"props":1826,"children":1827},{},[1828,1833,1838,1843],{"type":597,"tag":1140,"props":1829,"children":1830},{},[1831],{"type":602,"value":1832},"& 按位与",{"type":597,"tag":1140,"props":1834,"children":1835},{},[1836],{"type":602,"value":1837},"| 按位或",{"type":597,"tag":1140,"props":1839,"children":1840},{},[1841],{"type":602,"value":1842},"^ 按位异或",{"type":597,"tag":1140,"props":1844,"children":1845},{},[1846],{"type":602,"value":1847},"~取反",{"type":597,"tag":700,"props":1849,"children":1851},{"id":1850},"并集-添加",[1852],{"type":602,"value":1853},"并集 (添加)",{"type":597,"tag":598,"props":1855,"children":1856},{},[1857],{"type":602,"value":1858},"a|b: 并集(所有的和,相同部分只算一次);",{"type":597,"tag":605,"props":1860,"children":1865},{"code":1861,"language":1862,"meta":591,"className":1863},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A | B\n{'英语', '物理', '语文', '政治', '化学', '数学', '生物', '地理', '历史'}\n","swift",[1864],"language-swift",[1866],{"type":597,"tag":610,"props":1867,"children":1868},{"__ignoreMap":591},[1869],{"type":602,"value":1861},{"type":597,"tag":598,"props":1871,"children":1872},{},[1873],{"type":597,"tag":1874,"props":1875,"children":1878},"img",{"alt":1876,"src":1877},"image-20210404182659146","/images/2020-11-24-flags/image-20210404182659146.png",[],{"type":597,"tag":700,"props":1880,"children":1882},{"id":1881},"差集-去除",[1883],{"type":602,"value":1884},"差集 (去除)",{"type":597,"tag":605,"props":1886,"children":1889},{"code":1887,"language":1862,"meta":591,"className":1888},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & (~B)\n{'物理', '生物', '化学'}\n>>> B & (~A)\n{'政治', '历史', '地理'}\n  \n",[1864],[1890],{"type":597,"tag":610,"props":1891,"children":1892},{"__ignoreMap":591},[1893],{"type":602,"value":1887},{"type":597,"tag":598,"props":1895,"children":1896},{},[1897],{"type":597,"tag":1874,"props":1898,"children":1901},{"alt":1899,"src":1900},"image-20210404182718872","/images/2020-11-24-flags/image-20210404182718872.png",[],{"type":597,"tag":700,"props":1903,"children":1905},{"id":1904},"补集对称差集",[1906],{"type":602,"value":1907},"补集(对称差集)",{"type":597,"tag":605,"props":1909,"children":1912},{"code":1910,"language":1862,"meta":591,"className":1911},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A ^ B\n{'物理', '生物', '化学', '政治', '历史', '地理'}\n",[1864],[1913],{"type":597,"tag":610,"props":1914,"children":1915},{"__ignoreMap":591},[1916],{"type":602,"value":1910},{"type":597,"tag":598,"props":1918,"children":1919},{},[1920],{"type":597,"tag":1874,"props":1921,"children":1924},{"alt":1922,"src":1923},"image-20210404182742701","/images/2020-11-24-flags/image-20210404182742701.png",[],{"type":597,"tag":598,"props":1926,"children":1927},{},[1928],{"type":597,"tag":1874,"props":1929,"children":1932},{"alt":1930,"src":1931},"image-20210404182802570","/images/2020-11-24-flags/image-20210404182802570.png",[],{"type":597,"tag":700,"props":1934,"children":1936},{"id":1935},"交集-检查",[1937],{"type":602,"value":1938},"交集  (检查)",{"type":597,"tag":605,"props":1940,"children":1943},{"code":1941,"language":1862,"meta":591,"className":1942},">>> A = {'数学','语文','英语','物理','化学','生物'}\n>>> B = {'数学','语文','英语','政治','地理','历史'}\n>>> A & B\n{'英语', '语文', '数学'}\n",[1864],[1944],{"type":597,"tag":610,"props":1945,"children":1946},{"__ignoreMap":591},[1947],{"type":602,"value":1941},{"type":597,"tag":598,"props":1949,"children":1950},{},[1951],{"type":602,"value":1952},"或者",{"type":597,"tag":605,"props":1954,"children":1956},{"code":1955},"  Show show = Show.A | Show.B;\n  show.HasFlag(Show.A);\n",[1957],{"type":597,"tag":610,"props":1958,"children":1959},{"__ignoreMap":591},[1960],{"type":602,"value":1955},{"type":597,"tag":598,"props":1962,"children":1963},{},[1964,1966,1972],{"type":602,"value":1965},"从性能上看通过 ",{"type":597,"tag":610,"props":1967,"children":1969},{"className":1968},[],[1970],{"type":602,"value":1971},"&",{"type":602,"value":1973}," 的性能会比 HasFlag 高，但是从可读性上 HasFlag 更友好，如果你的代码没有性能问题推荐使用 HasFlag 方法",{"type":597,"tag":598,"props":1975,"children":1976},{},[1977],{"type":597,"tag":1874,"props":1978,"children":1981},{"alt":1979,"src":1980},"image-20210404182612251","/images/2020-11-24-flags/image-20210404182612251.png",[],{"title":591,"searchDepth":673,"depth":673,"links":1983},[1984,1985,1986,1987],{"id":1850,"depth":673,"text":1853},{"id":1881,"depth":673,"text":1884},{"id":1904,"depth":673,"text":1907},{"id":1935,"depth":673,"text":1938},"content:dotnet:2020-11-24-flags.md","dotnet/2020-11-24-flags.md","2020-11-24",{"_path":128,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":127,"description":1992,"body":1993,"_type":675,"_id":2235,"_source":677,"_file":2236,"_extension":679,"date":2237},"都知道反射伤性能，但不得不反射的时候又怎么办呢？当真的被问题逼迫的时候还是能找到解决办法的。",{"type":594,"children":1994,"toc":2231},[1995,1999,2004,2007,2012,2021,2026,2091,2096,2105,2110,2123,2128,2141,2146,2159,2168,2189,2202,2211],{"type":597,"tag":598,"props":1996,"children":1997},{},[1998],{"type":602,"value":1992},{"type":597,"tag":598,"props":2000,"children":2001},{},[2002],{"type":602,"value":2003},"为反射得到的方法创建一个委托，此后调用此委托将能够提高近乎直接调用方法本身的性能。（当然 Emit 也能够帮助我们显著提升性能，不过直接得到可以调用的委托不是更加方便吗？）",{"type":597,"tag":1783,"props":2005,"children":2006},{},[],{"type":597,"tag":861,"props":2008,"children":2010},{"id":2009},"性能对比数据",[2011],{"type":602,"value":2009},{"type":597,"tag":598,"props":2013,"children":2014},{},[2015,2019],{"type":597,"tag":1874,"props":2016,"children":2018},{"alt":2009,"src":2017},"/images/2020-11-13-Reflection-Method/20180227195855828",[],{"type":602,"value":2020},"\n▲ 没有什么能够比数据更有说服力（注意后面两行是有秒数的）",{"type":597,"tag":598,"props":2022,"children":2023},{},[2024],{"type":602,"value":2025},"可能我还需要解释一下那五行数据的含义：",{"type":597,"tag":2027,"props":2028,"children":2029},"ol",{},[2030,2042,2053,2069,2080],{"type":597,"tag":1140,"props":2031,"children":2032},{},[2033,2035,2040],{"type":602,"value":2034},"直接调用（��",{"type":597,"tag":1700,"props":2036,"children":2037},{},[2038],{"type":602,"value":2039},"应该没有什么比直接调用函数本身更有性能优势的吧",{"type":602,"value":2041},"）",{"type":597,"tag":1140,"props":2043,"children":2044},{},[2045,2047,2052],{"type":602,"value":2046},"做一个跟直接调用的方法功能一模一样的委托（��",{"type":597,"tag":1700,"props":2048,"children":2049},{},[2050],{"type":602,"value":2051},"目的是看看调用委托相比调用方法本身是否有性能损失，从数据上看，损失非常小",{"type":602,"value":2041},{"type":597,"tag":1140,"props":2054,"children":2055},{},[2056,2061,2063,2068],{"type":597,"tag":1347,"props":2057,"children":2058},{},[2059],{"type":602,"value":2060},"本文重点",{"type":602,"value":2062}," 将反射出来的方法创建一个委托，然后调用这个委托（��",{"type":597,"tag":1700,"props":2064,"children":2065},{},[2066],{"type":602,"value":2067},"看看吧，性能跟直接调差别也不大嘛",{"type":602,"value":2041},{"type":597,"tag":1140,"props":2070,"children":2071},{},[2072,2074,2079],{"type":602,"value":2073},"先反射得到方法，然后一直调用这个方法（��",{"type":597,"tag":1700,"props":2075,"children":2076},{},[2077],{"type":602,"value":2078},"终于可以看出来反射本身还是挺伤性能的了，50 多倍的性能损失啊",{"type":602,"value":2041},{"type":597,"tag":1140,"props":2081,"children":2082},{},[2083,2085,2090],{"type":602,"value":2084},"缓存都不用，从头开始反射然后调用得到的方法（��",{"type":597,"tag":1700,"props":2086,"children":2087},{},[2088],{"type":602,"value":2089},"100 多倍的性能损失了",{"type":602,"value":2041},{"type":597,"tag":598,"props":2092,"children":2093},{},[2094],{"type":602,"value":2095},"以下是测试代码，可以更好地理解上图数据的含义：",{"type":597,"tag":605,"props":2097,"children":2100},{"className":2098,"code":2099,"language":1682,"meta":591},[1680],"using System;\nusing System.Diagnostics;\nusing System.Reflection;\n\nnamespace Walterlv.Demo\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // 调用的目标实例。\n            var instance = new StubClass();\n\n            // 使用反射找到的方法。\n            var method = typeof(StubClass).GetMethod(nameof(StubClass.Test), new[] { typeof(int) });\n            Assert.IsNotNull(method);\n\n            // 将反射找到的方法创建一个委托。\n            var func = InstanceMethodBuilder\u003Cint, int>.CreateInstanceMethod(instance, method);\n\n            // 跟被测方法功能一样的纯委托。\n            Func\u003Cint, int> pureFunc = value => value;\n\n            // 测试次数。\n            var count = 10000000;\n\n            // 直接调用。\n            var watch = new Stopwatch();\n            watch.Start();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = instance.Test(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 直接调用\");\n\n            // 使用同样功能的 Func 调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = pureFunc(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用同样功能的 Func 调用\");\n\n            // 使用反射创建出来的委托调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = func(5);\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用反射创建出来的委托调用\");\n\n            // 使用反射得到的方法缓存调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = method.Invoke(instance, new object[] { 5 });\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 使用反射得到的方法缓存调用\");\n\n            // 直接使用反射调用。\n            watch.Restart();\n            for (var i = 0; i \u003C count; i++)\n            {\n                var result = typeof(StubClass).GetMethod(nameof(StubClass.Test), new[] { typeof(int) })\n                    ?.Invoke(instance, new object[] { 5 });\n            }\n\n            watch.Stop();\n            Console.WriteLine($\"{watch.Elapsed} - {count} 次 - 直接使用反射调用\");\n        }\n\n        private class StubClass\n        {\n            public int Test(int i)\n            {\n                return i;\n            }\n        }\n    }\n}\n",[2101],{"type":597,"tag":610,"props":2102,"children":2103},{"__ignoreMap":591},[2104],{"type":602,"value":2099},{"type":597,"tag":861,"props":2106,"children":2108},{"id":2107},"如何实现",[2109],{"type":602,"value":2107},{"type":597,"tag":598,"props":2111,"children":2112},{},[2113,2115,2121],{"type":602,"value":2114},"实现的关键就在于 ",{"type":597,"tag":610,"props":2116,"children":2118},{"className":2117},[],[2119],{"type":602,"value":2120},"MethodInfo.CreateDelegate",{"type":602,"value":2122}," 方法。这是 .NET Standard 中就有的方法，这意味着 .NET Framework 和 .NET Core 中都可以使用。",{"type":597,"tag":598,"props":2124,"children":2125},{},[2126],{"type":602,"value":2127},"此方法有两个重载：",{"type":597,"tag":1136,"props":2129,"children":2130},{},[2131,2136],{"type":597,"tag":1140,"props":2132,"children":2133},{},[2134],{"type":602,"value":2135},"要求传入一个类型，而这个类型就是应该转成的委托的类型",{"type":597,"tag":1140,"props":2137,"children":2138},{},[2139],{"type":602,"value":2140},"要求传入一个类型和一个实例，一样的，类型是应该转成的委托的类型",{"type":597,"tag":598,"props":2142,"children":2143},{},[2144],{"type":602,"value":2145},"他们的区别在于前者创建出来的委托是直接调用那个实例方法本身，后者则更原始一些，真正调用的时候还需要传入一个实例对象。",{"type":597,"tag":598,"props":2147,"children":2148},{},[2149,2151,2157],{"type":602,"value":2150},"拿上面的 ",{"type":597,"tag":610,"props":2152,"children":2154},{"className":2153},[],[2155],{"type":602,"value":2156},"StubClass",{"type":602,"value":2158}," 来说明会更直观一些：",{"type":597,"tag":605,"props":2160,"children":2163},{"className":2161,"code":2162,"language":1682,"meta":591},[1680],"private class StubClass\n{\n    public int Test(int i)\n    {\n        return i;\n    }\n}\n",[2164],{"type":597,"tag":610,"props":2165,"children":2166},{"__ignoreMap":591},[2167],{"type":602,"value":2162},{"type":597,"tag":598,"props":2169,"children":2170},{},[2171,2173,2179,2181,2187],{"type":602,"value":2172},"前者得到的委托相当于 ",{"type":597,"tag":610,"props":2174,"children":2176},{"className":2175},[],[2177],{"type":602,"value":2178},"int Test(int i)",{"type":602,"value":2180}," 方法，后者得到的委托相当于 ",{"type":597,"tag":610,"props":2182,"children":2184},{"className":2183},[],[2185],{"type":602,"value":2186},"int Test(StubClass instance, int i)",{"type":602,"value":2188}," 方法。（在 IL 里实例的方法其实都是后者，而前者更像 C# 中的代码，容易理解。）",{"type":597,"tag":598,"props":2190,"children":2191},{},[2192,2194,2200],{"type":602,"value":2193},"单独使用 ",{"type":597,"tag":610,"props":2195,"children":2197},{"className":2196},[],[2198],{"type":602,"value":2199},"CreateDelegate",{"type":602,"value":2201}," 方法可能每次都需要尝试第一个参数到底应该传入些什么，于是我将其封装成了泛型版本，增加易用性。",{"type":597,"tag":605,"props":2203,"children":2206},{"className":2204,"code":2205,"language":1682,"meta":591},[1680],"using System;\nusing System.Linq;\nusing System.Reflection;\nusing System.Diagnostics.Contracts;\n\nnamespace Walterlv.Demo\n{\n    public static class InstanceMethodBuilder\u003CT, TReturnValue>\n    {\n        /// \u003Csummary>\n        /// 调用时就像 var result = func(t)。\n        /// \u003C/summary>\n        [Pure]\n        public static Func\u003CT, TReturnValue> CreateInstanceMethod\u003CTInstanceType>(TInstanceType instance, MethodInfo method)\n        {\n            if (instance == null) throw new ArgumentNullException(nameof(instance));\n            if (method == null) throw new ArgumentNullException(nameof(method));\n\n            return (Func\u003CT, TReturnValue>) method.CreateDelegate(typeof(Func\u003CT, TReturnValue>), instance);\n        }\n\n        /// \u003Csummary>\n        /// 调用时就像 var result = func(this, t)。\n        /// \u003C/summary>\n        [Pure]\n        public static Func\u003CTInstanceType, T, TReturnValue> CreateMethod\u003CTInstanceType>(MethodInfo method)\n        {\n            if (method == null)\n                throw new ArgumentNullException(nameof(method));\n\n            return (Func\u003CTInstanceType, T, TReturnValue>) method.CreateDelegate(typeof(Func\u003CTInstanceType, T, TReturnValue>));\n        }\n    }\n}\n",[2207],{"type":597,"tag":610,"props":2208,"children":2209},{"__ignoreMap":591},[2210],{"type":602,"value":2205},{"type":597,"tag":598,"props":2212,"children":2213},{},[2214,2216,2223,2229],{"type":602,"value":2215},"泛型的多参数版本可以使用泛型类型生成器生成，我在 ",{"type":597,"tag":768,"props":2217,"children":2220},{"href":2218,"rel":2219},"http://blog.csdn.net/WPwalter/article/details/79216183",[772],[2221],{"type":602,"value":2222},"生成代码，从 ",{"type":597,"tag":610,"props":2224,"children":2226},{"className":2225},[],[2227],{"type":602,"value":2228},"到",{"type":602,"value":2230}," —— 自动生成多个类型的泛型 - 吕毅 一文中写了一个泛型生成器，可以稍加修改以便适应这种泛型类。",{"title":591,"searchDepth":673,"depth":673,"links":2232},[2233,2234],{"id":2009,"depth":1618,"text":2009},{"id":2107,"depth":1618,"text":2107},"content:dotnet:2020-11-13-Reflection-Method.md","dotnet/2020-11-13-Reflection-Method.md","2020-11-13",{"_path":125,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":124,"description":2239,"body":2240,"_type":675,"_id":2465,"_source":677,"_file":2466,"_extension":679,"date":2467},"ASP.NET Core引入了Options模式，使用类来表示相关的设置组。简单的来说，就是用强类型的类来表达配置项，这带来了很多好处。\n初学者会发现这个框架有3个主要的面向消费者的接口：IOptions、IOptionsMonitor以及IOptionsSnapshot。\n这三个接口初看起来很类似，所以很容易引起困惑，什么场景下该用哪个接口呢？",{"type":594,"children":2241,"toc":2463},[2242,2248,2252,2257,2262,2270,2275,2283,2288,2293,2303,2308,2315,2320,2325,2333,2338,2346,2351,2356,2364,2369,2377,2382,2390,2395,2400,2405,2410,2433,2438,2450,2458],{"type":597,"tag":2243,"props":2244,"children":2246},"h1",{"id":2245},"背景",[2247],{"type":602,"value":2245},{"type":597,"tag":598,"props":2249,"children":2250},{},[2251],{"type":602,"value":2239},{"type":597,"tag":2243,"props":2253,"children":2255},{"id":2254},"示例",[2256],{"type":602,"value":2254},{"type":597,"tag":598,"props":2258,"children":2259},{},[2260],{"type":602,"value":2261},"我们先从一小段代码着手（TestOptions类只有一个字符串属性Name，代码略）：",{"type":597,"tag":605,"props":2263,"children":2265},{"code":2264},"class Program\n{\n    static void Main(string[] args)\n    {\n        var builder = new ConfigurationBuilder();\n        builder.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true); //注意最后一个参数值，true表示配置文件更改时会重新加载。\n        var configuration = builder.Build();\n        var services = new ServiceCollection();\n        services.AddOptions();\n        services.Configure\u003CTestOptions>(configuration); //这里通过配置文件绑定TestOptions\n        var provider = services.BuildServiceProvider();\n        Console.WriteLine(\"修改前：\");\n        Print(provider);\n\n        Change(provider); //使用代码修改Options值。\n        Console.WriteLine(\"使用代码修改后：\");\n        Print(provider);\n\n        Console.WriteLine(\"请修改配置文件。\");\n        Console.ReadLine(); //等待手动修改appsettings.json配置文件。\n        Console.WriteLine(\"修改appsettings.json文件后：\");\n        Print(provider);\n    }\n\n    static void Print(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            var options1 = sp.GetRequiredService\u003CIOptions\u003CTestOptions>>();\n            var options2 = sp.GetRequiredService\u003CIOptionsMonitor\u003CTestOptions>>();\n            var options3 = sp.GetRequiredService\u003CIOptionsSnapshot\u003CTestOptions>>();\n            Console.WriteLine(\"IOptions值: {0}\", options1.Value.Name);\n            Console.WriteLine(\"IOptionsMonitor值: {0}\", options2.CurrentValue.Name);\n            Console.WriteLine(\"IOptionsSnapshot值: {0}\", options3.Value.Name);\n            Console.WriteLine();\n        }\n    }\n\n    static void Change(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            sp.GetRequiredService\u003CIOptions\u003CTestOptions>>().Value.Name = \"IOptions Test 1\";\n            sp.GetRequiredService\u003CIOptionsMonitor\u003CTestOptions>>().CurrentValue.Name = \"IOptionsMonitor Test 1\";\n            sp.GetRequiredService\u003CIOptionsSnapshot\u003CTestOptions>>().Value.Name = \"IOptionsSnapshot Test 1\";\n        }\n    }\n}\n",[2266],{"type":597,"tag":610,"props":2267,"children":2268},{"__ignoreMap":591},[2269],{"type":602,"value":2264},{"type":597,"tag":598,"props":2271,"children":2272},{},[2273],{"type":602,"value":2274},"appsettings.json文件：",{"type":597,"tag":605,"props":2276,"children":2278},{"code":2277},"{\n    \"Name\": \"Test 0\"\n}\n",[2279],{"type":597,"tag":610,"props":2280,"children":2281},{"__ignoreMap":591},[2282],{"type":602,"value":2277},{"type":597,"tag":598,"props":2284,"children":2285},{},[2286],{"type":602,"value":2287},"上面的代码，首先从appsettings.json文件读取配置，然后向容器注册依赖配置文件的TestOptions，接着分别打印IOptions\u003C>,IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>的值。",{"type":597,"tag":598,"props":2289,"children":2290},{},[2291],{"type":602,"value":2292},"接着通过代码来修改TestOptions的值，打印。\n然后通过修改appsettings.json文件来修改TestOptions的值，打印。",{"type":597,"tag":598,"props":2294,"children":2295},{},[2296,2298],{"type":602,"value":2297},"注意，",{"type":597,"tag":1347,"props":2299,"children":2300},{},[2301],{"type":602,"value":2302},"我们仅注册了一次TestOptions，却可以分别通过IOptions\u003C>,IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>接口来获取TestOptions的值。",{"type":597,"tag":598,"props":2304,"children":2305},{},[2306],{"type":602,"value":2307},"如果我们把appsettings.json文件中Name的值修改为Test 2，那么上面这段代码的输出是这样的：",{"type":597,"tag":598,"props":2309,"children":2310},{},[2311],{"type":597,"tag":1874,"props":2312,"children":2314},{"alt":1874,"src":2313},"/images/2020-08-17-netcore-options/94928-20200323160553644-291512622.png",[],{"type":597,"tag":2243,"props":2316,"children":2318},{"id":2317},"分析",[2319],{"type":602,"value":2317},{"type":597,"tag":598,"props":2321,"children":2322},{},[2323],{"type":602,"value":2324},"我们可以看到第一次通过代码修改IOptions\u003C>和IOptionsMonitor\u003C>的值后，再次打印都被更新了，但是IOptionsSnapshot\u003C>没有，为什么呢？\n让我们从Options框架的源代码着手，理解为什么会这样。\n当我们需要使用Options模式时，我们都会调用定义在OptionsServiceCollectionExtensions类上的扩展方法AddOptions(this IServiceCollection services)。",{"type":597,"tag":605,"props":2326,"children":2328},{"code":2327},"var services = new ServiceCollection();\nservices.AddOptions();\n",[2329],{"type":597,"tag":610,"props":2330,"children":2331},{"__ignoreMap":591},[2332],{"type":602,"value":2327},{"type":597,"tag":598,"props":2334,"children":2335},{},[2336],{"type":602,"value":2337},"我们观察AddOptions方法的实现：",{"type":597,"tag":605,"props":2339,"children":2341},{"code":2340},"public static IServiceCollection AddOptions(this IServiceCollection services)\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptions\u003C>), typeof(OptionsManager\u003C>)));\n    services.TryAdd(ServiceDescriptor.Scoped(typeof(IOptionsSnapshot\u003C>), typeof(OptionsManager\u003C>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitor\u003C>), typeof(OptionsMonitor\u003C>)));\n    services.TryAdd(ServiceDescriptor.Transient(typeof(IOptionsFactory\u003C>), typeof(OptionsFactory\u003C>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitorCache\u003C>), typeof(OptionsCache\u003C>)));\n    return services;\n}\n",[2342],{"type":597,"tag":610,"props":2343,"children":2344},{"__ignoreMap":591},[2345],{"type":602,"value":2340},{"type":597,"tag":598,"props":2347,"children":2348},{},[2349],{"type":602,"value":2350},"从上面的代码我们可以得知，IOptions\u003C>和IOptionsMonitor\u003C>被注册为单例服务，而IOptionsSnapshot\u003C>被注册为范围服务。\n由于IOptions\u003C>和IOptionsMonitor\u003C>都被注册为单例服务，因此每次获取的都是同一个实例，所以更改了以后的值是保留的。\n而IOptionsSnapshot\u003C>被注册为范围服务，所以每次创建新范围时获取的都是一个新的值，外部的更改只对当次有效，不会保留到下次（不能跨范围，对于ASP.NET Core来说不能跨请求）。",{"type":597,"tag":598,"props":2352,"children":2353},{},[2354],{"type":602,"value":2355},"我们继续看第二次修改，第二次修改配置文件后IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>的值更新了，而IOptions\u003C>的值没有更新。\nIOptions\u003C>好理解，它被注册为单例服务，第一次访问的时候生成实例并加载配置文件中的值，此后再也不会读取配置文件，所以它的值不会更新。\nIOptionsSnapshot\u003C>被注册为范围服务，每次重新生成一个新的范围时，它都会从配置文件中获取值，因此它的值会更新。\n但是，IOptionsMonitor\u003C>呢，它被注册为单例，为什么也会更新呢？\n让我们回到AddOptions的源代码，我们留意到IOptionsMonitor\u003C>的实现是OptionsManager\u003C>。\n当我们打开OptionsManager的源代码时，一切都很清楚了。\n它的构造函数如下：",{"type":597,"tag":605,"props":2357,"children":2359},{"code":2358},"public OptionsMonitor(IOptionsFactory\u003CTOptions> factory, IEnumerable\u003CIOptionsChangeTokenSource\u003CTOptions>> sources, IOptionsMonitorCache\u003CTOptions> cache)\n{\n    _factory = factory;\n    _sources = sources;\n    _cache = cache;\n\n    foreach (var source in _sources)\n    {\n        var registration = ChangeToken.OnChange(\n                () => source.GetChangeToken(),\n                (name) => InvokeChanged(name),\n                source.Name);\n\n        _registrations.Add(registration);\n    }\n}\n",[2360],{"type":597,"tag":610,"props":2361,"children":2362},{"__ignoreMap":591},[2363],{"type":602,"value":2358},{"type":597,"tag":598,"props":2365,"children":2366},{},[2367],{"type":602,"value":2368},"原来OptionsMonitor的更新能力是从IOptionsChangeTokenSource而来，但是这个接口的实例又是谁呢？\n我们回到最开始的代码的第10行：",{"type":597,"tag":605,"props":2370,"children":2372},{"code":2371},"services.Configure\u003CTestOptions>(configuration);\n",[2373],{"type":597,"tag":610,"props":2374,"children":2375},{"__ignoreMap":591},[2376],{"type":602,"value":2371},{"type":597,"tag":598,"props":2378,"children":2379},{},[2380],{"type":602,"value":2381},"这是一个定义在Microsoft.Extensions.Options.ConfigurationExtensions.dll的扩展方法，最后实际调用的是它的一个重载方法，代码如下：",{"type":597,"tag":605,"props":2383,"children":2385},{"code":2384},"public static IServiceCollection Configure\u003CTOptions>(this IServiceCollection services, string name, IConfiguration config, Action\u003CBinderOptions> configureBinder)\n    where TOptions : class\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    if (config == null)\n    {\n        throw new ArgumentNullException(nameof(config));\n    }\n\n    services.AddOptions();\n    services.AddSingleton\u003CIOptionsChangeTokenSource\u003CTOptions>>(new ConfigurationChangeTokenSource\u003CTOptions>(name, config));\n    return services.AddSingleton\u003CIConfigureOptions\u003CTOptions>>(new NamedConfigureFromConfigurationOptions\u003CTOptions>(name, config, configureBinder));\n}\n",[2386],{"type":597,"tag":610,"props":2387,"children":2388},{"__ignoreMap":591},[2389],{"type":602,"value":2384},{"type":597,"tag":598,"props":2391,"children":2392},{},[2393],{"type":602,"value":2394},"秘密就在上面的第15行，ConfigurationChangeTokenSource，它引用了代表配置文件的对象config，所以配置文件更新，IOptionsMonitor就会跟着更新。",{"type":597,"tag":2243,"props":2396,"children":2398},{"id":2397},"结论",[2399],{"type":602,"value":2397},{"type":597,"tag":598,"props":2401,"children":2402},{},[2403],{"type":602,"value":2404},"IOptions\u003C>是单例，因此一旦生成了，除非通过代码的方式更改，它的值是不会更新的。\nIOptionsMonitor\u003C>也是单例，但是它通过IOptionsChangeTokenSource\u003C> 能够和配置文件一起更新，也能通过代码的方式更改值。\nIOptionsSnapshot\u003C>是范围，所以在配置文件更新的下一次访问，它的值会更新，但是它不能跨范围通过代码的方式更改值，只能在当前范围（请求）内有效。",{"type":597,"tag":598,"props":2406,"children":2407},{},[2408],{"type":602,"value":2409},"官方文档是这样介绍的：\nIOptionsMonitor用于检索选项和管理TOptions实例的选项通知，它支持下面的场景：",{"type":597,"tag":1136,"props":2411,"children":2412},{},[2413,2418,2423,2428],{"type":597,"tag":1140,"props":2414,"children":2415},{},[2416],{"type":602,"value":2417},"实例更新通知。",{"type":597,"tag":1140,"props":2419,"children":2420},{},[2421],{"type":602,"value":2422},"命名实例。",{"type":597,"tag":1140,"props":2424,"children":2425},{},[2426],{"type":602,"value":2427},"重新加载配置。",{"type":597,"tag":1140,"props":2429,"children":2430},{},[2431],{"type":602,"value":2432},"选择性的让实例失效。",{"type":597,"tag":598,"props":2434,"children":2435},{},[2436],{"type":602,"value":2437},"IOptionsSnapshot在需要对每个请求重新计算选项的场景中非常有用。\nIOptions可以用来支持Options模式，但是它不支持前面两者所支持的场景，如果你不需要支持上面的场景，你可以继续使用IOptions。",{"type":597,"tag":598,"props":2439,"children":2440},{},[2441,2443,2448],{"type":602,"value":2442},"所以你应该根据你的实际使用场景来选择到底是用这三者中的哪一个。\n",{"type":597,"tag":1700,"props":2444,"children":2445},{},[2446],{"type":602,"value":2447},"一般来说，如果你依赖配置文件，那么首先考虑IOptionsMonitor\u003C>，如果不合适接着考虑IOptionsSnapshot\u003C>，最后考虑IOptions\u003C>。*",{"type":602,"value":2449},"\n***有一点需要注意，在ASP.NET Core应用中IOptionsMonitor可能会导致同一个请求中选项的值不一致——当你正在修改配置文件的时候——这可能会引发一些奇怪的bug。\n如果这个对你很重要，请使用IOptionsSnapshot，它可以保证同一个请求中的一致性，但是它可能会带来轻微的性能上的损失。\n如果你是在app启动的时候自己构造Options（比如在Startup类中）：",{"type":597,"tag":605,"props":2451,"children":2453},{"code":2452},"services.Configure\u003CTestOptions>(opt => opt.Name = \"Test 0\");\n",[2454],{"type":597,"tag":610,"props":2455,"children":2456},{"__ignoreMap":591},[2457],{"type":602,"value":2452},{"type":597,"tag":598,"props":2459,"children":2460},{},[2461],{"type":602,"value":2462},"IOptions\u003C>最简单，也许是一个不错的选择，Configure扩展方法还有其他重载可以满足你的更多需求。",{"title":591,"searchDepth":673,"depth":673,"links":2464},[],"content:dotnet:2020-08-17-netcore-options.md","dotnet/2020-08-17-netcore-options.md","2020-08-17",{"_path":122,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":121,"description":2469,"body":2470,"_type":675,"_id":2511,"_source":677,"_file":2512,"_extension":679,"date":2513},"ConcurrentDictionary主要用于要从多个线程（或异步任务）修改字典的情景中。如果来自单个线程，则可以根据需要使用尽可能多的代码使用标准Dictionary；）",{"type":594,"children":2471,"toc":2509},[2472,2476,2481,2486,2494,2499,2504],{"type":597,"tag":598,"props":2473,"children":2474},{},[2475],{"type":602,"value":2469},{"type":597,"tag":598,"props":2477,"children":2478},{},[2479],{"type":602,"value":2480},"如果您查看ConcurrentDictionary上的方法，则会发现一些有趣的方法，例如TryAdd，TryGetValue，TryUpdate和TryRemove。",{"type":597,"tag":598,"props":2482,"children":2483},{},[2484],{"type":602,"value":2485},"例如，若使用普通的Dictionary类时可能会看到下面的代码",{"type":597,"tag":605,"props":2487,"children":2489},{"code":2488},"// There are better ways to do this... but we need an example ;)\nif (!dictionary.ContainsKey(id))\n    dictionary.Add(id, value);\n    \n",[2490],{"type":597,"tag":610,"props":2491,"children":2492},{"__ignoreMap":591},[2493],{"type":602,"value":2488},{"type":597,"tag":598,"props":2495,"children":2496},{},[2497],{"type":602,"value":2498},"多线程中同时调用该段代码,并且使用相同的id来调用Add,它将引发异常。",{"type":597,"tag":598,"props":2500,"children":2501},{},[2502],{"type":602,"value":2503},"ConcurrentDictionary方法TryAdd为您处理该问题，并将返回true/false，告诉您是否已添加它（或该键是否已在字典中）。",{"type":597,"tag":598,"props":2505,"children":2506},{},[2507],{"type":602,"value":2508},"因此，除非您在代码的多线程部分中进行工作，否则您可能仅可以使用标准的Dictionary类。",{"title":591,"searchDepth":673,"depth":673,"links":2510},[],"content:dotnet:2020-08-16-ConcurrentDictionary.md","dotnet/2020-08-16-ConcurrentDictionary.md","2020-08-16",{"_path":119,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":118,"description":2515,"body":2516,"_type":675,"_id":3179,"_source":677,"_file":3180,"_extension":679,"date":3181},"Kestrel是http://ASP.NET Core框架内置的默认Web Server 什么是Web Server? 根据维基百科的定义: Web Server是可以处理来自客户端的HTTP协议请求并返回网页的软件或硬件。 因此Kestrel的主要功能就是接收来自网络客户端的HTTP请求，并根据请求返回对应的网页（数据也是一种网页）。",{"type":594,"children":2517,"toc":3162},[2518,2541,2561,2564,2602,2613,2623,2641,2697,2715,2726,2735,2798,2810,2841,2871,2877,2896,2905,2925,2938,2959,2971,3020,3038,3063,3072,3083,3095,3104,3123,3128,3138,3150],{"type":597,"tag":598,"props":2519,"children":2520},{},[2521,2523,2530,2532,2539],{"type":602,"value":2522},"Kestrel是",{"type":597,"tag":768,"props":2524,"children":2527},{"href":2525,"rel":2526},"https://link.zhihu.com/?target=http%3A//ASP.NET",[772],[2528],{"type":602,"value":2529},"http://ASP.NET",{"type":602,"value":2531}," Core框架内置的默认Web Server 什么是Web Server? 根据",{"type":597,"tag":768,"props":2533,"children":2536},{"href":2534,"rel":2535},"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Web_server",[772],[2537],{"type":602,"value":2538},"维基百科",{"type":602,"value":2540},"的定义: Web Server是可以处理来自客户端的HTTP协议请求并返回网页的软件或硬件。 因此Kestrel的主要功能就是接收来自网络客户端的HTTP请求，并根据请求返回对应的网页（数据也是一种网页）。",{"type":597,"tag":700,"props":2542,"children":2544},{"id":2543},"定义-iserverihttpapplicationtcontext",[2545,2547,2553,2555],{"type":602,"value":2546},"定义 - ",{"type":597,"tag":610,"props":2548,"children":2550},{"className":2549},[],[2551],{"type":602,"value":2552},"IServer",{"type":602,"value":2554},"、",{"type":597,"tag":610,"props":2556,"children":2558},{"className":2557},[],[2559],{"type":602,"value":2560},"IHttpApplication\u003CTContext>",{"type":597,"tag":1783,"props":2562,"children":2563},{},[],{"type":597,"tag":598,"props":2565,"children":2566},{},[2567,2572,2574,2579,2581,2586,2588,2593,2595,2600],{"type":597,"tag":768,"props":2568,"children":2570},{"href":2525,"rel":2569},[772],[2571],{"type":602,"value":2529},{"type":602,"value":2573}," Core定义了两个基本的接口",{"type":597,"tag":610,"props":2575,"children":2577},{"className":2576},[],[2578],{"type":602,"value":2552},{"type":602,"value":2580},"，及",{"type":597,"tag":610,"props":2582,"children":2584},{"className":2583},[],[2585],{"type":602,"value":2560},{"type":602,"value":2587},"，",{"type":597,"tag":610,"props":2589,"children":2591},{"className":2590},[],[2592],{"type":602,"value":2552},{"type":602,"value":2594},"接口定义了Web Server的基本功能，",{"type":597,"tag":610,"props":2596,"children":2598},{"className":2597},[],[2599],{"type":602,"value":2560},{"type":602,"value":2601},"则定义了处理HTTP协议的应用程序的基本功能，我们首先来看下这两个定义:",{"type":597,"tag":700,"props":2603,"children":2605},{"id":2604},"web-服务器-iserver",[2606,2608],{"type":602,"value":2607},"Web 服务器 - ",{"type":597,"tag":610,"props":2609,"children":2611},{"className":2610},[],[2612],{"type":602,"value":2552},{"type":597,"tag":605,"props":2614,"children":2618},{"className":2615,"code":2617,"language":602,"meta":591},[2616],"language-text","namespace Microsoft.AspNetCore.Hosting.Server\n{\n    /// \u003Csummary>\n    /// Represents a server.\n    /// \u003C/summary>\n    public interface IServer : IDisposable\n    {\n        /// \u003Csummary>\n        /// A collection of HTTP features of the server.\n        /// \u003C/summary>\n        IFeatureCollection Features { get; }\n\n        /// \u003Csummary>\n        /// Start the server with an application.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"application\">An instance of \u003Csee cref=\"IHttpApplication{TContext}\"/>.\u003C/param>\n        /// \u003Ctypeparam name=\"TContext\">The context associated with the application.\u003C/typeparam>\n        /// \u003Cparam name=\"cancellationToken\">Indicates if the server startup should be aborted.\u003C/param>\n        Task StartAsync\u003CTContext>(IHttpApplication\u003CTContext> application, CancellationToken cancellationToken);\n\n        /// \u003Csummary>\n        /// Stop processing requests and shut down the server, gracefully if possible.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"cancellationToken\">Indicates if the graceful shutdown should be aborted.\u003C/param>\n        Task StopAsync(CancellationToken cancellationToken);\n    }\n}\n",[2619],{"type":597,"tag":610,"props":2620,"children":2621},{"__ignoreMap":591},[2622],{"type":602,"value":2617},{"type":597,"tag":598,"props":2624,"children":2625},{},[2626,2632,2634,2639],{"type":597,"tag":610,"props":2627,"children":2629},{"className":2628},[],[2630],{"type":602,"value":2631},"Features",{"type":602,"value":2633}," 是一个功能集合，其中可以包含所有应用程序需要的，用以处理HTTP协议各个阶段和组成部分的功能集，以接口的形式注入到",{"type":597,"tag":610,"props":2635,"children":2637},{"className":2636},[],[2638],{"type":602,"value":2631},{"type":602,"value":2640},"中。",{"type":597,"tag":598,"props":2642,"children":2643},{},[2644,2650,2652,2657,2659,2665,2667,2673,2675,2680,2682,2688,2690,2695],{"type":597,"tag":610,"props":2645,"children":2647},{"className":2646},[],[2648],{"type":602,"value":2649},"StartAsync",{"type":602,"value":2651},"方法可以启动IServer对象，用来接受用户请求。包含两个参数：",{"type":597,"tag":610,"props":2653,"children":2655},{"className":2654},[],[2656],{"type":602,"value":2560},{"type":602,"value":2658},"和",{"type":597,"tag":610,"props":2660,"children":2662},{"className":2661},[],[2663],{"type":602,"value":2664},"CancellationToken",{"type":602,"value":2666},"。 ",{"type":597,"tag":610,"props":2668,"children":2670},{"className":2669},[],[2671],{"type":602,"value":2672},"IHttpApplicatoin\u003CTContext>",{"type":602,"value":2674},"是最终处理HTTP请求的应用程序入口点，在ASP.NET Core应用程序中，默认的",{"type":597,"tag":610,"props":2676,"children":2678},{"className":2677},[],[2679],{"type":602,"value":2560},{"type":602,"value":2681},"实现是：",{"type":597,"tag":610,"props":2683,"children":2685},{"className":2684},[],[2686],{"type":602,"value":2687},"HostingApplication",{"type":602,"value":2689},"，我们会在稍后的部分进行详细的介绍。 而",{"type":597,"tag":610,"props":2691,"children":2693},{"className":2692},[],[2694],{"type":602,"value":2664},{"type":602,"value":2696},"用来响应中断应用程序启动的请求。",{"type":597,"tag":598,"props":2698,"children":2699},{},[2700,2706,2708,2713],{"type":597,"tag":610,"props":2701,"children":2703},{"className":2702},[],[2704],{"type":602,"value":2705},"StopAsync",{"type":602,"value":2707},"方法用来处理停止服务的请求，接受一个参数",{"type":597,"tag":610,"props":2709,"children":2711},{"className":2710},[],[2712],{"type":602,"value":2664},{"type":602,"value":2714},"，用来响应中断停止应用程序的请求。",{"type":597,"tag":700,"props":2716,"children":2718},{"id":2717},"http应用程序-ihttpapplicationtcontext",[2719,2721],{"type":602,"value":2720},"Http应用程序 - ",{"type":597,"tag":610,"props":2722,"children":2724},{"className":2723},[],[2725],{"type":602,"value":2560},{"type":597,"tag":605,"props":2727,"children":2730},{"className":2728,"code":2729,"language":602,"meta":591},[2616],"namespace Microsoft.AspNetCore.Hosting.Server\n{\n    /// \u003Csummary>\n    /// Represents an application.\n    /// \u003C/summary>\n    /// \u003Ctypeparam name=\"TContext\">The context associated with the application.\u003C/typeparam>\n    public interface IHttpApplication\u003CTContext>\n    {\n        /// \u003Csummary>\n        /// Create a TContext given a collection of HTTP features.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"contextFeatures\">A collection of HTTP features to be used for creating the TContext.\u003C/param>\n        /// \u003Creturns>The created TContext.\u003C/returns>\n        TContext CreateContext(IFeatureCollection contextFeatures);\n\n        /// \u003Csummary>\n        /// Asynchronously processes an TContext.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"context\">The TContext that the operation will process.\u003C/param>\n        Task ProcessRequestAsync(TContext context);\n\n        /// \u003Csummary>\n        /// Dispose a given TContext.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"context\">The TContext to be disposed.\u003C/param>\n        /// \u003Cparam name=\"exception\">The Exception thrown when processing did not complete successfully, otherwise null.\u003C/param>\n        void DisposeContext(TContext context, Exception exception);\n    }\n}\n",[2731],{"type":597,"tag":610,"props":2732,"children":2733},{"__ignoreMap":591},[2734],{"type":602,"value":2729},{"type":597,"tag":598,"props":2736,"children":2737},{},[2738,2743,2745,2751,2753,2759,2761,2767,2769,2774,2776,2781,2783,2789,2791,2796],{"type":597,"tag":610,"props":2739,"children":2741},{"className":2740},[],[2742],{"type":602,"value":2560},{"type":602,"value":2744},"接口的定义包含了三个方法： ",{"type":597,"tag":610,"props":2746,"children":2748},{"className":2747},[],[2749],{"type":602,"value":2750},"CreateContext",{"type":602,"value":2752},"方法用来创建处理请求的上下文中所需要的所有相关数据，组成",{"type":597,"tag":610,"props":2754,"children":2756},{"className":2755},[],[2757],{"type":602,"value":2758},"Context",{"type":602,"value":2760},"对象，由接口的实现自己定义类型， ",{"type":597,"tag":610,"props":2762,"children":2764},{"className":2763},[],[2765],{"type":602,"value":2766},"ProcessRequestAsync",{"type":602,"value":2768},"方法使用",{"type":597,"tag":610,"props":2770,"children":2772},{"className":2771},[],[2773],{"type":602,"value":2750},{"type":602,"value":2775},"方法创建的",{"type":597,"tag":610,"props":2777,"children":2779},{"className":2778},[],[2780],{"type":602,"value":2758},{"type":602,"value":2782},"对象处理本次请求。 ",{"type":597,"tag":610,"props":2784,"children":2786},{"className":2785},[],[2787],{"type":602,"value":2788},"DisposeContext",{"type":602,"value":2790},"方法在完成请求的处理后，负责释放",{"type":597,"tag":610,"props":2792,"children":2794},{"className":2793},[],[2795],{"type":602,"value":2758},{"type":602,"value":2797},"对象。",{"type":597,"tag":700,"props":2799,"children":2801},{"id":2800},"实现-kestrelserver",[2802,2804],{"type":602,"value":2803},"实现 - ",{"type":597,"tag":610,"props":2805,"children":2807},{"className":2806},[],[2808],{"type":602,"value":2809},"KestrelServer",{"type":597,"tag":598,"props":2811,"children":2812},{},[2813,2818,2820,2825,2827,2832,2834,2839],{"type":597,"tag":768,"props":2814,"children":2816},{"href":2525,"rel":2815},[772],[2817],{"type":602,"value":2529},{"type":602,"value":2819}," Core提供了默认的",{"type":597,"tag":610,"props":2821,"children":2823},{"className":2822},[],[2824],{"type":602,"value":2552},{"type":602,"value":2826},"：",{"type":597,"tag":610,"props":2828,"children":2830},{"className":2829},[],[2831],{"type":602,"value":2809},{"type":602,"value":2833},"，下面我们就来看看",{"type":597,"tag":610,"props":2835,"children":2837},{"className":2836},[],[2838],{"type":602,"value":2809},{"type":602,"value":2840},"具体都做了些什么。",{"type":597,"tag":2842,"props":2843,"children":2844},"blockquote",{},[2845],{"type":597,"tag":598,"props":2846,"children":2847},{},[2848,2853,2855,2862,2864],{"type":597,"tag":610,"props":2849,"children":2851},{"className":2850},[],[2852],{"type":602,"value":2809},{"type":602,"value":2854}," 定义在dotnet/aspnetcore项目中（",{"type":597,"tag":768,"props":2856,"children":2859},{"href":2857,"rel":2858},"https://link.zhihu.com/?target=https%3A//github.com/dotnet/aspnetcore",[772],[2860],{"type":602,"value":2861},"GITHUB REPO",{"type":602,"value":2863},"）。 项目名称为：Microsoft.AspNetCore.Server.Kestrel.Core 名称空间.AspNetCore.Server.Kestrel.Core ",{"type":597,"tag":768,"props":2865,"children":2868},{"href":2866,"rel":2867},"https://link.zhihu.com/?target=https%3A//github.com/dotnet/aspnetcore/blob/master/src/Servers/Kestrel/Core/src/KestrelServer.cs",[772],[2869],{"type":602,"value":2870},"源代码",{"type":597,"tag":700,"props":2872,"children":2874},{"id":2873},"服务器启动端口监听协议解析及请求处理",[2875],{"type":602,"value":2876},"服务器启动：端口监听，协议解析及请求处理。",{"type":597,"tag":598,"props":2878,"children":2879},{},[2880,2882,2887,2888,2894],{"type":602,"value":2881},"我们先看一下",{"type":597,"tag":610,"props":2883,"children":2885},{"className":2884},[],[2886],{"type":602,"value":2809},{"type":602,"value":802},{"type":597,"tag":610,"props":2889,"children":2891},{"className":2890},[],[2892],{"type":602,"value":2893},"StartAsync()",{"type":602,"value":2895},"方法的代码实现：",{"type":597,"tag":605,"props":2897,"children":2900},{"className":2898,"code":2899,"language":602,"meta":591},[2616],"public async Task StartAsync\u003CTContext>(IHttpApplication\u003CTContext> application, CancellationToken cancellationToken)\n        {\n            try\n            {\n                if (!BitConverter.IsLittleEndian)\n                {\n                    throw new PlatformNotSupportedException(CoreStrings.BigEndianNotSupported);\n                }\n\n                ValidateOptions();\n\n                if (_hasStarted)\n                {\n                    // The server has already started and/or has not been cleaned up yet\n                    throw new InvalidOperationException(CoreStrings.ServerAlreadyStarted);\n                }\n                _hasStarted = true;\n\n                ServiceContext.Heartbeat?.Start();\n\n                async Task OnBind(ListenOptions options)\n                {\n                    // Add the HTTP middleware as the terminal connection middleware\n                    options.UseHttpServer(ServiceContext, application, options.Protocols);\n\n                    var connectionDelegate = options.Build();\n\n                    // Add the connection limit middleware\n                    if (Options.Limits.MaxConcurrentConnections.HasValue)\n                    {\n                        connectionDelegate = new ConnectionLimitMiddleware(connectionDelegate, Options.Limits.MaxConcurrentConnections.Value, Trace).OnConnectionAsync;\n                    }\n\n                    var connectionDispatcher = new ConnectionDispatcher(ServiceContext, connectionDelegate);\n                    var transport = await _transportFactory.BindAsync(options.EndPoint).ConfigureAwait(false);\n\n                    // Update the endpoint\n                    options.EndPoint = transport.EndPoint;\n                    var acceptLoopTask = connectionDispatcher.StartAcceptingConnections(transport);\n\n                    _transports.Add((transport, acceptLoopTask));\n                }\n\n                await AddressBinder.BindAsync(_serverAddresses, Options, Trace, OnBind).ConfigureAwait(false);\n            }\n            catch (Exception ex)\n            {\n                Trace.LogCritical(0, ex, \"Unable to start Kestrel.\");\n                Dispose();\n                throw;\n            }\n        }\n",[2901],{"type":597,"tag":610,"props":2902,"children":2903},{"__ignoreMap":591},[2904],{"type":602,"value":2899},{"type":597,"tag":598,"props":2906,"children":2907},{},[2908,2914,2916,2923],{"type":597,"tag":610,"props":2909,"children":2911},{"className":2910},[],[2912],{"type":602,"value":2913},"Kestrel",{"type":602,"value":2915},"首先会检查服务器的",{"type":597,"tag":768,"props":2917,"children":2920},{"href":2918,"rel":2919},"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%E5%AD%97%E8%8A%82%E5%BA%8F",[772],[2921],{"type":602,"value":2922},"字节序",{"type":602,"value":2924},"，目前是不支持大端序的。 然后检查最大请求长度限制的设置项，以及服务器是否已经启动。",{"type":597,"tag":598,"props":2926,"children":2927},{},[2928,2930,2936],{"type":602,"value":2929},"最后，通过",{"type":597,"tag":610,"props":2931,"children":2933},{"className":2932},[],[2934],{"type":602,"value":2935},"AddressBinder",{"type":602,"value":2937},"对预先配置的IP地址或终结点(EndPoint)名称进行监听，开始接受客户端的请求。",{"type":597,"tag":598,"props":2939,"children":2940},{},[2941,2943,2949,2951,2957],{"type":602,"value":2942},"当每有一个新的HTTP请求通过TCP协议或其他协议和服务器成功简历连接后，AddressBinder使用",{"type":597,"tag":610,"props":2944,"children":2946},{"className":2945},[],[2947],{"type":602,"value":2948},"ThreadPool.UnsafeQueueUserWorkItem()",{"type":602,"value":2950},"方法将",{"type":597,"tag":610,"props":2952,"children":2954},{"className":2953},[],[2955],{"type":602,"value":2956},"OnBind()",{"type":602,"value":2958},"方法添加到线程池中，等待线程池的调度。",{"type":597,"tag":598,"props":2960,"children":2961},{},[2962,2964,2969],{"type":602,"value":2963},"如果此时进程有可用的线程，就会调用",{"type":597,"tag":610,"props":2965,"children":2967},{"className":2966},[],[2968],{"type":602,"value":2956},{"type":602,"value":2970},"方法，处理用户的HTTP请求。",{"type":597,"tag":598,"props":2972,"children":2973},{},[2974,2979,2981,2987,2989,2995,2997,3003,3005,3011,3013,3018],{"type":597,"tag":610,"props":2975,"children":2977},{"className":2976},[],[2978],{"type":602,"value":2956},{"type":602,"value":2980},"方法默认使用",{"type":597,"tag":610,"props":2982,"children":2984},{"className":2983},[],[2985],{"type":602,"value":2986},"HttpConnectionMiddleware\u003CServiceContext>",{"type":602,"value":2988},"中间件，处理新接入的用户请求，当设置了",{"type":597,"tag":610,"props":2990,"children":2992},{"className":2991},[],[2993],{"type":602,"value":2994},"MaxConcurrentConnections",{"type":602,"value":2996},"值为",{"type":597,"tag":610,"props":2998,"children":3000},{"className":2999},[],[3001],{"type":602,"value":3002},"True",{"type":602,"value":3004},"时，则会默认使用",{"type":597,"tag":610,"props":3006,"children":3008},{"className":3007},[],[3009],{"type":602,"value":3010},"ConnectionLimitMiddleware",{"type":602,"value":3012},"中间件，限制最大可用连接数，如果当前请求数已经达到最大可接受连接数，则拒绝用户的请求并断开连接，否则调用",{"type":597,"tag":610,"props":3014,"children":3016},{"className":3015},[],[3017],{"type":602,"value":2986},{"type":602,"value":3019},"中间件，继续处理用户的请求。",{"type":597,"tag":700,"props":3021,"children":3023},{"id":3022},"处理http请求-httpconnectionmiddlewareservicecontexthttpconnection",[3024,3026,3031,3032],{"type":602,"value":3025},"处理HTTP请求 - ",{"type":597,"tag":610,"props":3027,"children":3029},{"className":3028},[],[3030],{"type":602,"value":2986},{"type":602,"value":2554},{"type":597,"tag":610,"props":3033,"children":3035},{"className":3034},[],[3036],{"type":602,"value":3037},"HttpConnection",{"type":597,"tag":598,"props":3039,"children":3040},{},[3041,3046,3048,3054,3056,3061],{"type":597,"tag":610,"props":3042,"children":3044},{"className":3043},[],[3045],{"type":602,"value":2986},{"type":602,"value":3047},"中间件负责组装连接相关的上下文数据",{"type":597,"tag":610,"props":3049,"children":3051},{"className":3050},[],[3052],{"type":602,"value":3053},"HttpConnectionContext",{"type":602,"value":3055},"，并使用",{"type":597,"tag":610,"props":3057,"children":3059},{"className":3058},[],[3060],{"type":602,"value":3037},{"type":602,"value":3062},"类处理用户请求。",{"type":597,"tag":605,"props":3064,"children":3067},{"className":3065,"code":3066,"language":602,"meta":591},[2616],"internal class HttpConnectionMiddleware\u003CTContext>\n    {\n        private readonly ServiceContext _serviceContext;\n        private readonly IHttpApplication\u003CTContext> _application;\n        private readonly HttpProtocols _protocols;\n\n        public HttpConnectionMiddleware(ServiceContext serviceContext, IHttpApplication\u003CTContext> application, HttpProtocols protocols)\n        {\n            _serviceContext = serviceContext;\n            _application = application;\n            _protocols = protocols;\n        }\n\n        public Task OnConnectionAsync(ConnectionContext connectionContext)\n        {\n            var memoryPoolFeature = connectionContext.Features.Get\u003CIMemoryPoolFeature>();\n\n            var httpConnectionContext = new HttpConnectionContext\n            {\n                ConnectionId = connectionContext.ConnectionId,\n                ConnectionContext = connectionContext,\n                Protocols = _protocols,\n                ServiceContext = _serviceContext,\n                ConnectionFeatures = connectionContext.Features,\n                MemoryPool = memoryPoolFeature.MemoryPool,\n                Transport = connectionContext.Transport,\n                LocalEndPoint = connectionContext.LocalEndPoint as IPEndPoint,\n                RemoteEndPoint = connectionContext.RemoteEndPoint as IPEndPoint\n            };\n\n            var connection = new HttpConnection(httpConnectionContext);\n\n            return connection.ProcessRequestsAsync(_application);\n        }\n    }\n",[3068],{"type":597,"tag":610,"props":3069,"children":3070},{"__ignoreMap":591},[3071],{"type":602,"value":3066},{"type":597,"tag":861,"props":3073,"children":3075},{"id":3074},"http版本控制-httpconnection",[3076,3078],{"type":602,"value":3077},"HTTP版本控制 - ",{"type":597,"tag":610,"props":3079,"children":3081},{"className":3080},[],[3082],{"type":602,"value":3037},{"type":597,"tag":598,"props":3084,"children":3085},{},[3086,3088,3093],{"type":602,"value":3087},"当用户创建",{"type":597,"tag":610,"props":3089,"children":3091},{"className":3090},[],[3092],{"type":602,"value":3037},{"type":602,"value":3094},"类时，在初始化过程中，会根据用户请求声明的HTTP协议版本，分别创建对应版本的Connection类，并使用该类处理用户请求：",{"type":597,"tag":605,"props":3096,"children":3099},{"className":3097,"code":3098,"language":602,"meta":591},[2616],"public async Task ProcessRequestsAsync\u003CTContext>(IHttpApplication\u003CTContext> httpApplication)\n        {\n            try\n            {\n                // Ensure TimeoutControl._lastTimestamp is initialized before anything that could set timeouts runs.\n                _timeoutControl.Initialize(_systemClock.UtcNowTicks);\n\n                IRequestProcessor requestProcessor = null;\n\n                switch (SelectProtocol())\n                {\n                    case HttpProtocols.Http1:\n                        // _http1Connection must be initialized before adding the connection to the connection manager\n                        requestProcessor = _http1Connection = new Http1Connection\u003CTContext>(_context);\n                        _protocolSelectionState = ProtocolSelectionState.Selected;\n                        break;\n                    case HttpProtocols.Http2:\n                        // _http2Connection must be initialized before yielding control to the transport thread,\n                        // to prevent a race condition where _http2Connection.Abort() is called just as\n                        // _http2Connection is about to be initialized.\n                        requestProcessor = new Http2Connection(_context);\n                        _protocolSelectionState = ProtocolSelectionState.Selected;\n                        break;\n                    case HttpProtocols.None:\n                        // An error was already logged in SelectProtocol(), but we should close the connection.\n                        break;\n                    default:\n                        // SelectProtocol() only returns Http1, Http2 or None.\n                        throw new NotSupportedException($\"{nameof(SelectProtocol)} returned something other than Http1, Http2 or None.\");\n                }\n\n                _requestProcessor = requestProcessor;\n\n                if (requestProcessor != null)\n                {\n                    var connectionHeartbeatFeature = _context.ConnectionFeatures.Get\u003CIConnectionHeartbeatFeature>();\n                    var connectionLifetimeNotificationFeature = _context.ConnectionFeatures.Get\u003CIConnectionLifetimeNotificationFeature>();\n\n                    // These features should never be null in Kestrel itself, if this middleware is ever refactored to run outside of kestrel,\n                    // we'll need to handle these missing.\n                    Debug.Assert(connectionHeartbeatFeature != null, nameof(IConnectionHeartbeatFeature) + \" is missing!\");\n                    Debug.Assert(connectionLifetimeNotificationFeature != null, nameof(IConnectionLifetimeNotificationFeature) + \" is missing!\");\n\n                    // Register the various callbacks once we're going to start processing requests\n\n                    // The heart beat for various timeouts\n                    connectionHeartbeatFeature?.OnHeartbeat(state => ((HttpConnection)state).Tick(), this);\n\n                    // Register for graceful shutdown of the server\n                    using var shutdownRegistration = connectionLifetimeNotificationFeature?.ConnectionClosedRequested.Register(state => ((HttpConnection)state).StopProcessingNextRequest(), this);\n\n                    // Register for connection close\n                    using var closedRegistration = _context.ConnectionContext.ConnectionClosed.Register(state => ((HttpConnection)state).OnConnectionClosed(), this);\n\n                    await requestProcessor.ProcessRequestsAsync(httpApplication);\n                }\n            }\n            catch (Exception ex)\n            {\n                Log.LogCritical(0, ex, $\"Unexpected exception in {nameof(HttpConnection)}.{nameof(ProcessRequestsAsync)}.\");\n            }\n            finally\n            {\n                if (_http1Connection?.IsUpgraded == true)\n                {\n                    _context.ServiceContext.ConnectionManager.UpgradedConnectionCount.ReleaseOne();\n                }\n            }\n        }\n",[3100],{"type":597,"tag":610,"props":3101,"children":3102},{"__ignoreMap":591},[3103],{"type":602,"value":3098},{"type":597,"tag":598,"props":3105,"children":3106},{},[3107,3109,3114,3116,3121],{"type":602,"value":3108},"HTTP1和HTTP2处理HTTP协议的方式有所不同，HTTP1协议解析完成后，会立即调用",{"type":597,"tag":610,"props":3110,"children":3112},{"className":3111},[],[3113],{"type":602,"value":2560},{"type":602,"value":3115},"处理请求，HTTP2协议解析完成后，会再次调用",{"type":597,"tag":610,"props":3117,"children":3119},{"className":3118},[],[3120],{"type":602,"value":2948},{"type":602,"value":3122},"方法等待线程池可用线程。",{"type":597,"tag":700,"props":3124,"children":3126},{"id":3125},"结束语",[3127],{"type":602,"value":3125},{"type":597,"tag":598,"props":3129,"children":3130},{},[3131,3136],{"type":597,"tag":610,"props":3132,"children":3134},{"className":3133},[],[3135],{"type":602,"value":2913},{"type":602,"value":3137},"服务的代码量并不下，其中主要是辅助接受用户请求和解析HTTP协议的代码，在这里不做详细的介绍，各位读者有兴趣的，可以详细阅读源代码。",{"type":597,"tag":598,"props":3139,"children":3140},{},[3141,3143,3148],{"type":602,"value":3142},"我们看到，",{"type":597,"tag":610,"props":3144,"children":3146},{"className":3145},[],[3147],{"type":602,"value":2913},{"type":602,"value":3149},"服务在接受和处理请求时，都用到了线程池，可以极大的提高服务器的吞吐量。",{"type":597,"tag":598,"props":3151,"children":3152},{},[3153,3155,3160],{"type":602,"value":3154},"后面，我们还会详细介绍系统默认的",{"type":597,"tag":610,"props":3156,"children":3158},{"className":3157},[],[3159],{"type":602,"value":2560},{"type":602,"value":3161},"实现，看看ASP.NET Core是如何将HTTP转发到Controller和Action，其中又有哪些精妙的代码呢。",{"title":591,"searchDepth":673,"depth":673,"links":3163},[3164,3166,3168,3170,3172,3173,3178],{"id":2543,"depth":673,"text":3165},"定义 - IServer、IHttpApplication\u003CTContext>",{"id":2604,"depth":673,"text":3167},"Web 服务器 - IServer",{"id":2717,"depth":673,"text":3169},"Http应用程序 - IHttpApplication\u003CTContext>",{"id":2800,"depth":673,"text":3171},"实现 - KestrelServer",{"id":2873,"depth":673,"text":2876},{"id":3022,"depth":673,"text":3174,"children":3175},"处理HTTP请求 - HttpConnectionMiddleware\u003CServiceContext>、HttpConnection",[3176],{"id":3074,"depth":1618,"text":3177},"HTTP版本控制 - HttpConnection",{"id":3125,"depth":673,"text":3125},"content:dotnet:2020-08-15-Kestrel-source-code.md","dotnet/2020-08-15-Kestrel-source-code.md","2020-08-15",{"_path":116,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":115,"description":3183,"body":3184,"_type":675,"_id":3360,"_source":677,"_file":3361,"_extension":679,"date":3362},"在 DotNetCore 当中不再像 MVC5 那样可以通过 HttpContext.Current 来获取到当前请求的上下文。",{"type":594,"children":3185,"toc":3358},[3186,3199,3204,3212,3217,3225,3238,3246,3259,3277,3282,3290,3295,3303,3321,3329,3353],{"type":597,"tag":598,"props":3187,"children":3188},{},[3189,3191,3197],{"type":602,"value":3190},"在 DotNetCore 当中不再像 MVC5 那样可以通过 ",{"type":597,"tag":610,"props":3192,"children":3194},{"className":3193},[],[3195],{"type":602,"value":3196},"HttpContext.Current",{"type":602,"value":3198}," 来获取到当前请求的上下文。",{"type":597,"tag":598,"props":3200,"children":3201},{},[3202],{"type":602,"value":3203},"不过微软提供了一个 IHttpContextAccessor 来让我们访问当前请求的 Http 上下文，其定义\n如下：",{"type":597,"tag":605,"props":3205,"children":3207},{"code":3206},"namespace Microsoft.AspNetCore.Http\n{\n    public interface IHttpContextAccessor\n    {\n        HttpContext HttpContext { get; set; }\n    }\n}\n",[3208],{"type":597,"tag":610,"props":3209,"children":3210},{"__ignoreMap":591},[3211],{"type":602,"value":3206},{"type":597,"tag":598,"props":3213,"children":3214},{},[3215],{"type":602,"value":3216},"需要使用的话需要将其添加到 Ioc 容器当中，在 Startup 类的 ConfigureService 我们可以将其默认实现注册到 Ioc 之中。",{"type":597,"tag":605,"props":3218,"children":3220},{"code":3219},"public void ConfigureService(IServiceCollection services) {\n    services.TryAddSingleton\u003CIHttpContextAccessor, HttpContextAccessor>();\n}\n",[3221],{"type":597,"tag":610,"props":3222,"children":3223},{"__ignoreMap":591},[3224],{"type":602,"value":3219},{"type":597,"tag":598,"props":3226,"children":3227},{},[3228,3230,3236],{"type":602,"value":3229},"那么我们可以来看看 ",{"type":597,"tag":610,"props":3231,"children":3233},{"className":3232},[],[3234],{"type":602,"value":3235},"HttpContextAccessor",{"type":602,"value":3237}," 的具体实现:",{"type":597,"tag":605,"props":3239,"children":3241},{"code":3240},"using System.Threading;\n\nnamespace Microsoft.AspNetCore.Http\n{\n    public class HttpContextAccessor : IHttpContextAccessor\n    {\n        private static AsyncLocal\u003CHttpContext> _httpContextCurrent = new AsyncLocal\u003CHttpContext>();\n\n        public HttpContext HttpContext\n        {\n            get\n            {\n                return _httpContextCurrent.Value;\n            }\n            set\n            {\n                _httpContextCurrent.Value = value;\n            }\n        }\n    }\n}\n",[3242],{"type":597,"tag":610,"props":3243,"children":3244},{"__ignoreMap":591},[3245],{"type":602,"value":3240},{"type":597,"tag":598,"props":3247,"children":3248},{},[3249,3251,3257],{"type":602,"value":3250},"在其内部主要是用了一个 ",{"type":597,"tag":610,"props":3252,"children":3254},{"className":3253},[],[3255],{"type":602,"value":3256},"AsyncLocal\u003CHttpContext>",{"type":602,"value":3258}," 来保存一个 HttpContext 实例，那么 Accessor 是什么时候被赋值的呢？答案就是在每次 HTTP 请求的时候会将其赋值。",{"type":597,"tag":598,"props":3260,"children":3261},{},[3262,3268,3270,3275],{"type":597,"tag":610,"props":3263,"children":3265},{"className":3264},[],[3266],{"type":602,"value":3267},"AsyncLocal\u003CT>",{"type":602,"value":3269}," 是什么东西？\n",{"type":597,"tag":610,"props":3271,"children":3273},{"className":3272},[],[3274],{"type":602,"value":3267},{"type":602,"value":3276}," 是在 .Net 4.6 之后推出的一个对象，该对象接受一个泛型参数，其主要作用是保存异步等待上下文中共享某个变量的值。\n而异步方法是基于 Task 的自动线程调度，在异步上下文切换的时候可能导致数据丢失。例如在 await 调用之前对某个变量进行了赋值，而这个变量是多个线程间共享的，当 await 调用返回之前的调用点的时候，可能调用点之后的代码还处在之前的线程上，也有可能被调度到其他线程上。",{"type":597,"tag":598,"props":3278,"children":3279},{},[3280],{"type":602,"value":3281},"举个例子：",{"type":597,"tag":605,"props":3283,"children":3285},{"code":3284},"static async Task TestMethod() {\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n    await Task.Delay(100);\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n}\n",[3286],{"type":597,"tag":610,"props":3287,"children":3288},{"__ignoreMap":591},[3289],{"type":602,"value":3284},{"type":597,"tag":598,"props":3291,"children":3292},{},[3293],{"type":602,"value":3294},"在 await 等待任务执行完成之后，后面的代码输出的 ID 与调用之前的 ID 不一样，说明发生了线程切换：",{"type":597,"tag":605,"props":3296,"children":3298},{"code":3297},"\nstatic void Main(string[] args) {\n    Action @delegate = async () => await TestMethod();\n\n    @delegate();\n    Console.ReadKey();\n}\n",[3299],{"type":597,"tag":610,"props":3300,"children":3301},{"__ignoreMap":591},[3302],{"type":602,"value":3297},{"type":597,"tag":598,"props":3304,"children":3305},{},[3306,3311,3313,3319],{"type":597,"tag":1874,"props":3307,"children":3310},{"alt":3308,"src":3309},"Img","/images/2020-08-11-httpcontextaccessor-asynclocal/5b2f1c93755a0.png",[],{"type":602,"value":3312},"\n从代码上看他们似乎在同一个线程，但是在执行的时候就已经发生了线程切换的操作了。\n而我们在这里如果使用一个 ",{"type":597,"tag":610,"props":3314,"children":3316},{"className":3315},[],[3317],{"type":602,"value":3318},"ThreadLocal\u003CT>",{"type":602,"value":3320},"变量来存储的话，会发生什么事情呢？",{"type":597,"tag":605,"props":3322,"children":3324},{"code":3323},"static ThreadLocal\u003Cint> _threadLocal = new ThreadLocal\u003Cint>();\nstatic AsyncLocal\u003Cint> _asyncLocal = new AsyncLocal\u003Cint>();\n\nstatic void Main(string[] args) {\n    Action @delegate = async () => await TestMethod();\n\n    @delegate();\n    Console.ReadKey();\n}\n\nstatic async Task TestMethod() {\n    _threadLocal.Value = 1000;\n    _asyncLocal.Value = 2000;\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n    Console.WriteLine($\"{nameof(_threadLocal)}，值:{_threadLocal.Value}\");\n    Console.WriteLine($\"{nameof(_asyncLocal)}，值:{_asyncLocal.Value}\");\n    await Task.Delay(100);\n    Console.WriteLine($\"当前线程ID{Thread.CurrentThread.ManagedThreadId}\");\n    Console.WriteLine($\"{nameof(_threadLocal)}，值:{_threadLocal.Value}\");\n    Console.WriteLine($\"{nameof(_asyncLocal)}，值:{_asyncLocal.Value}\");\n}\n",[3325],{"type":597,"tag":610,"props":3326,"children":3327},{"__ignoreMap":591},[3328],{"type":602,"value":3323},{"type":597,"tag":598,"props":3330,"children":3331},{},[3332,3336,3338,3344,3346,3351],{"type":597,"tag":1874,"props":3333,"children":3335},{"alt":3308,"src":3334},"/images/2020-08-11-httpcontextaccessor-asynclocal/5b2f1c938eec4.png",[],{"type":602,"value":3337},"\nSO，在这里解释一下， ",{"type":597,"tag":610,"props":3339,"children":3341},{"className":3340},[],[3342],{"type":602,"value":3343},"ThreadLocal",{"type":602,"value":3345}," 是用于为不同的线程保存不同的变量值的，即同一个变量在不同线程当中存储的值可以不一样。在这里使用是为了保证在 TestMethod 方法中变量的唯一性，这个在同步方法用是没问题的，但这里使用了 await 关键字导致等待异步调用结束后代码已经被调度到其他的线程了，所以这里没用。而 ",{"type":597,"tag":610,"props":3347,"children":3349},{"className":3348},[],[3350],{"type":602,"value":3267},{"type":602,"value":3352}," 正是为了这种情况而准备的。",{"type":597,"tag":598,"props":3354,"children":3355},{},[3356],{"type":602,"value":3357},"这就解释了为什么是单例却在每个线程是不同的值.",{"title":591,"searchDepth":673,"depth":673,"links":3359},[],"content:dotnet:2020-08-11-httpcontextaccessor-asynclocal.md","dotnet/2020-08-11-httpcontextaccessor-asynclocal.md","2020-08-11",{"_path":113,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":112,"description":3364,"body":3365,"_type":675,"_id":3382,"_source":677,"_file":3383,"_extension":679,"date":3384},"可以通过反射获取这些特性然后做处理class Program\n{\n    static void Main(string[] args)\n    {\n        var message = new MessageData {\n\n            Header=\"header...\",\n            Body=\"body....\",\n            Footer=\"footer...\",\n        };\n\n        Type objT = typeof(Program);\n        Type fromBodyT = typeof(FromBodyAt",{"type":594,"children":3366,"toc":3380},[3367,3372],{"type":597,"tag":598,"props":3368,"children":3369},{},[3370],{"type":602,"value":3371},"可以通过反射获取这些特性然后做处理",{"type":597,"tag":605,"props":3373,"children":3375},{"code":3374},"class Program\n{\n    static void Main(string[] args)\n    {\n        var message = new MessageData {\n\n            Header=\"header...\",\n            Body=\"body....\",\n            Footer=\"footer...\",\n        };\n\n        Type objT = typeof(Program);\n        Type fromBodyT = typeof(FromBodyAttribute);\n        MethodInfo method = objT.GetMethod(\"Test\");\n\n        ParameterInfo[] paramsInfo = method.GetParameters();\n        var parameters= new List\u003Cobject>(paramsInfo.Length);\n        foreach (ParameterInfo parameterInfo in paramsInfo)\n        {\n            var parameter = new object();\n            if (parameterInfo.CustomAttributes.Any(i => i.AttributeType == fromBodyT))\n                parameter = message.Body;\n            parameters.Add(parameter);\n        }\n\n\n        object result = method.Invoke(null, parameters.ToArray());\n        Console.WriteLine(result);\n\n\n    }\n    public class FromBodyAttribute : Attribute\n    {\n    }\n    public static string Test([FromBody] string body)\n    {\n        return body;\n    }\n    class MessageData\n    {\n\n        public string Body { get; set; }\n        public string Header { get; set; }\n        public string Footer { get; set; }\n\n    }\n\n}\n",[3376],{"type":597,"tag":610,"props":3377,"children":3378},{"__ignoreMap":591},[3379],{"type":602,"value":3374},{"title":591,"searchDepth":673,"depth":673,"links":3381},[],"content:dotnet:2020-08-10-param-attribute.md","dotnet/2020-08-10-param-attribute.md","2020-08-10",{"_path":110,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":109,"description":3386,"body":3387,"_type":675,"_id":3493,"_source":677,"_file":3494,"_extension":679,"date":3495},"grain激活体是单线程的，默认情况下，激活体会自始至终地处理完成每个请求后，才会处理下一个请求。\n可重入的激活体，可以在上一个请求尚未完成处理的情况下，开始执行另一个请求。执行仍然限于单个线程，因此激活体仍然一次执行一个回合，并且每个回合仅代表激活体的一个请求执行。\n可重入的grain代码永远不会并行运行多段grain代码（grain代码的执行将始终是单线程的），但是，可重入的grain可能会看到不同请求交错执行的代码。也就是说，来自不同请求的延续回合，是交错执行的。",{"type":594,"children":3388,"toc":3490},[3389,3394,3398,3403,3409,3414,3419,3424,3429,3437,3442,3450,3455,3460,3473,3478],{"type":597,"tag":2243,"props":3390,"children":3392},{"id":3391},"重入",[3393],{"type":602,"value":3391},{"type":597,"tag":598,"props":3395,"children":3396},{},[3397],{"type":602,"value":3386},{"type":597,"tag":598,"props":3399,"children":3400},{},[3401],{"type":602,"value":3402},"因为访问grain一般是需要跨服务器的，所以可重入是很有必要的。。",{"type":597,"tag":2243,"props":3404,"children":3406},{"id":3405},"无状态grain",[3407],{"type":602,"value":3408},"无状态Grain",{"type":597,"tag":598,"props":3410,"children":3411},{},[3412],{"type":602,"value":3413},"grain永远是运行在服务端的,包括无状态的.",{"type":597,"tag":2243,"props":3415,"children":3417},{"id":3416},"time",[3418],{"type":602,"value":3416},{"type":597,"tag":598,"props":3420,"children":3421},{},[3422],{"type":602,"value":3423},"time是单线程的..",{"type":597,"tag":700,"props":3425,"children":3427},{"id":3426},"错误",[3428],{"type":602,"value":3426},{"type":597,"tag":605,"props":3430,"children":3432},{"code":3431},"        public override async Task OnActivateAsync()\n        {\n\n            if (this.TimerDisposable == null)\n            {\n                this.TimerDisposable = RegisterTimer(\n                            this.SaveChanges,\n                            \"timer\",\n                            TimeSpan.FromMilliseconds(0),\n                            TimeSpan.FromMilliseconds(1)\n                            );\n            }\n\n            await base.OnActivateAsync();\n        }\n\n\n\n        private Task SaveChanges(object arg)\n        {\n            this.persisitent.State.num++;\n\n            return this.persisitent.WriteStateAsync();\n        }\n\n        public async Task StartUp()\n        {\n            this.persisitent.State.num = 0;\n            await this.WriteStateAsync();\n        }\n        \n        \n           var grain = this.GrainFactory.GetGrain\u003CITimeTestGrain>(1000);\n\n            await grain.StartUp();\n        \n",[3433],{"type":597,"tag":610,"props":3434,"children":3435},{"__ignoreMap":591},[3436],{"type":602,"value":3431},{"type":597,"tag":598,"props":3438,"children":3439},{},[3440],{"type":602,"value":3441},"以上代码当duetime设置为0的时候,会有类型的错误",{"type":597,"tag":605,"props":3443,"children":3445},{"code":3444},"Orleans.Storage.InconsistentStateException: ETag mismatch - tried with ETag: a62ea0e1-a40d-43c3-a508-1e8615351443\n",[3446],{"type":597,"tag":610,"props":3447,"children":3448},{"__ignoreMap":591},[3449],{"type":602,"value":3444},{"type":597,"tag":598,"props":3451,"children":3452},{},[3453],{"type":602,"value":3454},"原因猜测,grain未激活完成的时候,如果为0的时候,这个时候time的callback(SaveChanges)还没有加入到任务队列,就调用了state,而之后也立即同时调用了state这个时候就会报错.",{"type":597,"tag":598,"props":3456,"children":3457},{},[3458],{"type":602,"value":3459},"解决方案:",{"type":597,"tag":1136,"props":3461,"children":3462},{},[3463,3468],{"type":597,"tag":1140,"props":3464,"children":3465},{},[3466],{"type":602,"value":3467},"不要设置duetime为0",{"type":597,"tag":1140,"props":3469,"children":3470},{},[3471],{"type":602,"value":3472},"或者不要在OnActivateAsync中RegisterTimer,在Activate后再RegisterTimer",{"type":597,"tag":2243,"props":3474,"children":3476},{"id":3475},"相关链接",[3477],{"type":602,"value":3475},{"type":597,"tag":1136,"props":3479,"children":3480},{},[3481],{"type":597,"tag":1140,"props":3482,"children":3483},{},[3484],{"type":597,"tag":768,"props":3485,"children":3488},{"href":3486,"rel":3487},"https://dotnet.github.io/orleans/Documentation/resources/Best_Practices.html",[772],[3489],{"type":602,"value":3486},{"title":591,"searchDepth":673,"depth":673,"links":3491},[3492],{"id":3426,"depth":673,"text":3426},"content:dotnet:2020-08-09-Orleans-Best-Practices.md","dotnet/2020-08-09-Orleans-Best-Practices.md","2020-08-09",{"_path":107,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":106,"description":3497,"body":3498,"_type":675,"_id":3882,"_source":677,"_file":3883,"_extension":679,"date":3884},"abp是依托与aspnetcore的.我们先来看看aspnetcore是怎么实现的",{"type":594,"children":3499,"toc":3871},[3500,3504,3508,3516,3521,3567,3578,3583,3592,3597,3606,3617,3622,3627,3632,3637,3648,3660,3667,3673,3737,3766,3771,3776,3784,3789,3797,3802,3807,3820,3845,3850,3858,3863],{"type":597,"tag":2243,"props":3501,"children":3502},{"id":106},[3503],{"type":602,"value":106},{"type":597,"tag":598,"props":3505,"children":3506},{},[3507],{"type":602,"value":3497},{"type":597,"tag":605,"props":3509,"children":3511},{"code":3510},"\n    services.Configure\u003CRequestLocalizationOptions>(options =>\n        {\n            var supportedCultures = new List\u003CCultureInfo>\n            {\n                new CultureInfo(\"en-US\"),\n                new CultureInfo(\"en\"),\n                new CultureInfo(\"fr-FR\"),\n                new CultureInfo(\"fr\")\n            };\n\n            options.DefaultRequestCulture = new RequestCulture(\"en-US\");\n            options.SupportedCultures = supportedCultures;\n            options.SupportedUICultures = supportedCultures;\n        });\n        \n        \n        //中间件\n        app.UseRequestLocalization();\n",[3512],{"type":597,"tag":610,"props":3513,"children":3514},{"__ignoreMap":591},[3515],{"type":602,"value":3510},{"type":597,"tag":700,"props":3517,"children":3519},{"id":3518},"中间件request的语言判断",[3520],{"type":602,"value":3518},{"type":597,"tag":598,"props":3522,"children":3523},{},[3524,3526,3533,3535,3542,3544,3549,3551,3557,3559,3565],{"type":602,"value":3525},"在每次请求里 ",{"type":597,"tag":768,"props":3527,"children":3530},{"href":3528,"rel":3529},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNet/Localization/RequestLocalizationOptions/index.html",[772],[3531],{"type":602,"value":3532},"RequestLocalizationOptions",{"type":602,"value":3534}," 的 ",{"type":597,"tag":768,"props":3536,"children":3539},{"href":3537,"rel":3538},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/RequestCultureProvider/index.html",[772],[3540],{"type":602,"value":3541},"RequestCultureProvider",{"type":602,"value":3543}," 列表会被遍历，第一个provider 会被使用来判断请求使用的文化。默认的 provider 来自",{"type":597,"tag":610,"props":3545,"children":3547},{"className":3546},[],[3548],{"type":602,"value":3532},{"type":602,"value":3550}," 类,如果没有非空的 provider，",{"type":597,"tag":610,"props":3552,"children":3554},{"className":3553},[],[3555],{"type":602,"value":3556},"DefaultRequestCulture",{"type":602,"value":3558}," 被使用。所以如果发现语言不是按照逻辑顺序显示,先检查请求网址,再检查",{"type":597,"tag":610,"props":3560,"children":3562},{"className":3561},[],[3563],{"type":602,"value":3564},"cookie",{"type":602,"value":3566},"(很难注意到),最后检查acceptlanguage",{"type":597,"tag":861,"props":3568,"children":3570},{"id":3569},"querystringrequestcultureprovider",[3571],{"type":597,"tag":768,"props":3572,"children":3575},{"href":3573,"rel":3574},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/QueryStringRequestCultureProvider/index.html",[772],[3576],{"type":602,"value":3577},"QueryStringRequestCultureProvider",{"type":597,"tag":598,"props":3579,"children":3580},{},[3581],{"type":602,"value":3582},"下面的例子指定了具体的区域性（语言和区域）设置为西班牙语/墨西哥：",{"type":597,"tag":598,"props":3584,"children":3585},{},[3586],{"type":597,"tag":768,"props":3587,"children":3590},{"href":3588,"rel":3589},"http://localhost:5000/?culture=es-MX&ui-culture=es-MX",[772],[3591],{"type":602,"value":3588},{"type":597,"tag":598,"props":3593,"children":3594},{},[3595],{"type":602,"value":3596},"如果你仅仅使用（culture 或者 ui-culture）中的一个参数进行传递，查询字符串 provider 将使用你传递一个值来设置这两个参数。例如，仅设置culture，将会同样设置 Culture 和 UICulture：",{"type":597,"tag":598,"props":3598,"children":3599},{},[3600],{"type":597,"tag":768,"props":3601,"children":3604},{"href":3602,"rel":3603},"http://localhost:5000/?culture=es-MX",[772],[3605],{"type":602,"value":3602},{"type":597,"tag":861,"props":3607,"children":3609},{"id":3608},"cookierequestcultureprovider",[3610],{"type":597,"tag":768,"props":3611,"children":3614},{"href":3612,"rel":3613},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/CookieRequestCultureProvider/index.html",[772],[3615],{"type":602,"value":3616},"CookieRequestCultureProvider",{"type":597,"tag":598,"props":3618,"children":3619},{},[3620],{"type":602,"value":3621},"CookieRequestCultureProvider 的 DefaultCookieName 返回用于跟踪用户的首选区域性信息默认的 Cookie 名称。默认的 Cookie 名称是 “.AspNetCore.Culture”。",{"type":597,"tag":598,"props":3623,"children":3624},{},[3625],{"type":602,"value":3626},"cookie 的格式是 c=%LANGCODE%|uic=%LANGCODE%, c 为区域信息 和 uic 为 UI 区域信息，例如：",{"type":597,"tag":598,"props":3628,"children":3629},{},[3630],{"type":602,"value":3631},"c=’en-UK’|uic=’en-US’",{"type":597,"tag":598,"props":3633,"children":3634},{},[3635],{"type":602,"value":3636},"如果仅指定 culture 或 UI culture中的一个，指定的区域性信息将同时用于 culture和 UI culture。",{"type":597,"tag":861,"props":3638,"children":3640},{"id":3639},"acceptlanguageheaderrequestcultureprovider",[3641],{"type":597,"tag":768,"props":3642,"children":3645},{"href":3643,"rel":3644},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/AcceptLanguageHeaderRequestCultureProvider/index.html",[772],[3646],{"type":602,"value":3647},"AcceptLanguageHeaderRequestCultureProvider",{"type":597,"tag":598,"props":3649,"children":3650},{},[3651,3653,3658],{"type":602,"value":3652},"这个一般是根据浏览器的设置进行访问的\n",{"type":597,"tag":1874,"props":3654,"children":3657},{"alt":3655,"src":3656},"image-20200719113919074","/images/2020-07-15-abp-default-language/image-20200719113919074.png",[],{"type":602,"value":3659},"\n不同的浏览器默认语言不同,chrome浏览器可以再语言里设置",{"type":597,"tag":598,"props":3661,"children":3662},{},[3663],{"type":597,"tag":1874,"props":3664,"children":3666},{"alt":1874,"src":3665},"/images/2020-07-15-abp-default-language/c83d70cf3bc79f3d3ec73c6db4a1cd11728b294d.png",[],{"type":597,"tag":700,"props":3668,"children":3670},{"id":3669},"cultures",[3671],{"type":602,"value":3672},"Cultures",{"type":597,"tag":1136,"props":3674,"children":3675},{},[3676,3704],{"type":597,"tag":1140,"props":3677,"children":3678},{},[3679,3685,3686,3693,3695,3702],{"type":597,"tag":610,"props":3680,"children":3682},{"className":3681},[],[3683],{"type":602,"value":3684},"SupportedCultures",{"type":602,"value":3534},{"type":597,"tag":768,"props":3687,"children":3690},{"href":3688,"rel":3689},"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo(v=vs.110).aspx",[772],[3691],{"type":602,"value":3692},"CultureInfo",{"type":602,"value":3694}," 对象决定了和文化相关的函数，如日期，时间，数字和货币格式的结果。同时决定了文字如何排序，大小写转换以及字符串比较。参考",{"type":597,"tag":768,"props":3696,"children":3699},{"href":3697,"rel":3698},"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.currentculture(v=vs.110).aspx",[772],[3700],{"type":602,"value":3701},"CultureInfo.CurrentCulture",{"type":602,"value":3703}," 获取更多关于服务器如何获取文化的信息。",{"type":597,"tag":1140,"props":3705,"children":3706},{},[3707,3713,3715,3722,3724,3729,3731,3735],{"type":597,"tag":610,"props":3708,"children":3710},{"className":3709},[],[3711],{"type":602,"value":3712},"SupportedUICultures",{"type":602,"value":3714}," 决定如何通过 ",{"type":597,"tag":768,"props":3716,"children":3719},{"href":3717,"rel":3718},"https://msdn.microsoft.com/en-us/library/system.resources.resourcemanager(v=vs.110).aspx",[772],[3720],{"type":602,"value":3721},"ResourceManager",{"type":602,"value":3723}," 查找翻译字符串（从 ",{"type":597,"tag":1700,"props":3725,"children":3726},{},[3727],{"type":602,"value":3728},".resx",{"type":602,"value":3730}," 文件）。 ",{"type":597,"tag":1700,"props":3732,"children":3733},{},[3734],{"type":602,"value":3721},{"type":602,"value":3736}," 只是通过 CurrentUICulture 简单的查找指定文化的字符串。",{"type":597,"tag":598,"props":3738,"children":3739},{},[3740,3742,3748,3750,3756,3758,3764],{"type":602,"value":3741},".NET 的每个线程都会拥有 ",{"type":597,"tag":610,"props":3743,"children":3745},{"className":3744},[],[3746],{"type":602,"value":3747},"CurrentCulture",{"type":602,"value":3749}," 和",{"type":597,"tag":610,"props":3751,"children":3753},{"className":3752},[],[3754],{"type":602,"value":3755},"CurrentUICulture",{"type":602,"value":3757}," 对象。当 ASP.NET Core 在渲染与文化相关的函数的时候会检视这些对象值。例如，如果当前线程的区域性设置为 “en-US” （英语、美国）， ",{"type":597,"tag":610,"props":3759,"children":3761},{"className":3760},[],[3762],{"type":602,"value":3763},"DateTime.Now.ToLongDateString() \"Thursday, February 18, 2016\"",{"type":602,"value":3765}," ，但如果 CurrentCulture 设置为 “es-ES”（西班牙语、西班牙），输出将会是 “jueves, 18 de febrero de 2016”。",{"type":597,"tag":700,"props":3767,"children":3769},{"id":3768},"abp的实现",[3770],{"type":602,"value":3768},{"type":597,"tag":598,"props":3772,"children":3773},{},[3774],{"type":602,"value":3775},"Volo.Abp.AspNetCore项目中DefaultAbpRequestLocalizationOptionsProvider.cs",{"type":597,"tag":605,"props":3777,"children":3779},{"code":3778},"#GetLocalizationOptionsAsync()\n#根据设置获取默认语言,如果默认语言为en\nvar languages = await languageProvider.GetLanguagesAsync();\nvar defaultLanguage = await settingProvider.GetOrNullAsync(LocalizationSettingNames.DefaultLanguage);\n\nvar options = !languages.Any()\n? new RequestLocalizationOptions()\n: new RequestLocalizationOptions\n{\nDefaultRequestCulture = DefaultGetRequestCulture(defaultLanguage, languages),\n\nSupportedCultures = languages\n.Select(l => l.CultureName)\n.Distinct()\n.Select(c => new CultureInfo(c))\n.ToArray(),\n\nSupportedUICultures = languages\n.Select(l => l.UiCultureName)\n.Distinct()\n.Select(c => new CultureInfo(c))\n.ToArray()\n};\n\n#如果设置中的默认语言不存在,则选取第一个语言作为默认语言\nprivate static RequestCulture DefaultGetRequestCulture(string defaultLanguage, IReadOnlyList\u003CLanguageInfo> languages)\n{\n    if (defaultLanguage == null)\n    {\n    var firstLanguage = languages.First();\n    return new RequestCulture(firstLanguage.CultureName, firstLanguage.UiCultureName);\n    }\n\n    var (cultureName, uiCultureName) = LocalizationSettingHelper.ParseLanguageSetting(defaultLanguage);\n    return new RequestCulture(cultureName, uiCultureName);\n}\n",[3780],{"type":597,"tag":610,"props":3781,"children":3782},{"__ignoreMap":591},[3783],{"type":602,"value":3778},{"type":597,"tag":598,"props":3785,"children":3786},{},[3787],{"type":602,"value":3788},"然后中间件是",{"type":597,"tag":605,"props":3790,"children":3792},{"code":3791},"app.UseAbpRequestLocalization();\n",[3793],{"type":597,"tag":610,"props":3794,"children":3795},{"__ignoreMap":591},[3796],{"type":602,"value":3791},{"type":597,"tag":598,"props":3798,"children":3799},{},[3800],{"type":602,"value":3801},"中间件使用的是AbpRequestLocalizationMiddleware,其实它只是对aspnetcore的RequestLocalizationMiddleware进行了一层包装",{"type":597,"tag":861,"props":3803,"children":3805},{"id":3804},"如何修改默认语言",[3806],{"type":602,"value":3804},{"type":597,"tag":598,"props":3808,"children":3809},{},[3810,3812,3818],{"type":602,"value":3811},"首先注意浏览器发送的中文的",{"type":597,"tag":610,"props":3813,"children":3815},{"className":3814},[],[3816],{"type":602,"value":3817},"accept-language",{"type":602,"value":3819},"的值与ABP值是不一样的:",{"type":597,"tag":1136,"props":3821,"children":3822},{},[3823,3834],{"type":597,"tag":1140,"props":3824,"children":3825},{},[3826,3828],{"type":602,"value":3827},"浏览器(如Chrome)的值为",{"type":597,"tag":610,"props":3829,"children":3831},{"className":3830},[],[3832],{"type":602,"value":3833},"zh-CN",{"type":597,"tag":1140,"props":3835,"children":3836},{},[3837,3839],{"type":602,"value":3838},"而ABP的简体中文的值为",{"type":597,"tag":610,"props":3840,"children":3842},{"className":3841},[],[3843],{"type":602,"value":3844},"zh-Hans",{"type":597,"tag":598,"props":3846,"children":3847},{},[3848],{"type":602,"value":3849},"首先修改配置文件appsettings.json",{"type":597,"tag":605,"props":3851,"children":3853},{"code":3852},"\"Settings\": {\n    \"Abp.Localization.DefaultLanguage\": \"zh-Hans\"\n}\n",[3854],{"type":597,"tag":610,"props":3855,"children":3856},{"__ignoreMap":591},[3857],{"type":602,"value":3852},{"type":597,"tag":598,"props":3859,"children":3860},{},[3861],{"type":602,"value":3862},"然后在中间件中删除AcceptLanguageHeaderRequestCultureProvider",{"type":597,"tag":605,"props":3864,"children":3866},{"code":3865},"app.UseAbpRequestLocalization(options =>\n    {\n        options.RequestCultureProviders.RemoveAll(provider => provider is AcceptLanguageHeaderRequestCultureProvider);\n    }\n);\n",[3867],{"type":597,"tag":610,"props":3868,"children":3869},{"__ignoreMap":591},[3870],{"type":602,"value":3865},{"title":591,"searchDepth":673,"depth":673,"links":3872},[3873,3878,3879],{"id":3518,"depth":673,"text":3518,"children":3874},[3875,3876,3877],{"id":3569,"depth":1618,"text":3577},{"id":3608,"depth":1618,"text":3616},{"id":3639,"depth":1618,"text":3647},{"id":3669,"depth":673,"text":3672},{"id":3768,"depth":673,"text":3768,"children":3880},[3881],{"id":3804,"depth":1618,"text":3804},"content:dotnet:2020-07-15-abp-default-language.md","dotnet/2020-07-15-abp-default-language.md","2020-07-15",{"_path":104,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":103,"description":3886,"body":3887,"_type":675,"_id":4075,"_source":677,"_file":4076,"_extension":679,"date":4077},"配置原理abp 使用拉的方式从github直接请求,然后存储到数据库作为缓存注意开发环境下,他会从github直接拉取而不会经过数据库缓存,所以会很慢关于版本当你写完书的时候.打个tag,然后把tag的版本号填入上方的..最新版本的分支名称即可关于多语言注意多语言abp使用了缓存..所以如果你更改了docs-langs.json,需要重启服务器,或者清空缓存{\n    \"Languages\":[\n      {\n        \"DisplayName\" : \"English\",\n        \"Code\" : \"en\",\n        \"IsDefault\": false\n      }",{"type":594,"children":3888,"toc":4073},[3889,3894,3902,3907,3912,3917,3922,3927,3932,3937,3945,3951,3956,3965,3970,3991,3999,4004,4012,4017,4025,4030,4038,4044,4049,4055,4060,4065],{"type":597,"tag":2243,"props":3890,"children":3892},{"id":3891},"配置",[3893],{"type":602,"value":3891},{"type":597,"tag":598,"props":3895,"children":3896},{},[3897],{"type":597,"tag":1874,"props":3898,"children":3901},{"alt":3899,"src":3900},"image-20200716181126415","/images/2020-07-10-abp-doc/image-20200716181126415.png",[],{"type":597,"tag":2243,"props":3903,"children":3905},{"id":3904},"原理",[3906],{"type":602,"value":3904},{"type":597,"tag":598,"props":3908,"children":3909},{},[3910],{"type":602,"value":3911},"abp 使用拉的方式从github直接请求,然后存储到数据库作为缓存",{"type":597,"tag":598,"props":3913,"children":3914},{},[3915],{"type":602,"value":3916},"注意开发环境下,他会从github直接拉取而不会经过数据库缓存,所以会很慢",{"type":597,"tag":2243,"props":3918,"children":3920},{"id":3919},"关于版本",[3921],{"type":602,"value":3919},{"type":597,"tag":598,"props":3923,"children":3924},{},[3925],{"type":602,"value":3926},"当你写完书的时候.打个tag,然后把tag的版本号填入上方的..最新版本的分支名称即可",{"type":597,"tag":2243,"props":3928,"children":3930},{"id":3929},"关于多语言",[3931],{"type":602,"value":3929},{"type":597,"tag":598,"props":3933,"children":3934},{},[3935],{"type":602,"value":3936},"注意多语言abp使用了缓存..所以如果你更改了docs-langs.json,需要重启服务器,或者清空缓存",{"type":597,"tag":605,"props":3938,"children":3940},{"code":3939},"{\n    \"Languages\":[\n      {\n        \"DisplayName\" : \"English\",\n        \"Code\" : \"en\",\n        \"IsDefault\": false\n      },\n      {\n        \"DisplayName\" : \"简体中文\",\n        \"Code\" : \"zh\",\n        \"IsDefault\": true\n      }\n    ]\n  }\n",[3941],{"type":597,"tag":610,"props":3942,"children":3943},{"__ignoreMap":591},[3944],{"type":602,"value":3939},{"type":597,"tag":2243,"props":3946,"children":3948},{"id":3947},"关于参数doc-params",[3949],{"type":602,"value":3950},"关于参数[doc-params]",{"type":597,"tag":598,"props":3952,"children":3953},{},[3954],{"type":602,"value":3955},"abp使用了scriban文本模板语言引擎.",{"type":597,"tag":598,"props":3957,"children":3958},{},[3959],{"type":597,"tag":768,"props":3960,"children":3963},{"href":3961,"rel":3962},"https://github.com/lunet-io/scriban",[772],[3964],{"type":602,"value":3961},{"type":597,"tag":598,"props":3966,"children":3967},{},[3968],{"type":602,"value":3969},"具体的示例参见:",{"type":597,"tag":1136,"props":3971,"children":3972},{},[3973,3982],{"type":597,"tag":1140,"props":3974,"children":3975},{},[3976],{"type":597,"tag":768,"props":3977,"children":3980},{"href":3978,"rel":3979},"https://docs.abp.io/zh-Hans/abp/latest/Getting-Started?UI=MVC&DB=EF&Tiered=No",[772],[3981],{"type":602,"value":3978},{"type":597,"tag":1140,"props":3983,"children":3984},{},[3985],{"type":597,"tag":768,"props":3986,"children":3989},{"href":3987,"rel":3988},"https://github.com/abpframework/abp/blob/master/docs/zh-Hans/Getting-Started.md",[772],[3990],{"type":602,"value":3987},{"type":597,"tag":605,"props":3992,"children":3994},{"code":3993},"{\n  \"parameters\": [\n    {\n      \"name\": \"UI\",\n      \"displayName\": \"UI\",\n      \"values\": {\n        \"MVC\": \"MVC / Razor Pages\",\n        \"NG\": \"Angular\"\n      }\n    },\n    {\n      \"name\": \"DB\",\n      \"displayName\": \"Database\",\n      \"values\": {\n        \"EF\": \"Entity Framework Core\",\n        \"Mongo\": \"MongoDB\"\n      }\n    },\n    {\n      \"name\": \"Tiered\",\n      \"displayName\": \"Tiered\",\n      \"values\": {\n        \"No\": \"Not Tiered\",\n        \"Yes\": \"Tiered\"\n      }\n    }\n  ]\n}\n",[3995],{"type":597,"tag":610,"props":3996,"children":3997},{"__ignoreMap":591},[3998],{"type":602,"value":3993},{"type":597,"tag":598,"props":4000,"children":4001},{},[4002],{"type":602,"value":4003},"markdow中使用",{"type":597,"tag":605,"props":4005,"children":4007},{"code":4006},"//[doc-params]\n{\n    \"UI\": [\"MVC\",\"NG\"],\n    \"DB\": [\"EF\", \"Mongo\"],\n    \"Tiered\": [\"Yes\", \"No\"]\n}\n本教程介绍了如何创建一个新的{{if UI == \"MVC\"}} ASP.NET Core MVC web {{else if UI == \"NG\"}} Angular {{end}}. 配置并运行它.\n",[4008],{"type":597,"tag":610,"props":4009,"children":4010},{"__ignoreMap":591},[4011],{"type":602,"value":4006},{"type":597,"tag":598,"props":4013,"children":4014},{},[4015],{"type":602,"value":4016},"生成的html",{"type":597,"tag":598,"props":4018,"children":4019},{},[4020],{"type":597,"tag":1874,"props":4021,"children":4024},{"alt":4022,"src":4023},"image-20200718164036943","/images/2020-07-10-abp-doc/image-20200718164036943.png",[],{"type":597,"tag":598,"props":4026,"children":4027},{},[4028],{"type":602,"value":4029},"当切换ui的值后的显示,我们看到字符发生了改变",{"type":597,"tag":598,"props":4031,"children":4032},{},[4033],{"type":597,"tag":1874,"props":4034,"children":4037},{"alt":4035,"src":4036},"image-20200718164137023","/images/2020-07-10-abp-doc/image-20200718164137023.png",[],{"type":597,"tag":2243,"props":4039,"children":4041},{"id":4040},"关于doc-template",[4042],{"type":602,"value":4043},"关于[doc-template]",{"type":597,"tag":598,"props":4045,"children":4046},{},[4047],{"type":602,"value":4048},"还没看到如何用",{"type":597,"tag":2243,"props":4050,"children":4052},{"id":4051},"_404",[4053],{"type":602,"value":4054},"404",{"type":597,"tag":598,"props":4056,"children":4057},{},[4058],{"type":602,"value":4059},"因为访问github如果超时就会出现404.",{"type":597,"tag":598,"props":4061,"children":4062},{},[4063],{"type":602,"value":4064},"所以建议控制台设置代理然后运行",{"type":597,"tag":605,"props":4066,"children":4068},{"code":4067},"$env:http_proxy=\"http://127.0.0.1:1080\"\n$env:https_proxy=\"http://127.0.0.1:1080\"\ndotnet run .\\IG.Www.Web.csproj\n",[4069],{"type":597,"tag":610,"props":4070,"children":4071},{"__ignoreMap":591},[4072],{"type":602,"value":4067},{"title":591,"searchDepth":673,"depth":673,"links":4074},[],"content:dotnet:2020-07-10-abp-doc.md","dotnet/2020-07-10-abp-doc.md","2020-07-10",{"_path":101,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":100,"description":4079,"body":4080,"_type":675,"_id":4429,"_source":677,"_file":4430,"_extension":679,"date":4431},"abp的dbcontext是分成两种的,一个是程序运行的dbcontext,一个是数据迁移的dbcontext",{"type":594,"children":4081,"toc":4423},[4082,4087,4091,4100,4108,4117,4125,4130,4136,4161,4166,4171,4179,4184,4192,4203,4214,4222,4227,4235,4240,4248,4254,4260,4265,4274,4279,4284,4293,4301,4309,4317,4326,4334,4339,4347,4355,4360,4369,4377,4382,4409],{"type":597,"tag":2243,"props":4083,"children":4085},{"id":4084},"数据迁移上下文",[4086],{"type":602,"value":4084},{"type":597,"tag":598,"props":4088,"children":4089},{},[4090],{"type":602,"value":4079},{"type":597,"tag":598,"props":4092,"children":4093},{},[4094],{"type":597,"tag":610,"props":4095,"children":4097},{"className":4096},[],[4098],{"type":602,"value":4099},"PlayGroundMigrationsDbContext.cs",{"type":597,"tag":605,"props":4101,"children":4103},{"code":4102},"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Include modules to your migration db context */\n\n            builder.ConfigurePermissionManagement();\n            builder.ConfigureSettingManagement();\n            builder.ConfigureBackgroundJobs();\n            builder.ConfigureAuditLogging();\n            builder.ConfigureIdentity();\n            builder.ConfigureIdentityServer();\n            builder.ConfigureFeatureManagement();\n            builder.ConfigureTenantManagement();\n\n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n            builder.ConfigureBlogging();\n        }\n",[4104],{"type":597,"tag":610,"props":4105,"children":4106},{"__ignoreMap":591},[4107],{"type":602,"value":4102},{"type":597,"tag":598,"props":4109,"children":4110},{},[4111],{"type":597,"tag":610,"props":4112,"children":4114},{"className":4113},[],[4115],{"type":602,"value":4116},"PlayGroundDbContext.cs",{"type":597,"tag":605,"props":4118,"children":4120},{"code":4119},"        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n\n            /* Configure the shared tables (with included modules) here */\n\n            builder.Entity\u003CAppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n            });\n \n            /* Configure your own tables/entities inside the ConfigurePlayGround method */\n\n            builder.ConfigurePlayGround();\n        }\n",[4121],{"type":597,"tag":610,"props":4122,"children":4123},{"__ignoreMap":591},[4124],{"type":602,"value":4119},{"type":597,"tag":598,"props":4126,"children":4127},{},[4128],{"type":602,"value":4129},"我们看到他们共同执行了 builder.ConfigurePlayGround();",{"type":597,"tag":700,"props":4131,"children":4133},{"id":4132},"为什么这样设计",[4134],{"type":602,"value":4135},"为什么这样设计?",{"type":597,"tag":1136,"props":4137,"children":4138},{},[4139,4150],{"type":597,"tag":1140,"props":4140,"children":4141},{},[4142,4144],{"type":602,"value":4143},"为了模块间不产生依赖,例如用户表,迁移dbcontext中使用了IdentityUser,而运行的dbcontext使用了appuser进行了对其的映射,",{"type":597,"tag":768,"props":4145,"children":4148},{"href":4146,"rel":4147},"https://github.com/abpframework/abp/issues/1998",[772],[4149],{"type":602,"value":4146},{"type":597,"tag":1140,"props":4151,"children":4152},{},[4153,4155],{"type":602,"value":4154},"如何为user添加属性.",{"type":597,"tag":768,"props":4156,"children":4159},{"href":4157,"rel":4158},"https://github.com/abpframework/abp/issues/2453",[772],[4160],{"type":602,"value":4157},{"type":597,"tag":2243,"props":4162,"children":4164},{"id":4163},"如何共用user",[4165],{"type":602,"value":4163},{"type":597,"tag":598,"props":4167,"children":4168},{},[4169],{"type":602,"value":4170},"我们来看下定义的Iuser接口",{"type":597,"tag":605,"props":4172,"children":4174},{"code":4173},"    public interface IUser : IAggregateRoot\u003CGuid>, IMultiTenant\n    {\n        string UserName { get; }\n\n        [CanBeNull]\n        string Email { get; }\n\n        [CanBeNull]\n        string Name  { get; }\n\n        [CanBeNull]\n        string Surname { get; }\n\n        bool EmailConfirmed { get; }\n\n        [CanBeNull]\n        string PhoneNumber { get; }\n\n        bool PhoneNumberConfirmed { get; }\n    }\n",[4175],{"type":597,"tag":610,"props":4176,"children":4177},{"__ignoreMap":591},[4178],{"type":602,"value":4173},{"type":597,"tag":598,"props":4180,"children":4181},{},[4182],{"type":602,"value":4183},"dbcontext中的配置字段",{"type":597,"tag":605,"props":4185,"children":4187},{"code":4186},"        public static void ConfigureAbpUser\u003CTUser>(this EntityTypeBuilder\u003CTUser> b)\n            where TUser : class, IUser\n        {\n            b.Property(u => u.TenantId).HasColumnName(nameof(IUser.TenantId));\n            b.Property(u => u.UserName).IsRequired().HasMaxLength(AbpUserConsts.MaxUserNameLength).HasColumnName(nameof(IUser.UserName));\n            b.Property(u => u.Email).IsRequired().HasMaxLength(AbpUserConsts.MaxEmailLength).HasColumnName(nameof(IUser.Email));\n            b.Property(u => u.Name).HasMaxLength(AbpUserConsts.MaxNameLength).HasColumnName(nameof(IUser.Name));\n            b.Property(u => u.Surname).HasMaxLength(AbpUserConsts.MaxSurnameLength).HasColumnName(nameof(IUser.Surname));\n            b.Property(u => u.EmailConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.EmailConfirmed));\n            b.Property(u => u.PhoneNumber).HasMaxLength(AbpUserConsts.MaxPhoneNumberLength).HasColumnName(nameof(IUser.PhoneNumber));\n            b.Property(u => u.PhoneNumberConfirmed).HasDefaultValue(false).HasColumnName(nameof(IUser.PhoneNumberConfirmed));\n        }\n",[4188],{"type":597,"tag":610,"props":4189,"children":4190},{"__ignoreMap":591},[4191],{"type":602,"value":4186},{"type":597,"tag":598,"props":4193,"children":4194},{},[4195,4197],{"type":602,"value":4196},"dbcontext中的user表是如何创建,更新和使用的..",{"type":597,"tag":610,"props":4198,"children":4200},{"className":4199},[],[4201],{"type":602,"value":4202},"UserLookupService.cs",{"type":597,"tag":598,"props":4204,"children":4205},{},[4206,4208],{"type":602,"value":4207},"先看下查找,其中",{"type":597,"tag":610,"props":4209,"children":4211},{"className":4210},[],[4212],{"type":602,"value":4213},"IdentityUserRepositoryExternalUserLookupServiceProvider : IExternalUserLookupServiceProvider,",{"type":597,"tag":605,"props":4215,"children":4217},{"code":4216}," public async Task\u003CTUser> FindByIdAsync(Guid id, CancellationToken cancellationToken = default)\n        {\n            var localUser = await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n\n            if (ExternalUserLookupServiceProvider == null)\n            {\n                return localUser;\n            }\n\n            if (SkipExternalLookupIfLocalUserExists && localUser != null)\n            {\n                return localUser;\n            }\n\n            IUserData externalUser;\n\n            try\n            {\n                externalUser = await ExternalUserLookupServiceProvider.FindByIdAsync(id, cancellationToken);\n                if (externalUser == null)\n                {\n                    if (localUser != null)\n                    {\n                        //TODO: Instead of deleting, should be make it inactive or something like that?\n                        await WithNewUowAsync(() => _userRepository.DeleteAsync(localUser, cancellationToken: cancellationToken));\n                    }\n\n                    return null;\n                }\n            }\n            catch (Exception ex)\n            {\n                Logger.LogException(ex);\n                return localUser;\n            }\n\n            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n\n            return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n        }\n",[4218],{"type":597,"tag":610,"props":4219,"children":4220},{"__ignoreMap":591},[4221],{"type":602,"value":4216},{"type":597,"tag":598,"props":4223,"children":4224},{},[4225],{"type":602,"value":4226},"根据上面代码可见,如果找不到该用户..会自动创建一个,如何继承了IUpdateUserData则会更新",{"type":597,"tag":605,"props":4228,"children":4230},{"code":4229},"            if (localUser == null)\n            {\n                await WithNewUowAsync(() => _userRepository.InsertAsync(CreateUser(externalUser), cancellationToken: cancellationToken));\n                return await _userRepository.FindAsync(id, cancellationToken: cancellationToken);\n            }\n\n            if (localUser is IUpdateUserData && ((IUpdateUserData)localUser).Update(externalUser))\n            {\n                await WithNewUowAsync(() => _userRepository.UpdateAsync(localUser, cancellationToken: cancellationToken));\n            }\n            else\n            {\n                return localUser;\n            }\n",[4231],{"type":597,"tag":610,"props":4232,"children":4233},{"__ignoreMap":591},[4234],{"type":602,"value":4229},{"type":597,"tag":598,"props":4236,"children":4237},{},[4238],{"type":602,"value":4239},"更新还可以通过eventbus",{"type":597,"tag":605,"props":4241,"children":4243},{"code":4242},"    public class BlogUserSynchronizer :\n        IDistributedEventHandler\u003CEntityUpdatedEto\u003CUserEto>>,\n        ITransientDependency\n    {\n        protected IBlogUserRepository UserRepository { get; }\n        protected IBlogUserLookupService UserLookupService { get; }\n\n        public BlogUserSynchronizer(\n            IBlogUserRepository userRepository, \n            IBlogUserLookupService userLookupService)\n        {\n            UserRepository = userRepository;\n            UserLookupService = userLookupService;\n        }\n\n        public async Task HandleEventAsync(EntityUpdatedEto\u003CUserEto> eventData)\n        {\n            var user = await UserRepository.FindAsync(eventData.Entity.Id);\n            if (user == null)\n            {\n                user = await UserLookupService.FindByIdAsync(eventData.Entity.Id);\n                if (user == null)\n                {\n                    return;\n                }\n            }\n\n            if (user.Update(eventData.Entity))\n            {\n                await UserRepository.UpdateAsync(user);\n            }\n        }\n    }\n",[4244],{"type":597,"tag":610,"props":4245,"children":4246},{"__ignoreMap":591},[4247],{"type":602,"value":4242},{"type":597,"tag":2243,"props":4249,"children":4251},{"id":4250},"如何给identityuser添加额外的属性",[4252],{"type":602,"value":4253},"如何给IdentityUser添加额外的属性",{"type":597,"tag":700,"props":4255,"children":4257},{"id":4256},"extra-properties",[4258],{"type":602,"value":4259},"Extra Properties",{"type":597,"tag":598,"props":4261,"children":4262},{},[4263],{"type":602,"value":4264},"首先IdentityUser已经被定义,虽然我们可以通过dbcontext配置修改数据表的字段,,但是不能被映射,所以有了Extra Properties",{"type":597,"tag":598,"props":4266,"children":4267},{},[4268],{"type":597,"tag":768,"props":4269,"children":4272},{"href":4270,"rel":4271},"https://docs.abp.io/zh-Hans/abp/latest/Customizing-Application-Modules-Extending-Entities",[772],[4273],{"type":602,"value":4270},{"type":597,"tag":700,"props":4275,"children":4277},{"id":4276},"映射",[4278],{"type":602,"value":4276},{"type":597,"tag":598,"props":4280,"children":4281},{},[4282],{"type":602,"value":4283},"会在数据库中创建字段",{"type":597,"tag":598,"props":4285,"children":4286},{},[4287],{"type":597,"tag":610,"props":4288,"children":4290},{"className":4289},[],[4291],{"type":602,"value":4292},"AppUser.cs",{"type":597,"tag":605,"props":4294,"children":4296},{"code":4295},"        public virtual string Sex { get; private set; }\n\n        private AppUser()\n        {\n\n        }\n",[4297],{"type":597,"tag":610,"props":4298,"children":4299},{"__ignoreMap":591},[4300],{"type":602,"value":4295},{"type":597,"tag":598,"props":4302,"children":4303},{},[4304],{"type":597,"tag":610,"props":4305,"children":4307},{"className":4306},[],[4308],{"type":602,"value":4116},{"type":597,"tag":605,"props":4310,"children":4312},{"code":4311},"            builder.Entity\u003CAppUser>(b =>\n            {\n                b.ToTable(AbpIdentityDbProperties.DbTablePrefix + \"Users\"); //Sharing the same table \"AbpUsers\" with the IdentityUser\n\n                b.ConfigureByConvention();\n                b.ConfigureAbpUser();\n\n                /* Configure mappings for your additional properties\n                 * Also see the PlayGroundEfCoreEntityExtensionMappings class\n                 */\n\n                b.Property(x => x.Sex).HasMaxLength(128);\n            });\n",[4313],{"type":597,"tag":610,"props":4314,"children":4315},{"__ignoreMap":591},[4316],{"type":602,"value":4311},{"type":597,"tag":598,"props":4318,"children":4319},{},[4320],{"type":597,"tag":610,"props":4321,"children":4323},{"className":4322},[],[4324],{"type":602,"value":4325},"PlayGroundEfCoreEntityExtensionMappings.cs",{"type":597,"tag":605,"props":4327,"children":4329},{"code":4328},"       public static void Configure()\n        {\n            PlayGroundModulePropertyConfigurator.Configure();\n\n            OneTimeRunner.Run(() =>\n            {\n                /* You can configure entity extension properties for the\n                 * entities defined in the used modules.\n                 *\n                 * The properties defined here becomes table fields.\n                 * If you want to use the ExtraProperties dictionary of the entity\n                 * instead of creating a new field, then define the property in the\n                 * PlayGroundDomainObjectExtensions class.\n                 *\n                 * Example:\n                 *\n                 * ObjectExtensionManager.Instance\n                 *    .MapEfCoreProperty\u003CIdentityUser, string>(\n                 *        \"MyProperty\",\n                 *        b => b.HasMaxLength(128)\n                 *    );\n                 *\n                 * See the documentation for more:\n                 * https://docs.abp.io/en/abp/latest/Customizing-Application-Modules-Extending-Entities\n                 */\n\n                ObjectExtensionManager.Instance\n                      .MapEfCoreProperty\u003CIdentityUser, string>(\n                  nameof(AppUser.Sex),\n                  b => b.HasMaxLength(128)\n                      );\n            });\n        }\n",[4330],{"type":597,"tag":610,"props":4331,"children":4332},{"__ignoreMap":591},[4333],{"type":602,"value":4328},{"type":597,"tag":598,"props":4335,"children":4336},{},[4337],{"type":602,"value":4338},"我们来看看生成的迁移表",{"type":597,"tag":605,"props":4340,"children":4342},{"code":4341},"    public partial class Added_Sex_T_User : Migration\n    {\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.AddColumn\u003Cstring>(\n                name: \"Sex\",\n                table: \"AbpUsers\",\n                maxLength: 128,\n                nullable: true);\n        }\n\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropColumn(\n                name: \"Sex\",\n                table: \"AbpUsers\");\n        }\n    }\n",[4343],{"type":597,"tag":610,"props":4344,"children":4345},{"__ignoreMap":591},[4346],{"type":602,"value":4341},{"type":597,"tag":598,"props":4348,"children":4349},{},[4350],{"type":597,"tag":1874,"props":4351,"children":4354},{"alt":4352,"src":4353},"image-20200714123314743","/images/2020-07-05-abp-database-migration/image-20200714123314743.png",[],{"type":597,"tag":598,"props":4356,"children":4357},{},[4358],{"type":602,"value":4359},"它时如何被添加到迁移dbcontext中的",{"type":597,"tag":598,"props":4361,"children":4362},{},[4363],{"type":597,"tag":610,"props":4364,"children":4366},{"className":4365},[],[4367],{"type":602,"value":4368},"AbpEntityTypeBuilderExtensions.cs",{"type":597,"tag":605,"props":4370,"children":4372},{"code":4371},"        public static void ConfigureByConvention(this EntityTypeBuilder b)\n        {\n            b.TryConfigureConcurrencyStamp();\n            b.TryConfigureExtraProperties();  //配置扩展属性,就是ExtraProperties字段\n            b.TryConfigureObjectExtensions();//就是这里对象扩展,ObjectExtensionManager.Instance添加属性,然后从这里再根据类型读取出来\n            b.TryConfigureMayHaveCreator();\n            b.TryConfigureMustHaveCreator();\n            b.TryConfigureSoftDelete();\n            b.TryConfigureDeletionTime();\n            b.TryConfigureDeletionAudited();\n            b.TryConfigureCreationTime();\n            b.TryConfigureLastModificationTime();\n            b.TryConfigureModificationAudited();\n            b.TryConfigureMultiTenant();\n        }\n",[4373],{"type":597,"tag":610,"props":4374,"children":4375},{"__ignoreMap":591},[4376],{"type":602,"value":4371},{"type":597,"tag":700,"props":4378,"children":4380},{"id":4379},"同步",[4381],{"type":602,"value":4379},{"type":597,"tag":598,"props":4383,"children":4384},{},[4385,4387,4392,4394,4400,4402,4407],{"type":602,"value":4386},"你可以创建",{"type":597,"tag":1347,"props":4388,"children":4389},{},[4390],{"type":602,"value":4391},"自己的表",{"type":602,"value":4393},"来存储属性,而不是创建新实体并映射到同一表. 你通常复制原始实体的一些值. 例如可以将 ",{"type":597,"tag":610,"props":4395,"children":4397},{"className":4396},[],[4398],{"type":602,"value":4399},"Name",{"type":602,"value":4401}," 字段添加到你自己的表中,它是原表中 ",{"type":597,"tag":610,"props":4403,"children":4405},{"className":4404},[],[4406],{"type":602,"value":4399},{"type":602,"value":4408}," 字段的副本.",{"type":597,"tag":598,"props":4410,"children":4411},{},[4412,4414,4421],{"type":602,"value":4413},"在这种情况下你不需要处理迁移问题,但是需要处理数据复制问题. 当重复的值发生变化时,你应该在表中同步相同的变化. 你可以使用本地或分布式",{"type":597,"tag":768,"props":4415,"children":4418},{"href":4416,"rel":4417},"https://docs.abp.io/zh-Hans/abp/latest/Event-Bus",[772],[4419],{"type":602,"value":4420},"事件总线",{"type":602,"value":4422},"订阅原始实体的更改事件. 这是根据来自另一个微服务的数据推荐的方法,特别是如果它们有单独的物理数据库(你可以在网络中搜索关于微服务设计的数据共享,这是一个广泛的主题).",{"title":591,"searchDepth":673,"depth":673,"links":4424},[4425,4426,4427,4428],{"id":4132,"depth":673,"text":4135},{"id":4256,"depth":673,"text":4259},{"id":4276,"depth":673,"text":4276},{"id":4379,"depth":673,"text":4379},"content:dotnet:2020-07-05-abp-database-user.md","dotnet/2020-07-05-abp-database-user.md","2020-07-05",{"_path":98,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":97,"description":4433,"stitle":4434,"body":4435,"_type":675,"_id":4633,"_source":677,"_file":4634,"_extension":679,"date":4635},"DotHass.Lobby.Domain\\IdentityServer\\IdentityServerDataSeedContributor.cs 中 CreateClientsAsync()","IdentityServer使用指南",{"type":594,"children":4436,"toc":4631},[4437,4441,4446,4451,4459,4477,4486,4518,4526,4531,4536,4544,4549,4557,4562,4574,4582,4590,4594,4602,4614,4626],{"type":597,"tag":598,"props":4438,"children":4439},{},[4440],{"type":602,"value":4433},{"type":597,"tag":598,"props":4442,"children":4443},{},[4444],{"type":602,"value":4445},"会在dataseed的时候生成默认数据",{"type":597,"tag":598,"props":4447,"children":4448},{},[4449],{"type":602,"value":4450},"When I try to send a HTTPS POST request from a desktop (Servers are in production environment) the following message is displayed inside the console :",{"type":597,"tag":605,"props":4452,"children":4454},{"code":4453},"Error: unable to verify the first certificate\n",[4455],{"type":597,"tag":610,"props":4456,"children":4457},{"__ignoreMap":591},[4458],{"type":602,"value":4453},{"type":597,"tag":598,"props":4460,"children":4461},{},[4462,4464,4470,4472],{"type":602,"value":4463},"After: ",{"type":597,"tag":610,"props":4465,"children":4467},{"className":4466},[],[4468],{"type":602,"value":4469},"Postman -> Preferences -> General -> SSL certificate validation -> OFF",{"type":602,"value":4471}," ",{"type":597,"tag":1347,"props":4473,"children":4474},{},[4475],{"type":602,"value":4476},"it works",{"type":597,"tag":598,"props":4478,"children":4479},{},[4480],{"type":597,"tag":768,"props":4481,"children":4484},{"href":4482,"rel":4483},"https://localhost:5000/.well-known/openid-configuration",[772],[4485],{"type":602,"value":4482},{"type":597,"tag":2027,"props":4487,"children":4488},{},[4489,4507],{"type":597,"tag":1140,"props":4490,"children":4491},{},[4492,4498,4502],{"type":597,"tag":768,"props":4493,"children":4496},{"href":4494,"rel":4495},"http://localhost:5000/connect/token",[772],[4497],{"type":602,"value":4494},{"type":597,"tag":4499,"props":4500,"children":4501},"br",{},[],{"type":597,"tag":1874,"props":4503,"children":4506},{"alt":4504,"src":4505},"image-20200613165200371","/images/2020-06-11-IdentityServer-use/image-20200613165200371.png",[],{"type":597,"tag":1140,"props":4508,"children":4509},{},[4510,4516],{"type":597,"tag":768,"props":4511,"children":4514},{"href":4512,"rel":4513},"http://localhost:5000/connect/userinfo",[772],[4515],{"type":602,"value":4512},{"type":602,"value":4517}," 将type设置成bearer token,token填入上面获得的access_token",{"type":597,"tag":598,"props":4519,"children":4520},{},[4521],{"type":597,"tag":1874,"props":4522,"children":4525},{"alt":4523,"src":4524},"image-20200613165246959","/images/2020-06-11-IdentityServer-use/image-20200613165246959.png",[],{"type":597,"tag":598,"props":4527,"children":4528},{},[4529],{"type":602,"value":4530},"3.注意发布release后.配置表中的  ..如果配置错误将会认证失败",{"type":597,"tag":598,"props":4532,"children":4533},{},[4534],{"type":602,"value":4535},"appsettings.json",{"type":597,"tag":605,"props":4537,"children":4539},{"code":4538},"{\n  \"App\": {\n    \"SelfUrl\": \"http://localhost:5000\"\n  },\n  \"ConnectionStrings\": {\n    \"Default\": \"Server=localhost;User Id=root;Password=123456;Database=dothass.blog\"\n  },\n  \"AuthServer\": {\n    \"Authority\": \"http://localhost:5000\"\n  },\n  \"IdentityServer\": {\n    \"Clients\": {\n      \"Blog_App\": {\n        \"ClientId\": \"Blog_App\"\n      }\n    }\n  }\n}\n",[4540],{"type":597,"tag":610,"props":4541,"children":4542},{"__ignoreMap":591},[4543],{"type":602,"value":4538},{"type":597,"tag":598,"props":4545,"children":4546},{},[4547],{"type":602,"value":4548},"appsettings.Development.json",{"type":597,"tag":605,"props":4550,"children":4552},{"code":4551},"{\n  \"App\": {\n    \"SelfUrl\": \"https://localhost:44377\"\n  },\n  \"AuthServer\": {\n    \"Authority\": \"https://localhost:44377\"\n  }\n}\n",[4553],{"type":597,"tag":610,"props":4554,"children":4555},{"__ignoreMap":591},[4556],{"type":602,"value":4551},{"type":597,"tag":598,"props":4558,"children":4559},{},[4560],{"type":602,"value":4561},"还要注意请求的域名是否一样,127.0.0.1或者localhost...可能返回结果即使一样.但是不能授权.",{"type":597,"tag":598,"props":4563,"children":4564},{},[4565,4567],{"type":602,"value":4566},"使用",{"type":597,"tag":768,"props":4568,"children":4571},{"href":4569,"rel":4570},"http://jwt.calebb.net/%E8%A7%A3%E6%9E%90%E7%9C%8B%E4%B8%8Baccess_token",[772],[4572],{"type":602,"value":4573},"http://jwt.calebb.net/解析看下access_token",{"type":597,"tag":605,"props":4575,"children":4577},{"code":4576},"{\n alg: \"RS256\",\n kid: \"1oauLjO2TtmvAH-4A7CCLg\",\n typ: \"at+jwt\"\n}.\n{\n nbf: 1592054993,\n exp: 1623590993,\n iss: \"http://127.0.0.1:5000\",\n aud: \"Blog\",\n client_id: \"Blog_App\",\n sub: \"fa9626f7-0f6f-6158-2afd-39f5a7f6d03f\",\n auth_time: 1592054993,\n idp: \"local\",\n role: \"admin\",\n name: \"admin\",\n email: \"admin@abp.io\",\n email_verified: false,\n scope: [\n  \"address\",\n  \"email\",\n  \"openid\",\n  \"phone\",\n  \"profile\",\n  \"role\",\n  \"Blog\",\n  \"offline_access\"\n ],\n amr: [\n  \"pwd\"\n ]\n}.\n",[4578],{"type":597,"tag":610,"props":4579,"children":4580},{"__ignoreMap":591},[4581],{"type":602,"value":4576},{"type":597,"tag":605,"props":4583,"children":4585},{"code":4584},"    {\n alg: \"RS256\",\n kid: \"1oauLjO2TtmvAH-4A7CCLg\",\n typ: \"at+jwt\"\n}.\n{\n nbf: 1592055396,\n exp: 1623591396,\n iss: \"http://localhost:5000\",\n aud: \"Blog\",\n client_id: \"Blog_App\",\n sub: \"fa9626f7-0f6f-6158-2afd-39f5a7f6d03f\",\n auth_time: 1592055396,\n idp: \"local\",\n role: \"admin\",\n name: \"admin\",\n email: \"admin@abp.io\",\n email_verified: false,\n scope: [\n  \"address\",\n  \"email\",\n  \"openid\",\n  \"phone\",\n  \"profile\",\n  \"role\",\n  \"Blog\",\n  \"offline_access\"\n ],\n amr: [\n  \"pwd\"\n ]\n}.\n",[4586],{"type":597,"tag":610,"props":4587,"children":4588},{"__ignoreMap":591},[4589],{"type":602,"value":4584},{"type":597,"tag":2243,"props":4591,"children":4592},{"id":3426},[4593],{"type":602,"value":3426},{"type":597,"tag":605,"props":4595,"children":4597},{"code":4596},"System.InvalidOperationException: IDX20803: Unable to obtain configuration from: '[PII is hidden. For more details, see https://aka.ms/IdentityModel/PII.]'.\n ---> System.IO.IOException: IDX20804: Unable to retrieve document from: '[PII is hidden. For more details, see https://aka.ms/IdentityModel/PII.]'.\n ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\n ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.\n   at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\n   at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\n   at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\n   at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\n",[4598],{"type":597,"tag":610,"props":4599,"children":4600},{"__ignoreMap":591},[4601],{"type":602,"value":4596},{"type":597,"tag":598,"props":4603,"children":4604},{},[4605,4607,4612],{"type":602,"value":4606},"可以看出来这些问题是和SSL证书有关，经过排查，发现IdentityServer4配置中：使用了",{"type":597,"tag":1347,"props":4608,"children":4609},{},[4610],{"type":602,"value":4611},"IP",{"type":602,"value":4613},"的形式配置的授权地址，但是SSL证书是以域名形式申请的，这就造成了SSL证书不能验证通过。",{"type":597,"tag":598,"props":4615,"children":4616},{},[4617,4619,4624],{"type":602,"value":4618},"解决方法：",{"type":597,"tag":1347,"props":4620,"children":4621},{},[4622],{"type":602,"value":4623},"将授权地址配置为域名:端口的形式",{"type":602,"value":4625},"，完美解决上述问题。注意域名为SSL证书申请时用到的域名。",{"type":597,"tag":598,"props":4627,"children":4628},{},[4629],{"type":602,"value":4630},"localhost使用的是开发证书,也是类似域名,127.0.0.1也是有问题的",{"title":591,"searchDepth":673,"depth":673,"links":4632},[],"content:dotnet:2020-06-11-IdentityServer-use.md","dotnet/2020-06-11-IdentityServer-use.md","2020-06-11",1710779035445]