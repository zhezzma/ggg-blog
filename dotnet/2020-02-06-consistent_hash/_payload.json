[{"data":1,"prerenderedAt":922},["Reactive",2],{"content-query-qhZGqewbM2":3,"content-navigation-8C37fagqQL":340},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":334,"_id":335,"_source":336,"_file":337,"_extension":338,"date":339},"/dotnet/2020-02-06-consistent_hash","dotnet",false,"","一致性hash算法","应用场景负载均衡和分布式场景随着业务的扩展，流量的剧增，单体项目逐渐划分为分布式系统。对于经常使用的数据，我们可以使用Redis作为缓存机制，减少数据层的压力。因此，重构后的系统架构如下图所示：\n优化最简单的策略就是，把常用的数据保存到Redis中，为了实现高可用使用了3台Redis（没有设置集群，集群至少要6台）。每次Redis请求会随机发送到其中一台，但是这种策略会引发如下两个问题：同一份数据可能在多个Redis数据库，造成数据冗余某一份数据在其中一台Redis数据库已存在，但是再次访问Redis数据库，并没有命中数据已存在的库。无法保证对相同的key的所有访问都发送到相同的Redis中要",{"type":11,"children":12,"toc":324},"root",[13,21,40,51,56,71,84,89,94,99,106,115,120,130,142,147,157,163,168,175,180,188,193,199,204,214,219,225,230,235,244,263,268,276,301],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"应用场景",[19],{"type":20,"value":17},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25,32,34],{"type":14,"tag":26,"props":27,"children":29},"code",{"className":28},[],[30],{"type":20,"value":31},"负载均衡",{"type":20,"value":33},"和",{"type":14,"tag":26,"props":35,"children":37},{"className":36},[],[38],{"type":20,"value":39},"分布式场景",{"type":14,"tag":22,"props":41,"children":42},{},[43,45],{"type":20,"value":44},"随着业务的扩展，流量的剧增，单体项目逐渐划分为分布式系统。对于经常使用的数据，我们可以使用Redis作为缓存机制，减少数据层的压力。因此，重构后的系统架构如下图所示：\n",{"type":14,"tag":46,"props":47,"children":50},"img",{"alt":48,"src":49},"简单架构","/images/2020-02-06-Consistent_Hash/3560038521-5c37267165ddf_articlex.png",[],{"type":14,"tag":22,"props":52,"children":53},{},[54],{"type":20,"value":55},"优化最简单的策略就是，把常用的数据保存到Redis中，为了实现高可用使用了3台Redis（没有设置集群，集群至少要6台）。每次Redis请求会随机发送到其中一台，但是这种策略会引发如下两个问题：",{"type":14,"tag":57,"props":58,"children":59},"ul",{},[60,66],{"type":14,"tag":61,"props":62,"children":63},"li",{},[64],{"type":20,"value":65},"同一份数据可能在多个Redis数据库，造成数据冗余",{"type":14,"tag":61,"props":67,"children":68},{},[69],{"type":20,"value":70},"某一份数据在其中一台Redis数据库已存在，但是再次访问Redis数据库，并没有命中数据已存在的库。无法保证对相同的key的所有访问都发送到相同的Redis中",{"type":14,"tag":22,"props":72,"children":73},{},[74,76,82],{"type":20,"value":75},"要解决上述的问题，我们需要稍稍改变一些key存入Redis的规则：",{"type":14,"tag":77,"props":78,"children":79},"strong",{},[80],{"type":20,"value":81},"使用hash算法",{"type":20,"value":83},"\n例如，有三台Redis，对于每次的访问都可以通过计算hash来求得hash值。\n如公式 h=hash(key)%3，我们把Redis编号设置成0,1,2来保存对应hash计算出来的值，h的值等于Redis对应的编号。\n但是hash算法也会面临容错性和扩展性的问题。容错性是指当系统中的某个服务出现问题时，不能影响其他系统。扩展性是指当加入新的服务器后，整个系统能正确高效运行。",{"type":14,"tag":22,"props":85,"children":86},{},[87],{"type":20,"value":88},"现假设有一台Redis服务器宕机了，那么为了填补空缺，要将宕机的服务器从编号列表中移除，后面的服务器按顺序前移一位并将其编号值减一，此时每个key就要按h = Hash(key) % 2重新计算。",{"type":14,"tag":22,"props":90,"children":91},{},[92],{"type":20,"value":93},"同样，如果新增一台服务器，规则也同样需要重新计算，h = Hash(key) % 4。因此，系统中如果有服务器更变，会直接影响到Hash值，大量的key会重定向到其他服务器中，造成缓存命中率降低，而这种情况在分布式系统中是十分糟糕的。",{"type":14,"tag":22,"props":95,"children":96},{},[97],{"type":20,"value":98},"一个设计良好的分布式哈希方案应该具有良好的单调性，即服务节点的变更不会造成大量的哈希重定位。一致性哈希算法由此而生~",{"type":14,"tag":100,"props":101,"children":103},"h2",{"id":102},"_2-一致性哈希算法",[104],{"type":20,"value":105},"2 一致性哈希算法",{"type":14,"tag":107,"props":108,"children":109},"blockquote",{},[110],{"type":14,"tag":22,"props":111,"children":112},{},[113],{"type":20,"value":114},"一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中K是关键字的数量， n是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。",{"type":14,"tag":22,"props":116,"children":117},{},[118],{"type":20,"value":119},"简单的说，一致性哈希是将整个哈希值空间组织成一个虚拟的圆环，如假设哈希函数H的值空间为0-2^32-1（哈希值是32位无符号整形），整个哈希空间环如下：",{"type":14,"tag":22,"props":121,"children":122},{},[123,128],{"type":14,"tag":46,"props":124,"children":127},{"alt":125,"src":126},"哈希环","/images/2020-02-06-Consistent_Hash/1926833502-5c372671647ce_articlex.png",[],{"type":20,"value":129},"\n整个空间按顺时针方向组织，0和2^32-1在零点中方向重合。",{"type":14,"tag":22,"props":131,"children":132},{},[133,135,140],{"type":20,"value":134},"接下来，把服务器按照IP或主机名作为关键字进行哈希，这样就能确定其在哈希环的位置。\n",{"type":14,"tag":46,"props":136,"children":139},{"alt":137,"src":138},"哈希环2","/images/2020-02-06-Consistent_Hash/1992706399-5c37267165131_articlex.png",[],{"type":20,"value":141},"\n然后，我们就可以使用哈希函数H计算值为key的数据在哈希环的具体位置h，根据h确定在环中的具体位置，从此位置沿顺时针滚动，遇到的第一台服务器就是其应该定位到的服务器。",{"type":14,"tag":22,"props":143,"children":144},{},[145],{"type":20,"value":146},"例如我们有A、B、C、D四个数据对象，经过哈希计算后，在环空间上的位置如下：",{"type":14,"tag":22,"props":148,"children":149},{},[150,155],{"type":14,"tag":46,"props":151,"children":154},{"alt":152,"src":153},"哈希环3","/images/2020-02-06-Consistent_Hash/2362548025-5c3726711599a_articlex.png",[],{"type":20,"value":156},"\n根据一致性哈希算法，数据A会被定为到Server 1上，数据B被定为到Server 2上，而C、D被定为到Server 3上。",{"type":14,"tag":100,"props":158,"children":160},{"id":159},"_3-容错性和扩展性",[161],{"type":20,"value":162},"3 容错性和扩展性",{"type":14,"tag":22,"props":164,"children":165},{},[166],{"type":20,"value":167},"那么使用一致性哈希算法的容错性和扩展性如何呢？",{"type":14,"tag":169,"props":170,"children":172},"h3",{"id":171},"_31-容错性",[173],{"type":20,"value":174},"3.1 容错性",{"type":14,"tag":22,"props":176,"children":177},{},[178],{"type":20,"value":179},"假如RedisService2宕机了，那么会怎样呢？",{"type":14,"tag":22,"props":181,"children":182},{},[183],{"type":14,"tag":46,"props":184,"children":187},{"alt":185,"src":186},"Redis2宕机","/images/2020-02-06-Consistent_Hash/2142503411-5c37267117f14_articlex.png",[],{"type":14,"tag":22,"props":189,"children":190},{},[191],{"type":20,"value":192},"那么，数据B对应的节点保存到RedisService3中。因此，其中一台宕机后，干扰的只有前面的数据（原数据被保存到顺时针的下一个服务器），而不会干扰到其他的数据。",{"type":14,"tag":169,"props":194,"children":196},{"id":195},"_32-扩展性",[197],{"type":20,"value":198},"3.2 扩展性",{"type":14,"tag":22,"props":200,"children":201},{},[202],{"type":20,"value":203},"下面考虑另一种情况，假如增加一台服务器Redis4，具体位置如下图所示：",{"type":14,"tag":22,"props":205,"children":206},{},[207,212],{"type":14,"tag":46,"props":208,"children":211},{"alt":209,"src":210},"RedisServicee4","/images/2020-02-06-Consistent_Hash/1713186145-5c37267126a94_articlex.png",[],{"type":20,"value":213},"\n原本数据C是保存到Redis3中，但由于增加了Redis4，数据C被保存到Redis4中。干扰的也只有Redis3而已，其他数据不会受到影响。",{"type":14,"tag":22,"props":215,"children":216},{},[217],{"type":20,"value":218},"因此，一致性哈希算法对于节点的增减都只需重定位换空间的一小部分即可，具有较好的容错性和可扩展性",{"type":14,"tag":100,"props":220,"children":222},{"id":221},"_4-虚拟节点",[223],{"type":20,"value":224},"4 虚拟节点",{"type":14,"tag":22,"props":226,"children":227},{},[228],{"type":20,"value":229},"前面部分都是讲述到Redis节点较多和节点分布较为均衡的情况，如果节点较少就会出现节点分布不均衡造成数据倾斜问题。",{"type":14,"tag":22,"props":231,"children":232},{},[233],{"type":20,"value":234},"例如，我们的的系统有两台Redis，分布的环位置如下图所示：",{"type":14,"tag":22,"props":236,"children":237},{},[238,242],{"type":14,"tag":46,"props":239,"children":241},{"alt":125,"src":240},"/images/2020-02-06-Consistent_Hash/2099070812-5c37267114872_articlex.png",[],{"type":20,"value":243},"\n这会产生一种情况，Redis4的hash范围比Redis3的hash范围大，导致数据大部分都存储在Redis4中，数据存储不平衡。",{"type":14,"tag":22,"props":245,"children":246},{},[247,249,254,256,261],{"type":20,"value":248},"为了解决这种数据存储不平衡的问题，一致性哈希算法引入了",{"type":14,"tag":77,"props":250,"children":251},{},[252],{"type":20,"value":253},"虚拟节点机制",{"type":20,"value":255},"，即对每个节点计算多个哈希值，每个计算结果位置都放置在对应节点中，这些节点",{"type":14,"tag":77,"props":257,"children":258},{},[259],{"type":20,"value":260},"称为虚拟节点",{"type":20,"value":262},"。",{"type":14,"tag":22,"props":264,"children":265},{},[266],{"type":20,"value":267},"具体做法可以在服务器IP或主机名的后面增加编号来实现，例如上面的情况，可以为每个服务节点增加三个虚拟节点，于是可以分为 RedisService1#1、 RedisService1#2、 RedisService1#3、 RedisService2#1、 RedisService2#2、 RedisService2#3，具体位置如下图所示：",{"type":14,"tag":22,"props":269,"children":270},{},[271],{"type":14,"tag":46,"props":272,"children":275},{"alt":273,"src":274},"虚拟节点","/images/2020-02-06-Consistent_Hash/4164216256-5c3726711ca88_articlex.png",[],{"type":14,"tag":22,"props":277,"children":278},{},[279,281,286,288,293,295,300],{"type":20,"value":280},"对于数据定位的hash算法仍然不变，只是增加了虚拟节点到实际节点的映射。例如，数据C保存到虚拟节点Redis1#2，实际上数据保存到Redis1中。这样，就能解决服务节点少时数据不平均的问题。在实际应用中，通常将虚拟节点数设置为",{"type":14,"tag":77,"props":282,"children":283},{},[284],{"type":20,"value":285},"32甚至更大",{"type":20,"value":287},"，因此即使",{"type":14,"tag":77,"props":289,"children":290},{},[291],{"type":20,"value":292},"很少的服务节点",{"type":20,"value":294},"也能做到相对",{"type":14,"tag":77,"props":296,"children":297},{},[298],{"type":20,"value":299},"均匀的数据分布",{"type":20,"value":262},{"type":14,"tag":57,"props":302,"children":303},{},[304,315],{"type":14,"tag":61,"props":305,"children":306},{},[307],{"type":14,"tag":308,"props":309,"children":313},"a",{"href":310,"rel":311},"https://github.com/tg123/ConsistentSharp",[312],"nofollow",[314],{"type":20,"value":310},{"type":14,"tag":61,"props":316,"children":317},{},[318],{"type":14,"tag":308,"props":319,"children":322},{"href":320,"rel":321},"https://en.wikipedia.org/wiki/Consistent_hashing",[312],[323],{"type":20,"value":320},{"title":7,"searchDepth":325,"depth":325,"links":326},2,[327,328,333],{"id":102,"depth":325,"text":105},{"id":159,"depth":325,"text":162,"children":329},[330,332],{"id":171,"depth":331,"text":174},3,{"id":195,"depth":331,"text":198},{"id":221,"depth":325,"text":224},"markdown","content:dotnet:2020-02-06-Consistent_Hash.md","content","dotnet/2020-02-06-Consistent_Hash.md","md","2020-02-06",[341,351,476,525,577,590,702],{"title":342,"_path":343,"children":344},"Art","/art",[345,348],{"title":346,"_path":347},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":349,"_path":350},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":352,"_path":353,"children":354},"Dotnet","/dotnet",[355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403,406,409,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473],{"title":356,"_path":357},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":359,"_path":360},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":362,"_path":363},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":365,"_path":366},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":368,"_path":369},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":371,"_path":372},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":374,"_path":375},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":377,"_path":378},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":380,"_path":381},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":383,"_path":384},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":386,"_path":387},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":389,"_path":390},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":392,"_path":393},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":395,"_path":396},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":398,"_path":399},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":401,"_path":402},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":404,"_path":405},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":407,"_path":408},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":8,"_path":4},{"title":411,"_path":412},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":414,"_path":415},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":417,"_path":418},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":420,"_path":421},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":423,"_path":424},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":426,"_path":427},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":429,"_path":430},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":432,"_path":433},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":435,"_path":436},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":438,"_path":439},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":441,"_path":442},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":444,"_path":445},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":447,"_path":448},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":450,"_path":451},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":453,"_path":454},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":456,"_path":457},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":459,"_path":460},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":462,"_path":463},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":465,"_path":466},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":468,"_path":469},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":471,"_path":472},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":474,"_path":475},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":477,"_path":478,"children":479},"Game","/game",[480,483,486,489,492,495,498,501,504,507,510,513,516,519,522],{"title":481,"_path":482},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":484,"_path":485},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":487,"_path":488},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":490,"_path":491},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":493,"_path":494},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":496,"_path":497},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":499,"_path":500},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":502,"_path":503},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":505,"_path":506},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":508,"_path":509},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":511,"_path":512},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":514,"_path":515},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":517,"_path":518},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":520,"_path":521},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":523,"_path":524},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":526,"_path":527,"children":528},"Gyj","/gyj",[529,532,535,538,541,544,547,550,553,556,559,562,565,568,571,574],{"title":530,"_path":531},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":533,"_path":534},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":536,"_path":537},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":539,"_path":540},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":542,"_path":543},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":545,"_path":546},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":548,"_path":549},"玩法","/gyj/2022-08-22-wanfa",{"title":551,"_path":552},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":554,"_path":555},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":557,"_path":558},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":560,"_path":561},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":563,"_path":564},"门派内容相关","/gyj/2022-11-17-sect",{"title":566,"_path":567},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":569,"_path":570},"种植","/gyj/2022-12-01-zhongzhi",{"title":572,"_path":573},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":575,"_path":576},"跑商","/gyj/2023-11-01-paoshang",{"title":578,"_path":579,"children":580},"Js","/js",[581,584,587],{"title":582,"_path":583},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":585,"_path":586},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":588,"_path":589},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":591,"_path":592,"children":593},"Tool","/tool",[594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699],{"title":595,"_path":596},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":598,"_path":599},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":601,"_path":602},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":604,"_path":605},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":607,"_path":608},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":610,"_path":611},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":613,"_path":614},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":616,"_path":617},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":619,"_path":620},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":622,"_path":623},"mac下brew 使用","/tool/2020-01-13-brew",{"title":625,"_path":626},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":628,"_path":629},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":631,"_path":632},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":634,"_path":635},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":637,"_path":638},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":640,"_path":641},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":643,"_path":644},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":646,"_path":647},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":649,"_path":650},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":652,"_path":653},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":655,"_path":656},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":658,"_path":659},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":661,"_path":662},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":664,"_path":665},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":667,"_path":668},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":670,"_path":671},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":673,"_path":674},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":676,"_path":677},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":679,"_path":680},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":682,"_path":683},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":685,"_path":686},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":688,"_path":689},"rider的使用","/tool/2022-08-02-rider-use",{"title":691,"_path":692},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":694,"_path":695},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":697,"_path":698},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":700,"_path":701},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":703,"_path":704,"children":705},"Unity","/unity",[706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832,835,838,841,844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901,904,907,910,913,916,919],{"title":707,"_path":708},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":710,"_path":711},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":713,"_path":714},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":716,"_path":717},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":719,"_path":720},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":722,"_path":723},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":725,"_path":726},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":728,"_path":729},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":731,"_path":732},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":734,"_path":735},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":737,"_path":738},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":740,"_path":741},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":743,"_path":744},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":746,"_path":747},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":749,"_path":750},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":752,"_path":753},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":755,"_path":756},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":758,"_path":759},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":761,"_path":762},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":764,"_path":765},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":767,"_path":768},"技能系统","/unity/2020-02-15-skill-system",{"title":770,"_path":771},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":773,"_path":774},"角色状态设计","/unity/2020-02-17-character-states",{"title":776,"_path":777},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":779,"_path":780},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":782,"_path":783},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":785,"_path":786},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":788,"_path":789},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":791,"_path":792},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":794,"_path":795},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":797,"_path":798},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":800,"_path":801},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":803,"_path":804},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":806,"_path":807},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":809,"_path":810},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":812,"_path":813},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":815,"_path":816},"unity的addressables","/unity/2020-09-12-addressables",{"title":818,"_path":819},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":821,"_path":822},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":824,"_path":825},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":827,"_path":828},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":830,"_path":831},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":833,"_path":834},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":836,"_path":837},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":839,"_path":840},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":842,"_path":843},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":845,"_path":846},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":848,"_path":849},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":851,"_path":852},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":854,"_path":855},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":857,"_path":858},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":860,"_path":861},"简单保存工具","/unity/2020-11-13-simple-save",{"title":863,"_path":864},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":866,"_path":867},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":869,"_path":870},"ability","/unity/2020-11-16-dotssample",{"title":872,"_path":873},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":875,"_path":876},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":878,"_path":879},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":881,"_path":882},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":884,"_path":885},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":887,"_path":888},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":890,"_path":891},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":893,"_path":894},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":896,"_path":897},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":899,"_path":900},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":902,"_path":903},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":905,"_path":906},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":908,"_path":909},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":911,"_path":912},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":914,"_path":915},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":917,"_path":918},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":920,"_path":921},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040738]