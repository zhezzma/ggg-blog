[{"data":1,"prerenderedAt":1009},["Reactive",2],{"content-query-wYaW2jjb6Z":3,"content-navigation-8C37fagqQL":427},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":421,"_id":422,"_source":423,"_file":424,"_extension":425,"date":426},"/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode","dotnet",false,"","守望先锋等FPS游戏的网络同步","在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。",{"type":11,"children":12,"toc":418},"root",[13,20,25,30,43,48,60,72,77,89,101,113,125,137,149,154,159,194,199,204,209,214,239,244,249,254,259,264,269,274,279,301,309,314],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":19,"value":29},"技术术语：",{"type":14,"tag":15,"props":31,"children":32},{},[33,35,41],{"type":19,"value":34},"1）",{"type":14,"tag":36,"props":37,"children":38},"strong",{},[39],{"type":19,"value":40},"Latency",{"type":19,"value":42},"：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。",{"type":14,"tag":15,"props":44,"children":45},{},[46],{"type":19,"value":47},"80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。",{"type":14,"tag":15,"props":49,"children":50},{},[51,53,58],{"type":19,"value":52},"2）",{"type":14,"tag":36,"props":54,"children":55},{},[56],{"type":19,"value":57},"Hit Box",{"type":19,"value":59},"：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。",{"type":14,"tag":15,"props":61,"children":62},{},[63,65,70],{"type":19,"value":64},"3）",{"type":14,"tag":36,"props":66,"children":67},{},[68],{"type":19,"value":69},"Tick Rate",{"type":19,"value":71},"：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。",{"type":14,"tag":15,"props":73,"children":74},{},[75],{"type":19,"value":76},"比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms",{"type":14,"tag":15,"props":78,"children":79},{},[80,82,87],{"type":19,"value":81},"4）",{"type":14,"tag":36,"props":83,"children":84},{},[85],{"type":19,"value":86},"Client Update Rate",{"type":19,"value":88},"：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。",{"type":14,"tag":15,"props":90,"children":91},{},[92,94,99],{"type":19,"value":93},"5）",{"type":14,"tag":36,"props":95,"children":96},{},[97],{"type":19,"value":98},"Framerate",{"type":19,"value":100},"：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS",{"type":14,"tag":15,"props":102,"children":103},{},[104,106,111],{"type":19,"value":105},"6）",{"type":14,"tag":36,"props":107,"children":108},{},[109],{"type":19,"value":110},"Refresh Rate",{"type":19,"value":112},"：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。",{"type":14,"tag":15,"props":114,"children":115},{},[116,118,123],{"type":19,"value":117},"7）",{"type":14,"tag":36,"props":119,"children":120},{},[121],{"type":19,"value":122},"Interpolation",{"type":19,"value":124},"：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。",{"type":14,"tag":15,"props":126,"children":127},{},[128,130,135],{"type":19,"value":129},"8）",{"type":14,"tag":36,"props":131,"children":132},{},[133],{"type":19,"value":134},"Extrapolation",{"type":19,"value":136},"：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。",{"type":14,"tag":15,"props":138,"children":139},{},[140,142,147],{"type":19,"value":141},"9）",{"type":14,"tag":36,"props":143,"children":144},{},[145],{"type":19,"value":146},"Lag Compensation",{"type":19,"value":148},"：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为\"Client Delay\"）可用下式给出：",{"type":14,"tag":15,"props":150,"children":151},{},[152],{"type":19,"value":153},"ClientDelay = (1/2 * Latency) + InterpolationDelay",{"type":14,"tag":15,"props":155,"children":156},{},[157],{"type":19,"value":158},"延迟补偿的实际操作步骤：",{"type":14,"tag":160,"props":161,"children":162},"ol",{},[163,169,174,179,184,189],{"type":14,"tag":164,"props":165,"children":166},"li",{},[167],{"type":19,"value":168},"Player A看到Player B向一个角落跑去",{"type":14,"tag":164,"props":170,"children":171},{},[172],{"type":19,"value":173},"Player A开枪，其客户端把这个操作发送给服务器",{"type":14,"tag":164,"props":175,"children":176},{},[177],{"type":19,"value":178},"假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作",{"type":14,"tag":164,"props":180,"children":181},{},[182],{"type":19,"value":183},"服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A's interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。",{"type":14,"tag":164,"props":185,"children":186},{},[187],{"type":19,"value":188},"服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：\n(1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)",{"type":14,"tag":164,"props":190,"children":191},{},[192],{"type":19,"value":193},"在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。",{"type":14,"tag":15,"props":195,"children":196},{},[197],{"type":19,"value":198},"需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。",{"type":14,"tag":15,"props":200,"children":201},{},[202],{"type":19,"value":203},"按照CS的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。",{"type":14,"tag":15,"props":205,"children":206},{},[207],{"type":19,"value":208},"若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。",{"type":14,"tag":15,"props":210,"children":211},{},[212],{"type":19,"value":213},"如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。\n若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。\n服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。",{"type":14,"tag":15,"props":215,"children":216},{},[217,219,228,230,237],{"type":19,"value":218},"在Overwatch中，服务端延迟补偿也被称为Favoring the shooter(",{"type":14,"tag":220,"props":221,"children":225},"a",{"href":222,"rel":223},"https://link.zhihu.com/?target=https%3A//www.vg247.com/2016/04/05/overwatch-devs-talk-netcode-and-favouring-the-shooter/",[224],"nofollow",[226],{"type":19,"value":227},"https://www.vg247.com/2016/04/05/overwatch-devs-talk-netcode-and-favouring-the-shooter/",{"type":19,"value":229},", ",{"type":14,"tag":220,"props":231,"children":234},{"href":232,"rel":233},"https://link.zhihu.com/?target=https%3A//www.pcgamesn.com/overwatch/overwatch-netcode",[224],[235],{"type":19,"value":236},"https://www.pcgamesn.com/overwatch/overwatch-netcode",{"type":19,"value":238},")，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。",{"type":14,"tag":15,"props":240,"children":241},{},[242],{"type":19,"value":243},"如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：",{"type":14,"tag":15,"props":245,"children":246},{},[247],{"type":19,"value":248},"1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。",{"type":14,"tag":15,"props":250,"children":251},{},[252],{"type":19,"value":253},"2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。",{"type":14,"tag":15,"props":255,"children":256},{},[257],{"type":19,"value":258},"3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。",{"type":14,"tag":15,"props":260,"children":261},{},[262],{"type":19,"value":263},"4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。",{"type":14,"tag":15,"props":265,"children":266},{},[267],{"type":19,"value":268},"5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。",{"type":14,"tag":15,"props":270,"children":271},{},[272],{"type":19,"value":273},"6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。",{"type":14,"tag":15,"props":275,"children":276},{},[277],{"type":19,"value":278},"7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。",{"type":14,"tag":15,"props":280,"children":281},{},[282,284,291,292,299],{"type":19,"value":283},"8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的(",{"type":14,"tag":220,"props":285,"children":288},{"href":286,"rel":287},"https://link.zhihu.com/?target=http%3A//www.gdcvault.com/play/1024001/-Overwatch-Gameplay-Architecture-and",[224],[289],{"type":19,"value":290},"http://www.gdcvault.com/play/1024001/-Overwatch-Gameplay-Architecture-and",{"type":19,"value":229},{"type":14,"tag":220,"props":293,"children":296},{"href":294,"rel":295},"https://link.zhihu.com/?target=http%3A//www.gad.qq.com/article/detail/28682",[224],[297],{"type":19,"value":298},"http://www.gad.qq.com/article/detail/28682",{"type":19,"value":300},"). 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。",{"type":14,"tag":15,"props":302,"children":303},{},[304],{"type":14,"tag":36,"props":305,"children":306},{},[307],{"type":19,"value":308},"延迟改进",{"type":14,"tag":15,"props":310,"children":311},{},[312],{"type":19,"value":313},"暴雪表示会采用一些技术来改进延迟的情况：",{"type":14,"tag":315,"props":316,"children":317},"ul",{},[318,323,328,333,338,348,358,368,378,388,398,408],{"type":14,"tag":164,"props":319,"children":320},{},[321],{"type":19,"value":322},"把网络状况相近的玩家匹配到一起，这样相对公平",{"type":14,"tag":164,"props":324,"children":325},{},[326],{"type":19,"value":327},"提供60帧tick的服务器，目前是20帧的服务器",{"type":14,"tag":164,"props":329,"children":330},{},[331],{"type":19,"value":332},"网络稳定时候，直接使用客户端指令，而不是缓存48ms的",{"type":14,"tag":164,"props":334,"children":335},{},[336],{"type":19,"value":337},"网络波动时候，回溯加一个上限，比如250ms，不再是无限回溯了",{"type":14,"tag":164,"props":339,"children":340},{},[341],{"type":14,"tag":220,"props":342,"children":345},{"href":343,"rel":344},"https://www.gdcvault.com/play/1024001/-Overwatch-Gameplay-Architecture-and",[224],[346],{"type":19,"value":347},"Overwatch - Gameplay Architecture and Netcode - GDCVault",{"type":14,"tag":164,"props":349,"children":350},{},[351],{"type":14,"tag":220,"props":352,"children":355},{"href":353,"rel":354},"http://gad.qq.com/article/detail/28682",[224],[356],{"type":19,"value":357},"《守望先锋》架构设计与网络同步 - GAD",{"type":14,"tag":164,"props":359,"children":360},{},[361],{"type":14,"tag":220,"props":362,"children":365},{"href":363,"rel":364},"http://gad.qq.com/article/detail/28219",[224],[366],{"type":19,"value":367},"《守望先锋》中的网络脚本化的武器和技能系统 - GAD",{"type":14,"tag":164,"props":369,"children":370},{},[371],{"type":14,"tag":220,"props":372,"children":375},{"href":373,"rel":374},"https://www.gdcvault.com/play/1024653/Networking-Scripted-Weapons-and-Abilities",[224],[376],{"type":19,"value":377},"Networking Scripted Weapons and Abilities in Overwatch - GDC Vault",{"type":14,"tag":164,"props":379,"children":380},{},[381],{"type":14,"tag":220,"props":382,"children":385},{"href":383,"rel":384},"https://blog.codingnow.com/2017/06/overwatch_ecs.html",[224],[386],{"type":19,"value":387},"浅谈《守望先锋》中的 ECS 架构 - 云风的 BLOG",{"type":14,"tag":164,"props":389,"children":390},{},[391],{"type":14,"tag":220,"props":392,"children":395},{"href":393,"rel":394},"https://zhuanlan.zhihu.com/p/25703934",[224],[396],{"type":19,"value":397},"GDC 2017 技术选荐合辑 - 知乎专栏",{"type":14,"tag":164,"props":399,"children":400},{},[401],{"type":14,"tag":220,"props":402,"children":405},{"href":403,"rel":404},"https://zhuanlan.zhihu.com/p/28825322",[224],[406],{"type":19,"value":407},"守望先锋等 FPS 游戏的网络同步 - 知乎专栏",{"type":14,"tag":164,"props":409,"children":410},{},[411],{"type":14,"tag":220,"props":412,"children":415},{"href":413,"rel":414},"https://www.gamereplays.org/overwatch/portals.php?show=page&name=overwatch-a-guide-to-understanding-netcode",[224],[416],{"type":19,"value":417},"A guide to understanding netcode - GAMEREPLAYS.ORG",{"title":7,"searchDepth":419,"depth":419,"links":420},2,[],"markdown","content:dotnet:2020-02-02-overwatch-a-guide-to-understanding-netcode.md","content","dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode.md","md","2020-02-02",[428,438,563,612,664,677,789],{"title":429,"_path":430,"children":431},"Art","/art",[432,435],{"title":433,"_path":434},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":436,"_path":437},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":439,"_path":440,"children":441},"Dotnet","/dotnet",[442,445,448,451,454,457,460,463,466,469,472,475,478,481,484,487,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560],{"title":443,"_path":444},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":446,"_path":447},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":449,"_path":450},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":452,"_path":453},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":455,"_path":456},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":458,"_path":459},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":461,"_path":462},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":464,"_path":465},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":467,"_path":468},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":470,"_path":471},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":473,"_path":474},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":476,"_path":477},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":479,"_path":480},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":482,"_path":483},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":485,"_path":486},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":8,"_path":4},{"title":489,"_path":490},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":492,"_path":493},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":495,"_path":496},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":498,"_path":499},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":501,"_path":502},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":504,"_path":505},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":507,"_path":508},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":510,"_path":511},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":513,"_path":514},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":516,"_path":517},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":519,"_path":520},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":522,"_path":523},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":525,"_path":526},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":528,"_path":529},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":531,"_path":532},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":534,"_path":535},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":537,"_path":538},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":540,"_path":541},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":543,"_path":544},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":546,"_path":547},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":549,"_path":550},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":552,"_path":553},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":555,"_path":556},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":558,"_path":559},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":561,"_path":562},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":564,"_path":565,"children":566},"Game","/game",[567,570,573,576,579,582,585,588,591,594,597,600,603,606,609],{"title":568,"_path":569},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":571,"_path":572},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":574,"_path":575},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":577,"_path":578},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":580,"_path":581},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":583,"_path":584},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":586,"_path":587},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":589,"_path":590},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":592,"_path":593},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":595,"_path":596},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":598,"_path":599},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":601,"_path":602},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":604,"_path":605},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":607,"_path":608},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":610,"_path":611},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":613,"_path":614,"children":615},"Gyj","/gyj",[616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661],{"title":617,"_path":618},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":620,"_path":621},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":623,"_path":624},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":626,"_path":627},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":629,"_path":630},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":632,"_path":633},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":635,"_path":636},"玩法","/gyj/2022-08-22-wanfa",{"title":638,"_path":639},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":641,"_path":642},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":644,"_path":645},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":647,"_path":648},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":650,"_path":651},"门派内容相关","/gyj/2022-11-17-sect",{"title":653,"_path":654},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":656,"_path":657},"种植","/gyj/2022-12-01-zhongzhi",{"title":659,"_path":660},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":662,"_path":663},"跑商","/gyj/2023-11-01-paoshang",{"title":665,"_path":666,"children":667},"Js","/js",[668,671,674],{"title":669,"_path":670},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":672,"_path":673},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":675,"_path":676},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":678,"_path":679,"children":680},"Tool","/tool",[681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786],{"title":682,"_path":683},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":685,"_path":686},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":688,"_path":689},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":691,"_path":692},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":694,"_path":695},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":697,"_path":698},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":700,"_path":701},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":703,"_path":704},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":706,"_path":707},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":709,"_path":710},"mac下brew 使用","/tool/2020-01-13-brew",{"title":712,"_path":713},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":715,"_path":716},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":718,"_path":719},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":721,"_path":722},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":724,"_path":725},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":727,"_path":728},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":730,"_path":731},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":733,"_path":734},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":736,"_path":737},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":739,"_path":740},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":742,"_path":743},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":745,"_path":746},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":748,"_path":749},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":751,"_path":752},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":754,"_path":755},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":757,"_path":758},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":760,"_path":761},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":763,"_path":764},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":766,"_path":767},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":769,"_path":770},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":772,"_path":773},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":775,"_path":776},"rider的使用","/tool/2022-08-02-rider-use",{"title":778,"_path":779},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":781,"_path":782},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":784,"_path":785},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":787,"_path":788},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":790,"_path":791,"children":792},"Unity","/unity",[793,796,799,802,805,808,811,814,817,820,823,826,829,832,835,838,841,844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901,904,907,910,913,916,919,922,925,928,931,934,937,940,943,946,949,952,955,958,961,964,967,970,973,976,979,982,985,988,991,994,997,1000,1003,1006],{"title":794,"_path":795},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":797,"_path":798},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":800,"_path":801},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":803,"_path":804},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":806,"_path":807},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":809,"_path":810},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":812,"_path":813},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":815,"_path":816},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":818,"_path":819},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":821,"_path":822},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":824,"_path":825},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":827,"_path":828},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":830,"_path":831},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":833,"_path":834},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":836,"_path":837},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":839,"_path":840},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":842,"_path":843},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":845,"_path":846},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":848,"_path":849},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":851,"_path":852},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":854,"_path":855},"技能系统","/unity/2020-02-15-skill-system",{"title":857,"_path":858},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":860,"_path":861},"角色状态设计","/unity/2020-02-17-character-states",{"title":863,"_path":864},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":866,"_path":867},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":869,"_path":870},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":872,"_path":873},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":875,"_path":876},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":878,"_path":879},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":881,"_path":882},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":884,"_path":885},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":887,"_path":888},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":890,"_path":891},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":893,"_path":894},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":896,"_path":897},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":899,"_path":900},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":902,"_path":903},"unity的addressables","/unity/2020-09-12-addressables",{"title":905,"_path":906},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":908,"_path":909},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":911,"_path":912},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":914,"_path":915},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":917,"_path":918},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":920,"_path":921},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":923,"_path":924},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":926,"_path":927},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":929,"_path":930},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":932,"_path":933},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":935,"_path":936},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":938,"_path":939},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":941,"_path":942},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":944,"_path":945},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":947,"_path":948},"简单保存工具","/unity/2020-11-13-simple-save",{"title":950,"_path":951},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":953,"_path":954},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":956,"_path":957},"ability","/unity/2020-11-16-dotssample",{"title":959,"_path":960},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":962,"_path":963},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":965,"_path":966},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":968,"_path":969},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":971,"_path":972},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":974,"_path":975},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":977,"_path":978},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":980,"_path":981},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":983,"_path":984},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":986,"_path":987},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":989,"_path":990},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":992,"_path":993},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":995,"_path":996},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":998,"_path":999},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1001,"_path":1002},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1004,"_path":1005},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1007,"_path":1008},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779041046]