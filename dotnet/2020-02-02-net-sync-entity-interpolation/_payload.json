[{"data":1,"prerenderedAt":798},["Reactive",2],{"content-query-o1cRbPQQJr":3,"content-navigation-8C37fagqQL":216},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":210,"_id":211,"_source":212,"_file":213,"_extension":214,"date":215},"/dotnet/2020-02-02-net-sync-entity-interpolation","dotnet",false,"","快节奏多人游戏同步(3)-Entity插值","PART 1 概述在本系列的「第一篇文章」中，我们介绍了关于权威服务器及其反作弊特性，然而仅仅是最简单的实现可能会导致关于可玩性和响应速度的问题。在「第二篇文章」中，我们提出了「客户端预测」的方案来克服这个困难。以上两篇文章事实上介绍的是一种在连接到有传输延迟的远程权威服务器的状况下，可以让玩家像单机游戏一样流畅的控制角色移动的一种概念和技术。在本文中，我们将会讨论在在同一台服务器上有「其他玩家控制的角色」的情况。PART 2 服务器 time step在之前的文章中，我们的服务器的实现非常简单，它负责处理客户端的输入并更新游戏状态，最后将结果发送回客户端。如果有多个玩家在一起玩，那服务端主循",{"type":11,"children":12,"toc":201},"root",[13,22,28,33,38,44,49,55,60,69,74,80,85,90,95,100,105,111,116,121,126,131,139,144,149,154,160,165,170,175,180,185],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"part-1-概述",[19],{"type":20,"value":21},"text","PART 1 概述",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26],{"type":20,"value":27},"在本系列的「第一篇文章」中，我们介绍了关于权威服务器及其反作弊特性，然而仅仅是最简单的实现可能会导致关于可玩性和响应速度的问题。在「第二篇文章」中，我们提出了「客户端预测」的方案来克服这个困难。",{"type":14,"tag":23,"props":29,"children":30},{},[31],{"type":20,"value":32},"以上两篇文章事实上介绍的是一种在连接到有传输延迟的远程权威服务器的状况下，可以让玩家像单机游戏一样流畅的控制角色移动的一种概念和技术。",{"type":14,"tag":23,"props":34,"children":35},{},[36],{"type":20,"value":37},"在本文中，我们将会讨论在在同一台服务器上有「其他玩家控制的角色」的情况。",{"type":14,"tag":15,"props":39,"children":41},{"id":40},"part-2-服务器-time-step",[42],{"type":20,"value":43},"PART 2 服务器 time step",{"type":14,"tag":23,"props":45,"children":46},{},[47],{"type":20,"value":48},"在之前的文章中，我们的服务器的实现非常简单，它负责处理客户端的输入并更新游戏状态，最后将结果发送回客户端。如果有多个玩家在一起玩，那服务端主循环的逻辑有所不同了。\n在接下来的场景中，几个客户端玩家会同时发送数据，玩家发出操作指令会非常频繁（高APM的玩家，一秒钟可能发出10个以上的操作指令），如果服务端每收到某个玩家的一条指令，就去执行input逻辑，然后广播游戏状态，这样的性能是非常差的，会消耗很多的cpu和bandwidth。\n一个更好的办法是，利用一个queue，将客户端的输入信息缓存起来，在服务端，游戏状态以一定的频率(例如100ms一次)进行更新，每次更新的时间间隔(100ms)，就被称之为time step。\n在每个更新循环迭代中，服务端处理queue里面所有的input，然后逐个进行计算，将最后计算的结果更新到所有客户端。\n总体来说，整个游戏世界的更新和客户端的输入频率、数量是相对独立的，它的更新频率也是可控的。",{"type":14,"tag":15,"props":50,"children":52},{"id":51},"part-3-低频更新处理",[53],{"type":20,"value":54},"PART 3 低频更新处理",{"type":14,"tag":23,"props":56,"children":57},{},[58],{"type":20,"value":59},"从客户端来看，这个方法运行的很平滑，客户端的预测行为独立于服务端的更新，所以它依然可以使用预测技术。不过，由于真个游戏世界的状态以一个比较低的频率进行更新，那么本地客户端对其他玩家知道的信息就很少了，信息越少的话，其他玩家的行为动作要模拟的话，就不会很准确。\n本地客户端收到其他玩家更新坐标的消息，如何进行处理呢，有一个最简单的办法就是，每次直接使用收到的坐标进行更新，但这样看起来会有抖动，每100ms更新一次坐标，就得抖动一次，如下图所示：",{"type":14,"tag":23,"props":61,"children":62},{},[63],{"type":14,"tag":64,"props":65,"children":68},"img",{"alt":66,"src":67},"Client 1 as seen by Client 2.","/images/2020-02-02-net-sync-entity-interpolation/fpm3-01.png",[],{"type":14,"tag":23,"props":70,"children":71},{},[72],{"type":20,"value":73},"对Client2来说，Client1的位置最开始再p(10,10)，不一会直接跳到p(11,10)，100ms后又跳到(12,0)，这样的体验是很差的。那么，如何改善游戏体验呢？ 针对不同的游戏，有不同的处理方式，一般来说，客户端的行为越方便预测，就越容易做平滑处理。",{"type":14,"tag":15,"props":75,"children":77},{"id":76},"part-4-航位推测法",[78],{"type":20,"value":79},"PART 4 航位推测法",{"type":14,"tag":23,"props":81,"children":82},{},[83],{"type":20,"value":84},"假设你在玩赛车游戏。一辆速度非常快的汽车是可以预测的——例如，如果它以每秒100米的速度行驶，一秒钟后，它将比它开始行驶的地方提前大约100米。",{"type":14,"tag":23,"props":86,"children":87},{},[88],{"type":20,"value":89},"为什么是大约呢？在那一秒内，汽车可能加速或减速了一点，或者向右或向左转了一点——这里的关键词是“一点”。汽车的机动性是这样的：在高速行驶时，无论玩家实际做什么，其在任何时间点的位置都高度依赖于其先前的位置、速度和方向。换句话说，赛车不能立即进行180度转弯。",{"type":14,"tag":23,"props":91,"children":92},{},[93],{"type":20,"value":94},"对于每100毫秒发送一次更新的服务器，这是如何工作的？客户端接收到服务器发送来的每个其他车的速度和行驶方向；在接下来的100毫秒内，它不会接收到任何新信息，但仍需要显示它们的运行情况。要做的最简单的事情是假设汽车的航向和加速度在100毫秒内保持不变，并使用该参数在本地运行汽车物理。然后，100毫秒后，当服务器更新到达时，汽车的位置被修正。",{"type":14,"tag":23,"props":96,"children":97},{},[98],{"type":20,"value":99},"根据许多因素，校正可以是大的或相对小的。如果玩家把车保持在直线上，并且不改变车速，那么预测的位置将与修正的位置完全相同。另一方面，如果玩家撞到什么东西，预测的位置将是非常错误的。",{"type":14,"tag":23,"props":101,"children":102},{},[103],{"type":20,"value":104},"请注意，推算定位可以应用于低速情况，例如战列舰。实际上，“dead reckoning”一词起源于航海。",{"type":14,"tag":15,"props":106,"children":108},{"id":107},"part-5-实体插值",[109],{"type":20,"value":110},"PART 5 实体插值",{"type":14,"tag":23,"props":112,"children":113},{},[114],{"type":20,"value":115},"有许多情况航位推是没法处理的 - 对于玩家的方向和速度可以瞬间改变的都不行，比如3D射击，玩家经常快速跑动，停下，快速转向等，在这种情况下，航位推算法就非常无力了。因为位置和速度和前面的数据无关。",{"type":14,"tag":23,"props":117,"children":118},{},[119],{"type":20,"value":120},"你可以选择在接到服务器的请求的时候直接更新玩家的位置，而客户端看到的就是网上其他的玩家每100ms跳一下，感觉会非常奇怪。",{"type":14,"tag":23,"props":122,"children":123},{},[124],{"type":20,"value":125},"你现在拥有的是每100ms由服务器传送过来的权威数据，现在要做的是如何在这100ms内让网络角色看起来非常自然，解决问题的关键就是将网络玩家显示在过去的某个时刻。",{"type":14,"tag":23,"props":127,"children":128},{},[129],{"type":20,"value":130},"假设你在t=1000收到位置信息，你已经在t=900收到了一次位置信息，所以你知道玩家在t=900和t=1000的位置，所以在t=1000到t=1100之间，你只要显示玩家t=900到t=1000的位置。这种方法，你所显示的都是玩家的真实数据，只是有100ms的延迟。",{"type":14,"tag":23,"props":132,"children":133},{},[134],{"type":14,"tag":64,"props":135,"children":138},{"alt":136,"src":137},"Client 2 renders Client 1 in the past, interpolating last known positions.","/images/2020-02-02-net-sync-entity-interpolation/fpm3-02.png",[],{"type":14,"tag":23,"props":140,"children":141},{},[142],{"type":20,"value":143},"用来插值的t=900和t=1000的数据依赖于游戏。插值通常都可以处理得很好。如果不是这种方法，你可能需要服务器发送更加详细的移动信息了 - 比如更多的位置采样点，或者每10ms发送一次(你不必发十倍的数据 - 因为你发的微小的位移数据，在这种情况下数据的格式可以很好的优化一下)。",{"type":14,"tag":23,"props":145,"children":146},{},[147],{"type":20,"value":148},"当使用这种技术的时候，每一个玩家都和游戏世界有一点点不同步，因为每个玩家看到自己的世界是当前的，但是其他的玩家都是过去的。但即使是快速的游戏，这100ms的延迟都不是那么明显。",{"type":14,"tag":23,"props":150,"children":151},{},[152],{"type":20,"value":153},"有一种情况除外 - 当你需要时间和空间的准确性的时候，比如一个玩家射击另一个玩家的时候，因为其他的玩家都是存在于过去的某个时候，你的瞄准其实是有100ms的延迟的 - 也就是说，你设计的目标是100ms的某个目标！ 这个问题我们下一篇会进行讨论。",{"type":14,"tag":15,"props":155,"children":157},{"id":156},"part-6-总结",[158],{"type":20,"value":159},"PART 6 总结",{"type":14,"tag":23,"props":161,"children":162},{},[163],{"type":20,"value":164},"在权威服务器的环境中，有着不确定的服务器更新和网络延迟，在这种情况下你还要给玩家平滑的移动。在第二篇中，我们展示了一种客户端预测和服务器调和的技术，来实现实时的角色控制，这样的方案让玩家能够得到即时的反馈，移除了致命的延迟。",{"type":14,"tag":23,"props":166,"children":167},{},[168],{"type":20,"value":169},"其他玩家的同步还是一个问题，但是，在这篇文章中，我们提出了两种解决方案。",{"type":14,"tag":23,"props":171,"children":172},{},[173],{"type":20,"value":174},"第一种是航位推技术，这种模拟需要entity的位置能够通过前一个时候的位置，速度，加速度来推算出来，当不满足这种情况的时候，航位推就没用了。",{"type":14,"tag":23,"props":176,"children":177},{},[178],{"type":20,"value":179},"第二种是插值技术，不预测将来的位置，只是使用服务器传来的数据，这种就会造成显示的entity总是过去的某个时刻。最后的结果就是玩家的角色总是当前时刻，而其他看到的entity都是过去的某个时刻，这种情况可以产生一种难以置信的无缝体验。",{"type":14,"tag":23,"props":181,"children":182},{},[183],{"type":20,"value":184},"但是，当游戏需要高速离散的准确性的时候，比如射击或者移动物体，美景就破灭了：你看其他玩家的位置和服务器的位置不一致，别的玩家看你的位置也不是正确的，这样爆头就不可能发生了！很多游戏都有爆头这一说，我们将在下面的文章中来讨论这个问题。",{"type":14,"tag":186,"props":187,"children":188},"ul",{},[189],{"type":14,"tag":190,"props":191,"children":192},"li",{},[193],{"type":14,"tag":194,"props":195,"children":199},"a",{"href":196,"rel":197},"http://www.gabrielgambetta.com/entity-interpolation.html",[198],"nofollow",[200],{"type":20,"value":196},{"title":7,"searchDepth":202,"depth":202,"links":203},2,[204,205,206,207,208,209],{"id":17,"depth":202,"text":21},{"id":40,"depth":202,"text":43},{"id":51,"depth":202,"text":54},{"id":76,"depth":202,"text":79},{"id":107,"depth":202,"text":110},{"id":156,"depth":202,"text":159},"markdown","content:dotnet:2020-02-02-net-sync-entity-interpolation.md","content","dotnet/2020-02-02-net-sync-entity-interpolation.md","md","2020-02-02",[217,227,352,401,453,466,578],{"title":218,"_path":219,"children":220},"Art","/art",[221,224],{"title":222,"_path":223},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":225,"_path":226},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":228,"_path":229,"children":230},"Dotnet","/dotnet",[231,234,237,240,243,246,249,252,255,258,261,264,267,270,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349],{"title":232,"_path":233},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":235,"_path":236},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":238,"_path":239},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":241,"_path":242},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":244,"_path":245},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":247,"_path":248},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":250,"_path":251},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":253,"_path":254},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":256,"_path":257},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":259,"_path":260},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":262,"_path":263},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":265,"_path":266},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":268,"_path":269},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":8,"_path":4},{"title":272,"_path":273},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":275,"_path":276},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":278,"_path":279},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":281,"_path":282},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":284,"_path":285},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":287,"_path":288},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":290,"_path":291},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":293,"_path":294},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":296,"_path":297},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":299,"_path":300},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":302,"_path":303},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":305,"_path":306},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":308,"_path":309},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":311,"_path":312},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":314,"_path":315},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":317,"_path":318},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":320,"_path":321},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":323,"_path":324},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":326,"_path":327},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":329,"_path":330},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":332,"_path":333},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":335,"_path":336},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":338,"_path":339},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":341,"_path":342},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":344,"_path":345},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":347,"_path":348},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":350,"_path":351},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":353,"_path":354,"children":355},"Game","/game",[356,359,362,365,368,371,374,377,380,383,386,389,392,395,398],{"title":357,"_path":358},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":360,"_path":361},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":363,"_path":364},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":366,"_path":367},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":369,"_path":370},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":372,"_path":373},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":375,"_path":376},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":378,"_path":379},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":381,"_path":382},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":384,"_path":385},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":387,"_path":388},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":390,"_path":391},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":393,"_path":394},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":396,"_path":397},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":399,"_path":400},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":402,"_path":403,"children":404},"Gyj","/gyj",[405,408,411,414,417,420,423,426,429,432,435,438,441,444,447,450],{"title":406,"_path":407},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":409,"_path":410},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":412,"_path":413},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":415,"_path":416},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":418,"_path":419},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":421,"_path":422},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":424,"_path":425},"玩法","/gyj/2022-08-22-wanfa",{"title":427,"_path":428},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":430,"_path":431},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":433,"_path":434},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":436,"_path":437},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":439,"_path":440},"门派内容相关","/gyj/2022-11-17-sect",{"title":442,"_path":443},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":445,"_path":446},"种植","/gyj/2022-12-01-zhongzhi",{"title":448,"_path":449},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":451,"_path":452},"跑商","/gyj/2023-11-01-paoshang",{"title":454,"_path":455,"children":456},"Js","/js",[457,460,463],{"title":458,"_path":459},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":461,"_path":462},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":464,"_path":465},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":467,"_path":468,"children":469},"Tool","/tool",[470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575],{"title":471,"_path":472},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":474,"_path":475},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":477,"_path":478},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":480,"_path":481},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":483,"_path":484},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":486,"_path":487},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":489,"_path":490},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":492,"_path":493},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":495,"_path":496},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":498,"_path":499},"mac下brew 使用","/tool/2020-01-13-brew",{"title":501,"_path":502},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":504,"_path":505},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":507,"_path":508},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":510,"_path":511},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":513,"_path":514},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":516,"_path":517},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":519,"_path":520},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":522,"_path":523},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":525,"_path":526},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":528,"_path":529},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":531,"_path":532},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":534,"_path":535},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":537,"_path":538},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":540,"_path":541},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":543,"_path":544},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":546,"_path":547},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":549,"_path":550},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":552,"_path":553},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":555,"_path":556},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":558,"_path":559},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":561,"_path":562},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":564,"_path":565},"rider的使用","/tool/2022-08-02-rider-use",{"title":567,"_path":568},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":570,"_path":571},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":573,"_path":574},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":576,"_path":577},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":579,"_path":580,"children":581},"Unity","/unity",[582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786,789,792,795],{"title":583,"_path":584},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":586,"_path":587},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":589,"_path":590},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":592,"_path":593},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":595,"_path":596},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":598,"_path":599},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":601,"_path":602},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":604,"_path":605},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":607,"_path":608},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":610,"_path":611},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":613,"_path":614},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":616,"_path":617},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":619,"_path":620},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":622,"_path":623},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":625,"_path":626},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":628,"_path":629},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":631,"_path":632},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":634,"_path":635},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":637,"_path":638},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":640,"_path":641},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":643,"_path":644},"技能系统","/unity/2020-02-15-skill-system",{"title":646,"_path":647},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":649,"_path":650},"角色状态设计","/unity/2020-02-17-character-states",{"title":652,"_path":653},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":655,"_path":656},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":658,"_path":659},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":661,"_path":662},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":664,"_path":665},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":667,"_path":668},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":670,"_path":671},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":673,"_path":674},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":676,"_path":677},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":679,"_path":680},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":682,"_path":683},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":685,"_path":686},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":688,"_path":689},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":691,"_path":692},"unity的addressables","/unity/2020-09-12-addressables",{"title":694,"_path":695},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":697,"_path":698},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":700,"_path":701},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":703,"_path":704},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":706,"_path":707},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":709,"_path":710},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":712,"_path":713},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":715,"_path":716},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":718,"_path":719},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":721,"_path":722},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":724,"_path":725},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":727,"_path":728},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":730,"_path":731},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":733,"_path":734},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":736,"_path":737},"简单保存工具","/unity/2020-11-13-simple-save",{"title":739,"_path":740},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":742,"_path":743},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":745,"_path":746},"ability","/unity/2020-11-16-dotssample",{"title":748,"_path":749},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":751,"_path":752},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":754,"_path":755},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":757,"_path":758},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":760,"_path":761},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":763,"_path":764},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":766,"_path":767},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":769,"_path":770},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":772,"_path":773},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":775,"_path":776},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":778,"_path":779},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":781,"_path":782},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":784,"_path":785},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":787,"_path":788},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":790,"_path":791},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":793,"_path":794},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":796,"_path":797},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779041037]