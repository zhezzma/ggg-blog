[{"data":1,"prerenderedAt":852},["Reactive",2],{"content-query-QoA52qYF4W":3,"content-navigation-8C37fagqQL":270},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":264,"_id":265,"_source":266,"_file":267,"_extension":268,"date":269},"/dotnet/2020-02-02-source_multiplayer_networking","dotnet",false,"","起源引擎网络同步模型","Source引擎的多人游戏使用基于UDP通信的C/S架构。游戏以服务器逻辑作为世界权威，客户端和服务器通过UDP协议(20~30packet/s）通信。客户端从服务器接收信息并基于当前世界状态渲染画面和输出音频。客户端以固定频率发送操作输入到服务器。客户端仅与游戏服务器，而不是彼此之间通信。多人游戏必须处理基于网络消息同步所带来的一系列问题。",{"type":11,"children":12,"toc":254},"root",[13,20,25,33,38,44,49,54,59,64,70,75,82,87,92,97,102,107,112,117,122,127,132,139,144,149,154,159,165,170,177,182,187,192,197,202,208,213,218,223,228,233,238,243],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"网络的带宽是有限的，所以服务器不能为每一个世界的变化发送新的更新数据包发送到所有客户端。相反，服务器以固定的频率取当前世界状态的快照并广播这些快照到客户端。网络数据包需要一定的时间量的客户端和服务器（RTT的一半）来往。这意味着客户端时间相对服务器时间总是稍有滞后。此外，客户端输入数据包同步到服务器也有一定网络传输时间，所以服务器处理客户端输入也存在延迟的。不同的客户端因为网络带宽和通信线路不同也会存在不同的网络延时。随着服务器和客户端之间的这些网络延迟增大, 网络延迟可能会导致逻辑问题。比如在快节奏的动作游戏中，在几毫秒的延迟甚至就会导致游戏卡顿的感觉，玩家会觉得很难打到对方玩家或运动的物体。此外除了带宽限制和网络延迟还要考虑网络传输中会有消息丢失的情况。",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":14,"tag":29,"props":30,"children":32},"img",{"alt":29,"src":31},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175512800-299175149.png",[],{"type":14,"tag":15,"props":34,"children":35},{},[36],{"type":19,"value":37},"为了解决网络通信引入的一系列问题，Source引擎在服务器同步时采用了数据压缩和延迟补偿的逻辑，客户端采用了预测运行和插值平滑处理等技术来获得更好的游戏体验。",{"type":14,"tag":39,"props":40,"children":42},"h3",{"id":41},"基本网络模型",[43],{"type":19,"value":41},{"type":14,"tag":15,"props":45,"children":46},{},[47],{"type":19,"value":48},"服务器以一个固定的时间间隔更新模拟游戏世界。默认情况下，时间步长为15ms，以66.66次每秒的频率更新模拟游戏世界，但不同游戏可以指定更新频率。在每个更新周期内服务器处理传入的用户命令，运行物理模拟步，检查游戏规则，并更新所有的对象状态。每一次模拟更新tick之后服务器会决定是否更新当前时间快照以及每个客户端当前是否需更新。较高的tickrate增加了模拟精度，需要服务器和客户端都有更多可用的CPU和带宽资源。客户通常只能提供有限的带宽。在最坏的情况下，玩家的调制解调器连接不能获得超过5-7KB /秒的流量。如果服务器的数据更新发送频率超过了客户端的带宽处理限制，丢包是不可避免的。因此客户端可以通过在控制台设置接受带宽限制，以告诉服务器其收到的带宽容量。这是客户最重要的网络参数，想要获得最佳的游戏体验的话必须正确的设置此参数。客户端可以通过设置cl_updaterate（默认20）来改变获得快照平的频率，但服务器永远不会发送比tickerate更多的更新或超过请求的客户端带宽限制。服务器管理员可以通过sv_minrate和sv_maxrate(byte/s)限制客户端的上行请求频率。当然快照更新同步频率都受到sv_minupdaterate和sv_maxupdaterate（快照/秒）的限制。",{"type":14,"tag":15,"props":50,"children":51},{},[52],{"type":19,"value":53},"客户端使用与服务端tickrate一样的频率采样操作输入创建用户命令。用户命令基本上是当前的键盘和鼠标状态的快照。客户端不会把每个用户命令都立即发送到服务器而是以每秒（通常是30）的速率发送命令包。这意味着两个或更多个用户的命令在同一包内传输。客户可以增加与的cl_cmdrate命令速率。这可以提高响应速度，但需要更多的出口带宽。",{"type":14,"tag":15,"props":55,"children":56},{},[57],{"type":19,"value":58},"游戏数据使用增量更新压缩来减少网络传输。服务器不会每次都发送一个完整的世界快照，而只会更新自上次确认更新(通过ACK确认)之后所发生的变化（增量快照)。客户端和服务器之间发送的每个包都会带有ACK序列号来跟踪网络数据流。当游戏开始时或客户端在发生非常严重的数据包丢失时, 客户可以要求全额快照同步。",{"type":14,"tag":15,"props":60,"children":61},{},[62],{"type":19,"value":63},"用户操作的响应速度(操作到游戏世界中的可视反馈之间的时间)是由很多因素决定的，包括服务器/客户端的CPU负载，更新频率，网络速率和快照更新设置，但主要是由网络包的传输时间确定。从客户端发送命令到服务器响应, 再到客户端接收此命令对应的服务器响应被称为延迟或ping（或RTT）。低延迟在玩多人在线游戏时有显著的优势。客户端本地预测和服务器的延迟补偿技术可以尽量为网络较差的游戏玩家提供相对公平的体验。如果有良好的带宽和CPU可用，可以通过调整网络设置以获得更好的体验, 反之我们建议保持默认设置，因为不正确的更改可能导致负面影响大于实际效益。",{"type":14,"tag":39,"props":65,"children":67},{"id":66},"enitiy插值平滑",[68],{"type":19,"value":69},"Enitiy插值平滑",{"type":14,"tag":15,"props":71,"children":72},{},[73],{"type":19,"value":74},"通常情况下客户端接收每秒约20个快照更新。如果世界中的对象（实体）直接由服务器同步的位置呈现，物体移动和动画会看起来很诡异。网络通信的丢包也将导致明显的毛刺。解决这个问题的关键是要延迟渲染，玩家位置和动画可以在两个最近收到快照之间的连续插值。以每秒20快照为例，一个新的快照更新到达时大约每50毫秒。如果客户端渲染延迟50毫秒，客户端收到一个快照，并在此之前的快照之间内插(Source默认为100毫秒的插补周期)；这样一来，即使一个快照丢失，总是可以在两个有效快照之间进行平滑插值。如下图显示传入世界快照的到达时间：",{"type":14,"tag":15,"props":76,"children":77},{},[78],{"type":14,"tag":29,"props":79,"children":81},{"alt":29,"src":80},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175529456-2030374817.png",[],{"type":14,"tag":15,"props":83,"children":84},{},[85],{"type":19,"value":86},"在客户端接收到的最后一个快照是在tick 344或10.30秒。客户的时间将继续在此快照的基础上基于客户端的帧率增加。下一个视图帧渲染时间是当前客户端的时间10.32减去0.1秒的画面插值延迟10.20。在我们的例子下一个渲染帧的时间是10.22和所有实体及其动画都可以基于快照340和342做正确的插值处理。",{"type":14,"tag":15,"props":88,"children":89},{},[90],{"type":19,"value":91},"既然我们有一个100毫秒的延迟插值，如果快照342由于丢包缺失，插值可以使用快照340和344来进行平滑处理。如果连续多个快照丢失，插值处理可能表现不会很好，因为插值是基于缓冲区的历史快照进行的。在这种情况下，渲染器会使用外推法（cl_extrapolate 1），并尝试基于其已知的历史，为实体做一个基于目前为止的一个简单线性外推。外推只会快照更新包连续丢失（cl_extrapolate_amount）0.25秒才会触发，因为该预测之后误差将变得太大。实体内会插导致100毫秒默认（cl_interp 0.1）的恒定视图“滞后”，就算你在listenserver（服务器和客户端在同一台机器上）上玩游戏。这并不是说你必须提前预判动画去瞄准射击，因为服务器端的滞后补偿知道客户端实体插值并纠正这个误差。",{"type":14,"tag":15,"props":93,"children":94},{},[95],{"type":19,"value":96},"最近Source引擎的游戏有cl_interp_ratioCVaR的。有了这个，你可以轻松，安全地通过设置cl_interp为0，那么增加的cl_updaterate的值（这同时也会受限于服务器tickrate）来减少插补周期。你可以用net_graph 1检查您的最终线性插值。",{"type":14,"tag":15,"props":98,"children":99},{},[100],{"type":19,"value":101},"如果打开sv_showhitboxes，你会看到在服务器时间绘制的玩家包围盒，这意味着他们在前进的线性插值时期所呈现的播放器模式。",{"type":14,"tag":39,"props":103,"children":105},{"id":104},"输入预测",[106],{"type":19,"value":104},{"type":14,"tag":15,"props":108,"children":109},{},[110],{"type":19,"value":111},"让我们假设一个玩家有150毫秒的网络延迟，并开始前进。前进键被按下的信息被存储在用户命令，并发送至服务器。用户命令是由移动代码逻辑处理，玩家的角色将在游戏世界中向前行走。这个世界状态的变化传送到所有客户端的下一个快照的更新。因此玩家看到自己开始行动的响应会有150毫秒延迟，这种延迟对于高频动作游戏(体育，设计类游戏)会有明显的延迟感。玩家输入和相应的视觉反馈之间的延迟会产生一种奇怪的，不自然的感觉，使得玩家很难移动或精确瞄准。客户端的输入预测（cl_predict 1）执行是一种消除这种延迟的方法，让玩家的行动感到更即时。与其等待服务器来更新自己的位置，在本地客户端只是预测自己的用户命令的结果。因此，客户端准确运行相同的代码和规则服务器将使用来处理用户命令。预测完成后，当地的玩家会移动到新位置，而服务器仍然可以看到他在老地方。150毫秒后，客户会收到包含基于他早期预测用户命令更改服务器的快照。客户端会将预测位置同服务器的位置对比。如果它们是不同的，则发生了预测误差。这表明，在客户端没有关于其他实体的正确信息和环境时，它处理用户命令。然后，客户端必须纠正自己的位置，因为服务器拥有客户端预测最终决定权。如果cl_showerror 1开启，客户端可以看到，当预测误差发生。预测误差校正可以是相当明显的，并且可能导致客户端的视图不规则跳动。通过在一定时间（cl_smoothtime）逐渐纠正这个错误，错误可以顺利解决。预测误差平滑处理可以通过设置cl_smooth 0来关闭。预测只对本地玩家以及那些只收它影响的实体有效，因为预测的工作原理是使用客户端的操作来预测的。对于其他玩家没法做有效预测, 因为没有办法立即从他们身上得到操作信息。",{"type":14,"tag":39,"props":113,"children":115},{"id":114},"延迟补偿",[116],{"type":19,"value":114},{"type":14,"tag":15,"props":118,"children":119},{},[120],{"type":19,"value":121},"​    比方说，一个玩家在10.5s的时刻射击了一个目标。射击信息被打包到用户命令，该命令通过网络的方式发送至服务器。服务器持续模拟游戏世界，目标可能已经移动到一个不同的位置。用户命令到达服务器时间10.6时服务器就无法检测到射击命中，即使玩家已经在目标准确瞄准。这个错误需要由服务器侧进行延迟补偿校正。延迟补偿系统使所有玩家最近位置的历史一秒。如果在执行用户的命令，服务器预计在命令创建什么时间如下：",{"type":14,"tag":15,"props":123,"children":124},{},[125],{"type":19,"value":126},"命令执行时间=当前服务器时间 - 数据包延迟 - 客户端查看插值",{"type":14,"tag":15,"props":128,"children":129},{},[130],{"type":19,"value":131},"然后服务器会将所有其他玩家回溯到命令执行时的位置，他们在命令执行时间。用户指令被执行，并正确地检测命中。用户命令处理完成后，玩家将会恢复到原来的位置。由于实体插值包含在公式中，可能会导致意外的结果。服务器端可以启用sv_showimpacts 1，显示服务器和客户端射击包围盒位置差异：",{"type":14,"tag":15,"props":133,"children":134},{},[135],{"type":14,"tag":29,"props":136,"children":138},{"alt":29,"src":137},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175552144-269867355.jpg",[],{"type":14,"tag":15,"props":140,"children":141},{},[142],{"type":19,"value":143},"该画面在主机上设置延迟200毫秒(net_fakelag设置)时获取的，射击真实命中玩家。红色命中包围盒显示了客户端那里是100毫秒+插补周期前的目标位置。此后，目标继续向左移动，而用户命令被行进到服务器。用户命令到达后，服务器恢复基于所述估计的命令执行时间目标位置（蓝色击中盒）。服务器回溯演绎，并确认命中（客户端看到流血效果）。",{"type":14,"tag":15,"props":145,"children":146},{},[147],{"type":19,"value":148},"因为在时间测量精度的误差客户端和服务器命中包围盒不完全匹配。对于快速移动的物体甚至几毫秒的误差也会导致几英寸的误差。多人游戏击中检测不是基于像素的完美匹配，此外基于tickrate模拟的运动物体的速度也有精度的限制。",{"type":14,"tag":15,"props":150,"children":151},{},[152],{"type":19,"value":153},"既然击中检测服务器上的逻辑如此复杂为什么不把命中检查放在客户端呢？如果在客户端进行命中检查, 玩家位置和像素命中处理检测都可以精准的进行。客户端将只告诉服务器用“打”的消息一直打到什么样的玩家。因为游戏服务器不能信任客户端这种重要决定。因为即使客户端是“干净”的，并通过了Valve反作弊保护，但是报文可以被截获修改然后发送到游戏服务器。这些“作弊代理”可以注入“打”的消息到网络数据包而不被VAC被检测。",{"type":14,"tag":15,"props":155,"children":156},{},[157],{"type":19,"value":158},"网络延迟和滞后补偿可能会引起真实的世界不可能的逻辑。例如，您可能被你看不到的目标所击中。服务器移到你的命中包围盒时光倒流，你仍然暴露给了攻击者。这种不一致问题不能通过一般化的防范解决，因为相对网络包传输的速度。在现实世界中，因为光传播如此之快，你，每个人都在你身边看到同一个世界，所以你才你没有注意到这个问题。",{"type":14,"tag":39,"props":160,"children":162},{"id":161},"网络视图net_graph",[163],{"type":19,"value":164},"网络视图NET_Graph",{"type":14,"tag":15,"props":166,"children":167},{},[168],{"type":19,"value":169},"Source引擎提供了一些工具来检查您的客户端连接速度和质量。使用net_graph 2可以启用相关的视图。下面的曲线图中，第一行显示每秒当前的渲染的帧，您的平均延迟时间，以及的cl_updaterate的当前值。第二行显示在最后进来的数据包（快照），平均传入带宽和每秒接收的数据包的字节大小。第三行显示刚刚传出的数据包（用户命令）相同的数据。",{"type":14,"tag":15,"props":171,"children":172},{},[173],{"type":14,"tag":29,"props":174,"children":176},{"alt":29,"src":175},"/images/2020-02-02-Source_Multiplayer_Networking/83792-20170707175609190-66628227.jpg",[],{"type":14,"tag":15,"props":178,"children":179},{},[180],{"type":19,"value":181},"默认的网络设置是专门为通过互联网连接的游戏服务器设计的。可以适用大多数客户机/服务器的硬件和网络配置工作。对于网络游戏，应该在客户端上进行调整，唯一的控制台变量是“rate”，它定义客户端可用的字节/网络连接带宽。",{"type":14,"tag":15,"props":183,"children":184},{},[185],{"type":19,"value":186},"在一个良好的网络环境中，服务器和所有客户端都具有必要的硬件资源可用，可以调整带宽和更新频率设置，来获得更多的游戏精度。增加tickrate通常可以提高运动和射击精度，但会消耗更多的服务器CPU资源。tickrate 100运行的服务器的负载大概是tickrate 66运行时的约1.5倍, 因此如果CPU性能不足可能会导致严重的计算滞后，尤其是在玩家数量比较多的时候。建议对具有更高tickrate超的游戏服务器预留必要的CPU资源。",{"type":14,"tag":15,"props":188,"children":189},{},[190],{"type":19,"value":191},"如果游戏服务器使用较高tickrate运行时，客户端可以在带宽可用的情况下增加他们的快照更新率（的cl_updaterate）和用户命令速率（的cl_cmdrate）。快照更新速率由服务器tickrate限制，一台服务器无法发送每个时钟周期的一个以上的更新。因此，对于一个tickrate66服务器，为的cl_updaterate最高的客户价值，将是66。如果你增加快照率遇到，你必须再次打开它。与增加的cl_updaterate你也可以降低画面插值延迟（cl_interp）。默认的插值延迟为0.1秒(默认的cl_updaterate为20) 视图内插延迟会导致移动的玩家会比静止不动的玩家更早发现对方。这种效果是不可避免的，但可以通过减小视图内插值延迟来减小。如果双方玩家正在移动，画面滞后会延迟影响双方玩家,双方玩家都不能获利。快照速率和视图延迟插值之间的关系如下：",{"type":14,"tag":15,"props":193,"children":194},{},[195],{"type":19,"value":196},"插补周期= MAX(cl_interp，cl_interp_ratio /cl_updaterate)",{"type":14,"tag":15,"props":198,"children":199},{},[200],{"type":19,"value":201},"可以设置cl_interp为0，仍然有插值的安全量。也可以把cl_updaterate增加，进一步降低你的插补周期，但不会超过更新tickrate(66)或客户端的网络处理能力。",{"type":14,"tag":39,"props":203,"children":205},{"id":204},"tips",[206],{"type":19,"value":207},"Tips",{"type":14,"tag":15,"props":209,"children":210},{},[211],{"type":19,"value":212},"不要瞎改终端配置除非你完全确定你在干嘛",{"type":14,"tag":15,"props":214,"children":215},{},[216],{"type":19,"value":217},"​    如果客户端和服务器没有足够CPU和网络资源，绝大多数所所谓高性能优化都是起负面作用",{"type":14,"tag":15,"props":219,"children":220},{},[221],{"type":19,"value":222},"不要关闭画面插值和延迟补偿",{"type":14,"tag":15,"props":224,"children":225},{},[226],{"type":19,"value":227},"​    这样并不能代理移动和设计精准度提升",{"type":14,"tag":15,"props":229,"children":230},{},[231],{"type":19,"value":232},"优化设置可能不会对每个客户端都有效",{"type":14,"tag":15,"props":234,"children":235},{},[236],{"type":19,"value":237},"如果是你是在游戏里或者SourceTv里第一视角观看你看到的画面和玩家可能不一样",{"type":14,"tag":15,"props":239,"children":240},{},[241],{"type":19,"value":242},"观战者的画面没有延迟补偿",{"type":14,"tag":15,"props":244,"children":245},{},[246],{"type":14,"tag":247,"props":248,"children":252},"a",{"href":249,"rel":250},"https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking",[251],"nofollow",[253],{"type":19,"value":249},{"title":7,"searchDepth":255,"depth":255,"links":256},2,[257,259,260,261,262,263],{"id":41,"depth":258,"text":41},3,{"id":66,"depth":258,"text":69},{"id":104,"depth":258,"text":104},{"id":114,"depth":258,"text":114},{"id":161,"depth":258,"text":164},{"id":204,"depth":258,"text":207},"markdown","content:dotnet:2020-02-02-Source_Multiplayer_Networking.md","content","dotnet/2020-02-02-Source_Multiplayer_Networking.md","md","2020-02-02",[271,281,406,455,507,520,632],{"title":272,"_path":273,"children":274},"Art","/art",[275,278],{"title":276,"_path":277},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":279,"_path":280},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":282,"_path":283,"children":284},"Dotnet","/dotnet",[285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,334,337,340,343,346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403],{"title":286,"_path":287},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":289,"_path":290},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":292,"_path":293},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":295,"_path":296},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":298,"_path":299},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":301,"_path":302},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":304,"_path":305},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":307,"_path":308},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":310,"_path":311},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":313,"_path":314},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":316,"_path":317},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":319,"_path":320},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":322,"_path":323},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":325,"_path":326},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":328,"_path":329},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":331,"_path":332},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":8,"_path":4},{"title":335,"_path":336},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":338,"_path":339},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":341,"_path":342},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":344,"_path":345},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":347,"_path":348},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":350,"_path":351},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":353,"_path":354},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":356,"_path":357},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":359,"_path":360},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":362,"_path":363},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":365,"_path":366},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":368,"_path":369},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":371,"_path":372},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":374,"_path":375},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":377,"_path":378},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":380,"_path":381},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":383,"_path":384},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":386,"_path":387},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":389,"_path":390},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":392,"_path":393},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":395,"_path":396},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":398,"_path":399},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":401,"_path":402},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":404,"_path":405},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":407,"_path":408,"children":409},"Game","/game",[410,413,416,419,422,425,428,431,434,437,440,443,446,449,452],{"title":411,"_path":412},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":414,"_path":415},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":417,"_path":418},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":420,"_path":421},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":423,"_path":424},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":426,"_path":427},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":429,"_path":430},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":432,"_path":433},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":435,"_path":436},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":438,"_path":439},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":441,"_path":442},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":444,"_path":445},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":447,"_path":448},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":450,"_path":451},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":453,"_path":454},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":456,"_path":457,"children":458},"Gyj","/gyj",[459,462,465,468,471,474,477,480,483,486,489,492,495,498,501,504],{"title":460,"_path":461},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":463,"_path":464},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":466,"_path":467},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":469,"_path":470},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":472,"_path":473},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":475,"_path":476},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":478,"_path":479},"玩法","/gyj/2022-08-22-wanfa",{"title":481,"_path":482},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":484,"_path":485},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":487,"_path":488},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":490,"_path":491},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":493,"_path":494},"门派内容相关","/gyj/2022-11-17-sect",{"title":496,"_path":497},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":499,"_path":500},"种植","/gyj/2022-12-01-zhongzhi",{"title":502,"_path":503},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":505,"_path":506},"跑商","/gyj/2023-11-01-paoshang",{"title":508,"_path":509,"children":510},"Js","/js",[511,514,517],{"title":512,"_path":513},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":515,"_path":516},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":518,"_path":519},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":521,"_path":522,"children":523},"Tool","/tool",[524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,614,617,620,623,626,629],{"title":525,"_path":526},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":528,"_path":529},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":531,"_path":532},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":534,"_path":535},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":537,"_path":538},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":540,"_path":541},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":543,"_path":544},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":546,"_path":547},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":549,"_path":550},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":552,"_path":553},"mac下brew 使用","/tool/2020-01-13-brew",{"title":555,"_path":556},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":558,"_path":559},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":561,"_path":562},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":564,"_path":565},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":567,"_path":568},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":570,"_path":571},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":573,"_path":574},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":576,"_path":577},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":579,"_path":580},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":582,"_path":583},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":585,"_path":586},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":588,"_path":589},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":591,"_path":592},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":594,"_path":595},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":597,"_path":598},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":600,"_path":601},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":603,"_path":604},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":606,"_path":607},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":609,"_path":610},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":612,"_path":613},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":615,"_path":616},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":618,"_path":619},"rider的使用","/tool/2022-08-02-rider-use",{"title":621,"_path":622},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":624,"_path":625},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":627,"_path":628},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":630,"_path":631},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":633,"_path":634,"children":635},"Unity","/unity",[636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786,789,792,795,798,801,804,807,810,813,816,819,822,825,828,831,834,837,840,843,846,849],{"title":637,"_path":638},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":640,"_path":641},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":643,"_path":644},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":646,"_path":647},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":649,"_path":650},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":652,"_path":653},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":655,"_path":656},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":658,"_path":659},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":661,"_path":662},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":664,"_path":665},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":667,"_path":668},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":670,"_path":671},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":673,"_path":674},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":676,"_path":677},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":679,"_path":680},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":682,"_path":683},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":685,"_path":686},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":688,"_path":689},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":691,"_path":692},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":694,"_path":695},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":697,"_path":698},"技能系统","/unity/2020-02-15-skill-system",{"title":700,"_path":701},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":703,"_path":704},"角色状态设计","/unity/2020-02-17-character-states",{"title":706,"_path":707},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":709,"_path":710},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":712,"_path":713},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":715,"_path":716},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":718,"_path":719},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":721,"_path":722},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":724,"_path":725},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":727,"_path":728},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":730,"_path":731},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":733,"_path":734},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":736,"_path":737},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":739,"_path":740},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":742,"_path":743},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":745,"_path":746},"unity的addressables","/unity/2020-09-12-addressables",{"title":748,"_path":749},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":751,"_path":752},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":754,"_path":755},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":757,"_path":758},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":760,"_path":761},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":763,"_path":764},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":766,"_path":767},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":769,"_path":770},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":772,"_path":773},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":775,"_path":776},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":778,"_path":779},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":781,"_path":782},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":784,"_path":785},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":787,"_path":788},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":790,"_path":791},"简单保存工具","/unity/2020-11-13-simple-save",{"title":793,"_path":794},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":796,"_path":797},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":799,"_path":800},"ability","/unity/2020-11-16-dotssample",{"title":802,"_path":803},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":805,"_path":806},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":808,"_path":809},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":811,"_path":812},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":814,"_path":815},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":817,"_path":818},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":820,"_path":821},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":823,"_path":824},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":826,"_path":827},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":829,"_path":830},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":832,"_path":833},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":835,"_path":836},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":838,"_path":839},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":841,"_path":842},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":844,"_path":845},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":847,"_path":848},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":850,"_path":851},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040963]