[{"data":1,"prerenderedAt":835},["Reactive",2],{"content-query-XCbpTDCG2c":3,"content-navigation-8C37fagqQL":253},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":247,"_id":248,"_source":249,"_file":250,"_extension":251,"date":252},"/dotnet/2020-08-17-netcore-options","dotnet",false,"","IOptions、IOptionsMonitor以及IOptionsSnapshot","ASP.NET Core引入了Options模式，使用类来表示相关的设置组。简单的来说，就是用强类型的类来表达配置项，这带来了很多好处。\n初学者会发现这个框架有3个主要的面向消费者的接口：IOptions、IOptionsMonitor以及IOptionsSnapshot。\n这三个接口初看起来很类似，所以很容易引起困惑，什么场景下该用哪个接口呢？",{"type":11,"children":12,"toc":244},"root",[13,21,26,31,36,46,51,59,64,69,80,85,93,98,103,111,116,124,129,134,142,147,155,160,168,173,178,183,188,213,218,231,239],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"背景",[19],{"type":20,"value":17},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25],{"type":20,"value":9},{"type":14,"tag":15,"props":27,"children":29},{"id":28},"示例",[30],{"type":20,"value":28},{"type":14,"tag":22,"props":32,"children":33},{},[34],{"type":20,"value":35},"我们先从一小段代码着手（TestOptions类只有一个字符串属性Name，代码略）：",{"type":14,"tag":37,"props":38,"children":40},"pre",{"code":39},"class Program\n{\n    static void Main(string[] args)\n    {\n        var builder = new ConfigurationBuilder();\n        builder.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true); //注意最后一个参数值，true表示配置文件更改时会重新加载。\n        var configuration = builder.Build();\n        var services = new ServiceCollection();\n        services.AddOptions();\n        services.Configure\u003CTestOptions>(configuration); //这里通过配置文件绑定TestOptions\n        var provider = services.BuildServiceProvider();\n        Console.WriteLine(\"修改前：\");\n        Print(provider);\n\n        Change(provider); //使用代码修改Options值。\n        Console.WriteLine(\"使用代码修改后：\");\n        Print(provider);\n\n        Console.WriteLine(\"请修改配置文件。\");\n        Console.ReadLine(); //等待手动修改appsettings.json配置文件。\n        Console.WriteLine(\"修改appsettings.json文件后：\");\n        Print(provider);\n    }\n\n    static void Print(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            var options1 = sp.GetRequiredService\u003CIOptions\u003CTestOptions>>();\n            var options2 = sp.GetRequiredService\u003CIOptionsMonitor\u003CTestOptions>>();\n            var options3 = sp.GetRequiredService\u003CIOptionsSnapshot\u003CTestOptions>>();\n            Console.WriteLine(\"IOptions值: {0}\", options1.Value.Name);\n            Console.WriteLine(\"IOptionsMonitor值: {0}\", options2.CurrentValue.Name);\n            Console.WriteLine(\"IOptionsSnapshot值: {0}\", options3.Value.Name);\n            Console.WriteLine();\n        }\n    }\n\n    static void Change(IServiceProvider provider)\n    {\n        using(var scope = provider.CreateScope())\n        {\n            var sp = scope.ServiceProvider;\n            sp.GetRequiredService\u003CIOptions\u003CTestOptions>>().Value.Name = \"IOptions Test 1\";\n            sp.GetRequiredService\u003CIOptionsMonitor\u003CTestOptions>>().CurrentValue.Name = \"IOptionsMonitor Test 1\";\n            sp.GetRequiredService\u003CIOptionsSnapshot\u003CTestOptions>>().Value.Name = \"IOptionsSnapshot Test 1\";\n        }\n    }\n}\n",[41],{"type":14,"tag":42,"props":43,"children":44},"code",{"__ignoreMap":7},[45],{"type":20,"value":39},{"type":14,"tag":22,"props":47,"children":48},{},[49],{"type":20,"value":50},"appsettings.json文件：",{"type":14,"tag":37,"props":52,"children":54},{"code":53},"{\n    \"Name\": \"Test 0\"\n}\n",[55],{"type":14,"tag":42,"props":56,"children":57},{"__ignoreMap":7},[58],{"type":20,"value":53},{"type":14,"tag":22,"props":60,"children":61},{},[62],{"type":20,"value":63},"上面的代码，首先从appsettings.json文件读取配置，然后向容器注册依赖配置文件的TestOptions，接着分别打印IOptions\u003C>,IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>的值。",{"type":14,"tag":22,"props":65,"children":66},{},[67],{"type":20,"value":68},"接着通过代码来修改TestOptions的值，打印。\n然后通过修改appsettings.json文件来修改TestOptions的值，打印。",{"type":14,"tag":22,"props":70,"children":71},{},[72,74],{"type":20,"value":73},"注意，",{"type":14,"tag":75,"props":76,"children":77},"strong",{},[78],{"type":20,"value":79},"我们仅注册了一次TestOptions，却可以分别通过IOptions\u003C>,IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>接口来获取TestOptions的值。",{"type":14,"tag":22,"props":81,"children":82},{},[83],{"type":20,"value":84},"如果我们把appsettings.json文件中Name的值修改为Test 2，那么上面这段代码的输出是这样的：",{"type":14,"tag":22,"props":86,"children":87},{},[88],{"type":14,"tag":89,"props":90,"children":92},"img",{"alt":89,"src":91},"/images/2020-08-17-netcore-options/94928-20200323160553644-291512622.png",[],{"type":14,"tag":15,"props":94,"children":96},{"id":95},"分析",[97],{"type":20,"value":95},{"type":14,"tag":22,"props":99,"children":100},{},[101],{"type":20,"value":102},"我们可以看到第一次通过代码修改IOptions\u003C>和IOptionsMonitor\u003C>的值后，再次打印都被更新了，但是IOptionsSnapshot\u003C>没有，为什么呢？\n让我们从Options框架的源代码着手，理解为什么会这样。\n当我们需要使用Options模式时，我们都会调用定义在OptionsServiceCollectionExtensions类上的扩展方法AddOptions(this IServiceCollection services)。",{"type":14,"tag":37,"props":104,"children":106},{"code":105},"var services = new ServiceCollection();\nservices.AddOptions();\n",[107],{"type":14,"tag":42,"props":108,"children":109},{"__ignoreMap":7},[110],{"type":20,"value":105},{"type":14,"tag":22,"props":112,"children":113},{},[114],{"type":20,"value":115},"我们观察AddOptions方法的实现：",{"type":14,"tag":37,"props":117,"children":119},{"code":118},"public static IServiceCollection AddOptions(this IServiceCollection services)\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptions\u003C>), typeof(OptionsManager\u003C>)));\n    services.TryAdd(ServiceDescriptor.Scoped(typeof(IOptionsSnapshot\u003C>), typeof(OptionsManager\u003C>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitor\u003C>), typeof(OptionsMonitor\u003C>)));\n    services.TryAdd(ServiceDescriptor.Transient(typeof(IOptionsFactory\u003C>), typeof(OptionsFactory\u003C>)));\n    services.TryAdd(ServiceDescriptor.Singleton(typeof(IOptionsMonitorCache\u003C>), typeof(OptionsCache\u003C>)));\n    return services;\n}\n",[120],{"type":14,"tag":42,"props":121,"children":122},{"__ignoreMap":7},[123],{"type":20,"value":118},{"type":14,"tag":22,"props":125,"children":126},{},[127],{"type":20,"value":128},"从上面的代码我们可以得知，IOptions\u003C>和IOptionsMonitor\u003C>被注册为单例服务，而IOptionsSnapshot\u003C>被注册为范围服务。\n由于IOptions\u003C>和IOptionsMonitor\u003C>都被注册为单例服务，因此每次获取的都是同一个实例，所以更改了以后的值是保留的。\n而IOptionsSnapshot\u003C>被注册为范围服务，所以每次创建新范围时获取的都是一个新的值，外部的更改只对当次有效，不会保留到下次（不能跨范围，对于ASP.NET Core来说不能跨请求）。",{"type":14,"tag":22,"props":130,"children":131},{},[132],{"type":20,"value":133},"我们继续看第二次修改，第二次修改配置文件后IOptionsMonitor\u003C>和IOptionsSnapshot\u003C>的值更新了，而IOptions\u003C>的值没有更新。\nIOptions\u003C>好理解，它被注册为单例服务，第一次访问的时候生成实例并加载配置文件中的值，此后再也不会读取配置文件，所以它的值不会更新。\nIOptionsSnapshot\u003C>被注册为范围服务，每次重新生成一个新的范围时，它都会从配置文件中获取值，因此它的值会更新。\n但是，IOptionsMonitor\u003C>呢，它被注册为单例，为什么也会更新呢？\n让我们回到AddOptions的源代码，我们留意到IOptionsMonitor\u003C>的实现是OptionsManager\u003C>。\n当我们打开OptionsManager的源代码时，一切都很清楚了。\n它的构造函数如下：",{"type":14,"tag":37,"props":135,"children":137},{"code":136},"public OptionsMonitor(IOptionsFactory\u003CTOptions> factory, IEnumerable\u003CIOptionsChangeTokenSource\u003CTOptions>> sources, IOptionsMonitorCache\u003CTOptions> cache)\n{\n    _factory = factory;\n    _sources = sources;\n    _cache = cache;\n\n    foreach (var source in _sources)\n    {\n        var registration = ChangeToken.OnChange(\n                () => source.GetChangeToken(),\n                (name) => InvokeChanged(name),\n                source.Name);\n\n        _registrations.Add(registration);\n    }\n}\n",[138],{"type":14,"tag":42,"props":139,"children":140},{"__ignoreMap":7},[141],{"type":20,"value":136},{"type":14,"tag":22,"props":143,"children":144},{},[145],{"type":20,"value":146},"原来OptionsMonitor的更新能力是从IOptionsChangeTokenSource而来，但是这个接口的实例又是谁呢？\n我们回到最开始的代码的第10行：",{"type":14,"tag":37,"props":148,"children":150},{"code":149},"services.Configure\u003CTestOptions>(configuration);\n",[151],{"type":14,"tag":42,"props":152,"children":153},{"__ignoreMap":7},[154],{"type":20,"value":149},{"type":14,"tag":22,"props":156,"children":157},{},[158],{"type":20,"value":159},"这是一个定义在Microsoft.Extensions.Options.ConfigurationExtensions.dll的扩展方法，最后实际调用的是它的一个重载方法，代码如下：",{"type":14,"tag":37,"props":161,"children":163},{"code":162},"public static IServiceCollection Configure\u003CTOptions>(this IServiceCollection services, string name, IConfiguration config, Action\u003CBinderOptions> configureBinder)\n    where TOptions : class\n{\n    if (services == null)\n    {\n        throw new ArgumentNullException(nameof(services));\n    }\n\n    if (config == null)\n    {\n        throw new ArgumentNullException(nameof(config));\n    }\n\n    services.AddOptions();\n    services.AddSingleton\u003CIOptionsChangeTokenSource\u003CTOptions>>(new ConfigurationChangeTokenSource\u003CTOptions>(name, config));\n    return services.AddSingleton\u003CIConfigureOptions\u003CTOptions>>(new NamedConfigureFromConfigurationOptions\u003CTOptions>(name, config, configureBinder));\n}\n",[164],{"type":14,"tag":42,"props":165,"children":166},{"__ignoreMap":7},[167],{"type":20,"value":162},{"type":14,"tag":22,"props":169,"children":170},{},[171],{"type":20,"value":172},"秘密就在上面的第15行，ConfigurationChangeTokenSource，它引用了代表配置文件的对象config，所以配置文件更新，IOptionsMonitor就会跟着更新。",{"type":14,"tag":15,"props":174,"children":176},{"id":175},"结论",[177],{"type":20,"value":175},{"type":14,"tag":22,"props":179,"children":180},{},[181],{"type":20,"value":182},"IOptions\u003C>是单例，因此一旦生成了，除非通过代码的方式更改，它的值是不会更新的。\nIOptionsMonitor\u003C>也是单例，但是它通过IOptionsChangeTokenSource\u003C> 能够和配置文件一起更新，也能通过代码的方式更改值。\nIOptionsSnapshot\u003C>是范围，所以在配置文件更新的下一次访问，它的值会更新，但是它不能跨范围通过代码的方式更改值，只能在当前范围（请求）内有效。",{"type":14,"tag":22,"props":184,"children":185},{},[186],{"type":20,"value":187},"官方文档是这样介绍的：\nIOptionsMonitor用于检索选项和管理TOptions实例的选项通知，它支持下面的场景：",{"type":14,"tag":189,"props":190,"children":191},"ul",{},[192,198,203,208],{"type":14,"tag":193,"props":194,"children":195},"li",{},[196],{"type":20,"value":197},"实例更新通知。",{"type":14,"tag":193,"props":199,"children":200},{},[201],{"type":20,"value":202},"命名实例。",{"type":14,"tag":193,"props":204,"children":205},{},[206],{"type":20,"value":207},"重新加载配置。",{"type":14,"tag":193,"props":209,"children":210},{},[211],{"type":20,"value":212},"选择性的让实例失效。",{"type":14,"tag":22,"props":214,"children":215},{},[216],{"type":20,"value":217},"IOptionsSnapshot在需要对每个请求重新计算选项的场景中非常有用。\nIOptions可以用来支持Options模式，但是它不支持前面两者所支持的场景，如果你不需要支持上面的场景，你可以继续使用IOptions。",{"type":14,"tag":22,"props":219,"children":220},{},[221,223,229],{"type":20,"value":222},"所以你应该根据你的实际使用场景来选择到底是用这三者中的哪一个。\n",{"type":14,"tag":224,"props":225,"children":226},"em",{},[227],{"type":20,"value":228},"一般来说，如果你依赖配置文件，那么首先考虑IOptionsMonitor\u003C>，如果不合适接着考虑IOptionsSnapshot\u003C>，最后考虑IOptions\u003C>。*",{"type":20,"value":230},"\n***有一点需要注意，在ASP.NET Core应用中IOptionsMonitor可能会导致同一个请求中选项的值不一致——当你正在修改配置文件的时候——这可能会引发一些奇怪的bug。\n如果这个对你很重要，请使用IOptionsSnapshot，它可以保证同一个请求中的一致性，但是它可能会带来轻微的性能上的损失。\n如果你是在app启动的时候自己构造Options（比如在Startup类中）：",{"type":14,"tag":37,"props":232,"children":234},{"code":233},"services.Configure\u003CTestOptions>(opt => opt.Name = \"Test 0\");\n",[235],{"type":14,"tag":42,"props":236,"children":237},{"__ignoreMap":7},[238],{"type":20,"value":233},{"type":14,"tag":22,"props":240,"children":241},{},[242],{"type":20,"value":243},"IOptions\u003C>最简单，也许是一个不错的选择，Configure扩展方法还有其他重载可以满足你的更多需求。",{"title":7,"searchDepth":245,"depth":245,"links":246},2,[],"markdown","content:dotnet:2020-08-17-netcore-options.md","content","dotnet/2020-08-17-netcore-options.md","md","2020-08-17",[254,264,389,438,490,503,615],{"title":255,"_path":256,"children":257},"Art","/art",[258,261],{"title":259,"_path":260},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":262,"_path":263},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":265,"_path":266,"children":267},"Dotnet","/dotnet",[268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364,367,370,373,374,377,380,383,386],{"title":269,"_path":270},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":272,"_path":273},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":275,"_path":276},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":278,"_path":279},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":281,"_path":282},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":284,"_path":285},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":287,"_path":288},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":290,"_path":291},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":293,"_path":294},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":296,"_path":297},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":299,"_path":300},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":302,"_path":303},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":305,"_path":306},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":308,"_path":309},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":311,"_path":312},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":314,"_path":315},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":317,"_path":318},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":320,"_path":321},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":323,"_path":324},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":326,"_path":327},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":329,"_path":330},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":332,"_path":333},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":335,"_path":336},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":338,"_path":339},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":341,"_path":342},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":344,"_path":345},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":347,"_path":348},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":350,"_path":351},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":353,"_path":354},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":356,"_path":357},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":359,"_path":360},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":362,"_path":363},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":365,"_path":366},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":368,"_path":369},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":371,"_path":372},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":8,"_path":4},{"title":375,"_path":376},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":378,"_path":379},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":381,"_path":382},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":384,"_path":385},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":387,"_path":388},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":390,"_path":391,"children":392},"Game","/game",[393,396,399,402,405,408,411,414,417,420,423,426,429,432,435],{"title":394,"_path":395},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":397,"_path":398},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":400,"_path":401},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":403,"_path":404},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":406,"_path":407},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":409,"_path":410},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":412,"_path":413},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":415,"_path":416},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":418,"_path":419},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":421,"_path":422},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":424,"_path":425},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":427,"_path":428},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":430,"_path":431},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":433,"_path":434},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":436,"_path":437},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":439,"_path":440,"children":441},"Gyj","/gyj",[442,445,448,451,454,457,460,463,466,469,472,475,478,481,484,487],{"title":443,"_path":444},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":446,"_path":447},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":449,"_path":450},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":452,"_path":453},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":455,"_path":456},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":458,"_path":459},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":461,"_path":462},"玩法","/gyj/2022-08-22-wanfa",{"title":464,"_path":465},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":467,"_path":468},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":470,"_path":471},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":473,"_path":474},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":476,"_path":477},"门派内容相关","/gyj/2022-11-17-sect",{"title":479,"_path":480},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":482,"_path":483},"种植","/gyj/2022-12-01-zhongzhi",{"title":485,"_path":486},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":488,"_path":489},"跑商","/gyj/2023-11-01-paoshang",{"title":491,"_path":492,"children":493},"Js","/js",[494,497,500],{"title":495,"_path":496},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":498,"_path":499},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":501,"_path":502},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":504,"_path":505,"children":506},"Tool","/tool",[507,510,513,516,519,522,525,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,576,579,582,585,588,591,594,597,600,603,606,609,612],{"title":508,"_path":509},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":511,"_path":512},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":514,"_path":515},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":517,"_path":518},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":520,"_path":521},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":523,"_path":524},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":526,"_path":527},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":529,"_path":530},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":532,"_path":533},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":535,"_path":536},"mac下brew 使用","/tool/2020-01-13-brew",{"title":538,"_path":539},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":541,"_path":542},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":544,"_path":545},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":547,"_path":548},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":550,"_path":551},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":553,"_path":554},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":556,"_path":557},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":559,"_path":560},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":562,"_path":563},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":565,"_path":566},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":568,"_path":569},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":571,"_path":572},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":574,"_path":575},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":577,"_path":578},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":580,"_path":581},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":583,"_path":584},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":586,"_path":587},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":589,"_path":590},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":592,"_path":593},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":595,"_path":596},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":598,"_path":599},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":601,"_path":602},"rider的使用","/tool/2022-08-02-rider-use",{"title":604,"_path":605},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":607,"_path":608},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":610,"_path":611},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":613,"_path":614},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":616,"_path":617,"children":618},"Unity","/unity",[619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832],{"title":620,"_path":621},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":623,"_path":624},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":626,"_path":627},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":629,"_path":630},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":632,"_path":633},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":635,"_path":636},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":638,"_path":639},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":641,"_path":642},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":644,"_path":645},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":647,"_path":648},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":650,"_path":651},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":653,"_path":654},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":656,"_path":657},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":659,"_path":660},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":662,"_path":663},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":665,"_path":666},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":668,"_path":669},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":671,"_path":672},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":674,"_path":675},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":677,"_path":678},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":680,"_path":681},"技能系统","/unity/2020-02-15-skill-system",{"title":683,"_path":684},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":686,"_path":687},"角色状态设计","/unity/2020-02-17-character-states",{"title":689,"_path":690},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":692,"_path":693},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":695,"_path":696},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":698,"_path":699},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":701,"_path":702},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":704,"_path":705},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":707,"_path":708},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":710,"_path":711},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":713,"_path":714},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":716,"_path":717},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":719,"_path":720},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":722,"_path":723},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":725,"_path":726},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":728,"_path":729},"unity的addressables","/unity/2020-09-12-addressables",{"title":731,"_path":732},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":734,"_path":735},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":737,"_path":738},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":740,"_path":741},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":743,"_path":744},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":746,"_path":747},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":749,"_path":750},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":752,"_path":753},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":755,"_path":756},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":758,"_path":759},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":761,"_path":762},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":764,"_path":765},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":767,"_path":768},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":770,"_path":771},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":773,"_path":774},"简单保存工具","/unity/2020-11-13-simple-save",{"title":776,"_path":777},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":779,"_path":780},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":782,"_path":783},"ability","/unity/2020-11-16-dotssample",{"title":785,"_path":786},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":788,"_path":789},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":791,"_path":792},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":794,"_path":795},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":797,"_path":798},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":800,"_path":801},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":803,"_path":804},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":806,"_path":807},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":809,"_path":810},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":812,"_path":813},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":815,"_path":816},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":818,"_path":819},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":821,"_path":822},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":824,"_path":825},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":827,"_path":828},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":830,"_path":831},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":833,"_path":834},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038206]