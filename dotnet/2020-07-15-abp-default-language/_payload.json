[{"data":1,"prerenderedAt":999},["Reactive",2],{"content-query-wRuIyBSxgk":3,"content-navigation-8C37fagqQL":417},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":411,"_id":412,"_source":413,"_file":414,"_extension":415,"date":416},"/dotnet/2020-07-15-abp-default-language","dotnet",false,"","abp默认语言规则","abp是依托与aspnetcore的.我们先来看看aspnetcore是怎么实现的",{"type":11,"children":12,"toc":398},"root",[13,20,25,35,41,89,101,106,115,120,129,140,145,150,155,160,171,184,191,197,264,293,298,303,311,316,324,329,334,347,372,377,385,390],{"type":14,"tag":15,"props":16,"children":17},"element","h1",{"id":8},[18],{"type":19,"value":8},"text",{"type":14,"tag":21,"props":22,"children":23},"p",{},[24],{"type":19,"value":9},{"type":14,"tag":26,"props":27,"children":29},"pre",{"code":28},"\n    services.Configure\u003CRequestLocalizationOptions>(options =>\n        {\n            var supportedCultures = new List\u003CCultureInfo>\n            {\n                new CultureInfo(\"en-US\"),\n                new CultureInfo(\"en\"),\n                new CultureInfo(\"fr-FR\"),\n                new CultureInfo(\"fr\")\n            };\n\n            options.DefaultRequestCulture = new RequestCulture(\"en-US\");\n            options.SupportedCultures = supportedCultures;\n            options.SupportedUICultures = supportedCultures;\n        });\n        \n        \n        //中间件\n        app.UseRequestLocalization();\n",[30],{"type":14,"tag":31,"props":32,"children":33},"code",{"__ignoreMap":7},[34],{"type":19,"value":28},{"type":14,"tag":36,"props":37,"children":39},"h2",{"id":38},"中间件request的语言判断",[40],{"type":19,"value":38},{"type":14,"tag":21,"props":42,"children":43},{},[44,46,55,57,64,66,71,73,79,81,87],{"type":19,"value":45},"在每次请求里 ",{"type":14,"tag":47,"props":48,"children":52},"a",{"href":49,"rel":50},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNet/Localization/RequestLocalizationOptions/index.html",[51],"nofollow",[53],{"type":19,"value":54},"RequestLocalizationOptions",{"type":19,"value":56}," 的 ",{"type":14,"tag":47,"props":58,"children":61},{"href":59,"rel":60},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/RequestCultureProvider/index.html",[51],[62],{"type":19,"value":63},"RequestCultureProvider",{"type":19,"value":65}," 列表会被遍历，第一个provider 会被使用来判断请求使用的文化。默认的 provider 来自",{"type":14,"tag":31,"props":67,"children":69},{"className":68},[],[70],{"type":19,"value":54},{"type":19,"value":72}," 类,如果没有非空的 provider，",{"type":14,"tag":31,"props":74,"children":76},{"className":75},[],[77],{"type":19,"value":78},"DefaultRequestCulture",{"type":19,"value":80}," 被使用。所以如果发现语言不是按照逻辑顺序显示,先检查请求网址,再检查",{"type":14,"tag":31,"props":82,"children":84},{"className":83},[],[85],{"type":19,"value":86},"cookie",{"type":19,"value":88},"(很难注意到),最后检查acceptlanguage",{"type":14,"tag":90,"props":91,"children":93},"h3",{"id":92},"querystringrequestcultureprovider",[94],{"type":14,"tag":47,"props":95,"children":98},{"href":96,"rel":97},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/QueryStringRequestCultureProvider/index.html",[51],[99],{"type":19,"value":100},"QueryStringRequestCultureProvider",{"type":14,"tag":21,"props":102,"children":103},{},[104],{"type":19,"value":105},"下面的例子指定了具体的区域性（语言和区域）设置为西班牙语/墨西哥：",{"type":14,"tag":21,"props":107,"children":108},{},[109],{"type":14,"tag":47,"props":110,"children":113},{"href":111,"rel":112},"http://localhost:5000/?culture=es-MX&ui-culture=es-MX",[51],[114],{"type":19,"value":111},{"type":14,"tag":21,"props":116,"children":117},{},[118],{"type":19,"value":119},"如果你仅仅使用（culture 或者 ui-culture）中的一个参数进行传递，查询字符串 provider 将使用你传递一个值来设置这两个参数。例如，仅设置culture，将会同样设置 Culture 和 UICulture：",{"type":14,"tag":21,"props":121,"children":122},{},[123],{"type":14,"tag":47,"props":124,"children":127},{"href":125,"rel":126},"http://localhost:5000/?culture=es-MX",[51],[128],{"type":19,"value":125},{"type":14,"tag":90,"props":130,"children":132},{"id":131},"cookierequestcultureprovider",[133],{"type":14,"tag":47,"props":134,"children":137},{"href":135,"rel":136},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/CookieRequestCultureProvider/index.html",[51],[138],{"type":19,"value":139},"CookieRequestCultureProvider",{"type":14,"tag":21,"props":141,"children":142},{},[143],{"type":19,"value":144},"CookieRequestCultureProvider 的 DefaultCookieName 返回用于跟踪用户的首选区域性信息默认的 Cookie 名称。默认的 Cookie 名称是 “.AspNetCore.Culture”。",{"type":14,"tag":21,"props":146,"children":147},{},[148],{"type":19,"value":149},"cookie 的格式是 c=%LANGCODE%|uic=%LANGCODE%, c 为区域信息 和 uic 为 UI 区域信息，例如：",{"type":14,"tag":21,"props":151,"children":152},{},[153],{"type":19,"value":154},"c=’en-UK’|uic=’en-US’",{"type":14,"tag":21,"props":156,"children":157},{},[158],{"type":19,"value":159},"如果仅指定 culture 或 UI culture中的一个，指定的区域性信息将同时用于 culture和 UI culture。",{"type":14,"tag":90,"props":161,"children":163},{"id":162},"acceptlanguageheaderrequestcultureprovider",[164],{"type":14,"tag":47,"props":165,"children":168},{"href":166,"rel":167},"https://docs.asp.net/projects/api/en/latest/autoapi/Microsoft/AspNetCore/Localization/AcceptLanguageHeaderRequestCultureProvider/index.html",[51],[169],{"type":19,"value":170},"AcceptLanguageHeaderRequestCultureProvider",{"type":14,"tag":21,"props":172,"children":173},{},[174,176,182],{"type":19,"value":175},"这个一般是根据浏览器的设置进行访问的\n",{"type":14,"tag":177,"props":178,"children":181},"img",{"alt":179,"src":180},"image-20200719113919074","/images/2020-07-15-abp-default-language/image-20200719113919074.png",[],{"type":19,"value":183},"\n不同的浏览器默认语言不同,chrome浏览器可以再语言里设置",{"type":14,"tag":21,"props":185,"children":186},{},[187],{"type":14,"tag":177,"props":188,"children":190},{"alt":177,"src":189},"/images/2020-07-15-abp-default-language/c83d70cf3bc79f3d3ec73c6db4a1cd11728b294d.png",[],{"type":14,"tag":36,"props":192,"children":194},{"id":193},"cultures",[195],{"type":19,"value":196},"Cultures",{"type":14,"tag":198,"props":199,"children":200},"ul",{},[201,230],{"type":14,"tag":202,"props":203,"children":204},"li",{},[205,211,212,219,221,228],{"type":14,"tag":31,"props":206,"children":208},{"className":207},[],[209],{"type":19,"value":210},"SupportedCultures",{"type":19,"value":56},{"type":14,"tag":47,"props":213,"children":216},{"href":214,"rel":215},"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo(v=vs.110).aspx",[51],[217],{"type":19,"value":218},"CultureInfo",{"type":19,"value":220}," 对象决定了和文化相关的函数，如日期，时间，数字和货币格式的结果。同时决定了文字如何排序，大小写转换以及字符串比较。参考",{"type":14,"tag":47,"props":222,"children":225},{"href":223,"rel":224},"https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.currentculture(v=vs.110).aspx",[51],[226],{"type":19,"value":227},"CultureInfo.CurrentCulture",{"type":19,"value":229}," 获取更多关于服务器如何获取文化的信息。",{"type":14,"tag":202,"props":231,"children":232},{},[233,239,241,248,250,256,258,262],{"type":14,"tag":31,"props":234,"children":236},{"className":235},[],[237],{"type":19,"value":238},"SupportedUICultures",{"type":19,"value":240}," 决定如何通过 ",{"type":14,"tag":47,"props":242,"children":245},{"href":243,"rel":244},"https://msdn.microsoft.com/en-us/library/system.resources.resourcemanager(v=vs.110).aspx",[51],[246],{"type":19,"value":247},"ResourceManager",{"type":19,"value":249}," 查找翻译字符串（从 ",{"type":14,"tag":251,"props":252,"children":253},"em",{},[254],{"type":19,"value":255},".resx",{"type":19,"value":257}," 文件）。 ",{"type":14,"tag":251,"props":259,"children":260},{},[261],{"type":19,"value":247},{"type":19,"value":263}," 只是通过 CurrentUICulture 简单的查找指定文化的字符串。",{"type":14,"tag":21,"props":265,"children":266},{},[267,269,275,277,283,285,291],{"type":19,"value":268},".NET 的每个线程都会拥有 ",{"type":14,"tag":31,"props":270,"children":272},{"className":271},[],[273],{"type":19,"value":274},"CurrentCulture",{"type":19,"value":276}," 和",{"type":14,"tag":31,"props":278,"children":280},{"className":279},[],[281],{"type":19,"value":282},"CurrentUICulture",{"type":19,"value":284}," 对象。当 ASP.NET Core 在渲染与文化相关的函数的时候会检视这些对象值。例如，如果当前线程的区域性设置为 “en-US” （英语、美国）， ",{"type":14,"tag":31,"props":286,"children":288},{"className":287},[],[289],{"type":19,"value":290},"DateTime.Now.ToLongDateString() \"Thursday, February 18, 2016\"",{"type":19,"value":292}," ，但如果 CurrentCulture 设置为 “es-ES”（西班牙语、西班牙），输出将会是 “jueves, 18 de febrero de 2016”。",{"type":14,"tag":36,"props":294,"children":296},{"id":295},"abp的实现",[297],{"type":19,"value":295},{"type":14,"tag":21,"props":299,"children":300},{},[301],{"type":19,"value":302},"Volo.Abp.AspNetCore项目中DefaultAbpRequestLocalizationOptionsProvider.cs",{"type":14,"tag":26,"props":304,"children":306},{"code":305},"#GetLocalizationOptionsAsync()\n#根据设置获取默认语言,如果默认语言为en\nvar languages = await languageProvider.GetLanguagesAsync();\nvar defaultLanguage = await settingProvider.GetOrNullAsync(LocalizationSettingNames.DefaultLanguage);\n\nvar options = !languages.Any()\n? new RequestLocalizationOptions()\n: new RequestLocalizationOptions\n{\nDefaultRequestCulture = DefaultGetRequestCulture(defaultLanguage, languages),\n\nSupportedCultures = languages\n.Select(l => l.CultureName)\n.Distinct()\n.Select(c => new CultureInfo(c))\n.ToArray(),\n\nSupportedUICultures = languages\n.Select(l => l.UiCultureName)\n.Distinct()\n.Select(c => new CultureInfo(c))\n.ToArray()\n};\n\n#如果设置中的默认语言不存在,则选取第一个语言作为默认语言\nprivate static RequestCulture DefaultGetRequestCulture(string defaultLanguage, IReadOnlyList\u003CLanguageInfo> languages)\n{\n    if (defaultLanguage == null)\n    {\n    var firstLanguage = languages.First();\n    return new RequestCulture(firstLanguage.CultureName, firstLanguage.UiCultureName);\n    }\n\n    var (cultureName, uiCultureName) = LocalizationSettingHelper.ParseLanguageSetting(defaultLanguage);\n    return new RequestCulture(cultureName, uiCultureName);\n}\n",[307],{"type":14,"tag":31,"props":308,"children":309},{"__ignoreMap":7},[310],{"type":19,"value":305},{"type":14,"tag":21,"props":312,"children":313},{},[314],{"type":19,"value":315},"然后中间件是",{"type":14,"tag":26,"props":317,"children":319},{"code":318},"app.UseAbpRequestLocalization();\n",[320],{"type":14,"tag":31,"props":321,"children":322},{"__ignoreMap":7},[323],{"type":19,"value":318},{"type":14,"tag":21,"props":325,"children":326},{},[327],{"type":19,"value":328},"中间件使用的是AbpRequestLocalizationMiddleware,其实它只是对aspnetcore的RequestLocalizationMiddleware进行了一层包装",{"type":14,"tag":90,"props":330,"children":332},{"id":331},"如何修改默认语言",[333],{"type":19,"value":331},{"type":14,"tag":21,"props":335,"children":336},{},[337,339,345],{"type":19,"value":338},"首先注意浏览器发送的中文的",{"type":14,"tag":31,"props":340,"children":342},{"className":341},[],[343],{"type":19,"value":344},"accept-language",{"type":19,"value":346},"的值与ABP值是不一样的:",{"type":14,"tag":198,"props":348,"children":349},{},[350,361],{"type":14,"tag":202,"props":351,"children":352},{},[353,355],{"type":19,"value":354},"浏览器(如Chrome)的值为",{"type":14,"tag":31,"props":356,"children":358},{"className":357},[],[359],{"type":19,"value":360},"zh-CN",{"type":14,"tag":202,"props":362,"children":363},{},[364,366],{"type":19,"value":365},"而ABP的简体中文的值为",{"type":14,"tag":31,"props":367,"children":369},{"className":368},[],[370],{"type":19,"value":371},"zh-Hans",{"type":14,"tag":21,"props":373,"children":374},{},[375],{"type":19,"value":376},"首先修改配置文件appsettings.json",{"type":14,"tag":26,"props":378,"children":380},{"code":379},"\"Settings\": {\n    \"Abp.Localization.DefaultLanguage\": \"zh-Hans\"\n}\n",[381],{"type":14,"tag":31,"props":382,"children":383},{"__ignoreMap":7},[384],{"type":19,"value":379},{"type":14,"tag":21,"props":386,"children":387},{},[388],{"type":19,"value":389},"然后在中间件中删除AcceptLanguageHeaderRequestCultureProvider",{"type":14,"tag":26,"props":391,"children":393},{"code":392},"app.UseAbpRequestLocalization(options =>\n    {\n        options.RequestCultureProviders.RemoveAll(provider => provider is AcceptLanguageHeaderRequestCultureProvider);\n    }\n);\n",[394],{"type":14,"tag":31,"props":395,"children":396},{"__ignoreMap":7},[397],{"type":19,"value":392},{"title":7,"searchDepth":399,"depth":399,"links":400},2,[401,407,408],{"id":38,"depth":399,"text":38,"children":402},[403,405,406],{"id":92,"depth":404,"text":100},3,{"id":131,"depth":404,"text":139},{"id":162,"depth":404,"text":170},{"id":193,"depth":399,"text":196},{"id":295,"depth":399,"text":295,"children":409},[410],{"id":331,"depth":404,"text":331},"markdown","content:dotnet:2020-07-15-abp-default-language.md","content","dotnet/2020-07-15-abp-default-language.md","md","2020-07-15",[418,428,553,602,654,667,779],{"title":419,"_path":420,"children":421},"Art","/art",[422,425],{"title":423,"_path":424},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":426,"_path":427},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":429,"_path":430,"children":431},"Dotnet","/dotnet",[432,435,438,441,444,447,450,453,456,459,462,465,468,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,520,523,526,529,532,535,538,541,544,547,550],{"title":433,"_path":434},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":436,"_path":437},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":439,"_path":440},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":442,"_path":443},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":445,"_path":446},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":448,"_path":449},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":451,"_path":452},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":454,"_path":455},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":457,"_path":458},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":460,"_path":461},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":463,"_path":464},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":466,"_path":467},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":469,"_path":470},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":472,"_path":473},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":475,"_path":476},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":478,"_path":479},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":481,"_path":482},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":484,"_path":485},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":487,"_path":488},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":490,"_path":491},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":493,"_path":494},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":496,"_path":497},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":499,"_path":500},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":502,"_path":503},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":505,"_path":506},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":508,"_path":509},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":511,"_path":512},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":514,"_path":515},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":517,"_path":518},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":8,"_path":4},{"title":521,"_path":522},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":524,"_path":525},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":527,"_path":528},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":530,"_path":531},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":533,"_path":534},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":536,"_path":537},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":539,"_path":540},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":542,"_path":543},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":545,"_path":546},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":548,"_path":549},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":551,"_path":552},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":554,"_path":555,"children":556},"Game","/game",[557,560,563,566,569,572,575,578,581,584,587,590,593,596,599],{"title":558,"_path":559},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":561,"_path":562},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":564,"_path":565},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":567,"_path":568},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":570,"_path":571},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":573,"_path":574},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":576,"_path":577},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":579,"_path":580},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":582,"_path":583},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":585,"_path":586},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":588,"_path":589},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":591,"_path":592},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":594,"_path":595},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":597,"_path":598},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":600,"_path":601},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":603,"_path":604,"children":605},"Gyj","/gyj",[606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651],{"title":607,"_path":608},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":610,"_path":611},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":613,"_path":614},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":616,"_path":617},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":619,"_path":620},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":622,"_path":623},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":625,"_path":626},"玩法","/gyj/2022-08-22-wanfa",{"title":628,"_path":629},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":631,"_path":632},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":634,"_path":635},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":637,"_path":638},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":640,"_path":641},"门派内容相关","/gyj/2022-11-17-sect",{"title":643,"_path":644},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":646,"_path":647},"种植","/gyj/2022-12-01-zhongzhi",{"title":649,"_path":650},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":652,"_path":653},"跑商","/gyj/2023-11-01-paoshang",{"title":655,"_path":656,"children":657},"Js","/js",[658,661,664],{"title":659,"_path":660},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":662,"_path":663},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":665,"_path":666},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":668,"_path":669,"children":670},"Tool","/tool",[671,674,677,680,683,686,689,692,695,698,701,704,707,710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,755,758,761,764,767,770,773,776],{"title":672,"_path":673},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":675,"_path":676},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":678,"_path":679},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":681,"_path":682},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":684,"_path":685},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":687,"_path":688},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":690,"_path":691},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":693,"_path":694},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":696,"_path":697},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":699,"_path":700},"mac下brew 使用","/tool/2020-01-13-brew",{"title":702,"_path":703},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":705,"_path":706},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":708,"_path":709},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":711,"_path":712},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":714,"_path":715},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":717,"_path":718},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":720,"_path":721},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":723,"_path":724},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":726,"_path":727},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":729,"_path":730},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":732,"_path":733},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":735,"_path":736},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":738,"_path":739},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":741,"_path":742},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":744,"_path":745},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":747,"_path":748},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":750,"_path":751},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":753,"_path":754},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":756,"_path":757},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":759,"_path":760},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":762,"_path":763},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":765,"_path":766},"rider的使用","/tool/2022-08-02-rider-use",{"title":768,"_path":769},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":771,"_path":772},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":774,"_path":775},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":777,"_path":778},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":780,"_path":781,"children":782},"Unity","/unity",[783,786,789,792,795,798,801,804,807,810,813,816,819,822,825,828,831,834,837,840,843,846,849,852,855,858,861,864,867,870,873,876,879,882,885,888,891,894,897,900,903,906,909,912,915,918,921,924,927,930,933,936,939,942,945,948,951,954,957,960,963,966,969,972,975,978,981,984,987,990,993,996],{"title":784,"_path":785},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":787,"_path":788},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":790,"_path":791},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":793,"_path":794},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":796,"_path":797},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":799,"_path":800},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":802,"_path":803},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":805,"_path":806},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":808,"_path":809},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":811,"_path":812},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":814,"_path":815},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":817,"_path":818},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":820,"_path":821},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":823,"_path":824},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":826,"_path":827},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":829,"_path":830},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":832,"_path":833},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":835,"_path":836},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":838,"_path":839},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":841,"_path":842},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":844,"_path":845},"技能系统","/unity/2020-02-15-skill-system",{"title":847,"_path":848},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":850,"_path":851},"角色状态设计","/unity/2020-02-17-character-states",{"title":853,"_path":854},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":856,"_path":857},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":859,"_path":860},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":862,"_path":863},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":865,"_path":866},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":868,"_path":869},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":871,"_path":872},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":874,"_path":875},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":877,"_path":878},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":880,"_path":881},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":883,"_path":884},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":886,"_path":887},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":889,"_path":890},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":892,"_path":893},"unity的addressables","/unity/2020-09-12-addressables",{"title":895,"_path":896},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":898,"_path":899},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":901,"_path":902},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":904,"_path":905},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":907,"_path":908},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":910,"_path":911},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":913,"_path":914},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":916,"_path":917},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":919,"_path":920},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":922,"_path":923},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":925,"_path":926},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":928,"_path":929},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":931,"_path":932},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":934,"_path":935},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":937,"_path":938},"简单保存工具","/unity/2020-11-13-simple-save",{"title":940,"_path":941},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":943,"_path":944},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":946,"_path":947},"ability","/unity/2020-11-16-dotssample",{"title":949,"_path":950},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":952,"_path":953},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":955,"_path":956},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":958,"_path":959},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":961,"_path":962},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":964,"_path":965},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":967,"_path":968},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":970,"_path":971},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":973,"_path":974},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":976,"_path":977},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":979,"_path":980},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":982,"_path":983},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":985,"_path":986},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":988,"_path":989},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":991,"_path":992},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":994,"_path":995},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":997,"_path":998},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038295]