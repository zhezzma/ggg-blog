[{"data":1,"prerenderedAt":680},["Reactive",2],{"content-query-ao9xzSolKu":3,"content-navigation-8C37fagqQL":98},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":92,"_id":93,"_source":94,"_file":95,"_extension":96,"date":97},"/dotnet/2022-08-15-equal-hashcode","dotnet",false,"","c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","先看一个不负责任的写法//先看一个不负责任的写法\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\n \n \nnamespace nothing\n{\n    class MyMethod\n    {\n        //用a值代替Hash值\n        public int a { get; set; }\n         public override int GetHashCode()\n        {\n            return a;\n  ",{"type":11,"children":12,"toc":89},"root",[13,21,31,36,44,49,54,59,64,69,74,79,84],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":20},"text","先看一个不负责任的写法",{"type":14,"tag":22,"props":23,"children":25},"pre",{"code":24},"//先看一个不负责任的写法\nusing System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Linq;\n \n \nnamespace nothing\n{\n    class MyMethod\n    {\n        //用a值代替Hash值\n        public int a { get; set; }\n         public override int GetHashCode()\n        {\n            return a;\n        }\n        public override bool Equals(object obj)\n        {\n            return true;\n        }\n \n    }\n    class Program\n    {\n            \n        static void Sum\u003CT>() where T : MyMethod, new()\n        {\n            T t1 = new T();\n            T t2 = new T();\n             \n            t1.a = 3; t2.a = 4;//不会报错           \n             //t1.a=3;t2.a=3;报错，字典中已经存在相同键\n             Dictionary\u003CMyMethod, int> d = new Dictionary\u003CMyMethod, int>();\n            d.Add(t1, 1);\n            d.Add(t2, 2);\n            \n            \n        }\n        static void Main(string[] args)\n        {\n            \n            Sum\u003CMyMethod>();\n            Console.Read();\n \n        }\n       \n    }\n \n}\n \n",[26],{"type":14,"tag":27,"props":28,"children":29},"code",{"__ignoreMap":7},[30],{"type":19,"value":24},{"type":14,"tag":15,"props":32,"children":33},{},[34],{"type":19,"value":35},"再说Dictionary的Add的具体实现,ILSpy反编译中C#Dictionary的Add方法源码：",{"type":14,"tag":22,"props":37,"children":39},{"code":38},"public void Add(TKey key, TValue value)\n{\n    this.Insert(key, value, true);\n}\n \n \nprivate void Insert(TKey key, TValue value, bool add)\n{\n    if (key == null)\n    {\n        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.key);\n    }\n    if (this.buckets == null)\n    {\n        this.Initialize(0);\n    }\n    \n    int num = this.comparer.GetHashCode(key) & 2147483647;\n    int num2 = num % this.buckets.Length;\n    int num3 = 0;\n    for (int i = this.buckets[num2]; i >= 0; i = this.entries[i].next)\n    {\n        //如果hash值和字典中某个值的hash值相等 且 两个值的Equals返回值为True Trow 异常：已添加了具有相同键的项。\n        if (this.entries[i].hashCode == num && this.comparer.Equals(this.entries[i].key, key))\n        {\n            if (add)\n            {\n                ThrowHelper.ThrowArgumentException(ExceptionResource.Argument_AddingDuplicate);\n            }\n            this.entries[i].value = value;\n            this.version++;\n            return;\n        }\n        num3++;\n    }\n    int num4;\n    if (this.freeCount > 0)\n    {\n        num4 = this.freeList;\n        this.freeList = this.entries[num4].next;\n        this.freeCount--;\n    }\n    else\n    {\n        if (this.count == this.entries.Length)\n        {\n            this.Resize();\n            num2 = num % this.buckets.Length;\n        }\n        num4 = this.count;\n        this.count++;\n    }\n    this.entries[num4].hashCode = num;\n    this.entries[num4].next = this.buckets[num2];\n    this.entries[num4].key = key;\n    this.entries[num4].value = value;\n    this.buckets[num2] = num4;\n    this.version++;\n    if (num3 > 100 && HashHelpers.IsWellKnownEqualityComparer(this.comparer))\n    {\n        this.comparer = (IEqualityComparer\u003CTKey>)HashHelpers.GetRandomizedEqualityComparer(this.comparer);\n        this.Resize(this.entries.Length, true);\n    }\n}\n",[40],{"type":14,"tag":27,"props":41,"children":42},{"__ignoreMap":7},[43],{"type":19,"value":38},{"type":14,"tag":15,"props":45,"children":46},{},[47],{"type":19,"value":48},"当每次调用Dictionary的Add方法时，参数都将与Dictionary中的值进行Equals，大家都知道DIctionary是用Hash值进行存储的，而hash值的计算方法是通过Object.GetHashCode实现的，如果这2个方法不一致，那么很容易就出现问题，特别是Dictionary中的Add方法这种情况。",{"type":14,"tag":15,"props":50,"children":51},{},[52],{"type":19,"value":53},"个人理解Dictionary的Add方法的实现：",{"type":14,"tag":15,"props":55,"children":56},{},[57],{"type":19,"value":58},"Add()->GetHashCode(),Equals()->判断2个hashcode是否相等 和Equals返回值是否为True->若同时成立，抛异常。",{"type":14,"tag":15,"props":60,"children":61},{},[62],{"type":19,"value":63},"GetHashCode的目的不是为一个对象生成唯一的标识符，而是为了实现基于哈希表的数据结构，如Dictionary\u003CK, V>或HashSet。 哈希函数需要确保如果x == ==y，那么x.GetHashCode()==  y.GetHashCode()，但反过来就不对了：两个不同的对象可以有相同的哈希代码。这种情况被称为哈希碰撞。 如果存在碰撞，哈希表结构仍然可以工作，但它们的运行速度较慢，因为你的程序必须花时间来分辨你要搜索的是哪个碰撞对象。因此，一个好的散列函数将努力使碰撞最小化。(注意，如果一个类有232个以上的可能值，要完全避免碰撞在数学上是不可能的，因为有鸽子笼原则）。",{"type":14,"tag":15,"props":65,"children":66},{},[67],{"type":19,"value":68},"那么，你如何为你的类写一个好的GetHashCode实现呢？",{"type":14,"tag":15,"props":70,"children":71},{},[72],{"type":19,"value":73},"做一些复杂的数学运算，将你的类的每一个字段转换为int，然后通过剖析来确定其中的系数的最佳值？",{"type":14,"tag":15,"props":75,"children":76},{},[77],{"type":19,"value":78},"根据Troelsen的说法，不需要。",{"type":14,"tag":15,"props":80,"children":81},{},[82],{"type":19,"value":83},"只要在你的 \"最独特 \"的字符串字段上调用GetHashCode()就可以了。",{"type":14,"tag":15,"props":85,"children":86},{},[87],{"type":19,"value":88},"写System.String.GetHashCode的开发者知道他们在做什么，所以只要使用它，你就会自动利用他们的 \"坚实的哈希码算法\"。",{"title":7,"searchDepth":90,"depth":90,"links":91},2,[],"markdown","content:dotnet:2022-08-15-equal-hashcode.md","content","dotnet/2022-08-15-equal-hashcode.md","md","2022-08-15",[99,109,234,283,335,348,460],{"title":100,"_path":101,"children":102},"Art","/art",[103,106],{"title":104,"_path":105},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":107,"_path":108},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":110,"_path":111,"children":112},"Dotnet","/dotnet",[113,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,176,179,182,185,188,191,194,197,200,203,206,209,212,215,218,221,224,227,230,233],{"title":114,"_path":115},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":117,"_path":118},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":120,"_path":121},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":123,"_path":124},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":126,"_path":127},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":129,"_path":130},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":132,"_path":133},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":135,"_path":136},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":138,"_path":139},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":141,"_path":142},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":144,"_path":145},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":147,"_path":148},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":150,"_path":151},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":153,"_path":154},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":156,"_path":157},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":159,"_path":160},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":162,"_path":163},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":165,"_path":166},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":168,"_path":169},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":171,"_path":172},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":174,"_path":175},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":177,"_path":178},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":180,"_path":181},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":183,"_path":184},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":186,"_path":187},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":189,"_path":190},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":192,"_path":193},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":195,"_path":196},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":198,"_path":199},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":201,"_path":202},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":204,"_path":205},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":207,"_path":208},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":210,"_path":211},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":213,"_path":214},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":216,"_path":217},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":219,"_path":220},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":222,"_path":223},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":225,"_path":226},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":228,"_path":229},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":231,"_path":232},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":8,"_path":4},{"title":235,"_path":236,"children":237},"Game","/game",[238,241,244,247,250,253,256,259,262,265,268,271,274,277,280],{"title":239,"_path":240},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":242,"_path":243},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":245,"_path":246},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":248,"_path":249},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":251,"_path":252},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":254,"_path":255},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":257,"_path":258},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":260,"_path":261},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":263,"_path":264},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":266,"_path":267},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":269,"_path":270},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":272,"_path":273},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":275,"_path":276},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":278,"_path":279},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":281,"_path":282},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":284,"_path":285,"children":286},"Gyj","/gyj",[287,290,293,296,299,302,305,308,311,314,317,320,323,326,329,332],{"title":288,"_path":289},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":291,"_path":292},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":294,"_path":295},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":297,"_path":298},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":300,"_path":301},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":303,"_path":304},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":306,"_path":307},"玩法","/gyj/2022-08-22-wanfa",{"title":309,"_path":310},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":312,"_path":313},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":315,"_path":316},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":318,"_path":319},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":321,"_path":322},"门派内容相关","/gyj/2022-11-17-sect",{"title":324,"_path":325},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":327,"_path":328},"种植","/gyj/2022-12-01-zhongzhi",{"title":330,"_path":331},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":333,"_path":334},"跑商","/gyj/2023-11-01-paoshang",{"title":336,"_path":337,"children":338},"Js","/js",[339,342,345],{"title":340,"_path":341},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":343,"_path":344},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":346,"_path":347},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":349,"_path":350,"children":351},"Tool","/tool",[352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403,406,409,412,415,418,421,424,427,430,433,436,439,442,445,448,451,454,457],{"title":353,"_path":354},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":356,"_path":357},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":359,"_path":360},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":362,"_path":363},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":365,"_path":366},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":368,"_path":369},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":371,"_path":372},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":374,"_path":375},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":377,"_path":378},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":380,"_path":381},"mac下brew 使用","/tool/2020-01-13-brew",{"title":383,"_path":384},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":386,"_path":387},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":389,"_path":390},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":392,"_path":393},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":395,"_path":396},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":398,"_path":399},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":401,"_path":402},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":404,"_path":405},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":407,"_path":408},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":410,"_path":411},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":413,"_path":414},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":416,"_path":417},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":419,"_path":420},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":422,"_path":423},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":425,"_path":426},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":428,"_path":429},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":431,"_path":432},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":434,"_path":435},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":437,"_path":438},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":440,"_path":441},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":443,"_path":444},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":446,"_path":447},"rider的使用","/tool/2022-08-02-rider-use",{"title":449,"_path":450},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":452,"_path":453},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":455,"_path":456},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":458,"_path":459},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":461,"_path":462,"children":463},"Unity","/unity",[464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,614,617,620,623,626,629,632,635,638,641,644,647,650,653,656,659,662,665,668,671,674,677],{"title":465,"_path":466},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":468,"_path":469},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":471,"_path":472},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":474,"_path":475},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":477,"_path":478},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":480,"_path":481},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":483,"_path":484},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":486,"_path":487},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":489,"_path":490},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":492,"_path":493},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":495,"_path":496},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":498,"_path":499},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":501,"_path":502},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":504,"_path":505},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":507,"_path":508},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":510,"_path":511},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":513,"_path":514},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":516,"_path":517},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":519,"_path":520},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":522,"_path":523},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":525,"_path":526},"技能系统","/unity/2020-02-15-skill-system",{"title":528,"_path":529},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":531,"_path":532},"角色状态设计","/unity/2020-02-17-character-states",{"title":534,"_path":535},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":537,"_path":538},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":540,"_path":541},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":543,"_path":544},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":546,"_path":547},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":549,"_path":550},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":552,"_path":553},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":555,"_path":556},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":558,"_path":559},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":561,"_path":562},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":564,"_path":565},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":567,"_path":568},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":570,"_path":571},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":573,"_path":574},"unity的addressables","/unity/2020-09-12-addressables",{"title":576,"_path":577},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":579,"_path":580},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":582,"_path":583},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":585,"_path":586},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":588,"_path":589},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":591,"_path":592},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":594,"_path":595},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":597,"_path":598},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":600,"_path":601},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":603,"_path":604},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":606,"_path":607},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":609,"_path":610},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":612,"_path":613},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":615,"_path":616},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":618,"_path":619},"简单保存工具","/unity/2020-11-13-simple-save",{"title":621,"_path":622},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":624,"_path":625},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":627,"_path":628},"ability","/unity/2020-11-16-dotssample",{"title":630,"_path":631},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":633,"_path":634},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":636,"_path":637},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":639,"_path":640},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":642,"_path":643},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":645,"_path":646},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":648,"_path":649},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":651,"_path":652},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":654,"_path":655},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":657,"_path":658},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":660,"_path":661},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":663,"_path":664},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":666,"_path":667},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":669,"_path":670},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":672,"_path":673},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":675,"_path":676},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":678,"_path":679},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038126]