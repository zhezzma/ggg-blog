[{"data":1,"prerenderedAt":758},["Reactive",2],{"content-query-z8sLOcBZOU":3,"content-navigation-8C37fagqQL":176},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":170,"_id":171,"_source":172,"_file":173,"_extension":174,"date":175},"/dotnet/2020-02-02-net-sync-client-server-game-architecture","dotnet",false,"","快节奏多人游戏同步(1)-ClientServer架构","PART 1 概述本文是关于探索快节奏多人游戏的技术和算法系列的第一篇，因此对多人游戏概念非常熟悉的同学可以随意的跳过这一篇就好啦～因为接下来只是一些介绍性质的讨论。。。任何类型的游戏开发都是某种挑战，然而在多人游戏中我们还有更多全新的问题函待解决～最最 Interesting 的地方在于其核心问题其实是人类和物理！- - 好吧其实是作弊和地理限制造成的网络延时。。PART 2 反作弊所有的一切的起源都是作弊。作为一个游戏开发者，你一般不会去担心有人在你的单人游戏中去作弊 - 因为他的行为不会给其他人带来影响，一个作弊的玩家可能并不会按你设计的套路去进行游戏，但是游戏是他的，他们有权利去选择怎",{"type":11,"children":12,"toc":162},"root",[13,22,28,33,39,44,49,54,59,65,70,75,80,89,94,100,105,110,115,120,125,130,136,141,146],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"part-1-概述",[19],{"type":20,"value":21},"text","PART 1 概述",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26],{"type":20,"value":27},"本文是关于探索快节奏多人游戏的技术和算法系列的第一篇，因此对多人游戏概念非常熟悉的同学可以随意的跳过这一篇就好啦～因为接下来只是一些介绍性质的讨论。。。",{"type":14,"tag":23,"props":29,"children":30},{},[31],{"type":20,"value":32},"任何类型的游戏开发都是某种挑战，然而在多人游戏中我们还有更多全新的问题函待解决～最最 Interesting 的地方在于其核心问题其实是人类和物理！- - 好吧其实是作弊和地理限制造成的网络延时。。",{"type":14,"tag":15,"props":34,"children":36},{"id":35},"part-2-反作弊",[37],{"type":20,"value":38},"PART 2 反作弊",{"type":14,"tag":23,"props":40,"children":41},{},[42],{"type":20,"value":43},"所有的一切的起源都是作弊。",{"type":14,"tag":23,"props":45,"children":46},{},[47],{"type":20,"value":48},"作为一个游戏开发者，你一般不会去担心有人在你的单人游戏中去作弊 - 因为他的行为不会给其他人带来影响，一个作弊的玩家可能并不会按你设计的套路去进行游戏，但是游戏是他的，他们有权利去选择怎么去玩。",{"type":14,"tag":23,"props":50,"children":51},{},[52],{"type":20,"value":53},"多人游戏则不同。在任何的有竞争关系的游戏中，一个作弊玩家不仅仅给自己带来了更好的体验，他也毁了其他的玩家的游戏。作为开发者，你可能希望避免出现这样的情况，因为这会让玩家流失。",{"type":14,"tag":23,"props":55,"children":56},{},[57],{"type":20,"value":58},"为了防止作弊，有很多事可以去做，但是最重要最（可能也是唯一有意义的）的事非常简单：不要相信玩家。就做最坏的打算：所有玩家都想要作弊。",{"type":14,"tag":15,"props":60,"children":62},{"id":61},"part-3-权威服务器和静默客户端",[63],{"type":20,"value":64},"PART 3 权威服务器和静默客户端",{"type":14,"tag":23,"props":66,"children":67},{},[68],{"type":20,"value":69},"有一个非常简单的解决方案 - 你将游戏中所有的逻辑都放在你控制的服务器来做，而客户端只是游戏的旁观者，换句话说，你游戏的客户端把输入（按键，命令）发送到服务器，服务器来运行这个游戏，然后你把结果返回给客户端。这就是常说的权威服务器，因为游戏世界中发生的一切都在服务器中进行。",{"type":14,"tag":23,"props":71,"children":72},{},[73],{"type":20,"value":74},"当然，你的服务器还是可能被发现漏洞，但是这就不属于我们要谈论的范围了。使用权威服务器可以防止很多的漏洞，比如，服务器不信任玩家的在客户端的血量，客户端想要作弊，把本地的血量调到10000%，但服务器知道血量只有10% - 当玩家被攻击的时候它还是会死掉，不管客户端的血量是多少。",{"type":14,"tag":23,"props":76,"children":77},{},[78],{"type":20,"value":79},"服务器同样不信任玩家的位置。你可能会这样做，在这一秒你告诉服务器“我在（10，10）”，然而下一秒你告诉服务器“我在（20，10）”，这样就可以穿过一堵墙或者超快速的移动。但是，权威服务器知道玩家在（10，10），当客户端告知服务器他要往右动一格的时候，客户端的位置会由服务器来处理，将位置更新为（11，10），然后告知玩家“你在（11，10）”。如下图所示:",{"type":14,"tag":23,"props":81,"children":82},{},[83],{"type":14,"tag":84,"props":85,"children":88},"img",{"alt":86,"src":87},"A simple client-server interaction.","/images/2020-02-02-client-server-game-architecture/fpm1-01.png",[],{"type":14,"tag":23,"props":90,"children":91},{},[92],{"type":20,"value":93},"总的来说，游戏的状态由服务器独自管理。客户端将动作发送给服务器，服务器来周期性地更新游戏状态，然后将新的游戏状态发送给客户端，客户端对结果进行渲染呈现。。",{"type":14,"tag":15,"props":95,"children":97},{"id":96},"part-4-考虑网络问题",[98],{"type":20,"value":99},"PART 4 考虑网络问题",{"type":14,"tag":23,"props":101,"children":102},{},[103],{"type":20,"value":104},"上面的处理方式对于回合制的游戏非常适合，比如策略游戏或者棋牌类的游戏。它在LAN中也能工作的很好，在这种情况下，通信是瞬发的。但是对于一些对实时性要求很高的游戏，而且在internet环境中，这种解决方案就会出问题了。",{"type":14,"tag":23,"props":106,"children":107},{},[108],{"type":20,"value":109},"下面来谈一些物理的问题。假如你在旧金山，连接了一个在纽约的服务器，两地相距4000km或者2500英里（大概是里斯本到莫斯科的距离）。任何东西都不能比光快吧，即使是Internet上的数据（数据传播的底层可能是光的脉冲，线缆中的电子，或者是电磁波），光传播的速度大概是300000km/s，所以传播4000km需要13ms。",{"type":14,"tag":23,"props":111,"children":112},{},[113],{"type":20,"value":114},"这听起来可能很快，但这实际是最乐观的情况 - 假设数据传播的速度是光速，沿着直线传播，这些通常是不可能的。在真实情况下，数据是由无数个路由经过一系列的跳（在计算机网络里的属于叫做hops）进行传播的，而且大部分的传播速度都达不到光速；路由在传播的时候也会产生一些延迟，因为包必须被打包，检查和分发。",{"type":14,"tag":23,"props":116,"children":117},{},[118],{"type":20,"value":119},"所以保险起见，我们假设数据从客户端到服务器需要50ms，这接近最好的场景了 - 当你在纽约而服务器在东京呢？假设网络因为什么原因发生阻塞了呢？100ms，200ms，500ms的延迟也是有可能的。",{"type":14,"tag":23,"props":121,"children":122},{},[123],{"type":20,"value":124},"回到我们的例子，你的客户端将输入“我按下了向右的按键”发给服务器，服务器在50ms之后获取了数据，现在假设服务器能够立即响应并且将结果返回，那么客户端在50ms之后获得新的游戏状态“你现在在（1，0）”。",{"type":14,"tag":23,"props":126,"children":127},{},[128],{"type":20,"value":129},"从你的视角来看，情况是这样的：你按下了向右的按键，但是什么事都没发生，直到一百年后你的角色向右移动了一格。这样的延迟是显而易见的，当然延迟半秒不仅仅是显而易见，它让整个游戏没法玩了。",{"type":14,"tag":15,"props":131,"children":133},{"id":132},"part-5-总结",[134],{"type":20,"value":135},"PART 5 总结",{"type":14,"tag":23,"props":137,"children":138},{},[139],{"type":20,"value":140},"通过网络连接的多人游戏是超级有趣的，但是引入了一系列的难题和挑战。权威服务器架构能够防止很多的作弊，但是直接用这种方法会让游戏的响应变得迟缓。",{"type":14,"tag":23,"props":142,"children":143},{},[144],{"type":20,"value":145},"在下面的文章，我们会介绍我们怎么围绕权威服务器来建立一个系统，能够最小的减少玩家的延迟体验，就像在玩单机游戏一样顺畅。",{"type":14,"tag":147,"props":148,"children":149},"ul",{},[150],{"type":14,"tag":151,"props":152,"children":153},"li",{},[154],{"type":14,"tag":155,"props":156,"children":160},"a",{"href":157,"rel":158},"http://www.gabrielgambetta.com/client-server-game-architecture.html",[159],"nofollow",[161],{"type":20,"value":157},{"title":7,"searchDepth":163,"depth":163,"links":164},2,[165,166,167,168,169],{"id":17,"depth":163,"text":21},{"id":35,"depth":163,"text":38},{"id":61,"depth":163,"text":64},{"id":96,"depth":163,"text":99},{"id":132,"depth":163,"text":135},"markdown","content:dotnet:2020-02-02-net-sync-client-server-game-architecture.md","content","dotnet/2020-02-02-net-sync-client-server-game-architecture.md","md","2020-02-02",[177,187,312,361,413,426,538],{"title":178,"_path":179,"children":180},"Art","/art",[181,184],{"title":182,"_path":183},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":185,"_path":186},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":188,"_path":189,"children":190},"Dotnet","/dotnet",[191,194,197,200,203,206,209,212,215,218,221,224,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300,303,306,309],{"title":192,"_path":193},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":195,"_path":196},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":198,"_path":199},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":201,"_path":202},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":204,"_path":205},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":207,"_path":208},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":210,"_path":211},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":213,"_path":214},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":216,"_path":217},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":219,"_path":220},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":222,"_path":223},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":8,"_path":4},{"title":226,"_path":227},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":229,"_path":230},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":232,"_path":233},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":235,"_path":236},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":238,"_path":239},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":241,"_path":242},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":244,"_path":245},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":247,"_path":248},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":250,"_path":251},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":253,"_path":254},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":256,"_path":257},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":259,"_path":260},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":262,"_path":263},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":265,"_path":266},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":268,"_path":269},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":271,"_path":272},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":274,"_path":275},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":277,"_path":278},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":280,"_path":281},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":283,"_path":284},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":286,"_path":287},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":289,"_path":290},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":292,"_path":293},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":295,"_path":296},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":298,"_path":299},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":301,"_path":302},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":304,"_path":305},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":307,"_path":308},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":310,"_path":311},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":313,"_path":314,"children":315},"Game","/game",[316,319,322,325,328,331,334,337,340,343,346,349,352,355,358],{"title":317,"_path":318},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":320,"_path":321},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":323,"_path":324},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":326,"_path":327},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":329,"_path":330},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":332,"_path":333},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":335,"_path":336},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":338,"_path":339},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":341,"_path":342},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":344,"_path":345},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":347,"_path":348},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":350,"_path":351},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":353,"_path":354},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":356,"_path":357},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":359,"_path":360},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":362,"_path":363,"children":364},"Gyj","/gyj",[365,368,371,374,377,380,383,386,389,392,395,398,401,404,407,410],{"title":366,"_path":367},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":369,"_path":370},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":372,"_path":373},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":375,"_path":376},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":378,"_path":379},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":381,"_path":382},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":384,"_path":385},"玩法","/gyj/2022-08-22-wanfa",{"title":387,"_path":388},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":390,"_path":391},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":393,"_path":394},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":396,"_path":397},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":399,"_path":400},"门派内容相关","/gyj/2022-11-17-sect",{"title":402,"_path":403},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":405,"_path":406},"种植","/gyj/2022-12-01-zhongzhi",{"title":408,"_path":409},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":411,"_path":412},"跑商","/gyj/2023-11-01-paoshang",{"title":414,"_path":415,"children":416},"Js","/js",[417,420,423],{"title":418,"_path":419},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":421,"_path":422},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":424,"_path":425},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":427,"_path":428,"children":429},"Tool","/tool",[430,433,436,439,442,445,448,451,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,499,502,505,508,511,514,517,520,523,526,529,532,535],{"title":431,"_path":432},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":434,"_path":435},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":437,"_path":438},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":440,"_path":441},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":443,"_path":444},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":446,"_path":447},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":449,"_path":450},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":452,"_path":453},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":455,"_path":456},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":458,"_path":459},"mac下brew 使用","/tool/2020-01-13-brew",{"title":461,"_path":462},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":464,"_path":465},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":467,"_path":468},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":470,"_path":471},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":473,"_path":474},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":476,"_path":477},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":479,"_path":480},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":482,"_path":483},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":485,"_path":486},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":488,"_path":489},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":491,"_path":492},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":494,"_path":495},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":497,"_path":498},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":500,"_path":501},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":503,"_path":504},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":506,"_path":507},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":509,"_path":510},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":512,"_path":513},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":515,"_path":516},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":518,"_path":519},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":521,"_path":522},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":524,"_path":525},"rider的使用","/tool/2022-08-02-rider-use",{"title":527,"_path":528},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":530,"_path":531},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":533,"_path":534},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":536,"_path":537},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":539,"_path":540,"children":541},"Unity","/unity",[542,545,548,551,554,557,560,563,566,569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,614,617,620,623,626,629,632,635,638,641,644,647,650,653,656,659,662,665,668,671,674,677,680,683,686,689,692,695,698,701,704,707,710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,755],{"title":543,"_path":544},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":546,"_path":547},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":549,"_path":550},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":552,"_path":553},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":555,"_path":556},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":558,"_path":559},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":561,"_path":562},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":564,"_path":565},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":567,"_path":568},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":570,"_path":571},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":573,"_path":574},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":576,"_path":577},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":579,"_path":580},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":582,"_path":583},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":585,"_path":586},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":588,"_path":589},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":591,"_path":592},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":594,"_path":595},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":597,"_path":598},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":600,"_path":601},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":603,"_path":604},"技能系统","/unity/2020-02-15-skill-system",{"title":606,"_path":607},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":609,"_path":610},"角色状态设计","/unity/2020-02-17-character-states",{"title":612,"_path":613},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":615,"_path":616},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":618,"_path":619},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":621,"_path":622},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":624,"_path":625},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":627,"_path":628},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":630,"_path":631},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":633,"_path":634},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":636,"_path":637},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":639,"_path":640},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":642,"_path":643},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":645,"_path":646},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":648,"_path":649},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":651,"_path":652},"unity的addressables","/unity/2020-09-12-addressables",{"title":654,"_path":655},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":657,"_path":658},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":660,"_path":661},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":663,"_path":664},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":666,"_path":667},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":669,"_path":670},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":672,"_path":673},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":675,"_path":676},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":678,"_path":679},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":681,"_path":682},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":684,"_path":685},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":687,"_path":688},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":690,"_path":691},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":693,"_path":694},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":696,"_path":697},"简单保存工具","/unity/2020-11-13-simple-save",{"title":699,"_path":700},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":702,"_path":703},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":705,"_path":706},"ability","/unity/2020-11-16-dotssample",{"title":708,"_path":709},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":711,"_path":712},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":714,"_path":715},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":717,"_path":718},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":720,"_path":721},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":723,"_path":724},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":726,"_path":727},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":729,"_path":730},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":732,"_path":733},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":735,"_path":736},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":738,"_path":739},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":741,"_path":742},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":744,"_path":745},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":747,"_path":748},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":750,"_path":751},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":753,"_path":754},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":756,"_path":757},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779041006]