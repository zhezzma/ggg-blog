[{"data":1,"prerenderedAt":817},["Reactive",2],{"content-query-xcBfJQkbpP":3,"content-navigation-8C37fagqQL":235},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":229,"_id":230,"_source":231,"_file":232,"_extension":233,"date":234},"/dotnet/2020-01-06-dll-load","dotnet",false,"","dll文件的加载","程序的运行要去加载所需要的dll文件，在程序运行的时候往往会遇到dll找不到的问题，或者不能确定所加载的dll文件是否是自己所需要的dll，遇到dll出问题的时候往往会不知所措，但是一旦知道了dll的加载顺序，按这个去查找解决就会方便和得心应手了。",{"type":11,"children":12,"toc":226},"root",[13,20,25,30,35,40,45,50,55,60,65,74,79,84,92,97,107,117,125,133,141,149,157,162,176,181,189,194,202,207,215,220],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"(1)先搜索可执行文件所在路径，再搜索系统路径：%PATH%（环境变量所配置的路径）",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":19,"value":29},"一般Path中的值为：%SystemRoot%\\system32;%SystemRoot%;",{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":19,"value":34},"(2)然后按下列顺序搜索 DLL：",{"type":14,"tag":15,"props":36,"children":37},{},[38],{"type":19,"value":39},"1、当前进程的可执行模块所在的目录。",{"type":14,"tag":15,"props":41,"children":42},{},[43],{"type":19,"value":44},"2、当前目录。",{"type":14,"tag":15,"props":46,"children":47},{},[48],{"type":19,"value":49},"3、Windows 系统目录。GetSystemDirectory 函数检索此目录的路径。",{"type":14,"tag":15,"props":51,"children":52},{},[53],{"type":19,"value":54},"4、Windows 目录。GetWindowsDirectory 函数检索此目录的路径。",{"type":14,"tag":15,"props":56,"children":57},{},[58],{"type":19,"value":59},"5、PATH 环境变量中列出的目录。",{"type":14,"tag":15,"props":61,"children":62},{},[63],{"type":19,"value":64},"有时候确定了加载的dll文件确实是自己所想加载的dll文件，但是还会发生错误的可能原因，就是dll文件被损坏，此时需要重新替换现有的dll文件；或者dll文件和所用的头文件（.h文件）不匹配，即是头文件中的函数，在dll文件中没有实现，这样的话，找到对应的dll文件就ok了。",{"type":14,"tag":15,"props":66,"children":67},{},[68],{"type":14,"tag":69,"props":70,"children":71},"strong",{},[72],{"type":19,"value":73},"AssemblyLoadContext",{"type":14,"tag":15,"props":75,"children":76},{},[77],{"type":19,"value":78},"基本上AssemblyLoadContext是AppDomain的继承者，它提供相同而且更多的功能-除了安全边界（隔离）。最小的安全边界是进程，因此你将需要使用进程间通信来正确隔离数据和代码执行。",{"type":14,"tag":15,"props":80,"children":81},{},[82],{"type":19,"value":83},"官网文档中提到Appdomain已经过时了，为了兼容旧的版本，提供了部分功能。建议在.NET Core3.0及更高的版本使用AssemblyLoadContext。",{"type":14,"tag":15,"props":85,"children":86},{},[87],{"type":14,"tag":69,"props":88,"children":89},{},[90],{"type":19,"value":91},"从AppDomain迁移到AssemblyLoadContext",{"type":14,"tag":15,"props":93,"children":94},{},[95],{"type":19,"value":96},"也许你仍在应用程序中使用AppDomain。现在，以下代码显示如何用AssemblyLoadContext的相应方法去替换掉AppDomain方法：",{"type":14,"tag":98,"props":99,"children":100},"ul",{},[101],{"type":14,"tag":102,"props":103,"children":104},"li",{},[105],{"type":19,"value":106},"获取所有程序集",{"type":14,"tag":108,"props":109,"children":111},"pre",{"code":110},"var assembliesInAppDomain = AppDomain.CurrentDomain.GetAssemblies();\nvar assembliesInAssemblyLoadContext = AssemblyLoadContext.Default.Assemblies;\n",[112],{"type":14,"tag":113,"props":114,"children":115},"code",{"__ignoreMap":7},[116],{"type":19,"value":110},{"type":14,"tag":98,"props":118,"children":119},{},[120],{"type":14,"tag":102,"props":121,"children":122},{},[123],{"type":19,"value":124},"加载一个程序集",{"type":14,"tag":108,"props":126,"children":128},{"code":127},"AppDomain.CurrentDomain.Load(AssemblyName.GetAssemblyName(\"path\"));\nAssemblyLoadContext.Default.LoadFromAssemblyName(AssemblyName.GetAssemblyName(\"path\"));\n",[129],{"type":14,"tag":113,"props":130,"children":131},{"__ignoreMap":7},[132],{"type":19,"value":127},{"type":14,"tag":98,"props":134,"children":135},{},[136],{"type":14,"tag":102,"props":137,"children":138},{},[139],{"type":19,"value":140},"加载一个程序集 路径或者字节数组:",{"type":14,"tag":108,"props":142,"children":144},{"code":143},"AppDomain.CurrentDomain.Load(File.ReadAllBytes(\"path\"));\nAssemblyLoadContext.Default.LoadFromStream(File.OpenRead(\"path\"));// orAssemblyLoadContext.Default.LoadFromAssemblyPath(\"path\");\n",[145],{"type":14,"tag":113,"props":146,"children":147},{"__ignoreMap":7},[148],{"type":19,"value":143},{"type":14,"tag":98,"props":150,"children":151},{},[152],{"type":14,"tag":102,"props":153,"children":154},{},[155],{"type":19,"value":156},"测试封装的获取程序集方法GetAssemblies",{"type":14,"tag":15,"props":158,"children":159},{},[160],{"type":19,"value":161},"准备工作：",{"type":14,"tag":163,"props":164,"children":165},"ol",{},[166,171],{"type":14,"tag":102,"props":167,"children":168},{},[169],{"type":19,"value":170},"创建一个控制台程序",{"type":14,"tag":102,"props":172,"children":173},{},[174],{"type":19,"value":175},"添加一个类库项目，命名为AA.Service",{"type":14,"tag":15,"props":177,"children":178},{},[179],{"type":19,"value":180},"在控制台应用程序，添加一个类TypeFinder代码如下：",{"type":14,"tag":108,"props":182,"children":184},{"code":183},"public class TypeFinder\n    {\n        /// \u003Csummary>\n        /// 获取物理路径 \n        /// \u003C/summary>\n        /// \u003Creturns>\\bin\\Debug\\netcoreapp3.0\u003C/returns>\n        public virtual string GetBinDirectory()\n        {\n            return AppContext.BaseDirectory;\n        }\n        /// \u003Csummary>\n        /// 获取程序集\n        /// \u003C/summary>\n        /// \u003Creturns>\u003C/returns>\n        public IList\u003CAssembly> GetAssemblies()\n        {\n            var binPath = GetBinDirectory();\n            var addedAssemblyNames = new List\u003Cstring>();\n            var assemblies = new List\u003CAssembly>();\n\n            //\n            foreach (var assembly in AssemblyLoadContext.Default.Assemblies.Where(a=>IsNotSysAssembly(a.FullName)))\n            {\n                if (addedAssemblyNames.Contains(assembly.FullName))\n                    continue;\n                addedAssemblyNames.Add(assembly.FullName);\n            }\n\n            foreach (var dllPath in Directory.GetFiles(binPath, \"*.dll\",\n                 SearchOption.TopDirectoryOnly))\n            {\n                try\n                {\n                    var an = AssemblyName.GetAssemblyName(dllPath);\n                    if (!addedAssemblyNames.Contains(an.FullName))\n                    {\n                        AssemblyLoadContext.Default.LoadFromAssemblyName(an);\n                    }\n                }\n                catch (BadImageFormatException ex)\n                {\n                    Trace.TraceError(ex.ToString());\n                }\n            }\n\n            foreach (var assembly in AssemblyLoadContext.Default.Assemblies.Where(a => IsNotSysAssembly(a.FullName)))\n            {\n                if (addedAssemblyNames.Contains(assembly.FullName))\n                    continue;\n\n                assemblies.Add(assembly);\n            }\n            return assemblies;\n        }\n\n        /// \u003Csummary>\n        /// 排除系统程序集\n        /// \u003C/summary>\n        /// \u003Cparam name=\"assemblyName\">\u003C/param>\n        /// \u003Creturns>\u003C/returns>\n        private bool IsNotSysAssembly(string assemblyName) \n        {\n            return !assemblyName.StartsWith(\"Microsoft.\")\n                      && !assemblyName.StartsWith(\"System.\")\n                      && !assemblyName.StartsWith(\"Newtonsoft.\")\n                      && assemblyName != \"netstandard\";\n        }\n    }\n",[185],{"type":14,"tag":113,"props":186,"children":187},{"__ignoreMap":7},[188],{"type":19,"value":183},{"type":14,"tag":15,"props":190,"children":191},{},[192],{"type":19,"value":193},"在控制台应用程序添加引用AA.Service类库，生成查看bin文件，出现了AA.Service.dll",{"type":14,"tag":15,"props":195,"children":196},{},[197],{"type":14,"tag":198,"props":199,"children":201},"img",{"alt":198,"src":200},"/images/2020-01-06-dll-load/640.webp",[],{"type":14,"tag":15,"props":203,"children":204},{},[205],{"type":19,"value":206},"调用代码输出(排除系统dll以Microsoft、system开头的)程序集：",{"type":14,"tag":108,"props":208,"children":210},{"code":209},"var assemblies= new TypeFinder().GetAssemblies();        \nforeach (var a in assemblies)             \n{                \nConsole.WriteLine(a.FullName);            \n}\n",[211],{"type":14,"tag":113,"props":212,"children":213},{"__ignoreMap":7},[214],{"type":19,"value":209},{"type":14,"tag":15,"props":216,"children":217},{},[218],{"type":19,"value":219},"输出",{"type":14,"tag":15,"props":221,"children":222},{},[223],{"type":14,"tag":198,"props":224,"children":225},{"alt":198,"src":200},[],{"title":7,"searchDepth":227,"depth":227,"links":228},2,[],"markdown","content:dotnet:2020-01-06-dll-load.md","content","dotnet/2020-01-06-dll-load.md","md","2020-01-06",[236,246,371,420,472,485,597],{"title":237,"_path":238,"children":239},"Art","/art",[240,243],{"title":241,"_path":242},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":244,"_path":245},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":247,"_path":248,"children":249},"Dotnet","/dotnet",[250,253,256,259,262,265,268,271,274,275,278,281,284,287,290,293,296,299,302,305,308,311,314,317,320,323,326,329,332,335,338,341,344,347,350,353,356,359,362,365,368],{"title":251,"_path":252},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":254,"_path":255},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":257,"_path":258},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":260,"_path":261},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":263,"_path":264},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":266,"_path":267},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":269,"_path":270},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":272,"_path":273},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":8,"_path":4},{"title":276,"_path":277},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":279,"_path":280},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":282,"_path":283},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":285,"_path":286},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":288,"_path":289},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":291,"_path":292},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":294,"_path":295},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":297,"_path":298},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":300,"_path":301},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":303,"_path":304},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":306,"_path":307},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":309,"_path":310},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":312,"_path":313},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":315,"_path":316},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":318,"_path":319},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":321,"_path":322},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":324,"_path":325},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":327,"_path":328},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":330,"_path":331},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":333,"_path":334},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":336,"_path":337},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":339,"_path":340},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":342,"_path":343},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":345,"_path":346},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":348,"_path":349},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":351,"_path":352},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":354,"_path":355},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":357,"_path":358},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":360,"_path":361},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":363,"_path":364},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":366,"_path":367},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":369,"_path":370},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":372,"_path":373,"children":374},"Game","/game",[375,378,381,384,387,390,393,396,399,402,405,408,411,414,417],{"title":376,"_path":377},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":379,"_path":380},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":382,"_path":383},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":385,"_path":386},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":388,"_path":389},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":391,"_path":392},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":394,"_path":395},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":397,"_path":398},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":400,"_path":401},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":403,"_path":404},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":406,"_path":407},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":409,"_path":410},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":412,"_path":413},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":415,"_path":416},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":418,"_path":419},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":421,"_path":422,"children":423},"Gyj","/gyj",[424,427,430,433,436,439,442,445,448,451,454,457,460,463,466,469],{"title":425,"_path":426},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":428,"_path":429},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":431,"_path":432},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":434,"_path":435},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":437,"_path":438},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":440,"_path":441},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":443,"_path":444},"玩法","/gyj/2022-08-22-wanfa",{"title":446,"_path":447},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":449,"_path":450},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":452,"_path":453},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":455,"_path":456},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":458,"_path":459},"门派内容相关","/gyj/2022-11-17-sect",{"title":461,"_path":462},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":464,"_path":465},"种植","/gyj/2022-12-01-zhongzhi",{"title":467,"_path":468},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":470,"_path":471},"跑商","/gyj/2023-11-01-paoshang",{"title":473,"_path":474,"children":475},"Js","/js",[476,479,482],{"title":477,"_path":478},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":480,"_path":481},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":483,"_path":484},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":486,"_path":487,"children":488},"Tool","/tool",[489,492,495,498,501,504,507,510,513,516,519,522,525,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,576,579,582,585,588,591,594],{"title":490,"_path":491},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":493,"_path":494},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":496,"_path":497},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":499,"_path":500},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":502,"_path":503},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":505,"_path":506},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":508,"_path":509},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":511,"_path":512},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":514,"_path":515},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":517,"_path":518},"mac下brew 使用","/tool/2020-01-13-brew",{"title":520,"_path":521},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":523,"_path":524},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":526,"_path":527},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":529,"_path":530},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":532,"_path":533},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":535,"_path":536},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":538,"_path":539},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":541,"_path":542},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":544,"_path":545},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":547,"_path":548},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":550,"_path":551},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":553,"_path":554},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":556,"_path":557},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":559,"_path":560},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":562,"_path":563},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":565,"_path":566},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":568,"_path":569},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":571,"_path":572},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":574,"_path":575},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":577,"_path":578},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":580,"_path":581},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":583,"_path":584},"rider的使用","/tool/2022-08-02-rider-use",{"title":586,"_path":587},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":589,"_path":590},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":592,"_path":593},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":595,"_path":596},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":598,"_path":599,"children":600},"Unity","/unity",[601,604,607,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,814],{"title":602,"_path":603},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":605,"_path":606},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":608,"_path":609},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":611,"_path":612},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":614,"_path":615},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":617,"_path":618},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":620,"_path":621},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":623,"_path":624},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":626,"_path":627},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":629,"_path":630},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":632,"_path":633},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":635,"_path":636},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":638,"_path":639},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":641,"_path":642},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":644,"_path":645},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":647,"_path":648},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":650,"_path":651},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":653,"_path":654},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":656,"_path":657},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":659,"_path":660},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":662,"_path":663},"技能系统","/unity/2020-02-15-skill-system",{"title":665,"_path":666},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":668,"_path":669},"角色状态设计","/unity/2020-02-17-character-states",{"title":671,"_path":672},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":674,"_path":675},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":677,"_path":678},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":680,"_path":681},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":683,"_path":684},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":686,"_path":687},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":689,"_path":690},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":692,"_path":693},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":695,"_path":696},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":698,"_path":699},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":701,"_path":702},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":704,"_path":705},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":707,"_path":708},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":710,"_path":711},"unity的addressables","/unity/2020-09-12-addressables",{"title":713,"_path":714},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":716,"_path":717},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":719,"_path":720},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":722,"_path":723},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":725,"_path":726},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":728,"_path":729},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":731,"_path":732},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":734,"_path":735},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":737,"_path":738},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":740,"_path":741},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":743,"_path":744},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":746,"_path":747},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":749,"_path":750},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":752,"_path":753},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":755,"_path":756},"简单保存工具","/unity/2020-11-13-simple-save",{"title":758,"_path":759},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":761,"_path":762},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":764,"_path":765},"ability","/unity/2020-11-16-dotssample",{"title":767,"_path":768},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":770,"_path":771},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":773,"_path":774},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":776,"_path":777},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":779,"_path":780},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":782,"_path":783},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":785,"_path":786},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":788,"_path":789},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":791,"_path":792},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":794,"_path":795},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":797,"_path":798},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":800,"_path":801},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":803,"_path":804},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":806,"_path":807},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":809,"_path":810},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":812,"_path":813},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":815,"_path":816},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779041373]