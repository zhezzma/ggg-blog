[{"data":1,"prerenderedAt":1551},["Reactive",2],{"content-query-ySPgBcYbFH":3,"content-navigation-8C37fagqQL":969},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":963,"_id":964,"_source":965,"_file":966,"_extension":967,"date":968},"/dotnet/2021-05-01-converting-between-structs-and-byte-arrays","dotnet",false,"","Converting between Structs and Byte Arrays","In object-oriented code bases, we tend to express most of not all of our data in highly semantic and contextual ways – that is, we use classes that contain both data and behaviour, and often even more information through inheritance, attributes, and more.",{"type":11,"children":12,"toc":944},"root",[13,20,25,30,37,42,47,52,57,63,68,73,78,83,94,109,114,135,148,153,162,167,175,180,193,200,205,217,222,234,239,244,249,254,259,264,276,281,299,317,322,327,335,340,348,353,358,363,368,373,378,403,408,413,419,424,429,434,440,445,450,463,468,539,544,552,566,571,576,581,586,591,597,602,604,718,736,754,759,760,862,887,892,897,902,908,913,924,929,934,939],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"However, sometimes we need to extract the data contained in these types – for example for sending network messages, or saving to disk. In this post we will look into converting between structs and byte arrays, to make exactly this possible.",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":19,"value":29},"We will compare different ways of doing so, and analyse them for performance and easy of use.",{"type":14,"tag":31,"props":32,"children":34},"h2",{"id":33},"why-byte-arrays",[35],{"type":19,"value":36},"Why byte arrays?",{"type":14,"tag":15,"props":38,"children":39},{},[40],{"type":19,"value":41},"The reason we will be looking into serialising our data into byte arrays is because these are essentially the most fundamental data storage format. We can easily write them to a network buffer or stream, or to a file.",{"type":14,"tag":15,"props":43,"children":44},{},[45],{"type":19,"value":46},"There are many alternatives and none of them will be right for every single use case. For example, I like to use JSON files to store settings, scripts, and text-based assets, as well as asset meta data.",{"type":14,"tag":15,"props":48,"children":49},{},[50],{"type":19,"value":51},"In those cases performance is not the most important consideration. Instead it is more valuable to be able to edit and review files easily inside a text editor.",{"type":14,"tag":15,"props":53,"children":54},{},[55],{"type":19,"value":56},"In situations where performance is important however – such as the mentioned networking or compact file storage – serialising only the relevant data itself and skipping the encoding and formatting inherent to clear text files can be key.",{"type":14,"tag":31,"props":58,"children":60},{"id":59},"why-structures",[61],{"type":19,"value":62},"Why structures?",{"type":14,"tag":15,"props":64,"children":65},{},[66],{"type":19,"value":67},"There are several reasons for why we are talking about structures specifically.",{"type":14,"tag":15,"props":69,"children":70},{},[71],{"type":19,"value":72},"First, I want to make a clear distinction between data and behaviour, by using a type that contains exactly the data we are interested in serialising.",{"type":14,"tag":15,"props":74,"children":75},{},[76],{"type":19,"value":77},"Secondly, structures are much more reliable and controllable when it comes to binary data layout. We will see how this is important for our last method of serialisation.",{"type":14,"tag":15,"props":79,"children":80},{},[81],{"type":19,"value":82},"Overall, we can use structures to directly represent the data that will be written into our byte array. For our example of networking this means that we have a clear one to one correspondence between our structures and our network messages.",{"type":14,"tag":31,"props":84,"children":86},{"id":85},"binaryformatter",[87],{"type":14,"tag":88,"props":89,"children":91},"code",{"className":90},[],[92],{"type":19,"value":93},"BinaryFormatter",{"type":14,"tag":15,"props":95,"children":96},{},[97,99,107],{"type":19,"value":98},"In our first method of converting between structs and byte arrays, we will make use of .NET’s ",{"type":14,"tag":100,"props":101,"children":105},"a",{"href":102,"rel":103},"https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter(v=vs.110).aspx",[104],"nofollow",[106],{"type":19,"value":93},{"type":19,"value":108}," class.",{"type":14,"tag":15,"props":110,"children":111},{},[112],{"type":19,"value":113},"The entire purpose of that class is to serialise an object into binary format (i.e. a byte array) – as well as deserialising the same back into objects.",{"type":14,"tag":15,"props":115,"children":116},{},[117,119,125,127,133],{"type":19,"value":118},"The class offers a lot of functionality – most of which we are not interested in here. Of interest to us are only two methods: ",{"type":14,"tag":88,"props":120,"children":122},{"className":121},[],[123],{"type":19,"value":124},"Serialize()",{"type":19,"value":126}," and ",{"type":14,"tag":88,"props":128,"children":130},{"className":129},[],[131],{"type":19,"value":132},"Deserialize()",{"type":19,"value":134},".",{"type":14,"tag":15,"props":136,"children":137},{},[138,140,146],{"type":19,"value":139},"These methods allow us to read/write our data to any stream. In many cases we could use this to write to a network – or file – buffer or stream directly. For our purpose – and for ease of testing, we will use the ",{"type":14,"tag":88,"props":141,"children":143},{"className":142},[],[144],{"type":19,"value":145},"MemoryStream",{"type":19,"value":147}," class which is little more than a stream wrapper around a byte array in the first place.",{"type":14,"tag":15,"props":149,"children":150},{},[151],{"type":19,"value":152},"Here are two generic methods that do exactly this:",{"type":14,"tag":154,"props":155,"children":157},"pre",{"code":156},"public static byte[] Serialize\u003CT>(T data)\n    where T : struct\n{\n    var formatter = new BinaryFormatter();\n    var stream = new MemoryStream();\n    formatter.Serialize(stream, data);\n    return stream.ToArray();\n}\npublic static T Deserialize\u003CT>(byte[] array)\n    where T : struct\n{\n    var stream = new MemoryStream(array);\n    var formatter = new BinaryFormatter();\n    return (T)formatter.Deserialize(stream);\n}\n",[158],{"type":14,"tag":88,"props":159,"children":160},{"__ignoreMap":7},[161],{"type":19,"value":156},{"type":14,"tag":15,"props":163,"children":164},{},[165],{"type":19,"value":166},"These methods can now be easily used like this:",{"type":14,"tag":154,"props":168,"children":170},{"code":169},"[Serializable] // BinaryFormatter needs this attribute\nstruct MyStruct\n{\n    // some fields here\n}\n\nvar data = new MyStruct();\nvar bytes = Serialize(data);\nvar data2 = Deserialize\u003CMyStruct>(bytes);\n// data and data2 now contain the same values\n",[171],{"type":14,"tag":88,"props":172,"children":173},{"__ignoreMap":7},[174],{"type":19,"value":169},{"type":14,"tag":15,"props":176,"children":177},{},[178],{"type":19,"value":179},"This looks great!",{"type":14,"tag":15,"props":181,"children":182},{},[183,185,191],{"type":19,"value":184},"It seems that we have found a solution that is both easy to use, and requires almost no work if we want to expand it. Allowing for the conversion of new structs simple requires the addition of the ",{"type":14,"tag":88,"props":186,"children":188},{"className":187},[],[189],{"type":19,"value":190},"Serializable",{"type":19,"value":192}," attribute, while we have to do nothing at all if we modify our structures to include more, less, or different data.",{"type":14,"tag":194,"props":195,"children":197},"h3",{"id":196},"performance",[198],{"type":19,"value":199},"Performance",{"type":14,"tag":15,"props":201,"children":202},{},[203],{"type":19,"value":204},"How about performance?",{"type":14,"tag":15,"props":206,"children":207},{},[208,210],{"type":19,"value":209},"I wrote a little test that both serialises and deserialises hundreds of thousands of times, and repeats that process several times to make sure we get accurate results. You can find the full code of it ",{"type":14,"tag":100,"props":211,"children":214},{"href":212,"rel":213},"https://github.com/amulware/genericgamedev-tests/tree/master/src/StructByteArrayConversion",[104],[215],{"type":19,"value":216},"on my GitHub",{"type":14,"tag":15,"props":218,"children":219},{},[220],{"type":19,"value":221},"Here are the results:",{"type":14,"tag":15,"props":223,"children":224},{},[225,227,232],{"type":19,"value":226},"Using ",{"type":14,"tag":88,"props":228,"children":230},{"className":229},[],[231],{"type":19,"value":93},{"type":19,"value":233},",\n– converting a 16 byte structs to an array one million times takes 4.86 seconds;\n– converting an array to a 16 byte struct one million times takes 3.85 seconds.",{"type":14,"tag":15,"props":235,"children":236},{},[237],{"type":19,"value":238},"This means that a single call to either of our methods takes less than 5 microseconds.",{"type":14,"tag":15,"props":240,"children":241},{},[242],{"type":19,"value":243},"That is pretty good!",{"type":14,"tag":15,"props":245,"children":246},{},[247],{"type":19,"value":248},"With this performance we can easily write and read thousands of networking messages per second before we will notice the performance impact. That is easily enough for most games and other real-time applications.",{"type":14,"tag":15,"props":250,"children":251},{},[252],{"type":19,"value":253},"There is another kind of performance measurement that is important however – and especially so when it comes to networking: Bandwidth.",{"type":14,"tag":15,"props":255,"children":256},{},[257],{"type":19,"value":258},"The struct I ran the tests with consisted of exactly 16 bytes. That means that in principle we should be able to write it into a byte array with length 16. The BinaryFormatter however – and this is related to the other features it has – writes a total of 218 bytes to the array.",{"type":14,"tag":15,"props":260,"children":261},{},[262],{"type":19,"value":263},"Suffice it to say: That is a whole lot more.",{"type":14,"tag":15,"props":265,"children":266},{},[267,269,275],{"type":19,"value":268},"The advantage of this is, that the object that is deserialised will actually be of the correct type. I merely made the method generic so that we could perform the cast and return the structure boxed in the result of ",{"type":14,"tag":88,"props":270,"children":272},{"className":271},[],[273],{"type":19,"value":274},"BinaryFormatter.Deserialize()",{"type":19,"value":134},{"type":14,"tag":15,"props":277,"children":278},{},[279],{"type":19,"value":280},"There are cases were we care less about the amount of data, and prefer to handle our data in this way. For this post however, I want to find a method that results in an array as small as possible.",{"type":14,"tag":31,"props":282,"children":284},{"id":283},"binarywriterbinaryreader",[285,291,293],{"type":14,"tag":88,"props":286,"children":288},{"className":287},[],[289],{"type":19,"value":290},"BinaryWriter",{"type":19,"value":292},"/",{"type":14,"tag":88,"props":294,"children":296},{"className":295},[],[297],{"type":19,"value":298},"BinaryReader",{"type":14,"tag":15,"props":300,"children":301},{},[302,304,310,311],{"type":19,"value":303},"Our second case study will be two other .NET classes: ",{"type":14,"tag":100,"props":305,"children":308},{"href":306,"rel":307},"https://msdn.microsoft.com/en-us/library/system.io.binaryreader(v=vs.110).aspx",[104],[309],{"type":19,"value":290},{"type":19,"value":126},{"type":14,"tag":100,"props":312,"children":315},{"href":313,"rel":314},"https://msdn.microsoft.com/en-us/library/system.io.binarywriter(v=vs.110).aspx",[104],[316],{"type":19,"value":298},{"type":14,"tag":15,"props":318,"children":319},{},[320],{"type":19,"value":321},"These classes are much simpler. They do little more than allowing us to write and read primitive types like integers and booleans to and from an arbitrary stream.",{"type":14,"tag":15,"props":323,"children":324},{},[325],{"type":19,"value":326},"This means that we cannot write the entire structure to our stream with just a single line of code any more. Instead we need to write and read all fields manually:",{"type":14,"tag":154,"props":328,"children":330},{"code":329},"struct MyStruct\n{\n    int anInteger;\n    float aFloat;\n    long aLong;\n\n    public byte[] ToArray()\n    {\n        var stream = new MemoryStream();\n        var writer = new BinaryWriter(stream);\n\n        writer.Write(this.anInteger);\n        writer.Write(this.aFloat);\n        writer.Write(this.aLong);\n\n        return stream.ToArray();\n    }\n\n    public static MyStruct FromArray(byte[] bytes)\n    {\n        var reader = new BinaryReader(new MemoryStream(bytes));\n\n        var s = default(MyStruct);\n\n        s.anInteger = reader.ReadInt32();\n        s.aFloat = reader.ReadSingle();\n        s.aLong = reader.ReadInt64();\n\n        return s;\n    }\n}\n",[331],{"type":14,"tag":88,"props":332,"children":333},{"__ignoreMap":7},[334],{"type":19,"value":329},{"type":14,"tag":15,"props":336,"children":337},{},[338],{"type":19,"value":339},"Using these methods is similarly easy to the ones above:",{"type":14,"tag":154,"props":341,"children":343},{"code":342},"var data = new MyStruct();\nvar array = data.ToArray();\nvar data2 = MyStruct.FromArray(array);\n",[344],{"type":14,"tag":88,"props":345,"children":346},{"__ignoreMap":7},[347],{"type":19,"value":342},{"type":14,"tag":15,"props":349,"children":350},{},[351],{"type":19,"value":352},"In this case, the returned array is indeed exactly 16 bytes long.",{"type":14,"tag":194,"props":354,"children":356},{"id":355},"performance-1",[357],{"type":19,"value":199},{"type":14,"tag":15,"props":359,"children":360},{},[361],{"type":19,"value":362},"But how does this manual approach measure up in performance?",{"type":14,"tag":15,"props":364,"children":365},{},[366],{"type":19,"value":367},"Very well!",{"type":14,"tag":15,"props":369,"children":370},{},[371],{"type":19,"value":372},"In my test, the times for serialising and deserialising went from 4.86 and 3.85 down to 0.50 and 0.20 seconds respectively (again for one million conversions each).",{"type":14,"tag":15,"props":374,"children":375},{},[376],{"type":19,"value":377},"It turns out this approach is not only space efficient, but it is also around ten times faster than the previous one – seemingly no reason to look back!",{"type":14,"tag":15,"props":379,"children":380},{},[381,383,388,390,395,396,401],{"type":19,"value":382},"In fact, there is an optimisation we can make to increase performance even further: We do not have to create new ",{"type":14,"tag":88,"props":384,"children":386},{"className":385},[],[387],{"type":19,"value":145},{"type":19,"value":389},"s and ",{"type":14,"tag":88,"props":391,"children":393},{"className":392},[],[394],{"type":19,"value":298},{"type":19,"value":292},{"type":14,"tag":88,"props":397,"children":399},{"className":398},[],[400],{"type":19,"value":290},{"type":19,"value":402},"s for each method call. Instead we can reuse them – either by having static ones (watch out for thread-safety!) or by keeping them in whatever object manages for example our network traffic.",{"type":14,"tag":15,"props":404,"children":405},{},[406],{"type":19,"value":407},"Doing so drops my measured time down to 0.14 and 0.11 seconds respectively.",{"type":14,"tag":15,"props":409,"children":410},{},[411],{"type":19,"value":412},"Note that the same optimisation can be applied to the first method. However – while positive – the performance increase is much less than in this case, relative to the overall much worse time.",{"type":14,"tag":194,"props":414,"children":416},{"id":415},"some-concerns",[417],{"type":19,"value":418},"Some concerns",{"type":14,"tag":15,"props":420,"children":421},{},[422],{"type":19,"value":423},"If we do look back to the code however, note how if we add another structure that we would like to serialise, we have to add the two methods to it, and adapt them to its fields.",{"type":14,"tag":15,"props":425,"children":426},{},[427],{"type":19,"value":428},"Further, if we change one of our structures, we have to make sure to reflect that change in both of these methods. We are bound to forget – especially when adding a new field – which could easily result in a small debugging nightmare.",{"type":14,"tag":15,"props":430,"children":431},{},[432],{"type":19,"value":433},"Ideally we can find a solution that is fast, uses little space, and does not require us to continuously maintain our serialisation code.",{"type":14,"tag":31,"props":435,"children":437},{"id":436},"marshalling",[438],{"type":19,"value":439},"Marshalling",{"type":14,"tag":15,"props":441,"children":442},{},[443],{"type":19,"value":444},"The last approach we will take a look at is that of marshalling.",{"type":14,"tag":15,"props":446,"children":447},{},[448],{"type":19,"value":449},"Marshalling refers to using both managed and unmanaged data and the transfer between them. By default, any object created in C# lives in managed memory, which has a lot of advantages – such as automatic garbage collection. Using unmanaged memory on the other hand is more difficult in C#, and requires us to allocate and free space manually. If we forget to do so, we may cause memory leaks that will eventually cause our application to crash.",{"type":14,"tag":15,"props":451,"children":452},{},[453,455,462],{"type":19,"value":454},"All of the functionality we are interested in can be found in the static ",{"type":14,"tag":100,"props":456,"children":459},{"href":457,"rel":458},"https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal(v=vs.100).aspx",[104],[460],{"type":19,"value":461},"Marshal",{"type":19,"value":108},{"type":14,"tag":15,"props":464,"children":465},{},[466],{"type":19,"value":467},"Specifically, we will use:",{"type":14,"tag":469,"props":470,"children":471},"ul",{},[472,484,495,506,517,528],{"type":14,"tag":473,"props":474,"children":475},"li",{},[476,482],{"type":14,"tag":88,"props":477,"children":479},{"className":478},[],[480],{"type":19,"value":481},"Marshal.SizeOf()",{"type":19,"value":483},"\nto determine the byte size of our structs;",{"type":14,"tag":473,"props":485,"children":486},{},[487,493],{"type":14,"tag":88,"props":488,"children":490},{"className":489},[],[491],{"type":19,"value":492},"Marshal.AllocHGlobal()",{"type":19,"value":494},"\nto allocate unmanaged memory;",{"type":14,"tag":473,"props":496,"children":497},{},[498,504],{"type":14,"tag":88,"props":499,"children":501},{"className":500},[],[502],{"type":19,"value":503},"Marshal.StructureToPtr()",{"type":19,"value":505},"\nto marshal (copy) our structure to the allocated unmanaged memory;",{"type":14,"tag":473,"props":507,"children":508},{},[509,515],{"type":14,"tag":88,"props":510,"children":512},{"className":511},[],[513],{"type":19,"value":514},"Marshal.PtrToStructure()",{"type":19,"value":516},"\nto marshal (copy) from unmanaged memory back to our structure;",{"type":14,"tag":473,"props":518,"children":519},{},[520,526],{"type":14,"tag":88,"props":521,"children":523},{"className":522},[],[524],{"type":19,"value":525},"Marshal.Copy()",{"type":19,"value":527},"\nto copy between the unmanaged memory and our byte array;",{"type":14,"tag":473,"props":529,"children":530},{},[531,537],{"type":14,"tag":88,"props":532,"children":534},{"className":533},[],[535],{"type":19,"value":536},"Marshal.FreeHGlobal()",{"type":19,"value":538},"\nto free the allocated memory;",{"type":14,"tag":15,"props":540,"children":541},{},[542],{"type":19,"value":543},"Using these methods we can construct the following methods:",{"type":14,"tag":154,"props":545,"children":547},{"code":546},"public static byte[] Serialize\u003CT>(T s)\n    where T : struct\n{\n    var size = Marshal.SizeOf(typeof(T));\n    var array = new byte[size];\n    var ptr = Marshal.AllocHGlobal(size);\n    Marshal.StructureToPtr(s, ptr, true);\n    Marshal.Copy(ptr, array, 0, size);\n    Marshal.FreeHGlobal(ptr);\n    return array;\n}\n\npublic static T Deserialize\u003CT>(byte[] array)\n    where T : struct\n{\n    var size = Marshal.SizeOf(typeof(T));\n    var ptr = Marshal.AllocHGlobal(size);\n    Marshal.Copy(array, 0, ptr, size);\n    var s = (T)Marshal.PtrToStructure(ptr, typeof(T));\n    Marshal.FreeHGlobal(ptr);\n    return s;\n}\n",[548],{"type":14,"tag":88,"props":549,"children":550},{"__ignoreMap":7},[551],{"type":19,"value":546},{"type":14,"tag":15,"props":553,"children":554},{},[555,557,564],{"type":19,"value":556},"Note that due to the unsafety of using unmanaged memory, we may want to use a ",{"type":14,"tag":100,"props":558,"children":561},{"href":559,"rel":560},"https://msdn.microsoft.com/en-us/library/zwc8s4fz.aspx",[104],[562],{"type":19,"value":563},"try – finally",{"type":19,"value":565}," block to make sure the memory will always be freed, even if something goes wrong. For brevity, this is left out here.",{"type":14,"tag":15,"props":567,"children":568},{},[569],{"type":19,"value":570},"When testing our code, which again is as easy to use as before – in fact the method signatures are exactly the same as our first pair – we see that it indeed works as we hope.",{"type":14,"tag":15,"props":572,"children":573},{},[574],{"type":19,"value":575},"Without any code inside our structures and completely generic methods there is no need to write or maintain any code when adding or modifying structures.",{"type":14,"tag":15,"props":577,"children":578},{},[579],{"type":19,"value":580},"Further the resulting array is the expected 16 bytes long.",{"type":14,"tag":194,"props":582,"children":584},{"id":583},"performance-2",[585],{"type":19,"value":199},{"type":14,"tag":15,"props":587,"children":588},{},[589],{"type":19,"value":590},"When running these methods through the tests, converting structs to byte arrays and vice versa takes a mere 0.47 and 0.60 seconds respectively (again for one million calls).",{"type":14,"tag":31,"props":592,"children":594},{"id":593},"comparison",[595],{"type":19,"value":596},"Comparison",{"type":14,"tag":15,"props":598,"children":599},{},[600],{"type":19,"value":601},"Here is a table with the results from the performance tests:",{"type":19,"value":603},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":14,"tag":605,"props":606,"children":607},"table",{},[608,632],{"type":14,"tag":609,"props":610,"children":611},"thead",{},[612],{"type":14,"tag":613,"props":614,"children":615},"tr",{},[616,622,627],{"type":14,"tag":617,"props":618,"children":619},"th",{},[620],{"type":19,"value":621},"16 byte struct",{"type":14,"tag":617,"props":623,"children":624},{},[625],{"type":19,"value":626},"struct to array",{"type":14,"tag":617,"props":628,"children":629},{},[630],{"type":19,"value":631},"array to struct",{"type":14,"tag":633,"props":634,"children":635},"tbody",{},[636,655,673,701],{"type":14,"tag":613,"props":637,"children":638},{},[639,645,650],{"type":14,"tag":640,"props":641,"children":642},"td",{},[643],{"type":19,"value":644},"binary formatter (218 byte array!)",{"type":14,"tag":640,"props":646,"children":647},{},[648],{"type":19,"value":649},"4.86s",{"type":14,"tag":640,"props":651,"children":652},{},[653],{"type":19,"value":654},"3.85s",{"type":14,"tag":613,"props":656,"children":657},{},[658,663,668],{"type":14,"tag":640,"props":659,"children":660},{},[661],{"type":19,"value":662},"binary writer/reader",{"type":14,"tag":640,"props":664,"children":665},{},[666],{"type":19,"value":667},"0.50s",{"type":14,"tag":640,"props":669,"children":670},{},[671],{"type":19,"value":672},"0.20s",{"type":14,"tag":613,"props":674,"children":675},{},[676,685,693],{"type":14,"tag":640,"props":677,"children":678},{},[679],{"type":14,"tag":680,"props":681,"children":682},"strong",{},[683],{"type":19,"value":684},"binary w/r (singleton)",{"type":14,"tag":640,"props":686,"children":687},{},[688],{"type":14,"tag":680,"props":689,"children":690},{},[691],{"type":19,"value":692},"0.14s",{"type":14,"tag":640,"props":694,"children":695},{},[696],{"type":14,"tag":680,"props":697,"children":698},{},[699],{"type":19,"value":700},"0.11s",{"type":14,"tag":613,"props":702,"children":703},{},[704,708,713],{"type":14,"tag":640,"props":705,"children":706},{},[707],{"type":19,"value":436},{"type":14,"tag":640,"props":709,"children":710},{},[711],{"type":19,"value":712},"0.47s",{"type":14,"tag":640,"props":714,"children":715},{},[716],{"type":19,"value":717},"0.60s",{"type":14,"tag":15,"props":719,"children":720},{},[721,723,728,729,734],{"type":19,"value":722},"Clearly, if what we care about most is performance, writing and reading our data manually, using shared ",{"type":14,"tag":88,"props":724,"children":726},{"className":725},[],[727],{"type":19,"value":290},{"type":19,"value":126},{"type":14,"tag":88,"props":730,"children":732},{"className":731},[],[733],{"type":19,"value":298},{"type":19,"value":735}," objects is the fastest method.",{"type":14,"tag":15,"props":737,"children":738},{},[739,741,746,747,752],{"type":19,"value":740},"On the other hand, the ",{"type":14,"tag":88,"props":742,"children":744},{"className":743},[],[745],{"type":19,"value":93},{"type":19,"value":126},{"type":14,"tag":88,"props":748,"children":750},{"className":749},[],[751],{"type":19,"value":461},{"type":19,"value":753}," methods allow for much easier reuse and make our code significantly more robust to change since there is no code to update and maintain.",{"type":14,"tag":15,"props":755,"children":756},{},[757],{"type":19,"value":758},"To provide some more data, here are the results from the same test, but this time with a 128 byte structure:",{"type":19,"value":603},{"type":14,"tag":605,"props":761,"children":762},{},[763,782],{"type":14,"tag":609,"props":764,"children":765},{},[766],{"type":14,"tag":613,"props":767,"children":768},{},[769,774,778],{"type":14,"tag":617,"props":770,"children":771},{},[772],{"type":19,"value":773},"128 byte struct",{"type":14,"tag":617,"props":775,"children":776},{},[777],{"type":19,"value":626},{"type":14,"tag":617,"props":779,"children":780},{},[781],{"type":19,"value":631},{"type":14,"tag":633,"props":783,"children":784},{},[785,802,819,845],{"type":14,"tag":613,"props":786,"children":787},{},[788,792,797],{"type":14,"tag":640,"props":789,"children":790},{},[791],{"type":19,"value":644},{"type":14,"tag":640,"props":793,"children":794},{},[795],{"type":19,"value":796},"17.32s",{"type":14,"tag":640,"props":798,"children":799},{},[800],{"type":19,"value":801},"14.47s",{"type":14,"tag":613,"props":803,"children":804},{},[805,809,814],{"type":14,"tag":640,"props":806,"children":807},{},[808],{"type":19,"value":662},{"type":14,"tag":640,"props":810,"children":811},{},[812],{"type":19,"value":813},"1.48s",{"type":14,"tag":640,"props":815,"children":816},{},[817],{"type":19,"value":818},"0.66s",{"type":14,"tag":613,"props":820,"children":821},{},[822,829,837],{"type":14,"tag":640,"props":823,"children":824},{},[825],{"type":14,"tag":680,"props":826,"children":827},{},[828],{"type":19,"value":684},{"type":14,"tag":640,"props":830,"children":831},{},[832],{"type":14,"tag":680,"props":833,"children":834},{},[835],{"type":19,"value":836},"0.78s",{"type":14,"tag":640,"props":838,"children":839},{},[840],{"type":14,"tag":680,"props":841,"children":842},{},[843],{"type":19,"value":844},"0.56s",{"type":14,"tag":613,"props":846,"children":847},{},[848,852,857],{"type":14,"tag":640,"props":849,"children":850},{},[851],{"type":19,"value":436},{"type":14,"tag":640,"props":853,"children":854},{},[855],{"type":19,"value":856},"0.84s",{"type":14,"tag":640,"props":858,"children":859},{},[860],{"type":19,"value":861},"0.75s",{"type":14,"tag":15,"props":863,"children":864},{},[865,867,872,873,878,880,885],{"type":19,"value":866},"We can see that the relative ordering of the different measurements is still the same. However, note how the ",{"type":14,"tag":88,"props":868,"children":870},{"className":869},[],[871],{"type":19,"value":290},{"type":19,"value":126},{"type":14,"tag":88,"props":874,"children":876},{"className":875},[],[877],{"type":19,"value":298},{"type":19,"value":879}," measurements are getting significantly closer to the ",{"type":14,"tag":88,"props":881,"children":883},{"className":882},[],[884],{"type":19,"value":461},{"type":19,"value":886}," ones.",{"type":14,"tag":15,"props":888,"children":889},{},[890],{"type":19,"value":891},"While I would not necessarily encourage structures of this size, I would argue that marshalling is the best approach for large structures in almost every case. The slightly slower performance is easily justified by the much more maintainable code.",{"type":14,"tag":15,"props":893,"children":894},{},[895],{"type":19,"value":896},"In fact, I would go as far and say that even for small structures the ease of using marshalling is still top advantageous despite the lower performance.",{"type":14,"tag":15,"props":898,"children":899},{},[900],{"type":19,"value":901},"In the end, binary serialization is unlikely to ever be a bottleneck, and unless it is, we should choose the option that fulfils our requirements of small array size and ease of use.",{"type":14,"tag":31,"props":903,"children":905},{"id":904},"conclusion",[906],{"type":19,"value":907},"Conclusion",{"type":14,"tag":15,"props":909,"children":910},{},[911],{"type":19,"value":912},"We took a look at three – and a half – different ways of converting between structs and byte arrays.",{"type":14,"tag":15,"props":914,"children":915},{},[916,918,923],{"type":19,"value":917},"Judging by memory usage, performance, and ease of use, there is no clear winner – only a clear loser unless we specifically need the additional functionality of ",{"type":14,"tag":88,"props":919,"children":921},{"className":920},[],[922],{"type":19,"value":93},{"type":19,"value":134},{"type":14,"tag":15,"props":925,"children":926},{},[927],{"type":19,"value":928},"However, in marshalling we found a method that is reasonably fast, while acing our other requirements.",{"type":14,"tag":15,"props":930,"children":931},{},[932],{"type":19,"value":933},"While in extremely performance critical code we may want to write our data manually, marshalling is likely the best alternative in the vast majority of cases.",{"type":14,"tag":15,"props":935,"children":936},{},[937],{"type":19,"value":938},"Feel free to let me know if you agree with this analysis, or if you have other methods of achieving the same result that may be worth looking into.",{"type":14,"tag":15,"props":940,"children":941},{},[942],{"type":19,"value":943},"Enjoy the pixels!",{"title":7,"searchDepth":945,"depth":945,"links":946},2,[947,948,949,953,958,961,962],{"id":33,"depth":945,"text":36},{"id":59,"depth":945,"text":62},{"id":85,"depth":945,"text":93,"children":950},[951],{"id":196,"depth":952,"text":199},3,{"id":283,"depth":945,"text":954,"children":955},"BinaryWriter/BinaryReader",[956,957],{"id":355,"depth":952,"text":199},{"id":415,"depth":952,"text":418},{"id":436,"depth":945,"text":439,"children":959},[960],{"id":583,"depth":952,"text":199},{"id":593,"depth":945,"text":596},{"id":904,"depth":945,"text":907},"markdown","content:dotnet:2021-05-01-Converting-between-Structs-and-Byte-Arrays.md","content","dotnet/2021-05-01-Converting-between-Structs-and-Byte-Arrays.md","md","2021-05-01",[970,980,1105,1154,1206,1219,1331],{"title":971,"_path":972,"children":973},"Art","/art",[974,977],{"title":975,"_path":976},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":978,"_path":979},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":981,"_path":982,"children":983},"Dotnet","/dotnet",[984,987,990,993,996,999,1002,1005,1008,1011,1014,1017,1020,1023,1026,1029,1032,1035,1038,1041,1044,1047,1050,1053,1056,1059,1062,1065,1068,1071,1074,1077,1080,1083,1086,1089,1092,1095,1098,1101,1102],{"title":985,"_path":986},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":988,"_path":989},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":991,"_path":992},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":994,"_path":995},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":997,"_path":998},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":1000,"_path":1001},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":1003,"_path":1004},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":1006,"_path":1007},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":1009,"_path":1010},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":1012,"_path":1013},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":1015,"_path":1016},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":1018,"_path":1019},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":1021,"_path":1022},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":1024,"_path":1025},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":1027,"_path":1028},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":1030,"_path":1031},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":1033,"_path":1034},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":1036,"_path":1037},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":1039,"_path":1040},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":1042,"_path":1043},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":1045,"_path":1046},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":1048,"_path":1049},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":1051,"_path":1052},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":1054,"_path":1055},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":1057,"_path":1058},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":1060,"_path":1061},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":1063,"_path":1064},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":1066,"_path":1067},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":1069,"_path":1070},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":1072,"_path":1073},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":1075,"_path":1076},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":1078,"_path":1079},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":1081,"_path":1082},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":1084,"_path":1085},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":1087,"_path":1088},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":1090,"_path":1091},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":1093,"_path":1094},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":1096,"_path":1097},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":1099,"_path":1100},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":8,"_path":4},{"title":1103,"_path":1104},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":1106,"_path":1107,"children":1108},"Game","/game",[1109,1112,1115,1118,1121,1124,1127,1130,1133,1136,1139,1142,1145,1148,1151],{"title":1110,"_path":1111},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":1113,"_path":1114},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":1116,"_path":1117},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":1119,"_path":1120},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":1122,"_path":1123},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":1125,"_path":1126},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":1128,"_path":1129},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":1131,"_path":1132},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":1134,"_path":1135},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":1137,"_path":1138},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":1140,"_path":1141},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":1143,"_path":1144},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":1146,"_path":1147},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":1149,"_path":1150},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":1152,"_path":1153},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":1155,"_path":1156,"children":1157},"Gyj","/gyj",[1158,1161,1164,1167,1170,1173,1176,1179,1182,1185,1188,1191,1194,1197,1200,1203],{"title":1159,"_path":1160},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":1162,"_path":1163},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":1165,"_path":1166},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":1168,"_path":1169},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1171,"_path":1172},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1174,"_path":1175},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1177,"_path":1178},"玩法","/gyj/2022-08-22-wanfa",{"title":1180,"_path":1181},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1183,"_path":1184},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1186,"_path":1187},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1189,"_path":1190},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1192,"_path":1193},"门派内容相关","/gyj/2022-11-17-sect",{"title":1195,"_path":1196},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1198,"_path":1199},"种植","/gyj/2022-12-01-zhongzhi",{"title":1201,"_path":1202},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1204,"_path":1205},"跑商","/gyj/2023-11-01-paoshang",{"title":1207,"_path":1208,"children":1209},"Js","/js",[1210,1213,1216],{"title":1211,"_path":1212},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1214,"_path":1215},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1217,"_path":1218},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1220,"_path":1221,"children":1222},"Tool","/tool",[1223,1226,1229,1232,1235,1238,1241,1244,1247,1250,1253,1256,1259,1262,1265,1268,1271,1274,1277,1280,1283,1286,1289,1292,1295,1298,1301,1304,1307,1310,1313,1316,1319,1322,1325,1328],{"title":1224,"_path":1225},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1227,"_path":1228},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1230,"_path":1231},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1233,"_path":1234},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1236,"_path":1237},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1239,"_path":1240},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1242,"_path":1243},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1245,"_path":1246},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1248,"_path":1249},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1251,"_path":1252},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1254,"_path":1255},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1257,"_path":1258},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1260,"_path":1261},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1263,"_path":1264},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1266,"_path":1267},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1269,"_path":1270},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1272,"_path":1273},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1275,"_path":1276},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1278,"_path":1279},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1281,"_path":1282},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1284,"_path":1285},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1287,"_path":1288},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1290,"_path":1291},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1293,"_path":1294},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1296,"_path":1297},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1299,"_path":1300},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1302,"_path":1303},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1305,"_path":1306},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1308,"_path":1309},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1311,"_path":1312},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1314,"_path":1315},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1317,"_path":1318},"rider的使用","/tool/2022-08-02-rider-use",{"title":1320,"_path":1321},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1323,"_path":1324},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1326,"_path":1327},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1329,"_path":1330},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1332,"_path":1333,"children":1334},"Unity","/unity",[1335,1338,1341,1344,1347,1350,1353,1356,1359,1362,1365,1368,1371,1374,1377,1380,1383,1386,1389,1392,1395,1398,1401,1404,1407,1410,1413,1416,1419,1422,1425,1428,1431,1434,1437,1440,1443,1446,1449,1452,1455,1458,1461,1464,1467,1470,1473,1476,1479,1482,1485,1488,1491,1494,1497,1500,1503,1506,1509,1512,1515,1518,1521,1524,1527,1530,1533,1536,1539,1542,1545,1548],{"title":1336,"_path":1337},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1339,"_path":1340},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1342,"_path":1343},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1345,"_path":1346},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1348,"_path":1349},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1351,"_path":1352},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1354,"_path":1355},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1357,"_path":1358},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1360,"_path":1361},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1363,"_path":1364},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":1366,"_path":1367},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":1369,"_path":1370},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1372,"_path":1373},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1375,"_path":1376},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1378,"_path":1379},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1381,"_path":1382},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1384,"_path":1385},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1387,"_path":1388},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1390,"_path":1391},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1393,"_path":1394},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1396,"_path":1397},"技能系统","/unity/2020-02-15-skill-system",{"title":1399,"_path":1400},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1402,"_path":1403},"角色状态设计","/unity/2020-02-17-character-states",{"title":1405,"_path":1406},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1408,"_path":1409},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1411,"_path":1412},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1414,"_path":1415},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1417,"_path":1418},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1420,"_path":1421},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1423,"_path":1424},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1426,"_path":1427},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1429,"_path":1430},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1432,"_path":1433},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1435,"_path":1436},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1438,"_path":1439},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1441,"_path":1442},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1444,"_path":1445},"unity的addressables","/unity/2020-09-12-addressables",{"title":1447,"_path":1448},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1450,"_path":1451},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1453,"_path":1454},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1456,"_path":1457},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1459,"_path":1460},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1462,"_path":1463},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1465,"_path":1466},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1468,"_path":1469},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1471,"_path":1472},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1474,"_path":1475},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1477,"_path":1478},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1480,"_path":1481},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1483,"_path":1484},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1486,"_path":1487},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1489,"_path":1490},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1492,"_path":1493},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1495,"_path":1496},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1498,"_path":1499},"ability","/unity/2020-11-16-dotssample",{"title":1501,"_path":1502},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1504,"_path":1505},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1507,"_path":1508},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1510,"_path":1511},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1513,"_path":1514},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1516,"_path":1517},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1519,"_path":1520},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1522,"_path":1523},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1525,"_path":1526},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1528,"_path":1529},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1531,"_path":1532},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1534,"_path":1535},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1537,"_path":1538},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1540,"_path":1541},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1543,"_path":1544},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1546,"_path":1547},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1549,"_path":1550},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038139]