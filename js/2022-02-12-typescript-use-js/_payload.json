[{"data":1,"prerenderedAt":941},["Reactive",2],{"content-query-nIX7Xl4wdv":3,"content-navigation-8C37fagqQL":359},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":353,"_id":354,"_source":355,"_file":356,"_extension":357,"date":358},"/js/2022-02-12-typescript-use-js","js",false,"","如何在TypeScript中使用JS类库","使用流程首先要清楚类库是什么类型，不同的类库有不同的使用方式寻找声明文件JS类库一般有三类：全局类库、模块类库、UMD库。例如，jQuery是一种UMD库，既可以通过全局方式来引用，也可以模块化引用。声明文件当我们要使用一个类库时，需要ts声明文件，对外暴露API，有时候声明文件在源码中，大部分是单独提供额外安装。比如jQuery需要额外安装类型声明包。幸运的是，大部分的类库，TS社区都有声明文件。名称为@types/类库名，需要去这个网站搜一下http://microsoft.github.io/TypeSearch/如果没有，需要自己去写一个，这也是为社区贡献的好机会。http://def",{"type":11,"children":12,"toc":342},"root",[13,25,40,46,55,60,81,94,99,109,117,135,140,145,153,158,166,174,187,192,200,205,213,222,227,241,246,251,259,264,272,277,282,290,295,303,311,316,321,329,334],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"使用流程",[19],{"type":14,"tag":20,"props":21,"children":22},"strong",{},[23],{"type":24,"value":17},"text",{"type":14,"tag":26,"props":27,"children":28},"ol",{},[29,35],{"type":14,"tag":30,"props":31,"children":32},"li",{},[33],{"type":24,"value":34},"首先要清楚类库是什么类型，不同的类库有不同的使用方式",{"type":14,"tag":30,"props":36,"children":37},{},[38],{"type":24,"value":39},"寻找声明文件",{"type":14,"tag":41,"props":42,"children":43},"p",{},[44],{"type":24,"value":45},"JS类库一般有三类：全局类库、模块类库、UMD库。例如，jQuery是一种UMD库，既可以通过全局方式来引用，也可以模块化引用。",{"type":14,"tag":47,"props":48,"children":50},"h3",{"id":49},"声明文件",[51],{"type":14,"tag":20,"props":52,"children":53},{},[54],{"type":24,"value":49},{"type":14,"tag":41,"props":56,"children":57},{},[58],{"type":24,"value":59},"当我们要使用一个类库时，需要ts声明文件，对外暴露API，有时候声明文件在源码中，大部分是单独提供额外安装。比如jQuery需要额外安装类型声明包。",{"type":14,"tag":41,"props":61,"children":62},{},[63,65,74],{"type":24,"value":64},"幸运的是，大部分的类库，TS社区都有声明文件。名称为@types/类库名，需要去这个网站搜一下",{"type":14,"tag":66,"props":67,"children":71},"a",{"href":68,"rel":69},"https://microsoft.github.io/TypeSearch/",[70],"nofollow",[72],{"type":24,"value":73},"http://",{"type":14,"tag":66,"props":75,"children":78},{"href":76,"rel":77},"http://microsoft.github.io/TypeSearch/",[70],[79],{"type":24,"value":80},"microsoft.github.io/TypeSearch/",{"type":14,"tag":41,"props":82,"children":83},{},[84,86,92],{"type":24,"value":85},"如果没有，需要自己去写一个，这也是为社区贡献的好机会。",{"type":14,"tag":66,"props":87,"children":90},{"href":88,"rel":89},"http://definitelytyped.org/guides/contributing.html",[70],[91],{"type":24,"value":88},{"type":24,"value":93},"这里提供了一些写声明文件的方法。在写ts声明文件的时候，暂时用不到的API可以可以不写。>",{"type":14,"tag":41,"props":95,"children":96},{},[97],{"type":24,"value":98},"下面我将演示，如何在ts文件中使用三种类库。首先准备三个js文件，分别表示全局类库、模块类库、UMD库。",{"type":14,"tag":100,"props":101,"children":103},"pre",{"code":102},"// 全局类库  global-lib.js\nfunction globalLib(options) {\n   console.log(options);\n}\nglobalLib.version = \"1.0.0\";\nglobalLib.doSomething = function () {\n   console.log('globalLib do something');\n};\n\n// 模块类库  module-lib.js\nconst version = \"1.0.0\";\nfunction doSomething() {\n   console.log('moduleLib do something');\n}\nfunction moduleLib(options) {\n   console.log(options);\n}\nmoduleLib.version = version;\nmoduleLib.doSomething = doSomething;\nmodule.exports = moduleLib;\n\n// UMD库  umd-lib.js\n(function (root, factory) {\n   if(typeof define === \"function\" && define.amd)\n   {\n      define(factory);\n   }else if(typeof module === \"object\" && module.exports)\n   {\n      module.exports = factory();\n   }else\n   {\n      root.umdLib = factory();\n   }\n})(this, function () {\n   return {\n      version: \"1.0.2\",\n      doSomething() {\n         console.log('umdLib do something');\n      }\n   }\n});\n",[104],{"type":14,"tag":105,"props":106,"children":107},"code",{"__ignoreMap":7},[108],{"type":24,"value":102},{"type":14,"tag":15,"props":110,"children":112},{"id":111},"全局类库",[113],{"type":14,"tag":20,"props":114,"children":115},{},[116],{"type":24,"value":111},{"type":14,"tag":26,"props":118,"children":119},{},[120,125,130],{"type":14,"tag":30,"props":121,"children":122},{},[123],{"type":24,"value":124},"在HTML文件标签中引入该库",{"type":14,"tag":30,"props":126,"children":127},{},[128],{"type":24,"value":129},"将写好的声明文件与js库放在同一文件夹下，命名相同，后缀名为.d.ts",{"type":14,"tag":30,"props":131,"children":132},{},[133],{"type":24,"value":134},"此时可以在ts文件中使用全局API",{"type":14,"tag":41,"props":136,"children":137},{},[138],{"type":24,"value":139},"如果此时编译器未报错，而浏览器报错not defined，可能是html中引入的路径是相对路径，改成绝对路径即可（以项目目录为根目录）。",{"type":14,"tag":41,"props":141,"children":142},{},[143],{"type":24,"value":144},"声明文件global-lib.d.ts",{"type":14,"tag":100,"props":146,"children":148},{"code":147},"declare function globalLib(options: globalLib.Options): void;\ndeclare namespace globalLib{\n   const version: string;\n   function doSomething(): void;\n   interface Options {\n      [key: string]: any,\n   }\n}\n",[149],{"type":14,"tag":105,"props":150,"children":151},{"__ignoreMap":7},[152],{"type":24,"value":147},{"type":14,"tag":41,"props":154,"children":155},{},[156],{"type":24,"value":157},"在ts文件中使用该库：",{"type":14,"tag":100,"props":159,"children":161},{"code":160},"globalLib({x:1});\nglobalLib.doSomething();\n",[162],{"type":14,"tag":105,"props":163,"children":164},{"__ignoreMap":7},[165],{"type":24,"value":160},{"type":14,"tag":15,"props":167,"children":169},{"id":168},"模块类库",[170],{"type":14,"tag":20,"props":171,"children":172},{},[173],{"type":24,"value":168},{"type":14,"tag":26,"props":175,"children":176},{},[177,182],{"type":14,"tag":30,"props":178,"children":179},{},[180],{"type":24,"value":181},"将声明文件放在相同的目录下",{"type":14,"tag":30,"props":183,"children":184},{},[185],{"type":24,"value":186},"在ts中引入",{"type":14,"tag":41,"props":188,"children":189},{},[190],{"type":24,"value":191},"声明文件 module-lib.d.ts",{"type":14,"tag":100,"props":193,"children":195},{"code":194},"declare function moduleLib(options: Options): void;\ninterface Options {\n   [key: string]: any,\n}\ndeclare namespace moduleLib{\n   const version: string;\n   function doSomething(): void;\n}\nexport = moduleLib; // 这样写兼容性更好\n",[196],{"type":14,"tag":105,"props":197,"children":198},{"__ignoreMap":7},[199],{"type":24,"value":194},{"type":14,"tag":41,"props":201,"children":202},{},[203],{"type":24,"value":204},"ts中使用类库",{"type":14,"tag":100,"props":206,"children":208},{"code":207},"import moduleLib from './Libs/module-lib.js';\nmoduleLib.doSomething();\n",[209],{"type":14,"tag":105,"props":210,"children":211},{"__ignoreMap":7},[212],{"type":24,"value":207},{"type":14,"tag":15,"props":214,"children":216},{"id":215},"umd类库",[217],{"type":14,"tag":20,"props":218,"children":219},{},[220],{"type":24,"value":221},"UMD类库",{"type":14,"tag":41,"props":223,"children":224},{},[225],{"type":24,"value":226},"UMD库有两种使用方式：",{"type":14,"tag":228,"props":229,"children":230},"ul",{},[231,236],{"type":14,"tag":30,"props":232,"children":233},{},[234],{"type":24,"value":235},"引入全局类库的方式",{"type":14,"tag":30,"props":237,"children":238},{},[239],{"type":24,"value":240},"模块类库引入的方式",{"type":14,"tag":41,"props":242,"children":243},{},[244],{"type":24,"value":245},"其中，在使用全局类库的引入方式时，编译器会提示，不建议这样做，需要在tsconfig.json中打开allUmdGlobalAccess配置项可以消除提示。",{"type":14,"tag":41,"props":247,"children":248},{},[249],{"type":24,"value":250},"声明文件 umd-lib.d.ts",{"type":14,"tag":100,"props":252,"children":254},{"code":253},"declare namespace umdLib {\n   const version: string;\n   function doSomething(): void;\n}\nexport as namespace umdLib // 专门为umd库准备的语句，不可缺少\nexport = umdLib\n",[255],{"type":14,"tag":105,"props":256,"children":257},{"__ignoreMap":7},[258],{"type":24,"value":253},{"type":14,"tag":41,"props":260,"children":261},{},[262],{"type":24,"value":263},"ts中使用UMD库（不再演示全局使用方式）",{"type":14,"tag":100,"props":265,"children":267},{"code":266},"import umdLib from './Libs/umd-lib'\numdLib.doSomething();\nconsole.log(umdLib.version);\n",[268],{"type":14,"tag":105,"props":269,"children":270},{"__ignoreMap":7},[271],{"type":24,"value":266},{"type":14,"tag":41,"props":273,"children":274},{},[275],{"type":24,"value":276},"例：在ts中使用jQuery（不演示全局引入方式）",{"type":14,"tag":41,"props":278,"children":279},{},[280],{"type":24,"value":281},"先安装jquery及其声明文件",{"type":14,"tag":100,"props":283,"children":285},{"code":284},"npm install -D jquery @types/jquery\n",[286],{"type":14,"tag":105,"props":287,"children":288},{"__ignoreMap":7},[289],{"type":24,"value":284},{"type":14,"tag":41,"props":291,"children":292},{},[293],{"type":24,"value":294},"使用：",{"type":14,"tag":100,"props":296,"children":298},{"code":297},"import $ from 'jquery';\n$(\".app\").css(\"color\",\"red\");\n",[299],{"type":14,"tag":105,"props":300,"children":301},{"__ignoreMap":7},[302],{"type":24,"value":297},{"type":14,"tag":15,"props":304,"children":306},{"id":305},"为类库添加插件",[307],{"type":14,"tag":20,"props":308,"children":309},{},[310],{"type":24,"value":305},{"type":14,"tag":41,"props":312,"children":313},{},[314],{"type":24,"value":315},"即为类库添加自定义的方法",{"type":14,"tag":41,"props":317,"children":318},{},[319],{"type":24,"value":320},"其中UMD库和模块类库的添加插件方法一致。",{"type":14,"tag":100,"props":322,"children":324},{"code":323},"// 为全局类库增添自定义方法\ndeclare global {\n   namespace globalLib {\n      function myFunction(): void\n   }\n}\nglobalLib.myFunction = () =>{console.log(\"global插件\")};\n\n// 为模块类库添加自定义方法\ndeclare module \"./Libs/module-lib.js\"{\n   export function myFunction(): void;\n} // 为module-lib类库声明myFunction方法\nmoduleLib.myFunction = () => {console.log(\"module插件\")}; // 定义自定义方法\n\n// 为UMD库添加自定义方法\ndeclare module \"./Libs/umd-lib.js\"{\n   export function myFunction(): void;\n} // 为umd-lib类库声明myFunction方法\numdLib.myFunction = () => {console.log(\"umd插件\")}; // 定义自定义方法\n\nglobalLib.myFunction();\nmoduleLib.myFunction();\numdLib.myFunction();\n",[325],{"type":14,"tag":105,"props":326,"children":327},{"__ignoreMap":7},[328],{"type":24,"value":323},{"type":14,"tag":41,"props":330,"children":331},{},[332],{"type":24,"value":333},"例如，为类库moment增添自定义方法（jQuery不可以，需要使用官方提供的API）",{"type":14,"tag":100,"props":335,"children":337},{"code":336},"npm install -D moment @types/moment\n\nimport m from 'moment';\ndeclare module 'moment'{\n   export function myFunction(): void;\n}\nm.myFunction = () => {console.log(\"moment插件\")};\n\nm.myFunction();\n",[338],{"type":14,"tag":105,"props":339,"children":340},{"__ignoreMap":7},[341],{"type":24,"value":336},{"title":7,"searchDepth":343,"depth":343,"links":344},2,[345,349,350,351,352],{"id":17,"depth":343,"text":17,"children":346},[347],{"id":49,"depth":348,"text":49},3,{"id":111,"depth":343,"text":111},{"id":168,"depth":343,"text":168},{"id":215,"depth":343,"text":221},{"id":305,"depth":343,"text":305},"markdown","content:js:2022-02-12-TypeScript-use-Js.md","content","js/2022-02-12-TypeScript-use-Js.md","md","2022-02-12",[360,370,497,546,598,609,721],{"title":361,"_path":362,"children":363},"Art","/art",[364,367],{"title":365,"_path":366},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":368,"_path":369},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":371,"_path":372,"children":373},"Dotnet","/dotnet",[374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494],{"title":375,"_path":376},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":378,"_path":379},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":381,"_path":382},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":384,"_path":385},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":387,"_path":388},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":390,"_path":391},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":393,"_path":394},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":396,"_path":397},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":399,"_path":400},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":402,"_path":403},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":405,"_path":406},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":408,"_path":409},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":411,"_path":412},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":414,"_path":415},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":417,"_path":418},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":420,"_path":421},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":423,"_path":424},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":426,"_path":427},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":429,"_path":430},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":432,"_path":433},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":435,"_path":436},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":438,"_path":439},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":441,"_path":442},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":444,"_path":445},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":447,"_path":448},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":450,"_path":451},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":453,"_path":454},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":456,"_path":457},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":459,"_path":460},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":462,"_path":463},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":465,"_path":466},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":468,"_path":469},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":471,"_path":472},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":474,"_path":475},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":477,"_path":478},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":480,"_path":481},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":483,"_path":484},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":486,"_path":487},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":489,"_path":490},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":492,"_path":493},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":495,"_path":496},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":498,"_path":499,"children":500},"Game","/game",[501,504,507,510,513,516,519,522,525,528,531,534,537,540,543],{"title":502,"_path":503},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":505,"_path":506},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":508,"_path":509},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":511,"_path":512},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":514,"_path":515},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":517,"_path":518},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":520,"_path":521},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":523,"_path":524},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":526,"_path":527},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":529,"_path":530},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":532,"_path":533},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":535,"_path":536},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":538,"_path":539},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":541,"_path":542},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":544,"_path":545},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":547,"_path":548,"children":549},"Gyj","/gyj",[550,553,556,559,562,565,568,571,574,577,580,583,586,589,592,595],{"title":551,"_path":552},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":554,"_path":555},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":557,"_path":558},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":560,"_path":561},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":563,"_path":564},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":566,"_path":567},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":569,"_path":570},"玩法","/gyj/2022-08-22-wanfa",{"title":572,"_path":573},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":575,"_path":576},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":578,"_path":579},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":581,"_path":582},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":584,"_path":585},"门派内容相关","/gyj/2022-11-17-sect",{"title":587,"_path":588},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":590,"_path":591},"种植","/gyj/2022-12-01-zhongzhi",{"title":593,"_path":594},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":596,"_path":597},"跑商","/gyj/2023-11-01-paoshang",{"title":599,"_path":600,"children":601},"Js","/js",[602,603,606],{"title":8,"_path":4},{"title":604,"_path":605},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":607,"_path":608},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":610,"_path":611,"children":612},"Tool","/tool",[613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694,697,700,703,706,709,712,715,718],{"title":614,"_path":615},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":617,"_path":618},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":620,"_path":621},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":623,"_path":624},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":626,"_path":627},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":629,"_path":630},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":632,"_path":633},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":635,"_path":636},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":638,"_path":639},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":641,"_path":642},"mac下brew 使用","/tool/2020-01-13-brew",{"title":644,"_path":645},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":647,"_path":648},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":650,"_path":651},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":653,"_path":654},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":656,"_path":657},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":659,"_path":660},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":662,"_path":663},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":665,"_path":666},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":668,"_path":669},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":671,"_path":672},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":674,"_path":675},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":677,"_path":678},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":680,"_path":681},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":683,"_path":684},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":686,"_path":687},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":689,"_path":690},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":692,"_path":693},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":695,"_path":696},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":698,"_path":699},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":701,"_path":702},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":704,"_path":705},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":707,"_path":708},"rider的使用","/tool/2022-08-02-rider-use",{"title":710,"_path":711},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":713,"_path":714},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":716,"_path":717},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":719,"_path":720},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":722,"_path":723,"children":724},"Unity","/unity",[725,728,731,734,737,740,743,746,749,752,755,758,761,764,767,770,773,776,779,782,785,788,791,794,797,800,803,806,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,896,899,902,905,908,911,914,917,920,923,926,929,932,935,938],{"title":726,"_path":727},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":729,"_path":730},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":732,"_path":733},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":735,"_path":736},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":738,"_path":739},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":741,"_path":742},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":744,"_path":745},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":747,"_path":748},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":750,"_path":751},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":753,"_path":754},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":756,"_path":757},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":759,"_path":760},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":762,"_path":763},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":765,"_path":766},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":768,"_path":769},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":771,"_path":772},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":774,"_path":775},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":777,"_path":778},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":780,"_path":781},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":783,"_path":784},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":786,"_path":787},"技能系统","/unity/2020-02-15-skill-system",{"title":789,"_path":790},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":792,"_path":793},"角色状态设计","/unity/2020-02-17-character-states",{"title":795,"_path":796},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":798,"_path":799},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":801,"_path":802},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":804,"_path":805},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":807,"_path":808},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":810,"_path":811},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":813,"_path":814},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":816,"_path":817},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":819,"_path":820},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":822,"_path":823},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":825,"_path":826},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":828,"_path":829},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":831,"_path":832},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":834,"_path":835},"unity的addressables","/unity/2020-09-12-addressables",{"title":837,"_path":838},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":840,"_path":841},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":843,"_path":844},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":846,"_path":847},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":849,"_path":850},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":852,"_path":853},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":855,"_path":856},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":858,"_path":859},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":861,"_path":862},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":864,"_path":865},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":867,"_path":868},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":870,"_path":871},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":873,"_path":874},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":876,"_path":877},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":879,"_path":880},"简单保存工具","/unity/2020-11-13-simple-save",{"title":882,"_path":883},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":885,"_path":886},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":888,"_path":889},"ability","/unity/2020-11-16-dotssample",{"title":891,"_path":892},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":894,"_path":895},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":897,"_path":898},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":900,"_path":901},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":903,"_path":904},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":906,"_path":907},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":909,"_path":910},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":912,"_path":913},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":915,"_path":916},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":918,"_path":919},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":921,"_path":922},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":924,"_path":925},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":927,"_path":928},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":930,"_path":931},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":933,"_path":934},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":936,"_path":937},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":939,"_path":940},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779035747]