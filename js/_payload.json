[{"data":1,"prerenderedAt":1296},["Reactive",2],{"content-navigation-8C37fagqQL":3,"content-query-wz7uIBbYay":587},[4,14,141,190,242,255,367],{"title":5,"_path":6,"children":7},"Art","/art",[8,11],{"title":9,"_path":10},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":12,"_path":13},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":15,"_path":16,"children":17},"Dotnet","/dotnet",[18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138],{"title":19,"_path":20},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":22,"_path":23},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":25,"_path":26},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":28,"_path":29},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":31,"_path":32},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":34,"_path":35},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":37,"_path":38},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":40,"_path":41},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":43,"_path":44},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":46,"_path":47},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":49,"_path":50},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":52,"_path":53},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":55,"_path":56},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":58,"_path":59},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":61,"_path":62},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":64,"_path":65},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":67,"_path":68},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":70,"_path":71},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":73,"_path":74},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":76,"_path":77},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":79,"_path":80},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":82,"_path":83},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":85,"_path":86},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":88,"_path":89},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":91,"_path":92},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":94,"_path":95},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":97,"_path":98},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":100,"_path":101},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":103,"_path":104},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":106,"_path":107},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":109,"_path":110},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":112,"_path":113},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":115,"_path":116},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":118,"_path":119},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":121,"_path":122},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":124,"_path":125},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":127,"_path":128},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":130,"_path":131},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":133,"_path":134},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":136,"_path":137},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":139,"_path":140},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":142,"_path":143,"children":144},"Game","/game",[145,148,151,154,157,160,163,166,169,172,175,178,181,184,187],{"title":146,"_path":147},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":149,"_path":150},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":152,"_path":153},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":155,"_path":156},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":158,"_path":159},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":161,"_path":162},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":164,"_path":165},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":167,"_path":168},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":170,"_path":171},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":173,"_path":174},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":176,"_path":177},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":179,"_path":180},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":182,"_path":183},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":185,"_path":186},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":188,"_path":189},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":191,"_path":192,"children":193},"Gyj","/gyj",[194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239],{"title":195,"_path":196},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":198,"_path":199},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":201,"_path":202},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":204,"_path":205},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":207,"_path":208},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":210,"_path":211},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":213,"_path":214},"玩法","/gyj/2022-08-22-wanfa",{"title":216,"_path":217},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":219,"_path":220},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":222,"_path":223},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":225,"_path":226},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":228,"_path":229},"门派内容相关","/gyj/2022-11-17-sect",{"title":231,"_path":232},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":234,"_path":235},"种植","/gyj/2022-12-01-zhongzhi",{"title":237,"_path":238},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":240,"_path":241},"跑商","/gyj/2023-11-01-paoshang",{"title":243,"_path":244,"children":245},"Js","/js",[246,249,252],{"title":247,"_path":248},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":250,"_path":251},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":253,"_path":254},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":256,"_path":257,"children":258},"Tool","/tool",[259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364],{"title":260,"_path":261},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":263,"_path":264},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":266,"_path":267},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":269,"_path":270},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":272,"_path":273},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":275,"_path":276},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":278,"_path":279},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":281,"_path":282},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":284,"_path":285},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":287,"_path":288},"mac下brew 使用","/tool/2020-01-13-brew",{"title":290,"_path":291},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":293,"_path":294},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":296,"_path":297},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":299,"_path":300},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":302,"_path":303},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":305,"_path":306},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":308,"_path":309},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":311,"_path":312},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":314,"_path":315},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":317,"_path":318},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":320,"_path":321},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":323,"_path":324},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":326,"_path":327},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":329,"_path":330},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":332,"_path":333},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":335,"_path":336},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":338,"_path":339},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":341,"_path":342},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":344,"_path":345},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":347,"_path":348},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":350,"_path":351},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":353,"_path":354},"rider的使用","/tool/2022-08-02-rider-use",{"title":356,"_path":357},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":359,"_path":360},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":362,"_path":363},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":365,"_path":366},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":368,"_path":369,"children":370},"Unity","/unity",[371,374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584],{"title":372,"_path":373},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":375,"_path":376},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":378,"_path":379},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":381,"_path":382},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":384,"_path":385},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":387,"_path":388},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":390,"_path":391},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":393,"_path":394},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":396,"_path":397},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":399,"_path":400},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":402,"_path":403},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":405,"_path":406},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":408,"_path":409},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":411,"_path":412},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":414,"_path":415},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":417,"_path":418},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":420,"_path":421},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":423,"_path":424},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":426,"_path":427},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":429,"_path":430},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":432,"_path":433},"技能系统","/unity/2020-02-15-skill-system",{"title":435,"_path":436},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":438,"_path":439},"角色状态设计","/unity/2020-02-17-character-states",{"title":441,"_path":442},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":444,"_path":445},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":447,"_path":448},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":450,"_path":451},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":453,"_path":454},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":456,"_path":457},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":459,"_path":460},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":462,"_path":463},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":465,"_path":466},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":468,"_path":469},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":471,"_path":472},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":474,"_path":475},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":477,"_path":478},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":480,"_path":481},"unity的addressables","/unity/2020-09-12-addressables",{"title":483,"_path":484},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":486,"_path":487},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":489,"_path":490},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":492,"_path":493},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":495,"_path":496},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":498,"_path":499},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":501,"_path":502},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":504,"_path":505},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":507,"_path":508},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":510,"_path":511},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":513,"_path":514},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":516,"_path":517},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":519,"_path":520},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":522,"_path":523},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":525,"_path":526},"简单保存工具","/unity/2020-11-13-simple-save",{"title":528,"_path":529},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":531,"_path":532},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":534,"_path":535},"ability","/unity/2020-11-16-dotssample",{"title":537,"_path":538},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":540,"_path":541},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":543,"_path":544},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":546,"_path":547},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":549,"_path":550},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":552,"_path":553},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":555,"_path":556},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":558,"_path":559},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":561,"_path":562},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":564,"_path":565},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":567,"_path":568},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":570,"_path":571},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":573,"_path":574},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":576,"_path":577},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":579,"_path":580},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":582,"_path":583},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":585,"_path":586},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",[588,797,958],{"_path":254,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":253,"description":592,"body":593,"_type":791,"_id":792,"_source":793,"_file":794,"_extension":795,"date":796},"js",false,"","一、Flex 布局是什么？Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。\n.box{\n display: flex;\n}\n\n行内元素也可以使用 Flex 布局。\n.box{\n display: inline-flex;\n}\n\nWebkit 内核的浏览器，必须加上-webkit前缀。\n.box{\n display: -webkit-flex; /* Safari */\n display: flex;\n}\n\n注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将",{"type":594,"children":595,"toc":786},"root",[596,605,611,616,633,638,650,663,675,704,710,715,723,759,779],{"type":597,"tag":598,"props":599,"children":601},"element","h2",{"id":600},"一flex-布局是什么",[602],{"type":603,"value":604},"text","一、Flex 布局是什么？",{"type":597,"tag":606,"props":607,"children":608},"p",{},[609],{"type":603,"value":610},"Flex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。",{"type":597,"tag":606,"props":612,"children":613},{},[614],{"type":603,"value":615},"任何一个容器都可以指定为 Flex 布局。",{"type":597,"tag":617,"props":618,"children":619},"blockquote",{},[620],{"type":597,"tag":621,"props":622,"children":627},"pre",{"className":623,"code":625,"language":626,"meta":591},[624],"language-css","\n.box{\n display: flex;\n}\n\n","css",[628],{"type":597,"tag":629,"props":630,"children":631},"code",{"__ignoreMap":591},[632],{"type":603,"value":625},{"type":597,"tag":606,"props":634,"children":635},{},[636],{"type":603,"value":637},"行内元素也可以使用 Flex 布局。",{"type":597,"tag":617,"props":639,"children":640},{},[641],{"type":597,"tag":621,"props":642,"children":645},{"className":643,"code":644,"language":626,"meta":591},[624],"\n.box{\n display: inline-flex;\n}\n\n",[646],{"type":597,"tag":629,"props":647,"children":648},{"__ignoreMap":591},[649],{"type":603,"value":644},{"type":597,"tag":606,"props":651,"children":652},{},[653,655,661],{"type":603,"value":654},"Webkit 内核的浏览器，必须加上",{"type":597,"tag":629,"props":656,"children":658},{"className":657},[],[659],{"type":603,"value":660},"-webkit",{"type":603,"value":662},"前缀。",{"type":597,"tag":617,"props":664,"children":665},{},[666],{"type":597,"tag":621,"props":667,"children":670},{"className":668,"code":669,"language":626,"meta":591},[624],"\n.box{\n display: -webkit-flex; /* Safari */\n display: flex;\n}\n\n",[671],{"type":597,"tag":629,"props":672,"children":673},{"__ignoreMap":591},[674],{"type":603,"value":669},{"type":597,"tag":606,"props":676,"children":677},{},[678,680,686,688,694,696,702],{"type":603,"value":679},"注意，设为 Flex 布局以后，子元素的",{"type":597,"tag":629,"props":681,"children":683},{"className":682},[],[684],{"type":603,"value":685},"float",{"type":603,"value":687},"、",{"type":597,"tag":629,"props":689,"children":691},{"className":690},[],[692],{"type":603,"value":693},"clear",{"type":603,"value":695},"和",{"type":597,"tag":629,"props":697,"children":699},{"className":698},[],[700],{"type":603,"value":701},"vertical-align",{"type":603,"value":703},"属性将失效。",{"type":597,"tag":598,"props":705,"children":707},{"id":706},"二基本概念",[708],{"type":603,"value":709},"二、基本概念",{"type":597,"tag":606,"props":711,"children":712},{},[713],{"type":603,"value":714},"采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。",{"type":597,"tag":606,"props":716,"children":717},{},[718],{"type":597,"tag":719,"props":720,"children":722},"img",{"alt":591,"src":721},"/images/2024-03-17-flex-use/51PtxZl.png",[],{"type":597,"tag":606,"props":724,"children":725},{},[726,728,734,736,742,744,750,751,757],{"type":603,"value":727},"容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做",{"type":597,"tag":629,"props":729,"children":731},{"className":730},[],[732],{"type":603,"value":733},"main start",{"type":603,"value":735},"，结束位置叫做",{"type":597,"tag":629,"props":737,"children":739},{"className":738},[],[740],{"type":603,"value":741},"main end",{"type":603,"value":743},"；交叉轴的开始位置叫做",{"type":597,"tag":629,"props":745,"children":747},{"className":746},[],[748],{"type":603,"value":749},"cross start",{"type":603,"value":735},{"type":597,"tag":629,"props":752,"children":754},{"className":753},[],[755],{"type":603,"value":756},"cross end",{"type":603,"value":758},"。",{"type":597,"tag":606,"props":760,"children":761},{},[762,764,770,772,778],{"type":603,"value":763},"项目默认沿主轴排列。单个项目占据的主轴空间叫做",{"type":597,"tag":629,"props":765,"children":767},{"className":766},[],[768],{"type":603,"value":769},"main size",{"type":603,"value":771},"，占据的交叉轴空间叫做",{"type":597,"tag":629,"props":773,"children":775},{"className":774},[],[776],{"type":603,"value":777},"cross size",{"type":603,"value":758},{"type":597,"tag":606,"props":780,"children":781},{},[782],{"type":597,"tag":719,"props":783,"children":785},{"alt":591,"src":784},"/images/2024-03-17-flex-use/VFpkfNe.png",[],{"title":591,"searchDepth":787,"depth":787,"links":788},2,[789,790],{"id":600,"depth":787,"text":604},{"id":706,"depth":787,"text":709},"markdown","content:js:2024-03-17-flex-use.md","content","js/2024-03-17-flex-use.md","md","2024-03-17",{"_path":251,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":250,"description":798,"body":799,"_type":791,"_id":955,"_source":793,"_file":956,"_extension":795,"date":957},"执行npx nuxi init nuxt-app报错",{"type":594,"children":800,"toc":953},[801,807,820,825,839,847,852,860,865,878,889,896,907,918,930,940,945],{"type":597,"tag":802,"props":803,"children":805},"h1",{"id":804},"问题",[806],{"type":603,"value":804},{"type":597,"tag":606,"props":808,"children":809},{},[810,812,818],{"type":603,"value":811},"执行",{"type":597,"tag":629,"props":813,"children":815},{"className":814},[],[816],{"type":603,"value":817},"npx nuxi init nuxt-app",{"type":603,"value":819},"报错",{"type":597,"tag":802,"props":821,"children":823},{"id":822},"解决方案",[824],{"type":603,"value":822},{"type":597,"tag":606,"props":826,"children":827},{},[828,830],{"type":603,"value":829},"官方初始化链接：",{"type":597,"tag":831,"props":832,"children":836},"a",{"href":833,"rel":834},"https://link.juejin.cn/?target=https%3A%2F%2Fv3.nuxtjs.org%2Fgetting-started%2Finstallation",[835],"nofollow",[837],{"type":603,"value":838},"v3.nuxtjs.org/getting-sta…",{"type":597,"tag":606,"props":840,"children":841},{},[842],{"type":597,"tag":629,"props":843,"children":845},{"className":844},[],[846],{"type":603,"value":817},{"type":597,"tag":606,"props":848,"children":849},{},[850],{"type":603,"value":851},"执行后报错",{"type":597,"tag":621,"props":853,"children":855},{"code":854},"Failed to download template from registry: request to https://raw.githubusercontent.com/nuxt/starter/templates/templates/v3.json failed, reason: connect ECONNREFUSED 0.0.0.0:443\n\n  at /Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/chunks/init.mjs:13269:11\n  at processTicksAndRejections (node:internal/process/task_queues:96:5)\n  at async downloadTemplate (/Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/chunks/init.mjs:13268:20)\n  at async Object.invoke (/Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/chunks/init.mjs:13336:15)\n  at async _main (/Users/ming/.npm/_npx/a95e0f536cf9a537/node_modules/nuxi/dist/cli.mjs:50:20)\n",[856],{"type":597,"tag":629,"props":857,"children":858},{"__ignoreMap":591},[859],{"type":603,"value":854},{"type":597,"tag":606,"props":861,"children":862},{},[863],{"type":603,"value":864},"解决：",{"type":597,"tag":606,"props":866,"children":867},{},[868,870,876],{"type":603,"value":869},"先",{"type":597,"tag":629,"props":871,"children":873},{"className":872},[],[874],{"type":603,"value":875},"ping raw.githubusercontent.com",{"type":603,"value":877},"是否连通",{"type":597,"tag":606,"props":879,"children":880},{},[881,883],{"type":603,"value":882},"如果不通，访问",{"type":597,"tag":629,"props":884,"children":886},{"className":885},[],[887],{"type":603,"value":888},"https://ipaddress.com/website/raw.githubusercontent.com",{"type":597,"tag":606,"props":890,"children":891},{},[892],{"type":597,"tag":719,"props":893,"children":895},{"alt":591,"src":894},"/images/2023-05-16-nuxt3-init-fail/1684405553000.png",[],{"type":597,"tag":606,"props":897,"children":898},{},[899,901],{"type":603,"value":900},"然后添加host，mac下host配置路径：",{"type":597,"tag":629,"props":902,"children":904},{"className":903},[],[905],{"type":603,"value":906},"/etc/hosts",{"type":597,"tag":606,"props":908,"children":909},{},[910,912],{"type":603,"value":911},"新增一行， ",{"type":597,"tag":629,"props":913,"children":915},{"className":914},[],[916],{"type":603,"value":917},"185.199.108.133 raw.githubusercontent.com",{"type":597,"tag":606,"props":919,"children":920},{},[921,923,928],{"type":603,"value":922},"添加完host后，再ping一下 ",{"type":597,"tag":629,"props":924,"children":926},{"className":925},[],[927],{"type":603,"value":875},{"type":603,"value":929}," 是否连通",{"type":597,"tag":606,"props":931,"children":932},{},[933,935],{"type":603,"value":934},"ping通后，再重新执行",{"type":597,"tag":629,"props":936,"children":938},{"className":937},[],[939],{"type":603,"value":817},{"type":597,"tag":606,"props":941,"children":942},{},[943],{"type":603,"value":944},"成功显示：",{"type":597,"tag":621,"props":946,"children":948},{"code":947}," Nuxt project is created with v3 template. Next steps:                                     12:07:07\n › cd nuxt-app                                                                               12:07:07\n › Install dependencies with npm install or yarn install or pnpm install --shamefully-hoist  12:07:07\n › Start development server with npm run dev or yarn dev or pnpm run dev\n",[949],{"type":597,"tag":629,"props":950,"children":951},{"__ignoreMap":591},[952],{"type":603,"value":947},{"title":591,"searchDepth":787,"depth":787,"links":954},[],"content:js:2023-05-16-nuxt3-init-fail.md","js/2023-05-16-nuxt3-init-fail.md","2023-05-16",{"_path":248,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":247,"description":959,"body":960,"_type":791,"_id":1293,"_source":793,"_file":1294,"_extension":795,"date":1295},"使用流程首先要清楚类库是什么类型，不同的类库有不同的使用方式寻找声明文件JS类库一般有三类：全局类库、模块类库、UMD库。例如，jQuery是一种UMD库，既可以通过全局方式来引用，也可以模块化引用。声明文件当我们要使用一个类库时，需要ts声明文件，对外暴露API，有时候声明文件在源码中，大部分是单独提供额外安装。比如jQuery需要额外安装类型声明包。幸运的是，大部分的类库，TS社区都有声明文件。名称为@types/类库名，需要去这个网站搜一下http://microsoft.github.io/TypeSearch/如果没有，需要自己去写一个，这也是为社区贡献的好机会。http://def",{"type":594,"children":961,"toc":1283},[962,971,986,991,1000,1005,1024,1037,1042,1050,1058,1076,1081,1086,1094,1099,1107,1115,1128,1133,1141,1146,1154,1163,1168,1182,1187,1192,1200,1205,1213,1218,1223,1231,1236,1244,1252,1257,1262,1270,1275],{"type":597,"tag":598,"props":963,"children":965},{"id":964},"使用流程",[966],{"type":597,"tag":967,"props":968,"children":969},"strong",{},[970],{"type":603,"value":964},{"type":597,"tag":972,"props":973,"children":974},"ol",{},[975,981],{"type":597,"tag":976,"props":977,"children":978},"li",{},[979],{"type":603,"value":980},"首先要清楚类库是什么类型，不同的类库有不同的使用方式",{"type":597,"tag":976,"props":982,"children":983},{},[984],{"type":603,"value":985},"寻找声明文件",{"type":597,"tag":606,"props":987,"children":988},{},[989],{"type":603,"value":990},"JS类库一般有三类：全局类库、模块类库、UMD库。例如，jQuery是一种UMD库，既可以通过全局方式来引用，也可以模块化引用。",{"type":597,"tag":992,"props":993,"children":995},"h3",{"id":994},"声明文件",[996],{"type":597,"tag":967,"props":997,"children":998},{},[999],{"type":603,"value":994},{"type":597,"tag":606,"props":1001,"children":1002},{},[1003],{"type":603,"value":1004},"当我们要使用一个类库时，需要ts声明文件，对外暴露API，有时候声明文件在源码中，大部分是单独提供额外安装。比如jQuery需要额外安装类型声明包。",{"type":597,"tag":606,"props":1006,"children":1007},{},[1008,1010,1017],{"type":603,"value":1009},"幸运的是，大部分的类库，TS社区都有声明文件。名称为@types/类库名，需要去这个网站搜一下",{"type":597,"tag":831,"props":1011,"children":1014},{"href":1012,"rel":1013},"https://microsoft.github.io/TypeSearch/",[835],[1015],{"type":603,"value":1016},"http://",{"type":597,"tag":831,"props":1018,"children":1021},{"href":1019,"rel":1020},"http://microsoft.github.io/TypeSearch/",[835],[1022],{"type":603,"value":1023},"microsoft.github.io/TypeSearch/",{"type":597,"tag":606,"props":1025,"children":1026},{},[1027,1029,1035],{"type":603,"value":1028},"如果没有，需要自己去写一个，这也是为社区贡献的好机会。",{"type":597,"tag":831,"props":1030,"children":1033},{"href":1031,"rel":1032},"http://definitelytyped.org/guides/contributing.html",[835],[1034],{"type":603,"value":1031},{"type":603,"value":1036},"这里提供了一些写声明文件的方法。在写ts声明文件的时候，暂时用不到的API可以可以不写。>",{"type":597,"tag":606,"props":1038,"children":1039},{},[1040],{"type":603,"value":1041},"下面我将演示，如何在ts文件中使用三种类库。首先准备三个js文件，分别表示全局类库、模块类库、UMD库。",{"type":597,"tag":621,"props":1043,"children":1045},{"code":1044},"// 全局类库  global-lib.js\nfunction globalLib(options) {\n   console.log(options);\n}\nglobalLib.version = \"1.0.0\";\nglobalLib.doSomething = function () {\n   console.log('globalLib do something');\n};\n\n// 模块类库  module-lib.js\nconst version = \"1.0.0\";\nfunction doSomething() {\n   console.log('moduleLib do something');\n}\nfunction moduleLib(options) {\n   console.log(options);\n}\nmoduleLib.version = version;\nmoduleLib.doSomething = doSomething;\nmodule.exports = moduleLib;\n\n// UMD库  umd-lib.js\n(function (root, factory) {\n   if(typeof define === \"function\" && define.amd)\n   {\n      define(factory);\n   }else if(typeof module === \"object\" && module.exports)\n   {\n      module.exports = factory();\n   }else\n   {\n      root.umdLib = factory();\n   }\n})(this, function () {\n   return {\n      version: \"1.0.2\",\n      doSomething() {\n         console.log('umdLib do something');\n      }\n   }\n});\n",[1046],{"type":597,"tag":629,"props":1047,"children":1048},{"__ignoreMap":591},[1049],{"type":603,"value":1044},{"type":597,"tag":598,"props":1051,"children":1053},{"id":1052},"全局类库",[1054],{"type":597,"tag":967,"props":1055,"children":1056},{},[1057],{"type":603,"value":1052},{"type":597,"tag":972,"props":1059,"children":1060},{},[1061,1066,1071],{"type":597,"tag":976,"props":1062,"children":1063},{},[1064],{"type":603,"value":1065},"在HTML文件标签中引入该库",{"type":597,"tag":976,"props":1067,"children":1068},{},[1069],{"type":603,"value":1070},"将写好的声明文件与js库放在同一文件夹下，命名相同，后缀名为.d.ts",{"type":597,"tag":976,"props":1072,"children":1073},{},[1074],{"type":603,"value":1075},"此时可以在ts文件中使用全局API",{"type":597,"tag":606,"props":1077,"children":1078},{},[1079],{"type":603,"value":1080},"如果此时编译器未报错，而浏览器报错not defined，可能是html中引入的路径是相对路径，改成绝对路径即可（以项目目录为根目录）。",{"type":597,"tag":606,"props":1082,"children":1083},{},[1084],{"type":603,"value":1085},"声明文件global-lib.d.ts",{"type":597,"tag":621,"props":1087,"children":1089},{"code":1088},"declare function globalLib(options: globalLib.Options): void;\ndeclare namespace globalLib{\n   const version: string;\n   function doSomething(): void;\n   interface Options {\n      [key: string]: any,\n   }\n}\n",[1090],{"type":597,"tag":629,"props":1091,"children":1092},{"__ignoreMap":591},[1093],{"type":603,"value":1088},{"type":597,"tag":606,"props":1095,"children":1096},{},[1097],{"type":603,"value":1098},"在ts文件中使用该库：",{"type":597,"tag":621,"props":1100,"children":1102},{"code":1101},"globalLib({x:1});\nglobalLib.doSomething();\n",[1103],{"type":597,"tag":629,"props":1104,"children":1105},{"__ignoreMap":591},[1106],{"type":603,"value":1101},{"type":597,"tag":598,"props":1108,"children":1110},{"id":1109},"模块类库",[1111],{"type":597,"tag":967,"props":1112,"children":1113},{},[1114],{"type":603,"value":1109},{"type":597,"tag":972,"props":1116,"children":1117},{},[1118,1123],{"type":597,"tag":976,"props":1119,"children":1120},{},[1121],{"type":603,"value":1122},"将声明文件放在相同的目录下",{"type":597,"tag":976,"props":1124,"children":1125},{},[1126],{"type":603,"value":1127},"在ts中引入",{"type":597,"tag":606,"props":1129,"children":1130},{},[1131],{"type":603,"value":1132},"声明文件 module-lib.d.ts",{"type":597,"tag":621,"props":1134,"children":1136},{"code":1135},"declare function moduleLib(options: Options): void;\ninterface Options {\n   [key: string]: any,\n}\ndeclare namespace moduleLib{\n   const version: string;\n   function doSomething(): void;\n}\nexport = moduleLib; // 这样写兼容性更好\n",[1137],{"type":597,"tag":629,"props":1138,"children":1139},{"__ignoreMap":591},[1140],{"type":603,"value":1135},{"type":597,"tag":606,"props":1142,"children":1143},{},[1144],{"type":603,"value":1145},"ts中使用类库",{"type":597,"tag":621,"props":1147,"children":1149},{"code":1148},"import moduleLib from './Libs/module-lib.js';\nmoduleLib.doSomething();\n",[1150],{"type":597,"tag":629,"props":1151,"children":1152},{"__ignoreMap":591},[1153],{"type":603,"value":1148},{"type":597,"tag":598,"props":1155,"children":1157},{"id":1156},"umd类库",[1158],{"type":597,"tag":967,"props":1159,"children":1160},{},[1161],{"type":603,"value":1162},"UMD类库",{"type":597,"tag":606,"props":1164,"children":1165},{},[1166],{"type":603,"value":1167},"UMD库有两种使用方式：",{"type":597,"tag":1169,"props":1170,"children":1171},"ul",{},[1172,1177],{"type":597,"tag":976,"props":1173,"children":1174},{},[1175],{"type":603,"value":1176},"引入全局类库的方式",{"type":597,"tag":976,"props":1178,"children":1179},{},[1180],{"type":603,"value":1181},"模块类库引入的方式",{"type":597,"tag":606,"props":1183,"children":1184},{},[1185],{"type":603,"value":1186},"其中，在使用全局类库的引入方式时，编译器会提示，不建议这样做，需要在tsconfig.json中打开allUmdGlobalAccess配置项可以消除提示。",{"type":597,"tag":606,"props":1188,"children":1189},{},[1190],{"type":603,"value":1191},"声明文件 umd-lib.d.ts",{"type":597,"tag":621,"props":1193,"children":1195},{"code":1194},"declare namespace umdLib {\n   const version: string;\n   function doSomething(): void;\n}\nexport as namespace umdLib // 专门为umd库准备的语句，不可缺少\nexport = umdLib\n",[1196],{"type":597,"tag":629,"props":1197,"children":1198},{"__ignoreMap":591},[1199],{"type":603,"value":1194},{"type":597,"tag":606,"props":1201,"children":1202},{},[1203],{"type":603,"value":1204},"ts中使用UMD库（不再演示全局使用方式）",{"type":597,"tag":621,"props":1206,"children":1208},{"code":1207},"import umdLib from './Libs/umd-lib'\numdLib.doSomething();\nconsole.log(umdLib.version);\n",[1209],{"type":597,"tag":629,"props":1210,"children":1211},{"__ignoreMap":591},[1212],{"type":603,"value":1207},{"type":597,"tag":606,"props":1214,"children":1215},{},[1216],{"type":603,"value":1217},"例：在ts中使用jQuery（不演示全局引入方式）",{"type":597,"tag":606,"props":1219,"children":1220},{},[1221],{"type":603,"value":1222},"先安装jquery及其声明文件",{"type":597,"tag":621,"props":1224,"children":1226},{"code":1225},"npm install -D jquery @types/jquery\n",[1227],{"type":597,"tag":629,"props":1228,"children":1229},{"__ignoreMap":591},[1230],{"type":603,"value":1225},{"type":597,"tag":606,"props":1232,"children":1233},{},[1234],{"type":603,"value":1235},"使用：",{"type":597,"tag":621,"props":1237,"children":1239},{"code":1238},"import $ from 'jquery';\n$(\".app\").css(\"color\",\"red\");\n",[1240],{"type":597,"tag":629,"props":1241,"children":1242},{"__ignoreMap":591},[1243],{"type":603,"value":1238},{"type":597,"tag":598,"props":1245,"children":1247},{"id":1246},"为类库添加插件",[1248],{"type":597,"tag":967,"props":1249,"children":1250},{},[1251],{"type":603,"value":1246},{"type":597,"tag":606,"props":1253,"children":1254},{},[1255],{"type":603,"value":1256},"即为类库添加自定义的方法",{"type":597,"tag":606,"props":1258,"children":1259},{},[1260],{"type":603,"value":1261},"其中UMD库和模块类库的添加插件方法一致。",{"type":597,"tag":621,"props":1263,"children":1265},{"code":1264},"// 为全局类库增添自定义方法\ndeclare global {\n   namespace globalLib {\n      function myFunction(): void\n   }\n}\nglobalLib.myFunction = () =>{console.log(\"global插件\")};\n\n// 为模块类库添加自定义方法\ndeclare module \"./Libs/module-lib.js\"{\n   export function myFunction(): void;\n} // 为module-lib类库声明myFunction方法\nmoduleLib.myFunction = () => {console.log(\"module插件\")}; // 定义自定义方法\n\n// 为UMD库添加自定义方法\ndeclare module \"./Libs/umd-lib.js\"{\n   export function myFunction(): void;\n} // 为umd-lib类库声明myFunction方法\numdLib.myFunction = () => {console.log(\"umd插件\")}; // 定义自定义方法\n\nglobalLib.myFunction();\nmoduleLib.myFunction();\numdLib.myFunction();\n",[1266],{"type":597,"tag":629,"props":1267,"children":1268},{"__ignoreMap":591},[1269],{"type":603,"value":1264},{"type":597,"tag":606,"props":1271,"children":1272},{},[1273],{"type":603,"value":1274},"例如，为类库moment增添自定义方法（jQuery不可以，需要使用官方提供的API）",{"type":597,"tag":621,"props":1276,"children":1278},{"code":1277},"npm install -D moment @types/moment\n\nimport m from 'moment';\ndeclare module 'moment'{\n   export function myFunction(): void;\n}\nm.myFunction = () => {console.log(\"moment插件\")};\n\nm.myFunction();\n",[1279],{"type":597,"tag":629,"props":1280,"children":1281},{"__ignoreMap":591},[1282],{"type":603,"value":1277},{"title":591,"searchDepth":787,"depth":787,"links":1284},[1285,1289,1290,1291,1292],{"id":964,"depth":787,"text":964,"children":1286},[1287],{"id":994,"depth":1288,"text":994},3,{"id":1052,"depth":787,"text":1052},{"id":1109,"depth":787,"text":1109},{"id":1156,"depth":787,"text":1162},{"id":1246,"depth":787,"text":1246},"content:js:2022-02-12-TypeScript-use-Js.md","js/2022-02-12-TypeScript-use-Js.md","2022-02-12",1710779035448]