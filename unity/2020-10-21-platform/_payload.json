[{"data":1,"prerenderedAt":758},["Reactive",2],{"content-query-xsfxXmxG6x":3,"content-navigation-8C37fagqQL":176},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":170,"_id":171,"_source":172,"_file":173,"_extension":174,"date":175},"/unity/2020-10-21-platform","unity",false,"","unity使用platforms构建","BuildConfiguration他继承于scriptobject,他的扩展名是\".buildconfiguration\"导入的时候执行了编辑器脚本    [ScriptedImporter(3, new[] { BuildConfiguration.AssetExtension })]\n    sealed class BuildConfigurationScriptedImporter : ScriptedImporter\n    {\n        public override void OnImportAsset(AssetImportContext context)\n      ",{"type":11,"children":12,"toc":165},"root",[13,22,32,42,50,58,85,93,101,143,149,157],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"buildconfiguration",[19],{"type":20,"value":21},"text","BuildConfiguration",{"type":14,"tag":23,"props":24,"children":25},"ul",{},[26],{"type":14,"tag":27,"props":28,"children":29},"li",{},[30],{"type":20,"value":31},"他继承于scriptobject,他的扩展名是\".buildconfiguration\"导入的时候执行了编辑器脚本",{"type":14,"tag":33,"props":34,"children":36},"pre",{"code":35},"    [ScriptedImporter(3, new[] { BuildConfiguration.AssetExtension })]\n    sealed class BuildConfigurationScriptedImporter : ScriptedImporter\n    {\n        public override void OnImportAsset(AssetImportContext context)\n        {\n            var asset = BuildConfiguration.CreateInstance();\n            if (BuildConfiguration.DeserializeFromPath(asset, context.assetPath))\n            {\n                context.AddObjectToAsset(\"asset\", asset/*, icon*/);\n                context.SetMainObject(asset);\n            }\n        }\n    ...\n",[37],{"type":14,"tag":38,"props":39,"children":40},"code",{"__ignoreMap":7},[41],{"type":20,"value":35},{"type":14,"tag":23,"props":43,"children":44},{},[45],{"type":14,"tag":27,"props":46,"children":47},{},[48],{"type":20,"value":49},"再看下他再unity中的编辑器显示",{"type":14,"tag":33,"props":51,"children":53},{"code":52},"[CustomEditor(typeof(BuildConfigurationScriptedImporter))]\n    internal sealed class BuildConfigurationScriptedImporterEditor : ScriptedImporterEditor\n    {\n        static class ClassNames\n        {\n            public const string BaseClassName = nameof(BuildConfiguration);\n            public const string Dependencies = BaseClassName + \"__asset-dependencies\";\n            public const string Header = BaseClassName + \"__asset-header\";\n            public const string HeaderLabel = BaseClassName + \"__asset-header-label\";\n            public const string BuildAction = BaseClassName + \"__build-action\";\n            public const string BuildDropdown = BaseClassName + \"__build-dropdown\";\n            public const string AddComponent = BaseClassName + \"__add-component-button\";\n            public const string OptionalComponents = BaseClassName + \"__optional-components\";\n        }\n\n        internal struct BuildAction : IEquatable\u003CBuildAction>\n        {\n            public string Name;\n            public Action\u003CBuildConfiguration> Action;\n\n            public bool Equals(BuildAction other)\n            {\n                return Name == other.Name;\n            }\n        }\n",[54],{"type":14,"tag":38,"props":55,"children":56},{"__ignoreMap":7},[57],{"type":20,"value":52},{"type":14,"tag":59,"props":60,"children":61},"p",{},[62,64,70,72,78,79],{"type":20,"value":63},"该脚本定义了三个按钮",{"type":14,"tag":38,"props":65,"children":67},{"className":66},[],[68],{"type":20,"value":69},"build",{"type":20,"value":71},",",{"type":14,"tag":38,"props":73,"children":75},{"className":74},[],[76],{"type":20,"value":77},"run",{"type":20,"value":71},{"type":14,"tag":38,"props":80,"children":82},{"className":81},[],[83],{"type":20,"value":84},"build and run",{"type":14,"tag":23,"props":86,"children":87},{},[88],{"type":14,"tag":27,"props":89,"children":90},{},[91],{"type":20,"value":92},"如何建立",{"type":14,"tag":33,"props":94,"children":96},{"code":95},"        public BuildResult Build()\n        {\n            var pipeline = GetBuildPipeline();\n            var canUse = CanUsePipeline(pipeline);\n            if (!canUse.Result)\n            {\n                return BuildResult.Failure(pipeline, this, canUse.Reason);\n            }\n\n            var what = !string.IsNullOrEmpty(name) ? $\" {name}\" : string.Empty;\n            using (var progress = new BuildProgress($\"Building{what}\", \"Please wait...\"))\n            {\n                return pipeline.Build(this, progress);\n            }\n        }\n",[97],{"type":14,"tag":38,"props":98,"children":99},{"__ignoreMap":7},[100],{"type":20,"value":95},{"type":14,"tag":102,"props":103,"children":104},"ol",{},[105,123],{"type":14,"tag":27,"props":106,"children":107},{},[108,110,116,117],{"type":20,"value":109},"从IBuildPipelineComponent组件中获取Pipeline..继承IBuildPipelineComponent接口的组件有",{"type":14,"tag":38,"props":111,"children":113},{"className":112},[],[114],{"type":20,"value":115},"ClassicBuildProfile",{"type":20,"value":71},{"type":14,"tag":38,"props":118,"children":120},{"className":119},[],[121],{"type":20,"value":122},"DotsRuntimeBuildProfile",{"type":14,"tag":27,"props":124,"children":125},{},[126,128,133,135],{"type":20,"value":127},"关于platform,我们看下安卓建立的配置,可以看到手动实例化了",{"type":14,"tag":38,"props":129,"children":131},{"className":130},[],[132],{"type":20,"value":115},{"type":20,"value":134},",并且设置了platform",{"type":14,"tag":33,"props":136,"children":138},{"code":137},"    static class AndroidMenuItem\n    {\n        const string k_CreateBuildConfigurationAssetClassic = BuildConfigurationMenuItem.k_BuildConfigurationMenu + \"Android Classic Build Configuration\";\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic, true)]\n        static bool CreateBuildConfigurationAssetClassicValidation()\n        {\n            return Directory.Exists(AssetDatabase.GetAssetPath(Selection.activeObject));\n        }\n\n        [MenuItem(k_CreateBuildConfigurationAssetClassic)]\n        static void CreateBuildConfigurationAssetClassic()\n        {\n            Selection.activeObject = BuildConfigurationMenuItem.CreateAssetInActiveDirectory(\n                \"AndroidClassic\",\n                new GeneralSettings(),\n                new SceneList(),\n                new ClassicBuildProfile { Platform = new AndroidPlatform() });\n        }\n    }\n",[139],{"type":14,"tag":38,"props":140,"children":141},{"__ignoreMap":7},[142],{"type":20,"value":137},{"type":14,"tag":15,"props":144,"children":146},{"id":145},"buildplayerstep",[147],{"type":20,"value":148},"BuildPlayerStep",{"type":14,"tag":23,"props":150,"children":151},{},[152],{"type":14,"tag":27,"props":153,"children":154},{},[155],{"type":20,"value":156},"我们看到他的最终执行仍然使用了API, UnityEditor.BuildPipeline.BuildPlayer(buildPlayerOptions);",{"type":14,"tag":33,"props":158,"children":160},{"code":159},"sealed class BuildPlayerStep : BuildStepBase\n    {\n        public override Type[] UsedComponents { get; } =\n        {\n            typeof(ClassicBuildProfile),\n            typeof(SceneList),\n            typeof(GeneralSettings),\n            typeof(OutputBuildDirectory)\n        };\n\n        public override BuildResult Run(BuildContext context)\n        {\n            var classicSharedData = context.GetValue\u003CClassicSharedData>();\n            var target = classicSharedData.BuildTarget;\n            if (target \u003C= 0)\n                return context.Failure($\"Invalid build target '{target.ToString()}'.\");\n            if (target != EditorUserBuildSettings.activeBuildTarget)\n                return context.Failure($\"{nameof(EditorUserBuildSettings.activeBuildTarget)} must be switched before {nameof(BuildPlayerStep)} step.\");\n\n            var embeddedScenes = context.GetValue\u003CEmbeddedScenesValue>().Scenes;\n            if (embeddedScenes.Length == 0)\n                return context.Failure(\"There are no scenes to build.\");\n\n            var outputPath = context.GetOutputBuildDirectory();\n            if (!Directory.Exists(outputPath))\n                Directory.CreateDirectory(outputPath);\n\n            string locationPathName;\n            if (context.HasValue\u003CLocationInfo>())\n            {\n                locationPathName = context.GetValue\u003CLocationInfo>().Path;\n            }\n            else\n            {\n                var generalSettings = context.GetComponentOrDefault\u003CGeneralSettings>();\n                locationPathName = Path.Combine(outputPath, generalSettings.ProductName + ClassicBuildProfile.GetExecutableExtension(target));\n            }\n\n            var buildPlayerOptions = new BuildPlayerOptions()\n            {\n                scenes = embeddedScenes,\n                target = target,\n                locationPathName = locationPathName,\n                targetGroup = UnityEditor.BuildPipeline.GetBuildTargetGroup(target),\n            };\n\n            buildPlayerOptions.options = BuildOptions.None;\n\n            foreach (var customizer in classicSharedData.Customizers)\n                buildPlayerOptions.options |= customizer.ProvideBuildOptions();\n\n            var extraScriptingDefines = classicSharedData.Customizers.SelectMany(c => c.ProvidePlayerScriptingDefines()).ToArray();\n            buildPlayerOptions.extraScriptingDefines = extraScriptingDefines;\n\n            var report = UnityEditor.BuildPipeline.BuildPlayer(buildPlayerOptions);\n            context.SetValue(report);\n\n            return context.FromReport(report);\n        }\n    }\n",[161],{"type":14,"tag":38,"props":162,"children":163},{"__ignoreMap":7},[164],{"type":20,"value":159},{"title":7,"searchDepth":166,"depth":166,"links":167},2,[168,169],{"id":17,"depth":166,"text":21},{"id":145,"depth":166,"text":148},"markdown","content:unity:2020-10-21-platform.md","content","unity/2020-10-21-platform.md","md","2020-10-21",[177,187,314,363,415,428,540],{"title":178,"_path":179,"children":180},"Art","/art",[181,184],{"title":182,"_path":183},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":185,"_path":186},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":188,"_path":189,"children":190},"Dotnet","/dotnet",[191,194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239,242,245,248,251,254,257,260,263,266,269,272,275,278,281,284,287,290,293,296,299,302,305,308,311],{"title":192,"_path":193},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":195,"_path":196},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":198,"_path":199},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":201,"_path":202},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":204,"_path":205},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":207,"_path":208},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":210,"_path":211},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":213,"_path":214},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":216,"_path":217},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":219,"_path":220},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":222,"_path":223},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":225,"_path":226},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":228,"_path":229},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":231,"_path":232},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":234,"_path":235},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":237,"_path":238},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":240,"_path":241},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":243,"_path":244},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":246,"_path":247},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":249,"_path":250},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":252,"_path":253},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":255,"_path":256},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":258,"_path":259},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":261,"_path":262},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":264,"_path":265},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":267,"_path":268},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":270,"_path":271},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":273,"_path":274},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":276,"_path":277},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":279,"_path":280},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":282,"_path":283},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":285,"_path":286},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":288,"_path":289},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":291,"_path":292},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":294,"_path":295},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":297,"_path":298},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":300,"_path":301},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":303,"_path":304},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":306,"_path":307},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":309,"_path":310},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":312,"_path":313},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":315,"_path":316,"children":317},"Game","/game",[318,321,324,327,330,333,336,339,342,345,348,351,354,357,360],{"title":319,"_path":320},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":322,"_path":323},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":325,"_path":326},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":328,"_path":329},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":331,"_path":332},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":334,"_path":335},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":337,"_path":338},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":340,"_path":341},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":343,"_path":344},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":346,"_path":347},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":349,"_path":350},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":352,"_path":353},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":355,"_path":356},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":358,"_path":359},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":361,"_path":362},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":364,"_path":365,"children":366},"Gyj","/gyj",[367,370,373,376,379,382,385,388,391,394,397,400,403,406,409,412],{"title":368,"_path":369},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":371,"_path":372},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":374,"_path":375},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":377,"_path":378},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":380,"_path":381},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":383,"_path":384},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":386,"_path":387},"玩法","/gyj/2022-08-22-wanfa",{"title":389,"_path":390},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":392,"_path":393},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":395,"_path":396},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":398,"_path":399},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":401,"_path":402},"门派内容相关","/gyj/2022-11-17-sect",{"title":404,"_path":405},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":407,"_path":408},"种植","/gyj/2022-12-01-zhongzhi",{"title":410,"_path":411},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":413,"_path":414},"跑商","/gyj/2023-11-01-paoshang",{"title":416,"_path":417,"children":418},"Js","/js",[419,422,425],{"title":420,"_path":421},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":423,"_path":424},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":426,"_path":427},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":429,"_path":430,"children":431},"Tool","/tool",[432,435,438,441,444,447,450,453,456,459,462,465,468,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525,528,531,534,537],{"title":433,"_path":434},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":436,"_path":437},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":439,"_path":440},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":442,"_path":443},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":445,"_path":446},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":448,"_path":449},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":451,"_path":452},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":454,"_path":455},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":457,"_path":458},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":460,"_path":461},"mac下brew 使用","/tool/2020-01-13-brew",{"title":463,"_path":464},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":466,"_path":467},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":469,"_path":470},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":472,"_path":473},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":475,"_path":476},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":478,"_path":479},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":481,"_path":482},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":484,"_path":485},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":487,"_path":488},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":490,"_path":491},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":493,"_path":494},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":496,"_path":497},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":499,"_path":500},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":502,"_path":503},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":505,"_path":506},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":508,"_path":509},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":511,"_path":512},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":514,"_path":515},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":517,"_path":518},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":520,"_path":521},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":523,"_path":524},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":526,"_path":527},"rider的使用","/tool/2022-08-02-rider-use",{"title":529,"_path":530},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":532,"_path":533},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":535,"_path":536},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":538,"_path":539},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":541,"_path":542,"children":543},"Unity","/unity",[544,547,550,553,556,559,562,565,568,571,574,577,580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,677,680,683,686,689,692,695,698,701,704,707,710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,755],{"title":545,"_path":546},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":548,"_path":549},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":551,"_path":552},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":554,"_path":555},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":557,"_path":558},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":560,"_path":561},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":563,"_path":564},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":566,"_path":567},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":569,"_path":570},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":572,"_path":573},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":575,"_path":576},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":578,"_path":579},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":581,"_path":582},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":584,"_path":585},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":587,"_path":588},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":590,"_path":591},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":593,"_path":594},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":596,"_path":597},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":599,"_path":600},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":602,"_path":603},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":605,"_path":606},"技能系统","/unity/2020-02-15-skill-system",{"title":608,"_path":609},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":611,"_path":612},"角色状态设计","/unity/2020-02-17-character-states",{"title":614,"_path":615},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":617,"_path":618},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":620,"_path":621},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":623,"_path":624},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":626,"_path":627},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":629,"_path":630},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":632,"_path":633},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":635,"_path":636},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":638,"_path":639},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":641,"_path":642},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":644,"_path":645},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":647,"_path":648},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":650,"_path":651},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":653,"_path":654},"unity的addressables","/unity/2020-09-12-addressables",{"title":656,"_path":657},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":659,"_path":660},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":662,"_path":663},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":665,"_path":666},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":668,"_path":669},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":671,"_path":672},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":674,"_path":675},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":8,"_path":4},{"title":678,"_path":679},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":681,"_path":682},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":684,"_path":685},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":687,"_path":688},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":690,"_path":691},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":693,"_path":694},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":696,"_path":697},"简单保存工具","/unity/2020-11-13-simple-save",{"title":699,"_path":700},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":702,"_path":703},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":705,"_path":706},"ability","/unity/2020-11-16-dotssample",{"title":708,"_path":709},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":711,"_path":712},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":714,"_path":715},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":717,"_path":718},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":720,"_path":721},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":723,"_path":724},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":726,"_path":727},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":729,"_path":730},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":732,"_path":733},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":735,"_path":736},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":738,"_path":739},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":741,"_path":742},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":744,"_path":745},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":747,"_path":748},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":750,"_path":751},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":753,"_path":754},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":756,"_path":757},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039455]