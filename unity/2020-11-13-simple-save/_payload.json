[{"data":1,"prerenderedAt":624},["Reactive",2],{"content-query-fmRh6qBrr6":3,"content-navigation-8C37fagqQL":42},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":36,"_id":37,"_source":38,"_file":39,"_extension":40,"date":41},"/unity/2020-11-13-simple-save","unity",false,"","简单保存工具","using Newtonsoft.Json;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEngine;\n\nnamespace DotHass.Unity\n{\n    public class SaveService : ISaveService\n    {\n        // IMPORTANT: Make sure to change this key for each project you use thi",{"type":11,"children":12,"toc":33},"root",[13,25],{"type":14,"tag":15,"props":16,"children":18},"element","pre",{"code":17},"using Newtonsoft.Json;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEngine;\n\nnamespace DotHass.Unity\n{\n    public class SaveService : ISaveService\n    {\n        // IMPORTANT: Make sure to change this key for each project you use this encryption in to help secure your\n        // encrypted values. This key must be exactly 32 characters long (256 bit).\n        public string Key = \":{j%6j?E:t#}G10mM%9hp5S=%}2,Y26e\";\n\n        public bool Encrypt = false;\n\n        public SaveService()\n        {\n            // Create a new encryption provider\n            SimpleEncryption.provider = new RijndaelManaged\n            {\n                // Get the bytes from the supplied string key and use it as the provider's key\n                Key = Encoding.ASCII.GetBytes(Key),\n\n                // Ensure that the same data is always encrypted the same way when used with the same key\n                Mode = CipherMode.ECB\n            };\n        }\n\n        protected Task DeleteAsync(string key)\n        {\n            var fullPath = this.GetFullPath(key);\n            this.Delete(fullPath);\n            return Task.CompletedTask;\n        }\n\n        protected Task SaveAsync(string key, object value)\n        {\n           \n\n            var fullPath = this.GetFullPath(key);\n            var content = JsonConvert.SerializeObject(value);\n\n            return WriteAsync(fullPath, content);\n        }\n\n        protected async Task\u003CT> LoadAsync\u003CT>(string key, T defaultValue)\n        {\n            var fullPath = this.GetFullPath(key);\n\n            if (this.Exists(fullPath) == false)\n            {\n                return defaultValue;\n            }\n            return await LoadAsync\u003CT>(key);\n        }\n\n        private async Task\u003CT> LoadAsync\u003CT>(string key)\n        {\n            var fullPath = this.GetFullPath(key);\n            var content = await this.ReadAsync(fullPath);\n            return JsonConvert.DeserializeObject\u003CT>(content);\n        }\n\n        protected string GetFullPath(string key)\n        {\n            return Path.Combine(Application.persistentDataPath, key.ToUpper());\n        }\n\n        public bool Exists(string fullPath)\n        {\n            return File.Exists(fullPath);\n        }\n\n        public void Delete(string fullPath)\n        {\n            if (File.Exists(fullPath))\n            {\n                File.Delete(fullPath);\n            }\n            else if (Directory.Exists(fullPath))\n            {\n                Directory.Delete(fullPath, true);\n            }\n        }\n\n        public async Task WriteAsync(string fullPath, string content)\n        {\n            if (this.Encrypt == true)\n            {\n                content = SimpleEncryption.EncryptString(content);\n            }\n            using (StreamWriter sw = new StreamWriter(fullPath, false, Encoding.UTF8))\n            {\n                //覆盖该文件\n                await sw.WriteAsync(content);\n            }\n        }\n\n        public async Task\u003Cstring> ReadAsync(string fullPath)\n        {\n            using (StreamReader sw = new StreamReader(fullPath, Encoding.UTF8))\n            {\n                var fetchedString = await sw.ReadToEndAsync();\n\n                if (this.Encrypt == true)\n                {\n                    fetchedString = SimpleEncryption.DecryptString(fetchedString);\n                }\n                return fetchedString;\n            }\n        }\n    }\n}\n",[19],{"type":14,"tag":20,"props":21,"children":22},"code",{"__ignoreMap":7},[23],{"type":24,"value":17},"text",{"type":14,"tag":15,"props":26,"children":28},{"code":27},"using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\n/// \u003Csummary>\n/// https://github.com/sabresaurus/PlayerPrefsEditor/blob/master/Runtime/SimpleEncryption.cs\n/// \u003C/summary>\nnamespace DotHass.Unity\n{\n    public static class SimpleEncryption\n    {\n        // IMPORTANT: Make sure to change this key for each project you use this encryption in to help secure your\n        // encrypted values. This key must be exactly 32 characters long (256 bit).\n        private static readonly string key = \":{j%6j?E:t#}G10mM%9hp5S=%}2,Y26C\";\n\n        // Cache the encryption provider\n        public static RijndaelManaged provider = null;\n\n        private static void SetupProvider()\n        {\n            // Create a new encryption provider\n            provider = new RijndaelManaged();\n\n            // Get the bytes from the supplied string key and use it as the provider's key\n            provider.Key = Encoding.ASCII.GetBytes(key);\n\n            // Ensure that the same data is always encrypted the same way when used with the same key\n            provider.Mode = CipherMode.ECB;\n        }\n\n        /// \u003Csummary>\n        /// Encrypts the specified string using the key stored in SimpleEncryption and returns the encrypted result\n        /// \u003C/summary>\n        public static string EncryptString(string sourceString)\n        {\n            if (provider == null)\n            {\n                // Encryption provider hasn't been set up yet, so set it up\n                SetupProvider();\n            }\n\n            // Create an encryptor to encrypt the bytes\n            ICryptoTransform encryptor = provider.CreateEncryptor();\n\n            // Convert the source string into bytes to be encrypted\n            byte[] sourceBytes = Encoding.UTF8.GetBytes(sourceString);\n\n            // Encrypt the bytes using the encryptor we just created\n            byte[] outputBytes = encryptor.TransformFinalBlock(sourceBytes, 0, sourceBytes.Length);\n\n            // Convert the encrypted bytes into a Base 64 string, so we can safely represent them as a string and return\n            // that string\n            return Convert.ToBase64String(outputBytes);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the specified string from its specified encrypted value into the returned decrypted value using the\n        /// key stored in SimpleEncryption\n        /// \u003C/summary>\n        public static string DecryptString(string sourceString)\n        {\n            if (provider == null)\n            {\n                // Encryption provider hasn't been set up yet, so set it up\n                SetupProvider();\n            }\n\n            // Create a decryptor to decrypt the encrypted bytes\n            ICryptoTransform decryptor = provider.CreateDecryptor();\n\n            // Convert the base 64 string representing the encrypted bytes back into an array of encrypted bytes\n            byte[] sourceBytes = Convert.FromBase64String(sourceString);\n\n            // Use the decryptor we just created to decrypt those bytes\n            byte[] outputBytes = decryptor.TransformFinalBlock(sourceBytes, 0, sourceBytes.Length);\n\n            // Turn the decrypted bytes back into the decrypted string and return it\n            return Encoding.UTF8.GetString(outputBytes);\n        }\n\n        /// \u003Csummary>\n        /// Encrypts the specified float value and returns an encrypted string\n        /// \u003C/summary>\n        public static string EncryptFloat(float value)\n        {\n            // Convert the float into its 4 bytes\n            byte[] bytes = BitConverter.GetBytes(value);\n\n            // Represent those bytes as a base 64 string\n            string base64 = Convert.ToBase64String(bytes);\n\n            // Return the encrypted version of that base 64 string\n            return SimpleEncryption.EncryptString(base64);\n        }\n\n        /// \u003Csummary>\n        /// Encrypts the specified int value and returns an encrypted string\n        /// \u003C/summary>\n        public static string EncryptInt(int value)\n        {\n            // Convert the int value into its 4 bytes\n            byte[] bytes = BitConverter.GetBytes(value);\n\n            // Represent those bytes as a base 64 string\n            string base64 = Convert.ToBase64String(bytes);\n\n            // Return the encrypted version of that base 64 string\n            return SimpleEncryption.EncryptString(base64);\n        }\n\n        /// Encrypts the specified bool value and returns an encrypted string\n        /// \u003C/summary>\n        public static string EncryptBool(bool value)\n        {\n            // Convert the bool value into its 4 bytes\n            byte[] bytes = BitConverter.GetBytes(value);\n\n            // Represent those bytes as a base 64 string\n            string base64 = Convert.ToBase64String(bytes);\n\n            // Return the encrypted version of that base 64 string\n            return SimpleEncryption.EncryptString(base64);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the encrypted string representing a float into the decrypted float\n        /// \u003C/summary>\n        public static float DecryptFloat(string sourceString)\n        {\n            // Decrypt the encrypted string\n            string decryptedString = SimpleEncryption.DecryptString(sourceString);\n\n            // Convert the decrypted Base 64 representation back into bytes\n            byte[] bytes = Convert.FromBase64String(decryptedString);\n\n            // Turn the bytes back into a float and return it\n            return BitConverter.ToSingle(bytes, 0);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the encrypted string representing an int into the decrypted int\n        /// \u003C/summary>\n        public static int DecryptInt(string sourceString)\n        {\n            // Decrypt the encrypted string\n            string decryptedString = SimpleEncryption.DecryptString(sourceString);\n\n            // Convert the decrypted Base 64 representation back into bytes\n            byte[] bytes = Convert.FromBase64String(decryptedString);\n\n            // Turn the bytes back into a int and return it\n            return BitConverter.ToInt32(bytes, 0);\n        }\n\n        /// \u003Csummary>\n        /// Decrypts the encrypted string representing a bool into the decrypted bool\n        /// \u003C/summary>\n        public static bool DecryptBool(string sourceString)\n        {\n            // Decrypt the encrypted string\n            string decryptedString = SimpleEncryption.DecryptString(sourceString);\n\n            // Convert the decrypted Base 64 representation back into bytes\n            byte[] bytes = Convert.FromBase64String(decryptedString);\n\n            // Turn the bytes back into a bool and return it\n            return BitConverter.ToBoolean(bytes, 0);\n        }\n    }\n}\n",[29],{"type":14,"tag":20,"props":30,"children":31},{"__ignoreMap":7},[32],{"type":24,"value":27},{"title":7,"searchDepth":34,"depth":34,"links":35},2,[],"markdown","content:unity:2020-11-13-simple-save.md","content","unity/2020-11-13-simple-save.md","md","2020-11-13",[43,53,180,229,281,294,406],{"title":44,"_path":45,"children":46},"Art","/art",[47,50],{"title":48,"_path":49},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":51,"_path":52},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":54,"_path":55,"children":56},"Dotnet","/dotnet",[57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177],{"title":58,"_path":59},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":61,"_path":62},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":64,"_path":65},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":67,"_path":68},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":70,"_path":71},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":73,"_path":74},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":76,"_path":77},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":79,"_path":80},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":82,"_path":83},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":85,"_path":86},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":88,"_path":89},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":91,"_path":92},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":94,"_path":95},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":97,"_path":98},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":100,"_path":101},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":103,"_path":104},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":106,"_path":107},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":109,"_path":110},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":112,"_path":113},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":115,"_path":116},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":118,"_path":119},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":121,"_path":122},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":124,"_path":125},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":127,"_path":128},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":130,"_path":131},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":133,"_path":134},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":136,"_path":137},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":139,"_path":140},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":142,"_path":143},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":145,"_path":146},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":148,"_path":149},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":151,"_path":152},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":154,"_path":155},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":157,"_path":158},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":160,"_path":161},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":163,"_path":164},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":166,"_path":167},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":169,"_path":170},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":172,"_path":173},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":175,"_path":176},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":178,"_path":179},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":181,"_path":182,"children":183},"Game","/game",[184,187,190,193,196,199,202,205,208,211,214,217,220,223,226],{"title":185,"_path":186},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":188,"_path":189},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":191,"_path":192},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":194,"_path":195},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":197,"_path":198},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":200,"_path":201},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":203,"_path":204},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":206,"_path":207},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":209,"_path":210},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":212,"_path":213},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":215,"_path":216},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":218,"_path":219},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":221,"_path":222},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":224,"_path":225},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":227,"_path":228},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":230,"_path":231,"children":232},"Gyj","/gyj",[233,236,239,242,245,248,251,254,257,260,263,266,269,272,275,278],{"title":234,"_path":235},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":237,"_path":238},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":240,"_path":241},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":243,"_path":244},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":246,"_path":247},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":249,"_path":250},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":252,"_path":253},"玩法","/gyj/2022-08-22-wanfa",{"title":255,"_path":256},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":258,"_path":259},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":261,"_path":262},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":264,"_path":265},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":267,"_path":268},"门派内容相关","/gyj/2022-11-17-sect",{"title":270,"_path":271},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":273,"_path":274},"种植","/gyj/2022-12-01-zhongzhi",{"title":276,"_path":277},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":279,"_path":280},"跑商","/gyj/2023-11-01-paoshang",{"title":282,"_path":283,"children":284},"Js","/js",[285,288,291],{"title":286,"_path":287},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":289,"_path":290},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":292,"_path":293},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":295,"_path":296,"children":297},"Tool","/tool",[298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403],{"title":299,"_path":300},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":302,"_path":303},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":305,"_path":306},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":308,"_path":309},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":311,"_path":312},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":314,"_path":315},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":317,"_path":318},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":320,"_path":321},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":323,"_path":324},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":326,"_path":327},"mac下brew 使用","/tool/2020-01-13-brew",{"title":329,"_path":330},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":332,"_path":333},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":335,"_path":336},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":338,"_path":339},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":341,"_path":342},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":344,"_path":345},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":347,"_path":348},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":350,"_path":351},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":353,"_path":354},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":356,"_path":357},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":359,"_path":360},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":362,"_path":363},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":365,"_path":366},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":368,"_path":369},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":371,"_path":372},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":374,"_path":375},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":377,"_path":378},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":380,"_path":381},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":383,"_path":384},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":386,"_path":387},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":389,"_path":390},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":392,"_path":393},"rider的使用","/tool/2022-08-02-rider-use",{"title":395,"_path":396},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":398,"_path":399},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":401,"_path":402},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":404,"_path":405},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":407,"_path":408,"children":409},"Unity","/unity",[410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,564,567,570,573,576,579,582,585,588,591,594,597,600,603,606,609,612,615,618,621],{"title":411,"_path":412},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":414,"_path":415},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":417,"_path":418},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":420,"_path":421},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":423,"_path":424},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":426,"_path":427},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":429,"_path":430},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":432,"_path":433},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":435,"_path":436},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":438,"_path":439},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":441,"_path":442},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":444,"_path":445},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":447,"_path":448},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":450,"_path":451},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":453,"_path":454},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":456,"_path":457},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":459,"_path":460},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":462,"_path":463},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":465,"_path":466},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":468,"_path":469},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":471,"_path":472},"技能系统","/unity/2020-02-15-skill-system",{"title":474,"_path":475},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":477,"_path":478},"角色状态设计","/unity/2020-02-17-character-states",{"title":480,"_path":481},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":483,"_path":484},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":486,"_path":487},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":489,"_path":490},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":492,"_path":493},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":495,"_path":496},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":498,"_path":499},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":501,"_path":502},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":504,"_path":505},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":507,"_path":508},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":510,"_path":511},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":513,"_path":514},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":516,"_path":517},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":519,"_path":520},"unity的addressables","/unity/2020-09-12-addressables",{"title":522,"_path":523},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":525,"_path":526},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":528,"_path":529},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":531,"_path":532},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":534,"_path":535},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":537,"_path":538},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":540,"_path":541},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":543,"_path":544},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":546,"_path":547},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":549,"_path":550},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":552,"_path":553},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":555,"_path":556},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":558,"_path":559},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":561,"_path":562},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":8,"_path":4},{"title":565,"_path":566},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":568,"_path":569},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":571,"_path":572},"ability","/unity/2020-11-16-dotssample",{"title":574,"_path":575},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":577,"_path":578},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":580,"_path":581},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":583,"_path":584},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":586,"_path":587},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":589,"_path":590},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":592,"_path":593},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":595,"_path":596},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":598,"_path":599},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":601,"_path":602},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":604,"_path":605},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":607,"_path":608},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":610,"_path":611},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":613,"_path":614},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":616,"_path":617},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":619,"_path":620},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":622,"_path":623},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039146]