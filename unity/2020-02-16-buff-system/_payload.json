[{"data":1,"prerenderedAt":846},["Reactive",2],{"content-query-Po8X1CePJq":3,"content-navigation-8C37fagqQL":264},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":258,"_id":259,"_source":260,"_file":261,"_extension":262,"date":263},"/unity/2020-02-16-buff-system","unity",false,"","游戏buff系统设计","内部运算\n1、是否包含技能效果？（提高/降低 攻击 命中 闪避 移动速度 群体伤害 替换技能ID 等 ）\n2、是否包含阶段效果？（BUFF分为多个阶段，不同的阶段有不同的效果，比如影之哀伤）\n3、是否包含计时器？（持续时长计算、叠加时长计算 总之所有关于持续性时间的问题 都丢这里）\n4、是否包含计数器？（用来计算阶段、剩余生效次数、比如影之哀伤 LOL电刀）\n5、是否具备分类规则？（魔法效果 诅咒效果 中毒效果 用于进行归类 方便程序进行的 驱散筛选判断）\n6、是否可以被驱散？ （魔法效果只能用祛除魔法解除 中毒效果只能用解药祛除）\n7、是否具备优先级？（附加优先级，低等级BUFF会被高等级BUFF替换，低等级BUFF无法附加给高等级怪）\n8、是否保留母体信息？（比如传染性的DEBUFF，感染者传播一次，母体会获得额外巴拉巴拉。。。多个项）\n9、是否共享同步规则？（比如多个角色共享一个BUFF状态，一个人的BUFF被祛除则其他人也被祛除）\n10、以上功能可以进行再补充，没有需求则可以逐个剔除。",{"type":11,"children":12,"toc":255},"root",[13,20,25,30,35,44,49,57,62,70,75,83,88,96,101,109,114,122,127,132,137,142,147,152,157,162,167,172,177,182,187,192,197,202,207,212,217,222,234,239],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"外部表现\n1、是否显示BUFF图标？（传奇里道士的BUFF是不显示图标的）\n2、是否不同阶段表现不同的图标？\n3、是否显示计时器？\n4、是否显示计数器？\n5、是否显示BUFF文字说明？（对BUFF类型、效果的描述）\n6、是否改变角色外形？（DNF里的冰冻、WOW里的变形）\n7、以上表现功能可以进行再补充，同上。",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":19,"value":29},"首先我想说的是，这是一套机制，并不是单独的一个系统，所谓机制就是一种从逻辑思想到代码实现的小窍门的组合，只有当你把它运用到一个实际项目中去了，它才能帮助你建立一个系统。我不敢说它是最好的，但这套东西帮我完成了一个又一个项目的制作，我觉得现在可以简单的拿出来和大家分享下思维。事实上这也并不是什么很玄乎的东西，我的Buff的机制更像是Flash的Dispatch机制。更简单的说，你可以把它理解为一种回调机制，在必要的时候进行逻辑回调。我想这一句话应该是可以概括整个机制的工作原理了。",{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":19,"value":34},"举个简单的例子来说明，作为一个设计师，在设计系统的同时应当思考好这个游戏的系统中的各个回调点，而他们也正是Buff系统发挥能量的地方，Buff回调点有哪些（当然我可能会把它歪到WoW，毕竟这最早的设计灵感来自WOW）？我简单列一些：",{"type":14,"tag":15,"props":36,"children":37},{},[38],{"type":14,"tag":39,"props":40,"children":41},"strong",{},[42],{"type":19,"value":43},"1，BuffOccur",{"type":14,"tag":15,"props":45,"children":46},{},[47],{"type":19,"value":48},"我认为这是最核心的回调点之一，应该说你把这套机制运用在任何游戏中他都必须由这个时间点，就是当任何情况Buff被添加到一个角色身上的时候（可能来自技能、可能来自道具、可能来自GM命令，等等等等），往往他最杰出的作用就是改变角色的属性、或者是被控制状态。之所以说这是机制是思维方式，因为它并不关心你的游戏有哪些状态或者属性，但是这里有一点比较容易搞混的就是初级策划往往会认为昏迷就是一个Buff(debuff)，可是事实上昏迷是一种组合状态，他在LoL里面的形态是剥夺移动能力、剥夺攻击能力、剥夺商店使用能力的组合（我不知道是不是真的，但是我在做起凡三国争霸2的时候是这么做的，这套机制最早运用的游戏就是那个，虽然我离开起凡后这套系统的代码被删除了）。因此在BuffOccur这个回调点，有着很多的事情会需要做，那么同样的，BuffRemoved回调点也就有了同样的职责。",{"type":14,"tag":15,"props":50,"children":51},{},[52],{"type":14,"tag":39,"props":53,"children":54},{},[55],{"type":19,"value":56},"2，BuffOnTick",{"type":14,"tag":15,"props":58,"children":59},{},[60],{"type":19,"value":61},"也就是通常我们最常见的，每3秒造成伤害、治疗；或者我们可以做每3秒制造一个AOE，甚至每3秒为自己添加一个护盾等等，他的核心在于没一定时间触发一次，但请你注意不是所有的游戏都适用这个回调点。",{"type":14,"tag":15,"props":63,"children":64},{},[65],{"type":14,"tag":39,"props":66,"children":67},{},[68],{"type":19,"value":69},"3，BuffRemoved",{"type":14,"tag":15,"props":71,"children":72},{},[73],{"type":19,"value":74},"在移除Buff的时候，重新计算属性等肯定是需要在这个时间点工作一次的，那么事实上还有很多的效果也可以在这个时间点被调用，典型的是痛苦无常和生命绽放（都来自WOW），痛苦无常是当驱散的时候对驱散者造成伤害并且沉默，因此我们需要传入导致buff终结的人（可能是null）和BuffRemove的时候剩余时间，由此判断是否真的完成了，那么剩余时间越多造成伤害越高也就成了可能的设计；而生命绽放则更加简单，在Removed时候给持有者进行治疗就可以了。",{"type":14,"tag":15,"props":76,"children":77},{},[78],{"type":14,"tag":39,"props":79,"children":80},{},[81],{"type":19,"value":82},"4，BuffBeHurt",{"type":14,"tag":15,"props":84,"children":85},{},[86],{"type":19,"value":87},"在受到攻击的时候触发，大多盾类技能由此而生，这个回调点应当Return一个Int或者Float，用于传递给下一环，已获得新的伤害，而当所有的执行完毕之后，造成的最终伤害就会是这个数字，那么把受到的伤害变成治疗是多么简单的事情？可是否应该有，还得看游戏的Patterns。",{"type":14,"tag":15,"props":89,"children":90},{},[91],{"type":14,"tag":39,"props":92,"children":93},{},[94],{"type":19,"value":95},"5，BuffOnHit",{"type":14,"tag":15,"props":97,"children":98},{},[99],{"type":19,"value":100},"在攻击的时候产生，虽说字面上是OnHit，你仍然可以把isHit像isCrit一样传给回调函数，战士的压制（老版本）在攻击被闪躲时可以发动，更早的猎人在闪避攻击后可以提高招架？其实都是这个时间点来做的。",{"type":14,"tag":15,"props":102,"children":103},{},[104],{"type":14,"tag":39,"props":105,"children":106},{},[107],{"type":19,"value":108},"6，BuffBeforeKilled",{"type":14,"tag":15,"props":110,"children":111},{},[112],{"type":19,"value":113},"很多时候BuffBeHurt并不能完成一些设计，比如说必定能杀死目标的伤害被完全吸收（贼爷爷的假死），这时候我们要确定这个角色原本应该死了，因此就需要设定出这样一个回调点。",{"type":14,"tag":15,"props":115,"children":116},{},[117],{"type":14,"tag":39,"props":118,"children":119},{},[120],{"type":19,"value":121},"7，BuffAfterKilled",{"type":14,"tag":15,"props":123,"children":124},{},[125],{"type":19,"value":126},"当杀死一个角色的时候，恢复自身X%的HP，这时候你就需要这个回调点，精确的在角色死亡后发生。",{"type":14,"tag":15,"props":128,"children":129},{},[130],{"type":19,"value":131},"机制始终是机制，或者说是思维方式，他真正的运行还是取决于游戏本身，回调点我只是随便举个例子而已，事实上根据游戏不同，完全可以增加或者删除回调点，比如一个MT卡牌游戏他就完全不需要onTick这样的回调点，但他可以有BeforeMove（角色行动前）等回调点，这取决于游戏本身机制。同样的每一个视觉特效都可以在每一个回调点去播放，你可以设计好这样的规则不是吗？",{"type":14,"tag":15,"props":133,"children":134},{},[135],{"type":19,"value":136},"接下来，我们就在这个机制的基础上分析一下LoL的一些技能，我印象最深的那些，我已经很久不玩LoL了：",{"type":14,"tag":15,"props":138,"children":139},{},[140],{"type":19,"value":141},"1，蛮王的6秒真男人，一个Buff，在BeforeKilled时候调用，Return1作为最后设定的HP，并被写在回调代码的最后。",{"type":14,"tag":15,"props":143,"children":144},{},[145],{"type":19,"value":146},"2，盲僧、瑞文的连续技能，事实上这也是你肉眼看不到的Buff（机制正是如此奇妙，未必被直接运用，正如我所说，他是一种思路），当有Buff的时候技能A变成技能B，移除后恢复，OnSkillCast的回调点（往往技能施展中会需要回调点，因此回调点还是根据游戏具体分析出来的）。",{"type":14,"tag":15,"props":148,"children":149},{},[150],{"type":19,"value":151},"3，火男的昏迷，火男的法术会为目标添加一个Buff，而法术在OnHit的时候会检查如果存在这个Buff则执行XX效果导致昏迷，否则普通效果。",{"type":14,"tag":15,"props":153,"children":154},{},[155],{"type":19,"value":156},"4，安妮的昏迷，你如果有仔细看了2并思考了，这不是问题。",{"type":14,"tag":15,"props":158,"children":159},{},[160],{"type":19,"value":161},"5，大嘴的自爆，在角色死亡的时候产生免疫性Buff，Buff结束时产生AOE，如果你这么思考，这会简单很多。",{"type":14,"tag":15,"props":163,"children":164},{},[165],{"type":19,"value":166},"这套机制在实际工作中，我们需要如何去分工呢？事实上已经很清晰了：",{"type":14,"tag":15,"props":168,"children":169},{},[170],{"type":19,"value":171},"策划：需要设计出所有的回调点，事实上策划如果完全不了解程序的效率等问题是无法设计好的，最好还能大概了解所谓回调机制，因为除了回调点意外，你还需要设计出回调时候传的参数，以及返回给程序的参数及其工作顺序，除此之外一些基础的表象也需要去制作，如buff的名称，那么在做表的时候会有2种风格，在起凡的时候我可以不用太关心，因为每个人都会用Lua写回调函数，但之后的项目中，我是用了我常推荐的Tag机制，比如策划填写一个Buff效果些daze_60之类的我就可以把它分析为60%几率昏迷目标等。在设计这些东西的时候为了更有效地避免夸夸其谈，策划对于实现的了解还是非常重要的，而事实上我们这里已经是策划动手写逻辑代码了，这问题就相对好办些。策划除此之外还应该归纳出特效播放点、数据同步时间点等等和游戏核心机制相结合的东西。这世界上也有很多好的创意，但你必需知道机制士兵不能帮你实现的，更重要的是你要知道自己想做什么和怎么去做，因此设计buff的时候切勿滥用机制，机制用的不好反而弄巧成拙，而合理的拆分Buff的效果也是一个策划的价值所在。",{"type":14,"tag":15,"props":173,"children":174},{},[175],{"type":19,"value":176},"程序：程序的工作则是优化好回调点和策划可能滥用到家的循环，这是非常头疼的事情，因此很可能需要更好的机制替他们实现一些该死的逻辑优化，可是这并不是最重要的，最主要的工作还是完成一些底层接口功能，比如在某个绑点上播放某个特效之类的，这些是策划都是即使会写逻辑代码也写不好的东西，也正是程序员强势所在（因此我并不认为游戏程序员非得精通游戏，但必须了解一二，才能大概思考一些优化、渲染的逻辑）。",{"type":14,"tag":15,"props":178,"children":179},{},[180],{"type":19,"value":181},"美术：视觉特效肯定少不了你的，搞不好还得弄动作，音乐跑的了音效跑不了，做吧，策划会整理出大量的需求列表的，如果上面说做那就做了。",{"type":14,"tag":15,"props":183,"children":184},{},[185],{"type":19,"value":186},"在你了解了Buff的工作机制之后，你才有资格进一步的谈创意，不然都是胡扯蛋，你都不知道怎么去做，你怎么去创造呢？那么假如让我把吕布加入到LoL中，我会给他设计什么样的被动技能呢？就让我们一起YY下（确切的说知道实现方式的YY才是有价值的）：",{"type":14,"tag":15,"props":188,"children":189},{},[190],{"type":19,"value":191},"被动：人中吕布，任何普通攻击（我想LoL的普通攻击应该也是有标记的，起凡当时是skillId==28近战、30远程，事实上我不太赞成这样的skillId特殊标记法）的时候会为吕布添加1层“人中吕布”（另外一个buff）\n“人中吕布”到15层、25层、35层、45层、50层时更换视觉特效(BuffOccur BuffRemoved)。人中吕的特性是15层开始普通攻击有几率造成双倍伤害，25层开始受到伤害有几率减少20%，35层开始释放技能获得导致目标昏迷2秒，45层开始释放技能恢复自身25%生命，50层时技能对20%生命以下目标一击必杀，死亡是损失一半层数(beKilled)。这么牛逼的效果？是啊，中国人当然应该牛逼了。慢来，才YY开始，这算设计好了？早呢，为了这些效果，你需要在“人中吕布”Occur Remove中去根据当前层数添加删除Buff：",{"type":14,"tag":15,"props":193,"children":194},{},[195],{"type":19,"value":196},"人中吕布_双倍伤害，普通攻击OnHit投随机数决定是否伤害x2。",{"type":14,"tag":15,"props":198,"children":199},{},[200],{"type":19,"value":201},"人中吕布_几率免伤，BeHurt时候投随机数决定是否降低一定的伤害。",{"type":14,"tag":15,"props":203,"children":204},{},[205],{"type":19,"value":206},"人中吕布_强力攻击，Onhit判断不是普通攻击则给目标一个2秒的Buff1层。",{"type":14,"tag":15,"props":208,"children":209},{},[210],{"type":19,"value":211},"强力攻击_昏迷，Occur携带者昏迷属性为true，Remove就不需要设置false了，因为他可能还有别的buff让他昏迷，但是Remove和Occur的时候都要重新计算一次属性状态就对了。说到这里，这个Buff互相堆叠又是很讨厌的逻辑，2个SS可以给同一个目标释放腐蚀术，产生2个，但是自己却只能对1个目标上1个，等等等等。",{"type":14,"tag":15,"props":213,"children":214},{},[215],{"type":19,"value":216},"人中吕布_技能恢复，OnCast的时候（事实上LoL应该只有OnHit，这也可以），判断不是普通攻击则回复生命。",{"type":14,"tag":15,"props":218,"children":219},{},[220],{"type":19,"value":221},"人中吕布_斩杀，OnHit判断目标生命比，决定是否造成999999伤害。",{"type":14,"tag":15,"props":223,"children":224},{},[225,227,232],{"type":19,"value":226},"其实如你楼下一层说的，这个机制的最大优势在于，它可以实现很多难以预料的功能，如果策划足够给力的话。\n实际的经验是，一个项目中产生很多沟通问题的本质是，策划并不能归纳出自己想要什么，而程序员更不可能提早知道你想做什么，预判是一道鸿沟，无法跨越，因为我们都不是先知，而年轻的策划很多神奇的想法更是无法预判的，但如果放弃这些想法中的一些精化会非常可惜。因此在项目开发中尽可能去做一些能够更有“包容性”的设计，是非常重要的事情，这解决了后期的很多问题。\n你可以发现我提倡的很多机制或者想法都具有“包容性”或者说“预判性”，包括Tag机制本身，很多年轻的策划或者程序并不能理解为什么明明我们可以用id数字分段做的事情非要想的如此复杂，但事实是当你需要把你的分段规则详细的说给后来的人知道的时候，你甚至需要花费几周时间，还未必能说清楚，更糟糕的是，也许你自己都忘了当初的约定。\nBuff机制也是如此，它的优势在于程序员、包括策划自己并不需要一开始就知道我要具体做什么，但是我们可以先把框架搭起来或者说可以开始动手制作项目了，而后期灵感突发的时候，并不是非得“放到下一个项目”的。\n而技能机制，在我看来反而只是一个辅助的体系，因为它只是一套简单的流程，作为一个入行的新人都应该轻松的完成他的开发，但是很多不太好的做法却是把技能的效果复杂化了，以至于程序员被误导，后期很难对技能维护。因此技能的效果，事实上就是Hp_Dmg（这么多年了我都用这个函数来造成伤害，因为名字很有趣），CreateBuffObj，CreateAoEObj，就是这么简单，一个技能的效果可以同时调用多条这样的功能，但只限于这样的功能。至于花哨的东西，就让Buff系统去完成。\n因此这里还说了一个重点，对于策划来说，研发最大的技巧就是“拆”，如何把你的想法拆成最基础的元素，这样大家在实现的时候就不会有很多不必要的麻烦，在之后的debug中也会方便很多——比如我说的昏迷插法。一个优秀的程序员（至少我不是）他/她一定是把心思放在读书上，至少在学习计算机编程的时候他/她们非常棒，这也导致了他们不太可能像我们策划一样了解游戏，因此不应该把一些“难以理解”的东西拿来去塞给程序员做（事实上难以理解本身是因为它有太多的“专业名词”和超乎自然的地方，这也是游戏魅力所在），你也许没见过把“沉默”做成了“禁言”功能的程序员，他认为法师释放了一个沉默法术后，对方玩家就不能发送聊天内容了，因为被“沉默”了。\n降低研发成本，从设计师角度来说主要还是沟通成本，现在已经成为了很多公司必须面对的课题了，明明一个简单到10小时能完成的逻辑，在很多公司居然能花费好几个人用好几十天去做，并且没能完成（因为策划总是在添加和改变想法，而程序员却陪太子读书了）。\n“猴子”这个称呼并不适合一个200多斤的人",{"type":14,"tag":228,"props":229,"children":231},"img",{"alt":228,"src":230},"/images/2020-02-16-buff-system/lol.gif",[],{"type":19,"value":233},"，龙与地下城——欧美人眼中最强的生物和它的巢穴，都是字母D开头中间用and连接，它骨子里是一套分析世界的数学模型，骰子实现了世界上很多所谓运气的东西；猴与花果山，它应该是中国人的DND，猴象征着欧美人眼中的中国人，也是孙悟空的表现，花果山则是孙悟空的住所，Monkey and Mountain，前后2个M，就是巧妙的地方，15年前我想做一套中国人的DnD，但至今没法实现，很多原因导致我们在娱乐方面缺少类似骰子这样的基础文化。",{"type":14,"tag":15,"props":235,"children":236},{},[237],{"type":19,"value":238},"相关链接",{"type":14,"tag":240,"props":241,"children":242},"ul",{},[243],{"type":14,"tag":244,"props":245,"children":246},"li",{},[247],{"type":14,"tag":248,"props":249,"children":253},"a",{"href":250,"rel":251},"https://zhuanlan.zhihu.com/p/150812545",[252],"nofollow",[254],{"type":19,"value":250},{"title":7,"searchDepth":256,"depth":256,"links":257},2,[],"markdown","content:unity:2020-02-16-buff-system.md","content","unity/2020-02-16-buff-system.md","md","2020-02-16",[265,275,402,451,503,516,628],{"title":266,"_path":267,"children":268},"Art","/art",[269,272],{"title":270,"_path":271},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":273,"_path":274},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":276,"_path":277,"children":278},"Dotnet","/dotnet",[279,282,285,288,291,294,297,300,303,306,309,312,315,318,321,324,327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396,399],{"title":280,"_path":281},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":283,"_path":284},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":286,"_path":287},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":289,"_path":290},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":292,"_path":293},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":295,"_path":296},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":298,"_path":299},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":301,"_path":302},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":304,"_path":305},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":307,"_path":308},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":310,"_path":311},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":313,"_path":314},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":316,"_path":317},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":319,"_path":320},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":322,"_path":323},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":325,"_path":326},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":328,"_path":329},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":331,"_path":332},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":334,"_path":335},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":337,"_path":338},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":340,"_path":341},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":343,"_path":344},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":346,"_path":347},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":349,"_path":350},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":352,"_path":353},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":355,"_path":356},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":358,"_path":359},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":361,"_path":362},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":364,"_path":365},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":367,"_path":368},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":370,"_path":371},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":373,"_path":374},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":376,"_path":377},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":379,"_path":380},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":382,"_path":383},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":385,"_path":386},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":388,"_path":389},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":391,"_path":392},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":394,"_path":395},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":397,"_path":398},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":400,"_path":401},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":403,"_path":404,"children":405},"Game","/game",[406,409,412,415,418,421,424,427,430,433,436,439,442,445,448],{"title":407,"_path":408},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":410,"_path":411},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":413,"_path":414},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":416,"_path":417},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":419,"_path":420},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":422,"_path":423},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":425,"_path":426},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":428,"_path":429},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":431,"_path":432},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":434,"_path":435},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":437,"_path":438},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":440,"_path":441},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":443,"_path":444},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":446,"_path":447},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":449,"_path":450},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":452,"_path":453,"children":454},"Gyj","/gyj",[455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500],{"title":456,"_path":457},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":459,"_path":460},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":462,"_path":463},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":465,"_path":466},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":468,"_path":469},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":471,"_path":472},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":474,"_path":475},"玩法","/gyj/2022-08-22-wanfa",{"title":477,"_path":478},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":480,"_path":481},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":483,"_path":484},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":486,"_path":487},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":489,"_path":490},"门派内容相关","/gyj/2022-11-17-sect",{"title":492,"_path":493},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":495,"_path":496},"种植","/gyj/2022-12-01-zhongzhi",{"title":498,"_path":499},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":501,"_path":502},"跑商","/gyj/2023-11-01-paoshang",{"title":504,"_path":505,"children":506},"Js","/js",[507,510,513],{"title":508,"_path":509},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":511,"_path":512},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":514,"_path":515},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":517,"_path":518,"children":519},"Tool","/tool",[520,523,526,529,532,535,538,541,544,547,550,553,556,559,562,565,568,571,574,577,580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625],{"title":521,"_path":522},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":524,"_path":525},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":527,"_path":528},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":530,"_path":531},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":533,"_path":534},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":536,"_path":537},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":539,"_path":540},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":542,"_path":543},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":545,"_path":546},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":548,"_path":549},"mac下brew 使用","/tool/2020-01-13-brew",{"title":551,"_path":552},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":554,"_path":555},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":557,"_path":558},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":560,"_path":561},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":563,"_path":564},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":566,"_path":567},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":569,"_path":570},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":572,"_path":573},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":575,"_path":576},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":578,"_path":579},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":581,"_path":582},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":584,"_path":585},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":587,"_path":588},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":590,"_path":591},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":593,"_path":594},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":596,"_path":597},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":599,"_path":600},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":602,"_path":603},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":605,"_path":606},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":608,"_path":609},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":611,"_path":612},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":614,"_path":615},"rider的使用","/tool/2022-08-02-rider-use",{"title":617,"_path":618},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":620,"_path":621},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":623,"_path":624},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":626,"_path":627},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":629,"_path":630,"children":631},"Unity","/unity",[632,635,638,641,644,647,650,653,656,659,662,665,668,671,674,677,680,683,686,689,692,695,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786,789,792,795,798,801,804,807,810,813,816,819,822,825,828,831,834,837,840,843],{"title":633,"_path":634},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":636,"_path":637},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":639,"_path":640},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":642,"_path":643},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":645,"_path":646},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":648,"_path":649},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":651,"_path":652},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":654,"_path":655},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":657,"_path":658},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":660,"_path":661},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":663,"_path":664},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":666,"_path":667},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":669,"_path":670},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":672,"_path":673},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":675,"_path":676},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":678,"_path":679},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":681,"_path":682},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":684,"_path":685},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":687,"_path":688},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":690,"_path":691},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":693,"_path":694},"技能系统","/unity/2020-02-15-skill-system",{"title":8,"_path":4},{"title":697,"_path":698},"角色状态设计","/unity/2020-02-17-character-states",{"title":700,"_path":701},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":703,"_path":704},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":706,"_path":707},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":709,"_path":710},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":712,"_path":713},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":715,"_path":716},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":718,"_path":719},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":721,"_path":722},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":724,"_path":725},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":727,"_path":728},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":730,"_path":731},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":733,"_path":734},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":736,"_path":737},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":739,"_path":740},"unity的addressables","/unity/2020-09-12-addressables",{"title":742,"_path":743},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":745,"_path":746},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":748,"_path":749},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":751,"_path":752},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":754,"_path":755},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":757,"_path":758},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":760,"_path":761},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":763,"_path":764},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":766,"_path":767},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":769,"_path":770},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":772,"_path":773},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":775,"_path":776},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":778,"_path":779},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":781,"_path":782},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":784,"_path":785},"简单保存工具","/unity/2020-11-13-simple-save",{"title":787,"_path":788},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":790,"_path":791},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":793,"_path":794},"ability","/unity/2020-11-16-dotssample",{"title":796,"_path":797},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":799,"_path":800},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":802,"_path":803},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":805,"_path":806},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":808,"_path":809},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":811,"_path":812},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":814,"_path":815},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":817,"_path":818},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":820,"_path":821},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":823,"_path":824},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":826,"_path":827},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":829,"_path":830},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":832,"_path":833},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":835,"_path":836},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":838,"_path":839},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":841,"_path":842},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":844,"_path":845},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040496]