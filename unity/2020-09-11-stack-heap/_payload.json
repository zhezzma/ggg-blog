[{"data":1,"prerenderedAt":2205},["Reactive",2],{"content-query-rhvuOgUU3U":3,"content-navigation-8C37fagqQL":1623},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":1617,"_id":1618,"_source":1619,"_file":1620,"_extension":1621,"date":1622},"/unity/2020-09-11-stack-heap","unity",false,"","堆栈内存Stack和堆内存Heap","堆与栈：有什么不同？栈，或多或少负责跟踪正在程序中运行的代码。堆，或多或少负责跟踪程序对象或数据。栈，把它想像成叠在一起的盒子(像搭积木一样)。每一次调用一个方法就会在最上面叠一个盒子，用来跟踪程序运行情况。我们只能使用栈中叠在最上面的盒子里的东西。当某一最上面的盒子里的代码执行完毕（如方法执行完成），就把它扔掉并继续去使用下一个盒子。堆，与栈类似，只是它是用来保存信息而不是跟踪执行。所以，堆里的任何信息都可以在任何时间被访问。有了堆，访问信息没有约束，而不像栈只能访问最上面的盒子。堆的情况就像你把一堆刚洗完的衣服放在床上还没有时间来的及收走，你可以迅速拿到你想要拿的衣服。栈的情况就像你叠在一",{"type":11,"children":12,"toc":1590},"root",[13,22,34,44,49,54,59,67,72,77,82,87,92,102,182,187,196,224,229,238,243,250,255,296,301,306,311,316,328,333,338,345,350,357,362,369,374,381,386,393,398,404,416,421,426,435,440,444,453,458,465,470,477,482,489,494,499,504,509,514,519,528,540,545,554,559,568,573,578,587,594,599,604,613,620,625,631,636,641,659,667,672,679,684,689,697,702,707,716,721,728,733,740,745,752,757,762,767,776,781,790,797,802,807,815,820,827,832,837,846,854,859,864,873,878,887,894,899,908,913,920,938,943,948,953,958,967,972,981,986,991,1002,1007,1014,1049,1054,1059,1064,1069,1074,1083,1088,1095,1100,1109,1114,1125,1130,1135,1140,1149,1154,1163,1168,1175,1180,1185,1194,1199,1207,1212,1217,1226,1231,1239,1243,1252,1257,1264,1269,1274,1279,1288,1293,1302,1307,1315,1321,1333,1341,1346,1358,1368,1373,1391,1401,1409,1436,1441,1449,1460,1465,1480,1489,1494,1509,1517,1524,1529,1535],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"堆与栈有什么不同",[19],{"type":20,"value":21},"text","堆与栈：有什么不同？",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26,32],{"type":14,"tag":27,"props":28,"children":29},"strong",{},[30],{"type":20,"value":31},"栈",{"type":20,"value":33},"，或多或少负责跟踪正在程序中运行的代码。",{"type":14,"tag":23,"props":35,"children":36},{},[37,42],{"type":14,"tag":27,"props":38,"children":39},{},[40],{"type":20,"value":41},"堆",{"type":20,"value":43},"，或多或少负责跟踪程序对象或数据。",{"type":14,"tag":23,"props":45,"children":46},{},[47],{"type":20,"value":48},"栈，把它想像成叠在一起的盒子(像搭积木一样)。每一次调用一个方法就会在最上面叠一个盒子，用来跟踪程序运行情况。我们只能使用栈中叠在最上面的盒子里的东西。当某一最上面的盒子里的代码执行完毕（如方法执行完成），就把它扔掉并继续去使用下一个盒子。",{"type":14,"tag":23,"props":50,"children":51},{},[52],{"type":20,"value":53},"堆，与栈类似，只是它是用来保存信息而不是跟踪执行。所以，堆里的任何信息都可以在任何时间被访问。有了堆，访问信息没有约束，而不像栈只能访问最上面的盒子。",{"type":14,"tag":23,"props":55,"children":56},{},[57],{"type":20,"value":58},"堆的情况就像你把一堆刚洗完的衣服放在床上还没有时间来的及收走，你可以迅速拿到你想要拿的衣服。栈的情况就像你叠在一起的鞋盒子，你需要拿走最上面的盒子才能拿到下一个盒子。",{"type":14,"tag":23,"props":60,"children":61},{},[62],{"type":14,"tag":63,"props":64,"children":66},"img",{"alt":63,"src":65},"/images/2020-09-11-stack-heap/20131125031529515",[],{"type":14,"tag":23,"props":68,"children":69},{},[70],{"type":20,"value":71},"上图并不上真正的内存运行情况，只是为了让大家区分堆和栈。",{"type":14,"tag":23,"props":73,"children":74},{},[75],{"type":20,"value":76},"栈，会自我管理，它有自己的内存管理机制。当最上面的盒子不再使用时，会自动被扔掉。",{"type":14,"tag":23,"props":78,"children":79},{},[80],{"type":20,"value":81},"堆，相反，我们要控制它的垃圾回收(GC)。我们要去管理堆是否干净，就像管理床上的脏衣服。你不手动扔掉它，就会在床上变臭。",{"type":14,"tag":15,"props":83,"children":85},{"id":84},"什么在堆和栈里",[86],{"type":20,"value":84},{"type":14,"tag":23,"props":88,"children":89},{},[90],{"type":20,"value":91},"当程序执行时，我们主要有4种类型的东西放进堆和栈里：值类型，引用类型，指针，指令。",{"type":14,"tag":93,"props":94,"children":96},"h3",{"id":95},"值类型",[97],{"type":14,"tag":27,"props":98,"children":99},{},[100],{"type":20,"value":101},"值类型:",{"type":14,"tag":103,"props":104,"children":105},"ul",{},[106,112,117,122,127,132,137,142,147,152,157,162,167,172,177],{"type":14,"tag":107,"props":108,"children":109},"li",{},[110],{"type":20,"value":111},"bool",{"type":14,"tag":107,"props":113,"children":114},{},[115],{"type":20,"value":116},"byte",{"type":14,"tag":107,"props":118,"children":119},{},[120],{"type":20,"value":121},"char",{"type":14,"tag":107,"props":123,"children":124},{},[125],{"type":20,"value":126},"decimal",{"type":14,"tag":107,"props":128,"children":129},{},[130],{"type":20,"value":131},"double",{"type":14,"tag":107,"props":133,"children":134},{},[135],{"type":20,"value":136},"enum",{"type":14,"tag":107,"props":138,"children":139},{},[140],{"type":20,"value":141},"float",{"type":14,"tag":107,"props":143,"children":144},{},[145],{"type":20,"value":146},"int",{"type":14,"tag":107,"props":148,"children":149},{},[150],{"type":20,"value":151},"long",{"type":14,"tag":107,"props":153,"children":154},{},[155],{"type":20,"value":156},"sbyte",{"type":14,"tag":107,"props":158,"children":159},{},[160],{"type":20,"value":161},"short",{"type":14,"tag":107,"props":163,"children":164},{},[165],{"type":20,"value":166},"struct",{"type":14,"tag":107,"props":168,"children":169},{},[170],{"type":20,"value":171},"uint",{"type":14,"tag":107,"props":173,"children":174},{},[175],{"type":20,"value":176},"ulong",{"type":14,"tag":107,"props":178,"children":179},{},[180],{"type":20,"value":181},"ushort",{"type":14,"tag":23,"props":183,"children":184},{},[185],{"type":20,"value":186},"它们都衍生于System.ValueType。",{"type":14,"tag":93,"props":188,"children":190},{"id":189},"引用类型",[191],{"type":14,"tag":27,"props":192,"children":193},{},[194],{"type":20,"value":195},"引用类型:",{"type":14,"tag":103,"props":197,"children":198},{},[199,204,209,214,219],{"type":14,"tag":107,"props":200,"children":201},{},[202],{"type":20,"value":203},"class",{"type":14,"tag":107,"props":205,"children":206},{},[207],{"type":20,"value":208},"interface",{"type":14,"tag":107,"props":210,"children":211},{},[212],{"type":20,"value":213},"delegate",{"type":14,"tag":107,"props":215,"children":216},{},[217],{"type":20,"value":218},"object",{"type":14,"tag":107,"props":220,"children":221},{},[222],{"type":20,"value":223},"string",{"type":14,"tag":23,"props":225,"children":226},{},[227],{"type":20,"value":228},"它们都衍生于System.Object。当然object就是System.Object。",{"type":14,"tag":93,"props":230,"children":232},{"id":231},"指针",[233],{"type":14,"tag":27,"props":234,"children":235},{},[236],{"type":20,"value":237},"指针:",{"type":14,"tag":23,"props":239,"children":240},{},[241],{"type":20,"value":242},"第三种被放于内存管理体制中的是类型的引用。这个引用通常被叫作指针。我们并不具体的使用指针，它们由CLR管理。一个指针（引用）是不同于引用类型的。我们定义它是一个引用类型，意味着我们可以通过指针访问它。一个指针占有一小块内存，这块内存指向另一块内存。指针占用在内存中的存储和其它的相同，只是存放的值既不是内存地址也不是空null。",{"type":14,"tag":23,"props":244,"children":245},{},[246],{"type":14,"tag":63,"props":247,"children":249},{"alt":63,"src":248},"/images/2020-09-11-stack-heap/20131125034525859",[],{"type":14,"tag":15,"props":251,"children":253},{"id":252},"两个黄金规则",[254],{"type":20,"value":252},{"type":14,"tag":256,"props":257,"children":258},"ol",{},[259,264],{"type":14,"tag":107,"props":260,"children":261},{},[262],{"type":20,"value":263},"引用类型永远存储在堆里。",{"type":14,"tag":107,"props":265,"children":266},{},[267,273,275,280,282,287,289,294],{"type":14,"tag":268,"props":269,"children":271},"code",{"className":270},[],[272],{"type":20,"value":95},{"type":20,"value":274},"和",{"type":14,"tag":268,"props":276,"children":278},{"className":277},[],[279],{"type":20,"value":231},{"type":20,"value":281},"永远存储在它们声明时所在的",{"type":14,"tag":268,"props":283,"children":285},{"className":284},[],[286],{"type":20,"value":41},{"type":20,"value":288},"或",{"type":14,"tag":268,"props":290,"children":292},{"className":291},[],[293],{"type":20,"value":31},{"type":20,"value":295},"里。",{"type":14,"tag":15,"props":297,"children":299},{"id":298},"栈工作原理",[300],{"type":20,"value":298},{"type":14,"tag":23,"props":302,"children":303},{},[304],{"type":20,"value":305},"栈，如第一节所说，在代码运行时负责跟踪每一个线程的所在(什么被调用了)。你可以把它想像成一个线程“状态”，而每一个线程都有它自己的栈。当我们的代码执行一次方法调用，线程开始执行寄存在方法(Method)表里的JIT编译过的指令，并且把该方法的参数存放到当前线程栈里。然后，随着代码的执行每遇见方法中的变量，该变量都会被放到栈的最上面，如此重复把所有变量都放到栈上(当然引用类型只存放指针)。",{"type":14,"tag":23,"props":307,"children":308},{},[309],{"type":20,"value":310},"为了方便理解，让我们看代码与图例。",{"type":14,"tag":23,"props":312,"children":313},{},[314],{"type":20,"value":315},"执行下面的方法：",{"type":14,"tag":317,"props":318,"children":323},"pre",{"code":319,"language":320,"meta":7,"className":321},"public int AddFive(int pValue)\n{\n    int result;\n    result = pValue + 5;\n    return result;\n}\n","csharp",[322],"language-csharp",[324],{"type":14,"tag":268,"props":325,"children":326},{"__ignoreMap":7},[327],{"type":20,"value":319},{"type":14,"tag":23,"props":329,"children":330},{},[331],{"type":20,"value":332},"下面是栈里发生的情况.  有必要提醒的是，我们现在假设当前代码产生的栈存储会放到所有既有项(栈里已经存储的数据)之上。一旦我们开始执行该方法，方法参数pValue会被放到栈上（以后的文章里会介绍参数传递）。",{"type":14,"tag":23,"props":334,"children":335},{},[336],{"type":20,"value":337},"注意：方法并不存在栈里，图只是为了阐述原理而放的引用。",{"type":14,"tag":23,"props":339,"children":340},{},[341],{"type":14,"tag":63,"props":342,"children":344},{"alt":63,"src":343},"/images/2020-09-11-stack-heap/20131126034830281",[],{"type":14,"tag":23,"props":346,"children":347},{},[348],{"type":20,"value":349},"下一步，控制(线程执行方法)被传递到寄存在方法类型表里的AddFive()方法对应的指令集中。如果方法是第一次被触发，会执行JIT编译。",{"type":14,"tag":23,"props":351,"children":352},{},[353],{"type":14,"tag":63,"props":354,"children":356},{"alt":63,"src":355},"/images/2020-09-11-stack-heap/20131126035529343",[],{"type":14,"tag":23,"props":358,"children":359},{},[360],{"type":20,"value":361},"随着方法的执行，栈会分配一块内存给变量result存放。",{"type":14,"tag":23,"props":363,"children":364},{},[365],{"type":14,"tag":63,"props":366,"children":368},{"alt":63,"src":367},"/images/2020-09-11-stack-heap/20131126035747203",[],{"type":14,"tag":23,"props":370,"children":371},{},[372],{"type":20,"value":373},"方法执行完成，返回result。",{"type":14,"tag":23,"props":375,"children":376},{},[377],{"type":14,"tag":63,"props":378,"children":380},{"alt":63,"src":379},"/images/2020-09-11-stack-heap/20131126035907203",[],{"type":14,"tag":23,"props":382,"children":383},{},[384],{"type":20,"value":385},"该次任务在栈里所占的所有内存将被清理，仅一个指针被移动到AddFive()开始时所在的可用内存地址上。接着会执行栈里AddFive()下面一个方法（图里看不到）。",{"type":14,"tag":23,"props":387,"children":388},{},[389],{"type":14,"tag":63,"props":390,"children":392},{"alt":63,"src":391},"/images/2020-09-11-stack-heap/20131126040806812",[],{"type":14,"tag":23,"props":394,"children":395},{},[396],{"type":20,"value":397},"在这个例子当中，变量result被放到了栈里。事实上，方法体内每次定义的值类型变量都会被放到栈里。",{"type":14,"tag":15,"props":399,"children":401},{"id":400},"值类型会存储在堆里",[402],{"type":20,"value":403},"值类型会存储在堆里？",{"type":14,"tag":23,"props":405,"children":406},{},[407,409,414],{"type":20,"value":408},"是的，值类型有时候就是会存储在堆里。上一节中介绍的",{"type":14,"tag":27,"props":410,"children":411},{},[412],{"type":20,"value":413},"黄金规则2:值类型和指针永远存储在它们声明时所在的堆或栈里",{"type":20,"value":415},"。如果一个值类型不是在方法中定义的，而是在一个引用类型里，那么此值类型将会被放在这个引用类型里并存储在堆上。",{"type":14,"tag":15,"props":417,"children":419},{"id":418},"代码图例",[420],{"type":20,"value":418},{"type":14,"tag":23,"props":422,"children":423},{},[424],{"type":20,"value":425},"我们定义一个引用类型：",{"type":14,"tag":317,"props":427,"children":430},{"code":428,"language":320,"meta":7,"className":429},"public class MyInt\n{          \n    public int MyValue;\n}\n",[322],[431],{"type":14,"tag":268,"props":432,"children":433},{"__ignoreMap":7},[434],{"type":20,"value":428},{"type":14,"tag":23,"props":436,"children":437},{},[438],{"type":20,"value":439},"里面包含一个值类型MyValue。",{"type":14,"tag":23,"props":441,"children":442},{},[443],{"type":20,"value":315},{"type":14,"tag":317,"props":445,"children":448},{"code":446,"language":320,"meta":7,"className":447},"public MyInt AddFive(int pValue)\n{\n    MyInt result = new MyInt();\n    result.MyValue = pValue + 5;\n    return result;\n}\n",[322],[449],{"type":14,"tag":268,"props":450,"children":451},{"__ignoreMap":7},[452],{"type":20,"value":446},{"type":14,"tag":23,"props":454,"children":455},{},[456],{"type":20,"value":457},"就像上一节介绍的一样，线程开始执行此方法，参数pValue将会被放到当前线程栈上。",{"type":14,"tag":23,"props":459,"children":460},{},[461],{"type":14,"tag":63,"props":462,"children":464},{"alt":63,"src":463},"/images/2020-09-11-stack-heap/20131126052252140",[],{"type":14,"tag":23,"props":466,"children":467},{},[468],{"type":20,"value":469},"接下来不同于上一节所介绍的是MyInt是一个引用类型，它将被放到堆上并在栈上放一个指针指向它在堆里的存储。",{"type":14,"tag":23,"props":471,"children":472},{},[473],{"type":14,"tag":63,"props":474,"children":476},{"alt":63,"src":475},"/images/2020-09-11-stack-heap/20131126052522859",[],{"type":14,"tag":23,"props":478,"children":479},{},[480],{"type":20,"value":481},"当AddFive()执行完成后，如上一节所讲栈开始清理。",{"type":14,"tag":23,"props":483,"children":484},{},[485],{"type":14,"tag":63,"props":486,"children":488},{"alt":63,"src":487},"/images/2020-09-11-stack-heap/20131126052806703",[],{"type":14,"tag":23,"props":490,"children":491},{},[492],{"type":20,"value":493},"现在是需要C#垃圾回收GC的时候了。当我们的程序所占内存到达临界值时(即将溢出)，我们会需要更多的堆空间，GC就会开始运行。GC停止所有当前运行线程(整体停止)，找到堆里所有主程序不会访问到的对象并删除它们。然后，GC会识别所有堆里剩下的对象并分配内存空间给它们，同时调整堆和栈里指向它们的指针。你可以想像这是非常耗资源的，这会影响到程序的性能。这就是为什么我们需要理解和注意堆栈的使用，进而写出高性能代码。",{"type":14,"tag":15,"props":495,"children":497},{"id":496},"堆栈原理对代码的影响",[498],{"type":20,"value":496},{"type":14,"tag":23,"props":500,"children":501},{},[502],{"type":20,"value":503},"当我们使用引用类型时，我们在和指向引用类型的指针打交道，而不是引用类型本身。",{"type":14,"tag":23,"props":505,"children":506},{},[507],{"type":20,"value":508},"当我们使用值类型时，我们就是在和值类型本身打交道。",{"type":14,"tag":93,"props":510,"children":512},{"id":511},"代码图例-1",[513],{"type":20,"value":418},{"type":14,"tag":23,"props":515,"children":516},{},[517],{"type":20,"value":518},"假设执行方法：",{"type":14,"tag":317,"props":520,"children":523},{"code":521,"language":320,"meta":7,"className":522},"public int ReturnValue()\n{\n    int x = new int();\n    x = 3;\n    int y = new int();\n    y = x;      \n    y = 4;         \n    return x;\n}\n",[322],[524],{"type":14,"tag":268,"props":525,"children":526},{"__ignoreMap":7},[527],{"type":20,"value":521},{"type":14,"tag":23,"props":529,"children":530},{},[531,533,538],{"type":20,"value":532},"我们会得到值 ",{"type":14,"tag":27,"props":534,"children":535},{},[536],{"type":20,"value":537},"3",{"type":20,"value":539},"。",{"type":14,"tag":23,"props":541,"children":542},{},[543],{"type":20,"value":544},"使用引用类型：",{"type":14,"tag":317,"props":546,"children":549},{"code":547,"language":320,"meta":7,"className":548},"public class MyInt\n{\n    public int MyValue;\n}\n",[322],[550],{"type":14,"tag":268,"props":551,"children":552},{"__ignoreMap":7},[553],{"type":20,"value":547},{"type":14,"tag":23,"props":555,"children":556},{},[557],{"type":20,"value":558},"如果执行方法：",{"type":14,"tag":317,"props":560,"children":563},{"code":561,"language":320,"meta":7,"className":562},"public int ReturnValue2()\n{\n    MyInt x = new MyInt();\n    x.MyValue = 3;\n    MyInt y = new MyInt();\n    y = x;        \n    y.MyValue = 4;         \n    return x.MyValue;\n}\n",[322],[564],{"type":14,"tag":268,"props":565,"children":566},{"__ignoreMap":7},[567],{"type":20,"value":561},{"type":14,"tag":23,"props":569,"children":570},{},[571],{"type":20,"value":572},"我们得到的值是４而不是３！（译外话：这是很简单，但相信还是有很多人不知道原理的）",{"type":14,"tag":23,"props":574,"children":575},{},[576],{"type":20,"value":577},"第一个示例中：",{"type":14,"tag":317,"props":579,"children":582},{"code":580,"language":320,"meta":7,"className":581},"public int ReturnValue()\n{\n    int x = 3;\n    int y = x;    \n    y = 4;\n    return x;\n}\n",[322],[583],{"type":14,"tag":268,"props":584,"children":585},{"__ignoreMap":7},[586],{"type":20,"value":580},{"type":14,"tag":23,"props":588,"children":589},{},[590],{"type":14,"tag":63,"props":591,"children":593},{"alt":63,"src":592},"/images/2020-09-11-stack-heap/20131128043217031",[],{"type":14,"tag":23,"props":595,"children":596},{},[597],{"type":20,"value":598},"x就是3，y就是4。操作两个不同对象。",{"type":14,"tag":23,"props":600,"children":601},{},[602],{"type":20,"value":603},"第二个示例：",{"type":14,"tag":317,"props":605,"children":608},{"code":606,"language":320,"meta":7,"className":607},"public int ReturnValue2()\n{\n    MyInt x;\n    x.MyValue = 3;\n    MyInt y;\n    y = x;              \n    y.MyValue = 4;\n    return x.MyValue;\n}\n",[322],[609],{"type":14,"tag":268,"props":610,"children":611},{"__ignoreMap":7},[612],{"type":20,"value":606},{"type":14,"tag":23,"props":614,"children":615},{},[616],{"type":14,"tag":63,"props":617,"children":619},{"alt":63,"src":618},"/images/2020-09-11-stack-heap/20131128043332000",[],{"type":14,"tag":23,"props":621,"children":622},{},[623],{"type":20,"value":624},"得到的值是4不是3是因为我们操作栈里两个指针并且它们指向堆里同一个对象。",{"type":14,"tag":15,"props":626,"children":628},{"id":627},"参数大画面",[629],{"type":20,"value":630},"参数，大画面",{"type":14,"tag":23,"props":632,"children":633},{},[634],{"type":20,"value":635},"下面是当代码运行时会产生的一个详细过程。上几节已经介绍过当一个方法被调用时会产生的基本情况，让我们来看一下更加详细的内容。",{"type":14,"tag":23,"props":637,"children":638},{},[639],{"type":20,"value":640},"当我们调用一个方法时会发生以下情形：",{"type":14,"tag":256,"props":642,"children":643},{},[644,649,654],{"type":14,"tag":107,"props":645,"children":646},{},[647],{"type":20,"value":648},"栈会分配一块内存空间给程序执行所需要的信息(我们叫它栈结构Stack Frame)。一个栈结构包含方法调用地址(指针)，它以一个GOTO指令的形式存在栈里。因此，当程序执行完方法(method)时，它会知道怎么样返回进而曳继续执行代码。",{"type":14,"tag":107,"props":650,"children":651},{},[652],{"type":20,"value":653},"方法的所有参数将被复制到栈里，这是我们将要更加详细介绍的部分。",{"type":14,"tag":107,"props":655,"children":656},{},[657],{"type":20,"value":658},"控制被传递到JIT编译过的方法里，同时线程开始执行代码。此时，我们将有另一个方法呈现在栈结构的“回调栈”里。",{"type":14,"tag":317,"props":660,"children":662},{"code":319,"language":320,"meta":7,"className":661},[322],[663],{"type":14,"tag":268,"props":664,"children":665},{"__ignoreMap":7},[666],{"type":20,"value":319},{"type":14,"tag":23,"props":668,"children":669},{},[670],{"type":20,"value":671},"栈像下图所示：",{"type":14,"tag":23,"props":673,"children":674},{},[675],{"type":14,"tag":63,"props":676,"children":678},{"alt":63,"src":677},"/images/2020-09-11-stack-heap/20131128042641203",[],{"type":14,"tag":23,"props":680,"children":681},{},[682],{"type":20,"value":683},"注意：ReturnValue方法不会存在栈上，图中把ReturnValue作为此栈结构的开始只是为了解释栈原理。",{"type":14,"tag":23,"props":685,"children":686},{},[687],{"type":20,"value":688},"像前几节介绍的，值类型和引用类型在栈里的存储是不同的。栈为任何值类型创建副本，栈也为任何引用类型的指针创建副本。",{"type":14,"tag":15,"props":690,"children":692},{"id":691},"值类型传递",[693],{"type":14,"tag":27,"props":694,"children":695},{},[696],{"type":20,"value":691},{"type":14,"tag":23,"props":698,"children":699},{},[700],{"type":20,"value":701},"下面是值类型传递在栈里的内幕。",{"type":14,"tag":23,"props":703,"children":704},{},[705],{"type":20,"value":706},"首先，当我们传递一个值类型变量时，栈会为它分配一块内存空间并把值类型变量的值存储进去。看下面的代码：",{"type":14,"tag":317,"props":708,"children":711},{"code":709,"language":320,"meta":7,"className":710},"class Class1  \n{  \n     public void Go()  \n     {  \n         int x = 5;  \n         AddFive(x);  \n         Console.WriteLine(x.ToString());  \n     }  \n     public int AddFive(int pValue)  \n     {  \n         pValue += 5;  \n         return pValue;  \n     }  \n} \n",[322],[712],{"type":14,"tag":268,"props":713,"children":714},{"__ignoreMap":7},[715],{"type":20,"value":709},{"type":14,"tag":23,"props":717,"children":718},{},[719],{"type":20,"value":720},"当代码执行时，栈为x分配一块内存空间并存储值5",{"type":14,"tag":23,"props":722,"children":723},{},[724],{"type":14,"tag":63,"props":725,"children":727},{"alt":63,"src":726},"/images/2020-09-11-stack-heap/20131127050637031",[],{"type":14,"tag":23,"props":729,"children":730},{},[731],{"type":20,"value":732},"然后，AddFive()被放到栈上，同时栈分配内存空间给参数pValue并复制x的值给它。",{"type":14,"tag":23,"props":734,"children":735},{},[736],{"type":14,"tag":63,"props":737,"children":739},{"alt":63,"src":738},"/images/2020-09-11-stack-heap/20131127051251531",[],{"type":14,"tag":23,"props":741,"children":742},{},[743],{"type":20,"value":744},"当AddFive()执行完成，线程被传递回Go()。同时因为AddFive()执行完，它的参数pValue也实质上被移除。",{"type":14,"tag":23,"props":746,"children":747},{},[748],{"type":14,"tag":63,"props":749,"children":751},{"alt":63,"src":750},"/images/2020-09-11-stack-heap/20131127051718640",[],{"type":14,"tag":23,"props":753,"children":754},{},[755],{"type":20,"value":756},"所以结果是5是合理的。关键点是任何被传递的值类型参数仅是一个碳复制，因为我们希望保护原始变量的值。",{"type":14,"tag":23,"props":758,"children":759},{},[760],{"type":20,"value":761},"有一点要记住的是，如果我们有一个非常庞大的值类型(如，庞大的struct类型)传递到栈里，当处理器循环复制它并循环占有栈空间时将会非常耗资源。栈没有无限的空间去使用，就像用水杯不断的接水早晚会溢出一样。Struct类型可以变得非常庞大，我们要小心并清醒的使用它。",{"type":14,"tag":23,"props":763,"children":764},{},[765],{"type":20,"value":766},"下面是一个比较大的struct结构类型：",{"type":14,"tag":317,"props":768,"children":771},{"code":769,"language":320,"meta":7,"className":770},"public struct MyStruct  \n{  \n    long a, b, c, d, e, f, g, h, i, j, k, l, m;  \n}  \n",[322],[772],{"type":14,"tag":268,"props":773,"children":774},{"__ignoreMap":7},[775],{"type":20,"value":769},{"type":14,"tag":23,"props":777,"children":778},{},[779],{"type":20,"value":780},"让我们看看执行下面代码Go()方法时再到DoSomething()方法会发生的情况：",{"type":14,"tag":317,"props":782,"children":785},{"code":783,"language":320,"meta":7,"className":784}," public void Go()  \n{  \n   MyStruct x = new MyStruct();  \n   DoSomething(x);  \n}  \npublic void DoSomething(MyStruct pValue)  \n{  \n   // DO SOMETHING HERE....  \n} \n",[322],[786],{"type":14,"tag":268,"props":787,"children":788},{"__ignoreMap":7},[789],{"type":20,"value":783},{"type":14,"tag":23,"props":791,"children":792},{},[793],{"type":14,"tag":63,"props":794,"children":796},{"alt":63,"src":795},"/images/2020-09-11-stack-heap/20131127054659921",[],{"type":14,"tag":23,"props":798,"children":799},{},[800],{"type":20,"value":801},"这可能会非常低效。想像一下如果我们传递MyStruct几千次，它会怎么样让程序死掉。",{"type":14,"tag":23,"props":803,"children":804},{},[805],{"type":20,"value":806},"那么，我们怎么才能回避这样的问题呢？那就是仅传递原始值类型的引用。",{"type":14,"tag":317,"props":808,"children":810},{"code":809},"public void Go()  \n{  \n   MyStruct x = new MyStruct();  \n   DoSomething(ref x);  \n}  \n public struct MyStruct  \n {  \n     long a, b, c, d, e, f, g, h, i, j, k, l, m;  \n }  \n public void DoSomething(ref MyStruct pValue)  \n {  \n          // DO SOMETHING HERE....  \n } \n",[811],{"type":14,"tag":268,"props":812,"children":813},{"__ignoreMap":7},[814],{"type":20,"value":809},{"type":14,"tag":23,"props":816,"children":817},{},[818],{"type":20,"value":819},"这样就能节省内存并提升内存使用效率",{"type":14,"tag":23,"props":821,"children":822},{},[823],{"type":14,"tag":63,"props":824,"children":826},{"alt":63,"src":825},"/images/2020-09-11-stack-heap/20131127055230375",[],{"type":14,"tag":23,"props":828,"children":829},{},[830],{"type":20,"value":831},"唯一需要注意的是传递引用时我们在访问原始变量x的值，任可对pValue的改变都会影响到x。",{"type":14,"tag":23,"props":833,"children":834},{},[835],{"type":20,"value":836},"下面的代码会将x改变成\"12345\"，因为pValue.a实际上指向原始x声明时所在的内存地址。",{"type":14,"tag":317,"props":838,"children":841},{"code":839,"language":320,"meta":7,"className":840},"public void Go()  \n{  \n   MyStruct x = new MyStruct();  \n   x.a = 5;  \n   DoSomething(ref x);  \n   Console.WriteLine(x.a.ToString());  \n}  \npublic void DoSomething(ref MyStruct pValue)  \n{  \n         pValue.a = 12345;  \n}  \n",[322],[842],{"type":14,"tag":268,"props":843,"children":844},{"__ignoreMap":7},[845],{"type":20,"value":839},{"type":14,"tag":15,"props":847,"children":849},{"id":848},"引用类型传递",[850],{"type":14,"tag":27,"props":851,"children":852},{},[853],{"type":20,"value":848},{"type":14,"tag":23,"props":855,"children":856},{},[857],{"type":20,"value":858},"传递引用类型跟上一节所示例中用引用的方式传递值类型相似。",{"type":14,"tag":23,"props":860,"children":861},{},[862],{"type":20,"value":863},"如果使用引用类型（原文可能笔误，写的是值类型）：",{"type":14,"tag":317,"props":865,"children":868},{"code":866,"language":320,"meta":7,"className":867},"public class MyInt  \n{  \n    public int MyValue;  \n}  \n",[322],[869],{"type":14,"tag":268,"props":870,"children":871},{"__ignoreMap":7},[872],{"type":20,"value":866},{"type":14,"tag":23,"props":874,"children":875},{},[876],{"type":20,"value":877},"然后调用Go()方法，MyInt会被放到堆里因为它是一个引用类型。",{"type":14,"tag":317,"props":879,"children":882},{"code":880,"language":320,"meta":7,"className":881},"public void Go()  \n{  \n   MyInt x = new MyInt();  \n}\n",[322],[883],{"type":14,"tag":268,"props":884,"children":885},{"__ignoreMap":7},[886],{"type":20,"value":880},{"type":14,"tag":23,"props":888,"children":889},{},[890],{"type":14,"tag":63,"props":891,"children":893},{"alt":63,"src":892},"/images/2020-09-11-stack-heap/20131127070913796",[],{"type":14,"tag":23,"props":895,"children":896},{},[897],{"type":20,"value":898},"如果执行下面代码中的Go()：",{"type":14,"tag":317,"props":900,"children":903},{"code":901,"language":320,"meta":7,"className":902},"public void Go()  \n{  \n   MyInt x = new MyInt();  \n   x.MyValue = 2;  \n   DoSomething(x);  \n   Console.WriteLine(x.MyValue.ToString());  \n}  \n public void DoSomething(MyInt pValue)  \n {  \n     pValue.MyValue = 12345;  \n } \n",[322],[904],{"type":14,"tag":268,"props":905,"children":906},{"__ignoreMap":7},[907],{"type":20,"value":901},{"type":14,"tag":23,"props":909,"children":910},{},[911],{"type":20,"value":912},"会发生这种情况：",{"type":14,"tag":23,"props":914,"children":915},{},[916],{"type":14,"tag":63,"props":917,"children":919},{"alt":63,"src":918},"/images/2020-09-11-stack-heap/20131127071131421",[],{"type":14,"tag":256,"props":921,"children":922},{},[923,928,933],{"type":14,"tag":107,"props":924,"children":925},{},[926],{"type":20,"value":927},"开始调用Go()，栈分配一块内存空间给x。",{"type":14,"tag":107,"props":929,"children":930},{},[931],{"type":20,"value":932},"执行行到DoSomething()，栈分配一块内在空间给pValue。",{"type":14,"tag":107,"props":934,"children":935},{},[936],{"type":20,"value":937},"x的值是堆中MyInt对应在栈里的内存地址，复制x给pValue。",{"type":14,"tag":23,"props":939,"children":940},{},[941],{"type":20,"value":942},"因此，我们用pValue改变MyInt的MyValue的值时，x最终也会获得这个改变的值\"12345“。",{"type":14,"tag":23,"props":944,"children":945},{},[946],{"type":20,"value":947},"如果我们用引用的方式传递一个引用类型变量呢？",{"type":14,"tag":15,"props":949,"children":951},{"id":950},"用引用的方式传递引用类型",[952],{"type":20,"value":950},{"type":14,"tag":23,"props":954,"children":955},{},[956],{"type":20,"value":957},"我们有一个类Thing, 类Animal和Vegetables衍生于Thing：",{"type":14,"tag":317,"props":959,"children":962},{"code":960,"language":320,"meta":7,"className":961},"public class Thing  \n{  \n}  \npublic class Animal:Thing  \n{  \n    public int Weight;  \n}  \npublic class Vegetable:Thing  \n{  \n    public int Length;  \n}  \n",[322],[963],{"type":14,"tag":268,"props":964,"children":965},{"__ignoreMap":7},[966],{"type":20,"value":960},{"type":14,"tag":23,"props":968,"children":969},{},[970],{"type":20,"value":971},"执行下面的Go()方法：",{"type":14,"tag":317,"props":973,"children":976},{"code":974,"language":320,"meta":7,"className":975},"public void Go()  \n{  \n   Thing x = new Animal();  \n   Switcharoo(ref x);  \n    Console.WriteLine(  \n      \"x is Animal    :   \"  \n      + (x is Animal).ToString());  \n    Console.WriteLine(  \n        \"x is Vegetable :   \"  \n        + (x is Vegetable).ToString());  \n}  \n public void Switcharoo(ref Thing pValue)  \n {  \n     pValue = new Vegetable();  \n }  \n",[322],[977],{"type":14,"tag":268,"props":978,"children":979},{"__ignoreMap":7},[980],{"type":20,"value":974},{"type":14,"tag":23,"props":982,"children":983},{},[984],{"type":20,"value":985},"x最终变成Vegetable。",{"type":14,"tag":23,"props":987,"children":988},{},[989],{"type":20,"value":990},"打印结果：",{"type":14,"tag":317,"props":992,"children":997},{"code":993,"language":994,"meta":7,"className":995},"x is Animal    :   False\nx is Vegetable :   True\n","yaml",[996],"language-yaml",[998],{"type":14,"tag":268,"props":999,"children":1000},{"__ignoreMap":7},[1001],{"type":20,"value":993},{"type":14,"tag":23,"props":1003,"children":1004},{},[1005],{"type":20,"value":1006},"让我们看看堆栈里到底发生了什么情况",{"type":14,"tag":23,"props":1008,"children":1009},{},[1010],{"type":14,"tag":63,"props":1011,"children":1013},{"alt":63,"src":1012},"/images/2020-09-11-stack-heap/20131127073852765",[],{"type":14,"tag":256,"props":1015,"children":1016},{},[1017,1022,1027,1032,1039,1044],{"type":14,"tag":107,"props":1018,"children":1019},{},[1020],{"type":20,"value":1021},"调用Go()方法，栈分配一块内存空间给x。",{"type":14,"tag":107,"props":1023,"children":1024},{},[1025],{"type":20,"value":1026},"堆分配一块内存空间给Animal。",{"type":14,"tag":107,"props":1028,"children":1029},{},[1030],{"type":20,"value":1031},"开始执行Switcharoo()方法，栈分配一块内存空间给pValue并指向x。",{"type":14,"tag":107,"props":1033,"children":1034},{},[1035],{"type":14,"tag":63,"props":1036,"children":1038},{"alt":63,"src":1037},"/images/2020-09-11-stack-heap/20131127074345953",[],{"type":14,"tag":107,"props":1040,"children":1041},{},[1042],{"type":20,"value":1043},"栈分配一块内存空间给Vegetable。",{"type":14,"tag":107,"props":1045,"children":1046},{},[1047],{"type":20,"value":1048},"pValue改变了x的值使其指向Vegetable的内在地址。",{"type":14,"tag":23,"props":1050,"children":1051},{},[1052],{"type":20,"value":1053},"如果我们不是用ref传递的，打印结果正相反。",{"type":14,"tag":15,"props":1055,"children":1057},{"id":1056},"复制不仅仅是复制",[1058],{"type":20,"value":1056},{"type":14,"tag":23,"props":1060,"children":1061},{},[1062],{"type":20,"value":1063},"为了更清晰的阐述这个问题，让我们测试一下在堆中存储值类型变量和引用类型变量时会产生的不同情况。",{"type":14,"tag":93,"props":1065,"children":1067},{"id":1066},"值类型测试",[1068],{"type":20,"value":1066},{"type":14,"tag":23,"props":1070,"children":1071},{},[1072],{"type":20,"value":1073},"首先，我们看一下值类型。下面是一个类和一个结构类型(值类型)，Dude类包含一个Name元素和两个Shoe元素。我们有一个CopyDude()方法用来复制生成新Dude。",{"type":14,"tag":317,"props":1075,"children":1078},{"code":1076,"language":320,"meta":7,"className":1077},"public struct Shoe{\n    public string Color;\n}\npublic class Dude\n{\n    public string Name;\n    public Shoe RightShoe;\n    public Shoe LeftShoe;\n    public Dude CopyDude()\n    {\n        Dude newPerson = new Dude();\n        newPerson.Name = Name;\n        newPerson.LeftShoe = LeftShoe;\n        newPerson.RightShoe = RightShoe;\n        return newPerson;\n    }\n    public override string ToString()\n    {\n        return (Name + \" : Dude!, I have a \" + RightShoe.Color + \" shoe on my right foot, and a \" + LeftShoe.Color + \" on my left foot.\");\n    }\n}\n",[322],[1079],{"type":14,"tag":268,"props":1080,"children":1081},{"__ignoreMap":7},[1082],{"type":20,"value":1076},{"type":14,"tag":23,"props":1084,"children":1085},{},[1086],{"type":20,"value":1087},"Dude类是一个复杂类型，因为值 类型结构Shoe是它的成员， 它们都将存储在堆中。",{"type":14,"tag":23,"props":1089,"children":1090},{},[1091],{"type":14,"tag":63,"props":1092,"children":1094},{"alt":63,"src":1093},"/images/2020-09-11-stack-heap/20131128023045765",[],{"type":14,"tag":23,"props":1096,"children":1097},{},[1098],{"type":20,"value":1099},"当我们执行下面的方法时：",{"type":14,"tag":317,"props":1101,"children":1104},{"code":1102,"language":320,"meta":7,"className":1103},"public static void Main()\n{\n    Class1 pgm = new Class1();\n    Dude Bill = new Dude();\n    Bill.Name = \"Bill\";\n    Bill.LeftShoe = new Shoe();\n    Bill.RightShoe = new Shoe();\n    Bill.LeftShoe.Color = Bill.RightShoe.Color = \"Blue\";\n    Dude Ted = Bill.CopyDude();\n    Ted.Name = \"Ted\";\n    Ted.LeftShoe.Color = Ted.RightShoe.Color = \"Red\";\n    Console.WriteLine(Bill.ToString());\n    Console.WriteLine(Ted.ToString());\n}\n",[322],[1105],{"type":14,"tag":268,"props":1106,"children":1107},{"__ignoreMap":7},[1108],{"type":20,"value":1102},{"type":14,"tag":23,"props":1110,"children":1111},{},[1112],{"type":20,"value":1113},"我们得到了期望的结果：",{"type":14,"tag":317,"props":1115,"children":1120},{"code":1116,"language":1117,"meta":7,"className":1118},"Bill : Dude!, I have a Blue shoe on my right foot, and a Blue on my left foot.\nTed : Dude!, I have a Red shoe on my right foot, and a Red on my left foot.\n","vbscript",[1119],"language-vbscript",[1121],{"type":14,"tag":268,"props":1122,"children":1123},{"__ignoreMap":7},[1124],{"type":20,"value":1116},{"type":14,"tag":23,"props":1126,"children":1127},{},[1128],{"type":20,"value":1129},"如果我们把Shoe换成引用类型呢？",{"type":14,"tag":93,"props":1131,"children":1133},{"id":1132},"引用类型测试",[1134],{"type":20,"value":1132},{"type":14,"tag":23,"props":1136,"children":1137},{},[1138],{"type":20,"value":1139},"当我们把Shoe改成引用类型时，问题就产生了。",{"type":14,"tag":317,"props":1141,"children":1144},{"code":1142,"language":320,"meta":7,"className":1143},"public class Shoe{\n    public string Color;\n}\n",[322],[1145],{"type":14,"tag":268,"props":1146,"children":1147},{"__ignoreMap":7},[1148],{"type":20,"value":1142},{"type":14,"tag":23,"props":1150,"children":1151},{},[1152],{"type":20,"value":1153},"执行同样上面的Main()方法，结果改变了，如下：",{"type":14,"tag":317,"props":1155,"children":1158},{"code":1156,"language":1117,"meta":7,"className":1157},"Bill : Dude!, I have a Red shoe on my right foot, and a Red on my left foot\nTed : Dude!, I have a Red shoe on my right foot, and a Red on my left foot\n",[1119],[1159],{"type":14,"tag":268,"props":1160,"children":1161},{"__ignoreMap":7},[1162],{"type":20,"value":1156},{"type":14,"tag":23,"props":1164,"children":1165},{},[1166],{"type":20,"value":1167},"这并不是我们期望的结果。很明显，出错了！看下面的图解：",{"type":14,"tag":23,"props":1169,"children":1170},{},[1171],{"type":14,"tag":63,"props":1172,"children":1174},{"alt":63,"src":1173},"/images/2020-09-11-stack-heap/20131128023756781",[],{"type":14,"tag":23,"props":1176,"children":1177},{},[1178],{"type":20,"value":1179},"因为现在Shoe是引用类型而不是值类型，当我们进行复制时仅是复制了指针，我们并没有复制指针真正对应的对象。这就需要我们做一些额外的工作使引用类型Shoe像值类型一样工作。",{"type":14,"tag":23,"props":1181,"children":1182},{},[1183],{"type":20,"value":1184},"很幸运，我们有一个接口可以帮我们实现：ICloneable。当Dude类实现它时，我们会声明一个Clone()方法用来产生新的Dude复制类。（译外话：复制类及其成员跟原始类不产生任何重叠，即我们所说的深复制)  看下面代码：\nICloneable consists of one method: Clone()",{"type":14,"tag":317,"props":1186,"children":1189},{"code":1187,"language":320,"meta":7,"className":1188},"public object Clone()\n{\n}\n",[322],[1190],{"type":14,"tag":268,"props":1191,"children":1192},{"__ignoreMap":7},[1193],{"type":20,"value":1187},{"type":14,"tag":23,"props":1195,"children":1196},{},[1197],{"type":20,"value":1198},"Here's how we'll implement it in the Shoe class:",{"type":14,"tag":317,"props":1200,"children":1202},{"code":1201},"public class Shoe : ICloneable\n{\n    public string Color;\n    #region ICloneable Members\n    public object Clone()\n    {\n        Shoe newShoe = new Shoe();\n        newShoe.Color = Color.Clone() as string;\n        return newShoe;\n    }\n    #endregion\n}\n",[1203],{"type":14,"tag":268,"props":1204,"children":1205},{"__ignoreMap":7},[1206],{"type":20,"value":1201},{"type":14,"tag":23,"props":1208,"children":1209},{},[1210],{"type":20,"value":1211},"在Clone()方法里，我们创建了一个新的Shoe，克隆所有引用类型变量，复制所有值类型变量，最后返回新的对象Shoe。有些既有类已经实现了ICloneable，我们直接使用即可，如String。因此，我们直接使用Color.Clone()。因为Clone()返回object对象，我们需要进行一下类型转换。",{"type":14,"tag":23,"props":1213,"children":1214},{},[1215],{"type":20,"value":1216},"下一步，我们在CopyDude()方法里，用克隆Clone()代替复制：",{"type":14,"tag":317,"props":1218,"children":1221},{"code":1219,"language":320,"meta":7,"className":1220},"public Dude CopyDude()\n{\n    Dude newPerson = new Dude();\n    newPerson.Name = Name;\n    newPerson.LeftShoe = LeftShoe.Clone() as Shoe;\n    newPerson.RightShoe = RightShoe.Clone() as Shoe;\n    return newPerson;\n}\n",[322],[1222],{"type":14,"tag":268,"props":1223,"children":1224},{"__ignoreMap":7},[1225],{"type":20,"value":1219},{"type":14,"tag":23,"props":1227,"children":1228},{},[1229],{"type":20,"value":1230},"再次执行主方法Main()：",{"type":14,"tag":317,"props":1232,"children":1234},{"code":1102,"language":320,"meta":7,"className":1233},[322],[1235],{"type":14,"tag":268,"props":1236,"children":1237},{"__ignoreMap":7},[1238],{"type":20,"value":1102},{"type":14,"tag":23,"props":1240,"children":1241},{},[1242],{"type":20,"value":1113},{"type":14,"tag":317,"props":1244,"children":1247},{"code":1245,"language":1117,"meta":7,"className":1246},"Bill : Dude!, I have a Blue shoe on my right foot, and a Blue on my left foot\nTed : Dude!, I have a Red shoe on my right foot, and a Red on my left foot\n",[1119],[1248],{"type":14,"tag":268,"props":1249,"children":1250},{"__ignoreMap":7},[1251],{"type":20,"value":1245},{"type":14,"tag":23,"props":1253,"children":1254},{},[1255],{"type":20,"value":1256},"下面是图解：",{"type":14,"tag":23,"props":1258,"children":1259},{},[1260],{"type":14,"tag":63,"props":1261,"children":1263},{"alt":63,"src":1262},"/images/2020-09-11-stack-heap/20131128030404656",[],{"type":14,"tag":93,"props":1265,"children":1267},{"id":1266},"整理我们的代码",[1268],{"type":20,"value":1266},{"type":14,"tag":23,"props":1270,"children":1271},{},[1272],{"type":20,"value":1273},"在实践中，我们是希望克隆引用类型并复制值类型的。这会让你回避很多不易察觉的错误，就像上面演示的一样。这种错误有时不易被调试出来，会让你很头疼。",{"type":14,"tag":23,"props":1275,"children":1276},{},[1277],{"type":20,"value":1278},"因此，为了减轻头疼，让我们更进一步清理上面的代码。我们让Dude类实现IConeable代替使用CopyDude()方法：",{"type":14,"tag":317,"props":1280,"children":1283},{"code":1281,"language":320,"meta":7,"className":1282},"public class Dude: ICloneable\n{\n    public string Name;\n    public Shoe RightShoe;\n    public Shoe LeftShoe;\n    public override string ToString()\n    {\n        return (Name + \" : Dude!, I have a \" + RightShoe.Color + \" shoe on my right foot, and a \" + LeftShoe.Color + \" on my left foot.\");\n    }\n    #region ICloneable Members\n    public object Clone()\n    {\n        Dude newPerson = new Dude();\n        newPerson.Name = Name.Clone() as string;\n        newPerson.LeftShoe = LeftShoe.Clone() as Shoe;\n        newPerson.RightShoe = RightShoe.Clone() as Shoe;\n        return newPerson;\n    }\n    #endregion\n}\n",[322],[1284],{"type":14,"tag":268,"props":1285,"children":1286},{"__ignoreMap":7},[1287],{"type":20,"value":1281},{"type":14,"tag":23,"props":1289,"children":1290},{},[1291],{"type":20,"value":1292},"在主方法Main()使用Dude.Clone()：",{"type":14,"tag":317,"props":1294,"children":1297},{"code":1295,"language":320,"meta":7,"className":1296},"public static void Main()\n{\n    Class1 pgm = new Class1();\n    Dude Bill = new Dude();\n    Bill.Name = \"Bill\";\n    Bill.LeftShoe = new Shoe();\n    Bill.RightShoe = new Shoe();\n    Bill.LeftShoe.Color = Bill.RightShoe.Color = \"Blue\";\n    Dude Ted = Bill.Clone() as Dude;\n    Ted.Name = \"Ted\";\n    Ted.LeftShoe.Color = Ted.RightShoe.Color = \"Red\";\n    Console.WriteLine(Bill.ToString());\n    Console.WriteLine(Ted.ToString());\n}\n",[322],[1298],{"type":14,"tag":268,"props":1299,"children":1300},{"__ignoreMap":7},[1301],{"type":20,"value":1295},{"type":14,"tag":23,"props":1303,"children":1304},{},[1305],{"type":20,"value":1306},"最后得到期望的结果：",{"type":14,"tag":317,"props":1308,"children":1310},{"code":1116,"language":1117,"meta":7,"className":1309},[1119],[1311],{"type":14,"tag":268,"props":1312,"children":1313},{"__ignoreMap":7},[1314],{"type":20,"value":1116},{"type":14,"tag":93,"props":1316,"children":1318},{"id":1317},"特殊引用类型string",[1319],{"type":20,"value":1320},"特殊引用类型String",{"type":14,"tag":23,"props":1322,"children":1323},{},[1324,1326,1331],{"type":20,"value":1325},"在C#中有趣的是，当System.String 使用操作符“=”时，实际上是进行了克隆(深复制)。你不必担心你只是在操作一个指针，它会在内存中创建一个新的对象。但是，你一定要注意内存的占用问题(",{"type":14,"tag":27,"props":1327,"children":1328},{},[1329],{"type":20,"value":1330},"译外话：比如为什么在一定情况下我们使用StringBuilder代替String+String+String+String...前者速度稍慢初始化耗多点内存但在大字符串操作上节省内存，后者速度稍快初始化简单但在大字符串操作上耗内存",{"type":20,"value":1332},")。如果我们回头去看上面的图解中，你会发现Stirng类型在图中并不是一个针指向另一个内存对象，而是为了尽可能的简单，把它当成值类型来演示了。",{"type":14,"tag":23,"props":1334,"children":1335},{},[1336],{"type":14,"tag":27,"props":1337,"children":1338},{},[1339],{"type":20,"value":1340},"绘图Graphing",{"type":14,"tag":23,"props":1342,"children":1343},{},[1344],{"type":20,"value":1345},"让我们站在GC的角度研究一下。如果我们负责“扔垃圾”，我们需要制定一个有效的“扔垃圾”计划。显然，我们需要判断哪些是垃圾，哪些不是。",{"type":14,"tag":23,"props":1347,"children":1348},{},[1349,1351,1356],{"type":20,"value":1350},"为了决定哪些需要保留，我们假设任何没有正在被使用的东西都是垃圾（如角落里堆积的破旧纸张，阁楼里一箱箱没有用的过时产品,柜子里不用的衣服）。想像一下我们跟两个好朋友生活在一起：JIT 和CLR。",{"type":14,"tag":27,"props":1352,"children":1353},{},[1354],{"type":20,"value":1355},"JIT和CLR",{"type":20,"value":1357},"不断的跟踪他们正在使用的东西，并给我们一个他们需要保留的东西列表。这个初始列表我们叫它“根(root)”列表。因为我们用它做起点。我们将保持一个主列表去绘制一张图，图中分布着所有我们在房子中需要保留东西。任何与主列表中有关联的东西也被画入图中。如，我们保留电视就不要扔掉电视遥控器，所以电视遥控器也会被画入图中。我们保留电脑就不能扔掉显示器键盘鼠标，同样也把它们画入图中。",{"type":14,"tag":23,"props":1359,"children":1360},{},[1361,1363],{"type":20,"value":1362},"这就是GC怎么决定去保留对象的。",{"type":14,"tag":27,"props":1364,"children":1365},{},[1366],{"type":20,"value":1367},"GC会保留从JIT和CLR那收到的一个根(root)对象引用列表，然后递归搜索对象引用并决定什么需要保留。",{"type":14,"tag":23,"props":1369,"children":1370},{},[1371],{"type":20,"value":1372},"这个根的构成如下：",{"type":14,"tag":103,"props":1374,"children":1375},{},[1376,1381,1386],{"type":14,"tag":107,"props":1377,"children":1378},{},[1379],{"type":20,"value":1380},"全局/静态 指针。通过以静态变量的方式保持对象的引用，来确保对象不会被GC回收。",{"type":14,"tag":107,"props":1382,"children":1383},{},[1384],{"type":20,"value":1385},"栈里的指针。为了程序的执行，我们不想扔掉那些程序线程始终需要的对象。",{"type":14,"tag":107,"props":1387,"children":1388},{},[1389],{"type":20,"value":1390},"CPU寄存器指针。托管堆里任何被CPU内存地址指向的对象都需要被保留。",{"type":14,"tag":23,"props":1392,"children":1393},{},[1394,1399],{"type":14,"tag":63,"props":1395,"children":1398},{"alt":1396,"src":1397},"在这里插入图片描述","/images/2020-09-11-stack-heap/20190919173037464.png",[],{"type":20,"value":1400},"\n在上面的图中，托管堆中的对象1，5被根Roots引用，3被1引用。对象1，5是被直接引用，3是通过递归查询找到。如果关联到我们之前的假设，对象1是我们的电视，对象3则是电视遥控器。当所有对象画完后，我们开始进行下一阶段：垃圾清理。",{"type":14,"tag":23,"props":1402,"children":1403},{},[1404],{"type":14,"tag":27,"props":1405,"children":1406},{},[1407],{"type":20,"value":1408},"GC垃圾清理Compacting",{"type":14,"tag":23,"props":1410,"children":1411},{},[1412,1414,1418,1420,1424,1426,1430,1434],{"type":20,"value":1413},"现在我们有了一张需要保留对象的关系图，接下来进行GC的清理。\n",{"type":14,"tag":63,"props":1415,"children":1417},{"alt":1396,"src":1416},"/images/2020-09-11-stack-heap/20190919173106186.png",[],{"type":20,"value":1419},"\n图中对象2和4被认定为垃圾将被清理。清理对象2，复制（memcpy ）对象3到2的位置。\n",{"type":14,"tag":63,"props":1421,"children":1423},{"alt":1396,"src":1422},"/images/2020-09-11-stack-heap/20190919173121251.png",[],{"type":20,"value":1425},"\n由于对象3的地址变了，GC需要修复指针（红色箭头）。然后清理对象4，复制（memcpy ）对象5到原来3的位置（译外话：GC原则：堆中对象之间是没有间隙的，以后会有文章专门介绍GC原理）。\n",{"type":14,"tag":63,"props":1427,"children":1429},{"alt":1396,"src":1428},"/images/2020-09-11-stack-heap/20190919173159935.png",[],{"type":14,"tag":63,"props":1431,"children":1433},{"alt":1396,"src":1432},"/images/2020-09-11-stack-heap/20190919173215230.png",[],{"type":20,"value":1435},"\n最后清理完毕，新对象将被放到对象5的上面(译外话：GC对一直管理一个指针指向新对象将被放置的地址，如黄色箭头，以后会有文章专门介绍)。",{"type":14,"tag":23,"props":1437,"children":1438},{},[1439],{"type":20,"value":1440},"了解GC原理可以帮助我们理解GC清理(复制memcpy ，指针修复等)是怎么消耗掉很多资源的。很明显，减少托管堆里对象的移动（复制memcpy ）可以提高GC清理的效率。",{"type":14,"tag":23,"props":1442,"children":1443},{},[1444],{"type":14,"tag":27,"props":1445,"children":1446},{},[1447],{"type":20,"value":1448},"托管堆之外的终止化队列Finalization Queue和终止化-可达队列Freachable Queue",{"type":14,"tag":23,"props":1450,"children":1451},{},[1452,1454,1458],{"type":20,"value":1453},"有些情况下，GC需要执行特定代码去清理非托管资源，如文件操作，数据库连接，网络连接等。一种可行性方案是使用析构函数（终结器）：\n",{"type":14,"tag":63,"props":1455,"children":1457},{"alt":1396,"src":1456},"/images/2020-09-11-stack-heap/20190919173419800.png",[],{"type":20,"value":1459},"\n译外话：析构函数会被内部转换成终结器override Finializer()",{"type":14,"tag":23,"props":1461,"children":1462},{},[1463],{"type":20,"value":1464},"有终结器的对象在创建时，同时在Finalization Queue里创建指向它们的指针（更正原文说的把对象放到Finalization Queue里）：",{"type":14,"tag":23,"props":1466,"children":1467},{},[1468,1472,1474,1478],{"type":14,"tag":63,"props":1469,"children":1471},{"alt":1396,"src":1470},"/images/2020-09-11-stack-heap/20190919173504552.png",[],{"type":20,"value":1473},"\n上图对象1,4,5实现了终结器，因此在Finalization Queue里创建指向它们的指针。让我们看一下，当对象2和4没有被程序引用要被GC清理时会发生什么情况。\n对象2会被以常规模式清理掉(见文章开始部分)。GC发现对象4有终结器，则会把Finalization Queue里指向它的指针移到Freachable Queue中，如下图：\n",{"type":14,"tag":63,"props":1475,"children":1477},{"alt":1396,"src":1476},"/images/2020-09-11-stack-heap/20190919173647141.png",[],{"type":20,"value":1479},"\n但是对象4并不被清理掉。有一个专门处理Freachable Queue的线程，当它处理完对象4在Freachable Queue里的指针后，会把它移除。",{"type":14,"tag":23,"props":1481,"children":1482},{},[1483,1487],{"type":14,"tag":63,"props":1484,"children":1486},{"alt":1396,"src":1485},"/images/2020-09-11-stack-heap/20190919173729593.png",[],{"type":20,"value":1488},"\n这时对象4可以被清理了。当下次GC清理时会把它移除掉。换句话说，至少执行两次GC清理才能把对象4清理掉，显然会影响程序性能。",{"type":14,"tag":23,"props":1490,"children":1491},{},[1492],{"type":20,"value":1493},"创建终结器，意味着创建了更多的工作给GC，也就会消耗更多资源影响程序性能。因此，当你使用终结器时一定要确保你确实需要使用它。\n更好的方法是使用IDisposable接口。",{"type":14,"tag":23,"props":1495,"children":1496},{},[1497,1501,1503,1507],{"type":14,"tag":63,"props":1498,"children":1500},{"alt":1396,"src":1499},"/images/2020-09-11-stack-heap/20190919173836793.png",[],{"type":20,"value":1502},"\n实现IDisposable接口的对象可以使用using关键字：\n",{"type":14,"tag":63,"props":1504,"children":1506},{"alt":1396,"src":1505},"/images/2020-09-11-stack-heap/20190919173851233.png",[],{"type":20,"value":1508},"\n变量rec的作用域是大括号内，大括号外不可访问。",{"type":14,"tag":23,"props":1510,"children":1511},{},[1512],{"type":14,"tag":27,"props":1513,"children":1514},{},[1515],{"type":20,"value":1516},"静态变量",{"type":14,"tag":23,"props":1518,"children":1519},{},[1520],{"type":14,"tag":63,"props":1521,"children":1523},{"alt":1396,"src":1522},"/images/2020-09-11-stack-heap/20190919174039786.png",[],{"type":14,"tag":23,"props":1525,"children":1526},{},[1527],{"type":20,"value":1528},"如果你初始化了TryoutRunners，那么它将永远不会被GC清理，因为有静态指针一直指向初始化的对象。一旦调用了Runner里GetStats()方法，因为GetStats()里面没有文件关闭操作，它将永远被打开也不会被GC清理。我们可以看到程序的崩溃即将来临。",{"type":14,"tag":1530,"props":1531,"children":1533},"h1",{"id":1532},"参考",[1534],{"type":20,"value":1532},{"type":14,"tag":103,"props":1536,"children":1537},{},[1538,1550,1560,1570,1580],{"type":14,"tag":107,"props":1539,"children":1540},{},[1541],{"type":14,"tag":1542,"props":1543,"children":1547},"a",{"href":1544,"rel":1545},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i/",[1546],"nofollow",[1548],{"type":20,"value":1549},"C# Heap(ing) Vs Stack(ing) In .NET - Part One (c-sharpcorner.com)",{"type":14,"tag":107,"props":1551,"children":1552},{},[1553],{"type":14,"tag":1542,"props":1554,"children":1557},{"href":1555,"rel":1556},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-ii/",[1546],[1558],{"type":20,"value":1559},"C# Heap(ing) Vs Stack(ing) In .NET - Part Two (c-sharpcorner.com)",{"type":14,"tag":107,"props":1561,"children":1562},{},[1563],{"type":14,"tag":1542,"props":1564,"children":1567},{"href":1565,"rel":1566},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-iii/",[1546],[1568],{"type":20,"value":1569},"C# Heap(ing) Vs Stack(ing) In .NET - Part Three (c-sharpcorner.com)",{"type":14,"tag":107,"props":1571,"children":1572},{},[1573],{"type":14,"tag":1542,"props":1574,"children":1577},{"href":1575,"rel":1576},"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-iv/",[1546],[1578],{"type":20,"value":1579},"C# Heap(ing) Vs Stack(ing) In .NET - Part Four (c-sharpcorner.com)",{"type":14,"tag":107,"props":1581,"children":1582},{},[1583],{"type":14,"tag":1542,"props":1584,"children":1587},{"href":1585,"rel":1586},"https://www.bilibili.com/video/BV1Tt4y1X7f6",[1546],[1588],{"type":20,"value":1589},"Unite Now - （中文字幕）性能优化技巧（上）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili",{"title":7,"searchDepth":1591,"depth":1591,"links":1592},2,[1593,1594,1600,1601,1602,1603,1604,1607,1608,1609,1610,1611],{"id":17,"depth":1591,"text":21},{"id":84,"depth":1591,"text":84,"children":1595},[1596,1598,1599],{"id":95,"depth":1597,"text":101},3,{"id":189,"depth":1597,"text":195},{"id":231,"depth":1597,"text":237},{"id":252,"depth":1591,"text":252},{"id":298,"depth":1591,"text":298},{"id":400,"depth":1591,"text":403},{"id":418,"depth":1591,"text":418},{"id":496,"depth":1591,"text":496,"children":1605},[1606],{"id":511,"depth":1597,"text":418},{"id":627,"depth":1591,"text":630},{"id":691,"depth":1591,"text":691},{"id":848,"depth":1591,"text":848},{"id":950,"depth":1591,"text":950},{"id":1056,"depth":1591,"text":1056,"children":1612},[1613,1614,1615,1616],{"id":1066,"depth":1597,"text":1066},{"id":1132,"depth":1597,"text":1132},{"id":1266,"depth":1597,"text":1266},{"id":1317,"depth":1597,"text":1320},"markdown","content:unity:2020-09-11-stack-heap.md","content","unity/2020-09-11-stack-heap.md","md","2020-09-11",[1624,1634,1761,1810,1862,1875,1987],{"title":1625,"_path":1626,"children":1627},"Art","/art",[1628,1631],{"title":1629,"_path":1630},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":1632,"_path":1633},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":1635,"_path":1636,"children":1637},"Dotnet","/dotnet",[1638,1641,1644,1647,1650,1653,1656,1659,1662,1665,1668,1671,1674,1677,1680,1683,1686,1689,1692,1695,1698,1701,1704,1707,1710,1713,1716,1719,1722,1725,1728,1731,1734,1737,1740,1743,1746,1749,1752,1755,1758],{"title":1639,"_path":1640},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":1642,"_path":1643},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":1645,"_path":1646},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":1648,"_path":1649},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":1651,"_path":1652},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":1654,"_path":1655},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":1657,"_path":1658},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":1660,"_path":1661},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":1663,"_path":1664},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":1666,"_path":1667},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":1669,"_path":1670},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":1672,"_path":1673},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":1675,"_path":1676},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":1678,"_path":1679},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":1681,"_path":1682},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":1684,"_path":1685},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":1687,"_path":1688},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":1690,"_path":1691},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":1693,"_path":1694},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":1696,"_path":1697},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":1699,"_path":1700},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":1702,"_path":1703},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":1705,"_path":1706},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":1708,"_path":1709},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":1711,"_path":1712},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":1714,"_path":1715},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":1717,"_path":1718},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":1720,"_path":1721},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":1723,"_path":1724},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":1726,"_path":1727},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":1729,"_path":1730},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":1732,"_path":1733},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":1735,"_path":1736},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":1738,"_path":1739},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":1741,"_path":1742},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":1744,"_path":1745},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":1747,"_path":1748},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":1750,"_path":1751},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":1753,"_path":1754},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":1756,"_path":1757},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":1759,"_path":1760},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":1762,"_path":1763,"children":1764},"Game","/game",[1765,1768,1771,1774,1777,1780,1783,1786,1789,1792,1795,1798,1801,1804,1807],{"title":1766,"_path":1767},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":1769,"_path":1770},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":1772,"_path":1773},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":1775,"_path":1776},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":1778,"_path":1779},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":1781,"_path":1782},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":1784,"_path":1785},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":1787,"_path":1788},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":1790,"_path":1791},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":1793,"_path":1794},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":1796,"_path":1797},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":1799,"_path":1800},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":1802,"_path":1803},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":1805,"_path":1806},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":1808,"_path":1809},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":1811,"_path":1812,"children":1813},"Gyj","/gyj",[1814,1817,1820,1823,1826,1829,1832,1835,1838,1841,1844,1847,1850,1853,1856,1859],{"title":1815,"_path":1816},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":1818,"_path":1819},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":1821,"_path":1822},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":1824,"_path":1825},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1827,"_path":1828},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1830,"_path":1831},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1833,"_path":1834},"玩法","/gyj/2022-08-22-wanfa",{"title":1836,"_path":1837},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1839,"_path":1840},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1842,"_path":1843},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1845,"_path":1846},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1848,"_path":1849},"门派内容相关","/gyj/2022-11-17-sect",{"title":1851,"_path":1852},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1854,"_path":1855},"种植","/gyj/2022-12-01-zhongzhi",{"title":1857,"_path":1858},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1860,"_path":1861},"跑商","/gyj/2023-11-01-paoshang",{"title":1863,"_path":1864,"children":1865},"Js","/js",[1866,1869,1872],{"title":1867,"_path":1868},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1870,"_path":1871},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1873,"_path":1874},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1876,"_path":1877,"children":1878},"Tool","/tool",[1879,1882,1885,1888,1891,1894,1897,1900,1903,1906,1909,1912,1915,1918,1921,1924,1927,1930,1933,1936,1939,1942,1945,1948,1951,1954,1957,1960,1963,1966,1969,1972,1975,1978,1981,1984],{"title":1880,"_path":1881},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1883,"_path":1884},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1886,"_path":1887},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1889,"_path":1890},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1892,"_path":1893},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1895,"_path":1896},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1898,"_path":1899},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1901,"_path":1902},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1904,"_path":1905},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1907,"_path":1908},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1910,"_path":1911},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1913,"_path":1914},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1916,"_path":1917},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1919,"_path":1920},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1922,"_path":1923},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1925,"_path":1926},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1928,"_path":1929},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1931,"_path":1932},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1934,"_path":1935},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1937,"_path":1938},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1940,"_path":1941},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1943,"_path":1944},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1946,"_path":1947},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1949,"_path":1950},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1952,"_path":1953},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1955,"_path":1956},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1958,"_path":1959},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1961,"_path":1962},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1964,"_path":1965},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1967,"_path":1968},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1970,"_path":1971},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1973,"_path":1974},"rider的使用","/tool/2022-08-02-rider-use",{"title":1976,"_path":1977},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1979,"_path":1980},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1982,"_path":1983},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1985,"_path":1986},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1988,"_path":1989,"children":1990},"Unity","/unity",[1991,1994,1997,2000,2003,2006,2009,2012,2015,2018,2021,2024,2027,2030,2033,2036,2039,2042,2045,2048,2051,2054,2057,2060,2063,2066,2069,2072,2075,2078,2081,2084,2087,2090,2093,2096,2097,2100,2103,2106,2109,2112,2115,2118,2121,2124,2127,2130,2133,2136,2139,2142,2145,2148,2151,2154,2157,2160,2163,2166,2169,2172,2175,2178,2181,2184,2187,2190,2193,2196,2199,2202],{"title":1992,"_path":1993},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1995,"_path":1996},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1998,"_path":1999},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":2001,"_path":2002},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":2004,"_path":2005},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":2007,"_path":2008},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":2010,"_path":2011},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":2013,"_path":2014},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":2016,"_path":2017},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":2019,"_path":2020},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":2022,"_path":2023},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":2025,"_path":2026},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":2028,"_path":2029},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":2031,"_path":2032},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":2034,"_path":2035},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":2037,"_path":2038},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":2040,"_path":2041},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":2043,"_path":2044},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":2046,"_path":2047},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":2049,"_path":2050},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":2052,"_path":2053},"技能系统","/unity/2020-02-15-skill-system",{"title":2055,"_path":2056},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":2058,"_path":2059},"角色状态设计","/unity/2020-02-17-character-states",{"title":2061,"_path":2062},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":2064,"_path":2065},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":2067,"_path":2068},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":2070,"_path":2071},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":2073,"_path":2074},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":2076,"_path":2077},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":2079,"_path":2080},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":2082,"_path":2083},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":2085,"_path":2086},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":2088,"_path":2089},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":2091,"_path":2092},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":2094,"_path":2095},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":8,"_path":4},{"title":2098,"_path":2099},"unity的addressables","/unity/2020-09-12-addressables",{"title":2101,"_path":2102},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":2104,"_path":2105},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":2107,"_path":2108},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":2110,"_path":2111},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":2113,"_path":2114},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":2116,"_path":2117},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":2119,"_path":2120},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":2122,"_path":2123},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":2125,"_path":2126},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":2128,"_path":2129},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":2131,"_path":2132},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":2134,"_path":2135},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":2137,"_path":2138},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":2140,"_path":2141},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":2143,"_path":2144},"简单保存工具","/unity/2020-11-13-simple-save",{"title":2146,"_path":2147},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":2149,"_path":2150},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":2152,"_path":2153},"ability","/unity/2020-11-16-dotssample",{"title":2155,"_path":2156},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":2158,"_path":2159},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":2161,"_path":2162},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":2164,"_path":2165},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":2167,"_path":2168},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":2170,"_path":2171},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":2173,"_path":2174},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":2176,"_path":2177},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":2179,"_path":2180},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":2182,"_path":2183},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":2185,"_path":2186},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":2188,"_path":2189},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":2191,"_path":2192},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":2194,"_path":2195},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":2197,"_path":2198},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":2200,"_path":2201},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":2203,"_path":2204},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039674]