[{"data":1,"prerenderedAt":1753},["Reactive",2],{"content-query-mTueQNzMXm":3,"content-navigation-8C37fagqQL":1171},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":1165,"_id":1166,"_source":1167,"_file":1168,"_extension":1169,"date":1170},"/unity/2019-09-02-ilruntime","unity",false,"","ilruntime的研究","C#代码在编写后，是需要执行编译的，才能起效，这样如果在手机端，没有对应的编译环境，那么对应的c#代码就无法实现热更。ILRuntime实现的基础，也是基于AssetBundle的资源热更新方式，将需要热更新的c#代码打包成DLL，在每次完成资源打包后，对应的DLL会被作为资源热更新出去。这样就规避了编译相关的环节，实现了热更。",{"type":11,"children":12,"toc":1154},"root",[13,20,27,32,45,54,59,71,79,156,161,166,189,196,201,207,223,231,239,244,250,258,264,269,274,281,286,293,298,305,310,315,322,327,334,339,346,351,357,362,367,372,377,382,389,394,400,405,412,420,427,432,439,444,451,456,463,468,475,480,487,492,499,504,510,515,520,528,533,541,546,554,559,564,571,576,583,590,595,602,607,614,619,626,631,639,644,651,656,663,675,682,687,694,699,704,711,716,724,729,736,742,747,754,759,766,771,778,783,788,795,800,805,815,821,826,833,838,843,850,855,862,867,874,879,886,891,896,902,915,931,936,944,957,965,986,991,1004,1012,1017,1022,1092,1097],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":21,"props":22,"children":24},"h1",{"id":23},"appdomain",[25],{"type":19,"value":26},"AppDomain",{"type":14,"tag":15,"props":28,"children":29},{},[30],{"type":19,"value":31},"我们运行一个.NET应用程序或者一个运行库宿主时，OS会首先建立一个进程，然后会在进程中加载CLR(这个加载一般是通过调用_CorExeMain或者_CorBindToRuntimeEx方法来实现)，在加载CLR时会创建一个默认的AppDomain，它是CLR的运行单元，程序的Main方法就是在这里执行，这个默认的AppDomain是唯一且不能被卸载的，当该进程消灭时，默认AppDomain才会随之消失。",{"type":14,"tag":15,"props":33,"children":34},{},[35,37,43],{"type":19,"value":36},"一个进程中可以有多个AppDomain，且它们直接是相互隔离的，我们的Assembly是不能单独执行的，它必须被加载到某个AppDomain中，要想",{"type":14,"tag":38,"props":39,"children":40},"strong",{},[41],{"type":19,"value":42},"卸载一个Assembly",{"type":19,"value":44},"就只能卸载其AppDomain。",{"type":14,"tag":46,"props":47,"children":48},"blockquote",{},[49],{"type":14,"tag":15,"props":50,"children":51},{},[52],{"type":19,"value":53},"无法删除WindowsApplication1: 访问被拒绝\n请确定磁盘末被写保护\n而且文件末被使用",{"type":14,"tag":15,"props":55,"children":56},{},[57],{"type":19,"value":58},"除非你关掉作业管理服务器，然后再操作，显然这样做是很不合理的。",{"type":14,"tag":15,"props":60,"children":61},{},[62,64,69],{"type":19,"value":63},"并且默认AppDomain是不能被卸载的，那么我们该怎么办呢，我想到的方法是动态的加载Assembly，新建一个AppDomain，让Assembly加载到这个新AppDomain中然后执行，当执行完后卸载这个新的AppDomain即可。核心思想就是：",{"type":14,"tag":38,"props":65,"children":66},{},[67],{"type":19,"value":68},"如果程序集被加载到默认应用程序域中，则当进程运行时将无法从内存中卸载该程序集。但是，如果打开另一个应用程序域来加载和执行程序集，则卸载该应用程序域时也会同时卸载程序集。使用此技术最小化长时间运行的进程的工作集",{"type":19,"value":70},"。",{"type":14,"tag":15,"props":72,"children":73},{},[74],{"type":14,"tag":75,"props":76,"children":78},"img",{"alt":75,"src":77},"/images/2019-09-02-ilruntime/656520-20180525160300209-2123986426.png",[],{"type":14,"tag":80,"props":81,"children":82},"ol",{},[83,89,94,99,104],{"type":14,"tag":84,"props":85,"children":86},"li",{},[87],{"type":19,"value":88},"AppDomain vs 进程\nAppDomain被创建在进程中，一个进程内可以有多个AppDomain。一个AppDomain只能属于一个进程。",{"type":14,"tag":84,"props":90,"children":91},{},[92],{"type":19,"value":93},"AppDomain vs 线程\n其实两者本来没什么好对比的。AppDomain是个静态概念，只是限定了对象的边界；线程是个动态概念，它可以运行在不同的AppDomain。一个AppDomain内可以创建多个线程，但是不能限定这些线程只能在本AppDomain内执行代码。CLR中的System.Threading.Thread对象其实是个soft thread，它并不能被操作系统识别；操作系统能识别的是hard thread。一个soft thread只属于一个AppDomain，穿越AppDomain的是hard thread。当hard thread访问到某个AppDomain时,一个AppDomain就会为之产生一个soft thread。\nhard thread有thread local storage(TLS)，这个存储区被CLR用来存储这个hard thread当前对应AppDomain引用以及softthread引用。当一个hard thread穿越到另外一个AppDomain时，TLS中的这些引用也会改变。\n当然这个说法很可能是和CLR的实现相关的。",{"type":14,"tag":84,"props":95,"children":96},{},[97],{"type":19,"value":98},"AppDomain vs Assembly\nAssembly是.Net程序的基本部署单元，它可以为CLR提供用于识别类型的元数据等等。Assembly不能单独执行，它必须被加载到AppDomain中，然后由AppDomain创建程序集中的对象。一个Assembly可以被多个AppDomain加载，一个AppDomain可以加载多个Assembly。每个AppDomain引用到某个类型的时候需要把相应的assembly在各自的AppDomain中初始化。因此，每个AppDomain会单独保持一个类的静态变量。",{"type":14,"tag":84,"props":100,"children":101},{},[102],{"type":19,"value":103},"AppDomain vs 对象\n任何对象只能属于一个AppDomain。AppDomain用来隔离对象，不同AppDomain之间的对象必须通过Proxy(reference type)或者Clone(value type)通信。引用类型需要继承System.MarshalByRefObject才能被Marshal/UnMarshal(Proxy)。值类型需要设置Serializable属性才能被Marshal/UnMarshal(Clone)。",{"type":14,"tag":84,"props":105,"children":106},{},[107,109,119,123,127,130,132],{"type":19,"value":108},"AppDomain vs Assembly Code\nAppDomain和程序集的源代码是什么关系呢？每个程序集的代码会分别装载到各个AppDomain中？\n首先我们要把程序集分3类\n1.mscorlib，这是每个.net程序都要引用到的程序集。\n2.GAC，这个是强命名的公用程序集，可以被所有的.net程序引用。\n3.Assembly not in GAC，这是普通的assembly，可以不是强命名，不放到GAC中。\n启动CLR，进入entry point时可以设置LoaderOptimization属性：",{"type":14,"tag":110,"props":111,"children":113},"pre",{"code":112},"[LoaderOptimization(LoaderOptimization.MultiDomain]\nstatic void Main()\n{...}\n",[114],{"type":14,"tag":115,"props":116,"children":117},"code",{"__ignoreMap":7},[118],{"type":19,"value":112},{"type":14,"tag":120,"props":121,"children":122},"br",{},[],{"type":14,"tag":75,"props":124,"children":126},{"alt":75,"src":125},"/images/2019-09-02-ilruntime/20160504151602702.png",[],{"type":14,"tag":120,"props":128,"children":129},{},[],{"type":19,"value":131},"LoaderOptimization属性可以设置三个不同的枚举值，来设置针对前面说的三种程序集的代码存放以及访问方式。",{"type":14,"tag":133,"props":134,"children":135},"ul",{},[136,141,146],{"type":14,"tag":84,"props":137,"children":138},{},[139],{"type":19,"value":140},"SingleDomain，由于只启动一个AppDomain，那么code就被直接装载到了AppDomain中，访问静态变量更快捷。",{"type":14,"tag":84,"props":142,"children":143},{},[144],{"type":19,"value":145},"MultiDomain，所有的Assembly代码是进程级别的，因此所有的AppDomain只访问一份代码。这大大减少了程序占用的内存，但是由于程序集的静态变量仍然在各个AppDomain中，因此代码访问静态变量需要先得到AppDomain的引用再进行转换，速度会受到影响。",{"type":14,"tag":84,"props":147,"children":148},{},[149,151,154],{"type":19,"value":150},"MultiDomainHost，只有GAC代码是共享的，非GAC的Assembly依然会加载到被使用的AppDomain中，这样提高了静态变量的访问速度，当然也增加了程序占用的内存。",{"type":14,"tag":120,"props":152,"children":153},{},[],{"type":19,"value":155},"不管是哪种方式，mscorlib始终是process级别的，即只有一份mscorlib代码在内存中。",{"type":14,"tag":21,"props":157,"children":159},{"id":158},"使用dll进行热更",[160],{"type":19,"value":158},{"type":14,"tag":15,"props":162,"children":163},{},[164],{"type":19,"value":165},"文章并不是完全的实现热更新,实现的是windows和android平台下，对于dll文件的热更新。对于IOS为什么不能热更新，我们后续会讨论到，先看看安卓和windows下 dll的热更新步骤。",{"type":14,"tag":133,"props":167,"children":168},{},[169,174,179,184],{"type":14,"tag":84,"props":170,"children":171},{},[172],{"type":19,"value":173},"新建一个ClassLibrary（类库）的工程，在其中实现对应的类和方法；",{"type":14,"tag":84,"props":175,"children":176},{},[177],{"type":19,"value":178},"将该工程导出为DLL；",{"type":14,"tag":84,"props":180,"children":181},{},[182],{"type":19,"value":183},"将DLL改为bytes文件，存入Unity工程中的StreamingAssets文件夹下；",{"type":14,"tag":84,"props":185,"children":186},{},[187],{"type":19,"value":188},"在工程运行的时候，读取StreamingAssets下的Dll文件，用Assembly.Load(byte[] bytes )的方法，将DLL文件读取出来，进而执行相关的操作。这一步的代码为：",{"type":14,"tag":15,"props":190,"children":191},{},[192],{"type":14,"tag":75,"props":193,"children":195},{"alt":75,"src":194},"/images/2019-09-02-ilruntime/656520-20180525160707418-392942905.png",[],{"type":14,"tag":15,"props":197,"children":198},{},[199],{"type":19,"value":200},"unity工程在执行的时候，会构建一个默认的appDomain，Assembly.Load，其实就是在这个程序域上加载Dll,所以相关的实质和前面一个部分相差不大，这就是c#热更新在unity中的应用(IOS不包括)。",{"type":14,"tag":202,"props":203,"children":205},"h3",{"id":204},"ios不能基于以上热更的原因",[206],{"type":19,"value":204},{"type":14,"tag":15,"props":208,"children":209},{},[210,212,221],{"type":19,"value":211},"只要我们设定mono的编译模式为full-aot（比如打IOS安装包的时候），则在运行时试图使用JIT编译时，mono自身的JIT编译器就会禁止",{"type":14,"tag":213,"props":214,"children":215},"em",{},[216],{"type":14,"tag":38,"props":217,"children":218},{},[219],{"type":19,"value":220},"生成新的代码",{"type":19,"value":222},"(不要混淆Reflection.Emit和反射)这种行为进而报告这个异常。JIT编译的过程根本还没开始，就被自己扼杀了。",{"type":14,"tag":15,"props":224,"children":225},{},[226],{"type":14,"tag":38,"props":227,"children":228},{},[229],{"type":19,"value":230},"JIT——just in time，即时编译。",{"type":14,"tag":46,"props":232,"children":233},{},[234],{"type":14,"tag":15,"props":235,"children":236},{},[237],{"type":19,"value":238},"一个程序在它运行的时候创建并且运行了全新的代码，而并非那些最初作为这个程序的一部分保存在硬盘上的固有的代码。就叫JIT。",{"type":14,"tag":15,"props":240,"children":241},{},[242],{"type":19,"value":243},"IOS并非把JIT禁止了。或者换个句式讲，IOS封了内存（或者堆）的可执行权限，相当于变相的封锁了JIT这种编译方式。",{"type":14,"tag":21,"props":245,"children":247},{"id":246},"ilruntime",[248],{"type":19,"value":249},"ILRuntime",{"type":14,"tag":46,"props":251,"children":252},{},[253],{"type":14,"tag":15,"props":254,"children":255},{},[256],{"type":19,"value":257},"ILRuntime借助Mono.Cecil库来读取DLL的PE信息，以及当中类型的所有信息，最终得到方法的IL汇编码，然后通过内置的IL解译执行虚拟机来执行DLL中的代码",{"type":14,"tag":202,"props":259,"children":261},{"id":260},"借助monoceil库来读取dll的pe信息以及当中类型的所有信息",[262],{"type":19,"value":263},"借助Mono.Ceil库来读取DLL的PE信息以及当中类型的所有信息",{"type":14,"tag":15,"props":265,"children":266},{},[267],{"type":19,"value":268},"这一步是如何实现的，跟随源代码做一个详细的跟踪。",{"type":14,"tag":15,"props":270,"children":271},{},[272],{"type":19,"value":273},"首先，是构建一个全局的appDomain(这儿不是程序域的意思，只是取其名字意思来表示)",{"type":14,"tag":15,"props":275,"children":276},{},[277],{"type":14,"tag":75,"props":278,"children":280},{"alt":75,"src":279},"/images/2019-09-02-ilruntime/656520-20180525183908084-111024744.png",[],{"type":14,"tag":15,"props":282,"children":283},{},[284],{"type":19,"value":285},"基于WWW的方式加载AssetBundle或者DLL/PDB后，接下来是将其封入到MemoryStream中，将dll和pdb的bytes都存入到内存流中后，执行其内部实现的LoadAssembly方法。",{"type":14,"tag":15,"props":287,"children":288},{},[289],{"type":14,"tag":75,"props":290,"children":292},{"alt":75,"src":291},"/images/2019-09-02-ilruntime/656520-20180525183929820-235902445.png",[],{"type":14,"tag":15,"props":294,"children":295},{},[296],{"type":19,"value":297},"关键的是第一行，从Mono中加载模块：",{"type":14,"tag":15,"props":299,"children":300},{},[301],{"type":14,"tag":75,"props":302,"children":304},{"alt":75,"src":303},"/images/2019-09-02-ilruntime/656520-20180525183948767-1521954007.png",[],{"type":14,"tag":15,"props":306,"children":307},{},[308],{"type":19,"value":309},"进一步跟踪：",{"type":14,"tag":15,"props":311,"children":312},{},[313],{"type":19,"value":314},"ReadImageFrom的操作：",{"type":14,"tag":15,"props":316,"children":317},{},[318],{"type":14,"tag":75,"props":319,"children":321},{"alt":75,"src":320},"/images/2019-09-02-ilruntime/656520-20180525184006047-408828631.png",[],{"type":14,"tag":15,"props":323,"children":324},{},[325],{"type":19,"value":326},"其中ImageReader最终来自BinaryReader:",{"type":14,"tag":15,"props":328,"children":329},{},[330],{"type":14,"tag":75,"props":331,"children":333},{"alt":75,"src":332},"/images/2019-09-02-ilruntime/656520-20180525184022207-1494733614.png",[],{"type":14,"tag":15,"props":335,"children":336},{},[337],{"type":19,"value":338},"那么接下来的ReadImage操作：",{"type":14,"tag":15,"props":340,"children":341},{},[342],{"type":14,"tag":75,"props":343,"children":345},{"alt":75,"src":344},"/images/2019-09-02-ilruntime/656520-20180525184038682-930110102.png",[],{"type":14,"tag":15,"props":347,"children":348},{},[349],{"type":19,"value":350},"这四个操作，是最核心的操作，分别读取DLL的PE的各个信息，这样我们就进入下一个步骤。",{"type":14,"tag":202,"props":352,"children":354},{"id":353},"最终得到方法的il汇编码",[355],{"type":19,"value":356},"最终得到方法的IL汇编码",{"type":14,"tag":15,"props":358,"children":359},{},[360],{"type":19,"value":361},"让我们分拆来看看这几个读取函数的实现",{"type":14,"tag":15,"props":363,"children":364},{},[365],{"type":19,"value":366},"1）ReadOptionalHeaders",{"type":14,"tag":15,"props":368,"children":369},{},[370],{"type":19,"value":371},"主要读取PE的相关信息，不做过多解释，可以参看源码阅读理解；",{"type":14,"tag":15,"props":373,"children":374},{},[375],{"type":19,"value":376},"2）ReadSections",{"type":14,"tag":15,"props":378,"children":379},{},[380],{"type":19,"value":381},"读取分块数据",{"type":14,"tag":15,"props":383,"children":384},{},[385],{"type":14,"tag":75,"props":386,"children":388},{"alt":75,"src":387},"/images/2019-09-02-ilruntime/656520-20180525184056941-656677137.png",[],{"type":14,"tag":15,"props":390,"children":391},{},[392],{"type":19,"value":393},"封装一个Section，然后去执行读取，然后赋值给section的Data，注意回退了Index",{"type":14,"tag":202,"props":395,"children":397},{"id":396},"readcliheader",[398],{"type":19,"value":399},"ReadCLIHeader",{"type":14,"tag":15,"props":401,"children":402},{},[403],{"type":19,"value":404},"这步比较简单",{"type":14,"tag":15,"props":406,"children":407},{},[408],{"type":14,"tag":75,"props":409,"children":411},{"alt":75,"src":410},"/images/2019-09-02-ilruntime/656520-20180525184110212-726126206.png",[],{"type":14,"tag":80,"props":413,"children":414},{},[415],{"type":14,"tag":84,"props":416,"children":417},{},[418],{"type":19,"value":419},"ReadMetadata",{"type":14,"tag":15,"props":421,"children":422},{},[423],{"type":14,"tag":75,"props":424,"children":426},{"alt":75,"src":425},"/images/2019-09-02-ilruntime/656520-20180525184136211-1306602825.png",[],{"type":14,"tag":15,"props":428,"children":429},{},[430],{"type":19,"value":431},"核心是两个操作，一个是ReadMetadataStream，就是根据不同的标识符来新建不同的存储结构；一个是ReadTableHeap:",{"type":14,"tag":15,"props":433,"children":434},{},[435],{"type":14,"tag":75,"props":436,"children":438},{"alt":75,"src":437},"/images/2019-09-02-ilruntime/656520-20180525184150898-1035213362.png",[],{"type":14,"tag":15,"props":440,"children":441},{},[442],{"type":19,"value":443},"初始化heap中的Table后，进行一次Compute，获取size:",{"type":14,"tag":15,"props":445,"children":446},{},[447],{"type":14,"tag":75,"props":448,"children":450},{"alt":75,"src":449},"/images/2019-09-02-ilruntime/656520-20180525184214923-1218850507.png",[],{"type":14,"tag":15,"props":452,"children":453},{},[454],{"type":19,"value":455},"然后填充size:",{"type":14,"tag":15,"props":457,"children":458},{},[459],{"type":14,"tag":75,"props":460,"children":462},{"alt":75,"src":461},"/images/2019-09-02-ilruntime/v2-07369c744923a79035a3729bbc488943_hd.jpg",[],{"type":14,"tag":15,"props":464,"children":465},{},[466],{"type":19,"value":467},"基于这四步操作，我们可以将IL的汇编码存储到Image中，然后进一步执行后续的CreateModule操作:",{"type":14,"tag":15,"props":469,"children":470},{},[471],{"type":14,"tag":75,"props":472,"children":474},{"alt":75,"src":473},"/images/2019-09-02-ilruntime/v2-0a604dfba776c9c99f2e72627724c340_hd.jpg",[],{"type":14,"tag":15,"props":476,"children":477},{},[478],{"type":19,"value":479},"具体到，就是：",{"type":14,"tag":15,"props":481,"children":482},{},[483],{"type":14,"tag":75,"props":484,"children":486},{"alt":75,"src":485},"/images/2019-09-02-ilruntime/v2-b252bba4e6d01e512c2305c5c7b355c5_hd.jpg",[],{"type":14,"tag":15,"props":488,"children":489},{},[490],{"type":19,"value":491},"其中的ReadModule为：",{"type":14,"tag":15,"props":493,"children":494},{},[495],{"type":14,"tag":75,"props":496,"children":498},{"alt":75,"src":497},"/images/2019-09-02-ilruntime/v2-32399e9573a7779ecbf82743b30fc184_hd.jpg",[],{"type":14,"tag":15,"props":500,"children":501},{},[502],{"type":19,"value":503},"具体的读取manifest和Module内部数据，可以参看源码。",{"type":14,"tag":202,"props":505,"children":507},{"id":506},"基于loadedtypes来实现反射方法的调用",[508],{"type":19,"value":509},"基于LoadedTypes来实现反射方法的调用",{"type":14,"tag":15,"props":511,"children":512},{},[513],{"type":19,"value":514},"在ILRuntime中，不能基于System.Type来直接获取热更新DLL中的类，只有基于唯一的appDomain实例，基于LoadedTypes这种来获取热更新中的DLL，基于代码来分析，更为详细：",{"type":14,"tag":15,"props":516,"children":517},{},[518],{"type":19,"value":519},"首先，加载获取该DLL中的指定类：",{"type":14,"tag":110,"props":521,"children":523},{"code":522},"var it = appDomain.LoadedTypes[\"HotFix_Project.InstanceClass\"]\n",[524],{"type":14,"tag":115,"props":525,"children":526},{"__ignoreMap":7},[527],{"type":19,"value":522},{"type":14,"tag":15,"props":529,"children":530},{},[531],{"type":19,"value":532},"跟踪LoadedTypes：",{"type":14,"tag":110,"props":534,"children":536},{"code":535},"public Dictionary\u003Cstring, IType> LoadedTypes{get{return mapType.InnerDictionary;}}\n",[537],{"type":14,"tag":115,"props":538,"children":539},{"__ignoreMap":7},[540],{"type":19,"value":535},{"type":14,"tag":15,"props":542,"children":543},{},[544],{"type":19,"value":545},"跟踪看mapType.InnerDictionary:",{"type":14,"tag":110,"props":547,"children":549},{"code":548},"ThreadSafeDictionary\u003Cstring, IType> mapType = new ThreadSafeDictionary\u003Cstring, IType>();\n",[550],{"type":14,"tag":115,"props":551,"children":552},{"__ignoreMap":7},[553],{"type":19,"value":548},{"type":14,"tag":15,"props":555,"children":556},{},[557],{"type":19,"value":558},"这个mapType是什么时候装配的？",{"type":14,"tag":15,"props":560,"children":561},{},[562],{"type":19,"value":563},"来自于文章二中的LoadAssembly的后续操作：",{"type":14,"tag":15,"props":565,"children":566},{},[567],{"type":14,"tag":75,"props":568,"children":570},{"alt":75,"src":569},"/images/2019-09-02-ilruntime/656520-20180528144431337-1618869539.png",[],{"type":14,"tag":15,"props":572,"children":573},{},[574],{"type":19,"value":575},"那么这个module.GetTypes是如何操作的？",{"type":14,"tag":15,"props":577,"children":578},{},[579],{"type":14,"tag":75,"props":580,"children":582},{"alt":75,"src":581},"/images/2019-09-02-ilruntime/656520-20180528144453022-436088052.png",[],{"type":14,"tag":15,"props":584,"children":585},{},[586],{"type":14,"tag":75,"props":587,"children":589},{"alt":75,"src":588},"/images/2019-09-02-ilruntime/656520-20180528144501605-1680011964.png",[],{"type":14,"tag":15,"props":591,"children":592},{},[593],{"type":19,"value":594},"分别基于协程来return type以及其nestedTypes，关键是看Types是怎么获取的：",{"type":14,"tag":15,"props":596,"children":597},{},[598],{"type":14,"tag":75,"props":599,"children":601},{"alt":75,"src":600},"/images/2019-09-02-ilruntime/656520-20180528144515817-1301453461.png",[],{"type":14,"tag":15,"props":603,"children":604},{},[605],{"type":19,"value":606},"关键是read操作：",{"type":14,"tag":15,"props":608,"children":609},{},[610],{"type":14,"tag":75,"props":611,"children":613},{"alt":75,"src":612},"/images/2019-09-02-ilruntime/656520-20180528144530095-1073548484.png",[],{"type":14,"tag":15,"props":615,"children":616},{},[617],{"type":19,"value":618},"继续跟进Read操作：",{"type":14,"tag":15,"props":620,"children":621},{},[622],{"type":14,"tag":75,"props":623,"children":625},{"alt":75,"src":624},"/images/2019-09-02-ilruntime/656520-20180528144543549-1339229040.png",[],{"type":14,"tag":15,"props":627,"children":628},{},[629],{"type":19,"value":630},"关键是：",{"type":14,"tag":110,"props":632,"children":634},{"code":633},"var mtypes = metadata.Types\n",[635],{"type":14,"tag":115,"props":636,"children":637},{"__ignoreMap":7},[638],{"type":19,"value":633},{"type":14,"tag":15,"props":640,"children":641},{},[642],{"type":19,"value":643},"后续都是对其的封装和填充，对于metadata的填充，来自于InitializeTypeDefinitions这个操作：",{"type":14,"tag":15,"props":645,"children":646},{},[647],{"type":14,"tag":75,"props":648,"children":650},{"alt":75,"src":649},"/images/2019-09-02-ilruntime/656520-20180528144611448-160157189.png",[],{"type":14,"tag":15,"props":652,"children":653},{},[654],{"type":19,"value":655},"关键操作是ReadType这个操作：",{"type":14,"tag":15,"props":657,"children":658},{},[659],{"type":14,"tag":75,"props":660,"children":662},{"alt":75,"src":661},"/images/2019-09-02-ilruntime/656520-20180528144626456-2070945940.png",[],{"type":14,"tag":15,"props":664,"children":665},{},[666,668,673],{"type":19,"value":667},"构建一个内部定义的类，然后做数据填充，看看关键的几个属性的设置：BaseType ,设置其父类型，fields",{"type":14,"tag":213,"props":669,"children":670},{},[671],{"type":19,"value":672},"range/methods_range",{"type":19,"value":674}," 是对属性范围和方法范围的设置：",{"type":14,"tag":15,"props":676,"children":677},{},[678],{"type":14,"tag":75,"props":679,"children":681},{"alt":75,"src":680},"/images/2019-09-02-ilruntime/656520-20180528144639749-1842647497.png",[],{"type":14,"tag":15,"props":683,"children":684},{},[685],{"type":19,"value":686},"所以基本方法还是ReadListRange:",{"type":14,"tag":15,"props":688,"children":689},{},[690],{"type":14,"tag":75,"props":691,"children":693},{"alt":75,"src":692},"/images/2019-09-02-ilruntime/656520-20180528144651716-2020934616.png",[],{"type":14,"tag":15,"props":695,"children":696},{},[697],{"type":19,"value":698},"在这儿，我们最终回到了文章二中对于IL虚拟机中的tableHeap的引用，最后实现了和文章二的首尾呼应。",{"type":14,"tag":15,"props":700,"children":701},{},[702],{"type":19,"value":703},"好了，收起思绪，回到最开始的，获取类，这样获得的一个类，这样得到的一个类，继承自IType，在Unity主工程中，则需要System.Type才能继续使用反射接口，其对于的封装来自昱这个ILType封装的ReflectionType， 其中的ILRuntimeType继承自Type类：",{"type":14,"tag":15,"props":705,"children":706},{},[707],{"type":14,"tag":75,"props":708,"children":710},{"alt":75,"src":709},"/images/2019-09-02-ilruntime/656520-20180528144705308-507336274.png",[],{"type":14,"tag":15,"props":712,"children":713},{},[714],{"type":19,"value":715},"基于其，可以直接调用System.Type的GetConstructor方法，构建实例，归并几个代码，可以表示为（直接使用的实例源代码）：",{"type":14,"tag":110,"props":717,"children":719},{"code":718},"var it = appDomain.LoadedTypes[\"HotFix_Project.InstanceClass\"];\nvar type = it.ReflectionType;\nvar ctor = type.GetConstructor(new System.Type[0]);\nvar obj = ctor.Invoke(null);\n",[720],{"type":14,"tag":115,"props":721,"children":722},{"__ignoreMap":7},[723],{"type":19,"value":718},{"type":14,"tag":15,"props":725,"children":726},{},[727],{"type":19,"value":728},"对应可以得到DLL中该类的构造函数的调用：",{"type":14,"tag":15,"props":730,"children":731},{},[732],{"type":14,"tag":75,"props":733,"children":735},{"alt":75,"src":734},"/images/2019-09-02-ilruntime/656520-20180528144743649-1121461434.png",[],{"type":14,"tag":202,"props":737,"children":739},{"id":738},"基于appdomain内嵌的invoke来实现反射",[740],{"type":19,"value":741},"基于appDomain内嵌的Invoke来实现反射",{"type":14,"tag":15,"props":743,"children":744},{},[745],{"type":19,"value":746},"在ILRuntime中，在appDomain中内嵌了一套Invoke的实现，可以在Unity工程中直接调用来实现对热更新DLL中类的方法的调用：",{"type":14,"tag":15,"props":748,"children":749},{},[750],{"type":14,"tag":75,"props":751,"children":753},{"alt":75,"src":752},"/images/2019-09-02-ilruntime/656520-20180528144758068-1015276210.png",[],{"type":14,"tag":15,"props":755,"children":756},{},[757],{"type":19,"value":758},"关键操作就是2步： GetType和 GetMethod，获取类型的过程，和前面有点类似，就是对mapType中存储的获取，如果没有，则进行查找和填充，这儿重点说说方法是如何获取的：",{"type":14,"tag":15,"props":760,"children":761},{},[762],{"type":14,"tag":75,"props":763,"children":765},{"alt":75,"src":764},"/images/2019-09-02-ilruntime/656520-20180528144811489-2012923950.png",[],{"type":14,"tag":15,"props":767,"children":768},{},[769],{"type":19,"value":770},"粗看就是从methods中取出来，做相应的检查，如果通过则返回，那么初始化操作看看：",{"type":14,"tag":15,"props":772,"children":773},{},[774],{"type":14,"tag":75,"props":775,"children":777},{"alt":75,"src":776},"/images/2019-09-02-ilruntime/656520-20180528144823104-1803890663.png",[],{"type":14,"tag":15,"props":779,"children":780},{},[781],{"type":19,"value":782},"最后还是从definition.Methods中取出，逐个遍历其中的方法做一个分类存储，如果有静态构造函数，且满足对于的参数条件，则执行一次静态构造。",{"type":14,"tag":15,"props":784,"children":785},{},[786],{"type":19,"value":787},"回到开始，在获取到类和方法的相关信息后，就可以执行对于的参数检验，然后执行反射：",{"type":14,"tag":15,"props":789,"children":790},{},[791],{"type":14,"tag":75,"props":792,"children":794},{"alt":75,"src":793},"/images/2019-09-02-ilruntime/656520-20180528144840373-1429288247.png",[],{"type":14,"tag":15,"props":796,"children":797},{},[798],{"type":19,"value":799},"可见，就是获取到一个IL的解释器，然后执行相应的反射，具体Run怎么执行，就不继续深入贴图了，有兴趣的可以持续跟踪（基本思路就是对stack的操作，塞入各个参数，然后执行一次操作，塞入结果，然后退回）",{"type":14,"tag":15,"props":801,"children":802},{},[803],{"type":19,"value":804},"对于ILRuntime的反射基本就先研究到这儿，如果要应用到自己的项目中，可以继续深入研究一下代码，看看实现的具体细节。这儿附上开源的相关文档：",{"type":14,"tag":15,"props":806,"children":807},{},[808],{"type":14,"tag":809,"props":810,"children":812},"a",{"href":811},"/v1/guide/reflection.html",[813],{"type":19,"value":814},"ILRuntime中的反射",{"type":14,"tag":202,"props":816,"children":818},{"id":817},"热更新dll和unity主工程的相互调用",[819],{"type":19,"value":820},"热更新DLL和Unity主工程的相互调用",{"type":14,"tag":15,"props":822,"children":823},{},[824],{"type":19,"value":825},"基于前面的反射，我们可以基本理出热更DLL和unity主工程的交互本质: 基于IL虚拟机或者.net本身反射来实现交互，对于热更新DLL，其调用unity主工程，则主要是在热更新工程中添加对于unity工程的Assembly-CSharp的引用：",{"type":14,"tag":15,"props":827,"children":828},{},[829],{"type":14,"tag":75,"props":830,"children":832},{"alt":75,"src":831},"/images/2019-09-02-ilruntime/656520-20180528144900607-89436059.png",[],{"type":14,"tag":15,"props":834,"children":835},{},[836],{"type":19,"value":837},"基于这个引用，可以调用其中类的各自方法，举两个类来测试：",{"type":14,"tag":15,"props":839,"children":840},{},[841],{"type":19,"value":842},"一个不继承自MonoBehaviour：",{"type":14,"tag":15,"props":844,"children":845},{},[846],{"type":14,"tag":75,"props":847,"children":849},{"alt":75,"src":848},"/images/2019-09-02-ilruntime/656520-20180528144913680-316348813.png",[],{"type":14,"tag":15,"props":851,"children":852},{},[853],{"type":19,"value":854},"一个继承自MonoBehaviour:",{"type":14,"tag":15,"props":856,"children":857},{},[858],{"type":14,"tag":75,"props":859,"children":861},{"alt":75,"src":860},"/images/2019-09-02-ilruntime/656520-20180528144932643-1419524295.png",[],{"type":14,"tag":15,"props":863,"children":864},{},[865],{"type":19,"value":866},"这两个Unity主工程中的类以及其中的方法，在热更新DLL中调用：",{"type":14,"tag":15,"props":868,"children":869},{},[870],{"type":14,"tag":75,"props":871,"children":873},{"alt":75,"src":872},"/images/2019-09-02-ilruntime/656520-20180528144946464-1425100319.png",[],{"type":14,"tag":15,"props":875,"children":876},{},[877],{"type":19,"value":878},"可以在Unity主工程中得到输出：",{"type":14,"tag":15,"props":880,"children":881},{},[882],{"type":14,"tag":75,"props":883,"children":885},{"alt":75,"src":884},"/images/2019-09-02-ilruntime/656520-20180528145001101-1886163550.png",[],{"type":14,"tag":15,"props":887,"children":888},{},[889],{"type":19,"value":890},"看一下track可以大概了解整个反射的执行过程。",{"type":14,"tag":15,"props":892,"children":893},{},[894],{"type":19,"value":895},"对于Unity执行热更DLL中的调用，就是第一部分的反射实例。",{"type":14,"tag":21,"props":897,"children":899},{"id":898},"热修复hotfix",[900],{"type":19,"value":901},"热修复HOTFIX",{"type":14,"tag":15,"props":903,"children":904},{},[905,907],{"type":19,"value":906},"腾讯开源的Unity热更解决方案xLua有一个非常吸引人的特性就是Hotfix，其原理是使用Mono.Cecil库对进行C#层编译出来的dll程序集进行IL代码注入。其作者也在知乎的回答中简单说明了原理：",{"type":14,"tag":809,"props":908,"children":912},{"href":909,"rel":910},"https://link.jianshu.com/?t=https://www.zhihu.com/question/54344452/answer/139413144",[911],"nofollow",[913],{"type":19,"value":914},"如何评价腾讯在Unity下的xLua（开源）热更方案？ - 车雄生的回答 - 知乎",{"type":14,"tag":46,"props":916,"children":917},{},[918,926],{"type":14,"tag":15,"props":919,"children":920},{},[921],{"type":14,"tag":38,"props":922,"children":923},{},[924],{"type":19,"value":925},"Mono.Ceil",{"type":14,"tag":15,"props":927,"children":928},{},[929],{"type":19,"value":930},"一个可加载并浏览现有程序集并进行动态修改并保存的.NET框架。可以静态注入程序集（注入后生成新的程序集）和动态注入程序集（注入后不改变目标程序集，只在运行时改变程序集行为。可以通过其实现AOP等高级功能",{"type":14,"tag":15,"props":932,"children":933},{},[934],{"type":19,"value":935},"Unity的代码在修改之后会自动编译到Library\\ScriptAssemblies下的两个Assembly中，所以我会尝试着将代码注入到其中。",{"type":14,"tag":110,"props":937,"children":939},{"code":938},"public class Test : MonoBehaviour{\n\n    void Start()\n    {\n       InjectMod();\n    }\n\n    void InjectMod () {\n       Debug.Log(\"Heihei asdasd\");\n    }\n}\n",[940],{"type":14,"tag":115,"props":941,"children":942},{"__ignoreMap":7},[943],{"type":19,"value":938},{"type":14,"tag":15,"props":945,"children":946},{},[947,949,955],{"type":19,"value":948},"将Test绑定到场景物体上，运行后我们会发现输出",{"type":14,"tag":115,"props":950,"children":952},{"className":951},[],[953],{"type":19,"value":954},"Heihei asdasd",{"type":19,"value":956},"，就像我们预期的一样。 然后我们尝试着将代码注入到该函数中。",{"type":14,"tag":110,"props":958,"children":960},{"code":959},"private static bool hasGen = false;\n[PostProcessBuild(1000)]\nprivate static void OnPostprocessBuildPlayer(BuildTarget buildTarget, string buildPath)\n{\n   hasGen = false;\n}\n\n[PostProcessScene]\npublic static void TestInjectMothodOnPost()\n{\n   if (hasGen == true) return;\n   hasGen = true;\n\n   TestInjectMothod();\n}\n[InitializeOnLoadMethod]\npublic static void TestInjectMothod()\n{\n   var assembly = AssemblyDefinition.ReadAssembly(@\"D:\\Documents\\Unity5Projects\\UnityDllInjector\\Library\\ScriptAssemblies\\Assembly-CSharp.dll\");\n   var types = assembly.MainModule.GetTypes();\n   foreach(var type in types)\n   {\n      foreach(var Method in type.Methods)\n      {\n         if(Method.Name == \"InjectMod\")\n         {\n            InjectMethod(Method, assembly);\n         }\n      }\n   }\n   var writerParameters = new WriterParameters { WriteSymbols = true };\n   assembly.Write(@\"D:\\Documents\\Unity5Projects\\UnityDllInjector\\Library\\ScriptAssemblies\\Assembly-CSharp.dll\", new WriterParameters());\n}\n",[961],{"type":14,"tag":115,"props":962,"children":963},{"__ignoreMap":7},[964],{"type":19,"value":959},{"type":14,"tag":15,"props":966,"children":967},{},[968,970,976,978,984],{"type":19,"value":969},"我们首先看",{"type":14,"tag":115,"props":971,"children":973},{"className":972},[],[974],{"type":19,"value":975},"TestInjectMothod",{"type":19,"value":977},",这是我们在编辑器下进行注入的函数，这里我们需要注意的是，每当我们修改代码之后我们注入的结果会被覆盖掉，所以我们在每次修改代码之后都需要进行注入，所以我们这里添加了标签：",{"type":14,"tag":115,"props":979,"children":981},{"className":980},[],[982],{"type":19,"value":983},"InitializeOnLoadMethod ",{"type":19,"value":985},"这个标签的意思是，当初始化的时候都进行执行，所以编译完成之后就会自动执行。",{"type":14,"tag":15,"props":987,"children":988},{},[989],{"type":19,"value":990},"然后我们看前面两个函数，这两个函数是为了在打包时进行注入而存在的，其中hasGen是为了防止重复注入而定义的flag。",{"type":14,"tag":15,"props":992,"children":993},{},[994,996,1002],{"type":19,"value":995},"然后我们查看一下我们的注入方法",{"type":14,"tag":115,"props":997,"children":999},{"className":998},[],[1000],{"type":19,"value":1001},"InjectMethod",{"type":19,"value":1003},",在这个函数中我们可以看到，我们首先将我们所需要的函数导入，然后插入到方法的最前端：",{"type":14,"tag":110,"props":1005,"children":1007},{"code":1006},"private static void InjectMethod(MethodDefinition method, AssemblyDefinition assembly)\n{\n   var firstIns = method.Body.Instructions.First();\n   var worker = method.Body.GetILProcessor();\n\n   //获取Debug.Log方法引用\n   var hasPatchRef = assembly.MainModule.Import(\n   typeof(Debug).GetMethod(\"Log\", new Type[] { typeof(string) }));\n   //插入函数\n   var current = InsertBefore(worker, firstIns, worker.Create(OpCodes.Ldstr, \"Inject\"));\n   current = InsertBefore(worker, firstIns, worker.Create(OpCodes.Call, hasPatchRef));\n   //计算Offset\n   ComputeOffsets(method.Body);\n}\n/// \u003Csummary>\n/// 语句前插入Instruction, 并返回当前语句\n/// \u003C/summary>\nprivate static Instruction InsertBefore(ILProcessor worker, Instruction target, Instruction instruction)\n{\n   worker.InsertBefore(target, instruction);\n   return instruction;\n}\n\n/// \u003Csummary>\n/// 语句后插入Instruction, 并返回当前语句\n/// \u003C/summary>\nprivate static Instruction InsertAfter(ILProcessor worker, Instruction target, Instruction instruction)\n{\n   worker.InsertAfter(target, instruction);\n   return instruction;\n}\n//计算注入后的函数偏移值\nprivate static void ComputeOffsets(MethodBody body)\n{\n   var offset = 0;\n   foreach (var instruction in body.Instructions)\n   {\n      instruction.Offset = offset;\n      offset += instruction.GetSize();\n   }\n}\n",[1008],{"type":14,"tag":115,"props":1009,"children":1010},{"__ignoreMap":7},[1011],{"type":19,"value":1006},{"type":14,"tag":15,"props":1013,"children":1014},{},[1015],{"type":19,"value":1016},"等待编译完成，并且运行程序，我们发现在输出原来的语句之前多了一句“Inject”\n可是我们在查看代码的时候并没有发生任何改变，这是因为我们只修改了dll而并非修改源代码。",{"type":14,"tag":21,"props":1018,"children":1020},{"id":1019},"注意",[1021],{"type":19,"value":1019},{"type":14,"tag":133,"props":1023,"children":1024},{},[1025,1030,1040,1050],{"type":14,"tag":84,"props":1026,"children":1027},{},[1028],{"type":19,"value":1029},"ILRuntime并没有创建一个Appdomain,只是取其名字意思.始终工作在默认的AppDomain",{"type":14,"tag":84,"props":1031,"children":1032},{},[1033,1035],{"type":19,"value":1034},"ILRuntime中使用Unity项目的委托,需要创建",{"type":14,"tag":38,"props":1036,"children":1037},{},[1038],{"type":19,"value":1039},"DelegateAdapter",{"type":14,"tag":84,"props":1041,"children":1042},{},[1043,1045],{"type":19,"value":1044},"ILRuntime中继承Unity项目中的类,需要实现",{"type":14,"tag":38,"props":1046,"children":1047},{},[1048],{"type":19,"value":1049},"继承适配器",{"type":14,"tag":84,"props":1051,"children":1052},{},[1053,1055,1058,1060,1066,1068,1071,1073,1079,1081,1087,1090],{"type":19,"value":1054},"通常情况下，如果要从热更DLL中调用Unity主工程或者Unity的接口，是需要通过反射接口来调用的，包括市面上不少其他热更方案，也是通过这种方式来对CLR方接口进行调用的。(反射一个类,然后创建对象,然后保存到runtime中,调用方法也是通过反射)",{"type":14,"tag":120,"props":1056,"children":1057},{},[],{"type":19,"value":1059},"但是这种方式有着明显的弊端，最突出的一点就是通过反射来调用接口调用效率会比直接调用低很多，再加上反射传递函数参数时需要使用",{"type":14,"tag":115,"props":1061,"children":1063},{"className":1062},[],[1064],{"type":19,"value":1065},"object[]",{"type":19,"value":1067},"数组，这样不可避免的每次调用都会产生不少GC Alloc。众所周知GC Alloc高意味着在Unity中执行会存在较大的性能问题。",{"type":14,"tag":120,"props":1069,"children":1070},{},[],{"type":19,"value":1072},"ILRuntime通过CLR方法绑定机制，可以",{"type":14,"tag":115,"props":1074,"children":1076},{"className":1075},[],[1077],{"type":19,"value":1078},"选择性",{"type":19,"value":1080},"的对经常使用的CLR接口进行直接调用，从而尽可能的消除反射调用开销以及额外的",{"type":14,"tag":115,"props":1082,"children":1084},{"className":1083},[],[1085],{"type":19,"value":1086},"GC Alloc",{"type":14,"tag":120,"props":1088,"children":1089},{},[],{"type":19,"value":1091},"CLR绑定借助了ILRuntime的CLR重定向机制来实现，因为实质上也是将对CLR方法的反射调用重定向到我们自己定义的方法里面来。",{"type":14,"tag":21,"props":1093,"children":1095},{"id":1094},"相关链接",[1096],{"type":19,"value":1094},{"type":14,"tag":133,"props":1098,"children":1099},{},[1100,1109,1118,1127,1136,1145],{"type":14,"tag":84,"props":1101,"children":1102},{},[1103],{"type":14,"tag":809,"props":1104,"children":1107},{"href":1105,"rel":1106},"https://docs.microsoft.com/zh-cn/dotnet/framework/app-domains/use",[911],[1108],{"type":19,"value":1105},{"type":14,"tag":84,"props":1110,"children":1111},{},[1112],{"type":14,"tag":809,"props":1113,"children":1116},{"href":1114,"rel":1115},"https://www.cnblogs.com/murongxiaopifu/p/4278947.html",[911],[1117],{"type":19,"value":1114},{"type":14,"tag":84,"props":1119,"children":1120},{},[1121],{"type":14,"tag":809,"props":1122,"children":1125},{"href":1123,"rel":1124},"https://www.cnblogs.com/murongxiaopifu/p/4211964.html",[911],[1126],{"type":19,"value":1123},{"type":14,"tag":84,"props":1128,"children":1129},{},[1130],{"type":14,"tag":809,"props":1131,"children":1134},{"href":1132,"rel":1133},"https://www.cnblogs.com/zblade/p/9100146.html",[911],[1135],{"type":19,"value":1132},{"type":14,"tag":84,"props":1137,"children":1138},{},[1139],{"type":14,"tag":809,"props":1140,"children":1143},{"href":1141,"rel":1142},"http://ourpalm.github.io/ILRuntime/public/v1/guide/bind.html",[911],[1144],{"type":19,"value":1141},{"type":14,"tag":84,"props":1146,"children":1147},{},[1148],{"type":14,"tag":809,"props":1149,"children":1152},{"href":1150,"rel":1151},"https://www.jianshu.com/p/4bef7f66aefd",[911],[1153],{"type":19,"value":1150},{"title":7,"searchDepth":1155,"depth":1155,"links":1156},2,[1157,1159,1160,1161,1162,1163,1164],{"id":204,"depth":1158,"text":204},3,{"id":260,"depth":1158,"text":263},{"id":353,"depth":1158,"text":356},{"id":396,"depth":1158,"text":399},{"id":506,"depth":1158,"text":509},{"id":738,"depth":1158,"text":741},{"id":817,"depth":1158,"text":820},"markdown","content:unity:2019-09-02-ilruntime.md","content","unity/2019-09-02-ilruntime.md","md","2019-09-02",[1172,1182,1309,1358,1410,1423,1535],{"title":1173,"_path":1174,"children":1175},"Art","/art",[1176,1179],{"title":1177,"_path":1178},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":1180,"_path":1181},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":1183,"_path":1184,"children":1185},"Dotnet","/dotnet",[1186,1189,1192,1195,1198,1201,1204,1207,1210,1213,1216,1219,1222,1225,1228,1231,1234,1237,1240,1243,1246,1249,1252,1255,1258,1261,1264,1267,1270,1273,1276,1279,1282,1285,1288,1291,1294,1297,1300,1303,1306],{"title":1187,"_path":1188},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":1190,"_path":1191},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":1193,"_path":1194},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":1196,"_path":1197},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":1199,"_path":1200},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":1202,"_path":1203},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":1205,"_path":1206},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":1208,"_path":1209},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":1211,"_path":1212},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":1214,"_path":1215},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":1217,"_path":1218},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":1220,"_path":1221},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":1223,"_path":1224},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":1226,"_path":1227},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":1229,"_path":1230},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":1232,"_path":1233},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":1235,"_path":1236},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":1238,"_path":1239},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":1241,"_path":1242},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":1244,"_path":1245},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":1247,"_path":1248},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":1250,"_path":1251},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":1253,"_path":1254},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":1256,"_path":1257},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":1259,"_path":1260},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":1262,"_path":1263},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":1265,"_path":1266},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":1268,"_path":1269},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":1271,"_path":1272},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":1274,"_path":1275},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":1277,"_path":1278},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":1280,"_path":1281},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":1283,"_path":1284},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":1286,"_path":1287},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":1289,"_path":1290},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":1292,"_path":1293},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":1295,"_path":1296},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":1298,"_path":1299},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":1301,"_path":1302},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":1304,"_path":1305},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":1307,"_path":1308},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":1310,"_path":1311,"children":1312},"Game","/game",[1313,1316,1319,1322,1325,1328,1331,1334,1337,1340,1343,1346,1349,1352,1355],{"title":1314,"_path":1315},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":1317,"_path":1318},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":1320,"_path":1321},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":1323,"_path":1324},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":1326,"_path":1327},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":1329,"_path":1330},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":1332,"_path":1333},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":1335,"_path":1336},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":1338,"_path":1339},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":1341,"_path":1342},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":1344,"_path":1345},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":1347,"_path":1348},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":1350,"_path":1351},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":1353,"_path":1354},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":1356,"_path":1357},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":1359,"_path":1360,"children":1361},"Gyj","/gyj",[1362,1365,1368,1371,1374,1377,1380,1383,1386,1389,1392,1395,1398,1401,1404,1407],{"title":1363,"_path":1364},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":1366,"_path":1367},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":1369,"_path":1370},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":1372,"_path":1373},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1375,"_path":1376},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1378,"_path":1379},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1381,"_path":1382},"玩法","/gyj/2022-08-22-wanfa",{"title":1384,"_path":1385},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1387,"_path":1388},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1390,"_path":1391},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1393,"_path":1394},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1396,"_path":1397},"门派内容相关","/gyj/2022-11-17-sect",{"title":1399,"_path":1400},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1402,"_path":1403},"种植","/gyj/2022-12-01-zhongzhi",{"title":1405,"_path":1406},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1408,"_path":1409},"跑商","/gyj/2023-11-01-paoshang",{"title":1411,"_path":1412,"children":1413},"Js","/js",[1414,1417,1420],{"title":1415,"_path":1416},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1418,"_path":1419},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1421,"_path":1422},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1424,"_path":1425,"children":1426},"Tool","/tool",[1427,1430,1433,1436,1439,1442,1445,1448,1451,1454,1457,1460,1463,1466,1469,1472,1475,1478,1481,1484,1487,1490,1493,1496,1499,1502,1505,1508,1511,1514,1517,1520,1523,1526,1529,1532],{"title":1428,"_path":1429},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1431,"_path":1432},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1434,"_path":1435},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1437,"_path":1438},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1440,"_path":1441},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1443,"_path":1444},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1446,"_path":1447},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1449,"_path":1450},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1452,"_path":1453},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1455,"_path":1456},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1458,"_path":1459},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1461,"_path":1462},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1464,"_path":1465},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1467,"_path":1468},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1470,"_path":1471},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1473,"_path":1474},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1476,"_path":1477},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1479,"_path":1480},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1482,"_path":1483},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1485,"_path":1486},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1488,"_path":1489},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1491,"_path":1492},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1494,"_path":1495},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1497,"_path":1498},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1500,"_path":1501},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1503,"_path":1504},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1506,"_path":1507},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1509,"_path":1510},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1512,"_path":1513},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1515,"_path":1516},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1518,"_path":1519},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1521,"_path":1522},"rider的使用","/tool/2022-08-02-rider-use",{"title":1524,"_path":1525},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1527,"_path":1528},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1530,"_path":1531},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1533,"_path":1534},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1536,"_path":1537,"children":1538},"Unity","/unity",[1539,1542,1545,1548,1551,1554,1557,1560,1563,1566,1569,1570,1573,1576,1579,1582,1585,1588,1591,1594,1597,1600,1603,1606,1609,1612,1615,1618,1621,1624,1627,1630,1633,1636,1639,1642,1645,1648,1651,1654,1657,1660,1663,1666,1669,1672,1675,1678,1681,1684,1687,1690,1693,1696,1699,1702,1705,1708,1711,1714,1717,1720,1723,1726,1729,1732,1735,1738,1741,1744,1747,1750],{"title":1540,"_path":1541},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1543,"_path":1544},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1546,"_path":1547},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1549,"_path":1550},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1552,"_path":1553},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1555,"_path":1556},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1558,"_path":1559},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1561,"_path":1562},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1564,"_path":1565},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1567,"_path":1568},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":8,"_path":4},{"title":1571,"_path":1572},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1574,"_path":1575},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1577,"_path":1578},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1580,"_path":1581},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1583,"_path":1584},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1586,"_path":1587},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1589,"_path":1590},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1592,"_path":1593},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1595,"_path":1596},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1598,"_path":1599},"技能系统","/unity/2020-02-15-skill-system",{"title":1601,"_path":1602},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1604,"_path":1605},"角色状态设计","/unity/2020-02-17-character-states",{"title":1607,"_path":1608},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1610,"_path":1611},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1613,"_path":1614},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1616,"_path":1617},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1619,"_path":1620},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1622,"_path":1623},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1625,"_path":1626},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1628,"_path":1629},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1631,"_path":1632},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1634,"_path":1635},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1637,"_path":1638},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1640,"_path":1641},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1643,"_path":1644},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1646,"_path":1647},"unity的addressables","/unity/2020-09-12-addressables",{"title":1649,"_path":1650},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1652,"_path":1653},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1655,"_path":1656},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1658,"_path":1659},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1661,"_path":1662},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1664,"_path":1665},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1667,"_path":1668},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1670,"_path":1671},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1673,"_path":1674},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1676,"_path":1677},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1679,"_path":1680},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1682,"_path":1683},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1685,"_path":1686},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1688,"_path":1689},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1691,"_path":1692},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1694,"_path":1695},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1697,"_path":1698},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1700,"_path":1701},"ability","/unity/2020-11-16-dotssample",{"title":1703,"_path":1704},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1706,"_path":1707},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1709,"_path":1710},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1712,"_path":1713},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1715,"_path":1716},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1718,"_path":1719},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1721,"_path":1722},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1724,"_path":1725},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1727,"_path":1728},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1730,"_path":1731},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1733,"_path":1734},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1736,"_path":1737},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1739,"_path":1740},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1742,"_path":1743},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1745,"_path":1746},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1748,"_path":1749},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1751,"_path":1752},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779041817]