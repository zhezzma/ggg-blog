[{"data":1,"prerenderedAt":998},["Reactive",2],{"content-query-wCvn1mISqR":3,"content-navigation-8C37fagqQL":416},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":410,"_id":411,"_source":412,"_file":413,"_extension":414,"date":415},"/unity/2020-10-16-unity-job","unity",false,"","UNITY JOB SYSTEM详解","创建Job需要定义一个结构体，实现IJob接口。实现了IJob接口之后，就可以让这个Job和其他Job并行运行了。",{"type":11,"children":12,"toc":405},"root",[13,22,44,56,68,73,93,98,110,116,121,134,146,163,172,178,183,190,230,241,254,263,269,303,320,325,330,339,344,353,358],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"创建job",[19],{"type":20,"value":21},"text","创建Job",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26,28,35,37,42],{"type":20,"value":27},"创建Job需要定义一个结构体，实现",{"type":14,"tag":29,"props":30,"children":32},"code",{"className":31},[],[33],{"type":20,"value":34},"IJob",{"type":20,"value":36},"接口。实现了",{"type":14,"tag":29,"props":38,"children":40},{"className":39},[],[41],{"type":20,"value":34},{"type":20,"value":43},"接口之后，就可以让这个Job和其他Job并行运行了。",{"type":14,"tag":23,"props":45,"children":46},{},[47,49,54],{"type":20,"value":48},"到这呢，就可以给Job一个真正的定义了：Job是一个统称，任何实现了",{"type":14,"tag":29,"props":50,"children":52},{"className":51},[],[53],{"type":20,"value":34},{"type":20,"value":55},"接口的结构体，都可以成为一个Job。",{"type":14,"tag":23,"props":57,"children":58},{},[59,61,66],{"type":20,"value":60},"创建Job的步骤如下：\n1、创建一个实现",{"type":14,"tag":29,"props":62,"children":64},{"className":63},[],[65],{"type":20,"value":34},{"type":20,"value":67},"接口的结构体\n2、给结构体添加所需的成员变量，可以使用blittable类型或者NativeContainer类型。\n3、在结构体中添加一个Execute方法，具体执行的任务在这个方法里实现。",{"type":14,"tag":23,"props":69,"children":70},{},[71],{"type":20,"value":72},"当执行Job时，Execute方法会在一个内核上执行完毕。",{"type":14,"tag":23,"props":74,"children":75},{},[76,78,84,86,91],{"type":20,"value":77},"注意：设计job时，记住job操作的是数据的拷贝，除非使用",{"type":14,"tag":29,"props":79,"children":81},{"className":80},[],[82],{"type":20,"value":83},"NativeContainer",{"type":20,"value":85},"。所以，在主线程访问job数据的唯一方法就是写入",{"type":14,"tag":29,"props":87,"children":89},{"className":88},[],[90],{"type":20,"value":83},{"type":20,"value":92},"。",{"type":14,"tag":23,"props":94,"children":95},{},[96],{"type":20,"value":97},"实例代码如下：",{"type":14,"tag":99,"props":100,"children":105},"pre",{"className":101,"code":103,"language":104,"meta":7},[102],"language-cpp","// 这个Job的功能：将两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray\u003Cfloat> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n","cpp",[106],{"type":14,"tag":29,"props":107,"children":108},{"__ignoreMap":7},[109],{"type":20,"value":103},{"type":14,"tag":15,"props":111,"children":113},{"id":112},"调度job",[114],{"type":20,"value":115},"调度Job",{"type":14,"tag":23,"props":117,"children":118},{},[119],{"type":20,"value":120},"创建Job后，如何执行一个Job呢？",{"type":14,"tag":23,"props":122,"children":123},{},[124,126,132],{"type":20,"value":125},"这时候需要调度Job，调度Job的步骤如下：\n1、实例化Job\n2、构造Job的数据\n3、调用",{"type":14,"tag":29,"props":127,"children":129},{"className":128},[],[130],{"type":20,"value":131},"Schedule",{"type":20,"value":133},"方法。",{"type":14,"tag":23,"props":135,"children":136},{},[137,139,144],{"type":20,"value":138},"调用",{"type":14,"tag":29,"props":140,"children":142},{"className":141},[],[143],{"type":20,"value":131},{"type":20,"value":145},"方法会将Job放到Job执行队列的适当位置。一旦安排了Job后，就不能再中断job执行了。",{"type":14,"tag":23,"props":147,"children":148},{},[149,155,157,162],{"type":14,"tag":150,"props":151,"children":152},"strong",{},[153],{"type":20,"value":154},"注意",{"type":20,"value":156},"：只能在主线程中调用",{"type":14,"tag":29,"props":158,"children":160},{"className":159},[],[161],{"type":20,"value":131},{"type":20,"value":133},{"type":14,"tag":99,"props":164,"children":167},{"className":165,"code":166,"language":104,"meta":7},[102],"// 创建一个长度为1的native array用来存储job执行后的结果\nNativeArray\u003Cfloat> result = new NativeArray\u003Cfloat>(1, Allocator.TempJob);\n\n// 设置job的数据\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// Schedule\nJobHandle handle = jobData.Schedule();\n\n// 等待job执行完毕\nhandle.Complete();\n\n// 获取result中的数据\nfloat aPlusB = result[0];\n\n// 一定要释放native array申请的内存\nresult.Dispose();\n",[168],{"type":14,"tag":29,"props":169,"children":170},{"__ignoreMap":7},[171],{"type":20,"value":166},{"type":14,"tag":15,"props":173,"children":175},{"id":174},"job的依赖关系",[176],{"type":20,"value":177},"Job的依赖关系",{"type":14,"tag":23,"props":179,"children":180},{},[181],{"type":20,"value":182},"很多时候，Job并不是独立运行的，需要依赖前一个Job的结果，这时候如何调度呢？",{"type":14,"tag":184,"props":185,"children":187},"h2",{"id":186},"jobhandle",[188],{"type":20,"value":189},"JobHandle",{"type":14,"tag":23,"props":191,"children":192},{},[193,195,200,202,207,209,214,216,221,223,228],{"type":20,"value":194},"当调用",{"type":14,"tag":29,"props":196,"children":198},{"className":197},[],[199],{"type":20,"value":131},{"type":20,"value":201},"方法时，会返回一个",{"type":14,"tag":29,"props":203,"children":205},{"className":204},[],[206],{"type":20,"value":189},{"type":20,"value":208},"。你可以使用这个",{"type":14,"tag":29,"props":210,"children":212},{"className":211},[],[213],{"type":20,"value":189},{"type":20,"value":215},"作为其他job的依赖项。具体方法就是将第一个job的",{"type":14,"tag":29,"props":217,"children":219},{"className":218},[],[220],{"type":20,"value":189},{"type":20,"value":222},"传给第二个job调用",{"type":14,"tag":29,"props":224,"children":226},{"className":225},[],[227],{"type":20,"value":131},{"type":20,"value":229},"时的参数，例如：",{"type":14,"tag":99,"props":231,"children":236},{"className":232,"code":234,"language":235,"meta":7},[233],"language-undefined","JobHandle firstJobHandle = firstJob.Schedule();\nsecondJob.Schedule(firstJobHandle);\n","undefined",[237],{"type":14,"tag":29,"props":238,"children":239},{"__ignoreMap":7},[240],{"type":20,"value":234},{"type":14,"tag":23,"props":242,"children":243},{},[244,246,252],{"type":20,"value":245},"那如果一个job有多个依赖项怎么办呢？这时候可以用",{"type":14,"tag":29,"props":247,"children":249},{"className":248},[],[250],{"type":20,"value":251},"JobHandle.CombineDependencies",{"type":20,"value":253},"方法合并他们。具体如下：",{"type":14,"tag":99,"props":255,"children":258},{"className":256,"code":257,"language":104,"meta":7},[102],"// 声明一个JobHandle的NativeArray数组\nNativeArray\u003CJobHandle> handles = new NativeArray\u003CJobHandle>(numJobs, Allocator.TempJob);\n\n// 将多个handles放到数组中\n\n// 将多个handles合并到一起\nJobHandle jh = JobHandle.CombineDependencies(handles);\n",[259],{"type":14,"tag":29,"props":260,"children":261},{"__ignoreMap":7},[262],{"type":20,"value":257},{"type":14,"tag":15,"props":264,"children":266},{"id":265},"等待job执行完毕",[267],{"type":20,"value":268},"等待Job执行完毕",{"type":14,"tag":23,"props":270,"children":271},{},[272,274,279,281,287,289,294,296,301],{"type":20,"value":273},"在主线程中如何等待Job执行完毕呢？可以调用",{"type":14,"tag":29,"props":275,"children":277},{"className":276},[],[278],{"type":20,"value":189},{"type":20,"value":280},"中的",{"type":14,"tag":29,"props":282,"children":284},{"className":283},[],[285],{"type":20,"value":286},"Complete",{"type":20,"value":288},"方法强制等待。",{"type":14,"tag":29,"props":290,"children":292},{"className":291},[],[293],{"type":20,"value":286},{"type":20,"value":295},"方法执行过后，你就可以在主线程中安全地访问job中使用的",{"type":14,"tag":29,"props":297,"children":299},{"className":298},[],[300],{"type":20,"value":83},{"type":20,"value":302},"了。",{"type":14,"tag":23,"props":304,"children":305},{},[306,310,312,318],{"type":14,"tag":150,"props":307,"children":308},{},[309],{"type":20,"value":154},{"type":20,"value":311},"\n当你调用job的Schedule方法后，job并不会立即开始执行。如果你在主线程中等待job执行完毕，并且你需要访问job使用的NativeContainer中的数据时，你可以调用",{"type":14,"tag":29,"props":313,"children":315},{"className":314},[],[316],{"type":20,"value":317},"JobHandle.Complete",{"type":20,"value":319},"方法。这个方法会启动job的执行。调用JobHandle的Complete方法后，会将job的NativeContainer所有权还给主线程。所以只有调用过JobHandle上的Complete方法后，主线程才能安全的访问NativeContainer中的数据。同理，也可以调用依赖此job的JobHandle上的Complete方法。例如，你可以调用jobA的Complete方法，也可以调用依赖jobA的JobB的Complete方法。这两种情况下，主线程都可以安全访问jobA使用的NativeContainer。",{"type":14,"tag":184,"props":321,"children":323},{"id":322},"实例代码",[324],{"type":20,"value":322},{"type":14,"tag":23,"props":326,"children":327},{},[328],{"type":20,"value":329},"Job代码：",{"type":14,"tag":99,"props":331,"children":334},{"className":332,"code":333,"language":104,"meta":7},[102],"// Job：两个浮点数相加\npublic struct MyJob : IJob\n{\n    public float a;\n    public float b;\n    public NativeArray\u003Cfloat> result;\n\n    public void Execute()\n    {\n        result[0] = a + b;\n    }\n}\n\n// Job：给一个值加一\npublic struct AddOneJob : IJob\n{\n    public NativeArray\u003Cfloat> result;\n    \n    public void Execute()\n    {\n        result[0] = result[0] + 1;\n    }\n}\n",[335],{"type":14,"tag":29,"props":336,"children":337},{"__ignoreMap":7},[338],{"type":20,"value":333},{"type":14,"tag":23,"props":340,"children":341},{},[342],{"type":20,"value":343},"主线程代码：",{"type":14,"tag":99,"props":345,"children":348},{"className":346,"code":347,"language":104,"meta":7},[102],"// 创建存储结果的NativeArray\nNativeArray\u003Cfloat> result = new NativeArray\u003Cfloat>(1, Allocator.TempJob);\n\n// 设置job #1\nMyJob jobData = new MyJob();\njobData.a = 10;\njobData.b = 10;\njobData.result = result;\n\n// 调度job1\nJobHandle firstHandle = jobData.Schedule();\n\n// 设置job2\nAddOneJob incJobData = new AddOneJob();\nincJobData.result = result;\n\n// 调度 job2，依赖job1\nJobHandle secondHandle = incJobData.Schedule(firstHandle);\n\n// 等待job2执行完毕\nsecondHandle.Complete();\n\n// 访问结果\nfloat aPlusB = result[0];\n\n// 释放内存\nresult.Dispose();\n",[349],{"type":14,"tag":29,"props":350,"children":351},{"__ignoreMap":7},[352],{"type":20,"value":347},{"type":14,"tag":15,"props":354,"children":356},{"id":355},"相关链接",[357],{"type":20,"value":355},{"type":14,"tag":359,"props":360,"children":361},"ul",{},[362,375,385,395],{"type":14,"tag":363,"props":364,"children":365},"li",{},[366],{"type":14,"tag":367,"props":368,"children":372},"a",{"href":369,"rel":370},"https://docs.unity3d.com/cn/2020.2/Manual/JobSystem.html",[371],"nofollow",[373],{"type":20,"value":374},"C# 作业系统 - Unity 手册 (unity3d.com)",{"type":14,"tag":363,"props":376,"children":377},{},[378],{"type":14,"tag":367,"props":379,"children":382},{"href":380,"rel":381},"https://mp.weixin.qq.com/s/ZOVzDZQYBkfs6gAdrTMJUA",[371],[383],{"type":20,"value":384},"Job System介绍",{"type":14,"tag":363,"props":386,"children":387},{},[388],{"type":14,"tag":367,"props":389,"children":392},{"href":390,"rel":391},"https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247495224&idx=1&sn=6da0b515c54aee71ae64166369ae2320&chksm=fe1dda93c96a53851da09775d9c4a8947a26b26dfdc4aba2775685efee3451c026a8d353a851&mpshare=1&scene=23&srcid=1026M4Dnvzb65VokHexArRV2#rd",[371],[393],{"type":20,"value":394},"深入解读Job System（1） ",{"type":14,"tag":363,"props":396,"children":397},{},[398],{"type":14,"tag":367,"props":399,"children":402},{"href":400,"rel":401},"https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247495225&idx=1&sn=8c7212a747704da0b85d364529464509&chksm=fe1dda92c96a53848bca7cf95731ce8a9c853c80a4d3e7aa3f249c87d3a50620f30ce85254d6&mpshare=1&scene=23&srcid=1026HlBykd8qHTStfScE4ION#rd",[371],[403],{"type":20,"value":404},"深入解读Job system（2）",{"title":7,"searchDepth":406,"depth":406,"links":407},2,[408,409],{"id":186,"depth":406,"text":189},{"id":322,"depth":406,"text":322},"markdown","content:unity:2020-10-16-unity-job.md","content","unity/2020-10-16-unity-job.md","md","2020-10-16",[417,427,554,603,655,668,780],{"title":418,"_path":419,"children":420},"Art","/art",[421,424],{"title":422,"_path":423},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":425,"_path":426},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":428,"_path":429,"children":430},"Dotnet","/dotnet",[431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551],{"title":432,"_path":433},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":435,"_path":436},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":438,"_path":439},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":441,"_path":442},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":444,"_path":445},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":447,"_path":448},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":450,"_path":451},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":453,"_path":454},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":456,"_path":457},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":459,"_path":460},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":462,"_path":463},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":465,"_path":466},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":468,"_path":469},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":471,"_path":472},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":474,"_path":475},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":477,"_path":478},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":480,"_path":481},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":483,"_path":484},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":486,"_path":487},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":489,"_path":490},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":492,"_path":493},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":495,"_path":496},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":498,"_path":499},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":501,"_path":502},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":504,"_path":505},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":507,"_path":508},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":510,"_path":511},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":513,"_path":514},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":516,"_path":517},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":519,"_path":520},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":522,"_path":523},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":525,"_path":526},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":528,"_path":529},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":531,"_path":532},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":534,"_path":535},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":537,"_path":538},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":540,"_path":541},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":543,"_path":544},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":546,"_path":547},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":549,"_path":550},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":552,"_path":553},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":555,"_path":556,"children":557},"Game","/game",[558,561,564,567,570,573,576,579,582,585,588,591,594,597,600],{"title":559,"_path":560},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":562,"_path":563},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":565,"_path":566},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":568,"_path":569},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":571,"_path":572},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":574,"_path":575},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":577,"_path":578},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":580,"_path":581},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":583,"_path":584},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":586,"_path":587},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":589,"_path":590},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":592,"_path":593},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":595,"_path":596},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":598,"_path":599},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":601,"_path":602},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":604,"_path":605,"children":606},"Gyj","/gyj",[607,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652],{"title":608,"_path":609},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":611,"_path":612},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":614,"_path":615},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":617,"_path":618},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":620,"_path":621},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":623,"_path":624},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":626,"_path":627},"玩法","/gyj/2022-08-22-wanfa",{"title":629,"_path":630},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":632,"_path":633},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":635,"_path":636},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":638,"_path":639},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":641,"_path":642},"门派内容相关","/gyj/2022-11-17-sect",{"title":644,"_path":645},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":647,"_path":648},"种植","/gyj/2022-12-01-zhongzhi",{"title":650,"_path":651},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":653,"_path":654},"跑商","/gyj/2023-11-01-paoshang",{"title":656,"_path":657,"children":658},"Js","/js",[659,662,665],{"title":660,"_path":661},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":663,"_path":664},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":666,"_path":667},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":669,"_path":670,"children":671},"Tool","/tool",[672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777],{"title":673,"_path":674},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":676,"_path":677},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":679,"_path":680},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":682,"_path":683},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":685,"_path":686},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":688,"_path":689},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":691,"_path":692},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":694,"_path":695},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":697,"_path":698},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":700,"_path":701},"mac下brew 使用","/tool/2020-01-13-brew",{"title":703,"_path":704},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":706,"_path":707},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":709,"_path":710},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":712,"_path":713},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":715,"_path":716},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":718,"_path":719},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":721,"_path":722},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":724,"_path":725},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":727,"_path":728},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":730,"_path":731},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":733,"_path":734},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":736,"_path":737},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":739,"_path":740},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":742,"_path":743},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":745,"_path":746},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":748,"_path":749},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":751,"_path":752},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":754,"_path":755},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":757,"_path":758},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":760,"_path":761},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":763,"_path":764},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":766,"_path":767},"rider的使用","/tool/2022-08-02-rider-use",{"title":769,"_path":770},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":772,"_path":773},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":775,"_path":776},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":778,"_path":779},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":781,"_path":782,"children":783},"Unity","/unity",[784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832,835,838,841,844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901,902,905,908,911,914,917,920,923,926,929,932,935,938,941,944,947,950,953,956,959,962,965,968,971,974,977,980,983,986,989,992,995],{"title":785,"_path":786},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":788,"_path":789},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":791,"_path":792},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":794,"_path":795},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":797,"_path":798},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":800,"_path":801},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":803,"_path":804},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":806,"_path":807},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":809,"_path":810},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":812,"_path":813},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":815,"_path":816},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":818,"_path":819},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":821,"_path":822},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":824,"_path":825},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":827,"_path":828},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":830,"_path":831},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":833,"_path":834},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":836,"_path":837},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":839,"_path":840},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":842,"_path":843},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":845,"_path":846},"技能系统","/unity/2020-02-15-skill-system",{"title":848,"_path":849},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":851,"_path":852},"角色状态设计","/unity/2020-02-17-character-states",{"title":854,"_path":855},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":857,"_path":858},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":860,"_path":861},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":863,"_path":864},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":866,"_path":867},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":869,"_path":870},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":872,"_path":873},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":875,"_path":876},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":878,"_path":879},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":881,"_path":882},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":884,"_path":885},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":887,"_path":888},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":890,"_path":891},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":893,"_path":894},"unity的addressables","/unity/2020-09-12-addressables",{"title":896,"_path":897},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":899,"_path":900},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":8,"_path":4},{"title":903,"_path":904},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":906,"_path":907},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":909,"_path":910},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":912,"_path":913},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":915,"_path":916},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":918,"_path":919},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":921,"_path":922},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":924,"_path":925},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":927,"_path":928},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":930,"_path":931},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":933,"_path":934},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":936,"_path":937},"简单保存工具","/unity/2020-11-13-simple-save",{"title":939,"_path":940},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":942,"_path":943},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":945,"_path":946},"ability","/unity/2020-11-16-dotssample",{"title":948,"_path":949},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":951,"_path":952},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":954,"_path":955},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":957,"_path":958},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":960,"_path":961},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":963,"_path":964},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":966,"_path":967},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":969,"_path":970},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":972,"_path":973},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":975,"_path":976},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":978,"_path":979},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":981,"_path":982},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":984,"_path":985},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":987,"_path":988},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":990,"_path":991},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":993,"_path":994},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":996,"_path":997},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039595]