[{"data":1,"prerenderedAt":1020},["Reactive",2],{"content-query-n7zaI1mJvd":3,"content-navigation-8C37fagqQL":438},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":432,"_id":433,"_source":434,"_file":435,"_extension":436,"date":437},"/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs","unity",false,"","如何使用Unity ECS打造Reactive System？","1. 使用SystemStateComponent原理所谓State，含义是只能被手动删除的Component，在删除Entity后，依然留下做一些殿后工作，只有被指名要求删除的时候才会被删除。这种特性就让我们可以通过不同的Query去获得结构变化的消息。栗子假设我们有一个Entity，身上有两个组件，A：IComponentData 与 B: ISystemStateComponentData当我们添加A组件的时候，通过Filter{ 有A无B }，我们可以在别处得知这个Entity何时被添加。在添加后手动加入B组件。当我们删除Entity，或者移除A组件的时候，通过Filter { 有B无",{"type":11,"children":12,"toc":413},"root",[13,22,27,33,38,58,63,69,74,84,88,94,99,105,110,121,126,135,140,180,185,199,204,227,233,241,246,255,261,266,274,279,288,294,299,304,313,319,324,347,356,362,374,384,394,404],{"type":14,"tag":15,"props":16,"children":18},"element","h3",{"id":17},"_1-使用systemstatecomponent",[19],{"type":20,"value":21},"text","1. 使用SystemStateComponent",{"type":14,"tag":15,"props":23,"children":25},{"id":24},"原理",[26],{"type":20,"value":24},{"type":14,"tag":28,"props":29,"children":30},"p",{},[31],{"type":20,"value":32},"所谓State，含义是只能被手动删除的Component，在删除Entity后，依然留下做一些殿后工作，只有被指名要求删除的时候才会被删除。这种特性就让我们可以通过不同的Query去获得结构变化的消息。",{"type":14,"tag":15,"props":34,"children":36},{"id":35},"栗子",[37],{"type":20,"value":35},{"type":14,"tag":39,"props":40,"children":41},"ol",{},[42,48,53],{"type":14,"tag":43,"props":44,"children":45},"li",{},[46],{"type":20,"value":47},"假设我们有一个Entity，身上有两个组件，A：IComponentData 与 B: ISystemStateComponentData",{"type":14,"tag":43,"props":49,"children":50},{},[51],{"type":20,"value":52},"当我们添加A组件的时候，通过Filter{ 有A无B }，我们可以在别处得知这个Entity何时被添加。在添加后手动加入B组件。",{"type":14,"tag":43,"props":54,"children":55},{},[56],{"type":20,"value":57},"当我们删除Entity，或者移除A组件的时候，通过Filter { 有B无A }，同理可得知何时这个Entity被移除或是A组件被移除。",{"type":14,"tag":28,"props":59,"children":60},{},[61],{"type":20,"value":62},"更具体的实现可以在查看官方对于ParentSystem的设计。",{"type":14,"tag":15,"props":64,"children":66},{"id":65},"_2-查询componentversion",[67],{"type":20,"value":68},"2. 查询ComponentVersion",{"type":14,"tag":28,"props":70,"children":71},{},[72],{"type":20,"value":73},"每当出现某Component相关的结构性变化的时候，该Component的版本就会+1 。",{"type":14,"tag":75,"props":76,"children":78},"pre",{"code":77},"EntityManager.GetComponentVersion()\n",[79],{"type":14,"tag":80,"props":81,"children":82},"code",{"__ignoreMap":7},[83],{"type":20,"value":77},{"type":14,"tag":85,"props":86,"children":87},"hr",{},[],{"type":14,"tag":89,"props":90,"children":92},"h2",{"id":91},"数据变化",[93],{"type":20,"value":91},{"type":14,"tag":28,"props":95,"children":96},{},[97],{"type":20,"value":98},"顾名思义。方法有三种。",{"type":14,"tag":15,"props":100,"children":102},{"id":101},"_1-chunk检查",[103],{"type":20,"value":104},"1. Chunk检查",{"type":14,"tag":15,"props":106,"children":108},{"id":107},"原理-1",[109],{"type":20,"value":24},{"type":14,"tag":75,"props":111,"children":116},{"code":112,"language":113,"meta":7,"className":114},"chunk.DidChange(ArchetypeChunkComponentType, version)\n","csharp",[115],"language-csharp",[117],{"type":14,"tag":80,"props":118,"children":119},{"__ignoreMap":7},[120],{"type":20,"value":112},{"type":14,"tag":28,"props":122,"children":123},{},[124],{"type":20,"value":125},"查看其内部实现",{"type":14,"tag":75,"props":127,"children":130},{"code":128,"language":113,"meta":7,"className":129},"if ( ComponentVer > LastSystemVersion ) \n",[115],[131],{"type":14,"tag":80,"props":132,"children":133},{"__ignoreMap":7},[134],{"type":20,"value":128},{"type":14,"tag":28,"props":136,"children":137},{},[138],{"type":20,"value":139},"什么意思呢？",{"type":14,"tag":39,"props":141,"children":142},{},[143,156,175],{"type":14,"tag":43,"props":144,"children":145},{},[146,148,154],{"type":20,"value":147},"GlobalSystemVersion为记录一个世界所有系统更新信息的版本号。在每一个系统更新",{"type":14,"tag":149,"props":150,"children":151},"strong",{},[152],{"type":20,"value":153},"之前",{"type":20,"value":155},"，GSV++。",{"type":14,"tag":43,"props":157,"children":158},{},[159,161,166,168,173],{"type":20,"value":160},"LastSystemVersion为系统记录自己的版本号。在某系统更新",{"type":14,"tag":149,"props":162,"children":163},{},[164],{"type":20,"value":165},"之后",{"type":20,"value":167},"，它会保存GSV，含义是",{"type":14,"tag":149,"props":169,"children":170},{},[171],{"type":20,"value":172},"上次",{"type":20,"value":174},"运行时的版本号，直到下次某系统更新之后，它的版本号不会更改",{"type":14,"tag":43,"props":176,"children":177},{},[178],{"type":20,"value":179},"每一种Component，在System申请写入权限的时候，都会记录该System的LSV 获取方式为chunk.GetArch",{"type":14,"tag":28,"props":181,"children":182},{},[183],{"type":20,"value":184},"因此，if ( ComponentVer > LSV ) 就说明该Component被修改了（有系统获得了写入权限）。翻译成大白话，就是Component是否在提供的版本号之后的时间被更新？在当前系统请求LSV的结果是上一帧该系统的版本号，如果Component被写入时的版本号大于该系统上一帧的版本号，就说明Component在此时至上一帧的某个时间点被写入。",{"type":14,"tag":186,"props":187,"children":188},"ul",{},[189,194],{"type":14,"tag":43,"props":190,"children":191},{},[192],{"type":20,"value":193},"由于这个Component只有在遍历的时候申请写入权限时才会记住版本号，因此EntityManager手动更新信息是不会被记录的。",{"type":14,"tag":43,"props":195,"children":196},{},[197],{"type":20,"value":198},"这个信息时效性只有一帧，从上次该系统更新后到这次更新后的一帧，因此在这次更新中，修改Component后查询是否改变，答案是True，反之为False。",{"type":14,"tag":15,"props":200,"children":202},{"id":201},"举例",[203],{"type":20,"value":201},{"type":14,"tag":39,"props":205,"children":206},{},[207,212,217,222],{"type":14,"tag":43,"props":208,"children":209},{},[210],{"type":20,"value":211},"系统的更新顺序为A->B->C->A",{"type":14,"tag":43,"props":213,"children":214},{},[215],{"type":20,"value":216},"那么GSV ：0 -> 1 -> 2 -> 3，每个系统更新之前+1",{"type":14,"tag":43,"props":218,"children":219},{},[220],{"type":20,"value":221},"当数据在B系统被写入，Component就记住了B的GSV = 1",{"type":14,"tag":43,"props":223,"children":224},{},[225],{"type":20,"value":226},"当我们在第二次轮到A系统的时候监测是否Component被改动，DidChange自动使用A系统上次的GSV记录 LSV = 0 与 Component记录的信息CV = 1做对比，发现CV > LSV，得知信息已经被更改了，返回True。",{"type":14,"tag":15,"props":228,"children":230},{"id":229},"api",[231],{"type":20,"value":232},"API",{"type":14,"tag":75,"props":234,"children":236},{"code":235},"chunk.DidChange(InputAType, LastSystemVersion);\n",[237],{"type":14,"tag":80,"props":238,"children":239},{"__ignoreMap":7},[240],{"type":20,"value":235},{"type":14,"tag":28,"props":242,"children":243},{},[244],{"type":20,"value":245},"注意LSV应从EntityManager.LastSystemVersion取得，并传入Job",{"type":14,"tag":75,"props":247,"children":250},{"code":248,"language":113,"meta":7,"className":249},"[BurstCompile]\nstruct UpdateJob : IJobChunk\n{\n   public ArchetypeChunkComponentType\u003CInputA> InputAType;\n   public ArchetypeChunkComponentType\u003CInputB> InputBType;\n   [ReadOnly] public ArchetypeChunkComponentType\u003COutput> OutputType;\n   public uint LastSystemVersion;\n\n   public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex)\n   {\n       var inputAChanged = chunk.DidChange(InputAType, LastSystemVersion);\n       var inputBChanged = chunk.DidChange(InputBType, LastSystemVersion);\n       if (!(inputAChanged || inputBChanged))\n           return;\n      //...\n}\n",[115],[251],{"type":14,"tag":80,"props":252,"children":253},{"__ignoreMap":7},[254],{"type":20,"value":248},{"type":14,"tag":15,"props":256,"children":258},{"id":257},"_2-query自动检查",[259],{"type":20,"value":260},"2. Query自动检查",{"type":14,"tag":28,"props":262,"children":263},{},[264],{"type":20,"value":265},"在声明Query的时候，特别注明",{"type":14,"tag":75,"props":267,"children":269},{"code":268},"m_Group.SetFilterChanged(new ComponentType{ typeof(InputA), typeof(InputB)});\n",[270],{"type":14,"tag":80,"props":271,"children":272},{"__ignoreMap":7},[273],{"type":20,"value":268},{"type":14,"tag":28,"props":275,"children":276},{},[277],{"type":20,"value":278},"这样Query就会把没被修改的ComponentType排除在外。注意，这种检查是Component层级，而不是单个Entity层级的。",{"type":14,"tag":75,"props":280,"children":283},{"code":281,"language":113,"meta":7,"className":282},"EntityQuery m_Group;\nprotected override void OnCreate()\n{\n   m_Group = GetEntityQuery(typeof(Output), \n                               ComponentType.ReadOnly\u003CInputA>(), \n                               ComponentType.ReadOnly\u003CInputB>());\n   m_Group.SetFilterChanged(new ComponentType{ typeof(InputA), typeof(InputB)});\n}\n",[115],[284],{"type":14,"tag":80,"props":285,"children":286},{"__ignoreMap":7},[287],{"type":20,"value":281},{"type":14,"tag":15,"props":289,"children":291},{"id":290},"_3-ijobforeach中使用-changefilter",[292],{"type":20,"value":293},"3. IJobForEach中使用 [ChangeFilter]",{"type":14,"tag":28,"props":295,"children":296},{},[297],{"type":20,"value":298},"与Query的排除效果类似。",{"type":14,"tag":15,"props":300,"children":302},{"id":301},"示例",[303],{"type":20,"value":301},{"type":14,"tag":75,"props":305,"children":308},{"code":306,"language":113,"meta":7,"className":307},"public struct ProcessTendency : IJobForEachWithEntity\u003CHumanState, HumanStock>\n{\n    public void Execute(Entity entity, int index, [ChangedFilter] ref State state)\n    {\n",[115],[309],{"type":14,"tag":80,"props":310,"children":311},{"__ignoreMap":7},[312],{"type":20,"value":306},{"type":14,"tag":89,"props":314,"children":316},{"id":315},"best-practice",[317],{"type":20,"value":318},"Best Practice",{"type":14,"tag":28,"props":320,"children":321},{},[322],{"type":20,"value":323},"对自己的系统做了一些单元测试后，我觉得有几点应该记录下来。",{"type":14,"tag":186,"props":325,"children":326},{},[327,332,337,342],{"type":14,"tag":43,"props":328,"children":329},{},[330],{"type":20,"value":331},"如果要做一套响应式系统循环触发，慎用EntityManager获取信息。因为EntityManager的Get系列API会直接获取写入权限。",{"type":14,"tag":43,"props":333,"children":334},{},[335],{"type":20,"value":336},"Job有延迟，因此单元测试的时候，如果涉及Version，应该做一些操作“等待”正确的版本号刷新，比如Debug.Log()。",{"type":14,"tag":43,"props":338,"children":339},{},[340],{"type":20,"value":341},"GetEntityQuery会在系统注册，因此在Query里SetFilterChanged即可，毋需在Execute()中再声明一遍。",{"type":14,"tag":43,"props":343,"children":344},{},[345],{"type":20,"value":346},"在主线程获取DynamicBuffer的长度时，Query与EM都不能做到以只读方式做到。因此正确的做法是",{"type":14,"tag":75,"props":348,"children":351},{"code":349,"language":113,"meta":7,"className":350},"var query    = GetEntityQuery(ComponentType.ReadOnly\u003CT>());\nvar entities  = query.ToEntityArray(Allocator.TempJob);\nvar entity    = entities[0];\nvar length   = EntityManager.GetChunk(entity).GetBufferAccessor(GetArchetypeChunkBufferType\u003CTendency>(true))[0].Length;\nentities.Dispose();\n",[115],[352],{"type":14,"tag":80,"props":353,"children":354},{"__ignoreMap":7},[355],{"type":20,"value":349},{"type":14,"tag":89,"props":357,"children":359},{"id":358},"reference",[360],{"type":20,"value":361},"Reference",{"type":14,"tag":28,"props":363,"children":364},{},[365],{"type":14,"tag":366,"props":367,"children":371},"a",{"href":368,"rel":369},"https://link.zhihu.com/?target=https%3A//gametorrahod.com/designing-an-efficient-system-with-version-numbers/",[370],"nofollow",[372],{"type":20,"value":373},"https://gametorrahod.com/designing-an-efficient-system-with-version-numbers/",{"type":14,"tag":28,"props":375,"children":376},{},[377],{"type":14,"tag":366,"props":378,"children":381},{"href":379,"rel":380},"https://link.zhihu.com/?target=https%3A//docs.unity3d.com/Packages/com.unity.entities%400.0/manual/chunk_iteration_job.html",[370],[382],{"type":20,"value":383},"Using IJobChunk | Package Manager UI website",{"type":14,"tag":28,"props":385,"children":386},{},[387],{"type":14,"tag":366,"props":388,"children":391},{"href":389,"rel":390},"https://medium.com/@icex33/coping-with-change-in-unity3d-ecs-45422fff8dda#id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6ImQ5NDZiMTM3NzM3Yjk3MzczOGU1Mjg2YzIwOGI2NmU3YTM5ZWU3YzEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2MDUxMTkzMDksImF1ZCI6IjIxNjI5NjAzNTgzNC1rMWs2cWUwNjBzMnRwMmEyamFtNGxqZGNtczAwc3R0Zy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNTYwNDIyOTcxMDAwNDczMDgwOCIsImVtYWlsIjoiemhlcGFtYUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXpwIjoiMjE2Mjk2MDM1ODM0LWsxazZxZTA2MHMydHAyYTJqYW00bGpkY21zMDBzdHRnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwibmFtZSI6IuadjuS5neS7mSIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLXlfSnhUTXJkQWk4L0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBL0FNWnV1Y25xLVNRSGVVR1FRUENfUjJ0Zk93RGh2QzRHbHcvczk2LWMvcGhvdG8uanBnIiwiZ2l2ZW5fbmFtZSI6IuS5neS7mSIsImZhbWlseV9uYW1lIjoi5p2OIiwiaWF0IjoxNjA1MTE5NjA5LCJleHAiOjE2MDUxMjMyMDksImp0aSI6IjQyM2E3NTM3NmE0YTZkNzI3ODgzYmYyZDIyMDljMGNjZTg2NDRjMTUifQ.eicZfv00n72yCqIDVFxy8XOMlWkcjychu8aPN6q9Cj61MvcJfIAAVgdREk1J5t4dpTxqN10FOZnfFxRZBnkbHFjjVLI0Lu1lYr7bE5NhxdRnjaNwbs-WQbuMHAKBeMvdKzIIeqRAswuHNlwtd_ATfON4V0v3aobOlVPOFUz3mgstb5cFhoH2oJIGTfnYj108-1_IVJRUoTo80Eii2gTEsC4frSGweQNZlu2XMnfsfRz3724NqinN7csfXXQ9zZ8vh29zHBgEUYnVh7JNOONr8A9wQY9RxI1v73HEC2YNFekuB87qCjGRpgUKGGFBaUwClpOifr9W-Z30U3t_TSgENw",[370],[392],{"type":20,"value":393},"Coping with Change in Unity3D ECS | by Maxim Zaks | Medium",{"type":14,"tag":28,"props":395,"children":396},{},[397],{"type":14,"tag":366,"props":398,"children":401},{"href":399,"rel":400},"https://www.effectiveunity.com/ecs/06-how-to-build-reactive-systems-with-unity-ecs-part-1/",[370],[402],{"type":20,"value":403},"How to build reactive systems with Unity ECS: Part 1 • Effective Unity",{"type":14,"tag":28,"props":405,"children":406},{},[407],{"type":14,"tag":366,"props":408,"children":411},{"href":409,"rel":410},"https://www.effectiveunity.com/ecs/07-how-to-build-reactive-systems-with-unity-ecs-part-2/",[370],[412],{"type":20,"value":409},{"title":7,"searchDepth":414,"depth":414,"links":415},2,[416,418,419,420,421,430,431],{"id":17,"depth":417,"text":21},3,{"id":24,"depth":417,"text":24},{"id":35,"depth":417,"text":35},{"id":65,"depth":417,"text":68},{"id":91,"depth":414,"text":91,"children":422},[423,424,425,426,427,428,429],{"id":101,"depth":417,"text":104},{"id":107,"depth":417,"text":24},{"id":201,"depth":417,"text":201},{"id":229,"depth":417,"text":232},{"id":257,"depth":417,"text":260},{"id":290,"depth":417,"text":293},{"id":301,"depth":417,"text":301},{"id":315,"depth":414,"text":318},{"id":358,"depth":414,"text":361},"markdown","content:unity:2020-11-11-how-to-build-reactive-systems-with-unity-ecs.md","content","unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs.md","md","2020-11-11",[439,449,576,625,677,690,802],{"title":440,"_path":441,"children":442},"Art","/art",[443,446],{"title":444,"_path":445},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":447,"_path":448},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":450,"_path":451,"children":452},"Dotnet","/dotnet",[453,456,459,462,465,468,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573],{"title":454,"_path":455},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":457,"_path":458},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":460,"_path":461},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":463,"_path":464},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":466,"_path":467},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":469,"_path":470},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":472,"_path":473},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":475,"_path":476},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":478,"_path":479},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":481,"_path":482},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":484,"_path":485},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":487,"_path":488},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":490,"_path":491},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":493,"_path":494},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":496,"_path":497},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":499,"_path":500},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":502,"_path":503},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":505,"_path":506},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":508,"_path":509},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":511,"_path":512},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":514,"_path":515},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":517,"_path":518},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":520,"_path":521},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":523,"_path":524},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":526,"_path":527},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":529,"_path":530},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":532,"_path":533},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":535,"_path":536},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":538,"_path":539},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":541,"_path":542},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":544,"_path":545},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":547,"_path":548},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":550,"_path":551},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":553,"_path":554},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":556,"_path":557},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":559,"_path":560},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":562,"_path":563},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":565,"_path":566},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":568,"_path":569},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":571,"_path":572},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":574,"_path":575},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":577,"_path":578,"children":579},"Game","/game",[580,583,586,589,592,595,598,601,604,607,610,613,616,619,622],{"title":581,"_path":582},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":584,"_path":585},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":587,"_path":588},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":590,"_path":591},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":593,"_path":594},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":596,"_path":597},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":599,"_path":600},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":602,"_path":603},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":605,"_path":606},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":608,"_path":609},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":611,"_path":612},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":614,"_path":615},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":617,"_path":618},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":620,"_path":621},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":623,"_path":624},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":626,"_path":627,"children":628},"Gyj","/gyj",[629,632,635,638,641,644,647,650,653,656,659,662,665,668,671,674],{"title":630,"_path":631},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":633,"_path":634},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":636,"_path":637},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":639,"_path":640},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":642,"_path":643},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":645,"_path":646},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":648,"_path":649},"玩法","/gyj/2022-08-22-wanfa",{"title":651,"_path":652},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":654,"_path":655},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":657,"_path":658},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":660,"_path":661},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":663,"_path":664},"门派内容相关","/gyj/2022-11-17-sect",{"title":666,"_path":667},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":669,"_path":670},"种植","/gyj/2022-12-01-zhongzhi",{"title":672,"_path":673},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":675,"_path":676},"跑商","/gyj/2023-11-01-paoshang",{"title":678,"_path":679,"children":680},"Js","/js",[681,684,687],{"title":682,"_path":683},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":685,"_path":686},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":688,"_path":689},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":691,"_path":692,"children":693},"Tool","/tool",[694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799],{"title":695,"_path":696},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":698,"_path":699},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":701,"_path":702},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":704,"_path":705},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":707,"_path":708},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":710,"_path":711},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":713,"_path":714},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":716,"_path":717},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":719,"_path":720},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":722,"_path":723},"mac下brew 使用","/tool/2020-01-13-brew",{"title":725,"_path":726},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":728,"_path":729},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":731,"_path":732},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":734,"_path":735},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":737,"_path":738},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":740,"_path":741},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":743,"_path":744},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":746,"_path":747},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":749,"_path":750},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":752,"_path":753},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":755,"_path":756},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":758,"_path":759},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":761,"_path":762},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":764,"_path":765},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":767,"_path":768},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":770,"_path":771},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":773,"_path":774},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":776,"_path":777},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":779,"_path":780},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":782,"_path":783},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":785,"_path":786},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":788,"_path":789},"rider的使用","/tool/2022-08-02-rider-use",{"title":791,"_path":792},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":794,"_path":795},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":797,"_path":798},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":800,"_path":801},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":803,"_path":804,"children":805},"Unity","/unity",[806,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,896,899,902,905,908,911,914,917,920,923,926,929,932,935,938,941,944,947,950,953,954,957,960,963,966,969,972,975,978,981,984,987,990,993,996,999,1002,1005,1008,1011,1014,1017],{"title":807,"_path":808},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":810,"_path":811},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":813,"_path":814},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":816,"_path":817},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":819,"_path":820},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":822,"_path":823},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":825,"_path":826},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":828,"_path":829},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":831,"_path":832},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":834,"_path":835},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":837,"_path":838},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":840,"_path":841},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":843,"_path":844},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":846,"_path":847},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":849,"_path":850},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":852,"_path":853},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":855,"_path":856},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":858,"_path":859},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":861,"_path":862},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":864,"_path":865},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":867,"_path":868},"技能系统","/unity/2020-02-15-skill-system",{"title":870,"_path":871},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":873,"_path":874},"角色状态设计","/unity/2020-02-17-character-states",{"title":876,"_path":877},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":879,"_path":880},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":882,"_path":883},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":885,"_path":886},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":888,"_path":889},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":891,"_path":892},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":894,"_path":895},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":897,"_path":898},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":900,"_path":901},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":903,"_path":904},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":906,"_path":907},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":909,"_path":910},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":912,"_path":913},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":915,"_path":916},"unity的addressables","/unity/2020-09-12-addressables",{"title":918,"_path":919},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":921,"_path":922},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":924,"_path":925},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":927,"_path":928},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":930,"_path":931},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":933,"_path":934},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":936,"_path":937},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":939,"_path":940},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":942,"_path":943},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":945,"_path":946},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":948,"_path":949},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":951,"_path":952},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":8,"_path":4},{"title":955,"_path":956},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":958,"_path":959},"简单保存工具","/unity/2020-11-13-simple-save",{"title":961,"_path":962},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":964,"_path":965},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":967,"_path":968},"ability","/unity/2020-11-16-dotssample",{"title":970,"_path":971},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":973,"_path":974},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":976,"_path":977},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":979,"_path":980},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":982,"_path":983},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":985,"_path":986},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":988,"_path":989},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":991,"_path":992},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":994,"_path":995},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":997,"_path":998},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1000,"_path":1001},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1003,"_path":1004},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1006,"_path":1007},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1009,"_path":1010},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1012,"_path":1013},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1015,"_path":1016},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1018,"_path":1019},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039244]