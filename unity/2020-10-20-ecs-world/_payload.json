[{"data":1,"prerenderedAt":665},["Reactive",2],{"content-query-nhAfL1ce4c":3,"content-navigation-8C37fagqQL":83},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":77,"_id":78,"_source":79,"_file":80,"_extension":81,"date":82},"/unity/2020-10-20-ecs-world","unity",false,"","源代码分析world的创建","Packages/com.unity.entities/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs",{"type":11,"children":12,"toc":74},"root",[13,20,30,35,40,48,53,61,66],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":21,"props":22,"children":24},"pre",{"code":23},"    static class AutomaticWorldBootstrap\n    {\n        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]\n        static void Initialize()\n        {\n            DefaultWorldInitialization.Initialize(\"Default World\", false);\n        }\n    }\n",[25],{"type":14,"tag":26,"props":27,"children":28},"code",{"__ignoreMap":7},[29],{"type":19,"value":23},{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":19,"value":34},"Packages/com.unity.entities/Unity.Entities/DefaultWorldInitialization.cs",{"type":14,"tag":15,"props":36,"children":37},{},[38],{"type":19,"value":39},"检查是否有bootstrap没有的话则自动创建world",{"type":14,"tag":21,"props":41,"children":43},{"code":42},"        /// \u003Csummary>\n        /// Initializes the default world or runs ICustomBootstrap if one is available.\n        /// \u003C/summary>\n        /// \u003Cparam name=\"defaultWorldName\">The name of the world that will be created. Unless there is a custom bootstrap.\u003C/param>\n        /// \u003Cparam name=\"editorWorld\">Editor worlds by default only include systems with [ExecuteAlways]. If editorWorld is true, ICustomBootstrap will not be used.\u003C/param>\n        public static World Initialize(string defaultWorldName, bool editorWorld = false)\n        {\n            RegisterUnloadOrPlayModeChangeShutdown();\n\n            if (!editorWorld)\n            {\n                var bootStrap = CreateBootStrap();\n                if (bootStrap != null && bootStrap.Initialize(defaultWorldName))\n                {\n                    Assert.IsTrue(World.DefaultGameObjectInjectionWorld != null,\n                        $\"ICustomBootstrap.Initialize() implementation failed to set \" +\n                        $\"World.DefaultGameObjectInjectionWorld, despite returning true \" +\n                        $\"(indicating the World has been properly initialized)\");\n                    return World.DefaultGameObjectInjectionWorld;\n                }\n            }\n\n            var world = new World(defaultWorldName, editorWorld ? WorldFlags.Editor : WorldFlags.Game);\n            World.DefaultGameObjectInjectionWorld = world;\n\n            var systemList = GetAllSystems(WorldSystemFilterFlags.Default, editorWorld);\n            AddSystemToRootLevelSystemGroupsInternal(world, systemList, systemList.Count);\n\n#if !UNITY_DOTSRUNTIME\n            ScriptBehaviourUpdateOrder.AddWorldToCurrentPlayerLoop(world);\n#endif\n\n            DefaultWorldInitialized?.Invoke(world);\n            return world;\n        }\n",[44],{"type":14,"tag":26,"props":45,"children":46},{"__ignoreMap":7},[47],{"type":19,"value":42},{"type":14,"tag":15,"props":49,"children":50},{},[51],{"type":19,"value":52},"查找可用的bootstrap并实例化",{"type":14,"tag":21,"props":54,"children":56},{"code":55},"        static ICustomBootstrap CreateBootStrap()\n        {\n#if !UNITY_DOTSRUNTIME\n            var bootstrapTypes = TypeManager.GetTypesDerivedFrom(typeof(ICustomBootstrap));\n            Type selectedType = null;\n\n            foreach (var bootType in bootstrapTypes)\n            {\n                if (bootType.IsAbstract || bootType.ContainsGenericParameters)\n                    continue;\n\n                if (selectedType == null)\n                    selectedType = bootType;\n                else if (selectedType.IsAssignableFrom(bootType))\n                    selectedType = bootType;\n                else if (!bootType.IsAssignableFrom(selectedType))\n                    Debug.LogError(\"Multiple custom ICustomBootstrap specified, ignoring \" + bootType);\n            }\n            ICustomBootstrap bootstrap = null;\n            if (selectedType != null)\n                bootstrap = Activator.CreateInstance(selectedType) as ICustomBootstrap;\n\n            return bootstrap;\n#else\n            throw new Exception(\"This method should have been replaced by code-gen.\");\n#endif\n        }\n",[57],{"type":14,"tag":26,"props":58,"children":59},{"__ignoreMap":7},[60],{"type":19,"value":55},{"type":14,"tag":15,"props":62,"children":63},{},[64],{"type":19,"value":65},"小技巧: 新建一个ICustomBootstrap,在Initialize抛出异常.则能在追踪栈找到代码的入口",{"type":14,"tag":21,"props":67,"children":69},{"code":68},"Multiple custom ICustomBootstrap specified, ignoring GameBootstrap\nUnityEngine.Debug:LogError(Object)\nUnity.Debug:LogError(Object) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/Stubs/Unity/Debug.cs:13)\nUnity.Entities.DefaultWorldInitialization:CreateBootStrap() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:351)\nUnity.Entities.DefaultWorldInitialization:Initialize(String, Boolean) (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities/DefaultWorldInitialization.cs:116)\nUnity.Entities.AutomaticWorldBootstrap:Initialize() (at Library/PackageCache/com.unity.entities@0.14.0-preview.18/Unity.Entities.Hybrid/Injection/AutomaticWorldBootstrap.cs:15)\n",[70],{"type":14,"tag":26,"props":71,"children":72},{"__ignoreMap":7},[73],{"type":19,"value":68},{"title":7,"searchDepth":75,"depth":75,"links":76},2,[],"markdown","content:unity:2020-10-20-ecs-world.md","content","unity/2020-10-20-ecs-world.md","md","2020-10-20",[84,94,221,270,322,335,447],{"title":85,"_path":86,"children":87},"Art","/art",[88,91],{"title":89,"_path":90},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":92,"_path":93},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":95,"_path":96,"children":97},"Dotnet","/dotnet",[98,101,104,107,110,113,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,176,179,182,185,188,191,194,197,200,203,206,209,212,215,218],{"title":99,"_path":100},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":102,"_path":103},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":105,"_path":106},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":108,"_path":109},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":111,"_path":112},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":114,"_path":115},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":117,"_path":118},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":120,"_path":121},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":123,"_path":124},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":126,"_path":127},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":129,"_path":130},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":132,"_path":133},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":135,"_path":136},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":138,"_path":139},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":141,"_path":142},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":144,"_path":145},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":147,"_path":148},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":150,"_path":151},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":153,"_path":154},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":156,"_path":157},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":159,"_path":160},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":162,"_path":163},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":165,"_path":166},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":168,"_path":169},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":171,"_path":172},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":174,"_path":175},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":177,"_path":178},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":180,"_path":181},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":183,"_path":184},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":186,"_path":187},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":189,"_path":190},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":192,"_path":193},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":195,"_path":196},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":198,"_path":199},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":201,"_path":202},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":204,"_path":205},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":207,"_path":208},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":210,"_path":211},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":213,"_path":214},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":216,"_path":217},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":219,"_path":220},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":222,"_path":223,"children":224},"Game","/game",[225,228,231,234,237,240,243,246,249,252,255,258,261,264,267],{"title":226,"_path":227},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":229,"_path":230},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":232,"_path":233},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":235,"_path":236},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":238,"_path":239},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":241,"_path":242},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":244,"_path":245},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":247,"_path":248},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":250,"_path":251},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":253,"_path":254},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":256,"_path":257},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":259,"_path":260},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":262,"_path":263},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":265,"_path":266},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":268,"_path":269},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":271,"_path":272,"children":273},"Gyj","/gyj",[274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319],{"title":275,"_path":276},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":278,"_path":279},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":281,"_path":282},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":284,"_path":285},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":287,"_path":288},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":290,"_path":291},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":293,"_path":294},"玩法","/gyj/2022-08-22-wanfa",{"title":296,"_path":297},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":299,"_path":300},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":302,"_path":303},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":305,"_path":306},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":308,"_path":309},"门派内容相关","/gyj/2022-11-17-sect",{"title":311,"_path":312},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":314,"_path":315},"种植","/gyj/2022-12-01-zhongzhi",{"title":317,"_path":318},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":320,"_path":321},"跑商","/gyj/2023-11-01-paoshang",{"title":323,"_path":324,"children":325},"Js","/js",[326,329,332],{"title":327,"_path":328},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":330,"_path":331},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":333,"_path":334},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":336,"_path":337,"children":338},"Tool","/tool",[339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423,426,429,432,435,438,441,444],{"title":340,"_path":341},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":343,"_path":344},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":346,"_path":347},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":349,"_path":350},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":352,"_path":353},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":355,"_path":356},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":358,"_path":359},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":361,"_path":362},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":364,"_path":365},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":367,"_path":368},"mac下brew 使用","/tool/2020-01-13-brew",{"title":370,"_path":371},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":373,"_path":374},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":376,"_path":377},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":379,"_path":380},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":382,"_path":383},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":385,"_path":386},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":388,"_path":389},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":391,"_path":392},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":394,"_path":395},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":397,"_path":398},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":400,"_path":401},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":403,"_path":404},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":406,"_path":407},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":409,"_path":410},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":412,"_path":413},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":415,"_path":416},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":418,"_path":419},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":421,"_path":422},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":424,"_path":425},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":427,"_path":428},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":430,"_path":431},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":433,"_path":434},"rider的使用","/tool/2022-08-02-rider-use",{"title":436,"_path":437},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":439,"_path":440},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":442,"_path":443},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":445,"_path":446},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":448,"_path":449,"children":450},"Unity","/unity",[451,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,499,502,505,508,511,514,517,520,523,526,529,532,535,538,541,544,547,550,553,556,559,562,565,568,571,574,577,580,581,584,587,590,593,596,599,602,605,608,611,614,617,620,623,626,629,632,635,638,641,644,647,650,653,656,659,662],{"title":452,"_path":453},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":455,"_path":456},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":458,"_path":459},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":461,"_path":462},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":464,"_path":465},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":467,"_path":468},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":470,"_path":471},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":473,"_path":474},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":476,"_path":477},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":479,"_path":480},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":482,"_path":483},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":485,"_path":486},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":488,"_path":489},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":491,"_path":492},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":494,"_path":495},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":497,"_path":498},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":500,"_path":501},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":503,"_path":504},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":506,"_path":507},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":509,"_path":510},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":512,"_path":513},"技能系统","/unity/2020-02-15-skill-system",{"title":515,"_path":516},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":518,"_path":519},"角色状态设计","/unity/2020-02-17-character-states",{"title":521,"_path":522},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":524,"_path":525},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":527,"_path":528},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":530,"_path":531},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":533,"_path":534},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":536,"_path":537},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":539,"_path":540},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":542,"_path":543},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":545,"_path":546},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":548,"_path":549},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":551,"_path":552},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":554,"_path":555},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":557,"_path":558},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":560,"_path":561},"unity的addressables","/unity/2020-09-12-addressables",{"title":563,"_path":564},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":566,"_path":567},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":569,"_path":570},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":572,"_path":573},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":575,"_path":576},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":578,"_path":579},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":8,"_path":4},{"title":582,"_path":583},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":585,"_path":586},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":588,"_path":589},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":591,"_path":592},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":594,"_path":595},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":597,"_path":598},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":600,"_path":601},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":603,"_path":604},"简单保存工具","/unity/2020-11-13-simple-save",{"title":606,"_path":607},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":609,"_path":610},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":612,"_path":613},"ability","/unity/2020-11-16-dotssample",{"title":615,"_path":616},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":618,"_path":619},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":621,"_path":622},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":624,"_path":625},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":627,"_path":628},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":630,"_path":631},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":633,"_path":634},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":636,"_path":637},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":639,"_path":640},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":642,"_path":643},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":645,"_path":646},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":648,"_path":649},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":651,"_path":652},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":654,"_path":655},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":657,"_path":658},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":660,"_path":661},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":663,"_path":664},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039460]