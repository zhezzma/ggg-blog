[{"data":1,"prerenderedAt":1805},["Reactive",2],{"content-query-RnuAL6zDsC":3,"content-navigation-8C37fagqQL":1223},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":1217,"_id":1218,"_source":1219,"_file":1220,"_extension":1221,"date":1222},"/unity/2020-02-18-bestpracticeunderstandingperformanceinunity","unity",false,"","理解托管堆","另一个Unity开发者面对的普遍问题是托管堆的意外扩展。在Unity中，托管堆的扩张比收缩更加容易。进一步说，Unity的垃圾回收策略倾向于碎片化内存，这可以防止收缩出来一个大的堆。",{"type":11,"children":12,"toc":1209},"root",[13,20,24,31,36,44,49,54,70,77,82,87,92,99,104,109,114,117,122,127,132,137,142,147,152,155,160,165,170,175,182,187,192,197,202,207,212,217,220,225,230,233,239,244,278,283,288,323,328,331,336,341,346,351,356,379,384,409,414,419,424,429,432,438,443,448,453,458,463,468,473,478,481,486,491,496,514,519,524,529,532,537,542,547,552,557,562,565,570,575,580,585,590,608,613,618,658,663,666,672,677,682,687,709,714,957,962,967,972,975,987,992,997,1043,1048,1096,1101,1106,1132,1137,1167,1172,1177,1180,1185,1190,1195],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":21,"props":22,"children":23},"hr",{},[],{"type":14,"tag":25,"props":26,"children":28},"h2",{"id":27},"技术细节托管堆怎样运行以及为什么它会扩张",[29],{"type":19,"value":30},"技术细节：托管堆怎样运行以及为什么它会扩张",{"type":14,"tag":15,"props":32,"children":33},{},[34],{"type":19,"value":35},"​    托管堆是内存中被项目脚本运行时（Mono或者IL2CPP）的内存管理器自动管理的部分。在托管代码中创造的所有对象必须被分配在托管堆上（请注意：严格的说，所有非空引用类型的对象和所有被装箱的值类型对象都必须被分配到托管堆上）。",{"type":14,"tag":15,"props":37,"children":38},{},[39],{"type":14,"tag":40,"props":41,"children":43},"img",{"alt":40,"src":42},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_0.png",[],{"type":14,"tag":15,"props":45,"children":46},{},[47],{"type":19,"value":48},"​    在上面的图表中，白色的方块表示分配到托管堆的内存量，它里面有颜色的方块表示托管堆内存空间中存储的数据值。当另外的值被需要时，将会从托管堆中分配更多空间。",{"type":14,"tag":15,"props":50,"children":51},{},[52],{"type":19,"value":53},"​    垃圾收集器周期运行（请注意：具体时间取决于不同的平台）。会清扫堆上的所有对象，检查那些不再被引用的对象并标记。然后删除没有被引用的对象，释放内存。",{"type":14,"tag":15,"props":55,"children":56},{},[57,59,68],{"type":19,"value":58},"​    至关重要的是，Unity的垃圾收集是，采用",{"type":14,"tag":60,"props":61,"children":65},"a",{"href":62,"rel":63},"https://en.wikipedia.org/wiki/Boehm_garbage_collector",[64],"nofollow",[66],{"type":19,"value":67},"Boehm GC算法",{"type":19,"value":69},"，是非世代和非压缩的。非世代意味着当执行一次收集的时候，GC必须清扫全部的托管堆，并且性能会随着堆的扩张而降低。非压缩意味着内存中的对象不会重新移动位置来使对象间的空隙关闭。",{"type":14,"tag":15,"props":71,"children":72},{},[73],{"type":14,"tag":40,"props":74,"children":76},{"alt":40,"src":75},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_1.png",[],{"type":14,"tag":15,"props":78,"children":79},{},[80],{"type":19,"value":81},"​    上面的图显示了一个内存片段的例子。当一个对象被释放时，其内存也会被清空。但是被释放的空间不会变成一个大的可用内存池的一部分。被释放对象两边的对象仍然被使用。由于这个原因，被释放的内存变成了其他内存段中间的空隙（这个空隙在上图中由红圈标明）。这个新释放的空间只能用于存储与它完全相同或者更小大小的对象。",{"type":14,"tag":15,"props":83,"children":84},{},[85],{"type":19,"value":86},"​    当分配一个对象时，请记住在内存中对象必须总是占用一段连续的空间。",{"type":14,"tag":15,"props":88,"children":89},{},[90],{"type":19,"value":91},"​    这导致了内存碎片的核心问题，虽然堆中的总可用空间是非常大的，但是可能一部分或者所有这些可用空间是被分配对象间的小空隙。在这种情况下，尽管可能会有足够的总空间来容纳一个确定大小的分配，但是托管堆找不到一块足够大的连续内存来适配这次分配。",{"type":14,"tag":15,"props":93,"children":94},{},[95],{"type":14,"tag":40,"props":96,"children":98},{"alt":40,"src":97},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_2.png",[],{"type":14,"tag":15,"props":100,"children":101},{},[102],{"type":19,"value":103},"​    然而，如果一个大的对象被分配，并且没有足够的连续空间来容纳这个对象，如同上图所示，那么Unity的内存管理器将执行两个操作。",{"type":14,"tag":15,"props":105,"children":106},{},[107],{"type":19,"value":108},"​    首先，如果垃圾收集器还没有运行，那么它就会运行。尝试释放足够的空间来填充内存分配的需求。",{"type":14,"tag":15,"props":110,"children":111},{},[112],{"type":19,"value":113},"​    如果，GC运行完毕，仍然没有可以满足需求的连续内存空间，那么托管堆将会被扩大。托管堆扩大的具体大小由平台决定；然而，大多数Unity平台将托管堆扩大一倍。",{"type":14,"tag":21,"props":115,"children":116},{},[],{"type":14,"tag":25,"props":118,"children":120},{"id":119},"托管堆的关键问题",[121],{"type":19,"value":119},{"type":14,"tag":15,"props":123,"children":124},{},[125],{"type":19,"value":126},"​    托管堆的核心问题是其扩张是以两倍进行的：",{"type":14,"tag":15,"props":128,"children":129},{},[130],{"type":19,"value":131},"​    ·当托管堆扩张时，Unity并不总是释放分配到托管堆的内存页，它采取一个优化策略，保持扩张的托管堆，即使托管堆大部分是空的。这用来避免当有更大的内存分配发生时需要重新扩大托管堆。",{"type":14,"tag":15,"props":133,"children":134},{},[135],{"type":19,"value":136},"​    ·在大多数平台上，Unity最终会将托管堆上那部分空的内存页释放回操作系统。这个发生的间隔时间是不能保证的，并且也不能被依靠。",{"type":14,"tag":15,"props":138,"children":139},{},[140],{"type":19,"value":141},"​    ·用于托管堆的地址空间（栈）不再会被返还给操作系统。",{"type":14,"tag":15,"props":143,"children":144},{},[145],{"type":19,"value":146},"​    ·对于32位程序来说，如果托管堆扩张收缩多次，这会导致地址空间（栈）耗尽。如果一个程序可用内存的地址空间（栈）被耗尽，操作系统将会终止这个程序。",{"type":14,"tag":15,"props":148,"children":149},{},[150],{"type":19,"value":151},"​    ·对于64位程序来说，地址空间（栈）足够大，这对于运行时间不超过人类平均寿命的程序来说基本不会发生。",{"type":14,"tag":21,"props":153,"children":154},{},[],{"type":14,"tag":25,"props":156,"children":158},{"id":157},"临时分配",[159],{"type":19,"value":157},{"type":14,"tag":15,"props":161,"children":162},{},[163],{"type":19,"value":164},"​    许多Unity项目都发现每帧有几十或几百kb的临时数据分配到托管堆处理。这通常对项目性能是非常有害的。考虑下面的计算：",{"type":14,"tag":15,"props":166,"children":167},{},[168],{"type":19,"value":169},"​    如果一个程序每帧分配1kb的临时内存，运行在每秒60帧的情况下，那么它每秒就会分配60kb的内存。在一分钟之内，这在内存中增加了3.6mb的垃圾。每秒执行一次垃圾回收器会降低性能，但是尝试在低内存设备上运行时每分钟分配3.6mb内存是有问题的。",{"type":14,"tag":15,"props":171,"children":172},{},[173],{"type":19,"value":174},"​    进一步说，考虑到加载操作。如果在一个繁重的资源加载过程中生成了大量的临时对象，并且这些对象被引用到该操作完成，那么垃圾回收器则不能释放这些临时对象并且托管堆需要扩张——即使托管堆中包含的许多这些对象马上就会被释放。",{"type":14,"tag":15,"props":176,"children":177},{},[178],{"type":14,"tag":40,"props":179,"children":181},{"alt":40,"src":180},"/images/2020-02-18-BestPracticeUnderstandingPerformanceInUnity/UnderstandingPerformanceinUnity-AssetAuditingSection_image_3.png",[],{"type":14,"tag":15,"props":183,"children":184},{},[185],{"type":19,"value":186},"​    保持对托管内存分配的追踪非常简单。在Unity的CPU Profiler中，概述写着“GC Alloc”那一列。这一行显示着在某一帧分配到托管堆的比特数。（请注意：这个数字与在制定帧分配的临时比特数不相同。分析器显示的事在特定帧被分配的比特数量，即使这些被分配内存的一些或全部在随后的帧中被复用。）将“Deep Profiling”选项打开，这就可以追踪这些内存分配是在哪些函数中发生的。",{"type":14,"tag":15,"props":188,"children":189},{},[190],{"type":19,"value":191},"​    Unity Profiler不会追踪那些没有发生在主线程的内存分配。因此，“GC Alloc”列就不能用来测量在用户自己创建的线程中的托管内存分配。可以把其他线程中的代码切换到主线程中执行来进行调试，或使用BeginThreadProfiling这个API来在Profiler的TimeLine选项卡中来显示样本。",{"type":14,"tag":15,"props":193,"children":194},{},[195],{"type":19,"value":196},"​    在目标设备上使用开发模式构建可以分析托管内存分配。",{"type":14,"tag":15,"props":198,"children":199},{},[200],{"type":19,"value":201},"​    请注意：一些脚本函数在Editor中运行会导致内存分配，但是当项目构建后就不会再产生内存分配。GetComponent就是最普遍的例子，这个函数在Editor中运行时总是会产生内存分配，但是在构建好的项目中就不会。",{"type":14,"tag":15,"props":203,"children":204},{},[205],{"type":19,"value":206},"​    总体来说，我们强烈的建议所有开发者当项目在交互状态时最小化托管堆内存分配。如果内存分配发生在没有交互操作的时候，比如说场景加载时，问题较少。",{"type":14,"tag":15,"props":208,"children":209},{},[210],{"type":19,"value":211},"​    Jetbrains Resharper这个Visual Studio插件可以帮助定位代码中的内存分配。",{"type":14,"tag":15,"props":213,"children":214},{},[215],{"type":19,"value":216},"​    使用Unity的深度分析模式来定位托管内存分配的特定原因。在深度分析模式，所有的函数的调用都被独立记录，在函数调用树中提供一个清晰界面来显示托管内存分配是在哪里发生的。请注意，深度分析模式不止在编辑器中，也可以使用命令行参数-deepprofiling在安卓和桌面上使用。在分析过程中深度分析器按钮保持灰色。",{"type":14,"tag":21,"props":218,"children":219},{},[],{"type":14,"tag":25,"props":221,"children":223},{"id":222},"基础内存维护",[224],{"type":19,"value":222},{"type":14,"tag":15,"props":226,"children":227},{},[228],{"type":19,"value":229},"​    有一些相对简单的技术来使托管堆内存分配降低。",{"type":14,"tag":21,"props":231,"children":232},{},[],{"type":14,"tag":234,"props":235,"children":237},"h4",{"id":236},"容器和数组重用",[238],{"type":19,"value":236},{"type":14,"tag":15,"props":240,"children":241},{},[242],{"type":19,"value":243},"​    当使用C#的容器类或者数组时，如果可能考虑重用或者缓存分配的容器或者数组。容器类暴露了一个Clear函数，当清除容器的值时不会释放分配给容器的内存。",{"type":14,"tag":245,"props":246,"children":247},"blockquote",{},[248,253,258,263,268,273],{"type":14,"tag":15,"props":249,"children":250},{},[251],{"type":19,"value":252},"void Update() {",{"type":14,"tag":15,"props":254,"children":255},{},[256],{"type":19,"value":257},"List nearestNeighbors = new List();",{"type":14,"tag":15,"props":259,"children":260},{},[261],{"type":19,"value":262},"findDistancesToNearestNeighbors(nearestNeighbors);",{"type":14,"tag":15,"props":264,"children":265},{},[266],{"type":19,"value":267},"nearestNeighbors.Sort();",{"type":14,"tag":15,"props":269,"children":270},{},[271],{"type":19,"value":272},"// … use the sorted list somehow …",{"type":14,"tag":15,"props":274,"children":275},{},[276],{"type":19,"value":277},"}",{"type":14,"tag":15,"props":279,"children":280},{},[281],{"type":19,"value":282},"​    当给一个复杂计算分配临时的“帮助性”容器时尤其好用。下面的代码是一个非常简单的例子：",{"type":14,"tag":15,"props":284,"children":285},{},[286],{"type":19,"value":287},"​    在这个例子中，nearestNeighbors列表每帧被分配一次，用于存储一些数据点。可以把这个列表非常简单的从这个函数中提出来放入函数所在的类中，这避免了每帧分配一个新的列表：",{"type":14,"tag":245,"props":289,"children":290},{},[291,296,300,305,310,315,319],{"type":14,"tag":15,"props":292,"children":293},{},[294],{"type":19,"value":295},"List m_NearestNeighbors = new List();",{"type":14,"tag":15,"props":297,"children":298},{},[299],{"type":19,"value":252},{"type":14,"tag":15,"props":301,"children":302},{},[303],{"type":19,"value":304},"m_NearestNeighbors.Clear();",{"type":14,"tag":15,"props":306,"children":307},{},[308],{"type":19,"value":309},"findDistancesToNearestNeighbors(NearestNeighbors);",{"type":14,"tag":15,"props":311,"children":312},{},[313],{"type":19,"value":314},"m_NearestNeighbors.Sort();",{"type":14,"tag":15,"props":316,"children":317},{},[318],{"type":19,"value":272},{"type":14,"tag":15,"props":320,"children":321},{},[322],{"type":19,"value":277},{"type":14,"tag":15,"props":324,"children":325},{},[326],{"type":19,"value":327},"​    在这个版本中，每帧列表的内存会被保持和重用。只有当列表需要被扩大时内存才会被分配。",{"type":14,"tag":21,"props":329,"children":330},{},[],{"type":14,"tag":234,"props":332,"children":334},{"id":333},"闭包和匿名函数",[335],{"type":19,"value":333},{"type":14,"tag":15,"props":337,"children":338},{},[339],{"type":19,"value":340},"​    当使用闭包和匿名函数时，有两点需要考虑。",{"type":14,"tag":15,"props":342,"children":343},{},[344],{"type":19,"value":345},"​    首先，所有函数引用在C#中都是引用类型，因此分配到了托管堆。临时内存分配可以通过作为一个参数传递函数引用很简单的创建。这个内存分配不管是使用匿名函数或者是预先定义好的函数来传递都会发生。",{"type":14,"tag":15,"props":347,"children":348},{},[349],{"type":19,"value":350},"​    其次，转换一个匿名函数为闭包显著增加了需要传递闭包到函数接收的内存量。",{"type":14,"tag":15,"props":352,"children":353},{},[354],{"type":19,"value":355},"​    考虑下面的代码：",{"type":14,"tag":245,"props":357,"children":358},{},[359,364,369,374],{"type":14,"tag":15,"props":360,"children":361},{},[362],{"type":19,"value":363},"List listOfNumbers = createListOfRandomNumbers();",{"type":14,"tag":15,"props":365,"children":366},{},[367],{"type":19,"value":368},"listOfNumbers.Sort( (x, y) =>",{"type":14,"tag":15,"props":370,"children":371},{},[372],{"type":19,"value":373},"(int)x.CompareTo((int)(y/2))",{"type":14,"tag":15,"props":375,"children":376},{},[377],{"type":19,"value":378},");",{"type":14,"tag":15,"props":380,"children":381},{},[382],{"type":19,"value":383},"​    这段代码使用了一个简单的匿名函数来控制第一行创建的列表成员的排序方式。可是，如果一个程序员想要重用这段代码，可以考虑使用一个局部变量来代替常量2，像下面这样：",{"type":14,"tag":245,"props":385,"children":386},{},[387,391,396,400,405],{"type":14,"tag":15,"props":388,"children":389},{},[390],{"type":19,"value":363},{"type":14,"tag":15,"props":392,"children":393},{},[394],{"type":19,"value":395},"int desiredDivisor = getDesiredDivisor();",{"type":14,"tag":15,"props":397,"children":398},{},[399],{"type":19,"value":368},{"type":14,"tag":15,"props":401,"children":402},{},[403],{"type":19,"value":404},"(int)x.CompareTo((int)(y/desiredDivisor))",{"type":14,"tag":15,"props":406,"children":407},{},[408],{"type":19,"value":378},{"type":14,"tag":15,"props":410,"children":411},{},[412],{"type":19,"value":413},"​    现在匿名函数需要在此函数作用范围之外获取一个变量的状态，所以变成了一个闭包。desiredDivisor变量必须通过某种方式传进闭包中，以便被闭包中的实际代码所使用。",{"type":14,"tag":15,"props":415,"children":416},{},[417],{"type":19,"value":418},"​    为了实现这个需求，C#生成了一个匿名类，用来保存闭包需要的超过作用范围的对象。当闭包被传入Sort函数时，将生成一个此类的副本，并且这个类的副本通过整数desiredDivisor的值来初始化。",{"type":14,"tag":15,"props":420,"children":421},{},[422],{"type":19,"value":423},"​    由于执行闭包需要实例化一个生成它的类的拷贝，在C#中所有类都是引用类型，那么执行一个闭包需要在托管堆中分配一个对象。",{"type":14,"tag":15,"props":425,"children":426},{},[427],{"type":19,"value":428},"​    总体来说，如果可能最好避免在C#中使用闭包。在性能敏感的代码中应该尽量最小化使用匿名函数和函数引用，尤其是在基于每帧执行的代码中。",{"type":14,"tag":21,"props":430,"children":431},{},[],{"type":14,"tag":234,"props":433,"children":435},{"id":434},"il2cpp下的匿名函数",[436],{"type":19,"value":437},"IL2CPP下的匿名函数",{"type":14,"tag":15,"props":439,"children":440},{},[441],{"type":19,"value":442},"​    目前，检查通过IL2CPP生成的代码，显示简单的声明以及指定一个System.Function类型的变量会分配一个新的对象。无论这个变量是显式（在一个函数或类中声明）或是隐式（作为一个函数的参数声明）都会这样。",{"type":14,"tag":15,"props":444,"children":445},{},[446],{"type":19,"value":447},"​    所以，在IL2CPP脚本后端下所有使用匿名函数的情况都会分配托管堆内存。Mono脚本后端不是这种情况。",{"type":14,"tag":15,"props":449,"children":450},{},[451],{"type":19,"value":452},"​    进一步说，在IL2CPP中，由于函数参数声明方式的不同，会有显著不同的托管堆内存分配量级的不同。正如预期的那样，闭包在每次调用中分配最多的内存。",{"type":14,"tag":15,"props":454,"children":455},{},[456],{"type":19,"value":457},"​    不直观的说，在IL2CPP脚本后端下，当作为一个参数传递预定义的函数时，分配近似于闭包的内存量。匿名函数在托管堆上生成最少量的暂时垃圾，这是通过一个或多个量级的指令实现的。",{"type":14,"tag":15,"props":459,"children":460},{},[461],{"type":19,"value":462},"​    所以，如果一个项目想要在IL2CPP脚本后端上发布，有三的关键点需要注意：",{"type":14,"tag":15,"props":464,"children":465},{},[466],{"type":19,"value":467},"​    ·采取不需要传递函数作为参数的的编码风格",{"type":14,"tag":15,"props":469,"children":470},{},[471],{"type":19,"value":472},"​    ·当这种情况不可避免时，采用匿名函数而不是预定义函数",{"type":14,"tag":15,"props":474,"children":475},{},[476],{"type":19,"value":477},"​    ·避免闭包，不管用什么脚本后端",{"type":14,"tag":21,"props":479,"children":480},{},[],{"type":14,"tag":25,"props":482,"children":484},{"id":483},"装箱",[485],{"type":19,"value":483},{"type":14,"tag":15,"props":487,"children":488},{},[489],{"type":19,"value":490},"​    装箱是Unity项目中最普遍的意识不到的临时内存分配的原。它发生在当一个值类型被当做引用类型使用时；这通常发生在传递原始的值类型变量（比如int和float）到对象类型的函数中。",{"type":14,"tag":15,"props":492,"children":493},{},[494],{"type":19,"value":495},"​    在这个极度简单的例子中，为了要传递到object.Equals函数中，整数x被装箱，由于object的Equals函数要求传入的是一个object作为参数。",{"type":14,"tag":245,"props":497,"children":498},{},[499,504,509],{"type":14,"tag":15,"props":500,"children":501},{},[502],{"type":19,"value":503},"int x = 1;",{"type":14,"tag":15,"props":505,"children":506},{},[507],{"type":19,"value":508},"object y = new object();",{"type":14,"tag":15,"props":510,"children":511},{},[512],{"type":19,"value":513},"y.Equals(x);",{"type":14,"tag":15,"props":515,"children":516},{},[517],{"type":19,"value":518},"​    C#的IDE和编译器通常不会对装箱发出警告，即使其导致了无意识的内存分配。这是因为C#语言是在小的临时内存分配会被世代的垃圾回收器和分配大小敏感的内存池有效率处理的假设下开发的。",{"type":14,"tag":15,"props":520,"children":521},{},[522],{"type":19,"value":523},"​    由于Unity的内存分配器使用不区分内存分配大小的内存池，并且Unity的垃圾回收器也不是世代的，因此其不能有效率的清除由装箱带来的小的，频率的临时内存分配。",{"type":14,"tag":15,"props":525,"children":526},{},[527],{"type":19,"value":528},"​    在Unity运行时使用C#编码时，应该尽量避免装箱。",{"type":14,"tag":21,"props":530,"children":531},{},[],{"type":14,"tag":234,"props":533,"children":535},{"id":534},"识别装箱",[536],{"type":19,"value":534},{"type":14,"tag":15,"props":538,"children":539},{},[540],{"type":19,"value":541},"​    基于正在使用的脚本后端，装箱在CPU跟踪数据中显示为一些函数的调用。它们通常采用下面的这些形式之一，是一些其他类或者结构体的名字，...是一些参数的数量：",{"type":14,"tag":15,"props":543,"children":544},{},[545],{"type":19,"value":546},"​    ·::Box(…)",{"type":14,"tag":15,"props":548,"children":549},{},[550],{"type":19,"value":551},"​    ·Box(…)",{"type":14,"tag":15,"props":553,"children":554},{},[555],{"type":19,"value":556},"​    ·_Box(…)",{"type":14,"tag":15,"props":558,"children":559},{},[560],{"type":19,"value":561},"​    它可以通过搜索反编译器或者IL查看器的输出来定位，例如ReSharper中内置的IL查看器或者dotPeek反编译器，IL指令是“box”。",{"type":14,"tag":21,"props":563,"children":564},{},[],{"type":14,"tag":234,"props":566,"children":568},{"id":567},"字典和枚举",[569],{"type":19,"value":567},{"type":14,"tag":15,"props":571,"children":572},{},[573],{"type":19,"value":574},"​    一个普遍的造成装箱的问题是使用枚举类型来作为字典的键。声明一个枚举创建了一个新的值类型，在后台被作为像一个整数来对待，但是在编译时强制执行类型安全原则。",{"type":14,"tag":15,"props":576,"children":577},{},[578],{"type":19,"value":579},"​    默认情况下，调用Dictionary.add(key, value)的结果是调用Object.getHashCode(Object)。这个函数用于为字典的键获得合适的散列码，并且用于所有接受key的函数：Dictionary.tryGetValue, Dictionary.remove等等。",{"type":14,"tag":15,"props":581,"children":582},{},[583],{"type":19,"value":584},"​    Object.getHashCode函数是一个引用类型，但是枚举值始终是一个值类型。因此，对于枚举作为键的字典来说，每次函数调用都会至少一次对键进行装箱。",{"type":14,"tag":15,"props":586,"children":587},{},[588],{"type":19,"value":589},"​    下面的代码片段举出了一个简单的例子展示了装箱的问题：",{"type":14,"tag":245,"props":591,"children":592},{},[593,598,603],{"type":14,"tag":15,"props":594,"children":595},{},[596],{"type":19,"value":597},"enum MyEnum { a, b, c };",{"type":14,"tag":15,"props":599,"children":600},{},[601],{"type":19,"value":602},"var myDictionary = new Dictionary\u003CMyEnum, object>();",{"type":14,"tag":15,"props":604,"children":605},{},[606],{"type":19,"value":607},"myDictionary.Add(MyEnum.a, new object());",{"type":14,"tag":15,"props":609,"children":610},{},[611],{"type":19,"value":612},"​    要解决这个问题，有必要写一个自定义的类实现IEqualityComparer接口，并且传递这个类的实例到字典的比较器中（请注意：这个对象通常是无状态的，所里可以被不同的字典重用以节省内存）。",{"type":14,"tag":15,"props":614,"children":615},{},[616],{"type":19,"value":617},"​    下面的是一个对上面代片段实现IEqualityComparer的简单例子。",{"type":14,"tag":245,"props":619,"children":620},{},[621,626,631,636,640,645,650,654],{"type":14,"tag":15,"props":622,"children":623},{},[624],{"type":19,"value":625},"public class MyEnumComparer : IEqualityComparer {",{"type":14,"tag":15,"props":627,"children":628},{},[629],{"type":19,"value":630},"public bool Equals(MyEnum x, MyEnum y) {",{"type":14,"tag":15,"props":632,"children":633},{},[634],{"type":19,"value":635},"​    return x == y;",{"type":14,"tag":15,"props":637,"children":638},{},[639],{"type":19,"value":277},{"type":14,"tag":15,"props":641,"children":642},{},[643],{"type":19,"value":644},"public int GetHashCode(MyEnum x) {",{"type":14,"tag":15,"props":646,"children":647},{},[648],{"type":19,"value":649},"​    return (int)x;",{"type":14,"tag":15,"props":651,"children":652},{},[653],{"type":19,"value":277},{"type":14,"tag":15,"props":655,"children":656},{},[657],{"type":19,"value":277},{"type":14,"tag":15,"props":659,"children":660},{},[661],{"type":19,"value":662},"​    可以将上面类的实例传递给字典的构造函数。",{"type":14,"tag":21,"props":664,"children":665},{},[],{"type":14,"tag":234,"props":667,"children":669},{"id":668},"foreach循环",[670],{"type":19,"value":671},"Foreach循环",{"type":14,"tag":15,"props":673,"children":674},{},[675],{"type":19,"value":676},"​    在Unity版本的Mono的C#编译器中，使用foreach循环会在每次循环结束时强制Unity去装箱一个值（请注意：在每次循环整个结束的时候这个值会被装箱一次。在这个循环中每次迭代不会装箱，所以不论循环两次还是两百次内存使用都是相同的）。这是因为通过Unity的C#编译器生成的IL构造了一个通用的值类型枚举器以迭代值类型的容器。",{"type":14,"tag":15,"props":678,"children":679},{},[680],{"type":19,"value":681},"​    这个枚举器实现的IDisposable接口，其肯定会在循环终止时被调用。然而，在值类型对象（比如结构体和枚举器）上调用接口函数需要把它们装箱。",{"type":14,"tag":15,"props":683,"children":684},{},[685],{"type":19,"value":686},"​    检查下面非常简单的代码例子：",{"type":14,"tag":245,"props":688,"children":689},{},[690,695,700,705],{"type":14,"tag":15,"props":691,"children":692},{},[693],{"type":19,"value":694},"int accum = 0;",{"type":14,"tag":15,"props":696,"children":697},{},[698],{"type":19,"value":699},"foreach(int x in myList) {",{"type":14,"tag":15,"props":701,"children":702},{},[703],{"type":19,"value":704},"accum += x;",{"type":14,"tag":15,"props":706,"children":707},{},[708],{"type":19,"value":277},{"type":14,"tag":15,"props":710,"children":711},{},[712],{"type":19,"value":713},"​    上面的代码，当通过Unity的C#编译器运行时，产生下面的中间语言：",{"type":14,"tag":245,"props":715,"children":716},{},[717,722,727,732,737,742,747,752,757,762,767,772,777,782,787,792,806,811,816,820,825,830,835,848,853,858,863,868,873,878,883,888,893,898,903,908,913,917,922,927,932,937,942,947,952],{"type":14,"tag":15,"props":718,"children":719},{},[720],{"type":19,"value":721},".method private hidebysig instance void",{"type":14,"tag":15,"props":723,"children":724},{},[725],{"type":19,"value":726},"ILForeach() cil managed",{"type":14,"tag":15,"props":728,"children":729},{},[730],{"type":19,"value":731},"{",{"type":14,"tag":15,"props":733,"children":734},{},[735],{"type":19,"value":736},".maxstack 8",{"type":14,"tag":15,"props":738,"children":739},{},[740],{"type":19,"value":741},".locals init (",{"type":14,"tag":15,"props":743,"children":744},{},[745],{"type":19,"value":746},"[0] int32 num,",{"type":14,"tag":15,"props":748,"children":749},{},[750],{"type":19,"value":751},"[1] int32 current,",{"type":14,"tag":15,"props":753,"children":754},{},[755],{"type":19,"value":756},"[2] valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator V_2",{"type":14,"tag":15,"props":758,"children":759},{},[760],{"type":19,"value":761},")",{"type":14,"tag":15,"props":763,"children":764},{},[765],{"type":19,"value":766},"// [67 5 - 67 16]",{"type":14,"tag":15,"props":768,"children":769},{},[770],{"type":19,"value":771},"IL_0000: ldc.i4.0",{"type":14,"tag":15,"props":773,"children":774},{},[775],{"type":19,"value":776},"IL_0001: stloc.0   // num",{"type":14,"tag":15,"props":778,"children":779},{},[780],{"type":19,"value":781},"// [68 5 - 68 74]",{"type":14,"tag":15,"props":783,"children":784},{},[785],{"type":19,"value":786},"IL_0002: ldarg.0   // this",{"type":14,"tag":15,"props":788,"children":789},{},[790],{"type":19,"value":791},"IL_0003: ldfld    class [mscorlib]System.Collections.Generic.List`1 test::myList",{"type":14,"tag":15,"props":793,"children":794},{},[795,797,804],{"type":19,"value":796},"IL_0008: callvirt   instance valuetype [mscorlib]System.Collections.Generic.List",{"type":14,"tag":798,"props":799,"children":801},"code",{"className":800},[],[802],{"type":19,"value":803},"1/Enumerator\u003C!0/*int32*/> class [mscorlib]System.Collections.Generic.List",{"type":19,"value":805},"1::GetEnumerator()",{"type":14,"tag":15,"props":807,"children":808},{},[809],{"type":19,"value":810},"IL_000d: stloc.2   // V_2",{"type":14,"tag":15,"props":812,"children":813},{},[814],{"type":19,"value":815},".try",{"type":14,"tag":15,"props":817,"children":818},{},[819],{"type":19,"value":731},{"type":14,"tag":15,"props":821,"children":822},{},[823],{"type":19,"value":824},"IL_000e: br      IL_001f",{"type":14,"tag":15,"props":826,"children":827},{},[828],{"type":19,"value":829},"// [72 9 - 72 41]",{"type":14,"tag":15,"props":831,"children":832},{},[833],{"type":19,"value":834},"IL_0013: ldloca.s   V_2",{"type":14,"tag":15,"props":836,"children":837},{},[838,840,846],{"type":19,"value":839},"IL_0015: call     instance !0/",{"type":14,"tag":841,"props":842,"children":843},"em",{},[844],{"type":19,"value":845},"int32",{"type":19,"value":847},"/ valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator::get_Current()",{"type":14,"tag":15,"props":849,"children":850},{},[851],{"type":19,"value":852},"IL_001a: stloc.1   // current",{"type":14,"tag":15,"props":854,"children":855},{},[856],{"type":19,"value":857},"// [73 9 - 73 23]",{"type":14,"tag":15,"props":859,"children":860},{},[861],{"type":19,"value":862},"IL_001b: ldloc.0   // num",{"type":14,"tag":15,"props":864,"children":865},{},[866],{"type":19,"value":867},"IL_001c: ldloc.1   // current",{"type":14,"tag":15,"props":869,"children":870},{},[871],{"type":19,"value":872},"IL_001d: add",{"type":14,"tag":15,"props":874,"children":875},{},[876],{"type":19,"value":877},"IL_001e: stloc.0   // num",{"type":14,"tag":15,"props":879,"children":880},{},[881],{"type":19,"value":882},"// [70 7 - 70 36]",{"type":14,"tag":15,"props":884,"children":885},{},[886],{"type":19,"value":887},"IL_001f: ldloca.s   V_2",{"type":14,"tag":15,"props":889,"children":890},{},[891],{"type":19,"value":892},"IL_0021: call     instance bool valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator::MoveNext()",{"type":14,"tag":15,"props":894,"children":895},{},[896],{"type":19,"value":897},"IL_0026: brtrue    IL_0013",{"type":14,"tag":15,"props":899,"children":900},{},[901],{"type":19,"value":902},"IL_002b: leave    IL_003c",{"type":14,"tag":15,"props":904,"children":905},{},[906],{"type":19,"value":907},"} // end of .try",{"type":14,"tag":15,"props":909,"children":910},{},[911],{"type":19,"value":912},"finally",{"type":14,"tag":15,"props":914,"children":915},{},[916],{"type":19,"value":731},{"type":14,"tag":15,"props":918,"children":919},{},[920],{"type":19,"value":921},"IL_0030: ldloc.2   // V_2",{"type":14,"tag":15,"props":923,"children":924},{},[925],{"type":19,"value":926},"IL_0031: box     valuetype [mscorlib]System.Collections.Generic.List`1/Enumerator",{"type":14,"tag":15,"props":928,"children":929},{},[930],{"type":19,"value":931},"IL_0036: callvirt   instance void [mscorlib]System.IDisposable::Dispose()",{"type":14,"tag":15,"props":933,"children":934},{},[935],{"type":19,"value":936},"IL_003b: endfinally",{"type":14,"tag":15,"props":938,"children":939},{},[940],{"type":19,"value":941},"} // end of finally",{"type":14,"tag":15,"props":943,"children":944},{},[945],{"type":19,"value":946},"IL_003c: ret",{"type":14,"tag":15,"props":948,"children":949},{},[950],{"type":19,"value":951},"} // end of method test::ILForeach",{"type":14,"tag":15,"props":953,"children":954},{},[955],{"type":19,"value":956},"} // end of class test",{"type":14,"tag":15,"props":958,"children":959},{},[960],{"type":19,"value":961},"​    最有关系的代码是靠近最后的__finally { … }__语句块。callvirt指令在执行这个函数前在内存中发现IDisposable.Dispose方法的定位，并且要求这个枚举器被装箱。",{"type":14,"tag":15,"props":963,"children":964},{},[965],{"type":19,"value":966},"​    总体来说，在Unity中应该避免使用foreach循环。不全是因为装箱，还有是通过枚举器实现的容器迭代的函数调用消耗比常规的for或者while循环的迭代要慢的多。",{"type":14,"tag":15,"props":968,"children":969},{},[970],{"type":19,"value":971},"​    请注意在Unity5.5中C#编译器有了重大升级，增强了Unity生成IL的能力。特别是，装箱操作已经从foreach循环中消除。然而，由于函数调用的开销，与基于数组的等价代码相比CPU性能差距依旧存在。",{"type":14,"tag":21,"props":973,"children":974},{},[],{"type":14,"tag":234,"props":976,"children":978},{"id":977},"有数组值的unity-api译者已查在unity官方文档中会明确表明这些api有临时内存分配",[979,981,986],{"type":19,"value":980},"有数组值的Unity API(",{"type":14,"tag":841,"props":982,"children":983},{},[984],{"type":19,"value":985},"译者已查，在Unity官方文档中，会明确表明这些API有临时内存分配",{"type":19,"value":761},{"type":14,"tag":15,"props":988,"children":989},{},[990],{"type":19,"value":991},"​    一个更有害且难于发现的是由于重复使用Unity返回数组的API造成的虚拟的数组内存分配。所有返回数组的Unity的API都会在每次它们被访问时返回一个该数组新的拷贝。在没有必要的情况下经常访问有数组值的Unity的API效果非常不理想。",{"type":14,"tag":15,"props":993,"children":994},{},[995],{"type":19,"value":996},"​    举个例子，下面的代码在vertices数组的每次迭代中虚拟的创造了四份拷贝。内存分配在每次.vertices属性被访问时发生。",{"type":14,"tag":245,"props":998,"children":999},{},[1000,1005,1009,1014,1019,1024,1029,1034,1039],{"type":14,"tag":15,"props":1001,"children":1002},{},[1003],{"type":19,"value":1004},"for(int i = 0; i \u003C mesh.vertices.Length; i++)",{"type":14,"tag":15,"props":1006,"children":1007},{},[1008],{"type":19,"value":731},{"type":14,"tag":15,"props":1010,"children":1011},{},[1012],{"type":19,"value":1013},"float x, y, z;",{"type":14,"tag":15,"props":1015,"children":1016},{},[1017],{"type":19,"value":1018},"x = mesh.vertices[i].x;",{"type":14,"tag":15,"props":1020,"children":1021},{},[1022],{"type":19,"value":1023},"y = mesh.vertices[i].y;",{"type":14,"tag":15,"props":1025,"children":1026},{},[1027],{"type":19,"value":1028},"z = mesh.vertices[i].z;",{"type":14,"tag":15,"props":1030,"children":1031},{},[1032],{"type":19,"value":1033},"// ...",{"type":14,"tag":15,"props":1035,"children":1036},{},[1037],{"type":19,"value":1038},"DoSomething(x, y, z);",{"type":14,"tag":15,"props":1040,"children":1041},{},[1042],{"type":19,"value":277},{"type":14,"tag":15,"props":1044,"children":1045},{},[1046],{"type":19,"value":1047},"​    这可以通过普通的重构来使其只有一次数组内存分配，不论循环迭代多少次。这是通过在进入循环前存储vertices数组来实现的。",{"type":14,"tag":245,"props":1049,"children":1050},{},[1051,1056,1061,1065,1069,1074,1079,1084,1088,1092],{"type":14,"tag":15,"props":1052,"children":1053},{},[1054],{"type":19,"value":1055},"var vertices = mesh.vertices;",{"type":14,"tag":15,"props":1057,"children":1058},{},[1059],{"type":19,"value":1060},"for(int i = 0; i \u003C vertices.Length; i++)",{"type":14,"tag":15,"props":1062,"children":1063},{},[1064],{"type":19,"value":731},{"type":14,"tag":15,"props":1066,"children":1067},{},[1068],{"type":19,"value":1013},{"type":14,"tag":15,"props":1070,"children":1071},{},[1072],{"type":19,"value":1073},"x = vertices[i].x;",{"type":14,"tag":15,"props":1075,"children":1076},{},[1077],{"type":19,"value":1078},"y = vertices[i].y;",{"type":14,"tag":15,"props":1080,"children":1081},{},[1082],{"type":19,"value":1083},"z = vertices[i].z;",{"type":14,"tag":15,"props":1085,"children":1086},{},[1087],{"type":19,"value":1033},{"type":14,"tag":15,"props":1089,"children":1090},{},[1091],{"type":19,"value":1038},{"type":14,"tag":15,"props":1093,"children":1094},{},[1095],{"type":19,"value":277},{"type":14,"tag":15,"props":1097,"children":1098},{},[1099],{"type":19,"value":1100},"​    虽然CPU的消耗在访问一个属性一次时并不是非常高，在持续的循环中重复的访问它们会导致性能热点。进一步来讲，没必要的重复访问会导致托管堆的扩张。",{"type":14,"tag":15,"props":1102,"children":1103},{},[1104],{"type":19,"value":1105},"​    这个问题再移动设备上非常普遍，因为Input.touches这个API的行为与上述类似。这在包含下面的类似代码的项目中也非常普遍，内存分配发生在每次访问.touches属性时。",{"type":14,"tag":245,"props":1107,"children":1108},{},[1109,1114,1118,1123,1128],{"type":14,"tag":15,"props":1110,"children":1111},{},[1112],{"type":19,"value":1113},"for ( int i = 0; i \u003C Input.touches.Length; i++ )",{"type":14,"tag":15,"props":1115,"children":1116},{},[1117],{"type":19,"value":731},{"type":14,"tag":15,"props":1119,"children":1120},{},[1121],{"type":19,"value":1122},"Touch touch = Input.touches[i];",{"type":14,"tag":15,"props":1124,"children":1125},{},[1126],{"type":19,"value":1127},"// …",{"type":14,"tag":15,"props":1129,"children":1130},{},[1131],{"type":19,"value":277},{"type":14,"tag":15,"props":1133,"children":1134},{},[1135],{"type":19,"value":1136},"​    然而，现在有很多Unity的API有不会造成内存分配的新版本。当使用这些时，应该是更有利的。",{"type":14,"tag":245,"props":1138,"children":1139},{},[1140,1145,1150,1154,1159,1163],{"type":14,"tag":15,"props":1141,"children":1142},{},[1143],{"type":19,"value":1144},"int touchCount = Input.touchCount;",{"type":14,"tag":15,"props":1146,"children":1147},{},[1148],{"type":19,"value":1149},"for ( int i = 0; i \u003C touchCount; i++ )",{"type":14,"tag":15,"props":1151,"children":1152},{},[1153],{"type":19,"value":731},{"type":14,"tag":15,"props":1155,"children":1156},{},[1157],{"type":19,"value":1158},"Touch touch = Input.GetTouch(i);",{"type":14,"tag":15,"props":1160,"children":1161},{},[1162],{"type":19,"value":1127},{"type":14,"tag":15,"props":1164,"children":1165},{},[1166],{"type":19,"value":277},{"type":14,"tag":15,"props":1168,"children":1169},{},[1170],{"type":19,"value":1171},"​    转换上面的例子到Touch API 无内存分配的版本是非常简单的：",{"type":14,"tag":15,"props":1173,"children":1174},{},[1175],{"type":19,"value":1176},"​    请注意：这个属性的访问(Input.touchCount)仍旧要放在循环条件的外面，这是为了节省CPU在执行属性get方法时的消耗。",{"type":14,"tag":21,"props":1178,"children":1179},{},[],{"type":14,"tag":234,"props":1181,"children":1183},{"id":1182},"空数组重用",[1184],{"type":19,"value":1182},{"type":14,"tag":15,"props":1186,"children":1187},{},[1188],{"type":19,"value":1189},"​    一些团队在一个数组返回值的函数需要返回一个空值时，倾向于用返回一个空数组来代替null。这种编码模式在许多托管语言中非常常见，尤其是C#和Java。",{"type":14,"tag":15,"props":1191,"children":1192},{},[1193],{"type":19,"value":1194},"​    总体来说，当一个函数返回一个长度为0的数组时，返回一个预先分配好的长度为0的数组的单例实例比重复创造空数组被认为更有效率。（请注意：当然，一个例外情况要考虑那就是当返回的数组需要改变长度时）",{"type":14,"tag":1196,"props":1197,"children":1198},"ul",{},[1199],{"type":14,"tag":1200,"props":1201,"children":1202},"li",{},[1203],{"type":14,"tag":60,"props":1204,"children":1207},{"href":1205,"rel":1206},"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html",[64],[1208],{"type":19,"value":1205},{"title":7,"searchDepth":1210,"depth":1210,"links":1211},2,[1212,1213,1214,1215,1216],{"id":27,"depth":1210,"text":30},{"id":119,"depth":1210,"text":119},{"id":157,"depth":1210,"text":157},{"id":222,"depth":1210,"text":222},{"id":483,"depth":1210,"text":483},"markdown","content:unity:2020-02-18-BestPracticeUnderstandingPerformanceInUnity.md","content","unity/2020-02-18-BestPracticeUnderstandingPerformanceInUnity.md","md","2020-02-18",[1224,1234,1361,1410,1462,1475,1587],{"title":1225,"_path":1226,"children":1227},"Art","/art",[1228,1231],{"title":1229,"_path":1230},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":1232,"_path":1233},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":1235,"_path":1236,"children":1237},"Dotnet","/dotnet",[1238,1241,1244,1247,1250,1253,1256,1259,1262,1265,1268,1271,1274,1277,1280,1283,1286,1289,1292,1295,1298,1301,1304,1307,1310,1313,1316,1319,1322,1325,1328,1331,1334,1337,1340,1343,1346,1349,1352,1355,1358],{"title":1239,"_path":1240},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":1242,"_path":1243},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":1245,"_path":1246},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":1248,"_path":1249},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":1251,"_path":1252},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":1254,"_path":1255},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":1257,"_path":1258},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":1260,"_path":1261},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":1263,"_path":1264},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":1266,"_path":1267},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":1269,"_path":1270},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":1272,"_path":1273},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":1275,"_path":1276},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":1278,"_path":1279},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":1281,"_path":1282},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":1284,"_path":1285},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":1287,"_path":1288},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":1290,"_path":1291},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":1293,"_path":1294},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":1296,"_path":1297},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":1299,"_path":1300},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":1302,"_path":1303},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":1305,"_path":1306},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":1308,"_path":1309},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":1311,"_path":1312},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":1314,"_path":1315},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":1317,"_path":1318},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":1320,"_path":1321},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":1323,"_path":1324},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":1326,"_path":1327},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":1329,"_path":1330},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":1332,"_path":1333},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":1335,"_path":1336},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":1338,"_path":1339},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":1341,"_path":1342},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":1344,"_path":1345},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":1347,"_path":1348},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":1350,"_path":1351},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":1353,"_path":1354},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":1356,"_path":1357},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":1359,"_path":1360},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":1362,"_path":1363,"children":1364},"Game","/game",[1365,1368,1371,1374,1377,1380,1383,1386,1389,1392,1395,1398,1401,1404,1407],{"title":1366,"_path":1367},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":1369,"_path":1370},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":1372,"_path":1373},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":1375,"_path":1376},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":1378,"_path":1379},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":1381,"_path":1382},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":1384,"_path":1385},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":1387,"_path":1388},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":1390,"_path":1391},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":1393,"_path":1394},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":1396,"_path":1397},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":1399,"_path":1400},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":1402,"_path":1403},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":1405,"_path":1406},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":1408,"_path":1409},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":1411,"_path":1412,"children":1413},"Gyj","/gyj",[1414,1417,1420,1423,1426,1429,1432,1435,1438,1441,1444,1447,1450,1453,1456,1459],{"title":1415,"_path":1416},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":1418,"_path":1419},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":1421,"_path":1422},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":1424,"_path":1425},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1427,"_path":1428},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1430,"_path":1431},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1433,"_path":1434},"玩法","/gyj/2022-08-22-wanfa",{"title":1436,"_path":1437},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1439,"_path":1440},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1442,"_path":1443},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1445,"_path":1446},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1448,"_path":1449},"门派内容相关","/gyj/2022-11-17-sect",{"title":1451,"_path":1452},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1454,"_path":1455},"种植","/gyj/2022-12-01-zhongzhi",{"title":1457,"_path":1458},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1460,"_path":1461},"跑商","/gyj/2023-11-01-paoshang",{"title":1463,"_path":1464,"children":1465},"Js","/js",[1466,1469,1472],{"title":1467,"_path":1468},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1470,"_path":1471},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1473,"_path":1474},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1476,"_path":1477,"children":1478},"Tool","/tool",[1479,1482,1485,1488,1491,1494,1497,1500,1503,1506,1509,1512,1515,1518,1521,1524,1527,1530,1533,1536,1539,1542,1545,1548,1551,1554,1557,1560,1563,1566,1569,1572,1575,1578,1581,1584],{"title":1480,"_path":1481},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1483,"_path":1484},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1486,"_path":1487},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1489,"_path":1490},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1492,"_path":1493},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1495,"_path":1496},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1498,"_path":1499},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1501,"_path":1502},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1504,"_path":1505},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1507,"_path":1508},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1510,"_path":1511},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1513,"_path":1514},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1516,"_path":1517},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1519,"_path":1520},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1522,"_path":1523},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1525,"_path":1526},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1528,"_path":1529},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1531,"_path":1532},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1534,"_path":1535},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1537,"_path":1538},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1540,"_path":1541},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1543,"_path":1544},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1546,"_path":1547},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1549,"_path":1550},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1552,"_path":1553},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1555,"_path":1556},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1558,"_path":1559},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1561,"_path":1562},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1564,"_path":1565},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1567,"_path":1568},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1570,"_path":1571},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1573,"_path":1574},"rider的使用","/tool/2022-08-02-rider-use",{"title":1576,"_path":1577},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1579,"_path":1580},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1582,"_path":1583},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1585,"_path":1586},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1588,"_path":1589,"children":1590},"Unity","/unity",[1591,1594,1597,1600,1603,1606,1609,1612,1615,1618,1621,1624,1627,1630,1633,1636,1639,1642,1645,1648,1651,1654,1657,1660,1661,1664,1667,1670,1673,1676,1679,1682,1685,1688,1691,1694,1697,1700,1703,1706,1709,1712,1715,1718,1721,1724,1727,1730,1733,1736,1739,1742,1745,1748,1751,1754,1757,1760,1763,1766,1769,1772,1775,1778,1781,1784,1787,1790,1793,1796,1799,1802],{"title":1592,"_path":1593},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1595,"_path":1596},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1598,"_path":1599},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1601,"_path":1602},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1604,"_path":1605},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1607,"_path":1608},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1610,"_path":1611},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1613,"_path":1614},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1616,"_path":1617},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1619,"_path":1620},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":1622,"_path":1623},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":1625,"_path":1626},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1628,"_path":1629},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1631,"_path":1632},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1634,"_path":1635},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1637,"_path":1638},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1640,"_path":1641},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1643,"_path":1644},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1646,"_path":1647},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1649,"_path":1650},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1652,"_path":1653},"技能系统","/unity/2020-02-15-skill-system",{"title":1655,"_path":1656},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1658,"_path":1659},"角色状态设计","/unity/2020-02-17-character-states",{"title":8,"_path":4},{"title":1662,"_path":1663},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1665,"_path":1666},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1668,"_path":1669},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1671,"_path":1672},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1674,"_path":1675},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1677,"_path":1678},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1680,"_path":1681},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1683,"_path":1684},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1686,"_path":1687},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1689,"_path":1690},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1692,"_path":1693},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1695,"_path":1696},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1698,"_path":1699},"unity的addressables","/unity/2020-09-12-addressables",{"title":1701,"_path":1702},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1704,"_path":1705},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1707,"_path":1708},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1710,"_path":1711},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1713,"_path":1714},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1716,"_path":1717},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1719,"_path":1720},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1722,"_path":1723},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1725,"_path":1726},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1728,"_path":1729},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1731,"_path":1732},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1734,"_path":1735},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1737,"_path":1738},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1740,"_path":1741},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1743,"_path":1744},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1746,"_path":1747},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1749,"_path":1750},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1752,"_path":1753},"ability","/unity/2020-11-16-dotssample",{"title":1755,"_path":1756},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1758,"_path":1759},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1761,"_path":1762},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1764,"_path":1765},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1767,"_path":1768},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1770,"_path":1771},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1773,"_path":1774},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1776,"_path":1777},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1779,"_path":1780},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1782,"_path":1783},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1785,"_path":1786},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1788,"_path":1789},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1791,"_path":1792},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1794,"_path":1795},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1797,"_path":1798},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1800,"_path":1801},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1803,"_path":1804},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040446]