[{"data":1,"prerenderedAt":1026},["Reactive",2],{"content-query-FGpZ8lqTCv":3,"content-navigation-8C37fagqQL":444},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":438,"_id":439,"_source":440,"_file":441,"_extension":442,"date":443},"/unity/2020-03-04-unity-startup","unity",false,"","unity启动运行脚本流程","性能分析：所有尝试优化的操作都是从发现问题开始的，在谈论性能时，这是非常重要的。对一个应用进行性能分析，第一步是根据性能分析的结果，找出它的瓶颈。然后再优化项目中的用到的技术和资源的结构。提示：本节性能分析中出现的方法名称，都是从unity5.3中提取的，方法名可能在以后的Unity版本中发生变化。工具：对于unity开发者来说，性能分析的工具有很多种。Unity有一系列的内置工具，比如CPU Profiler，Memory Profiler和5.3中新加的Memory Analyzer。然而最好的分析数据通常来自于特定平台的工具。其中包括：IOS:Instruments和XCode Fram",{"type":11,"children":12,"toc":434},"root",[13,25,30,35,43,48,53,58,63,68,73,78,83,88,100,108,113,118,126,131,136,141,146,154,159,166,171,176,181,201,206,211,216,221,231,236,241,249,254,261,266,271,276,281,289,294,301,306,311,316,321,326,336,344,414,420,425],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":14,"tag":19,"props":20,"children":21},"strong",{},[22],{"type":23,"value":24},"text","性能分析：",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":23,"value":29},"所有尝试优化的操作都是从发现问题开始的，在谈论性能时，这是非常重要的。对一个应用进行性能分析，第一步是根据性能分析的结果，找出它的瓶颈。然后再优化项目中的用到的技术和资源的结构。",{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":23,"value":34},"提示：本节性能分析中出现的方法名称，都是从unity5.3中提取的，方法名可能在以后的Unity版本中发生变化。",{"type":14,"tag":15,"props":36,"children":37},{},[38],{"type":14,"tag":19,"props":39,"children":40},{},[41],{"type":23,"value":42},"工具：",{"type":14,"tag":15,"props":44,"children":45},{},[46],{"type":23,"value":47},"对于unity开发者来说，性能分析的工具有很多种。Unity有一系列的内置工具，比如CPU Profiler，Memory Profiler和5.3中新加的Memory Analyzer。",{"type":14,"tag":15,"props":49,"children":50},{},[51],{"type":23,"value":52},"然而最好的分析数据通常来自于特定平台的工具。其中包括：",{"type":14,"tag":15,"props":54,"children":55},{},[56],{"type":23,"value":57},"IOS:Instruments和XCode Frame Debugger",{"type":14,"tag":15,"props":59,"children":60},{},[61],{"type":23,"value":62},"Android:Snapdragon Profiler",{"type":14,"tag":15,"props":64,"children":65},{},[66],{"type":23,"value":67},"运行因特尔CPU/GPU的平台：VTune和Intel GPA",{"type":14,"tag":15,"props":69,"children":70},{},[71],{"type":23,"value":72},"PS4:Razor系列",{"type":14,"tag":15,"props":74,"children":75},{},[76],{"type":23,"value":77},"Xbox：Pix工具",{"type":14,"tag":15,"props":79,"children":80},{},[81],{"type":23,"value":82},"这些工具通常能分析用IL2CPP打包出来的C++项目。这些本地代码版本中，能清晰的看到堆栈调用和各类方法的执行时间，如果用Mono编译，是做不到这些的。",{"type":14,"tag":15,"props":84,"children":85},{},[86],{"type":23,"value":87},"关于IOS设备上怎么进行性能分析，Unity官方有一个基本的介绍。请看：",{"type":14,"tag":15,"props":89,"children":90},{},[91],{"type":14,"tag":92,"props":93,"children":97},"a",{"href":94,"rel":95},"https://blogs.unity3d.com/cn/2016/02/01/profiling-with-instruments/%3F_ga%3D2.53202159.65875105.1532310232-165234103.1528100648",[96],"nofollow",[98],{"type":23,"value":99},"Profiling with Instruments – Unity Blogblogs.unity3d.com!",{"type":14,"tag":15,"props":101,"children":102},{},[103],{"type":14,"tag":19,"props":104,"children":105},{},[106],{"type":23,"value":107},"启动流程剖析：",{"type":14,"tag":15,"props":109,"children":110},{},[111],{"type":23,"value":112},"当查看启动流程的时间时，有两个方法需要注意。在那些影响启动时间的配置文件、资源和工程代码中，这两个方法起着重要的作用。",{"type":14,"tag":15,"props":114,"children":115},{},[116],{"type":23,"value":117},"在不同的平台上，启动时间是不同的。在大多数平台上，Splash Image显示的时间，就是启动的时间。",{"type":14,"tag":15,"props":119,"children":120},{},[121],{"type":14,"tag":122,"props":123,"children":125},"img",{"alt":122,"src":124},"/images/2020-03-04-unity-startup/v2-e65aeff3106290ff9e3de0580ffa90ab_720w.jpg",[],{"type":14,"tag":15,"props":127,"children":128},{},[129],{"type":23,"value":130},"上面的截图来自于在iOS设备上运行的一个示例项目。在此平台的startUnity方法中，请注意UnityInitApplicationGraphics和UnityLoadApplication方法。",{"type":14,"tag":15,"props":132,"children":133},{},[134],{"type":23,"value":135},"UnityInitApplicationGraphics执行了大量的内部操作，例如设置图形设备和初始化许多Unity的内部系统。另外，为了初始化Resource系统，它必须加载Resource系统所包含下标的所有文件。每个名为“Resources”的文件夹中的每一个资源文件（注意：这只适用于项目“Assets”文件夹中名为“Resources”的文件夹，以及“Resources”文件夹中的所有子文件夹）都包含在Resource系统的数据中。因此，初始化Resource系统所需的时间与“Resource”文件夹中的文件数量至少呈线性关系。",{"type":14,"tag":15,"props":137,"children":138},{},[139],{"type":23,"value":140},"UnityLoadApplication包含加载和初始化第一个场景的方法。在项目中，这包括把需要在第一个场景里需要显示的所有数据进行反序列化和实例化。比如，编译着色器，上传贴图和实例化GameObjects。另外，第一个场景中，所有继承了MonoBehaviour脚本中的Awake方法都会在这个时候被回调。",{"type":14,"tag":15,"props":142,"children":143},{},[144],{"type":23,"value":145},"这些过程意味着，如果在项目的第一个场景中，在Awake方法中有长时间运行的代码，那么该代码就会增加项目的启动时间。为了避免这一问题，在Awake方法中不能放运行时间长的代码，或者把这些代码放到程序的其他其他生命周期里。",{"type":14,"tag":15,"props":147,"children":148},{},[149],{"type":14,"tag":19,"props":150,"children":151},{},[152],{"type":23,"value":153},"运行时流程分析：",{"type":14,"tag":15,"props":155,"children":156},{},[157],{"type":23,"value":158},"在初始化启动之后的性能分析中，最主要的是PlayerLoop方法。这个是Unity的主循环，并且每一帧都会被执行一次。",{"type":14,"tag":15,"props":160,"children":161},{},[162],{"type":14,"tag":122,"props":163,"children":165},{"alt":122,"src":164},"/images/2020-03-04-unity-startup/v2-5c6c95216621d4ab86b26636ff9a019a_720w.jpg",[],{"type":14,"tag":15,"props":167,"children":168},{},[169],{"type":23,"value":170},"上面的截图来自Unity5.4一个示例项目的性能分析。它展示了PlayerLoop中几个最有趣的方法。请注意，不同Unity版本之间，PlayerLoop中的方法名称可能有所不同。",{"type":14,"tag":15,"props":172,"children":173},{},[174],{"type":23,"value":175},"PlayerRender是运行在Unity渲染系统中的方法。它包括对象剔除，计算动态批次，向GPU提交绘制命令。任何的后处理效果（Image Effects）或基于渲染的脚本回调（比如OnWillRenderObject）也都在这里运行。通常来讲，在具有交互的项目中，这个方法也是最影响GPU性能的。",{"type":14,"tag":15,"props":177,"children":178},{},[179],{"type":23,"value":180},"BaseBehaviourManager调用了三个类型的CommonUpdate方法。它会调用当前场景中，挂在激活的物体上面的Monobehaviours里的特定方法。",{"type":14,"tag":182,"props":183,"children":184},"ul",{},[185,191,196],{"type":14,"tag":186,"props":187,"children":188},"li",{},[189],{"type":23,"value":190},"CommonUpdate 回调 Update",{"type":14,"tag":186,"props":192,"children":193},{},[194],{"type":23,"value":195},"CommonUpdate 回调 LateUpdate",{"type":14,"tag":186,"props":197,"children":198},{},[199],{"type":23,"value":200},"CommonUpdate 如果勾选了物理系统，就会回调 FixedUpdate",{"type":14,"tag":15,"props":202,"children":203},{},[204],{"type":23,"value":205},"通常，检测BaseBehaviourManager::CommonUpdate这类方法是最有趣的，因为它是多数Unity项目脚本运行的入口。",{"type":14,"tag":15,"props":207,"children":208},{},[209],{"type":23,"value":210},"有几个其他的方法也可以注意一下：",{"type":14,"tag":15,"props":212,"children":213},{},[214],{"type":23,"value":215},"如果项目用到了Unity的UI系统，UI::CanvasManager就会回调几个不同的方法。包括Unity UI的批次计算和布局更新，在CanvasManager中，这两个方法也是比较常用并且比较重要的方法。",{"type":14,"tag":15,"props":217,"children":218},{},[219],{"type":23,"value":220},"DelayedCallManager::Update运行协程。这部分内容在之后的”Coroutines”的章节会详细的介绍（如果我能坚持的话，哈哈哈）或者参考官方文档",{"type":14,"tag":15,"props":222,"children":223},{},[224],{"type":14,"tag":92,"props":225,"children":228},{"href":226,"rel":227},"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity3.html",[96],[229],{"type":23,"value":230},"Unity - Manual: Coroutinesdocs.unity3d.com!",{"type":14,"tag":15,"props":232,"children":233},{},[234],{"type":23,"value":235},"PhysicsManager::FixedUpdate执行PhysX物理引擎。它主要涉及到执行PhysX的内部代码，并且也手当前场景中物理对象数量的影响。比如Rigidbodies和Colliders。然而，基于物理的回调也会在OnTriggerStay和OnCollisionStay中出现。",{"type":14,"tag":15,"props":237,"children":238},{},[239],{"type":23,"value":240},"如果项目有用到2D物理系统。那么在Physics2DManager::FixedUpdate中也会出现类似的调用。",{"type":14,"tag":15,"props":242,"children":243},{},[244],{"type":14,"tag":19,"props":245,"children":246},{},[247],{"type":23,"value":248},"脚本方法剖析：",{"type":14,"tag":15,"props":250,"children":251},{},[252],{"type":23,"value":253},"当脚本用IL2CPP编译跨平台编译时，找到包含ScriptingInvocation对象这行。这是Unity为了执行脚本代码，从内部代码过渡到运行时脚本的一个时间点（注意：从技术上讲，通过运行IL2CPP，C#和JS脚本也变成了本地代码。然而，这种编译的代码主要通过IL2CPP运行时框架执行方法，这跟手写的C++代码不太相似）。",{"type":14,"tag":15,"props":255,"children":256},{},[257],{"type":14,"tag":122,"props":258,"children":260},{"alt":122,"src":259},"/images/2020-03-04-unity-startup/v2-ddde913f040c5de47824f8abaca2e978_720w.jpg",[],{"type":14,"tag":15,"props":262,"children":263},{},[264],{"type":23,"value":265},"上面的截图来自一个Unity5.4示例项目中的另一个的性能分析。RuntimeInvoker_Void这一行下面的所有方法都是C#脚本编译的，它们每帧都会被执行一次。",{"type":14,"tag":15,"props":267,"children":268},{},[269],{"type":23,"value":270},"分析报告阅读起来比较容易：每一个都是类名+“_”+方法名。在上图中，我们可以看到EventSysten.Update，PlayerShooting.Update和几个其他的Update方法，这些是大多数MonoBehaviours脚本中比较标准的Unity Update回调。",{"type":14,"tag":15,"props":272,"children":273},{},[274],{"type":23,"value":275},"展开这些方法，可以清楚的看到那些正在占用CPU的方法。其中也会包括项目中被用到的Unity API和C#类库的方法。",{"type":14,"tag":15,"props":277,"children":278},{},[279],{"type":23,"value":280},"上图的分析中，也显示了StandaloneInputModule.Process，这个方法会在每一帧都用射线穿过整个UI，为了检测是否有点击事件或者滑动事件触发。这个对性能的主要影响是需要遍历所有的UI元素，并且监测鼠标的位置是否在UI元素的边界内。",{"type":14,"tag":15,"props":282,"children":283},{},[284],{"type":14,"tag":19,"props":285,"children":286},{},[287],{"type":23,"value":288},"资源加载：",{"type":14,"tag":15,"props":290,"children":291},{},[292],{"type":23,"value":293},"资源加载主要是通过SerializedFile::ReadObject方法来实现的。在对CPU性能分析时，就可以找到这个方法。SerializedFile::ReadObject通过Transfer方法，把文件的二进制数据关联到Unity的序列化系统。所有的Asset类型中，都能找到这个Transfer方法，比如Texttures，MonoBehaviours 和Particle Systems。",{"type":14,"tag":15,"props":295,"children":296},{},[297],{"type":14,"tag":122,"props":298,"children":300},{"alt":122,"src":299},"/images/2020-03-04-unity-startup/v2-05563390f8cb569523e89841537c0e8f_720w.jpg",[],{"type":14,"tag":15,"props":302,"children":303},{},[304],{"type":23,"value":305},"在上面的截图中，一个场景正在被加载。SerializedFile::ReadObject下面调用的不同Transfer方法表明了Unity正在读取并且反序列化场景中所有的Assets。",{"type":14,"tag":15,"props":307,"children":308},{},[309],{"type":23,"value":310},"通常，如果运行时遇到了性能问题，在加载资源时帧率下降，并且通过性能分析是由于SerializedFile::ReadObject这个方法造成的。请注意，在多数情况下，只有当通过SceneManager, Resources 或者 AssetBundle API进行同步加载资源时，SerializedFile::ReadObject才会出现在主线程里。",{"type":14,"tag":15,"props":312,"children":313},{},[314],{"type":23,"value":315},"避免出现这种性能问题，常规的做法是：你可以使用异步加载资源（这就把大量的ReadObject操作丢给了工作线程），或者提前加载好比较大的资源。",{"type":14,"tag":15,"props":317,"children":318},{},[319],{"type":23,"value":320},"注意，当克隆objects时，Transfer也会被调用（在性能分析时出现的CloneObject就是）。如果CloneObject方法下面出现了Transfer方法，这说明资源不是正在从储存器上加载，而是在克隆老的对象。这个过程是：Unity先把老对象序列化，再反序列化数据作为新的对象。",{"type":14,"tag":15,"props":322,"children":323},{},[324],{"type":23,"value":325},"本文翻译自Unity官方文档：",{"type":14,"tag":15,"props":327,"children":328},{},[329],{"type":14,"tag":92,"props":330,"children":333},{"href":331,"rel":332},"https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity1.html",[96],[334],{"type":23,"value":335},"Unity - Manual: Profilingdocs.unity3d.com!",{"type":14,"tag":15,"props":337,"children":338},{},[339],{"type":14,"tag":19,"props":340,"children":341},{},[342],{"type":23,"value":343},"Q1：第一次启动项目会有冷启动时间过长的情况，请问该怎么优化？",{"type":14,"tag":345,"props":346,"children":347},"blockquote",{},[348,353,358,363,394,399,404],{"type":14,"tag":15,"props":349,"children":350},{},[351],{"type":23,"value":352},"首先肯定是判断游戏在冷启动过程中是在做什么事情消耗了时间，然后针对性地优化。还有就是定义好冷启动的界限，从点击游戏到Unity的闪屏出现这段时间通常定义为冷启动的时间，但是我们项目后来发现在做启动的优化的时候还有很长时间花费在游戏启动之后的一些资源初始化方面。",{"type":14,"tag":15,"props":354,"children":355},{},[356],{"type":23,"value":357},"我在优化启动时间的过程中没有使用什么特别多的工具，主要是基于mlogcat.exe查看设备上输出信息的log，结合自己加入的一些log来做问题的排查。",{"type":14,"tag":15,"props":359,"children":360},{},[361],{"type":23,"value":362},"纯粹的冷启动时间过长，会和Resources目录下的资源有关系，越多越慢。我们是以AssetBundle的方式为主，所以这块注意了下，清理了一些插件引入的确定不需要的资源（直接看打包好的apk里的内容来排查）。另外搜索下还有一些文章说相关问题，可以关注下，这里不赘述。",{"type":14,"tag":15,"props":364,"children":365},{},[366,373,380,387],{"type":14,"tag":92,"props":367,"children":370},{"href":368,"rel":369},"https://blog.csdn.net/qq_34307432/article/details/84023894",[96],[371],{"type":23,"value":372},"Unity 冷启动简介",{"type":14,"tag":92,"props":374,"children":377},{"href":375,"rel":376},"http://gad.qq.com/article/detail/32076",[96],[378],{"type":23,"value":379},"Unity3D游戏如何加快冷启动时间",{"type":14,"tag":92,"props":381,"children":384},{"href":382,"rel":383},"https://www.zhihu.com/question/55441136",[96],[385],{"type":23,"value":386},"如何改进Unity3d手游启动速度？",{"type":14,"tag":92,"props":388,"children":391},{"href":389,"rel":390},"https://www.jianshu.com/p/4366da6dd4a1",[96],[392],{"type":23,"value":393},"Unity启动耗时优化",{"type":14,"tag":15,"props":395,"children":396},{},[397],{"type":23,"value":398},"说一下我们遇到的游戏启动时间过长时解决过的几个问题。我们定义启动时间是从点击app图标到进入游戏Patch界面（即游戏逻辑接管）这段时间。\n1）Shader编译时长。如果只有游戏安装之后第一次启动时间过长，一个很大的可能是shader编译，之后游戏启动因为有了Cache所以会快很多。这种情况的话建议查看下Always Include的Shader内容和变体，使用shadervariantcollection等方案替代。",{"type":14,"tag":15,"props":400,"children":401},{},[402],{"type":23,"value":403},"2）Tolua绑定和Lua资源加载。这种是每次游戏启动都会有的，ToLua接口绑定需要一定的时间，我们在确保前期不会使用Lua的情况下采用多线程的方式进行绑定和加载，保证主线程不会卡住。",{"type":14,"tag":15,"props":405,"children":406},{},[407,409],{"type":23,"value":408},"3）注意设置Web请求的超时时长。我们在游戏启动的时候做了一些hook的事情，会有Web请求，后来我们遇到一个情况是在很多机器上会黑屏等待30s甚至60s这样的时长，后来发现是因为这个Web请求没有设置超时时间，于是使用了机器默认的超时时间，在不同设备上不同，比如红米2A上会有接近1分钟的超时限制。这个很坑，只是因为那个非必须的Web服务没有正确开启，导致排查了很长时间。\nNative层增加界面，减少黑屏等待，提升玩家体验。这个并不能真正解决问题，只是一种缓解手段，等到优化做到位了，其实也就不需要了。\n说的内容大都是启动时间而非冷启动，供题主参考。建议题主多看看Unity进程的输出log，可能会有意外发现，通常情况下，不使用Resources的方式的话，在没Bug的情况下冷启动时间应该不会很长，我们因为没怎么用这种方式，所以不是很清楚。这个链接可以参考下：",{"type":14,"tag":92,"props":410,"children":412},{"href":389,"rel":411},[96],[413],{"type":23,"value":389},{"type":14,"tag":415,"props":416,"children":418},"h2",{"id":417},"脚本编译顺序",[419],{"type":23,"value":417},{"type":14,"tag":15,"props":421,"children":422},{},[423],{"type":23,"value":424},"对于大型项目来说，这确实是大家经常遇到的情况。一般来说，Unity Editor会按照脚本的依赖关系编译代码，其主要分为以下四个步骤：\n编译Standard Assets、Pro Standard Assets和Plugins文件夹中的Runtime Script；\n编译以上三个文件夹中Editor文件夹下的Script；\n编译项目中所有剩余的Runtime Script（Editor文件夹以外Script；\n编译剩余Script（即Editor文件夹中Script）。\n知道了Unity编辑器的脚本编译特性后，我们则建议研发团队可以将一些长时间不需要改动的脚本代码（比如各种插件代码）放入到Standard Assets、Pro Standard Assets或Plugins文件夹中，这样这些代码只需要编译一次，后续的时间就都能节省下来。有朋友做过测试，在他们的项目中经过上面的改动，原来项目每次的编译时间从23s下降到7s。想想看，这将节省你和你的团队多少时间！",{"type":14,"tag":15,"props":426,"children":427},{},[428],{"type":14,"tag":92,"props":429,"children":432},{"href":430,"rel":431},"https://docs.unity3d.com/Manual/ScriptCompileOrderFolders.html",[96],[433],{"type":23,"value":430},{"title":7,"searchDepth":435,"depth":435,"links":436},2,[437],{"id":417,"depth":435,"text":417},"markdown","content:unity:2020-03-04-unity-startup.md","content","unity/2020-03-04-unity-startup.md","md","2020-03-04",[445,455,582,631,683,696,808],{"title":446,"_path":447,"children":448},"Art","/art",[449,452],{"title":450,"_path":451},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":453,"_path":454},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":456,"_path":457,"children":458},"Dotnet","/dotnet",[459,462,465,468,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,576,579],{"title":460,"_path":461},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":463,"_path":464},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":466,"_path":467},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":469,"_path":470},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":472,"_path":473},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":475,"_path":476},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":478,"_path":479},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":481,"_path":482},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":484,"_path":485},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":487,"_path":488},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":490,"_path":491},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":493,"_path":494},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":496,"_path":497},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":499,"_path":500},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":502,"_path":503},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":505,"_path":506},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":508,"_path":509},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":511,"_path":512},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":514,"_path":515},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":517,"_path":518},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":520,"_path":521},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":523,"_path":524},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":526,"_path":527},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":529,"_path":530},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":532,"_path":533},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":535,"_path":536},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":538,"_path":539},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":541,"_path":542},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":544,"_path":545},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":547,"_path":548},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":550,"_path":551},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":553,"_path":554},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":556,"_path":557},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":559,"_path":560},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":562,"_path":563},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":565,"_path":566},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":568,"_path":569},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":571,"_path":572},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":574,"_path":575},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":577,"_path":578},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":580,"_path":581},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":583,"_path":584,"children":585},"Game","/game",[586,589,592,595,598,601,604,607,610,613,616,619,622,625,628],{"title":587,"_path":588},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":590,"_path":591},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":593,"_path":594},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":596,"_path":597},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":599,"_path":600},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":602,"_path":603},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":605,"_path":606},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":608,"_path":609},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":611,"_path":612},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":614,"_path":615},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":617,"_path":618},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":620,"_path":621},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":623,"_path":624},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":626,"_path":627},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":629,"_path":630},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":632,"_path":633,"children":634},"Gyj","/gyj",[635,638,641,644,647,650,653,656,659,662,665,668,671,674,677,680],{"title":636,"_path":637},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":639,"_path":640},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":642,"_path":643},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":645,"_path":646},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":648,"_path":649},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":651,"_path":652},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":654,"_path":655},"玩法","/gyj/2022-08-22-wanfa",{"title":657,"_path":658},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":660,"_path":661},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":663,"_path":664},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":666,"_path":667},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":669,"_path":670},"门派内容相关","/gyj/2022-11-17-sect",{"title":672,"_path":673},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":675,"_path":676},"种植","/gyj/2022-12-01-zhongzhi",{"title":678,"_path":679},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":681,"_path":682},"跑商","/gyj/2023-11-01-paoshang",{"title":684,"_path":685,"children":686},"Js","/js",[687,690,693],{"title":688,"_path":689},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":691,"_path":692},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":694,"_path":695},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":697,"_path":698,"children":699},"Tool","/tool",[700,703,706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805],{"title":701,"_path":702},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":704,"_path":705},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":707,"_path":708},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":710,"_path":711},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":713,"_path":714},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":716,"_path":717},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":719,"_path":720},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":722,"_path":723},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":725,"_path":726},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":728,"_path":729},"mac下brew 使用","/tool/2020-01-13-brew",{"title":731,"_path":732},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":734,"_path":735},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":737,"_path":738},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":740,"_path":741},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":743,"_path":744},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":746,"_path":747},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":749,"_path":750},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":752,"_path":753},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":755,"_path":756},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":758,"_path":759},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":761,"_path":762},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":764,"_path":765},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":767,"_path":768},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":770,"_path":771},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":773,"_path":774},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":776,"_path":777},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":779,"_path":780},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":782,"_path":783},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":785,"_path":786},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":788,"_path":789},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":791,"_path":792},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":794,"_path":795},"rider的使用","/tool/2022-08-02-rider-use",{"title":797,"_path":798},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":800,"_path":801},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":803,"_path":804},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":806,"_path":807},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":809,"_path":810,"children":811},"Unity","/unity",[812,815,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,894,897,900,903,906,909,912,915,918,921,924,927,930,933,936,939,942,945,948,951,954,957,960,963,966,969,972,975,978,981,984,987,990,993,996,999,1002,1005,1008,1011,1014,1017,1020,1023],{"title":813,"_path":814},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":816,"_path":817},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":819,"_path":820},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":822,"_path":823},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":825,"_path":826},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":828,"_path":829},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":831,"_path":832},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":834,"_path":835},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":837,"_path":838},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":840,"_path":841},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":843,"_path":844},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":846,"_path":847},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":849,"_path":850},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":852,"_path":853},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":855,"_path":856},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":858,"_path":859},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":861,"_path":862},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":864,"_path":865},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":867,"_path":868},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":870,"_path":871},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":873,"_path":874},"技能系统","/unity/2020-02-15-skill-system",{"title":876,"_path":877},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":879,"_path":880},"角色状态设计","/unity/2020-02-17-character-states",{"title":882,"_path":883},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":885,"_path":886},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":888,"_path":889},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":891,"_path":892},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":8,"_path":4},{"title":895,"_path":896},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":898,"_path":899},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":901,"_path":902},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":904,"_path":905},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":907,"_path":908},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":910,"_path":911},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":913,"_path":914},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":916,"_path":917},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":919,"_path":920},"unity的addressables","/unity/2020-09-12-addressables",{"title":922,"_path":923},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":925,"_path":926},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":928,"_path":929},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":931,"_path":932},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":934,"_path":935},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":937,"_path":938},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":940,"_path":941},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":943,"_path":944},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":946,"_path":947},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":949,"_path":950},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":952,"_path":953},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":955,"_path":956},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":958,"_path":959},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":961,"_path":962},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":964,"_path":965},"简单保存工具","/unity/2020-11-13-simple-save",{"title":967,"_path":968},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":970,"_path":971},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":973,"_path":974},"ability","/unity/2020-11-16-dotssample",{"title":976,"_path":977},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":979,"_path":980},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":982,"_path":983},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":985,"_path":986},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":988,"_path":989},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":991,"_path":992},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":994,"_path":995},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":997,"_path":998},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1000,"_path":1001},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1003,"_path":1004},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1006,"_path":1007},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1009,"_path":1010},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1012,"_path":1013},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1015,"_path":1016},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1018,"_path":1019},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1021,"_path":1022},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1024,"_path":1025},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040382]