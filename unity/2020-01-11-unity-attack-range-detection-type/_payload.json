[{"data":1,"prerenderedAt":672},["Reactive",2],{"content-query-WBSOWGNQ12":3,"content-navigation-8C37fagqQL":90},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":84,"_id":85,"_source":86,"_file":87,"_extension":88,"date":89},"/unity/2020-01-11-unity-attack-range-detection-type","unity",false,"","unity攻击范围检测的方式区别","1.利用碰撞器的触发器Trigger这种是比较基础的做法，利用OnTriggerEntry函数，当目标进入触发器时触发。例如玩家有一把剑，我要做攻击判定的话，我就可以在剑上挂一个触发器，设定好大小，当播放动画时，随着剑的挥动，目标会进入Trigger的范围，此时就会调用OnTriggerEntry函数。但是这样做有个弊端，如果挥舞速度太快，检测会有问题；还有就是必须满足“进入”这个条件，也就是说如果原来目标就在触发器范围内，或者触发器在目标内，是不会触发函数的。所以这种方法不太适用于3D游戏。不过这种方法也不是不能用，只是适用条件有限，在2D游戏上，结合上Animation的录制功能，通过动画",{"type":11,"children":12,"toc":81},"root",[13,22,28,33,39,44,49,55,60,65,71,76],{"type":14,"tag":15,"props":16,"children":18},"element","h4",{"id":17},"_1利用碰撞器的触发器trigger",[19],{"type":20,"value":21},"text","1.利用碰撞器的触发器Trigger",{"type":14,"tag":23,"props":24,"children":25},"p",{},[26],{"type":20,"value":27},"这种是比较基础的做法，利用OnTriggerEntry函数，当目标进入触发器时触发。例如玩家有一把剑，我要做攻击判定的话，我就可以在剑上挂一个触发器，设定好大小，当播放动画时，随着剑的挥动，目标会进入Trigger的范围，此时就会调用OnTriggerEntry函数。但是这样做有个弊端，如果挥舞速度太快，检测会有问题；还有就是必须满足“进入”这个条件，也就是说如果原来目标就在触发器范围内，或者触发器在目标内，是不会触发函数的。所以这种方法不太适用于3D游戏。",{"type":14,"tag":23,"props":29,"children":30},{},[31],{"type":20,"value":32},"不过这种方法也不是不能用，只是适用条件有限，在2D游戏上，结合上Animation的录制功能，通过动画来改变Trigger的大小，这样就可以触发OnTriggerEntry函数一次或者多次，这样也是可以做出不错效果的。在3D游戏中，可以在人物前面放置一个大小合适Trigger当做攻击范围，再结合动画事件进行攻击判定，不过这样做的缺点是攻击范围大小恒定，如果人物的攻击范围大小不一，就要创建很多空子物体来设定Trigger范围，脚本也不好管理。",{"type":14,"tag":15,"props":34,"children":36},{"id":35},"_2利用数学判断",[37],{"type":20,"value":38},"2.利用数学判断",{"type":14,"tag":23,"props":40,"children":41},{},[42],{"type":20,"value":43},"可以定义两个向量作为攻击范围，向量有方向也有长度，攻击范围是可以确定的。例如设定两个向量，向量1为Transform.forward的左偏45度，向量2为Transform.forward的右偏45度，长度均为5。此时攻击范围为半径为5，度数为90°的扇形。此时就可以计算敌人是不是在攻击范围内，可以通过Vector3.Angle来计算（角度制），Vector3.Distance来计算距离。",{"type":14,"tag":23,"props":45,"children":46},{},[47],{"type":20,"value":48},"这种方法的局限在于1.如何获取到敌人的游戏物体，可以通过触发器也可以遍历你的敌人列表。2.当敌人体积过大时，有可能身体的一部分已经进入攻击范围，但是postion没有进入攻击范围，此时判定就会出现错误。看情况使用。",{"type":14,"tag":15,"props":50,"children":52},{"id":51},"_3利用射线raycast",[53],{"type":20,"value":54},"3.利用射线Raycast",{"type":14,"tag":23,"props":56,"children":57},{},[58],{"type":20,"value":59},"使用Physics.Raycast()这个方法来发射射线，当射线碰到物体，或者碰到指定Laymask层的物体，或者一定距离后就会返回，返回值是Bool类型。通过out关键字来输出碰撞到的物体的信息，变量类型为RaycastHit。例如我定义一个射线Ray ray =new Ray(), 一个射线返回RaycastHit hit，那么就应该这么使用Physics.Raycast(ray,out hit),表示碰到物体，就会返回ture，物体信息储存在hit中。没有碰到，就会范围false，hit为null。这个方法还有很多重载，可以自己查阅API，根据情况使用。",{"type":14,"tag":23,"props":61,"children":62},{},[63],{"type":20,"value":64},"这种方法是射击游戏的常用判断方法，可以结合lineRender来渲染子弹飞过的特效。不过这种方法也不是万能的，它的局限在于射出射线的点只有一个，用来做射击游戏的攻击判定是非常合适的，但是不能用来做判定比较严格的游戏。为什么呢，因为射击游戏的发射方向是可以根据准星调整的，视觉上的判定也是准星方向，如果是动作游戏，rpg游戏之类的，攻击类型多样，就会出现差错。例如一个从上至下的斩击，攻击范围应该是竖着的一条线，那么射线应该怎发射呢？如果直直的往前发射，那么当敌人蹲下的时候，就会检测不到。你或许会想做成动作模式不就完了吗？（就是类似于龙之谷的操作方式），也是不行的，判定始终在攻击轨迹中央，和攻击动画和攻击特效有出入。",{"type":14,"tag":15,"props":66,"children":68},{"id":67},"_4利用射线linecast",[69],{"type":20,"value":70},"4.利用射线Linecast",{"type":14,"tag":23,"props":72,"children":73},{},[74],{"type":20,"value":75},"这也是Physics的一个方法， Physics.Linecast（）。连接两个点形成线段，如果线段中间有物体，就返回true,否则返回flase，同样，这个方法需要定义一个RaycastHit类型的变量来接收返回数据，具体方法为Physics.Linecast（Vector3 point1, Vector3 point2，out hit）。这种方法需要在武器或者拳头或者其他的需要攻击判定的地方设定一个点，当动画播放时，这个点的世界坐标就会变化，此时我们可以选择记录某几个时间点上判定点的世界坐标，再用Linecast进行判定。一般取判定点的坐标的话我们同样可以利用动画事件。",{"type":14,"tag":23,"props":77,"children":78},{},[79],{"type":20,"value":80},"这种方法调试的时候最好用lineRender把攻击轨迹渲染出来，或者用Debug.DrawLine()画出来（记得设定存在时间，不然一瞬间就消失了看不到），这样可以方便调整我们取判定点的时间节点，不然可能会疑惑，明明我设定好了，怎么检测不到。这种方法适合于动作游戏，以及一些判定比较精细的游戏。需要注意的一点是，Linecast每一帧都会进行判定，一般我们只需要一个动作判定一次，那么还需要在代码里进行约束。",{"title":7,"searchDepth":82,"depth":82,"links":83},2,[],"markdown","content:unity:2020-01-11-unity-attack-range-detection-type.md","content","unity/2020-01-11-unity-attack-range-detection-type.md","md","2020-01-11",[91,101,228,277,329,342,454],{"title":92,"_path":93,"children":94},"Art","/art",[95,98],{"title":96,"_path":97},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":99,"_path":100},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":102,"_path":103,"children":104},"Dotnet","/dotnet",[105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225],{"title":106,"_path":107},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":109,"_path":110},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":112,"_path":113},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":115,"_path":116},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":118,"_path":119},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":121,"_path":122},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":124,"_path":125},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":127,"_path":128},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":130,"_path":131},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":133,"_path":134},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":136,"_path":137},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":139,"_path":140},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":142,"_path":143},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":145,"_path":146},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":148,"_path":149},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":151,"_path":152},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":154,"_path":155},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":157,"_path":158},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":160,"_path":161},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":163,"_path":164},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":166,"_path":167},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":169,"_path":170},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":172,"_path":173},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":175,"_path":176},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":178,"_path":179},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":181,"_path":182},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":184,"_path":185},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":187,"_path":188},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":190,"_path":191},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":193,"_path":194},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":196,"_path":197},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":199,"_path":200},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":202,"_path":203},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":205,"_path":206},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":208,"_path":209},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":211,"_path":212},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":214,"_path":215},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":217,"_path":218},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":220,"_path":221},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":223,"_path":224},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":226,"_path":227},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":229,"_path":230,"children":231},"Game","/game",[232,235,238,241,244,247,250,253,256,259,262,265,268,271,274],{"title":233,"_path":234},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":236,"_path":237},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":239,"_path":240},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":242,"_path":243},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":245,"_path":246},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":248,"_path":249},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":251,"_path":252},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":254,"_path":255},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":257,"_path":258},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":260,"_path":261},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":263,"_path":264},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":266,"_path":267},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":269,"_path":270},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":272,"_path":273},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":275,"_path":276},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":278,"_path":279,"children":280},"Gyj","/gyj",[281,284,287,290,293,296,299,302,305,308,311,314,317,320,323,326],{"title":282,"_path":283},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":285,"_path":286},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":288,"_path":289},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":291,"_path":292},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":294,"_path":295},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":297,"_path":298},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":300,"_path":301},"玩法","/gyj/2022-08-22-wanfa",{"title":303,"_path":304},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":306,"_path":307},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":309,"_path":310},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":312,"_path":313},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":315,"_path":316},"门派内容相关","/gyj/2022-11-17-sect",{"title":318,"_path":319},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":321,"_path":322},"种植","/gyj/2022-12-01-zhongzhi",{"title":324,"_path":325},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":327,"_path":328},"跑商","/gyj/2023-11-01-paoshang",{"title":330,"_path":331,"children":332},"Js","/js",[333,336,339],{"title":334,"_path":335},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":337,"_path":338},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":340,"_path":341},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":343,"_path":344,"children":345},"Tool","/tool",[346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403,406,409,412,415,418,421,424,427,430,433,436,439,442,445,448,451],{"title":347,"_path":348},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":350,"_path":351},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":353,"_path":354},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":356,"_path":357},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":359,"_path":360},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":362,"_path":363},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":365,"_path":366},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":368,"_path":369},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":371,"_path":372},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":374,"_path":375},"mac下brew 使用","/tool/2020-01-13-brew",{"title":377,"_path":378},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":380,"_path":381},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":383,"_path":384},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":386,"_path":387},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":389,"_path":390},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":392,"_path":393},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":395,"_path":396},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":398,"_path":399},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":401,"_path":402},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":404,"_path":405},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":407,"_path":408},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":410,"_path":411},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":413,"_path":414},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":416,"_path":417},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":419,"_path":420},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":422,"_path":423},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":425,"_path":426},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":428,"_path":429},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":431,"_path":432},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":434,"_path":435},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":437,"_path":438},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":440,"_path":441},"rider的使用","/tool/2022-08-02-rider-use",{"title":443,"_path":444},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":446,"_path":447},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":449,"_path":450},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":452,"_path":453},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":455,"_path":456,"children":457},"Unity","/unity",[458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,510,513,516,519,522,525,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,576,579,582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669],{"title":459,"_path":460},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":462,"_path":463},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":465,"_path":466},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":468,"_path":469},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":471,"_path":472},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":474,"_path":475},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":477,"_path":478},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":480,"_path":481},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":483,"_path":484},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":486,"_path":487},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":489,"_path":490},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":492,"_path":493},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":495,"_path":496},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":498,"_path":499},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":501,"_path":502},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":504,"_path":505},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":507,"_path":508},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":8,"_path":4},{"title":511,"_path":512},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":514,"_path":515},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":517,"_path":518},"技能系统","/unity/2020-02-15-skill-system",{"title":520,"_path":521},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":523,"_path":524},"角色状态设计","/unity/2020-02-17-character-states",{"title":526,"_path":527},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":529,"_path":530},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":532,"_path":533},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":535,"_path":536},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":538,"_path":539},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":541,"_path":542},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":544,"_path":545},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":547,"_path":548},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":550,"_path":551},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":553,"_path":554},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":556,"_path":557},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":559,"_path":560},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":562,"_path":563},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":565,"_path":566},"unity的addressables","/unity/2020-09-12-addressables",{"title":568,"_path":569},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":571,"_path":572},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":574,"_path":575},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":577,"_path":578},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":580,"_path":581},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":583,"_path":584},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":586,"_path":587},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":589,"_path":590},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":592,"_path":593},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":595,"_path":596},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":598,"_path":599},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":601,"_path":602},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":604,"_path":605},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":607,"_path":608},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":610,"_path":611},"简单保存工具","/unity/2020-11-13-simple-save",{"title":613,"_path":614},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":616,"_path":617},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":619,"_path":620},"ability","/unity/2020-11-16-dotssample",{"title":622,"_path":623},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":625,"_path":626},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":628,"_path":629},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":631,"_path":632},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":634,"_path":635},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":637,"_path":638},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":640,"_path":641},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":643,"_path":644},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":646,"_path":647},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":649,"_path":650},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":652,"_path":653},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":655,"_path":656},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":658,"_path":659},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":661,"_path":662},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":664,"_path":665},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":667,"_path":668},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":670,"_path":671},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779041368]