[{"data":1,"prerenderedAt":2612},["Reactive",2],{"content-navigation-8C37fagqQL":3,"content-query-silsquwO7R":587},[4,14,141,190,242,255,367],{"title":5,"_path":6,"children":7},"Art","/art",[8,11],{"title":9,"_path":10},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":12,"_path":13},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":15,"_path":16,"children":17},"Dotnet","/dotnet",[18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138],{"title":19,"_path":20},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":22,"_path":23},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":25,"_path":26},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":28,"_path":29},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":31,"_path":32},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":34,"_path":35},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":37,"_path":38},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":40,"_path":41},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":43,"_path":44},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":46,"_path":47},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":49,"_path":50},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":52,"_path":53},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":55,"_path":56},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":58,"_path":59},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":61,"_path":62},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":64,"_path":65},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":67,"_path":68},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":70,"_path":71},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":73,"_path":74},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":76,"_path":77},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":79,"_path":80},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":82,"_path":83},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":85,"_path":86},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":88,"_path":89},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":91,"_path":92},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":94,"_path":95},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":97,"_path":98},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":100,"_path":101},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":103,"_path":104},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":106,"_path":107},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":109,"_path":110},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":112,"_path":113},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":115,"_path":116},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":118,"_path":119},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":121,"_path":122},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":124,"_path":125},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":127,"_path":128},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":130,"_path":131},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":133,"_path":134},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":136,"_path":137},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":139,"_path":140},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":142,"_path":143,"children":144},"Game","/game",[145,148,151,154,157,160,163,166,169,172,175,178,181,184,187],{"title":146,"_path":147},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":149,"_path":150},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":152,"_path":153},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":155,"_path":156},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":158,"_path":159},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":161,"_path":162},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":164,"_path":165},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":167,"_path":168},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":170,"_path":171},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":173,"_path":174},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":176,"_path":177},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":179,"_path":180},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":182,"_path":183},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":185,"_path":186},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":188,"_path":189},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":191,"_path":192,"children":193},"Gyj","/gyj",[194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239],{"title":195,"_path":196},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":198,"_path":199},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":201,"_path":202},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":204,"_path":205},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":207,"_path":208},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":210,"_path":211},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":213,"_path":214},"玩法","/gyj/2022-08-22-wanfa",{"title":216,"_path":217},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":219,"_path":220},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":222,"_path":223},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":225,"_path":226},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":228,"_path":229},"门派内容相关","/gyj/2022-11-17-sect",{"title":231,"_path":232},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":234,"_path":235},"种植","/gyj/2022-12-01-zhongzhi",{"title":237,"_path":238},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":240,"_path":241},"跑商","/gyj/2023-11-01-paoshang",{"title":243,"_path":244,"children":245},"Js","/js",[246,249,252],{"title":247,"_path":248},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":250,"_path":251},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":253,"_path":254},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":256,"_path":257,"children":258},"Tool","/tool",[259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364],{"title":260,"_path":261},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":263,"_path":264},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":266,"_path":267},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":269,"_path":270},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":272,"_path":273},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":275,"_path":276},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":278,"_path":279},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":281,"_path":282},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":284,"_path":285},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":287,"_path":288},"mac下brew 使用","/tool/2020-01-13-brew",{"title":290,"_path":291},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":293,"_path":294},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":296,"_path":297},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":299,"_path":300},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":302,"_path":303},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":305,"_path":306},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":308,"_path":309},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":311,"_path":312},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":314,"_path":315},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":317,"_path":318},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":320,"_path":321},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":323,"_path":324},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":326,"_path":327},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":329,"_path":330},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":332,"_path":333},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":335,"_path":336},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":338,"_path":339},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":341,"_path":342},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":344,"_path":345},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":347,"_path":348},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":350,"_path":351},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":353,"_path":354},"rider的使用","/tool/2022-08-02-rider-use",{"title":356,"_path":357},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":359,"_path":360},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":362,"_path":363},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":365,"_path":366},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":368,"_path":369,"children":370},"Unity","/unity",[371,374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584],{"title":372,"_path":373},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":375,"_path":376},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":378,"_path":379},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":381,"_path":382},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":384,"_path":385},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":387,"_path":388},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":390,"_path":391},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":393,"_path":394},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":396,"_path":397},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":399,"_path":400},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":402,"_path":403},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":405,"_path":406},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":408,"_path":409},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":411,"_path":412},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":414,"_path":415},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":417,"_path":418},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":420,"_path":421},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":423,"_path":424},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":426,"_path":427},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":429,"_path":430},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":432,"_path":433},"技能系统","/unity/2020-02-15-skill-system",{"title":435,"_path":436},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":438,"_path":439},"角色状态设计","/unity/2020-02-17-character-states",{"title":441,"_path":442},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":444,"_path":445},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":447,"_path":448},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":450,"_path":451},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":453,"_path":454},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":456,"_path":457},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":459,"_path":460},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":462,"_path":463},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":465,"_path":466},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":468,"_path":469},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":471,"_path":472},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":474,"_path":475},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":477,"_path":478},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":480,"_path":481},"unity的addressables","/unity/2020-09-12-addressables",{"title":483,"_path":484},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":486,"_path":487},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":489,"_path":490},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":492,"_path":493},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":495,"_path":496},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":498,"_path":499},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":501,"_path":502},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":504,"_path":505},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":507,"_path":508},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":510,"_path":511},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":513,"_path":514},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":516,"_path":517},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":519,"_path":520},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":522,"_path":523},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":525,"_path":526},"简单保存工具","/unity/2020-11-13-simple-save",{"title":528,"_path":529},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":531,"_path":532},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":534,"_path":535},"ability","/unity/2020-11-16-dotssample",{"title":537,"_path":538},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":540,"_path":541},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":543,"_path":544},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":546,"_path":547},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":549,"_path":550},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":552,"_path":553},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":555,"_path":556},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":558,"_path":559},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":561,"_path":562},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":564,"_path":565},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":567,"_path":568},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":570,"_path":571},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":573,"_path":574},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":576,"_path":577},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":579,"_path":580},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":582,"_path":583},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":585,"_path":586},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",[588,794,829,940,1100,1186,1290,1327,1781,1836,1907,2097,2187,2264,2496],{"_path":586,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":585,"description":592,"body":593,"_type":788,"_id":789,"_source":790,"_file":791,"_extension":792,"date":793},"unity",false,"","关于parent和LinkedEntityGroupparent 涉及到localtoworld, 以及一些物理和其他的转换规则parent和位置有关系..所以父实体需要添加Translation和LocalToWorld.否则会删除该parent和LocalToParent组件添加了parent组件且添加了Translation,LocalToWorld,LocalToParent组件,会自动给父实体添加child组件,四个组件缺一不可如果使用了LocalToParent,这个时候Translation代表的是相对于父对象的坐标..相当于传统的localTranslation\n这个时候如果获",{"type":594,"children":595,"toc":783},"root",[596,605,662,667,673,681,686],{"type":597,"tag":598,"props":599,"children":601},"element","h2",{"id":600},"关于parent和linkedentitygroup",[602],{"type":603,"value":604},"text","关于parent和LinkedEntityGroup",{"type":597,"tag":606,"props":607,"children":608},"ul",{},[609,633],{"type":597,"tag":610,"props":611,"children":612},"li",{},[613,615],{"type":603,"value":614},"parent 涉及到localtoworld, 以及一些物理和其他的转换规则",{"type":597,"tag":606,"props":616,"children":617},{},[618,623,628],{"type":597,"tag":610,"props":619,"children":620},{},[621],{"type":603,"value":622},"parent和位置有关系..所以父实体需要添加Translation和LocalToWorld.否则会删除该parent和LocalToParent组件",{"type":597,"tag":610,"props":624,"children":625},{},[626],{"type":603,"value":627},"添加了parent组件且添加了Translation,LocalToWorld,LocalToParent组件,会自动给父实体添加child组件,四个组件缺一不可",{"type":597,"tag":610,"props":629,"children":630},{},[631],{"type":603,"value":632},"如果使用了LocalToParent,这个时候Translation代表的是相对于父对象的坐标..相当于传统的localTranslation\n这个时候如果获取世界坐标..可以使用LocalToWorld.pos",{"type":597,"tag":610,"props":634,"children":635},{},[636,638,645,647,653,654,660],{"type":603,"value":637},"linkedEntityGroup 和 ",{"type":597,"tag":639,"props":640,"children":642},"code",{"className":641},[],[643],{"type":603,"value":644},"Instantiate",{"type":603,"value":646}," ",{"type":597,"tag":639,"props":648,"children":650},{"className":649},[],[651],{"type":603,"value":652},"SetEnabled",{"type":603,"value":646},{"type":597,"tag":639,"props":655,"children":657},{"className":656},[],[658],{"type":603,"value":659},"DestroyEntity",{"type":603,"value":661}," 有关",{"type":597,"tag":598,"props":663,"children":665},{"id":664},"关于转换",[666],{"type":603,"value":664},{"type":597,"tag":668,"props":669,"children":670},"p",{},[671],{"type":603,"value":672},"在Conversion World中，仅仅是复制生成了来自Classic World的、保留原有Hierarchy关系的GameObject Entity，这些Entity拥有的组件仍然是我们熟知的传统Unity组件，例如Transform、MeshFilter。接下来，将调用DOTS预置的或我们自定义的Convert接口，完成向IComponentData组件的转换。自然而然的，可能没有实现对某Component Object的转换接口，那么在转换过程中将被丢弃，所以该转换不一定是“一对一”，所以Unity称呼其为\"Primary Entity\"。下图呈现了转换全过程。",{"type":597,"tag":668,"props":674,"children":675},{},[676],{"type":597,"tag":677,"props":678,"children":680},"img",{"alt":591,"src":679},"/images/2022-09-10-ecs-beiwang/v2-332760451f516eb225e95ea7683945e5_720w.jpg",[],{"type":597,"tag":668,"props":682,"children":683},{},[684],{"type":603,"value":685},"转换过程都是在Conversion World中完成的,DOTS在内部为转换过程创建了一个World。作为独立World，它拥有自己的EntityManager和ComponentSystem，进而拥有并管理自己的Entity和ComponentData。",{"type":597,"tag":687,"props":688,"children":689},"ol",{},[690,709,723],{"type":597,"tag":610,"props":691,"children":692},{},[693,695,701,705],{"type":603,"value":694},"使用ConvertToEntity组件,添加IConvertGameObjectToEntity接口,或者在组件上添加",{"type":597,"tag":639,"props":696,"children":698},{"className":697},[],[699],{"type":603,"value":700},"[GenerateAuthoringComponent]",{"type":597,"tag":702,"props":703,"children":704},"br",{},[],{"type":597,"tag":677,"props":706,"children":708},{"alt":591,"src":707},"/images/2022-09-10-ecs-beiwang/1662571573000.png",[],{"type":597,"tag":610,"props":710,"children":711},{},[712,714],{"type":603,"value":713},"同一,但是使用代码控制转换的时机,继承ConvertToSingleEntity,并覆盖awake,然后在手动调用.",{"type":597,"tag":715,"props":716,"children":718},"pre",{"code":717},"public class ConvertToSingleEntity : ConvertToEntity\n{\n    void Awake()\n    {\n    }\n}\n\n//实际上就是ConvertToEntity中的代码\npublic static void ConvertGameObejct(World dstWorld, GameObject gameObject)\n{\n    var system = World.DefaultGameObjectInjectionWorld.GetOrCreateSystem\u003CConvertToEntitySystem>();\n\n    var convert = gameObject.GetComponent\u003CConvertToEntity>();\n\n    if (convert == null)\n    {\n        return ;\n    }\n    system.AddToBeConverted(dstWorld, convert);\n}\n",[719],{"type":597,"tag":639,"props":720,"children":721},{"__ignoreMap":591},[722],{"type":603,"value":717},{"type":597,"tag":610,"props":724,"children":725},{},[726,728,731,733,741,744,746,754,757,759,765,767,773,775],{"type":603,"value":727},"使用IDeclareReferencedPrefabs.声明实体的prefab,然后进行存储,以便进行之后的实例化",{"type":597,"tag":702,"props":729,"children":730},{},[],{"type":603,"value":732},"对于转换世界中的每个游戏对象，在任何转换系统运行之前，都会在目标世界中自动创建一个主要实体。随后可以通过 GameObjectConversionSystem.GetPrimaryEntity 访问与 GameObject 关联的实体。",{"type":597,"tag":715,"props":734,"children":736},{"code":735},"  /*\n     *    \n     *    \n         if (m_Prefab == Entity.Null)\n               {\n                   var prefabEntity = GetSingletonEntity\u003CGamePrefabCollectionComponent>();\n                   var prefabs = GetBuffer\u003CGamePrefabBuffer>(prefabEntity);\n                   for (int i = 0; i \u003C prefabs.Length; ++i)\n                   {\n                       if (HasComponent\u003CPlayer.State>(prefabs[i].Value))\n                           m_Prefab = prefabs[i].Value;\n                   }\n               }\n     * \n     * \n     * 添加进来的prefab不需要添加convert to entity\n     * 可以用单例获取GamePrefabCollectionComponent,然后获取想要的entity\n     * \n     */\n    public class GameDeclareReferencedPrefabs : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs\n    {\n   \n        public List\u003CGameObject> Prefabs = new List\u003CGameObject>();\n\n        public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n        {\n            dstManager.AddComponentData(entity, default(GamePrefabCollectionComponent));\n            var prefabs = dstManager.AddBuffer\u003CGamePrefabBuffer>(entity);\n\n            foreach (var prefab in Prefabs)\n            { \n                var prefabEnt = conversionSystem.GetPrimaryEntity(prefab);\n                if (dstManager.Exists(prefabEnt))\n                    prefabs.Add(new GamePrefabBuffer { Value = prefabEnt });\n                else\n                    Debug.LogError($\"The prefab {prefab.name} in the ghost collection was no converted to an entity, skipping it\");\n            }\n        }\n\n        public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n        {\n            foreach (var prefab in Prefabs)\n            {\n                if(prefab == null)\n                {\n                    continue;\n                }\n                referencedPrefabs.Add(prefab);\n            }\n        }\n    }\n",[737],{"type":597,"tag":639,"props":738,"children":739},{"__ignoreMap":591},[740],{"type":603,"value":735},{"type":597,"tag":702,"props":742,"children":743},{},[],{"type":603,"value":745},"4.从转换系统中根据component获取实体,和上面类似..因为转换子物体的时候,转换系统中会生成实体,这个时候可以使用组件从conversionSystem中获取,",{"type":597,"tag":715,"props":747,"children":749},{"code":748},"     public static void AddAbilityComponents(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem, AbilityAuthoring[] abilities)\n        {\n            dstManager.AddComponentData(entity, new AbilityCollection.State());\n\n            // Create ability entities\n            var abilityEntities = new List\u003CEntity>(abilities.Length);\n            for (int i = 0; i \u003C abilities.Length; i++)\n            {\n                var e = conversionSystem.GetEntities(abilities[i]);\n                e.MoveNext();\n                var abilityEntity = e.Current;\n\n                if (abilityEntities.Contains(abilityEntity))\n                {\n                    GameDebug.LogError(\"Ability \" + abilities[i] + \" registered multiple times in abilities list\");\n                }\n\n                abilityEntities.Add(abilityEntity);\n            }\n\n            // Add abilities to ability buffer\n            dstManager.AddBuffer\u003CAbilityCollection.AbilityEntry>(entity);\n            var abilityBuffer = dstManager.GetBuffer\u003CAbilityCollection.AbilityEntry>(entity);\n            for (int i = 0; i \u003C abilities.Length; i++)\n            {\n                abilityBuffer.Add(new AbilityCollection.AbilityEntry\n                {\n                    entity = abilityEntities[i],\n                    abilityType = abilities[i].abilityTypeFlags,\n                    canRunWith = abilities[i].canRunWithFlags,\n                    canInterrupt = abilities[i].canInterruptFlags,\n                });\n            }\n        }\n",[750],{"type":597,"tag":639,"props":751,"children":752},{"__ignoreMap":591},[753],{"type":603,"value":748},{"type":597,"tag":702,"props":755,"children":756},{},[],{"type":603,"value":758},"5.手动转换gameobject,他的代码和",{"type":597,"tag":639,"props":760,"children":762},{"className":761},[],[763],{"type":603,"value":764},"ConvertToEntitySystem",{"type":603,"value":766},"的代码差不多.会创建一个ConversionWorld,然后进行转换,都是使用了",{"type":597,"tag":639,"props":768,"children":770},{"className":769},[],[771],{"type":603,"value":772},"GameObjectConversionUtility.Convert",{"type":603,"value":774},"工作",{"type":597,"tag":715,"props":776,"children":778},{"code":777},"        public static Entity ConvertGameObjectPrefab(GameObject go,World dstWorld,out BlobAssetStore blob)\n        {\n            Entity returnEntity = Entity.Null;\n        \n            blob = new BlobAssetStore();\n\n            returnEntity =\n                GameObjectConversionUtility.ConvertGameObjectHierarchy(go,GameObjectConversionSettings.FromWorld(dstWorld, blob));\n\n            return returnEntity;\n        }\n",[779],{"type":597,"tag":639,"props":780,"children":781},{"__ignoreMap":591},[782],{"type":603,"value":777},{"title":591,"searchDepth":784,"depth":784,"links":785},2,[786,787],{"id":600,"depth":784,"text":604},{"id":664,"depth":784,"text":664},"markdown","content:unity:2022-09-10-ecs-beiwang.md","content","unity/2022-09-10-ecs-beiwang.md","md","2022-09-10",{"_path":583,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":582,"description":795,"body":796,"_type":788,"_id":826,"_source":790,"_file":827,"_extension":792,"date":828},"从以上可以看出CircleCastAll是投射了一个⚪的运动轨迹",{"type":594,"children":797,"toc":824},[798,806,811],{"type":597,"tag":668,"props":799,"children":800},{},[801,805],{"type":597,"tag":677,"props":802,"children":804},{"alt":591,"src":803},"/images/2022-04-02-CircleCast-Overlapple-diff/1648876953000.png",[],{"type":603,"value":795},{"type":597,"tag":668,"props":807,"children":808},{},[809],{"type":603,"value":810},"而OverlapCircleAll只是检查了一个⚪内的范围",{"type":597,"tag":668,"props":812,"children":813},{},[814,816,822],{"type":603,"value":815},"当然如果CircleCastAll的参数",{"type":597,"tag":817,"props":818,"children":819},"strong",{},[820],{"type":603,"value":821},"distance设置为0,它的功能和",{"type":603,"value":823},"OverlapCircleAll就类似了",{"title":591,"searchDepth":784,"depth":784,"links":825},[],"content:unity:2022-04-02-CircleCast-Overlapple-diff.md","unity/2022-04-02-CircleCast-Overlapple-diff.md","2022-04-02",{"_path":580,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":579,"description":830,"body":831,"_type":788,"_id":937,"_source":790,"_file":938,"_extension":792,"date":939},"一些记录关闭netcode的代码生成Multiplayer->Code Generation Windown 关闭burst的编译,命令行添加参数--burst-disable-compilation ,查看Plugins\\TranslucentImage\\Script\\Editor\\ScenceGizmoAutoDisable.cs 删除特性UnityEditor.Callbacks.DidReloadScriptsUnity 重新生成 TypeCache。这大约需要 4000毫秒，具体取决于程序集中的类型数量。所以避免使用过多无用的插件.减少类型数量参考链接Fast Domain Relo",{"type":594,"children":832,"toc":933},[833,838,905,910],{"type":597,"tag":598,"props":834,"children":836},{"id":835},"一些记录",[837],{"type":603,"value":835},{"type":597,"tag":606,"props":839,"children":840},{},[841,852,874,891],{"type":597,"tag":610,"props":842,"children":843},{},[844,846],{"type":603,"value":845},"关闭netcode的代码生成",{"type":597,"tag":639,"props":847,"children":849},{"className":848},[],[850],{"type":603,"value":851},"Multiplayer->Code Generation Windown ",{"type":597,"tag":610,"props":853,"children":854},{},[855,857,863,865],{"type":603,"value":856},"关闭burst的编译,命令行添加参数",{"type":597,"tag":639,"props":858,"children":860},{"className":859},[],[861],{"type":603,"value":862},"--burst-disable-compilation",{"type":603,"value":864}," ,",{"type":597,"tag":866,"props":867,"children":871},"a",{"href":868,"rel":869},"https://docs.unity3d.com/Packages/com.unity.burst@1.6/manual/docs/QuickStart.html",[870],"nofollow",[872],{"type":603,"value":873},"查看",{"type":597,"tag":610,"props":875,"children":876},{},[877,883,885],{"type":597,"tag":639,"props":878,"children":880},{"className":879},[],[881],{"type":603,"value":882},"Plugins\\TranslucentImage\\Script\\Editor\\ScenceGizmoAutoDisable.cs",{"type":603,"value":884}," 删除特性",{"type":597,"tag":639,"props":886,"children":888},{"className":887},[],[889],{"type":603,"value":890},"UnityEditor.Callbacks.DidReloadScripts",{"type":597,"tag":610,"props":892,"children":893},{},[894,896,903],{"type":603,"value":895},"Unity 重新生成 ",{"type":597,"tag":866,"props":897,"children":900},{"href":898,"rel":899},"https://docs.unity3d.com/ScriptReference/TypeCache.html",[870],[901],{"type":603,"value":902},"TypeCache",{"type":603,"value":904},"。这大约需要 4000毫秒，具体取决于程序集中的类型数量。所以避免使用过多无用的插件.减少类型数量",{"type":597,"tag":598,"props":906,"children":908},{"id":907},"参考链接",[909],{"type":603,"value":907},{"type":597,"tag":606,"props":911,"children":912},{},[913,923],{"type":597,"tag":610,"props":914,"children":915},{},[916],{"type":597,"tag":866,"props":917,"children":920},{"href":918,"rel":919},"https://johnaustin.io/articles/2020/domain-reloads-in-unity",[870],[921],{"type":603,"value":922},"Fast Domain Reloads in Unity — John Austin",{"type":597,"tag":610,"props":924,"children":925},{},[926],{"type":597,"tag":866,"props":927,"children":930},{"href":928,"rel":929},"https://forum.unity.com/threads/improving-iteration-time-on-c-script-changes.1184446/",[870],[931],{"type":603,"value":932},"Unity - Improving iteration time on C# script changes - Unity Forum",{"title":591,"searchDepth":784,"depth":784,"links":934},[935,936],{"id":835,"depth":784,"text":835},{"id":907,"depth":784,"text":907},"content:unity:2022-01-28-unity-Editor-Iteration-Profiler.md","unity/2022-01-28-unity-Editor-Iteration-Profiler.md","2022-01-28",{"_path":577,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":576,"description":941,"body":942,"_type":788,"_id":1097,"_source":790,"_file":1098,"_extension":792,"date":1099},"Roslyn C# - Runtime Compiler通过FileSystemWatcher监控目录检查改变的文件unity的FileSystemWatcher有点问题,子目录下文件返回的路径是错的.所以需要先存储下cs文件进行索引public RealtimeScriptWatcher(ScriptDomain domain, string folderPath)\n{\n    this.domain = domain;\n    Files = new Dictionary\u003Cstring, string>();\n    string[] fileEntries = Directory.Get",{"type":594,"children":943,"toc":1088},[944,950,957,962,973,978,987,992,1001,1006,1011,1017,1046,1051,1060,1065,1074,1079],{"type":597,"tag":598,"props":945,"children":947},{"id":946},"roslyn-c-runtime-compiler",[948],{"type":603,"value":949},"Roslyn C# - Runtime Compiler",{"type":597,"tag":951,"props":952,"children":954},"h3",{"id":953},"通过filesystemwatcher监控目录检查改变的文件",[955],{"type":603,"value":956},"通过FileSystemWatcher监控目录检查改变的文件",{"type":597,"tag":668,"props":958,"children":959},{},[960],{"type":603,"value":961},"unity的FileSystemWatcher有点问题,子目录下文件返回的路径是错的.所以需要先存储下cs文件进行索引",{"type":597,"tag":715,"props":963,"children":968},{"className":964,"code":966,"language":967,"meta":591},[965],"language-csharp","public RealtimeScriptWatcher(ScriptDomain domain, string folderPath)\n{\n    this.domain = domain;\n    Files = new Dictionary\u003Cstring, string>();\n    string[] fileEntries = Directory.GetFiles(folderPath,\"*.cs\", SearchOption.AllDirectories);\n    foreach (var item in fileEntries)\n    {\n        var key = Path.GetFileName(item);\n        if (Files.TryGetValue(key,out var f) == false)\n        {\n            Files.Add(key, item);\n        }\n        else\n        {\n            Debug.LogError($\"{f}和{item}的文件名相同\");\n        }\n    }\n","csharp",[969],{"type":597,"tag":639,"props":970,"children":971},{"__ignoreMap":591},[972],{"type":603,"value":966},{"type":597,"tag":951,"props":974,"children":976},{"id":975},"编译修改的文件并重新加载",[977],{"type":603,"value":975},{"type":597,"tag":715,"props":979,"children":982},{"className":980,"code":981,"language":967,"meta":591},[965],"  // Recompile the script\n    ScriptAssembly asm = domain.CompileAndLoadFile(path, securityMode);\n    \n    // Check for success\n    if(asm == null)\n    {\n        domain.LogCompilerOutputToConsole();\n        return;\n    }\n    \n    // Find the type for the changed source file\n    Type mainMonoType = GetMainMonoTypeForSourceFile(path);\n    \n    // Find type with matching full name\n    ScriptType reloadType = asm.FindType(mainMonoType);\n",[983],{"type":597,"tag":639,"props":984,"children":985},{"__ignoreMap":591},[986],{"type":603,"value":981},{"type":597,"tag":951,"props":988,"children":990},{"id":989},"替换场景中的monobehavior",[991],{"type":603,"value":989},{"type":597,"tag":715,"props":993,"children":996},{"className":994,"code":995,"language":967,"meta":591},[965],"public static bool ReplaceScriptsForScene(Scene targetScene, ScriptType scriptType, out ModScriptReplacerReport report, ScriptReplacerOptions options = ScriptReplacerOptions.Default)\n{\n    bool failed = false;\n    report = new ModScriptReplacerReport();\n\n    bool includeInactive = (options & ScriptReplacerOptions.ReplaceDisabledScripts) != 0;\n\n    foreach (GameObject gameObject in targetScene.GetRootGameObjects())\n    {\n        foreach (MonoBehaviour behaviour in gameObject.GetComponentsInChildren\u003CMonoBehaviour>(includeInactive))\n        {\n            if (ReplaceScriptBehaviourImpl(behaviour, scriptType, ref report, options) == false)\n                failed = true;\n        }\n    }\n    return failed == false;\n}\n",[997],{"type":597,"tag":639,"props":998,"children":999},{"__ignoreMap":591},[1000],{"type":603,"value":995},{"type":597,"tag":668,"props":1002,"children":1003},{},[1004],{"type":603,"value":1005},"通过以上可以看到明显的缺点只支持monobehavior",{"type":597,"tag":668,"props":1007,"children":1008},{},[1009],{"type":603,"value":1010},"若想支持非monobehavior可能需要自己进行处理",{"type":597,"tag":598,"props":1012,"children":1014},{"id":1013},"et的热重载",[1015],{"type":603,"value":1016},"ET的热重载",{"type":597,"tag":606,"props":1018,"children":1019},{},[1020,1025,1036,1041],{"type":597,"tag":610,"props":1021,"children":1022},{},[1023],{"type":603,"value":1024},"分离项目到不同的dll中",{"type":597,"tag":610,"props":1026,"children":1027},{},[1028,1030],{"type":603,"value":1029},"通过代码加载dll",{"type":597,"tag":639,"props":1031,"children":1033},{"className":1032},[],[1034],{"type":603,"value":1035},"System.Reflection.Assembly.Load(assBytes, pdbBytes)",{"type":597,"tag":610,"props":1037,"children":1038},{},[1039],{"type":603,"value":1040},"首先进行编译dll",{"type":597,"tag":610,"props":1042,"children":1043},{},[1044],{"type":603,"value":1045},"按R热加载后,通过反射,对现有的对象进行销毁,然后重新创建",{"type":597,"tag":668,"props":1047,"children":1048},{},[1049],{"type":603,"value":1050},"关键代码:",{"type":597,"tag":715,"props":1052,"children":1055},{"className":1053,"code":1054,"language":967,"meta":591},[965],"\npublic class CodeLoader: IDisposable\n{\n    public static CodeLoader Instance = new CodeLoader();\n\n    public Action Update;\n    public Action LateUpdate;\n    public Action OnApplicationQuit;\n\n    private Assembly assembly;\n\n    private ILRuntime.Runtime.Enviorment.AppDomain appDomain;\n    \n    private Type[] allTypes;\n    \n    public CodeMode CodeMode { get; set; }\n\n    private CodeLoader()\n    {\n    }\n\n    public void Dispose()\n    {\n        this.appDomain?.Dispose();\n    }\n    \n    public void Start()\n    {\n        switch (this.CodeMode)\n        {\n            case CodeMode.Mono:\n            {\n                Dictionary\u003Cstring, UnityEngine.Object> dictionary = AssetsBundleHelper.LoadBundle(\"code.unity3d\");\n                byte[] assBytes = ((TextAsset)dictionary[\"Code.dll\"]).bytes;\n                byte[] pdbBytes = ((TextAsset)dictionary[\"Code.pdb\"]).bytes;\n                \n                assembly = Assembly.Load(assBytes, pdbBytes);\n                this.allTypes = assembly.GetTypes();\n                IStaticMethod start = new MonoStaticMethod(assembly, \"ET.Entry\", \"Start\");\n                start.Run();\n                break;\n            }\n            case CodeMode.ILRuntime:\n            {\n                Dictionary\u003Cstring, UnityEngine.Object> dictionary = AssetsBundleHelper.LoadBundle(\"code.unity3d\");\n                byte[] assBytes = ((TextAsset)dictionary[\"Code.dll\"]).bytes;\n                byte[] pdbBytes = ((TextAsset)dictionary[\"Code.pdb\"]).bytes;\n                \n                //byte[] assBytes = File.ReadAllBytes(Path.Combine(\"../Unity/\", Define.BuildOutputDir, \"Code.dll\"));\n                //byte[] pdbBytes = File.ReadAllBytes(Path.Combine(\"../Unity/\", Define.BuildOutputDir, \"Code.pdb\"));\n            \n                appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n                MemoryStream assStream = new MemoryStream(assBytes);\n                MemoryStream pdbStream = new MemoryStream(pdbBytes);\n                appDomain.LoadAssembly(assStream, pdbStream, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n\n                ILHelper.InitILRuntime(appDomain);\n\n                this.allTypes = appDomain.LoadedTypes.Values.Select(x => x.ReflectionType).ToArray();\n                IStaticMethod start = new ILStaticMethod(appDomain, \"ET.Entry\", \"Start\", 0);\n                start.Run();\n                break;\n            }\n            case CodeMode.Reload:\n            {\n                byte[] assBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, \"Data.dll\"));\n                byte[] pdbBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, \"Data.pdb\"));\n                \n                assembly = Assembly.Load(assBytes, pdbBytes);\n                this.LoadLogic();\n                IStaticMethod start = new MonoStaticMethod(assembly, \"ET.Entry\", \"Start\");\n                start.Run();\n                break;\n            }\n        }\n    }\n\n    // 热重载调用下面三个方法\n    // CodeLoader.Instance.LoadLogic();\n    // Game.EventSystem.Add(CodeLoader.Instance.GetTypes());\n    // Game.EventSystem.Load();\n    public void LoadLogic()\n    {\n        if (this.CodeMode != CodeMode.Reload)\n        {\n            throw new Exception(\"CodeMode != Reload!\");\n        }\n        \n        // 傻屌Unity在这里搞了个傻逼优化，认为同一个路径的dll，返回的程序集就一样。所以这里每次编译都要随机名字\n        string[] logicFiles = Directory.GetFiles(Define.BuildOutputDir, \"Logic_*.dll\");\n        if (logicFiles.Length != 1)\n        {\n            throw new Exception(\"Logic dll count != 1\");\n        }\n\n        string logicName = Path.GetFileNameWithoutExtension(logicFiles[0]);\n        byte[] assBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, $\"{logicName}.dll\"));\n        byte[] pdbBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, $\"{logicName}.pdb\"));\n\n        Assembly hotfixAssembly = Assembly.Load(assBytes, pdbBytes);\n        \n        List\u003CType> listType = new List\u003CType>();\n        listType.AddRange(this.assembly.GetTypes());\n        listType.AddRange(hotfixAssembly.GetTypes());\n        this.allTypes = listType.ToArray();\n    }\n\n    public Type[] GetTypes()\n    {\n        return this.allTypes;\n    }\n}\n",[1056],{"type":597,"tag":639,"props":1057,"children":1058},{"__ignoreMap":591},[1059],{"type":603,"value":1054},{"type":597,"tag":668,"props":1061,"children":1062},{},[1063],{"type":603,"value":1064},"按下f8编译dll",{"type":597,"tag":715,"props":1066,"children":1069},{"className":1067,"code":1068,"language":967,"meta":591},[965],"public static class BuildAssemblieEditor\n{\n        [MenuItem(\"Tools/BuildLogic _F8\")]\n        public static void BuildLogic()\n        {\n            string[] logicFiles = Directory.GetFiles(Define.BuildOutputDir, \"Logic_*\");\n            foreach (string file in logicFiles)\n            {\n                File.Delete(file);\n            }\n            \n            int random = RandomHelper.RandomNumber(100000000, 999999999);\n            string logicFile = $\"Logic_{random}\";\n            \n            BuildAssemblieEditor.BuildMuteAssembly(logicFile, new []\n            {\n                \"Codes/Hotfix/\",\n                \"Codes/HotfixView/\",\n            }, new[]{Path.Combine(Define.BuildOutputDir, \"Data.dll\")}, CodeOptimization.Debug);\n        }\n\n\n    private static void BuildMuteAssembly(string assemblyName, string[] CodeDirectorys, string[] additionalReferences, CodeOptimization codeOptimization)\n        {\n            List\u003Cstring> scripts = new List\u003Cstring>();\n            for (int i = 0; i \u003C CodeDirectorys.Length; i++)\n            {\n                DirectoryInfo dti = new DirectoryInfo(CodeDirectorys[i]);\n                FileInfo[] fileInfos = dti.GetFiles(\"*.cs\", System.IO.SearchOption.AllDirectories);\n                for (int j = 0; j \u003C fileInfos.Length; j++)\n                {\n                    scripts.Add(fileInfos[j].FullName);\n                }\n            }\n\n            string dllPath = Path.Combine(Define.BuildOutputDir, $\"{assemblyName}.dll\");\n            string pdbPath = Path.Combine(Define.BuildOutputDir, $\"{assemblyName}.pdb\");\n            File.Delete(dllPath);\n            File.Delete(pdbPath);\n\n            Directory.CreateDirectory(Define.BuildOutputDir);\n\n            AssemblyBuilder assemblyBuilder = new AssemblyBuilder(dllPath, scripts.ToArray());\n            \n            //启用UnSafe\n            //assemblyBuilder.compilerOptions.AllowUnsafeCode = true;\n\n            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget);\n\n            assemblyBuilder.compilerOptions.CodeOptimization = codeOptimization;\n            assemblyBuilder.compilerOptions.ApiCompatibilityLevel = PlayerSettings.GetApiCompatibilityLevel(buildTargetGroup);\n            // assemblyBuilder.compilerOptions.ApiCompatibilityLevel = ApiCompatibilityLevel.NET_4_6;\n\n            assemblyBuilder.additionalReferences = additionalReferences;\n            \n            assemblyBuilder.flags = AssemblyBuilderFlags.None;\n            //AssemblyBuilderFlags.None                 正常发布\n            //AssemblyBuilderFlags.DevelopmentBuild     开发模式打包\n            //AssemblyBuilderFlags.EditorAssembly       编辑器状态\n            assemblyBuilder.referencesOptions = ReferencesOptions.UseEngineModules;\n\n            assemblyBuilder.buildTarget = EditorUserBuildSettings.activeBuildTarget;\n\n            assemblyBuilder.buildTargetGroup = buildTargetGroup;\n\n            assemblyBuilder.buildStarted += delegate(string assemblyPath) { Debug.LogFormat(\"build start：\" + assemblyPath); };\n\n            assemblyBuilder.buildFinished += delegate(string assemblyPath, CompilerMessage[] compilerMessages)\n            {\n                int errorCount = compilerMessages.Count(m => m.type == CompilerMessageType.Error);\n                int warningCount = compilerMessages.Count(m => m.type == CompilerMessageType.Warning);\n\n                Debug.LogFormat(\"Warnings: {0} - Errors: {1}\", warningCount, errorCount);\n\n                if (warningCount > 0)\n                {\n                    Debug.LogFormat(\"有{0}个Warning!!!\", warningCount);\n                }\n\n                if (errorCount > 0)\n                {\n                    for (int i = 0; i \u003C compilerMessages.Length; i++)\n                    {\n                        if (compilerMessages[i].type == CompilerMessageType.Error)\n                        {\n                            Debug.LogError(compilerMessages[i].message);\n                        }\n                    }\n                }\n            };\n            \n            //开始构建\n            if (!assemblyBuilder.Build())\n            {\n                Debug.LogErrorFormat(\"build fail：\" + assemblyBuilder.assemblyPath);\n                return;\n            }\n        }\n",[1070],{"type":597,"tag":639,"props":1071,"children":1072},{"__ignoreMap":591},[1073],{"type":603,"value":1068},{"type":597,"tag":668,"props":1075,"children":1076},{},[1077],{"type":603,"value":1078},"按下R重载",{"type":597,"tag":715,"props":1080,"children":1083},{"className":1081,"code":1082,"language":967,"meta":591},[965],"    \npublic static class OperaComponentSystem\n{\n    public static void Update()\n    { \n        if (Input.GetKeyDown(KeyCode.R))\n        {\n            CodeLoader.Instance.LoadLogic();\n            Game.EventSystem.Add(CodeLoader.Instance.GetTypes());\n            Game.EventSystem.Load();\n            Log.Debug(\"hot reload success!\");\n        }\n    }\n}\n",[1084],{"type":597,"tag":639,"props":1085,"children":1086},{"__ignoreMap":591},[1087],{"type":603,"value":1082},{"title":591,"searchDepth":784,"depth":784,"links":1089},[1090,1096],{"id":946,"depth":784,"text":949,"children":1091},[1092,1094,1095],{"id":953,"depth":1093,"text":956},3,{"id":975,"depth":1093,"text":975},{"id":989,"depth":1093,"text":989},{"id":1013,"depth":784,"text":1016},"content:unity:2022-01-02-unity-hot-reload.md","unity/2022-01-02-unity-hot-reload.md","2022-01-02",{"_path":574,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":573,"description":1101,"body":1102,"_type":788,"_id":1183,"_source":790,"_file":1184,"_extension":792,"date":1185},"Hi,\nWe found out that this particular issue is very hard to work on as domain reload depends on a lot of things:\n- Number and types of UI widgets alive in the editor\n- Quantity of code in the project (including from packages)\n- Callbacks run as part of the domain reload (InitializeOnLoad, EditorApplication events...) that can be handled by both editor, first party packages, 3rd party packages or user code\n- Topology of the project...",{"type":594,"children":1103,"toc":1181},[1104,1108,1113,1118,1123,1128,1140,1148,1153,1158,1166,1171],{"type":597,"tag":668,"props":1105,"children":1106},{},[1107],{"type":603,"value":1101},{"type":597,"tag":668,"props":1109,"children":1110},{},[1111],{"type":603,"value":1112},"So when we get numbers from users, about Domain Reload times, there are a lot of times where we can't find where the root issue come from.",{"type":597,"tag":668,"props":1114,"children":1115},{},[1116],{"type":603,"value":1117},"The good news is that this is going to change !",{"type":597,"tag":668,"props":1119,"children":1120},{},[1121],{"type":603,"value":1122},"In next version, Unity will ship with a diagnostic switch enabling detailed domain reload timings, allowing any user to see what actually happen on domain reload. This will help us figure what are the most common problematic components and on which ones we should prioritize optimization effort. This will also help users find workarounds for improving performance (e.g. close a particularly consuming UI widget, remove a package that is not really needed in the project,...).\nShortly after, we will backport this diagnostic switch to LTS versions of Unity (current plan is to backport down to 2019.4), to allow for more precise performance comparison.",{"type":597,"tag":668,"props":1124,"children":1125},{},[1126],{"type":603,"value":1127},"We are also working internally to leverage that diagnostic tools to detect problems earlier in packages that we ship, as part of our internal package validation suites. This is an ongoing effort though, so don't put your expectations too high on this, and please report your detailed domain reload logs as soon as you get the update !",{"type":597,"tag":668,"props":1129,"children":1130},{},[1131,1133,1138],{"type":603,"value":1132},"Domain reload detailed timings can now be enabled in 2021.2.0a20 an 2021.1.11f1 (and we are busy backporting this to 2019.4 and 2020.3).\n- In 2021.2.x it can be enabled using the diagnostics switches in Editor Preferences\n",{"type":597,"tag":677,"props":1134,"children":1137},{"alt":1135,"src":1136},"upload_2021-6-14_12-14-44.png","/images/2021-10-01-Increased-script-assembly-reload-time/upload_2021-6-14_12-14-44-png.871142",[],{"type":603,"value":1139},"\n- In 2021.1 (which does not have the diagnostic switches UI), you can enable it with the environment variable UNITY_DIAG_ENABLE_DOMAIN_RELOAD_TIMINGS.\n(e.g. in a Powershell console, you can run",{"type":597,"tag":715,"props":1141,"children":1143},{"code":1142}," $env:UNITY_DIAG_ENABLE_DOMAIN_RELOAD_TIMINGS=\"1\"; & 'C:\\Program Files\\Unity\\Hub\\Editor\\2021.1.11f1\\Editor\\Unity.exe'\n",[1144],{"type":597,"tag":639,"props":1145,"children":1146},{"__ignoreMap":591},[1147],{"type":603,"value":1142},{"type":597,"tag":668,"props":1149,"children":1150},{},[1151],{"type":603,"value":1152},").",{"type":597,"tag":668,"props":1154,"children":1155},{},[1156],{"type":603,"value":1157},"After that, in your editor logs (",{"type":597,"tag":715,"props":1159,"children":1161},{"code":1160},"%LOCALAPPDATA%\\Unity\\Editor\\Editor.log\n",[1162],{"type":597,"tag":639,"props":1163,"children":1164},{"__ignoreMap":591},[1165],{"type":603,"value":1160},{"type":597,"tag":668,"props":1167,"children":1168},{},[1169],{"type":603,"value":1170},"), you'll see detailed timings on domain reload.",{"type":597,"tag":668,"props":1172,"children":1173},{},[1174],{"type":597,"tag":866,"props":1175,"children":1178},{"href":1176,"rel":1177},"https://forum.unity.com/threads/any-update-regarding-increased-script-assembly-reload-time.1117138/?_ga=2.41177696.399908227.1633157438-1122779591.1605612681",[870],[1179],{"type":603,"value":1180},"Any update regarding \"Increased script assembly reload time\"? - Unity Forum",{"title":591,"searchDepth":784,"depth":784,"links":1182},[],"content:unity:2021-10-01-Increased-script-assembly-reload-time.md","unity/2021-10-01-Increased-script-assembly-reload-time.md","2021-10-01",{"_path":571,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":570,"description":1187,"body":1188,"_type":788,"_id":1287,"_source":790,"_file":1288,"_extension":792,"date":1289},"定义实体和组件SemanticObject  为gameobject添加各种componentTraits : 相当于component.可以定义各种属性定义处理系统Problem  依托 DecisionController运行计划StateTermination  为Problem  提供中止条件SemanticQuery   根据query为 DecisionController提供实体Action : 相当于一个特殊的system的基类.他定义了参数,和处理条件.以及effects和reward,但是没有实现具体的方法(executionInfo),executionInfo是需要手动",{"type":594,"children":1189,"toc":1281},[1190,1195,1208,1213,1244,1248,1253,1266,1271,1276],{"type":597,"tag":598,"props":1191,"children":1193},{"id":1192},"定义实体和组件",[1194],{"type":603,"value":1192},{"type":597,"tag":606,"props":1196,"children":1197},{},[1198,1203],{"type":597,"tag":610,"props":1199,"children":1200},{},[1201],{"type":603,"value":1202},"SemanticObject  为gameobject添加各种component",{"type":597,"tag":610,"props":1204,"children":1205},{},[1206],{"type":603,"value":1207},"Traits : 相当于component.可以定义各种属性",{"type":597,"tag":598,"props":1209,"children":1211},{"id":1210},"定义处理系统",[1212],{"type":603,"value":1210},{"type":597,"tag":606,"props":1214,"children":1215},{},[1216,1221,1226,1231],{"type":597,"tag":610,"props":1217,"children":1218},{},[1219],{"type":603,"value":1220},"Problem  依托 DecisionController运行计划",{"type":597,"tag":610,"props":1222,"children":1223},{},[1224],{"type":603,"value":1225},"StateTermination  为Problem  提供中止条件",{"type":597,"tag":610,"props":1227,"children":1228},{},[1229],{"type":603,"value":1230},"SemanticQuery   根据query为 DecisionController提供实体",{"type":597,"tag":610,"props":1232,"children":1233},{},[1234,1236],{"type":603,"value":1235},"Action : 相当于一个特殊的system的基类.他定义了参数,和处理条件.以及effects和reward,但是没有实现具体的方法(executionInfo),executionInfo是需要手动定义的",{"type":597,"tag":715,"props":1237,"children":1239},{"code":1238},"    public abstract class PlannerActionSystem : SystemBase\n    {\n\n        List\u003CParameterDefinition> m_Parameters = new List\u003CParameterDefinition>();\n\n\n        List\u003COperation> m_Preconditions = new List\u003COperation>();\n\n\n\n        List\u003CParameterDefinition> m_CreatedObjects = new List\u003CParameterDefinition>();\n\n\n        List\u003Cstring> m_RemovedObjects = new List\u003Cstring>();\n\n\n        List\u003COperation> m_ObjectModifiers = new List\u003COperation>();\n\n\n        float m_Reward;\n\n        List\u003CCustomRewardData> m_CustomRewards;\n\n\n        Unity.AI.Planner.Controller.ActionExecutionInfo executionInfo;\n\n\n        protected override void OnUpdate()\n        {\n            //检查条件\n\n            //将参数传给executionInfo\n\n            //然后执行方法\n            \n            \n            //处理effect.对object进行修改,创建,删除\n            \n            //然后处理reward\n            \n        }\n\n    }\n",[1240],{"type":597,"tag":639,"props":1241,"children":1242},{"__ignoreMap":591},[1243],{"type":603,"value":1238},{"type":597,"tag":1245,"props":1246,"children":1247},"hr",{},[],{"type":597,"tag":598,"props":1249,"children":1251},{"id":1250},"actions",[1252],{"type":603,"value":1250},{"type":597,"tag":606,"props":1254,"children":1255},{},[1256,1261],{"type":597,"tag":610,"props":1257,"children":1258},{},[1259],{"type":603,"value":1260},"motives  相当于 preconditions   ..需要一些设定才会执行这个",{"type":597,"tag":610,"props":1262,"children":1263},{},[1264],{"type":603,"value":1265},"Requirements   也可以使用preconditions代替   ,",{"type":597,"tag":598,"props":1267,"children":1269},{"id":1268},"domain",[1270],{"type":603,"value":1268},{"type":597,"tag":668,"props":1272,"children":1273},{},[1274],{"type":603,"value":1275},"维护了一个entities列表,当entity触发了OnTriggerEnter事件会增加到这个列表中.",{"type":597,"tag":668,"props":1277,"children":1278},{},[1279],{"type":603,"value":1280},"aiplanner倒是不需要这个..他们是通过entity和component进行目标查找的",{"title":591,"searchDepth":784,"depth":784,"links":1282},[1283,1284,1285,1286],{"id":1192,"depth":784,"text":1192},{"id":1210,"depth":784,"text":1210},{"id":1250,"depth":784,"text":1250},{"id":1268,"depth":784,"text":1268},"content:unity:2021-08-01-AI-Planner.md","unity/2021-08-01-AI-Planner.md","2021-08-01",{"_path":568,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":567,"description":1291,"body":1292,"_type":788,"_id":1324,"_source":790,"_file":1325,"_extension":792,"date":1326},"public class shishi : MonoBehaviour\n{\n    public CameraSizeHandler CameraSize01;\n \n    [System.Serializable]\n    public class CameraSizeHandler\n    {\n        public Color BackgroundColor = Color.gray;\n        public Rect ViewPortRect = new Rect(0.0f, 0.0f, 1.0f, 1.0f); \n        public RectOffset Vie",{"type":594,"children":1293,"toc":1322},[1294,1301,1309,1314],{"type":597,"tag":668,"props":1295,"children":1296},{},[1297],{"type":597,"tag":677,"props":1298,"children":1300},{"alt":677,"src":1299},"/images/2021-07-20-FormerlySerializedAs/20200110140001821.png",[],{"type":597,"tag":715,"props":1302,"children":1304},{"code":1303},"public class shishi : MonoBehaviour\n{\n    public CameraSizeHandler CameraSize01;\n \n    [System.Serializable]\n    public class CameraSizeHandler\n    {\n        public Color BackgroundColor = Color.gray;\n        public Rect ViewPortRect = new Rect(0.0f, 0.0f, 1.0f, 1.0f); \n        public RectOffset ViewPortOffset; \n        public Vector2 CanvasMargin = new Vector2(22.0f, 22.0f);\n        public float MaxSpeed = 1000.0f;\n        bool enabled = false;\n    }\n}\n",[1305],{"type":597,"tag":639,"props":1306,"children":1307},{"__ignoreMap":591},[1308],{"type":603,"value":1303},{"type":597,"tag":668,"props":1310,"children":1311},{},[1312],{"type":603,"value":1313},"现在有一个需求，想改一改CameraSize01这个字段的名字，比如想修改为CameraSize02，并且需要将之前在监视器面板中为CameraSize01设置的各项值保留下来，如果直接修改，则会丢失属性中的值",{"type":597,"tag":715,"props":1315,"children":1317},{"code":1316},"\npublic class shishi : MonoBehaviour\n{\n    [FormerlySerializedAs(\"CameraSize01\")]\n    public CameraSizeHandler CameraSize02;\n \n    [System.Serializable]\n    public class CameraSizeHandler\n    {\n        public Color BackgroundColor = Color.gray;\n        public Rect ViewPortRect = new Rect(0.0f, 0.0f, 1.0f, 1.0f); \n        public RectOffset ViewPortOffset; \n        public Vector2 CanvasMargin = new Vector2(22.0f, 22.0f);\n        public float MaxSpeed = 1000.0f;\n        bool enabled = false;\n    }\n",[1318],{"type":597,"tag":639,"props":1319,"children":1320},{"__ignoreMap":591},[1321],{"type":603,"value":1316},{"title":591,"searchDepth":784,"depth":784,"links":1323},[],"content:unity:2021-07-20-FormerlySerializedAs.md","unity/2021-07-20-FormerlySerializedAs.md","2021-07-20",{"_path":565,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":564,"description":1328,"body":1329,"_type":788,"_id":1778,"_source":790,"_file":1779,"_extension":792,"date":1780},"工欲善其事，必先利其器。为了搞清楚 Unity 的渲染顺序，首先我们要准备一个能方便修改 SortingLayer 以及 RenderQueue 的工具，下面这个编辑器脚本可以满足这个需求：",{"type":594,"children":1330,"toc":1776},[1331,1335,1345,1350,1357,1369,1376,1381,1386,1396,1400,1407,1413,1418,1431,1436,1443,1448,1456,1461,1463,1586,1591,1597,1602,1607,1612,1621,1627,1632,1638,1643,1648,1659,1671,1683,1693,1704,1710,1720,1736,1744,1750,1761,1766],{"type":597,"tag":668,"props":1332,"children":1333},{},[1334],{"type":603,"value":1328},{"type":597,"tag":668,"props":1336,"children":1337},{},[1338],{"type":597,"tag":866,"props":1339,"children":1342},{"href":1340,"rel":1341},"https://gist.github.com/qxsoftware/499135b6482ca57727c69e11b91a12bf",[870],[1343],{"type":603,"value":1344},"MeshRendererInspector.cs",{"type":597,"tag":668,"props":1346,"children":1347},{},[1348],{"type":603,"value":1349},"效果如下：",{"type":597,"tag":668,"props":1351,"children":1352},{},[1353],{"type":597,"tag":677,"props":1354,"children":1356},{"alt":677,"src":1355},"/images/2021-06-14-unity-render-order/mesh-renderer-inspector.jpg",[],{"type":597,"tag":668,"props":1358,"children":1359},{},[1360,1362,1367],{"type":603,"value":1361},"如何添加新的 SortingLayer？请通过 ",{"type":597,"tag":817,"props":1363,"children":1364},{},[1365],{"type":603,"value":1366},"Edit/Project Settings/Tags and Layers",{"type":603,"value":1368}," 菜单选项打开：",{"type":597,"tag":668,"props":1370,"children":1371},{},[1372],{"type":597,"tag":677,"props":1373,"children":1375},{"alt":677,"src":1374},"/images/2021-06-14-unity-render-order/tags-layers.jpg",[],{"type":597,"tag":668,"props":1377,"children":1378},{},[1379],{"type":603,"value":1380},"然后添加三个 Sorting Layer，如上图所示。注意，Sorting Layer 添加后是可以拖动调整顺序的。",{"type":597,"tag":668,"props":1382,"children":1383},{},[1384],{"type":603,"value":1385},"便捷修改 Camera 的 opaqueSortMode 和 transparencySortMode：",{"type":597,"tag":668,"props":1387,"children":1388},{},[1389],{"type":597,"tag":866,"props":1390,"children":1393},{"href":1391,"rel":1392},"https://gist.github.com/qxsoftware/1821915377e333e45f7a632ae07e64aa",[870],[1394],{"type":603,"value":1395},"CameraInspector.cs",{"type":597,"tag":668,"props":1397,"children":1398},{},[1399],{"type":603,"value":1349},{"type":597,"tag":668,"props":1401,"children":1402},{},[1403],{"type":597,"tag":677,"props":1404,"children":1406},{"alt":677,"src":1405},"/images/2021-06-14-unity-render-order/sort-mode.jpg",[],{"type":597,"tag":1408,"props":1409,"children":1411},"h4",{"id":1410},"实际测试",[1412],{"type":603,"value":1410},{"type":597,"tag":668,"props":1414,"children":1415},{},[1416],{"type":603,"value":1417},"测试之前首先明确两点：",{"type":597,"tag":606,"props":1419,"children":1420},{},[1421,1426],{"type":597,"tag":610,"props":1422,"children":1423},{},[1424],{"type":603,"value":1425},"什么因素影响绘制顺序",{"type":597,"tag":610,"props":1427,"children":1428},{},[1429],{"type":603,"value":1430},"深度缓冲区对绘制结果的影响",{"type":597,"tag":668,"props":1432,"children":1433},{},[1434],{"type":603,"value":1435},"为了弄清楚第一点，什么因素影响绘制顺序，我们需要把 ZWrite 关闭。同时结合 Unity Frame Debugger来观察绘制顺序。",{"type":597,"tag":1437,"props":1438,"children":1440},"h5",{"id":1439},"render-queue",[1441],{"type":603,"value":1442},"Render Queue",{"type":597,"tag":668,"props":1444,"children":1445},{},[1446],{"type":603,"value":1447},"RenderQueue 是材质（Material）的关键属性，当我们在 Unity 中创建一个材质后，Unity 会给这个材质设置一个默认 Shader，然后这个材质的 RenderQueue 被改为其 Shader 中设定的 RenderQueue。如果给这个材质球换了 Shader，Unity 会更新它的 RenderQueue（但是请注意，假如当前材质的 Shader 的 RenderQueue 是 3000，然后你修改 Shader 让其 RenderQueue 变成 3100，对应材质球的 RenderQueue 并不会更新！）。",{"type":597,"tag":668,"props":1449,"children":1450},{},[1451],{"type":597,"tag":817,"props":1452,"children":1453},{},[1454],{"type":603,"value":1455},"Unity 最终以 Material 的 RenderQueue 为准。",{"type":597,"tag":668,"props":1457,"children":1458},{},[1459],{"type":603,"value":1460},"Unity 内置了几个 RenderQueue 的字面值：",{"type":603,"value":1462},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":597,"tag":1464,"props":1465,"children":1466},"table",{},[1467,1491],{"type":597,"tag":1468,"props":1469,"children":1470},"thead",{},[1471],{"type":597,"tag":1472,"props":1473,"children":1474},"tr",{},[1475,1481,1486],{"type":597,"tag":1476,"props":1477,"children":1478},"th",{},[1479],{"type":603,"value":1480},"RenderQueue",{"type":597,"tag":1476,"props":1482,"children":1483},{},[1484],{"type":603,"value":1485},"值",{"type":597,"tag":1476,"props":1487,"children":1488},{},[1489],{"type":603,"value":1490},"说明",{"type":597,"tag":1492,"props":1493,"children":1494},"tbody",{},[1495,1514,1532,1550,1568],{"type":597,"tag":1472,"props":1496,"children":1497},{},[1498,1504,1509],{"type":597,"tag":1499,"props":1500,"children":1501},"td",{},[1502],{"type":603,"value":1503},"Background",{"type":597,"tag":1499,"props":1505,"children":1506},{},[1507],{"type":603,"value":1508},"1000",{"type":597,"tag":1499,"props":1510,"children":1511},{},[1512],{"type":603,"value":1513},"这个渲染队列最先渲染，一般用于渲染背景",{"type":597,"tag":1472,"props":1515,"children":1516},{},[1517,1522,1527],{"type":597,"tag":1499,"props":1518,"children":1519},{},[1520],{"type":603,"value":1521},"Geometry(默认值)",{"type":597,"tag":1499,"props":1523,"children":1524},{},[1525],{"type":603,"value":1526},"2000",{"type":597,"tag":1499,"props":1528,"children":1529},{},[1530],{"type":603,"value":1531},"这个渲染队列是大多数物体的默认队列，用于渲染不透明物体",{"type":597,"tag":1472,"props":1533,"children":1534},{},[1535,1540,1545],{"type":597,"tag":1499,"props":1536,"children":1537},{},[1538],{"type":603,"value":1539},"AlphaTest",{"type":597,"tag":1499,"props":1541,"children":1542},{},[1543],{"type":603,"value":1544},"2450",{"type":597,"tag":1499,"props":1546,"children":1547},{},[1548],{"type":603,"value":1549},"使用了 AlphaTest 的物体在这个队列渲染，当所有的不透明物体都渲染完了再渲染这个，有助于提升性能",{"type":597,"tag":1472,"props":1551,"children":1552},{},[1553,1558,1563],{"type":597,"tag":1499,"props":1554,"children":1555},{},[1556],{"type":603,"value":1557},"Transparent",{"type":597,"tag":1499,"props":1559,"children":1560},{},[1561],{"type":603,"value":1562},"3000",{"type":597,"tag":1499,"props":1564,"children":1565},{},[1566],{"type":603,"value":1567},"在 Geometry 和 AlphaTest 之后、从后往前渲染，所有的半透明物体都应该在这里渲染",{"type":597,"tag":1472,"props":1569,"children":1570},{},[1571,1576,1581],{"type":597,"tag":1499,"props":1572,"children":1573},{},[1574],{"type":603,"value":1575},"Overlay",{"type":597,"tag":1499,"props":1577,"children":1578},{},[1579],{"type":603,"value":1580},"4000",{"type":597,"tag":1499,"props":1582,"children":1583},{},[1584],{"type":603,"value":1585},"在之前的所有渲染队列都渲染完了之后渲染，比如镜头光晕",{"type":597,"tag":668,"props":1587,"children":1588},{},[1589],{"type":603,"value":1590},"可以看到，RenderQueue 越大，渲染越靠后。",{"type":597,"tag":1437,"props":1592,"children":1594},{"id":1593},"cameraopaquesortmode",[1595],{"type":603,"value":1596},"Camera.opaqueSortMode",{"type":597,"tag":668,"props":1598,"children":1599},{},[1600],{"type":603,"value":1601},"默认情况下，不透明物体被放在粗略分隔的从前往后排布的桶中，GPU 按照这种方式渲染能节省性能。但是也有部分 GPU 不这么干，比如 PowerVR。Camera.opaqueSortMode 这个值的默认值是 Dafault，根据不同硬件平台，这个值有可能是：OpaqueSortMode.FrontToBack 或者 OpaqueSortMode.NoDistanceSort。我们也可以主动设置这个值为某一种。比如为了减少 CPU 消耗，把这个值设置为 NoDistanceSort。",{"type":597,"tag":668,"props":1603,"children":1604},{},[1605],{"type":603,"value":1606},"所以，不透明物体大部分情况下是按照从前往后渲染，也就是离相机越近，越先渲染。",{"type":597,"tag":668,"props":1608,"children":1609},{},[1610],{"type":603,"value":1611},"如果是手动选择了 FrontToBack，就是从前往后渲染；如果是 NoDistanceSort，就是从后往前渲染。",{"type":597,"tag":1613,"props":1614,"children":1615},"blockquote",{},[1616],{"type":597,"tag":668,"props":1617,"children":1618},{},[1619],{"type":603,"value":1620},"根据实际测试，渲染的顺序并不是完全按照物体几何中心离相机的距离进行排序，而是一个近似的排序。",{"type":597,"tag":1437,"props":1622,"children":1624},{"id":1623},"cameratransparencysortmode",[1625],{"type":603,"value":1626},"Camera.transparencySortMode",{"type":597,"tag":668,"props":1628,"children":1629},{},[1630],{"type":603,"value":1631},"按照我测试用的 Unity5.3.4f1，修改这个值也会影响不透明物体的渲染顺序。所以这个东西很可能不重要，而且有 bug。",{"type":597,"tag":1437,"props":1633,"children":1635},{"id":1634},"sortinglayer",[1636],{"type":603,"value":1637},"SortingLayer",{"type":597,"tag":668,"props":1639,"children":1640},{},[1641],{"type":603,"value":1642},"SortingLayer 拥有最高优先级，如果 SortingLayer 不同，则首先按照 SortingLayer 排序；如果 SortingLayer 相同，再按照 RenderQueue 排序。",{"type":597,"tag":668,"props":1644,"children":1645},{},[1646],{"type":603,"value":1647},"如下图所示，有 6 个立方体，分别按顺序在摄像机前排开：",{"type":597,"tag":668,"props":1649,"children":1650},{},[1651,1655],{"type":597,"tag":677,"props":1652,"children":1654},{"alt":677,"src":1653},"/images/2021-06-14-unity-render-order/preview.png",[],{"type":597,"tag":677,"props":1656,"children":1658},{"alt":677,"src":1657},"/images/2021-06-14-unity-render-order/cubes.jpg",[],{"type":597,"tag":668,"props":1660,"children":1661},{},[1662,1664,1669],{"type":603,"value":1663},"其中，g1 组的立方体 SortingLayer 都是 Layer3，RenderQueue 都是 3000；g2 组的立方体 SortingLayer 都是 Layer2，RenderQueue 都是3500，最终渲染顺序是：",{"type":597,"tag":817,"props":1665,"children":1666},{},[1667],{"type":603,"value":1668},"g2m1 g2m2 g2m3 g1m1 g1m2 g1m3",{"type":603,"value":1670},"。",{"type":597,"tag":668,"props":1672,"children":1673},{},[1674,1676,1681],{"type":603,"value":1675},"直观地说，就是 SortingLayer 越大，则物体",{"type":597,"tag":817,"props":1677,"children":1678},{},[1679],{"type":603,"value":1680},"层级",{"type":603,"value":1682},"越高。SortingLayer 默认只有一个：Default，越往后添加的 SortingLayer 越大。",{"type":597,"tag":668,"props":1684,"children":1685},{},[1686,1688,1692],{"type":603,"value":1687},"现在把 g1 组的立方体 SortingLayer 改成 Layer2，RenderQueue 改成 3600，最终渲染顺序还是：",{"type":597,"tag":817,"props":1689,"children":1690},{},[1691],{"type":603,"value":1668},{"type":603,"value":1670},{"type":597,"tag":668,"props":1694,"children":1695},{},[1696,1698,1702],{"type":603,"value":1697},"直观地说，SortingLayer 相同的前提下，RenderQueue 越大，则物体",{"type":597,"tag":817,"props":1699,"children":1700},{},[1701],{"type":603,"value":1680},{"type":603,"value":1703},"越高。",{"type":597,"tag":1437,"props":1705,"children":1707},{"id":1706},"sortingorder",[1708],{"type":603,"value":1709},"SortingOrder",{"type":597,"tag":668,"props":1711,"children":1712},{},[1713,1715,1719],{"type":603,"value":1714},"如果 SortingLayer 和 RenderQueue 都一样，则 SortingOrder 越大，则物体",{"type":597,"tag":817,"props":1716,"children":1717},{},[1718],{"type":603,"value":1680},{"type":603,"value":1703},{"type":597,"tag":668,"props":1721,"children":1722},{},[1723,1725,1729,1731,1735],{"type":603,"value":1724},"如果只是 SortingLayer 一样，RenderQueue 和 SortingOrder 都不一样，则物体的",{"type":597,"tag":817,"props":1726,"children":1727},{},[1728],{"type":603,"value":1680},{"type":603,"value":1730},"由 RenderQueue 和 SortingOrder 之和决定，相加之和越大，",{"type":597,"tag":817,"props":1732,"children":1733},{},[1734],{"type":603,"value":1680},{"type":603,"value":1703},{"type":597,"tag":1613,"props":1737,"children":1738},{},[1739],{"type":597,"tag":668,"props":1740,"children":1741},{},[1742],{"type":603,"value":1743},"以上结论是通过 Frame Debugger 单步执行得出的。",{"type":597,"tag":1437,"props":1745,"children":1747},{"id":1746},"cameradepth",[1748],{"type":603,"value":1749},"Camera.depth",{"type":597,"tag":668,"props":1751,"children":1752},{},[1753,1755,1759],{"type":603,"value":1754},"还有一个很常用的调整渲染顺序的选项：摄像机深度。摄像机深度是优先级最高的选项，深度值越大，物体",{"type":597,"tag":817,"props":1756,"children":1757},{},[1758],{"type":603,"value":1680},{"type":603,"value":1760},"越高。常用的比如 NGUI 就是用一个单独的相机（深度值比渲染场景的相机大）来渲染 UI，这样就保证 UI 在所有东西上方。",{"type":597,"tag":668,"props":1762,"children":1763},{},[1764],{"type":603,"value":1765},"参考资料：",{"type":597,"tag":668,"props":1767,"children":1768},{},[1769],{"type":597,"tag":866,"props":1770,"children":1773},{"href":1771,"rel":1772},"https://jakobknudsen.wordpress.com/2013/07/20/transparency-and-sorting/",[870],[1774],{"type":603,"value":1775},"Transparency and sorting in Unity",{"title":591,"searchDepth":784,"depth":784,"links":1777},[],"content:unity:2021-06-14-unity-render-order.md","unity/2021-06-14-unity-render-order.md","2021-06-14",{"_path":562,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":561,"description":1782,"body":1783,"_type":788,"_id":1833,"_source":790,"_file":1834,"_extension":792,"date":1835},"Hello Readers, I'll Show you how to make simple one way platform. It is simple, useful and efficient technique to achieve this result. Here is the procedure --",{"type":594,"children":1784,"toc":1831},[1785,1789,1802,1810,1818,1826],{"type":597,"tag":668,"props":1786,"children":1787},{},[1788],{"type":603,"value":1782},{"type":597,"tag":687,"props":1790,"children":1791},{},[1792,1797],{"type":597,"tag":610,"props":1793,"children":1794},{},[1795],{"type":603,"value":1796},"Make a Simple platform using Box collider.",{"type":597,"tag":610,"props":1798,"children":1799},{},[1800],{"type":603,"value":1801},"Make a new game object children of the platform and add a box collider just below the original platform as shown in image and tick its 'is trigger' checkbox so that we can check player's collision in it.",{"type":597,"tag":668,"props":1803,"children":1804},{},[1805],{"type":597,"tag":677,"props":1806,"children":1809},{"alt":1807,"src":1808},"111","/images/2021-06-13-How-to-Make-One-Way-Platform/111-1623584452229.jpg",[],{"type":597,"tag":687,"props":1811,"children":1812},{},[1813],{"type":597,"tag":610,"props":1814,"children":1815},{},[1816],{"type":603,"value":1817},"Create a new Script to the game object we create in step 2 and assign the following script --",{"type":597,"tag":715,"props":1819,"children":1821},{"code":1820},"//the collider of the main visible platform\nvar platform : BoxCollider2D;\n//this variable is true when the players is just below the platform so that its Box collider can be disabled that will allow the player to pass through the platform\nvar oneway : boolean;\n\n\nfunction Update () {\n    //Enabling or Disabling the platform's Box collider to allowing player to pass\n    if (oneway)\n     platform.enabled=false;\n     if (!oneway)\n     platform.enabled=true; \n}\n//Checking the collison of the gameobject we created in step 2 for checking if the player is just below the platform and nedded to ignore the collison to the platform\nfunction OnTriggerStay2D(other: Collider2D) {\n   oneway = true;\n}\n\nfunction OnTriggerExit2D(other: Collider2D) {\n//Just to make sure that the platform's Box Collider does not get permantly disabled and it should be enabeled once the player get its through\n   oneway = false;\n}\n",[1822],{"type":597,"tag":639,"props":1823,"children":1824},{"__ignoreMap":591},[1825],{"type":603,"value":1820},{"type":597,"tag":668,"props":1827,"children":1828},{},[1829],{"type":603,"value":1830},"I've made a simple ball game to illustrate the application of the one way platforms. You can download the example project folder below. --",{"title":591,"searchDepth":784,"depth":784,"links":1832},[],"content:unity:2021-06-13-How-to-Make-One-Way-Platform.md","unity/2021-06-13-How-to-Make-One-Way-Platform.md","2021-06-13",{"_path":559,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":558,"description":1837,"body":1838,"_type":788,"_id":1904,"_source":790,"_file":1905,"_extension":792,"date":1906},"componentpublic struct State:IComponentData\n{\n    public int a;\n} \na系统\n var PostUpdateCommands = World.GetExistingSystem\u003CAbilityUpdateCommandBufferSystem>().CreateCommandBuffer();\nEntities\n    .ForEach((Entity entity) =>\n    {\n        var state = EntityManager.GetComponent\u003CState>(entity);\n        st",{"type":594,"children":1839,"toc":1902},[1840,1845,1853,1858,1866,1871,1879,1884,1892,1897],{"type":597,"tag":668,"props":1841,"children":1842},{},[1843],{"type":603,"value":1844},"component",{"type":597,"tag":715,"props":1846,"children":1848},{"code":1847},"public struct State:IComponentData\n{\n    public int a;\n} \n",[1849],{"type":597,"tag":639,"props":1850,"children":1851},{"__ignoreMap":591},[1852],{"type":603,"value":1847},{"type":597,"tag":668,"props":1854,"children":1855},{},[1856],{"type":603,"value":1857},"a系统",{"type":597,"tag":715,"props":1859,"children":1861},{"code":1860},"\n var PostUpdateCommands = World.GetExistingSystem\u003CAbilityUpdateCommandBufferSystem>().CreateCommandBuffer();\nEntities\n    .ForEach((Entity entity) =>\n    {\n        var state = EntityManager.GetComponent\u003CState>(entity);\n        state.a = 1111;\n        PostUpdateCommands.SetComponent(entity,state);\n    })\n    .WithoutBurst()\n    .Run();\n",[1862],{"type":597,"tag":639,"props":1863,"children":1864},{"__ignoreMap":591},[1865],{"type":603,"value":1860},{"type":597,"tag":668,"props":1867,"children":1868},{},[1869],{"type":603,"value":1870},"b系统",{"type":597,"tag":715,"props":1872,"children":1874},{"code":1873},"Entities\n    .ForEach((Entity entity) =>\n    {\n        var state = EntityManager.GetComponent\u003CState>(entity);\n        state.a = 2222;\n        EntityManager.SetComponentData(entity,state);\n    })\n     .WithStructuralChanges()\n    .Run();\n",[1875],{"type":597,"tag":639,"props":1876,"children":1877},{"__ignoreMap":591},[1878],{"type":603,"value":1873},{"type":597,"tag":668,"props":1880,"children":1881},{},[1882],{"type":603,"value":1883},"执行顺序",{"type":597,"tag":715,"props":1885,"children":1887},{"code":1886},"A-->B-->AbilityUpdateCommandBufferSystem\n",[1888],{"type":597,"tag":639,"props":1889,"children":1890},{"__ignoreMap":591},[1891],{"type":603,"value":1886},{"type":597,"tag":668,"props":1893,"children":1894},{},[1895],{"type":603,"value":1896},"这里的结果,我们以为是2222.其实是1111.",{"type":597,"tag":668,"props":1898,"children":1899},{},[1900],{"type":603,"value":1901},"所以要么全是使用commandbuff.否则容易造成数据错误",{"title":591,"searchDepth":784,"depth":784,"links":1903},[],"content:unity:2021-05-20-ecs-commandbuff-question.md","unity/2021-05-20-ecs-commandbuff-question.md","2021-05-20",{"_path":556,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":555,"description":1908,"body":1909,"_type":788,"_id":2094,"_source":790,"_file":2095,"_extension":792,"date":2096},"1. UGUI上显示模型UGUI上显示模型.png创建拍摄用的摄像机创建RenderTexture并绑定到摄像机camera.targetTexture上RenderTexture绑定到rawImage.texture上（rawImage见上图）创建显示的模型，相机可见注意Destroy销毁 创建出来的RenderTexture 和相机注意模型上的粒子特效由于Alpha透明通道，显示会有一点问题，可以通过Shader Blend混合处理，挂载在rawImage上。public void CreateCamera(Vector3 pos, Vector3 rot, int width, int ",{"type":594,"children":1910,"toc":2092},[1911,1917,1924,1929,1962,1971,1977,1986,2007,2013,2020,2025,2032,2037,2044,2049,2056,2061,2068,2073,2080,2085],{"type":597,"tag":1408,"props":1912,"children":1914},{"id":1913},"_1-ugui上显示模型",[1915],{"type":603,"value":1916},"1. UGUI上显示模型",{"type":597,"tag":668,"props":1918,"children":1919},{},[1920],{"type":597,"tag":677,"props":1921,"children":1923},{"alt":677,"src":1922},"/images/2021-04-11-render-texture/4276633-05b67353425f7248.png",[],{"type":597,"tag":668,"props":1925,"children":1926},{},[1927],{"type":603,"value":1928},"UGUI上显示模型.png",{"type":597,"tag":687,"props":1930,"children":1931},{},[1932,1937,1942,1947,1952,1957],{"type":597,"tag":610,"props":1933,"children":1934},{},[1935],{"type":603,"value":1936},"创建拍摄用的摄像机",{"type":597,"tag":610,"props":1938,"children":1939},{},[1940],{"type":603,"value":1941},"创建RenderTexture并绑定到摄像机camera.targetTexture上",{"type":597,"tag":610,"props":1943,"children":1944},{},[1945],{"type":603,"value":1946},"RenderTexture绑定到rawImage.texture上（rawImage见上图）",{"type":597,"tag":610,"props":1948,"children":1949},{},[1950],{"type":603,"value":1951},"创建显示的模型，相机可见",{"type":597,"tag":610,"props":1953,"children":1954},{},[1955],{"type":603,"value":1956},"注意Destroy销毁 创建出来的RenderTexture 和相机",{"type":597,"tag":610,"props":1958,"children":1959},{},[1960],{"type":603,"value":1961},"注意模型上的粒子特效由于Alpha透明通道，显示会有一点问题，可以通过Shader Blend混合处理，挂载在rawImage上。",{"type":597,"tag":715,"props":1963,"children":1966},{"className":1964,"code":1965,"language":967,"meta":591},[965],"public void CreateCamera(Vector3 pos, Vector3 rot, int width, int height, string layerName, float size)\n{\n    // 创建拍摄用的摄像机\n    GameObject go = new GameObject(\"ModelCamera\");\n    _camera = go.AddComponent\u003CCamera>();\n    _camera.clearFlags = CameraClearFlags.SolidColor;\n    _camera.transform.position = pos;\n    _camera.transform.rotation = Quaternion.Euler(rot);\n    _camera.cullingMask = LayerMask.GetMask(layerName);\n    _camera.orthographic = true;\n    _camera.orthographicSize = size;\n    _camera.backgroundColor = new Color(0,0,0,0);\n\n    // 创建RenderTexture并绑定到摄像机上\n    _renderTexture = new RenderTexture(width, height, 8);\n    _camera.targetTexture = _renderTexture;\n\n    if (_rawImage != null)\n    {\n        _rawImage.texture = _renderTexture;\n    }\n}\n",[1967],{"type":597,"tag":639,"props":1968,"children":1969},{"__ignoreMap":591},[1970],{"type":603,"value":1965},{"type":597,"tag":1408,"props":1972,"children":1974},{"id":1973},"_2-camera相机拍照分享保存为jpg",[1975],{"type":603,"value":1976},"2. Camera相机拍照分享，保存为jpg",{"type":597,"tag":715,"props":1978,"children":1981},{"className":1979,"code":1980,"language":967,"meta":591},[965],"private IEnumerator CameraPhoto(Camera cam, Rect rect, string name) {\n    if (rt == null) {\n        rt = RenderTexture.GetTemporary(renderTextureDesc);\n    }\n    cam.targetTexture = rt;\n    cam.Render();\n\n    RenderTexture currentActiveRT = RenderTexture.active;\n    RenderTexture.active = rt;\n    Texture2D screenShot = new Texture2D((int)rect.width, (int)rect.height, TextureFormat.RGB24, false);\n    screenShot.ReadPixels(rect, 0, 0);\n    screenShot.Apply();\n    yield return new WaitForEndOfFrame();\n\n    cam.targetTexture = null;\n    RenderTexture.active = currentActiveRT;\n\n    byte[] bytes = screenShot.EncodeToJPG();\n    string file = Application.dataPath + \"/Texture/\" + name;\n    System.IO.File.WriteAllBytes(file, bytes);\n}\n",[1982],{"type":597,"tag":639,"props":1983,"children":1984},{"__ignoreMap":591},[1985],{"type":603,"value":1980},{"type":597,"tag":687,"props":1987,"children":1988},{},[1989,1994,1999,2004],{"type":597,"tag":610,"props":1990,"children":1991},{},[1992],{"type":603,"value":1993},"Rendertexture的分配和销毁上有一个地方需要注意：\n如果频繁的要new一个rt出来，那么不要直接new，而是使用RenderTexture提供的GetTemporary和ReleaseTemporary，它将在内部维护一个池，反复重用一些大小格式一样的rt资源，因为让GPU为你分配一个新的texture其实是要耗时间的。",{"type":597,"tag":610,"props":1995,"children":1996},{},[1997],{"type":603,"value":1998},"EncodeToJPG 生成的图片体积更小",{"type":597,"tag":610,"props":2000,"children":2001},{},[2002],{"type":603,"value":2003},"有的时候我们想人为的控制每一次渲染，你可以将这个摄像机disable掉，然后手动的调用一次render。",{"type":597,"tag":610,"props":2005,"children":2006},{},[],{"type":597,"tag":1408,"props":2008,"children":2010},{"id":2009},"_3-制作小地图",[2011],{"type":603,"value":2012},"3. 制作小地图",{"type":597,"tag":668,"props":2014,"children":2015},{},[2016],{"type":597,"tag":677,"props":2017,"children":2019},{"alt":677,"src":2018},"/images/2021-04-11-render-texture/17266280-153a6a121210c7f7.png",[],{"type":597,"tag":668,"props":2021,"children":2022},{},[2023],{"type":603,"value":2024},"这里需要新建一个Layer。依次点击菜单项Edit -> Project Settings -> Tags and Layers新建Layer命名为Minimap。",{"type":597,"tag":668,"props":2026,"children":2027},{},[2028],{"type":597,"tag":677,"props":2029,"children":2031},{"alt":677,"src":2030},"/images/2021-04-11-render-texture/17266280-f96f6a1a4c01bae2.png",[],{"type":597,"tag":668,"props":2033,"children":2034},{},[2035],{"type":603,"value":2036},"然后新建三个球体。一个设为蓝色代表Unity Chan。将该球体设为Unity Chan的子对象，并将其Layer设为Minimap。",{"type":597,"tag":668,"props":2038,"children":2039},{},[2040],{"type":597,"tag":677,"props":2041,"children":2043},{"alt":677,"src":2042},"/images/2021-04-11-render-texture/17266280-dfdc8f16823fbf32.png",[],{"type":597,"tag":668,"props":2045,"children":2046},{},[2047],{"type":603,"value":2048},"对两个机器人进行同样的操作，将球体改为红色。",{"type":597,"tag":668,"props":2050,"children":2051},{},[2052],{"type":597,"tag":677,"props":2053,"children":2055},{"alt":677,"src":2054},"/images/2021-04-11-render-texture/17266280-4b34ec3b3279e6aa.png",[],{"type":597,"tag":668,"props":2057,"children":2058},{},[2059],{"type":603,"value":2060},"现在最关键的一步来了！选中Main Camera并确保其Culling Mask中不包括Minimap这一层。",{"type":597,"tag":668,"props":2062,"children":2063},{},[2064],{"type":597,"tag":677,"props":2065,"children":2067},{"alt":677,"src":2066},"/images/2021-04-11-render-texture/17266280-1eb8533ebe757f7d.png",[],{"type":597,"tag":668,"props":2069,"children":2070},{},[2071],{"type":603,"value":2072},"然后选中Minimap Camera让其Culling Mask只包括Minimap这一层。",{"type":597,"tag":668,"props":2074,"children":2075},{},[2076],{"type":597,"tag":677,"props":2077,"children":2079},{"alt":677,"src":2078},"/images/2021-04-11-render-texture/17266280-e16613658b088db8.png",[],{"type":597,"tag":668,"props":2081,"children":2082},{},[2083],{"type":603,"value":2084},"现在这个小地图看起来就比较完善了！",{"type":597,"tag":668,"props":2086,"children":2087},{},[2088],{"type":597,"tag":677,"props":2089,"children":2091},{"alt":677,"src":2090},"/images/2021-04-11-render-texture/17266280-694ef4f538aae2e1.png",[],{"title":591,"searchDepth":784,"depth":784,"links":2093},[],"content:unity:2021-04-11-render-texture.md","unity/2021-04-11-render-texture.md","2021-04-11",{"_path":553,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":552,"description":2098,"body":2099,"_type":788,"_id":2184,"_source":790,"_file":2185,"_extension":792,"date":2186},"B站圈毛君翻译教程：The Basic：https://www.bilibili.com/video/av48965588/Rule Tile：https://www.bilibili.com/video/av49083381/Prefab Brush：https://www.bilibili.com/video/av49098444/Tilemap Collider：https://www.bilibili.com/video/av49115670/TileBaseGetTileData 确定瓦片在瓦片地图上的外观 ,相当于滚动列表中的getdata..获取数据用于显示,,RefreshTi",{"type":594,"children":2100,"toc":2173},[2101,2107,2119,2131,2143,2155,2162],{"type":597,"tag":951,"props":2102,"children":2104},{"id":2103},"b站圈毛君翻译教程",[2105],{"type":603,"value":2106},"B站圈毛君翻译教程：",{"type":597,"tag":951,"props":2108,"children":2110},{"id":2109},"the-basichttpswwwbilibilicomvideoav48965588",[2111,2113],{"type":603,"value":2112},"The Basic：",{"type":597,"tag":866,"props":2114,"children":2117},{"href":2115,"rel":2116},"https://www.bilibili.com/video/av48965588/",[870],[2118],{"type":603,"value":2115},{"type":597,"tag":951,"props":2120,"children":2122},{"id":2121},"rule-tilehttpswwwbilibilicomvideoav49083381",[2123,2125],{"type":603,"value":2124},"Rule Tile：",{"type":597,"tag":866,"props":2126,"children":2129},{"href":2127,"rel":2128},"https://www.bilibili.com/video/av49083381/",[870],[2130],{"type":603,"value":2127},{"type":597,"tag":951,"props":2132,"children":2134},{"id":2133},"prefab-brushhttpswwwbilibilicomvideoav49098444",[2135,2137],{"type":603,"value":2136},"Prefab Brush：",{"type":597,"tag":866,"props":2138,"children":2141},{"href":2139,"rel":2140},"https://www.bilibili.com/video/av49098444/",[870],[2142],{"type":603,"value":2139},{"type":597,"tag":951,"props":2144,"children":2146},{"id":2145},"tilemap-colliderhttpswwwbilibilicomvideoav49115670",[2147,2149],{"type":603,"value":2148},"Tilemap Collider：",{"type":597,"tag":866,"props":2150,"children":2153},{"href":2151,"rel":2152},"https://www.bilibili.com/video/av49115670/",[870],[2154],{"type":603,"value":2151},{"type":597,"tag":2156,"props":2157,"children":2159},"h1",{"id":2158},"tilebase",[2160],{"type":603,"value":2161},"TileBase",{"type":597,"tag":668,"props":2163,"children":2164},{},[2165,2171],{"type":597,"tag":639,"props":2166,"children":2168},{"className":2167},[],[2169],{"type":603,"value":2170},"GetTileData",{"type":603,"value":2172}," 确定瓦片在瓦片地图上的外观 ,相当于滚动列表中的getdata..获取数据用于显示,,RefreshTile后会触发",{"title":591,"searchDepth":784,"depth":784,"links":2174},[2175,2176,2178,2180,2182],{"id":2103,"depth":1093,"text":2106},{"id":2109,"depth":1093,"text":2177},"The Basic：https://www.bilibili.com/video/av48965588/",{"id":2121,"depth":1093,"text":2179},"Rule Tile：https://www.bilibili.com/video/av49083381/",{"id":2133,"depth":1093,"text":2181},"Prefab Brush：https://www.bilibili.com/video/av49098444/",{"id":2145,"depth":1093,"text":2183},"Tilemap Collider：https://www.bilibili.com/video/av49115670/","content:unity:2021-01-25-tilemap.md","unity/2021-01-25-tilemap.md","2021-01-25",{"_path":550,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":549,"description":2188,"body":2189,"_type":788,"_id":2261,"_source":790,"_file":2262,"_extension":792,"date":2263},"使用射线这是一种发射线，获取当前点击的物体（具有碰撞器）的坐标点（也就是碰撞器范围的坐标点）if (Input.GetMouseButtonDown(0))\n{\n\n    RaycastHit hitt = new RaycastHit();\n\n    Ray ray =Camera.main.ScreenPointToRay(Input.mousePosition);\n\n    Physics.Raycast(ray, out hitt);\n\n    Debug.Log(hitt.point);\n\n    //Debug.Log(Camera.main.ScreenToWorldPoint(",{"type":594,"children":2190,"toc":2257},[2191,2196,2201,2209,2214,2222,2227,2232,2237,2242,2247,2252],{"type":597,"tag":598,"props":2192,"children":2194},{"id":2193},"使用射线",[2195],{"type":603,"value":2193},{"type":597,"tag":668,"props":2197,"children":2198},{},[2199],{"type":603,"value":2200},"这是一种发射线，获取当前点击的物体（具有碰撞器）的坐标点（也就是碰撞器范围的坐标点）",{"type":597,"tag":715,"props":2202,"children":2204},{"code":2203},"if (Input.GetMouseButtonDown(0))\n{\n\n    RaycastHit hitt = new RaycastHit();\n\n    Ray ray =Camera.main.ScreenPointToRay(Input.mousePosition);\n\n    Physics.Raycast(ray, out hitt);\n\n    Debug.Log(hitt.point);\n\n    //Debug.Log(Camera.main.ScreenToWorldPoint(Input.mousePosition));\n}\n",[2205],{"type":597,"tag":639,"props":2206,"children":2207},{"__ignoreMap":591},[2208],{"type":603,"value":2203},{"type":597,"tag":598,"props":2210,"children":2212},{"id":2211},"直接转换",[2213],{"type":603,"value":2211},{"type":597,"tag":715,"props":2215,"children":2217},{"code":2216}," void Update()\n {\n    if(Input.GetMouseButtonDown(0))\n   {    \n     var  z = target.transform.position.z - camera.transform.position.z;\n     Debug.Log(TempC.ScreenToWorldPoint(new Vector3(Input.mousePosition.x,Input.mousePosition.y, z)));\n    }\n }\n",[2218],{"type":597,"tag":639,"props":2219,"children":2220},{"__ignoreMap":591},[2221],{"type":603,"value":2216},{"type":597,"tag":668,"props":2223,"children":2224},{},[2225],{"type":603,"value":2226},"摄像机对游戏世界的渲染范围是一个平截头体，渲染边界是一个矩形，用与near clippingplane或者far clippingplane平行的平面截取这个平截头体，可以获得无数个平行的矩形面，也就是我们看到的屏幕矩形。离摄像机越远，矩形越大，离摄像机越近，矩形越小。所以，同样大小的物体，随着离摄像机越来越远，相对于对应屏幕矩形就越来越小，所看起来就越来越小。",{"type":597,"tag":668,"props":2228,"children":2229},{},[2230],{"type":603,"value":2231},"在屏幕上，某个像素点相对于屏幕矩形的位置，可以对应于游戏世界中的点相对于某个截面的位置，关键在于这个点在哪个截面上，也就是说，关键在于这个截面离摄像机有多远！",{"type":597,"tag":668,"props":2233,"children":2234},{},[2235],{"type":603,"value":2236},"在ScreenToWorldPoint这个方法中，参数是一个三维坐标，而实际上，屏幕坐标只能是二维坐标。参数中的z坐标的作用就是：用来表示上述平面离摄像机的距离。",{"type":597,"tag":668,"props":2238,"children":2239},{},[2240],{"type":603,"value":2241},"也就是说，给定一个坐标（X，Y，Z），",{"type":597,"tag":668,"props":2243,"children":2244},{},[2245],{"type":603,"value":2246},"首先截取一个垂直于摄像机Z轴的，距离为Z的平面P，这样不管X，Y怎么变化，返回的点都只能在这个平面上；",{"type":597,"tag":668,"props":2248,"children":2249},{},[2250],{"type":603,"value":2251},"然后，X，Y表示像素坐标，根据（X，Y）相对于屏幕的位置，得到游戏世界中的点相对于截面P的位置，我们也就将屏幕坐标转换为了世界坐标。",{"type":597,"tag":668,"props":2253,"children":2254},{},[2255],{"type":603,"value":2256},"所以如果要判断是否点中一个目标,则传入的z的值即你想选中的目标到摄像机的距离",{"title":591,"searchDepth":784,"depth":784,"links":2258},[2259,2260],{"id":2193,"depth":784,"text":2193},{"id":2211,"depth":784,"text":2211},"content:unity:2021-01-24-screentoworld.md","unity/2021-01-24-screentoworld.md","2021-01-24",{"_path":547,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":546,"description":2265,"body":2266,"_type":788,"_id":2493,"_source":790,"_file":2494,"_extension":792,"date":2495},"A Native Collection has not been disposed, resulting in a memory leak. Enable Full StackTraces to get more details.\n启用堆栈跟踪单击 Unity 菜单中的 Jobs > Leak Detection > Full Stack Traces 以选中它。还有记得重启unity然后，控制台中的错误内容将显示内存泄漏发生在数据保留位置。A Native Collection has not been disposed, resulting in a memory leak. Alloca",{"type":594,"children":2267,"toc":2489},[2268,2276,2284,2297,2302,2310,2324,2332,2337,2357,2368,2373,2383,2400,2426,2432,2446,2455,2460,2469],{"type":597,"tag":668,"props":2269,"children":2270},{},[2271],{"type":597,"tag":677,"props":2272,"children":2275},{"alt":2273,"src":2274},"f:id:sugar_affordance:20201110091446p","/images/2020-12-20-Collection-has-not-been-disposed/20201110091446.png",[],{"type":597,"tag":715,"props":2277,"children":2279},{"code":2278},"A Native Collection has not been disposed, resulting in a memory leak. Enable Full StackTraces to get more details.\n",[2280],{"type":597,"tag":639,"props":2281,"children":2282},{"__ignoreMap":591},[2283],{"type":603,"value":2278},{"type":597,"tag":951,"props":2285,"children":2287},{"id":2286},"启用堆栈跟踪",[2288,2295],{"type":597,"tag":866,"props":2289,"children":2292},{"href":2290,"rel":2291},"http://d.hatena.ne.jp/keyword/%A5%B9%A5%BF%A5%C3%A5%AF%A5%C8%A5%EC%A1%BC%A5%B9",[870],[2293],{"type":603,"value":2294},"启用",{"type":603,"value":2296},"堆栈跟踪",{"type":597,"tag":668,"props":2298,"children":2299},{},[2300],{"type":603,"value":2301},"单击 Unity 菜单中的 Jobs > Leak Detection > Full Stack Traces 以选中它。还有记得重启unity",{"type":597,"tag":668,"props":2303,"children":2304},{},[2305],{"type":597,"tag":677,"props":2306,"children":2309},{"alt":2307,"src":2308},"f:id:sugar_affordance:20201110091520p","/images/2020-12-20-Collection-has-not-been-disposed/20201110091520.png",[],{"type":597,"tag":668,"props":2311,"children":2312},{},[2313,2315,2322],{"type":603,"value":2314},"然后，控制台中的错误内容将显示内存",{"type":597,"tag":866,"props":2316,"children":2319},{"href":2317,"rel":2318},"http://d.hatena.ne.jp/keyword/%A5%E1%A5%E2%A5%EA%A5%EA%A1%BC%A5%AF",[870],[2320],{"type":603,"value":2321},"泄漏",{"type":603,"value":2323},"发生在数据保留位置。",{"type":597,"tag":715,"props":2325,"children":2327},{"code":2326},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:\nUnity.Entities.BlobAssetStore:.ctor() (at Library/PackageCache/com.unity.entities@0.16.0-preview.21/Unity.Entities.Hybrid/GameObjectConversion/BlobAssetStore.cs:26)\nCreateEntitySystem:Setup(Transform) (at Assets/0_MainAssets/Scripts/ECS/System/CreateEntitySystem.cs:116)\n",[2328],{"type":597,"tag":639,"props":2329,"children":2330},{"__ignoreMap":591},[2331],{"type":603,"value":2326},{"type":597,"tag":1408,"props":2333,"children":2335},{"id":2334},"关于分配器",[2336],{"type":603,"value":2334},{"type":597,"tag":668,"props":2338,"children":2339},{},[2340,2342,2348,2350,2355],{"type":603,"value":2341},"NativeContainer（如 NativeArray）在 Dispose 中未释放内存时，会根据某些条件",{"type":597,"tag":866,"props":2343,"children":2345},{"href":2317,"rel":2344},[870],[2346],{"type":603,"value":2347},"检测",{"type":603,"value":2349},"为内存泄漏。 条件",{"type":597,"tag":817,"props":2351,"children":2352},{},[2353],{"type":603,"value":2354},"因分配器",{"type":603,"value":2356},"的类型而异，分配器是 Allocator.TempJob，在确保本机 Array 时指定。",{"type":597,"tag":715,"props":2358,"children":2363},{"code":2359,"language":2360,"meta":591,"className":2361},"NativeArray\u003Cfloat> leakArray = new NativeArray\u003Cfloat>(4, Allocator.TempJob);\n","cs",[2362],"language-cs",[2364],{"type":597,"tag":639,"props":2365,"children":2366},{"__ignoreMap":591},[2367],{"type":603,"value":2359},{"type":597,"tag":668,"props":2369,"children":2370},{},[2371],{"type":603,"value":2372},"这是一个详细的解释。",{"type":597,"tag":668,"props":2374,"children":2375},{},[2376],{"type":597,"tag":866,"props":2377,"children":2380},{"href":2378,"rel":2379},"https://docs.unity3d.com/ja/current/Manual/JobSystemNativeContainer.html",[870],[2381],{"type":603,"value":2382},"NativeContainer - Unity 手册",{"type":597,"tag":668,"props":2384,"children":2385},{},[2386,2391,2393,2398],{"type":597,"tag":817,"props":2387,"children":2388},{},[2389],{"type":603,"value":2390},"如果 Allocator.Temp",{"type":603,"value":2392},"在函数中没有 Dispose， 否则内存",{"type":597,"tag":866,"props":2394,"children":2396},{"href":2317,"rel":2395},[870],[2397],{"type":603,"value":2321},{"type":603,"value":2399},"，",{"type":597,"tag":668,"props":2401,"children":2402},{},[2403,2408,2410,2416,2418,2424],{"type":597,"tag":817,"props":2404,"children":2405},{},[2406],{"type":603,"value":2407},"确定 Allocator.TempJob",{"type":603,"value":2409},"必须在\n4 帧内释放， 否则内存",{"type":597,"tag":866,"props":2411,"children":2413},{"href":2317,"rel":2412},[870],[2414],{"type":603,"value":2415},"泄漏确定",{"type":603,"value":2417},"__Allocator.Persistent 将永久保留，",{"type":597,"tag":866,"props":2419,"children":2421},{"href":2317,"rel":2420},[870],[2422],{"type":603,"value":2423},"并且不会",{"type":603,"value":2425},"检测到内存泄漏。",{"type":597,"tag":951,"props":2427,"children":2429},{"id":2428},"用-using-括起来确保内存安全",[2430],{"type":603,"value":2431},"用 using 括起来，确保内存安全",{"type":597,"tag":668,"props":2433,"children":2434},{},[2435,2437,2444],{"type":603,"value":2436},"知道泄漏的位置后，我们只是将变量放在 Dispose 中，但**建议在 using",{"type":597,"tag":866,"props":2438,"children":2441},{"href":2439,"rel":2440},"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%C8%A5%E1%A5%F3%A5%C8",[870],[2442],{"type":603,"value":2443},"语句",{"type":603,"value":2445},"**中括起来。",{"type":597,"tag":715,"props":2447,"children":2450},{"code":2448,"language":2360,"meta":591,"className":2449},"using (NativeArray\u003Cfloat> leakArray = new NativeArray\u003Cfloat>(4, Allocator.TempJob)) {\n\n  // 処理\n\n}\n",[2362],[2451],{"type":597,"tag":639,"props":2452,"children":2453},{"__ignoreMap":591},[2454],{"type":603,"value":2448},{"type":597,"tag":668,"props":2456,"children":2457},{},[2458],{"type":603,"value":2459},"这样，当您离开块时，将自动释放变量。\n当有多个变量时，请并排排列它们。",{"type":597,"tag":715,"props":2461,"children":2464},{"code":2462,"language":2360,"meta":591,"className":2463},"using (NativeArray\u003CArchetypeChunk> chunks = AnimationBatcherQuery.CreateArchetypeChunkArray(Allocator.TempJob))\nusing (NativeArray\u003Cfloat> leakArray = new NativeArray\u003Cfloat>(4, Allocator.TempJob)) {\n\n  // 処理\n\n}\n",[2362],[2465],{"type":597,"tag":639,"props":2466,"children":2467},{"__ignoreMap":591},[2468],{"type":603,"value":2462},{"type":597,"tag":668,"props":2470,"children":2471},{},[2472,2479,2481,2487],{"type":597,"tag":866,"props":2473,"children":2476},{"href":2474,"rel":2475},"http://d.hatena.ne.jp/keyword/C%23",[870],[2477],{"type":603,"value":2478},"从 C#",{"type":603,"value":2480},"8 开始，您可以在 Coco 中并排编写句点，但 Unity 现在",{"type":597,"tag":866,"props":2482,"children":2484},{"href":2474,"rel":2483},[870],[2485],{"type":603,"value":2486},"像 C#",{"type":603,"value":2488},"7.3 一样，将来会起作用吗？",{"title":591,"searchDepth":784,"depth":784,"links":2490},[2491,2492],{"id":2286,"depth":1093,"text":2286},{"id":2428,"depth":1093,"text":2431},"content:unity:2020-12-20-Collection-has-not-been-disposed.md","unity/2020-12-20-Collection-has-not-been-disposed.md","2020-12-20",{"_path":544,"_dir":589,"_draft":590,"_partial":590,"_locale":591,"title":543,"description":2497,"body":2498,"_type":788,"_id":2609,"_source":790,"_file":2610,"_extension":792,"date":2611},"三维空间的右手笛卡尔坐标如图1所示。图1在航空中，pitch, yaw, roll如图2所示。pitch是围绕X轴旋转，也叫做俯仰角，如图3所示。yaw是围绕Y轴旋转，也叫偏航角，如图4所示。roll是围绕Z轴旋转，也叫翻滚角，如图5所示。图2图3-pitch是围绕X轴旋转图4-yaw是围绕Y轴旋转图5-roll是围绕Z轴旋转绕三个轴的旋转值pitch，yaw，roll来自航空界的叫法，翻译为俯仰角，偏航角，翻滚角，非常形象。\n从英文意思出发，roll:是卷；滚动，转动；辗的意思；\nyaw是（火箭、飞机、宇宙飞船等）偏航的意思；\npitch是坠落；倾斜；投掷的意思；\n所以，roll的意思是翻滚",{"type":594,"children":2499,"toc":2607},[2500,2505,2512,2517,2522,2527,2532,2537,2544,2549,2556,2561,2568,2573,2580,2585,2590,2595,2600],{"type":597,"tag":668,"props":2501,"children":2502},{},[2503],{"type":603,"value":2504},"三维空间的右手笛卡尔坐标如图1所示。",{"type":597,"tag":668,"props":2506,"children":2507},{},[2508],{"type":597,"tag":677,"props":2509,"children":2511},{"alt":677,"src":2510},"/images/2020-11-29-pitch-yaw-roll/20140401183456562",[],{"type":597,"tag":668,"props":2513,"children":2514},{},[2515],{"type":603,"value":2516},"图1",{"type":597,"tag":668,"props":2518,"children":2519},{},[2520],{"type":603,"value":2521},"在航空中，pitch, yaw, roll如图2所示。",{"type":597,"tag":668,"props":2523,"children":2524},{},[2525],{"type":603,"value":2526},"pitch是围绕X轴旋转，也叫做俯仰角，如图3所示。",{"type":597,"tag":668,"props":2528,"children":2529},{},[2530],{"type":603,"value":2531},"yaw是围绕Y轴旋转，也叫偏航角，如图4所示。",{"type":597,"tag":668,"props":2533,"children":2534},{},[2535],{"type":603,"value":2536},"roll是围绕Z轴旋转，也叫翻滚角，如图5所示。",{"type":597,"tag":668,"props":2538,"children":2539},{},[2540],{"type":597,"tag":677,"props":2541,"children":2543},{"alt":677,"src":2542},"/images/2020-11-29-pitch-yaw-roll/20140401183507359",[],{"type":597,"tag":668,"props":2545,"children":2546},{},[2547],{"type":603,"value":2548},"图2",{"type":597,"tag":668,"props":2550,"children":2551},{},[2552],{"type":597,"tag":677,"props":2553,"children":2555},{"alt":677,"src":2554},"/images/2020-11-29-pitch-yaw-roll/20140401183518578",[],{"type":597,"tag":668,"props":2557,"children":2558},{},[2559],{"type":603,"value":2560},"图3-pitch是围绕X轴旋转",{"type":597,"tag":668,"props":2562,"children":2563},{},[2564],{"type":597,"tag":677,"props":2565,"children":2567},{"alt":677,"src":2566},"/images/2020-11-29-pitch-yaw-roll/20140401183525562",[],{"type":597,"tag":668,"props":2569,"children":2570},{},[2571],{"type":603,"value":2572},"图4-yaw是围绕Y轴旋转",{"type":597,"tag":668,"props":2574,"children":2575},{},[2576],{"type":597,"tag":677,"props":2577,"children":2579},{"alt":677,"src":2578},"/images/2020-11-29-pitch-yaw-roll/20140401183537890",[],{"type":597,"tag":668,"props":2581,"children":2582},{},[2583],{"type":603,"value":2584},"图5-roll是围绕Z轴旋转",{"type":597,"tag":668,"props":2586,"children":2587},{},[2588],{"type":603,"value":2589},"绕三个轴的旋转值pitch，yaw，roll来自航空界的叫法，翻译为俯仰角，偏航角，翻滚角，非常形象。\n从英文意思出发，roll:是卷；滚动，转动；辗的意思；\nyaw是（火箭、飞机、宇宙飞船等）偏航的意思；\npitch是坠落；倾斜；投掷的意思；\n所以，roll的意思是翻滚，就是绕着机身所在的那个轴。yaw是偏航的意思，偏航就是绕着重力方向为轴。pitch倾斜、坠落的意思（头朝地坠落）。",{"type":597,"tag":668,"props":2591,"children":2592},{},[2593],{"type":603,"value":2594},"另外值得注意的是，pitch值是不能超过90度，这里牵扯到了万向锁的知识，不再多说，网上很多讨论。",{"type":597,"tag":668,"props":2596,"children":2597},{},[2598],{"type":603,"value":2599},"下面这张图是以摄像机的角度来阐述欧拉角的，可以加深理解。",{"type":597,"tag":668,"props":2601,"children":2602},{},[2603],{"type":597,"tag":677,"props":2604,"children":2606},{"alt":677,"src":2605},"/images/2020-11-29-pitch-yaw-roll/20151125212621964",[],{"title":591,"searchDepth":784,"depth":784,"links":2608},[],"content:unity:2020-11-29-pitch-yaw-roll.md","unity/2020-11-29-pitch-yaw-roll.md","2020-11-29",1710779035449]