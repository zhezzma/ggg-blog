[{"data":1,"prerenderedAt":894},["Reactive",2],{"content-query-Jjf9V99Gxe":3,"content-navigation-8C37fagqQL":312},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":306,"_id":307,"_source":308,"_file":309,"_extension":310,"date":311},"/unity/2020-02-19-understandingautomaticmemorymanagement","unity",false,"","理解自动内存管理","当创建对象、字符串或数组时，存储它所需的内存将从称为堆的中央池中分配。当项目不再使用时，它曾经占用的内存可以被回收并用于别的东西。在过去，通常由程序员通过适当的函数调用明确地分配和释放这些堆内存块。如今，像Unity的Mono引擎这样的运行时系统会自动为您管理内存。自动内存管理需要比显式分配/释放更少的编码工作，并大大降低内存泄漏（内存被分配但从未随后释放的情况）的可能性。",{"type":11,"children":12,"toc":293},"root",[13,20,26,31,36,57,62,67,76,108,116,121,129,134,142,147,155,160,165,170,176,181,189,194,199,204,212,217,225,230,235,240,245,277],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":21,"props":22,"children":24},"h2",{"id":23},"值类型和引用类型",[25],{"type":19,"value":23},{"type":14,"tag":15,"props":27,"children":28},{},[29],{"type":19,"value":30},"当调用一个函数时，它的参数值将被复制到一个保留特定调用的内存区域。只占用几个字节的数据类型可以非常快速方便地复制。然而，对象、字符串和数组要大得多，如果这些类型的数据被定期复制，那将是非常低效的。幸运的是，这是不必要的；大项目的实际存储空间是从堆中分配的，一个小的“指针”值用来记住它的位置。从那时起，只有指针在参数传递过程中需要被复制。只要运行时系统能够定位指针标识的项，就可以经常使用数据的一个副本。\n在参数传递期间直接存储和复制的类型称为值类型。这些包括整数，浮点数，布尔和Unity的结构类型（例如Color和Vector3）。分配在堆上然后通过指针访问的类型称为引用类型，因为存储在变量中的值仅仅是“引用”到真实数据。引用类型的示例包括对象，字符串和数组。",{"type":14,"tag":21,"props":32,"children":34},{"id":33},"内存分配和垃圾收集",[35],{"type":19,"value":33},{"type":14,"tag":15,"props":37,"children":38},{},[39,41,48,50,55],{"type":19,"value":40},"内存管理器跟踪它知道未被使用的堆中的区域。当请求一个新的内存块时（例如当一个对象被实例化时），管理器选择一个未使用的区域，从中分配该块，然后从已知的未使用的空间中移除分配的内存。后续请求以相同的方式处理，直到没有足够大的空闲区域分配所需的块大小。在这一点上，从堆中分配的所有内存仍然在使用中是非常不可能的。只要还存在可以找到它的引用变量，就只能访问堆上的引用项。如果对内存块的所有引用都消失了（即，引用变量已被重新分配，或者它们是现在超出范围的局部变量），则它占用的内存可以安全地重新分配。\n为了确定哪些堆块不再被使用，内存管理器会搜索所有当前活动的引用变量，并将它们所指的块标记为",{"type":14,"tag":42,"props":43,"children":45},"code",{"className":44},[],[46],{"type":19,"value":47},"live",{"type":19,"value":49},"。在搜索结束时，内存管理器认为这些",{"type":14,"tag":42,"props":51,"children":53},{"className":52},[],[54],{"type":19,"value":47},{"type":19,"value":56},"块之间的任何空间都是空的，并且可用于后续分配。由于显而易见的原因，定位和释放未使用的内存的过程被称为垃圾回收（或简称GC）。",{"type":14,"tag":21,"props":58,"children":60},{"id":59},"优化",[61],{"type":19,"value":59},{"type":14,"tag":15,"props":63,"children":64},{},[65],{"type":19,"value":66},"垃圾收集对程序员来说是自动的、不可见的，但是收集过程实际上需要大量的CPU时间。如果正确使用，自动内存管理通常会等于或击败手动分配的整体性能。但是，对于程序员来说，重要的是要避免那些比实际需要触发更多次收集器和在执行中引入暂停的错误。有一些臭名昭著的算法，可能是GC噩梦，尽管他们乍一看是无辜的。重复字符串连接是一个典型的例子：",{"type":14,"tag":68,"props":69,"children":71},"pre",{"code":70},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    void ConcatExample(int[] intArray) {\n        string line = intArray[0].ToString();\n        \n        for (i = 1; i \u003C intArray.Length; i++) {\n            line += \", \" + intArray[i].ToString();\n        }\n        \n        return line;\n    }\n}\n\n//JS script example\nfunction ConcatExample(intArray: int[]) {\n    var line = intArray[0].ToString();\n    \n    for (i = 1; i \u003C intArray.Length; i++) {\n        line += \", \" + intArray[i].ToString();\n    }\n    \n    return line;\n}\n",[72],{"type":14,"tag":42,"props":73,"children":74},{"__ignoreMap":7},[75],{"type":19,"value":70},{"type":14,"tag":15,"props":77,"children":78},{},[79,81,87,89,95,97,106],{"type":19,"value":80},"这里的关键细节是，新的部分不会被一个接一个地添加到字符串中。实际情况是，每次循环",{"type":14,"tag":42,"props":82,"children":84},{"className":83},[],[85],{"type":19,"value":86},"line",{"type":19,"value":88},"变量的前一个内容都会变死——一个完整的新字符串被分配到包含原来的部分，再在最后加上新的部分。由于字符串随着",{"type":14,"tag":42,"props":90,"children":92},{"className":91},[],[93],{"type":19,"value":94},"i",{"type":19,"value":96},"值的增加而变得更长，所以所消耗的堆空间数量也增加了，因此每次调用这个函数时都很容易消耗数百字节的空闲堆空间。如果你需要连接多个字符串，那么一个更好的选择是Mono库的",{"type":14,"tag":98,"props":99,"children":103},"a",{"href":100,"rel":101},"https://msdn.microsoft.com/en-gb/library/system.text.stringbuilder.aspx",[102],"nofollow",[104],{"type":19,"value":105},"System.Text.StringBuilder",{"type":19,"value":107},"类。然而，即使反复连接也不会引起太多麻烦，除非它被频繁调用，而在Unity中通常意味着帧更新。就像是：",{"type":14,"tag":68,"props":109,"children":111},{"code":110},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    public GUIText scoreBoard;\n    public int score;\n    \n    void Update() {\n        string scoreText = \"Score: \" + score.ToString();\n        scoreBoard.text = scoreText;\n    }\n}\n\n\n//JS script example\nvar scoreBoard: GUIText;\nvar score: int;\n\nfunction Update() {\n    var scoreText: String = \"Score: \" + score.ToString();\n    scoreBoard.text = scoreText;\n}\n",[112],{"type":14,"tag":42,"props":113,"children":114},{"__ignoreMap":7},[115],{"type":19,"value":110},{"type":14,"tag":15,"props":117,"children":118},{},[119],{"type":19,"value":120},"...每次调用Update将分配新字符串，并不断生成的新垃圾。大多数情况下，只有当分数变化时才更新文本：",{"type":14,"tag":68,"props":122,"children":124},{"code":123},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    public GUIText scoreBoard;\n    public string scoreText;\n    public int score;\n    public int oldScore;\n    \n    void Update() {\n        if (score != oldScore) {\n            scoreText = \"Score: \" + score.ToString();\n            scoreBoard.text = scoreText;\n            oldScore = score;\n        }\n    }\n}\n\n\n//JS script example\nvar scoreBoard: GUIText;\nvar scoreText: String;\nvar score: int;\nvar oldScore: int;\n\nfunction Update() {\n    if (score != oldScore) {\n        scoreText = \"Score: \" + score.ToString();\n        scoreBoard.text = scoreText;\n        oldScore = score;\n    }\n}\n",[125],{"type":14,"tag":42,"props":126,"children":127},{"__ignoreMap":7},[128],{"type":19,"value":123},{"type":14,"tag":15,"props":130,"children":131},{},[132],{"type":19,"value":133},"当函数返回数组值时，会发生另一个潜在的问题：",{"type":14,"tag":68,"props":135,"children":137},{"code":136},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    float[] RandomList(int numElements) {\n        var result = new float[numElements];\n        \n        for (int i = 0; i \u003C numElements; i++) {\n            result[i] = Random.value;\n        }\n        \n        return result;\n    }\n}\n\n\n//JS script example\nfunction RandomList(numElements: int) {\n    var result = new float[numElements];\n    \n    for (i = 0; i \u003C numElements; i++) {\n        result[i] = Random.value;\n    }\n    \n    return result;\n}\n",[138],{"type":14,"tag":42,"props":139,"children":140},{"__ignoreMap":7},[141],{"type":19,"value":136},{"type":14,"tag":15,"props":143,"children":144},{},[145],{"type":19,"value":146},"当创建一个充满值的新数组时，这种函数非常优雅和方便。但是，如果反复调用，那么每次都会分配新的内存。由于数组可能非常大，可用空间可能会迅速消耗，从而导致垃圾收集频繁。避免这个问题的一个方法是利用数组是引用类型的事实。作为参数传递给函数的数组可以在该函数内修改，结果将在函数返回后保留。\n像上面这样的功能通常可以被替换成：",{"type":14,"tag":68,"props":148,"children":150},{"code":149},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    void RandomList(float[] arrayToFill) {\n        for (int i = 0; i \u003C arrayToFill.Length; i++) {\n            arrayToFill[i] = Random.value;\n        }\n    }\n}\n\n\n//JS script example\nfunction RandomList(arrayToFill: float[]) {\n    for (i = 0; i \u003C arrayToFill.Length; i++) {\n        arrayToFill[i] = Random.value;\n    }\n}\n",[151],{"type":14,"tag":42,"props":152,"children":153},{"__ignoreMap":7},[154],{"type":19,"value":149},{"type":14,"tag":15,"props":156,"children":157},{},[158],{"type":19,"value":159},"这只是用新值替换数组的现有内容。虽然这需要在调用代码中完成数组的初始分配（这似乎有些不雅），但是在调用该函数时不会产生任何新的垃圾。",{"type":14,"tag":21,"props":161,"children":163},{"id":162},"主动请求垃圾收集",[164],{"type":19,"value":162},{"type":14,"tag":15,"props":166,"children":167},{},[168],{"type":19,"value":169},"如上所述，最好尽量避免分配。然而，鉴于它们不能被完全消除，您可以使用两种主要策略来最大限度地减少其入侵游戏：",{"type":14,"tag":171,"props":172,"children":174},"h3",{"id":173},"小堆垃圾收集快速可频繁收集",[175],{"type":19,"value":173},{"type":14,"tag":15,"props":177,"children":178},{},[179],{"type":19,"value":180},"这个策略通常最适合长期游戏的游戏，其中平滑的帧速率是主要的关注点。这样的游戏通常会频繁地分配小块，但这些块将仅在短时间内使用。在iOS上使用此策略时，典型的堆大小约为200KB，iPhone 3G上的垃圾收集大约需要5ms。如果堆增加到1MB，则收集大约需要7ms。因此，有时候可以以规则的帧间隔请求垃圾回收。这通常会使垃圾收集发生的次数比严格的需要的更多，但是它们将被快速处理，对游戏的影响最小：",{"type":14,"tag":68,"props":182,"children":184},{"code":183},"if (Time.frameCount % 30 == 0)\n{\n   System.GC.Collect();\n}\n",[185],{"type":14,"tag":42,"props":186,"children":187},{"__ignoreMap":7},[188],{"type":19,"value":183},{"type":14,"tag":15,"props":190,"children":191},{},[192],{"type":19,"value":193},"但是，您应该谨慎使用此技术，并检查profiler统计信息，以确保它真正减少了游戏的收集时间。",{"type":14,"tag":171,"props":195,"children":197},{"id":196},"大堆垃圾收集缓慢且不可频繁收集",[198],{"type":19,"value":196},{"type":14,"tag":15,"props":200,"children":201},{},[202],{"type":19,"value":203},"这个策略对于分配（和因此收集）相对不频繁并可以在游戏暂停期间处理的游戏最适用。对于堆来说，尽可能大，而不是因为系统内存太少而导致操作系统杀死你的应用程序。但是，如果可能，Mono运行时会自动避免扩展堆。您可以通过在启动期间预先分配一些占位符空间来手动扩展堆（即，您实例化一个纯粹用于对内存管理器产生影响的“无用”对象）：",{"type":14,"tag":68,"props":205,"children":207},{"code":206},"//C# script example\nusing UnityEngine;\nusing System.Collections;\n\npublic class ExampleScript : MonoBehaviour {\n    void Start() {\n        var tmp = new System.Object[1024];\n        \n        // make allocations in smaller blocks to avoid them to be treated in a special way, which is designed for large blocks\n        for (int i = 0; i \u003C 1024; i++)\n            tmp[i] = new byte[1024];\n        \n        // release reference\n        tmp = null;\n    }\n}\n\n\n//JS script example\nfunction Start() {\n    var tmp = new System.Object[1024];\n\n    // make allocations in smaller blocks to avoid them to be treated in a special way, which is designed for large blocks\n        for (var i : int = 0; i \u003C 1024; i++)\n        tmp[i] = new byte[1024];\n\n    // release reference\n        tmp = null;\n}\n",[208],{"type":14,"tag":42,"props":209,"children":210},{"__ignoreMap":7},[211],{"type":19,"value":206},{"type":14,"tag":15,"props":213,"children":214},{},[215],{"type":19,"value":216},"一个足够大的堆不应该在游戏中的暂停期间完全被填满，这样可以容纳一次收集。当发生这样的暂停时，您可以显式地请求垃圾收集：",{"type":14,"tag":68,"props":218,"children":220},{"code":219},"System.GC.Collect();\n",[221],{"type":14,"tag":42,"props":222,"children":223},{"__ignoreMap":7},[224],{"type":19,"value":219},{"type":14,"tag":15,"props":226,"children":227},{},[228],{"type":19,"value":229},"同样，在使用此策略时应该小心，并注意Profiler统计数据，而不是仅仅假定它具有所期望的效果。",{"type":14,"tag":21,"props":231,"children":233},{"id":232},"可重复使用的对象池",[234],{"type":19,"value":232},{"type":14,"tag":15,"props":236,"children":237},{},[238],{"type":19,"value":239},"很多情况下，只要减少创建和销毁对象的数量，就可以避免生成垃圾。游戏中存在着某些类型的物体，如抛射体，尽管一次只会有少量的物体在游戏中，但它们可能会被反复地遇到。在这种情况下，常常可以重用对象，而不是破坏旧对象，并用新的对象替换它们。",{"type":14,"tag":21,"props":241,"children":243},{"id":242},"更多信息",[244],{"type":19,"value":242},{"type":14,"tag":15,"props":246,"children":247},{},[248,250,257,259,266,268,275],{"type":19,"value":249},"内存管理是一个微妙而复杂的课题，它已经投入了大量的学术研究。如果您有兴趣了解更多信息，那么",{"type":14,"tag":98,"props":251,"children":254},{"href":252,"rel":253},"http://www.memorymanagement.org/",[102],[255],{"type":19,"value":256},"memorymanagement.org",{"type":19,"value":258},"是一个很好的资源，列出了许多出版物和在线文章。有关对象池的更多信息可以在",{"type":14,"tag":98,"props":260,"children":263},{"href":261,"rel":262},"https://en.wikipedia.org/wiki/Object_pool_pattern",[102],[264],{"type":19,"value":265},"维基百科页面",{"type":19,"value":267},"和",{"type":14,"tag":98,"props":269,"children":272},{"href":270,"rel":271},"https://sourcemaking.com/design_patterns/object_pool",[102],[273],{"type":19,"value":274},"Sourcemaking.com",{"type":19,"value":276},"上找到。",{"type":14,"tag":278,"props":279,"children":280},"blockquote",{},[281],{"type":14,"tag":15,"props":282,"children":283},{},[284,286],{"type":19,"value":285},"原文链接：",{"type":14,"tag":98,"props":287,"children":290},{"href":288,"rel":289},"https://docs.unity3d.com/Manual/UnderstandingAutomaticMemoryManagement.html",[102],[291],{"type":19,"value":292},"Understanding Automatic Memory Management",{"title":7,"searchDepth":294,"depth":294,"links":295},2,[296,297,298,299,304,305],{"id":23,"depth":294,"text":23},{"id":33,"depth":294,"text":33},{"id":59,"depth":294,"text":59},{"id":162,"depth":294,"text":162,"children":300},[301,303],{"id":173,"depth":302,"text":173},3,{"id":196,"depth":302,"text":196},{"id":232,"depth":294,"text":232},{"id":242,"depth":294,"text":242},"markdown","content:unity:2020-02-19-UnderstandingAutomaticMemoryManagement.md","content","unity/2020-02-19-UnderstandingAutomaticMemoryManagement.md","md","2020-02-19",[313,323,450,499,551,564,676],{"title":314,"_path":315,"children":316},"Art","/art",[317,320],{"title":318,"_path":319},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":321,"_path":322},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":324,"_path":325,"children":326},"Dotnet","/dotnet",[327,330,333,336,339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423,426,429,432,435,438,441,444,447],{"title":328,"_path":329},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":331,"_path":332},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":334,"_path":335},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":337,"_path":338},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":340,"_path":341},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":343,"_path":344},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":346,"_path":347},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":349,"_path":350},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":352,"_path":353},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":355,"_path":356},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":358,"_path":359},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":361,"_path":362},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":364,"_path":365},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":367,"_path":368},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":370,"_path":371},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":373,"_path":374},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":376,"_path":377},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":379,"_path":380},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":382,"_path":383},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":385,"_path":386},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":388,"_path":389},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":391,"_path":392},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":394,"_path":395},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":397,"_path":398},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":400,"_path":401},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":403,"_path":404},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":406,"_path":407},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":409,"_path":410},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":412,"_path":413},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":415,"_path":416},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":418,"_path":419},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":421,"_path":422},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":424,"_path":425},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":427,"_path":428},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":430,"_path":431},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":433,"_path":434},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":436,"_path":437},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":439,"_path":440},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":442,"_path":443},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":445,"_path":446},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":448,"_path":449},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":451,"_path":452,"children":453},"Game","/game",[454,457,460,463,466,469,472,475,478,481,484,487,490,493,496],{"title":455,"_path":456},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":458,"_path":459},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":461,"_path":462},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":464,"_path":465},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":467,"_path":468},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":470,"_path":471},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":473,"_path":474},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":476,"_path":477},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":479,"_path":480},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":482,"_path":483},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":485,"_path":486},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":488,"_path":489},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":491,"_path":492},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":494,"_path":495},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":497,"_path":498},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":500,"_path":501,"children":502},"Gyj","/gyj",[503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548],{"title":504,"_path":505},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":507,"_path":508},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":510,"_path":511},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":513,"_path":514},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":516,"_path":517},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":519,"_path":520},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":522,"_path":523},"玩法","/gyj/2022-08-22-wanfa",{"title":525,"_path":526},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":528,"_path":529},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":531,"_path":532},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":534,"_path":535},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":537,"_path":538},"门派内容相关","/gyj/2022-11-17-sect",{"title":540,"_path":541},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":543,"_path":544},"种植","/gyj/2022-12-01-zhongzhi",{"title":546,"_path":547},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":549,"_path":550},"跑商","/gyj/2023-11-01-paoshang",{"title":552,"_path":553,"children":554},"Js","/js",[555,558,561],{"title":556,"_path":557},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":559,"_path":560},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":562,"_path":563},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":565,"_path":566,"children":567},"Tool","/tool",[568,571,574,577,580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673],{"title":569,"_path":570},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":572,"_path":573},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":575,"_path":576},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":578,"_path":579},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":581,"_path":582},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":584,"_path":585},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":587,"_path":588},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":590,"_path":591},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":593,"_path":594},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":596,"_path":597},"mac下brew 使用","/tool/2020-01-13-brew",{"title":599,"_path":600},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":602,"_path":603},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":605,"_path":606},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":608,"_path":609},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":611,"_path":612},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":614,"_path":615},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":617,"_path":618},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":620,"_path":621},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":623,"_path":624},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":626,"_path":627},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":629,"_path":630},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":632,"_path":633},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":635,"_path":636},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":638,"_path":639},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":641,"_path":642},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":644,"_path":645},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":647,"_path":648},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":650,"_path":651},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":653,"_path":654},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":656,"_path":657},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":659,"_path":660},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":662,"_path":663},"rider的使用","/tool/2022-08-02-rider-use",{"title":665,"_path":666},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":668,"_path":669},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":671,"_path":672},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":674,"_path":675},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":677,"_path":678,"children":679},"Unity","/unity",[680,683,686,689,692,695,698,701,704,707,710,713,716,719,722,725,728,731,734,737,740,743,746,749,752,753,756,759,762,765,768,771,774,777,780,783,786,789,792,795,798,801,804,807,810,813,816,819,822,825,828,831,834,837,840,843,846,849,852,855,858,861,864,867,870,873,876,879,882,885,888,891],{"title":681,"_path":682},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":684,"_path":685},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":687,"_path":688},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":690,"_path":691},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":693,"_path":694},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":696,"_path":697},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":699,"_path":700},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":702,"_path":703},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":705,"_path":706},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":708,"_path":709},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":711,"_path":712},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":714,"_path":715},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":717,"_path":718},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":720,"_path":721},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":723,"_path":724},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":726,"_path":727},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":729,"_path":730},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":732,"_path":733},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":735,"_path":736},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":738,"_path":739},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":741,"_path":742},"技能系统","/unity/2020-02-15-skill-system",{"title":744,"_path":745},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":747,"_path":748},"角色状态设计","/unity/2020-02-17-character-states",{"title":750,"_path":751},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":8,"_path":4},{"title":754,"_path":755},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":757,"_path":758},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":760,"_path":761},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":763,"_path":764},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":766,"_path":767},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":769,"_path":770},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":772,"_path":773},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":775,"_path":776},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":778,"_path":779},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":781,"_path":782},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":784,"_path":785},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":787,"_path":788},"unity的addressables","/unity/2020-09-12-addressables",{"title":790,"_path":791},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":793,"_path":794},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":796,"_path":797},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":799,"_path":800},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":802,"_path":803},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":805,"_path":806},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":808,"_path":809},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":811,"_path":812},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":814,"_path":815},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":817,"_path":818},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":820,"_path":821},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":823,"_path":824},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":826,"_path":827},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":829,"_path":830},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":832,"_path":833},"简单保存工具","/unity/2020-11-13-simple-save",{"title":835,"_path":836},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":838,"_path":839},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":841,"_path":842},"ability","/unity/2020-11-16-dotssample",{"title":844,"_path":845},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":847,"_path":848},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":850,"_path":851},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":853,"_path":854},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":856,"_path":857},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":859,"_path":860},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":862,"_path":863},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":865,"_path":866},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":868,"_path":869},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":871,"_path":872},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":874,"_path":875},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":877,"_path":878},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":880,"_path":881},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":883,"_path":884},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":886,"_path":887},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":889,"_path":890},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":892,"_path":893},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779040439]