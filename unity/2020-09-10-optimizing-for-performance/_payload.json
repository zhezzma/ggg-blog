[{"data":1,"prerenderedAt":2038},["Reactive",2],{"content-query-Mgf2p1bG9j":3,"content-navigation-8C37fagqQL":1456},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":1450,"_id":1451,"_source":1452,"_file":1453,"_extension":1454,"date":1455},"/unity/2020-09-10-optimizing-for-performance","unity",false,"","UNITY性能优化流程","首先第一部分.我们要注意在平时工作中需要注意哪些地方养成一套流程规范.避免出现已经被总结出来的问题",{"type":11,"children":12,"toc":1426},"root",[13,21,26,32,48,56,69,74,79,86,252,258,288,294,372,378,383,396,401,469,475,480,492,523,535,593,604,615,627,638,648,664,669,674,679,684,689,698,703,726,732,755,760,851,856,899,904,910,929,935,978,984,1022,1028,1056,1062,1068,1074,1079,1112,1118,1123,1129,1134,1139,1145,1153,1158,1163,1171,1176,1181,1199,1204,1212,1235,1240,1248,1253,1258,1281,1289,1294,1299,1304,1309,1314,1327,1332,1339,1344,1349,1354,1359,1372,1381,1388,1407,1412],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"资源检查",[19],{"type":20,"value":17},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25],{"type":20,"value":9},{"type":14,"tag":27,"props":28,"children":30},"h2",{"id":29},"代码",[31],{"type":20,"value":29},{"type":14,"tag":22,"props":33,"children":34},{},[35,37,46],{"type":20,"value":36},"Unity 的垃圾收集（使用 ",{"type":14,"tag":38,"props":39,"children":43},"a",{"href":40,"rel":41},"https://en.wikipedia.org/wiki/Boehm_garbage_collector",[42],"nofollow",[44],{"type":20,"value":45},"Boehm GC 算法",{"type":20,"value":47},"）是非分代的，也是非压缩的。“非分代”意味着 GC 在执行每遍收集时必须扫描整个堆，因此随着堆的扩展，其性能会下降。“非压缩”意味着不会为内存中的对象重新分配内存地址来消除对象之间的间隙。",{"type":14,"tag":22,"props":49,"children":50},{},[51],{"type":14,"tag":52,"props":53,"children":55},"img",{"alt":52,"src":54},"/images/2020-09-10-optimizing-for-performance/UnderstandingPerformanceinUnity-AssetAuditingSection_image_1.png",[],{"type":14,"tag":22,"props":57,"children":58},{},[59,61,67],{"type":20,"value":60},"上图为内存碎片化示例。释放对象时，将释放其内存。但是，释放的空间",{"type":14,"tag":62,"props":63,"children":64},"strong",{},[65],{"type":20,"value":66},"不会",{"type":20,"value":68},"整合成为整个“可用内存”池的一部分。位于释放的对象两侧的对象可能仍在使用中。因此，释放的空间成为其他内存段之间的“间隙”（该间隙由上图中的红色圆圈指示）。因此，新释放的空间仅可用于存储与释放相同大小或更小的对象的数据。",{"type":14,"tag":22,"props":70,"children":71},{},[72],{"type":20,"value":73},"分配对象时，请注意对象在内存空间中的分配地址必须始终为连续空间块。",{"type":14,"tag":22,"props":75,"children":76},{},[77],{"type":20,"value":78},"这导致了内存碎片化这个核心问题：虽然堆中的可用空间总量可能很大，但是可能其中的部分或全部的可分配空间对象之间存在小的“间隙”。这种情况下，即使可用空间总量高于要分配的空间量，托管堆可能也找不到足够大的连续内存块来满足该分配需求。",{"type":14,"tag":80,"props":81,"children":83},"h3",{"id":82},"cpu",[84],{"type":20,"value":85},"CPU",{"type":14,"tag":87,"props":88,"children":89},"ol",{},[90,114,154,159,164,202,232,237,242,247],{"type":14,"tag":91,"props":92,"children":93},"li",{},[94,96,103,105,112],{"type":20,"value":95},"Unity 不使用字符串名称对 Animator、Material 和 Shader 属性进行内部寻址。为了加快速度，所有属性名称都经过哈希处理为属性 ID，实际上正是这些 ID 用于寻址属性。",{"type":14,"tag":38,"props":97,"children":100},{"href":98,"rel":99},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Animator.StringToHash.html",[42],[101],{"type":20,"value":102},"Animator.StringToHash",{"type":20,"value":104}," 是用于 Animator 属性名称的对应 API，",{"type":14,"tag":38,"props":106,"children":109},{"href":107,"rel":108},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Shader.PropertyToID.html",[42],[110],{"type":20,"value":111},"Shader.PropertyToID",{"type":20,"value":113}," 是用于 Material 和 Shader 属性名称的对应 API。",{"type":14,"tag":91,"props":115,"children":116},{},[117,119,126,128,135,137,144,145,152],{"type":20,"value":118},"将 ",{"type":14,"tag":38,"props":120,"children":123},{"href":121,"rel":122},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.RaycastAll.html",[42],[124],{"type":20,"value":125},"RaycastAll",{"type":20,"value":127}," 调用替换为 ",{"type":14,"tag":38,"props":129,"children":132},{"href":130,"rel":131},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.RaycastNonAlloc.html",[42],[133],{"type":20,"value":134},"RaycastNonAlloc",{"type":20,"value":136},"，将 ",{"type":14,"tag":38,"props":138,"children":141},{"href":139,"rel":140},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.SphereCastAll.html",[42],[142],{"type":20,"value":143},"SphereCastAll",{"type":20,"value":127},{"type":14,"tag":38,"props":146,"children":149},{"href":147,"rel":148},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Physics.SphereCastNonAlloc.html",[42],[150],{"type":20,"value":151},"SphereCastNonAlloc",{"type":20,"value":153},"，以此类推。对于 2D 应用程序，也存在所有 Physics2D 查询 API 的非分配版本。",{"type":14,"tag":91,"props":155,"children":156},{},[157],{"type":20,"value":158},"请避免在紧凑循环中或每帧运行的代码中进行UnityEngine.Object 子类和 Null 比较。Il2cpp中此过程必须执行查找和验证以便将脚本引用转换为对原生代码的引用。",{"type":14,"tag":91,"props":160,"children":161},{},[162],{"type":20,"value":163},"整数数学比浮点数学更快，而浮点数学比矢量、矩阵或四元数运算更快。每当交换或关联算术允许时，请尝试最小化单个数学运算的成本",{"type":14,"tag":91,"props":165,"children":166},{},[167,169,176,178,184,186,192,194,200],{"type":20,"value":168},"最好完全避免在生产代码中使用 ",{"type":14,"tag":170,"props":171,"children":173},"code",{"className":172},[],[174],{"type":20,"value":175},"Object.Find",{"type":20,"value":177}," 和 ",{"type":14,"tag":170,"props":179,"children":181},{"className":180},[],[182],{"type":20,"value":183},"Object.FindObjectOfType",{"type":20,"value":185},"。还有",{"type":14,"tag":170,"props":187,"children":189},{"className":188},[],[190],{"type":20,"value":191},"Camera.main",{"type":20,"value":193},"也使用了",{"type":14,"tag":170,"props":195,"children":197},{"className":196},[],[198],{"type":20,"value":199},"FindGameObjectsWithTag",{"type":20,"value":201},",由于此类 API 要求 Unity 遍历内存中的所有游戏对象和组件，因此它们会随着项目规模的扩大而产生性能问题。(除了单例,因为有缓存)",{"type":14,"tag":91,"props":203,"children":204},{},[205,207,213,215,221,223],{"type":20,"value":206},"在紧凑循环中尽量少用",{"type":14,"tag":170,"props":208,"children":210},{"className":209},[],[211],{"type":20,"value":212},"属性(get,set)",{"type":20,"value":214},"和",{"type":14,"tag":170,"props":216,"children":218},{"className":217},[],[219],{"type":20,"value":220},"方法",{"type":20,"value":222},",调用的每个方法都必须在内存中找到该方法的地址，并将另一个帧推入栈。所有这些操作都是有成本的，但在大多数代码中，它们都小到可以忽略不计.但是，在紧凑循环中运行较小的方法时，因引入额外方法调用而增加的开销可能会变得非常显著，甚至占主导地位。.例如",{"type":14,"tag":224,"props":225,"children":227},"pre",{"code":226},"int Accum { get; set; }\nAccum = 0;\n\nfor(int i = 0;\n       i \u003C myList.Count;    // myList.Count 调用 Count 属性上的 get 方法\n       i++) {\n    Accum       // 通过 set 将加法运算的结果分配给 Accum\n+=      // 通过 get 检索 Accum 的当前值，以便将其传递给加法运算\nmyList[i];  // [] 运算符调用列表的 get_Value 方法来检索列表特定索引位置的项值。\n",[228],{"type":14,"tag":170,"props":229,"children":230},{"__ignoreMap":7},[231],{"type":20,"value":226},{"type":14,"tag":91,"props":233,"children":234},{},[235],{"type":20,"value":236},"移除空的MonoBehaviour方法start update awake..理由同上",{"type":14,"tag":91,"props":238,"children":239},{},[240],{"type":20,"value":241},"不要在运行时使用AddComponent将组件添加到GameObjects可能是一项非常昂贵的操作。因为他会先看组件有没有DisallowMultipleComponent的设置,然后又重复上述的检查一次最后还需要调用所有被加入的monobehaviour的awake方法,这些所有步骤都发生在堆内存上",{"type":14,"tag":91,"props":243,"children":244},{},[245],{"type":20,"value":246},"不要使用Texture2D.SetPixels() ,使用Texture2D.SetPixels32() 或者 GetRawTextureData()/Apply() 代替",{"type":14,"tag":91,"props":248,"children":249},{},[250],{"type":20,"value":251},"尽量避免调用Object.Instantiate再经常更新的代码。这里可以使用poolmanager代替",{"type":14,"tag":80,"props":253,"children":255},{"id":254},"gpu",[256],{"type":20,"value":257},"GPU",{"type":14,"tag":87,"props":259,"children":260},{},[261,266,271,276],{"type":14,"tag":91,"props":262,"children":263},{},[264],{"type":20,"value":265},"meshreander->lighting -> cast shadows关闭阴影投射",{"type":14,"tag":91,"props":267,"children":268},{},[269],{"type":20,"value":270},"尽可能少的light,然后只对特定曾有用",{"type":14,"tag":91,"props":272,"children":273},{},[274],{"type":20,"value":275},"过高的分辨率会造成手机发热..可以使用Screen.SetResolution(width,height,false)",{"type":14,"tag":91,"props":277,"children":278},{},[279,281],{"type":20,"value":280},"启用GPU实例化,",{"type":14,"tag":38,"props":282,"children":285},{"href":283,"rel":284},"https://docs.unity3d.com/cn/2020.2/Manual/GPUInstancing.html",[42],[286],{"type":20,"value":287},"GPU 实例化 - Unity 手册 (unity3d.com)",{"type":14,"tag":80,"props":289,"children":291},{"id":290},"ui",[292],{"type":20,"value":293},"UI",{"type":14,"tag":87,"props":295,"children":296},{},[297,302,307,312,317,322,327,332,337,342,347,352,357,362,367],{"type":14,"tag":91,"props":298,"children":299},{},[300],{"type":20,"value":301},"将对象隐藏起来,而不是移动到屏幕外边..因为摄像机依然能看到这些对象,依然会被渲染",{"type":14,"tag":91,"props":303,"children":304},{},[305],{"type":20,"value":306},"如果UI元素改变数值或是位置,会影响批次处理,造成对Gpu发送更多drawcall,所以将更新频率不同的ui分再不同的画布上",{"type":14,"tag":91,"props":308,"children":309},{},[310],{"type":20,"value":311},"同张画布中的ui元素要有一样的z值",{"type":14,"tag":91,"props":313,"children":314},{},[315],{"type":20,"value":316},"ui元素必须拥有一样的材质和纹理",{"type":14,"tag":91,"props":318,"children":319},{},[320],{"type":20,"value":321},"对象拥有一样的clipping rect(矩形裁剪范围)",{"type":14,"tag":91,"props":323,"children":324},{},[325],{"type":20,"value":326},"去掉不需要的Graphic Raycaster,每次当用户点击触发事件时,系统就会遍历所有可能接收输入事件的ui元素,这会造成多次\"点落再矩形中\"检查,来判断对象是否该做出反应",{"type":14,"tag":91,"props":328,"children":329},{},[330],{"type":20,"value":331},"如果打开了全屏ui,把渲染3d场景的摄像机关掉",{"type":14,"tag":91,"props":333,"children":334},{},[335],{"type":20,"value":336},"如果打开了全屏ui,隐藏其他被遮蔽的ui,如果可以,建议你关闭canvas组件,而不是游戏对象本身,这样能减少画布再次出现的时间.禁用canvase组件会阻止画布向Gpu发起绘图调用,所以该画布不再可见,然后,此时该画布不会丢弃它的顶点缓冲区,它会保留所有网格和顶点,当重新启用时,不会触发重构过程,它只会重新绘制画布内容.此外禁用canvas组件不会触发canvas层级上性能消耗较大的ondisable/onenable回调,禁用子组件时要小心,注意它是否运行性能消耗较大的每帧代码.",{"type":14,"tag":91,"props":338,"children":339},{},[340],{"type":20,"value":341},"尽可能的降低帧率,如果有个静态的ui,就没有必要设置帧率到60",{"type":14,"tag":91,"props":343,"children":344},{},[345],{"type":20,"value":346},"如果texture是中心镂空且切图为九宫格时，可以去除fill center，以减少over draw。",{"type":14,"tag":91,"props":348,"children":349},{},[350],{"type":20,"value":351},"使用Empty4Raycast代替空的image",{"type":14,"tag":91,"props":353,"children":354},{},[355],{"type":20,"value":356},"不要使用ugui的outline和shadow,他时把原来的顶点copy多份进行实现的..可以使用shader进行实现",{"type":14,"tag":91,"props":358,"children":359},{},[360],{"type":20,"value":361},"mask会增加一个drawcall,并且mask里面的图片不会和外面的图片合批,",{"type":14,"tag":91,"props":363,"children":364},{},[365],{"type":20,"value":366},"Scroll Rect 组件对应的Content填加 Canvas 组件 ，因为对应的Mask 子元素依然参与全局的Depth排序，避免因拖动打乱原有的Depth排序，造成合批失败",{"type":14,"tag":91,"props":368,"children":369},{},[370],{"type":20,"value":371},"尽量不要使用layout,因为会从变动节点递归向上调用GetComponents",{"type":14,"tag":373,"props":374,"children":376},"h4",{"id":375},"图集整理",[377],{"type":20,"value":375},{"type":14,"tag":22,"props":379,"children":380},{},[381],{"type":20,"value":382},"为什么使用图集?",{"type":14,"tag":87,"props":384,"children":385},{},[386,391],{"type":14,"tag":91,"props":387,"children":388},{},[389],{"type":20,"value":390},"图片尺寸为2的次幂时，GPU处理起来会快很多，小图自己是做不到每张图都是2的次幂的，但打成一张大图就可以（浪费一点也无所谓）；",{"type":14,"tag":91,"props":392,"children":393},{},[394],{"type":20,"value":395},"CPU在传送资源信息给GPU时，只需要传一张大图就可以了，因为GPU可以在这张图中的不同区域进行采样，然后拼出对应的界面。注意，这就是为什么需要用同一个Source Image图集的原因，是Batch的关键，因为一个Drawcall就把所有原材料传过去了，GPU你画去吧",{"type":14,"tag":22,"props":397,"children":398},{},[399],{"type":20,"value":400},"但是显然把所有图片打成一张图集是不合理的，因为这张图可能非常大，所以就要按照一定规则将图片进行分类。在分类思路上，我们希望做到Drawcall尽可能少，同时资源量也尽可能少（多些重用），但这两者某种程度上是互斥的，所以折衷一下，可以遵循以下思路：",{"type":14,"tag":402,"props":403,"children":404},"ul",{},[405,417,428],{"type":14,"tag":91,"props":406,"children":407},{},[408,410,415],{"type":20,"value":409},"设计UI时要考虑重用性，如一些边框、按钮等，这些作为共享资源，放在1~3张大图集中，称为",{"type":14,"tag":62,"props":411,"children":412},{},[413],{"type":20,"value":414},"重用图集",{"type":20,"value":416},"；",{"type":14,"tag":91,"props":418,"children":419},{},[420,422,427],{"type":20,"value":421},"其它非重用UI按照功能模块进行划分，每个模块使用1~2张图集，为",{"type":14,"tag":62,"props":423,"children":424},{},[425],{"type":20,"value":426},"功能图集",{"type":20,"value":416},{"type":14,"tag":91,"props":429,"children":430},{},[431,433,437,439,443,445,449,451,455,457,461,463,467],{"type":20,"value":432},"对于一些UI，如果同时用到",{"type":14,"tag":62,"props":434,"children":435},{},[436],{"type":20,"value":426},{"type":20,"value":438},"与",{"type":14,"tag":62,"props":440,"children":441},{},[442],{"type":20,"value":414},{"type":20,"value":444},"，但是其",{"type":14,"tag":62,"props":446,"children":447},{},[448],{"type":20,"value":426},{"type":20,"value":450},"剩下的“空位”较多，则可以考虑将用到的",{"type":14,"tag":62,"props":452,"children":453},{},[454],{"type":20,"value":414},{"type":20,"value":456},"中的元素单独拎出来，合入",{"type":14,"tag":62,"props":458,"children":459},{},[460],{"type":20,"value":426},{"type":20,"value":462},"中，从而做到让UI只依赖于",{"type":14,"tag":62,"props":464,"children":465},{},[466],{"type":20,"value":426},{"type":20,"value":468},"。也就是通过一定的冗余，来达到性能的提升。",{"type":14,"tag":373,"props":470,"children":472},{"id":471},"ugui层级合并规则与批次生成规则",[473],{"type":20,"value":474},"UGUI层级合并规则与批次生成规则",{"type":14,"tag":22,"props":476,"children":477},{},[478],{"type":20,"value":479},"UGUI的层叠顺序是按照Hierarchy中的顺序从上往下进行的，也就是越靠上的组件，就会被画在越底部。",{"type":14,"tag":22,"props":481,"children":482},{},[483,485,490],{"type":20,"value":484},"所以UI就是这样一层一层地叠上去画出来的。当然这样一个一个地画效率肯定是不能接受的，所以要合并，要Batch，Unity自身就提供了一个算法去决定哪些层应该合并到一起，并以什么样的顺序进行绘制。",{"type":14,"tag":62,"props":486,"children":487},{},[488],{"type":20,"value":489},"所有相邻层的可Batch的UI元素将会在一个Drawcall完成",{"type":20,"value":491},"。接下来就来讨论一下Unity的层级合并与计算算法。",{"type":14,"tag":22,"props":493,"children":494},{},[495,497,502,504,508,510,515,517,521],{"type":20,"value":496},"Unity的UI渲染顺序的确定有2个步骤，第一步计算每个UI元素的",{"type":14,"tag":62,"props":498,"children":499},{},[500],{"type":20,"value":501},"层级号",{"type":20,"value":503},"；第二步合并相同",{"type":14,"tag":62,"props":505,"children":506},{},[507],{"type":20,"value":501},{"type":20,"value":509},"中可以Batch的元素作为一个",{"type":14,"tag":62,"props":511,"children":512},{},[513],{"type":20,"value":514},"批次",{"type":20,"value":516},"，并对",{"type":14,"tag":62,"props":518,"children":519},{},[520],{"type":20,"value":514},{"type":20,"value":522},"进行排序；",{"type":14,"tag":22,"props":524,"children":525},{},[526,528,533],{"type":20,"value":527},"先从直观的角度来解释",{"type":14,"tag":62,"props":529,"children":530},{},[531],{"type":20,"value":532},"计算层级号的算法",{"type":20,"value":534},"：",{"type":14,"tag":402,"props":536,"children":537},{},[538,543,554,565,576],{"type":14,"tag":91,"props":539,"children":540},{},[541],{"type":20,"value":542},"如果有一个UI元素，它所占的屏幕范围内（通常是矩形），",{"type":14,"tag":91,"props":544,"children":545},{},[546,548,552],{"type":20,"value":547},"如果没有任何UI在它的底下，那么它的",{"type":14,"tag":62,"props":549,"children":550},{},[551],{"type":20,"value":501},{"type":20,"value":553},"就是0（最底下）；",{"type":14,"tag":91,"props":555,"children":556},{},[557,559,563],{"type":20,"value":558},"如果有一个UI在其底下且该UI可以和它Batch，那它的",{"type":14,"tag":62,"props":560,"children":561},{},[562],{"type":20,"value":501},{"type":20,"value":564},"与底下的UI层级一样；",{"type":14,"tag":91,"props":566,"children":567},{},[568,570,574],{"type":20,"value":569},"如果有一个UI在其底下但是无法与它Batch，那它的",{"type":14,"tag":62,"props":571,"children":572},{},[573],{"type":20,"value":501},{"type":20,"value":575},"为底下的UI的层级+1；",{"type":14,"tag":91,"props":577,"children":578},{},[579,581,585,587,591],{"type":20,"value":580},"如果有多个UI都在其下面，那么按前两种方式遍历计算所有的",{"type":14,"tag":62,"props":582,"children":583},{},[584],{"type":20,"value":501},{"type":20,"value":586},"，其中最大的那个作为自己的",{"type":14,"tag":62,"props":588,"children":589},{},[590],{"type":20,"value":501},{"type":20,"value":592},"。",{"type":14,"tag":22,"props":594,"children":595},{},[596,598,602],{"type":20,"value":597},"这里也给一下伪代码，假设所有UI元素（抛弃层级关系）都按从上往下的顺序被装在一个list中，那么每个UI元素对应的",{"type":14,"tag":62,"props":599,"children":600},{},[601],{"type":20,"value":501},{"type":20,"value":603},"计算可以参考以下：",{"type":14,"tag":224,"props":605,"children":610},{"code":606,"language":607,"meta":7,"className":608},"function CalLayer(List UIEleLst)\n  if(UIEleLst.Count == 0 ) return;\n  //Initial the first UI Element as layer 0\n  UIEleLst[0].layer = 0;\n  for(i = 1 ~ UIEleLst.Count){\n    var IsCollideWithElements = false; \n    //Compare with all elements beneath\n    for(j = i-1 ~ 0){\n      //If Element-i collide with Element-j\n      if(UIEleLst[i].Rect.CollideWith(UIEleLst[j].Rect)){\n        IsCollideWithElements = true;\n        //If Element-i can be batched with Element-j, same layer as Element-j\n        if(UIEleLst[i].QualifyToBatchWith(UIEleLst[j])){\n          UIEleLst[i].layer = UIEleLst[j].layer;\n        }\n        else{\n          //Or else the layer is larger \n          UIEleLst[i].layer = UIEleLst[j].layer + 1;\n        }\n      }\n    }\n    //If not collide with any elements beneath, set layer to 0\n    if(!IsCollideWithElements)\n    {\n      UIEleLst[i].layer = 0;\n    }\n  }\n\n \n","csharp",[609],"language-csharp",[611],{"type":14,"tag":170,"props":612,"children":613},{"__ignoreMap":7},[614],{"type":20,"value":606},{"type":14,"tag":22,"props":616,"children":617},{},[618,620,625],{"type":20,"value":619},"有了层级号之后，就要",{"type":14,"tag":62,"props":621,"children":622},{},[623],{"type":20,"value":624},"合并批次",{"type":20,"value":626},"了，",{"type":14,"tag":22,"props":628,"children":629},{},[630,632,636],{"type":20,"value":631},"此时，Unity会将每一层的所有元素进行一个排序（按照材质、纹理等信息），合并掉可以Batch的元素成为一个",{"type":14,"tag":62,"props":633,"children":634},{},[635],{"type":20,"value":514},{"type":20,"value":637},"，",{"type":14,"tag":22,"props":639,"children":640},{},[641,646],{"type":14,"tag":62,"props":642,"children":643},{},[644],{"type":20,"value":645},"目前已知的排序规则是，Text组件会排在Image组件之前渲染",{"type":20,"value":647},"，而同一类组件的情况下排序规则未知（好像并没什么规则）。",{"type":14,"tag":22,"props":649,"children":650},{},[651,656,658,663],{"type":14,"tag":62,"props":652,"children":653},{},[654],{"type":20,"value":655},"经过以上排序，就可以得到一个有序的批次序列了",{"type":20,"value":657},"。这时，",{"type":14,"tag":62,"props":659,"children":660},{},[661],{"type":20,"value":662},"Unity会再做一个优化，即如果相邻间的两个批次正好可以Batch的话就会进行Batch",{"type":20,"value":592},{"type":14,"tag":22,"props":665,"children":666},{},[667],{"type":20,"value":668},"举个栗子，一个层级为0的ImageA，一个层级为1的ImageB（2个Image可Batch）和一个层级为0的TextC，",{"type":14,"tag":22,"props":670,"children":671},{},[672],{"type":20,"value":673},"Unity排序后的批次为TextC->ImageA->ImageB，后两个批次可以合并，所以是2个Drawcall。",{"type":14,"tag":22,"props":675,"children":676},{},[677],{"type":20,"value":678},"再举个栗子，一个层级为0的TextD，一个层级为1的TextE（2个Text可Batch）和一个层级为0的ImageF，",{"type":14,"tag":22,"props":680,"children":681},{},[682],{"type":20,"value":683},"Unity排序后的批次为TextD->ImageF->TextE，这时就需要3个Drawcall了！（是不是有点晕，再回顾下黑体字）",{"type":14,"tag":22,"props":685,"children":686},{},[687],{"type":20,"value":688},"以下的伪代码有些偷懒，实在懒得写排序、合并之类的，一长串也不好读，几个步骤列一下，其它诸位看上面那段文字脑补下吧...",{"type":14,"tag":224,"props":690,"children":693},{"code":691,"language":607,"meta":7,"className":692},"function MergeBatch(List UIEleLst)\n{\n  //Order the UI Elements by their layers and batch-keys, \n  //batch-key is a combination of its component type, \n  //texture and material info\n  UIEleLst.OrderBy(\n   (uiElement)=>{return this.layer > uiElement.layer\n   || this.BatchKey() > uiElement.BatchKey()} \n  );\n\n  //Merge the UI Elements with same layer and batch-key as a batch\n  var BatchLst = UIEleLst.MergeSameElementsAsBatch();\n\n  //Make adjacent batches with same batch-key merged\n  BatchLst.MergeAdjacentBatches();\n\n  return BatchLst;\n}\n",[609],[694],{"type":14,"tag":170,"props":695,"children":696},{"__ignoreMap":7},[697],{"type":20,"value":691},{"type":14,"tag":22,"props":699,"children":700},{},[701],{"type":20,"value":702},"根据以上规则，就可以得出一些“摆UI”的技巧：",{"type":14,"tag":402,"props":704,"children":705},{},[706,711,716,721],{"type":14,"tag":91,"props":707,"children":708},{},[709],{"type":20,"value":710},"有相同材质和纹理的UI元素是可以Batch的，可以Batch的UI上下叠在一块不会影响性能，但是如果不能Batch的UI元素叠在一块，就会增加Drawcall开销。",{"type":14,"tag":91,"props":712,"children":713},{},[714],{"type":20,"value":715},"要注意UI元素间的层叠关系，建议用“T”工具查看其矩形大小，因为有些图片透明，但是却叠在其它UI上面了，然后又无法Batch的话，就会无故多许多Drawcall；",{"type":14,"tag":91,"props":717,"children":718},{},[719],{"type":20,"value":720},"UI中出现最多的就是Image与Text组件，当Text叠在Image上面（如Button)，然后Text上又叠了一个图片时，就会至少多2个Drawcall，可以考虑将字体直接印在下面的图片上；",{"type":14,"tag":91,"props":722,"children":723},{},[724],{"type":20,"value":725},"有些情况可以考虑人为增加层级从而减少Drawcall，比如一个Text的层级为0，另一个可Batch的Text叠在一个图片A上，层级为1，那此时2个Text因为层级不同会安排2个Drawcall，但如果在第一个Text下放一个透明的图片（与图片A可Batch），那两个Text的层级就一致了，Drawcall就可以减少一个。",{"type":14,"tag":373,"props":727,"children":729},{"id":728},"ui优化参考",[730],{"type":20,"value":731},"UI优化参考",{"type":14,"tag":402,"props":733,"children":734},{},[735,745],{"type":14,"tag":91,"props":736,"children":737},{},[738],{"type":14,"tag":38,"props":739,"children":742},{"href":740,"rel":741},"https://www.jianshu.com/p/061e67308e5f",[42],[743],{"type":20,"value":744},"Unity GUI(uGUI)使用心得与性能总结 - 简书 (jianshu.com)",{"type":14,"tag":91,"props":746,"children":747},{},[748],{"type":14,"tag":38,"props":749,"children":752},{"href":750,"rel":751},"https://unity3d.com/how-to/unity-ui-optimization-tips?_ga=2.147783095.1436155110.1558584716-746267689.1557026511",[42],[753],{"type":20,"value":754},"Some of the best optimization tips for Unity UI - Unity (unity3d.com)",{"type":14,"tag":80,"props":756,"children":758},{"id":757},"内存",[759],{"type":20,"value":757},{"type":14,"tag":87,"props":761,"children":762},{},[763,768,773,778,799,812,833,838],{"type":14,"tag":91,"props":764,"children":765},{},[766],{"type":20,"value":767},"不要再update中重复实例化对象,使用了ecs同样注意,因为他也是执行在update中",{"type":14,"tag":91,"props":769,"children":770},{},[771],{"type":20,"value":772},"不要使用闭包和匿名方法,因为闭包和匿名方法都会都是引用类型(c#将生成一个匿名类)会在堆上进行分配",{"type":14,"tag":91,"props":774,"children":775},{},[776],{"type":20,"value":777},"避免装箱..虽然 Unity 的分配器实际会使用不同的内存池进行小型和大型分配，但 Unity 的垃圾回收器“不是”分代的，因此无法有效清除由装箱生成的小型、频繁的临时分配。",{"type":14,"tag":91,"props":779,"children":780},{},[781,783,789,791,797],{"type":20,"value":782},"不要用foreach, Unity 的 C# 编译器生成的 IL 会构造一个通用值类型的枚举器来遍历值集合,而且通过枚举器遍历集合的方法调用成本更高，通常比通过 ",{"type":14,"tag":170,"props":784,"children":786},{"className":785},[],[787],{"type":20,"value":788},"for",{"type":20,"value":790}," 或 ",{"type":14,"tag":170,"props":792,"children":794},{"className":793},[],[795],{"type":20,"value":796},"while",{"type":20,"value":798}," 循环进行的手动迭代慢得多。",{"type":14,"tag":91,"props":800,"children":801},{},[802,804,810],{"type":20,"value":803},"unityapi.. mesh.vertices和 Input.touches,每次访问 ",{"type":14,"tag":170,"props":805,"children":807},{"className":806},[],[808],{"type":20,"value":809},".touches",{"type":20,"value":811}," 这些属性时都会发生分配。所以不要在循环和update中使用",{"type":14,"tag":91,"props":813,"children":814},{},[815,817,823,825,831],{"type":20,"value":816},"避免使用",{"type":14,"tag":170,"props":818,"children":820},{"className":819},[],[821],{"type":20,"value":822},"GetComponentsInChildren()",{"type":20,"value":824},",",{"type":14,"tag":170,"props":826,"children":828},{"className":827},[],[829],{"type":20,"value":830},"GetComponentsInParent()",{"type":20,"value":832},",而是使用GetComponentsInChildren(bool includeInactive, List result);前者会分配托管内存,后者可以传入一个你保存的数组避免重新分配",{"type":14,"tag":91,"props":834,"children":835},{},[836],{"type":20,"value":837},"不要使用linq因为会分配大量的托管内存",{"type":14,"tag":91,"props":839,"children":840},{},[841,843,849],{"type":20,"value":842},"不要使用Texture2D.GetPixels() ,使用",{"type":14,"tag":170,"props":844,"children":846},{"className":845},[],[847],{"type":20,"value":848},"Texture2D.GetRawTextureData()",{"type":20,"value":850},"代替此方法返回像素数据的NativeArray,前者会有大量的托管内存",{"type":14,"tag":22,"props":852,"children":853},{},[854],{"type":20,"value":855},"参考 :",{"type":14,"tag":402,"props":857,"children":858},{},[859,869,879,889],{"type":14,"tag":91,"props":860,"children":861},{},[862],{"type":14,"tag":38,"props":863,"children":866},{"href":864,"rel":865},"https://docs.unity3d.com/cn/2020.2/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html",[42],[867],{"type":20,"value":868},"了解托管堆 - Unity 手册 (unity3d.com)",{"type":14,"tag":91,"props":870,"children":871},{},[872],{"type":14,"tag":38,"props":873,"children":876},{"href":874,"rel":875},"https://docs.unity3d.com/cn/2020.2/Manual/UnderstandingAutomaticMemoryManagement.html",[42],[877],{"type":20,"value":878},"了解自动内存管理 - Unity 手册 (unity3d.com)",{"type":14,"tag":91,"props":880,"children":881},{},[882],{"type":14,"tag":38,"props":883,"children":886},{"href":884,"rel":885},"https://docs.unity3d.com/cn/2020.2/Manual/BestPracticeUnderstandingPerformanceInUnity7.html",[42],[887],{"type":20,"value":888},"一般优化 - Unity 手册 (unity3d.com)",{"type":14,"tag":91,"props":890,"children":891},{},[892],{"type":14,"tag":38,"props":893,"children":896},{"href":894,"rel":895},"https://www.bilibili.com/video/BV1Tt4y1X7f6",[42],[897],{"type":20,"value":898},"Unite Now - （中文字幕）性能优化技巧（上）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili",{"type":14,"tag":27,"props":900,"children":902},{"id":901},"资源",[903],{"type":20,"value":901},{"type":14,"tag":80,"props":905,"children":907},{"id":906},"animation",[908],{"type":20,"value":909},"Animation",{"type":14,"tag":87,"props":911,"children":912},{},[913,924],{"type":14,"tag":91,"props":914,"children":915},{},[916,918,922],{"type":20,"value":917},"动画曲线精度过高会增加动画占用内存; 此规则仅面向以文本格式序列化的*.anim文件中的浮点精度Custom Parameters: precision : 5",{"type":14,"tag":919,"props":920,"children":921},"br",{},[],{"type":20,"value":923},"用文本编辑器打开.anim动画文件，修改m_EditorCurves::curve::m_Curve下的float值的精度。建议用脚本直接将此文件中所有float精度都调小。",{"type":14,"tag":91,"props":925,"children":926},{},[927],{"type":20,"value":928},"场景中Animator组件的cullingMode是AlwaysAnimate会增加CPU使用率。",{"type":14,"tag":80,"props":930,"children":932},{"id":931},"audio",[933],{"type":20,"value":934},"Audio",{"type":14,"tag":402,"props":936,"children":937},{},[938,943,948,953,958,963,968,973],{"type":14,"tag":91,"props":939,"children":940},{},[941],{"type":20,"value":942},"如果不需要立体声,将音频文件设置为 Force To Mono,这样能省下一半的磁盘和内存",{"type":14,"tag":91,"props":944,"children":945},{},[946],{"type":20,"value":947},"降低文件比特率",{"type":14,"tag":91,"props":949,"children":950},{},[951],{"type":20,"value":952},"ios下使用adpcm和mp3格式",{"type":14,"tag":91,"props":954,"children":955},{},[956],{"type":20,"value":957},"安卓下使用vorbis格式",{"type":14,"tag":91,"props":959,"children":960},{},[961],{"type":20,"value":962},"如果小型文件\u003C200kb,load type设置成Decompress on Load,",{"type":14,"tag":91,"props":964,"children":965},{},[966],{"type":20,"value":967},"如果中型文件>=200kb,load type 设置成Compressed in Memory",{"type":14,"tag":91,"props":969,"children":970},{},[971],{"type":20,"value":972},"大型文件,如背景音乐,load type设置成streaming",{"type":14,"tag":91,"props":974,"children":975},{},[976],{"type":20,"value":977},"如果时静音模式则销毁audiosourceComponent组件,如果设置成0的话,其实还是会造成不必要的内存与cpu占用",{"type":14,"tag":80,"props":979,"children":981},{"id":980},"editorsetting",[982],{"type":20,"value":983},"EditorSetting",{"type":14,"tag":87,"props":985,"children":986},{},[987,992,997,1002,1007,1012,1017],{"type":14,"tag":91,"props":988,"children":989},{},[990],{"type":20,"value":991},"禁用 Accelerometer Frequency 陀螺仪",{"type":14,"tag":91,"props":993,"children":994},{},[995],{"type":20,"value":996},"尝试开启graphicJobs并测试 检查Editor -> Project Settings -> PlayerSettings -> Graphic Jobs(Experimental)*的设置",{"type":14,"tag":91,"props":998,"children":999},{},[1000],{"type":20,"value":1001},"如果在项目中启用了physics, 可以考虑开启Prebake Collision Meshes选项 检查Editor -> Project Settings -> PlayerSettings -> PreBake Collision Meshes的设置,这项设置可以减少加载/初始化的时间, 虽然会增加一些构建时间和包体积",{"type":14,"tag":91,"props":1003,"children":1004},{},[1005],{"type":20,"value":1006},"在Physics设置中LayerCollisionMatrix中的格子不应该都勾选上,这会增加CPU的负担, 应该取消勾选那些没有必要的格子 检查Editor -> Project Settings -> Physics -> Layer Collision Matrix的设置",{"type":14,"tag":91,"props":1008,"children":1009},{},[1010],{"type":20,"value":1011},"在Physics2D设置中LayerCollisionMatrix中的格子不应该都勾选上 同上",{"type":14,"tag":91,"props":1013,"children":1014},{},[1015],{"type":20,"value":1016},"检查Graphics中StandardShaderQuality设置,这会增加编译时间和包体积, 除非你想要支持很多性能跨度很大的设备,检查Editor -> Project Settings -> Graphics -> Tiers -> Standard Shader Quality的设置,StandardShaderQuality选项在所有Graphics Tier中应相同",{"type":14,"tag":91,"props":1018,"children":1019},{},[1020],{"type":20,"value":1021},"检查Android的ManagedStrippingLevel设置 检查Editor -> Project Settings -> PlayerSettings -> Managed Stripping Level的设置,Android设置中的ManagedStrippingLevel选项应为Medium或者High",{"type":14,"tag":80,"props":1023,"children":1025},{"id":1024},"mesh",[1026],{"type":20,"value":1027},"Mesh",{"type":14,"tag":402,"props":1029,"children":1030},{},[1031,1036,1041,1046,1051],{"type":14,"tag":91,"props":1032,"children":1033},{},[1034],{"type":20,"value":1035},"开启mesh compression,来减少磁盘容量",{"type":14,"tag":91,"props":1037,"children":1038},{},[1039],{"type":20,"value":1040},"尽量关闭read/write enabled 选项,如果开启unity会存储两份mesh",{"type":14,"tag":91,"props":1042,"children":1043},{},[1044],{"type":20,"value":1045},"如果没有使用动画,关闭Rigs,如石头或者房子",{"type":14,"tag":91,"props":1047,"children":1048},{},[1049],{"type":20,"value":1050},"如果没有用到Blendshapes,ye关闭",{"type":14,"tag":91,"props":1052,"children":1053},{},[1054],{"type":20,"value":1055},"Normals and Tangents..法向量和切线信息,如果材质没用到.也关闭",{"type":14,"tag":80,"props":1057,"children":1059},{"id":1058},"prefab",[1060],{"type":20,"value":1061},"Prefab",{"type":14,"tag":80,"props":1063,"children":1065},{"id":1064},"scene",[1066],{"type":20,"value":1067},"Scene",{"type":14,"tag":80,"props":1069,"children":1071},{"id":1070},"texture",[1072],{"type":20,"value":1073},"Texture",{"type":14,"tag":22,"props":1075,"children":1076},{},[1077],{"type":20,"value":1078},"导入大小需要设置maxsize和compression,否则将导致文件过大.打包的时候会占体积",{"type":14,"tag":402,"props":1080,"children":1081},{},[1082,1087,1092,1097,1102,1107],{"type":14,"tag":91,"props":1083,"children":1084},{},[1085],{"type":20,"value":1086},"max size 尽可能的设置到最小",{"type":14,"tag":91,"props":1088,"children":1089},{},[1090],{"type":20,"value":1091},"pot(大小为2的幂次方) or atlas",{"type":14,"tag":91,"props":1093,"children":1094},{},[1095],{"type":20,"value":1096},"移除背景纹理和其他不透明纹理的alpha通道",{"type":14,"tag":91,"props":1098,"children":1099},{},[1100],{"type":20,"value":1101},"关闭read/write,以减少内存使用",{"type":14,"tag":91,"props":1103,"children":1104},{},[1105],{"type":20,"value":1106},"如果16bit color足够用了就不要使用 32bit",{"type":14,"tag":91,"props":1108,"children":1109},{},[1110],{"type":20,"value":1111},"如果不需要使用mipmaps 则禁用,例如 ui和sprites,或者相对于z值不会又任何变化的元素",{"type":14,"tag":80,"props":1113,"children":1115},{"id":1114},"resources文件夹",[1116],{"type":20,"value":1117},"Resources文件夹",{"type":14,"tag":22,"props":1119,"children":1120},{},[1121],{"type":20,"value":1122},"尽量不要使用resources文件夹.它会打包到包体中.且在启动时会全部加载..",{"type":14,"tag":27,"props":1124,"children":1126},{"id":1125},"assetbundle",[1127],{"type":20,"value":1128},"AssetBundle",{"type":14,"tag":22,"props":1130,"children":1131},{},[1132],{"type":20,"value":1133},"资源包冗余检测",{"type":14,"tag":15,"props":1135,"children":1137},{"id":1136},"工具检测",[1138],{"type":20,"value":1136},{"type":14,"tag":27,"props":1140,"children":1142},{"id":1141},"drawcall",[1143],{"type":20,"value":1144},"DrawCall",{"type":14,"tag":22,"props":1146,"children":1147},{},[1148],{"type":14,"tag":62,"props":1149,"children":1150},{},[1151],{"type":20,"value":1152},"一、什么是DrawCall？",{"type":14,"tag":22,"props":1154,"children":1155},{},[1156],{"type":20,"value":1157},"​    在unity中，每次CPU准备数据并通知GPU的过程就称之为一个DrawCall。",{"type":14,"tag":22,"props":1159,"children":1160},{},[1161],{"type":20,"value":1162},"​    具体过程就是：设置颜色-->绘图方式-->顶点坐标-->绘制-->结束，所以在绘制过程中，如果能在一次DrawCall完成所有绘制就会大大提高运行效率，进而达到优化的目的。",{"type":14,"tag":22,"props":1164,"children":1165},{},[1166],{"type":14,"tag":62,"props":1167,"children":1168},{},[1169],{"type":20,"value":1170},"二、DrawCall为什么会影响游戏运行效率？",{"type":14,"tag":22,"props":1172,"children":1173},{},[1174],{"type":20,"value":1175},"说道为什么会影响效率，就首先要了解一下他的工作原理：为了CPU和GPU可以进行并行工作，就需要一个命令缓冲区，就是由CPU向其中添加命令，然后又GPU从中读取命令，这样就实现了通过CPU准备数据，通知GPU进行渲染。",{"type":14,"tag":22,"props":1177,"children":1178},{},[1179],{"type":20,"value":1180},"在每次调用DrawCall之前，CPU需要向GPU发送很多内容，主要是包括数据，渲染状态（就是设置对象需要的材质纹理等），命令等。CPU进行的操作具体就是：",{"type":14,"tag":402,"props":1182,"children":1183},{},[1184,1189,1194],{"type":14,"tag":91,"props":1185,"children":1186},{},[1187],{"type":20,"value":1188},"准备渲染对象，然后将渲染对象从硬盘加载到内存，然后从内存加载到显存，进而方便GPU高速处理",{"type":14,"tag":91,"props":1190,"children":1191},{},[1192],{"type":20,"value":1193},"设置每个对象的渲染状态，也就是设置对象的材质、纹理、着色器等",{"type":14,"tag":91,"props":1195,"children":1196},{},[1197],{"type":20,"value":1198},"输出渲染图元，然后向GPU发送DrawCall命令，并将渲染图元传递给GPU",{"type":14,"tag":22,"props":1200,"children":1201},{},[1202],{"type":20,"value":1203},"所以如果DrawCall数量过多就会导致CPU进行大量计算，进而导致CPU的过载，影响游戏运行效率。",{"type":14,"tag":22,"props":1205,"children":1206},{},[1207],{"type":14,"tag":62,"props":1208,"children":1209},{},[1210],{"type":20,"value":1211},"三、批处理",{"type":14,"tag":87,"props":1213,"children":1214},{},[1215,1220,1225,1230],{"type":14,"tag":91,"props":1216,"children":1217},{},[1218],{"type":20,"value":1219},"批处理的目的就是为了减少DrawCall。DrawCall即CPU命令GPU去绘制。",{"type":14,"tag":91,"props":1221,"children":1222},{},[1223],{"type":20,"value":1224},"如果我们需要渲染一千个三角形，那么把它们按一千个单独的网格进行渲染所花费的时间要远大于直接渲染一个包含了一千个三角形的网格。",{"type":14,"tag":91,"props":1226,"children":1227},{},[1228],{"type":20,"value":1229},"要想使用批处理，需要物体有相同的材质。这是因为，对于使用同一个材质的物体，它们的不同仅仅在于顶点数据的差别，我们可以把这些顶点数据合并在一起，再一起发送给GPU，就可以完成一次批处理。",{"type":14,"tag":91,"props":1231,"children":1232},{},[1233],{"type":20,"value":1234},"在unity中，有两种批处理：一是动态批处理，二是静态批处理。",{"type":14,"tag":22,"props":1236,"children":1237},{},[1238],{"type":20,"value":1239},"对于动态批处理，unity会自动完成，不需要我们进行操作，而且物体是可以移动的，但是动态批处理有许多限制条件。\n对于静态批处理，物体不可移动，但是限制条件很少。",{"type":14,"tag":22,"props":1241,"children":1242},{},[1243],{"type":14,"tag":62,"props":1244,"children":1245},{},[1246],{"type":20,"value":1247},"四、动态批处理",{"type":14,"tag":22,"props":1249,"children":1250},{},[1251],{"type":20,"value":1252},"原理：每一帧把可以进行批处理的模型网格进行合并，再把合并后模型数据传递给GPU，然后使用同一个材质对其渲染。",{"type":14,"tag":22,"props":1254,"children":1255},{},[1256],{"type":20,"value":1257},"限制：",{"type":14,"tag":87,"props":1259,"children":1260},{},[1261,1266,1271,1276],{"type":14,"tag":91,"props":1262,"children":1263},{},[1264],{"type":20,"value":1265},"顶点属性要小于900。例如，如果shader中需要使用顶点位置、法线和纹理坐标这三个顶点属性，那么要想让模型能够被动态批处理，它的顶点数目不能超过300。因此，优化策略就是shader的优化，少使用顶点属性，或者模型顶点数要尽可能少。",{"type":14,"tag":91,"props":1267,"children":1268},{},[1269],{"type":20,"value":1270},"多Pass的shader会中断批处理。",{"type":14,"tag":91,"props":1272,"children":1273},{},[1274],{"type":20,"value":1275},"在unity5中，动态批处理对于模型缩放的限制已经不存在了。",{"type":14,"tag":91,"props":1277,"children":1278},{},[1279],{"type":20,"value":1280},"使用光照纹理的物体需要小心处理。为了让这些物体可以被动态批处理，需要保证它们指向光照纹理中的同一位置。",{"type":14,"tag":22,"props":1282,"children":1283},{},[1284],{"type":14,"tag":62,"props":1285,"children":1286},{},[1287],{"type":20,"value":1288},"五、静态批处理",{"type":14,"tag":22,"props":1290,"children":1291},{},[1292],{"type":20,"value":1293},"原理：只在运行开始阶段，把需要进行静态批处理的模型合并到一个新的网格中，这意味着这些模型数据不可以在运行时刻被移动。",{"type":14,"tag":22,"props":1295,"children":1296},{},[1297],{"type":20,"value":1298},"优点：因为它只需要进行一次合并操作，因此比动态批处理更加高效。",{"type":14,"tag":22,"props":1300,"children":1301},{},[1302],{"type":20,"value":1303},"缺点：需要占用更多的内存来存储合并后的几何结构。",{"type":14,"tag":22,"props":1305,"children":1306},{},[1307],{"type":20,"value":1308},"操作：将Inspector面板右上角的Static勾选(实际上只需要勾选Batching Static即可)",{"type":14,"tag":22,"props":1310,"children":1311},{},[1312],{"type":20,"value":1313},"参考链接:",{"type":14,"tag":402,"props":1315,"children":1316},{},[1317],{"type":14,"tag":91,"props":1318,"children":1319},{},[1320],{"type":14,"tag":38,"props":1321,"children":1324},{"href":1322,"rel":1323},"https://connect.unity.com/p/dong-tai-he-pi-yuan-li-ji-ru-he-cheng-gong-he-pi?app=true",[42],[1325],{"type":20,"value":1326},"动态合批原理及如何成功合批 - Unity Connect",{"type":14,"tag":27,"props":1328,"children":1330},{"id":1329},"渲染统计窗口",[1331],{"type":20,"value":1329},{"type":14,"tag":22,"props":1333,"children":1334},{},[1335],{"type":14,"tag":52,"props":1336,"children":1338},{"alt":52,"src":1337},"/images/2020-09-10-optimizing-for-performance/20160721173928287",[],{"type":14,"tag":22,"props":1340,"children":1341},{},[1342],{"type":20,"value":1343},"Batches：相当于DrawCall",{"type":14,"tag":22,"props":1345,"children":1346},{},[1347],{"type":20,"value":1348},"Saved by batching：通过批处理节省的DrawCall",{"type":14,"tag":22,"props":1350,"children":1351},{},[1352],{"type":20,"value":1353},"SetPass calls：跟Shader中Pass的数量有关，Pass越多这个越大...它大致代表的是摄像机照射范围内，所有GameObject所包含的Material种类数量。（不完全准确，但是这样说易于理解）。假如有30种material，那这个SetpassCall的数值也会离这个30比较接近。这个值越大，肯定会使draw call 越来越大。",{"type":14,"tag":22,"props":1355,"children":1356},{},[1357],{"type":20,"value":1358},"影响DrawCall的因素：",{"type":14,"tag":87,"props":1360,"children":1361},{},[1362,1367],{"type":14,"tag":91,"props":1363,"children":1364},{},[1365],{"type":20,"value":1366},"Pass越多DrawCall越大。可以通过FrameDebugger来查看DrawCall，当然也可以用Profiler，但后者不能查看DrawCall的具体情况。",{"type":14,"tag":91,"props":1368,"children":1369},{},[1370],{"type":20,"value":1371},"不同材质的物体，无法通过静态批处理减少DC。但是静态批处理可以通过合并网格来提高性能。",{"type":14,"tag":27,"props":1373,"children":1375},{"id":1374},"unity-profiler",[1376],{"type":14,"tag":62,"props":1377,"children":1378},{},[1379],{"type":20,"value":1380},"Unity Profiler",{"type":14,"tag":22,"props":1382,"children":1383},{},[1384],{"type":14,"tag":52,"props":1385,"children":1387},{"alt":52,"src":1386},"/images/2020-09-10-optimizing-for-performance/20180715180958140",[],{"type":14,"tag":22,"props":1389,"children":1390},{},[1391,1393,1398,1400,1405],{"type":20,"value":1392},"在面板的下半部分显示了我们选中的profilers当前帧的详细内容，我们可以通过选择列标题，通过这一列的信息值来排序。\n在CPU usage profiler中的列表题分别为：\nTotal:当前任务的时间消耗占当前帧cpu消耗的时间比例。\nSelf:任务自身时间消耗占当前帧cpu消耗的时间比例。\nCalls:当前任务在当前帧内被调用的次数。\nGC Alloc:当前任务在当前帧内进行过内存回收和分配的次数。   ",{"type":14,"tag":62,"props":1394,"children":1395},{},[1396],{"type":20,"value":1397},"注意每帧都具有20B以上内存分配的选项 。",{"type":20,"value":1399},"\nTime ms:当前任务在当前帧内的耗时总时间。   ",{"type":14,"tag":62,"props":1401,"children":1402},{},[1403],{"type":20,"value":1404},"注意占用5ms以上的选项",{"type":20,"value":1406},"\nSelf ms:当前任务自身(不包含内部的子任务)时间消耗。",{"type":14,"tag":22,"props":1408,"children":1409},{},[1410],{"type":20,"value":1411},"在 Unity 的 CPU 性能分析器中，Overview 表有一个“GC Alloc”列。此列显示了在特定帧中的托管堆上分配的字节数(4)（__注意：__这与给定帧期间临时分配的字节数不同。性能分析器会显示特定帧中分配的字节数，不考虑在后续帧中是否重用了部分/全部已分配的内存）。启用“Deep Profiling”选项后，可以跟踪执行这些分配的方法。",{"type":14,"tag":22,"props":1413,"children":1414},{},[1415,1417,1424],{"type":20,"value":1416},"**Unity Profiler 不会跟踪在主线程之外发生的分配。**因此，“GC Alloc”列不能用于统计用户创建的线程中发生的托管分配。请将代码执行从单独线程切换到主线程以进行调试，或使用 ",{"type":14,"tag":38,"props":1418,"children":1421},{"href":1419,"rel":1420},"https://docs.unity3d.com/cn/2020.2/ScriptReference/Profiling.Profiler.BeginThreadProfiling.html",[42],[1422],{"type":20,"value":1423},"BeginThreadProfiling",{"type":20,"value":1425}," API 在时间轴性能分析器 (Timeline Profiler) 中显示例程。",{"title":7,"searchDepth":1427,"depth":1427,"links":1428},2,[1429,1436,1446,1447,1448,1449],{"id":29,"depth":1427,"text":29,"children":1430},[1431,1433,1434,1435],{"id":82,"depth":1432,"text":85},3,{"id":254,"depth":1432,"text":257},{"id":290,"depth":1432,"text":293},{"id":757,"depth":1432,"text":757},{"id":901,"depth":1427,"text":901,"children":1437},[1438,1439,1440,1441,1442,1443,1444,1445],{"id":906,"depth":1432,"text":909},{"id":931,"depth":1432,"text":934},{"id":980,"depth":1432,"text":983},{"id":1024,"depth":1432,"text":1027},{"id":1058,"depth":1432,"text":1061},{"id":1064,"depth":1432,"text":1067},{"id":1070,"depth":1432,"text":1073},{"id":1114,"depth":1432,"text":1117},{"id":1125,"depth":1427,"text":1128},{"id":1141,"depth":1427,"text":1144},{"id":1329,"depth":1427,"text":1329},{"id":1374,"depth":1427,"text":1380},"markdown","content:unity:2020-09-10-optimizing-for-performance.md","content","unity/2020-09-10-optimizing-for-performance.md","md","2020-09-10",[1457,1467,1594,1643,1695,1708,1820],{"title":1458,"_path":1459,"children":1460},"Art","/art",[1461,1464],{"title":1462,"_path":1463},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":1465,"_path":1466},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":1468,"_path":1469,"children":1470},"Dotnet","/dotnet",[1471,1474,1477,1480,1483,1486,1489,1492,1495,1498,1501,1504,1507,1510,1513,1516,1519,1522,1525,1528,1531,1534,1537,1540,1543,1546,1549,1552,1555,1558,1561,1564,1567,1570,1573,1576,1579,1582,1585,1588,1591],{"title":1472,"_path":1473},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":1475,"_path":1476},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":1478,"_path":1479},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":1481,"_path":1482},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":1484,"_path":1485},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":1487,"_path":1488},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":1490,"_path":1491},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":1493,"_path":1494},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":1496,"_path":1497},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":1499,"_path":1500},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":1502,"_path":1503},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":1505,"_path":1506},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":1508,"_path":1509},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":1511,"_path":1512},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":1514,"_path":1515},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":1517,"_path":1518},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":1520,"_path":1521},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":1523,"_path":1524},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":1526,"_path":1527},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":1529,"_path":1530},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":1532,"_path":1533},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":1535,"_path":1536},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":1538,"_path":1539},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":1541,"_path":1542},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":1544,"_path":1545},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":1547,"_path":1548},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":1550,"_path":1551},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":1553,"_path":1554},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":1556,"_path":1557},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":1559,"_path":1560},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":1562,"_path":1563},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":1565,"_path":1566},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":1568,"_path":1569},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":1571,"_path":1572},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":1574,"_path":1575},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":1577,"_path":1578},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":1580,"_path":1581},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":1583,"_path":1584},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":1586,"_path":1587},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":1589,"_path":1590},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":1592,"_path":1593},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":1595,"_path":1596,"children":1597},"Game","/game",[1598,1601,1604,1607,1610,1613,1616,1619,1622,1625,1628,1631,1634,1637,1640],{"title":1599,"_path":1600},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":1602,"_path":1603},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":1605,"_path":1606},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":1608,"_path":1609},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":1611,"_path":1612},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":1614,"_path":1615},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":1617,"_path":1618},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":1620,"_path":1621},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":1623,"_path":1624},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":1626,"_path":1627},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":1629,"_path":1630},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":1632,"_path":1633},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":1635,"_path":1636},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":1638,"_path":1639},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":1641,"_path":1642},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":1644,"_path":1645,"children":1646},"Gyj","/gyj",[1647,1650,1653,1656,1659,1662,1665,1668,1671,1674,1677,1680,1683,1686,1689,1692],{"title":1648,"_path":1649},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":1651,"_path":1652},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":1654,"_path":1655},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":1657,"_path":1658},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1660,"_path":1661},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1663,"_path":1664},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1666,"_path":1667},"玩法","/gyj/2022-08-22-wanfa",{"title":1669,"_path":1670},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1672,"_path":1673},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1675,"_path":1676},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1678,"_path":1679},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1681,"_path":1682},"门派内容相关","/gyj/2022-11-17-sect",{"title":1684,"_path":1685},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1687,"_path":1688},"种植","/gyj/2022-12-01-zhongzhi",{"title":1690,"_path":1691},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1693,"_path":1694},"跑商","/gyj/2023-11-01-paoshang",{"title":1696,"_path":1697,"children":1698},"Js","/js",[1699,1702,1705],{"title":1700,"_path":1701},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1703,"_path":1704},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1706,"_path":1707},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1709,"_path":1710,"children":1711},"Tool","/tool",[1712,1715,1718,1721,1724,1727,1730,1733,1736,1739,1742,1745,1748,1751,1754,1757,1760,1763,1766,1769,1772,1775,1778,1781,1784,1787,1790,1793,1796,1799,1802,1805,1808,1811,1814,1817],{"title":1713,"_path":1714},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1716,"_path":1717},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1719,"_path":1720},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1722,"_path":1723},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1725,"_path":1726},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1728,"_path":1729},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1731,"_path":1732},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1734,"_path":1735},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1737,"_path":1738},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1740,"_path":1741},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1743,"_path":1744},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1746,"_path":1747},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1749,"_path":1750},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1752,"_path":1753},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1755,"_path":1756},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1758,"_path":1759},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1761,"_path":1762},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1764,"_path":1765},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1767,"_path":1768},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1770,"_path":1771},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1773,"_path":1774},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1776,"_path":1777},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1779,"_path":1780},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1782,"_path":1783},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1785,"_path":1786},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1788,"_path":1789},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1791,"_path":1792},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1794,"_path":1795},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1797,"_path":1798},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1800,"_path":1801},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1803,"_path":1804},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1806,"_path":1807},"rider的使用","/tool/2022-08-02-rider-use",{"title":1809,"_path":1810},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1812,"_path":1813},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1815,"_path":1816},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1818,"_path":1819},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1821,"_path":1822,"children":1823},"Unity","/unity",[1824,1827,1830,1833,1836,1839,1842,1845,1848,1851,1854,1857,1860,1863,1866,1869,1872,1875,1878,1881,1884,1887,1890,1893,1896,1899,1902,1905,1908,1911,1914,1917,1920,1923,1926,1927,1930,1933,1936,1939,1942,1945,1948,1951,1954,1957,1960,1963,1966,1969,1972,1975,1978,1981,1984,1987,1990,1993,1996,1999,2002,2005,2008,2011,2014,2017,2020,2023,2026,2029,2032,2035],{"title":1825,"_path":1826},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1828,"_path":1829},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1831,"_path":1832},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1834,"_path":1835},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1837,"_path":1838},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1840,"_path":1841},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1843,"_path":1844},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1846,"_path":1847},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1849,"_path":1850},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1852,"_path":1853},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":1855,"_path":1856},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":1858,"_path":1859},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1861,"_path":1862},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1864,"_path":1865},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1867,"_path":1868},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1870,"_path":1871},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1873,"_path":1874},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1876,"_path":1877},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1879,"_path":1880},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1882,"_path":1883},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1885,"_path":1886},"技能系统","/unity/2020-02-15-skill-system",{"title":1888,"_path":1889},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1891,"_path":1892},"角色状态设计","/unity/2020-02-17-character-states",{"title":1894,"_path":1895},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1897,"_path":1898},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1900,"_path":1901},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1903,"_path":1904},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1906,"_path":1907},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1909,"_path":1910},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1912,"_path":1913},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1915,"_path":1916},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1918,"_path":1919},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1921,"_path":1922},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1924,"_path":1925},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":8,"_path":4},{"title":1928,"_path":1929},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1931,"_path":1932},"unity的addressables","/unity/2020-09-12-addressables",{"title":1934,"_path":1935},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1937,"_path":1938},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1940,"_path":1941},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1943,"_path":1944},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1946,"_path":1947},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1949,"_path":1950},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1952,"_path":1953},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1955,"_path":1956},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1958,"_path":1959},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1961,"_path":1962},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1964,"_path":1965},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1967,"_path":1968},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1970,"_path":1971},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1973,"_path":1974},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1976,"_path":1977},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1979,"_path":1980},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1982,"_path":1983},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1985,"_path":1986},"ability","/unity/2020-11-16-dotssample",{"title":1988,"_path":1989},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1991,"_path":1992},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1994,"_path":1995},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1997,"_path":1998},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":2000,"_path":2001},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":2003,"_path":2004},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":2006,"_path":2007},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":2009,"_path":2010},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":2012,"_path":2013},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":2015,"_path":2016},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":2018,"_path":2019},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":2021,"_path":2022},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":2024,"_path":2025},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":2027,"_path":2028},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":2030,"_path":2031},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":2033,"_path":2034},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":2036,"_path":2037},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039751]