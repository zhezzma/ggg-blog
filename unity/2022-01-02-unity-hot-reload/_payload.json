[{"data":1,"prerenderedAt":763},["Reactive",2],{"content-query-JkbU66u0Us":3,"content-navigation-8C37fagqQL":181},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":175,"_id":176,"_source":177,"_file":178,"_extension":179,"date":180},"/unity/2022-01-02-unity-hot-reload","unity",false,"","关于unity的热重载的研究","Roslyn C# - Runtime Compiler通过FileSystemWatcher监控目录检查改变的文件unity的FileSystemWatcher有点问题,子目录下文件返回的路径是错的.所以需要先存储下cs文件进行索引public RealtimeScriptWatcher(ScriptDomain domain, string folderPath)\n{\n    this.domain = domain;\n    Files = new Dictionary\u003Cstring, string>();\n    string[] fileEntries = Directory.Get",{"type":11,"children":12,"toc":165},"root",[13,22,29,35,48,53,62,67,76,81,86,92,123,128,137,142,151,156],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"roslyn-c-runtime-compiler",[19],{"type":20,"value":21},"text","Roslyn C# - Runtime Compiler",{"type":14,"tag":23,"props":24,"children":26},"h3",{"id":25},"通过filesystemwatcher监控目录检查改变的文件",[27],{"type":20,"value":28},"通过FileSystemWatcher监控目录检查改变的文件",{"type":14,"tag":30,"props":31,"children":32},"p",{},[33],{"type":20,"value":34},"unity的FileSystemWatcher有点问题,子目录下文件返回的路径是错的.所以需要先存储下cs文件进行索引",{"type":14,"tag":36,"props":37,"children":42},"pre",{"className":38,"code":40,"language":41,"meta":7},[39],"language-csharp","public RealtimeScriptWatcher(ScriptDomain domain, string folderPath)\n{\n    this.domain = domain;\n    Files = new Dictionary\u003Cstring, string>();\n    string[] fileEntries = Directory.GetFiles(folderPath,\"*.cs\", SearchOption.AllDirectories);\n    foreach (var item in fileEntries)\n    {\n        var key = Path.GetFileName(item);\n        if (Files.TryGetValue(key,out var f) == false)\n        {\n            Files.Add(key, item);\n        }\n        else\n        {\n            Debug.LogError($\"{f}和{item}的文件名相同\");\n        }\n    }\n","csharp",[43],{"type":14,"tag":44,"props":45,"children":46},"code",{"__ignoreMap":7},[47],{"type":20,"value":40},{"type":14,"tag":23,"props":49,"children":51},{"id":50},"编译修改的文件并重新加载",[52],{"type":20,"value":50},{"type":14,"tag":36,"props":54,"children":57},{"className":55,"code":56,"language":41,"meta":7},[39],"  // Recompile the script\n    ScriptAssembly asm = domain.CompileAndLoadFile(path, securityMode);\n    \n    // Check for success\n    if(asm == null)\n    {\n        domain.LogCompilerOutputToConsole();\n        return;\n    }\n    \n    // Find the type for the changed source file\n    Type mainMonoType = GetMainMonoTypeForSourceFile(path);\n    \n    // Find type with matching full name\n    ScriptType reloadType = asm.FindType(mainMonoType);\n",[58],{"type":14,"tag":44,"props":59,"children":60},{"__ignoreMap":7},[61],{"type":20,"value":56},{"type":14,"tag":23,"props":63,"children":65},{"id":64},"替换场景中的monobehavior",[66],{"type":20,"value":64},{"type":14,"tag":36,"props":68,"children":71},{"className":69,"code":70,"language":41,"meta":7},[39],"public static bool ReplaceScriptsForScene(Scene targetScene, ScriptType scriptType, out ModScriptReplacerReport report, ScriptReplacerOptions options = ScriptReplacerOptions.Default)\n{\n    bool failed = false;\n    report = new ModScriptReplacerReport();\n\n    bool includeInactive = (options & ScriptReplacerOptions.ReplaceDisabledScripts) != 0;\n\n    foreach (GameObject gameObject in targetScene.GetRootGameObjects())\n    {\n        foreach (MonoBehaviour behaviour in gameObject.GetComponentsInChildren\u003CMonoBehaviour>(includeInactive))\n        {\n            if (ReplaceScriptBehaviourImpl(behaviour, scriptType, ref report, options) == false)\n                failed = true;\n        }\n    }\n    return failed == false;\n}\n",[72],{"type":14,"tag":44,"props":73,"children":74},{"__ignoreMap":7},[75],{"type":20,"value":70},{"type":14,"tag":30,"props":77,"children":78},{},[79],{"type":20,"value":80},"通过以上可以看到明显的缺点只支持monobehavior",{"type":14,"tag":30,"props":82,"children":83},{},[84],{"type":20,"value":85},"若想支持非monobehavior可能需要自己进行处理",{"type":14,"tag":15,"props":87,"children":89},{"id":88},"et的热重载",[90],{"type":20,"value":91},"ET的热重载",{"type":14,"tag":93,"props":94,"children":95},"ul",{},[96,102,113,118],{"type":14,"tag":97,"props":98,"children":99},"li",{},[100],{"type":20,"value":101},"分离项目到不同的dll中",{"type":14,"tag":97,"props":103,"children":104},{},[105,107],{"type":20,"value":106},"通过代码加载dll",{"type":14,"tag":44,"props":108,"children":110},{"className":109},[],[111],{"type":20,"value":112},"System.Reflection.Assembly.Load(assBytes, pdbBytes)",{"type":14,"tag":97,"props":114,"children":115},{},[116],{"type":20,"value":117},"首先进行编译dll",{"type":14,"tag":97,"props":119,"children":120},{},[121],{"type":20,"value":122},"按R热加载后,通过反射,对现有的对象进行销毁,然后重新创建",{"type":14,"tag":30,"props":124,"children":125},{},[126],{"type":20,"value":127},"关键代码:",{"type":14,"tag":36,"props":129,"children":132},{"className":130,"code":131,"language":41,"meta":7},[39],"\npublic class CodeLoader: IDisposable\n{\n    public static CodeLoader Instance = new CodeLoader();\n\n    public Action Update;\n    public Action LateUpdate;\n    public Action OnApplicationQuit;\n\n    private Assembly assembly;\n\n    private ILRuntime.Runtime.Enviorment.AppDomain appDomain;\n    \n    private Type[] allTypes;\n    \n    public CodeMode CodeMode { get; set; }\n\n    private CodeLoader()\n    {\n    }\n\n    public void Dispose()\n    {\n        this.appDomain?.Dispose();\n    }\n    \n    public void Start()\n    {\n        switch (this.CodeMode)\n        {\n            case CodeMode.Mono:\n            {\n                Dictionary\u003Cstring, UnityEngine.Object> dictionary = AssetsBundleHelper.LoadBundle(\"code.unity3d\");\n                byte[] assBytes = ((TextAsset)dictionary[\"Code.dll\"]).bytes;\n                byte[] pdbBytes = ((TextAsset)dictionary[\"Code.pdb\"]).bytes;\n                \n                assembly = Assembly.Load(assBytes, pdbBytes);\n                this.allTypes = assembly.GetTypes();\n                IStaticMethod start = new MonoStaticMethod(assembly, \"ET.Entry\", \"Start\");\n                start.Run();\n                break;\n            }\n            case CodeMode.ILRuntime:\n            {\n                Dictionary\u003Cstring, UnityEngine.Object> dictionary = AssetsBundleHelper.LoadBundle(\"code.unity3d\");\n                byte[] assBytes = ((TextAsset)dictionary[\"Code.dll\"]).bytes;\n                byte[] pdbBytes = ((TextAsset)dictionary[\"Code.pdb\"]).bytes;\n                \n                //byte[] assBytes = File.ReadAllBytes(Path.Combine(\"../Unity/\", Define.BuildOutputDir, \"Code.dll\"));\n                //byte[] pdbBytes = File.ReadAllBytes(Path.Combine(\"../Unity/\", Define.BuildOutputDir, \"Code.pdb\"));\n            \n                appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n                MemoryStream assStream = new MemoryStream(assBytes);\n                MemoryStream pdbStream = new MemoryStream(pdbBytes);\n                appDomain.LoadAssembly(assStream, pdbStream, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n\n                ILHelper.InitILRuntime(appDomain);\n\n                this.allTypes = appDomain.LoadedTypes.Values.Select(x => x.ReflectionType).ToArray();\n                IStaticMethod start = new ILStaticMethod(appDomain, \"ET.Entry\", \"Start\", 0);\n                start.Run();\n                break;\n            }\n            case CodeMode.Reload:\n            {\n                byte[] assBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, \"Data.dll\"));\n                byte[] pdbBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, \"Data.pdb\"));\n                \n                assembly = Assembly.Load(assBytes, pdbBytes);\n                this.LoadLogic();\n                IStaticMethod start = new MonoStaticMethod(assembly, \"ET.Entry\", \"Start\");\n                start.Run();\n                break;\n            }\n        }\n    }\n\n    // 热重载调用下面三个方法\n    // CodeLoader.Instance.LoadLogic();\n    // Game.EventSystem.Add(CodeLoader.Instance.GetTypes());\n    // Game.EventSystem.Load();\n    public void LoadLogic()\n    {\n        if (this.CodeMode != CodeMode.Reload)\n        {\n            throw new Exception(\"CodeMode != Reload!\");\n        }\n        \n        // 傻屌Unity在这里搞了个傻逼优化，认为同一个路径的dll，返回的程序集就一样。所以这里每次编译都要随机名字\n        string[] logicFiles = Directory.GetFiles(Define.BuildOutputDir, \"Logic_*.dll\");\n        if (logicFiles.Length != 1)\n        {\n            throw new Exception(\"Logic dll count != 1\");\n        }\n\n        string logicName = Path.GetFileNameWithoutExtension(logicFiles[0]);\n        byte[] assBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, $\"{logicName}.dll\"));\n        byte[] pdbBytes = File.ReadAllBytes(Path.Combine(Define.BuildOutputDir, $\"{logicName}.pdb\"));\n\n        Assembly hotfixAssembly = Assembly.Load(assBytes, pdbBytes);\n        \n        List\u003CType> listType = new List\u003CType>();\n        listType.AddRange(this.assembly.GetTypes());\n        listType.AddRange(hotfixAssembly.GetTypes());\n        this.allTypes = listType.ToArray();\n    }\n\n    public Type[] GetTypes()\n    {\n        return this.allTypes;\n    }\n}\n",[133],{"type":14,"tag":44,"props":134,"children":135},{"__ignoreMap":7},[136],{"type":20,"value":131},{"type":14,"tag":30,"props":138,"children":139},{},[140],{"type":20,"value":141},"按下f8编译dll",{"type":14,"tag":36,"props":143,"children":146},{"className":144,"code":145,"language":41,"meta":7},[39],"public static class BuildAssemblieEditor\n{\n        [MenuItem(\"Tools/BuildLogic _F8\")]\n        public static void BuildLogic()\n        {\n            string[] logicFiles = Directory.GetFiles(Define.BuildOutputDir, \"Logic_*\");\n            foreach (string file in logicFiles)\n            {\n                File.Delete(file);\n            }\n            \n            int random = RandomHelper.RandomNumber(100000000, 999999999);\n            string logicFile = $\"Logic_{random}\";\n            \n            BuildAssemblieEditor.BuildMuteAssembly(logicFile, new []\n            {\n                \"Codes/Hotfix/\",\n                \"Codes/HotfixView/\",\n            }, new[]{Path.Combine(Define.BuildOutputDir, \"Data.dll\")}, CodeOptimization.Debug);\n        }\n\n\n    private static void BuildMuteAssembly(string assemblyName, string[] CodeDirectorys, string[] additionalReferences, CodeOptimization codeOptimization)\n        {\n            List\u003Cstring> scripts = new List\u003Cstring>();\n            for (int i = 0; i \u003C CodeDirectorys.Length; i++)\n            {\n                DirectoryInfo dti = new DirectoryInfo(CodeDirectorys[i]);\n                FileInfo[] fileInfos = dti.GetFiles(\"*.cs\", System.IO.SearchOption.AllDirectories);\n                for (int j = 0; j \u003C fileInfos.Length; j++)\n                {\n                    scripts.Add(fileInfos[j].FullName);\n                }\n            }\n\n            string dllPath = Path.Combine(Define.BuildOutputDir, $\"{assemblyName}.dll\");\n            string pdbPath = Path.Combine(Define.BuildOutputDir, $\"{assemblyName}.pdb\");\n            File.Delete(dllPath);\n            File.Delete(pdbPath);\n\n            Directory.CreateDirectory(Define.BuildOutputDir);\n\n            AssemblyBuilder assemblyBuilder = new AssemblyBuilder(dllPath, scripts.ToArray());\n            \n            //启用UnSafe\n            //assemblyBuilder.compilerOptions.AllowUnsafeCode = true;\n\n            BuildTargetGroup buildTargetGroup = BuildPipeline.GetBuildTargetGroup(EditorUserBuildSettings.activeBuildTarget);\n\n            assemblyBuilder.compilerOptions.CodeOptimization = codeOptimization;\n            assemblyBuilder.compilerOptions.ApiCompatibilityLevel = PlayerSettings.GetApiCompatibilityLevel(buildTargetGroup);\n            // assemblyBuilder.compilerOptions.ApiCompatibilityLevel = ApiCompatibilityLevel.NET_4_6;\n\n            assemblyBuilder.additionalReferences = additionalReferences;\n            \n            assemblyBuilder.flags = AssemblyBuilderFlags.None;\n            //AssemblyBuilderFlags.None                 正常发布\n            //AssemblyBuilderFlags.DevelopmentBuild     开发模式打包\n            //AssemblyBuilderFlags.EditorAssembly       编辑器状态\n            assemblyBuilder.referencesOptions = ReferencesOptions.UseEngineModules;\n\n            assemblyBuilder.buildTarget = EditorUserBuildSettings.activeBuildTarget;\n\n            assemblyBuilder.buildTargetGroup = buildTargetGroup;\n\n            assemblyBuilder.buildStarted += delegate(string assemblyPath) { Debug.LogFormat(\"build start：\" + assemblyPath); };\n\n            assemblyBuilder.buildFinished += delegate(string assemblyPath, CompilerMessage[] compilerMessages)\n            {\n                int errorCount = compilerMessages.Count(m => m.type == CompilerMessageType.Error);\n                int warningCount = compilerMessages.Count(m => m.type == CompilerMessageType.Warning);\n\n                Debug.LogFormat(\"Warnings: {0} - Errors: {1}\", warningCount, errorCount);\n\n                if (warningCount > 0)\n                {\n                    Debug.LogFormat(\"有{0}个Warning!!!\", warningCount);\n                }\n\n                if (errorCount > 0)\n                {\n                    for (int i = 0; i \u003C compilerMessages.Length; i++)\n                    {\n                        if (compilerMessages[i].type == CompilerMessageType.Error)\n                        {\n                            Debug.LogError(compilerMessages[i].message);\n                        }\n                    }\n                }\n            };\n            \n            //开始构建\n            if (!assemblyBuilder.Build())\n            {\n                Debug.LogErrorFormat(\"build fail：\" + assemblyBuilder.assemblyPath);\n                return;\n            }\n        }\n",[147],{"type":14,"tag":44,"props":148,"children":149},{"__ignoreMap":7},[150],{"type":20,"value":145},{"type":14,"tag":30,"props":152,"children":153},{},[154],{"type":20,"value":155},"按下R重载",{"type":14,"tag":36,"props":157,"children":160},{"className":158,"code":159,"language":41,"meta":7},[39],"    \npublic static class OperaComponentSystem\n{\n    public static void Update()\n    { \n        if (Input.GetKeyDown(KeyCode.R))\n        {\n            CodeLoader.Instance.LoadLogic();\n            Game.EventSystem.Add(CodeLoader.Instance.GetTypes());\n            Game.EventSystem.Load();\n            Log.Debug(\"hot reload success!\");\n        }\n    }\n}\n",[161],{"type":14,"tag":44,"props":162,"children":163},{"__ignoreMap":7},[164],{"type":20,"value":159},{"title":7,"searchDepth":166,"depth":166,"links":167},2,[168,174],{"id":17,"depth":166,"text":21,"children":169},[170,172,173],{"id":25,"depth":171,"text":28},3,{"id":50,"depth":171,"text":50},{"id":64,"depth":171,"text":64},{"id":88,"depth":166,"text":91},"markdown","content:unity:2022-01-02-unity-hot-reload.md","content","unity/2022-01-02-unity-hot-reload.md","md","2022-01-02",[182,192,319,368,420,433,545],{"title":183,"_path":184,"children":185},"Art","/art",[186,189],{"title":187,"_path":188},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":190,"_path":191},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":193,"_path":194,"children":195},"Dotnet","/dotnet",[196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316],{"title":197,"_path":198},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":200,"_path":201},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":203,"_path":204},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":206,"_path":207},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":209,"_path":210},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":212,"_path":213},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":215,"_path":216},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":218,"_path":219},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":221,"_path":222},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":224,"_path":225},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":227,"_path":228},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":230,"_path":231},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":233,"_path":234},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":236,"_path":237},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":239,"_path":240},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":242,"_path":243},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":245,"_path":246},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":248,"_path":249},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":251,"_path":252},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":254,"_path":255},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":257,"_path":258},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":260,"_path":261},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":263,"_path":264},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":266,"_path":267},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":269,"_path":270},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":272,"_path":273},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":275,"_path":276},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":278,"_path":279},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":281,"_path":282},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":284,"_path":285},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":287,"_path":288},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":290,"_path":291},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":293,"_path":294},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":296,"_path":297},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":299,"_path":300},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":302,"_path":303},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":305,"_path":306},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":308,"_path":309},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":311,"_path":312},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":314,"_path":315},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":317,"_path":318},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":320,"_path":321,"children":322},"Game","/game",[323,326,329,332,335,338,341,344,347,350,353,356,359,362,365],{"title":324,"_path":325},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":327,"_path":328},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":330,"_path":331},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":333,"_path":334},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":336,"_path":337},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":339,"_path":340},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":342,"_path":343},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":345,"_path":346},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":348,"_path":349},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":351,"_path":352},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":354,"_path":355},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":357,"_path":358},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":360,"_path":361},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":363,"_path":364},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":366,"_path":367},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":369,"_path":370,"children":371},"Gyj","/gyj",[372,375,378,381,384,387,390,393,396,399,402,405,408,411,414,417],{"title":373,"_path":374},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":376,"_path":377},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":379,"_path":380},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":382,"_path":383},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":385,"_path":386},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":388,"_path":389},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":391,"_path":392},"玩法","/gyj/2022-08-22-wanfa",{"title":394,"_path":395},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":397,"_path":398},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":400,"_path":401},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":403,"_path":404},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":406,"_path":407},"门派内容相关","/gyj/2022-11-17-sect",{"title":409,"_path":410},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":412,"_path":413},"种植","/gyj/2022-12-01-zhongzhi",{"title":415,"_path":416},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":418,"_path":419},"跑商","/gyj/2023-11-01-paoshang",{"title":421,"_path":422,"children":423},"Js","/js",[424,427,430],{"title":425,"_path":426},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":428,"_path":429},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":431,"_path":432},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":434,"_path":435,"children":436},"Tool","/tool",[437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542],{"title":438,"_path":439},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":441,"_path":442},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":444,"_path":445},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":447,"_path":448},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":450,"_path":451},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":453,"_path":454},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":456,"_path":457},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":459,"_path":460},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":462,"_path":463},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":465,"_path":466},"mac下brew 使用","/tool/2020-01-13-brew",{"title":468,"_path":469},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":471,"_path":472},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":474,"_path":475},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":477,"_path":478},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":480,"_path":481},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":483,"_path":484},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":486,"_path":487},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":489,"_path":490},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":492,"_path":493},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":495,"_path":496},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":498,"_path":499},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":501,"_path":502},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":504,"_path":505},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":507,"_path":508},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":510,"_path":511},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":513,"_path":514},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":516,"_path":517},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":519,"_path":520},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":522,"_path":523},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":525,"_path":526},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":528,"_path":529},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":531,"_path":532},"rider的使用","/tool/2022-08-02-rider-use",{"title":534,"_path":535},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":537,"_path":538},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":540,"_path":541},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":543,"_path":544},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":546,"_path":547,"children":548},"Unity","/unity",[549,552,555,558,561,564,567,570,573,576,579,582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,754,757,760],{"title":550,"_path":551},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":553,"_path":554},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":556,"_path":557},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":559,"_path":560},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":562,"_path":563},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":565,"_path":566},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":568,"_path":569},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":571,"_path":572},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":574,"_path":575},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":577,"_path":578},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":580,"_path":581},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":583,"_path":584},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":586,"_path":587},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":589,"_path":590},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":592,"_path":593},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":595,"_path":596},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":598,"_path":599},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":601,"_path":602},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":604,"_path":605},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":607,"_path":608},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":610,"_path":611},"技能系统","/unity/2020-02-15-skill-system",{"title":613,"_path":614},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":616,"_path":617},"角色状态设计","/unity/2020-02-17-character-states",{"title":619,"_path":620},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":622,"_path":623},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":625,"_path":626},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":628,"_path":629},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":631,"_path":632},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":634,"_path":635},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":637,"_path":638},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":640,"_path":641},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":643,"_path":644},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":646,"_path":647},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":649,"_path":650},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":652,"_path":653},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":655,"_path":656},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":658,"_path":659},"unity的addressables","/unity/2020-09-12-addressables",{"title":661,"_path":662},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":664,"_path":665},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":667,"_path":668},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":670,"_path":671},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":673,"_path":674},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":676,"_path":677},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":679,"_path":680},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":682,"_path":683},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":685,"_path":686},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":688,"_path":689},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":691,"_path":692},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":694,"_path":695},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":697,"_path":698},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":700,"_path":701},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":703,"_path":704},"简单保存工具","/unity/2020-11-13-simple-save",{"title":706,"_path":707},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":709,"_path":710},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":712,"_path":713},"ability","/unity/2020-11-16-dotssample",{"title":715,"_path":716},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":718,"_path":719},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":721,"_path":722},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":724,"_path":725},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":727,"_path":728},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":730,"_path":731},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":733,"_path":734},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":736,"_path":737},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":739,"_path":740},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":742,"_path":743},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":745,"_path":746},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":748,"_path":749},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":751,"_path":752},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":8,"_path":4},{"title":755,"_path":756},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":758,"_path":759},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":761,"_path":762},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038760]