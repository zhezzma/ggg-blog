[{"data":1,"prerenderedAt":1170},["Reactive",2],{"content-query-IQoIcV4iKk":3,"content-navigation-8C37fagqQL":588},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":582,"_id":583,"_source":584,"_file":585,"_extension":586,"date":587},"/unity/2020-11-18-netcode-sourcecode","unity",false,"","netcode源代码解读","NetworkStreamReceiveSystem客户端连接服务端  ,服务端创建NetworkIdComponent客户端添加NetworkStreamInGame组件,并通过rpc 发送GoInGameRequest请求服务端接收到请求后,实例化player为player添加GhostOwnerComponent初始化player添加一些其他不需要同步的组件为connection添加NetworkStreamInGame组件为connection设置CommandTargetComponent客户端根据player独有的组件特性,查找已经被ghost同步过来的实体比对NetworkIdC",{"type":11,"children":12,"toc":573},"root",[13,22,113,119,124,129,134,139,144,149,158,163,168,173,178,183,188,193,198,203,208,213,218,223,228,233,238,243,248,253,258,264,269,274,279,289,294,302,307,315,320,328,333,338,343,348,355,360,365,373,378,386,391,399,404,409,417,422,430,435,441,446,454,459,464,469,477,482,487,493,498,503,508,514,519,527,532,540,545,550,555,560,565],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"networkstreamreceivesystem",[19],{"type":20,"value":21},"text","NetworkStreamReceiveSystem",{"type":14,"tag":23,"props":24,"children":25},"ol",{},[26,32,37,66,89,94],{"type":14,"tag":27,"props":28,"children":29},"li",{},[30],{"type":20,"value":31},"客户端连接服务端  ,服务端创建NetworkIdComponent",{"type":14,"tag":27,"props":33,"children":34},{},[35],{"type":20,"value":36},"客户端添加NetworkStreamInGame组件,并通过rpc 发送GoInGameRequest请求",{"type":14,"tag":27,"props":38,"children":39},{},[40,42],{"type":20,"value":41},"服务端接收到请求后,实例化player",{"type":14,"tag":43,"props":44,"children":45},"ul",{},[46,51,56,61],{"type":14,"tag":27,"props":47,"children":48},{},[49],{"type":20,"value":50},"为player添加GhostOwnerComponent",{"type":14,"tag":27,"props":52,"children":53},{},[54],{"type":20,"value":55},"初始化player添加一些其他不需要同步的组件",{"type":14,"tag":27,"props":57,"children":58},{},[59],{"type":20,"value":60},"为connection添加NetworkStreamInGame组件",{"type":14,"tag":27,"props":62,"children":63},{},[64],{"type":20,"value":65},"为connection设置CommandTargetComponent",{"type":14,"tag":27,"props":67,"children":68},{},[69,71],{"type":20,"value":70},"客户端根据player独有的组件特性,查找已经被ghost同步过来的实体",{"type":14,"tag":43,"props":72,"children":73},{},[74,79,84],{"type":14,"tag":27,"props":75,"children":76},{},[77],{"type":20,"value":78},"比对NetworkIdComponent和GhostOwnerComponent的id,判断是否是localPlayer",{"type":14,"tag":27,"props":80,"children":81},{},[82],{"type":20,"value":83},"对localplayer进行初始化",{"type":14,"tag":27,"props":85,"children":86},{},[87],{"type":20,"value":88},"为connection设置CommandTargetComponent为localplayer",{"type":14,"tag":27,"props":90,"children":91},{},[92],{"type":20,"value":93},"客户端使用CommandTargetComponent的targetEntity进行command发送",{"type":14,"tag":27,"props":95,"children":96},{},[97,99],{"type":20,"value":98},"客户端和服务端对传送的command同时使用PredictedGhostComponent进行预测????",{"type":14,"tag":43,"props":100,"children":101},{},[102],{"type":14,"tag":27,"props":103,"children":104},{},[105,107,111],{"type":20,"value":106},"预测不是发生在客户端的吗???貌似netcode服务端也做了预测",{"type":14,"tag":108,"props":109,"children":110},"br",{},[],{"type":20,"value":112},"在服务器上，预测循环始终仅运行一次，并且不会更新TimeData结构，因为它已经正确。它仍然设置GhostPredictionSystemGroup.PredictingTick以确保可以在客户端和服务器上运行完全相同的代码。",{"type":14,"tag":114,"props":115,"children":116},"p",{},[117],{"type":20,"value":118},"插值 是针对其他玩家的本地显示...预测是针对自己操作的角色,最后从服务器校正",{"type":14,"tag":114,"props":120,"children":121},{},[122],{"type":20,"value":123},"延迟补偿是服务器在做的一件事情..",{"type":14,"tag":114,"props":125,"children":126},{},[127],{"type":20,"value":128},"GhostReceiveSystem  接收快照",{"type":14,"tag":114,"props":130,"children":131},{},[132],{"type":20,"value":133},"GhostUpdateSystem  应用快照     设置了predictionStartTick和AppliedTick",{"type":14,"tag":114,"props":135,"children":136},{},[137],{"type":20,"value":138},"GhostPredictionSystemGroup   设置了 PredictingTick ,服务端永远为ServerSimulationSystemGroup.servertick",{"type":14,"tag":114,"props":140,"children":141},{},[142],{"type":20,"value":143},"=======================================================================",{"type":14,"tag":114,"props":145,"children":146},{},[147],{"type":20,"value":148},"客户端的servertick在不同的两帧之间可能是相同的",{"type":14,"tag":114,"props":150,"children":151},{},[152],{"type":14,"tag":153,"props":154,"children":157},"img",{"alt":155,"src":156},"image-20201206011918426","/images/2020-11-18-netcode-sourcecode/image-20201206011918426.png",[],{"type":14,"tag":114,"props":159,"children":160},{},[161],{"type":20,"value":162},"servertick    235",{"type":14,"tag":114,"props":164,"children":165},{},[166],{"type":20,"value":167},"PredictingTick    230",{"type":14,"tag":114,"props":169,"children":170},{},[171],{"type":20,"value":172},"PredictingTick    231",{"type":14,"tag":114,"props":174,"children":175},{},[176],{"type":20,"value":177},"PredictingTick    232",{"type":14,"tag":114,"props":179,"children":180},{},[181],{"type":20,"value":182},"PredictingTick    233",{"type":14,"tag":114,"props":184,"children":185},{},[186],{"type":20,"value":187},"PredictingTick    234",{"type":14,"tag":114,"props":189,"children":190},{},[191],{"type":20,"value":192},"PredictingTick    235",{"type":14,"tag":114,"props":194,"children":195},{},[196],{"type":20,"value":197},"servertick    240  因为跑预测所以这里可能过了好几帧servertick这里不是236",{"type":14,"tag":114,"props":199,"children":200},{},[201],{"type":20,"value":202},"PredictingTick    240  //自己先跑一下",{"type":14,"tag":114,"props":204,"children":205},{},[206],{"type":20,"value":207},"servertick    240 //又可能tick增长时间还没有过",{"type":14,"tag":114,"props":209,"children":210},{},[211],{"type":20,"value":212},"PredictingTick    238",{"type":14,"tag":114,"props":214,"children":215},{},[216],{"type":20,"value":217},"PredictingTick    239",{"type":14,"tag":114,"props":219,"children":220},{},[221],{"type":20,"value":222},"PredictingTick    240",{"type":14,"tag":114,"props":224,"children":225},{},[226],{"type":20,"value":227},"实际上没多大复杂的事情..客户端发送命令给服务端,服务端处理后将tick和数据同步给客户端...",{"type":14,"tag":114,"props":229,"children":230},{},[231],{"type":20,"value":232},"客户端拿到数据..该预测的预测..该插值的插值...",{"type":14,"tag":114,"props":234,"children":235},{},[236],{"type":20,"value":237},"然后还需要处理这帧的自己的命令...",{"type":14,"tag":114,"props":239,"children":240},{},[241],{"type":20,"value":242},"客户端:",{"type":14,"tag":114,"props":244,"children":245},{},[246],{"type":20,"value":247},"Ghost数据(服务端传送的同步)--预测---输入命令--发送命令给服务端---处理命令----覆盖同步数据(一般是覆盖自己的)--应用数据(位移,动画等)",{"type":14,"tag":114,"props":249,"children":250},{},[251],{"type":20,"value":252},"服务端:",{"type":14,"tag":114,"props":254,"children":255},{},[256],{"type":20,"value":257},"服务端接收到命令---处理命令----写入Ghost数据(同步)--应用数据(位移,动画等)",{"type":14,"tag":259,"props":260,"children":262},"h2",{"id":261},"预测",[263],{"type":20,"value":261},{"type":14,"tag":114,"props":265,"children":266},{},[267],{"type":20,"value":268},"输入的时候, 添加发送给服务器时的servertick ,",{"type":14,"tag":114,"props":270,"children":271},{},[272],{"type":20,"value":273},"注意这个servertick和ServerSimulationSystemGroup.servertick没有多大关系.",{"type":14,"tag":114,"props":275,"children":276},{},[277],{"type":20,"value":278},"m_ClientSimulationSystemGroup.ServerTick标记发送给服务器的命令所在的tick,以及用来接收服务器快照后(快照会包含该tick),丢弃执行过的命令,以及预测未执行的命令使用",{"type":14,"tag":280,"props":281,"children":283},"pre",{"code":282},"        var input = default(CubeInput);\n        input.Tick = m_ClientSimulationSystemGroup.ServerTick;\n        if (Input.GetKey(\"a\"))\n            input.horizontal -= 1;\n        if (Input.GetKey(\"d\"))\n            input.horizontal += 1;\n        if (Input.GetKey(\"s\"))\n            input.vertical -= 1;\n        if (Input.GetKey(\"w\"))\n            input.vertical += 1;\n        var inputBuffer = EntityManager.GetBuffer\u003CCubeInput>(localInput);\n        inputBuffer.AddCommandData(input);\n",[284],{"type":14,"tag":285,"props":286,"children":287},"code",{"__ignoreMap":7},[288],{"type":20,"value":282},{"type":14,"tag":114,"props":290,"children":291},{},[292],{"type":20,"value":293},"客户端使用服务端的快照时,将更新PredictedGhostComponent,可以看到他有两个tick,一个是应用tick,一个是预测开始的tick",{"type":14,"tag":280,"props":295,"children":297},{"code":296},"    public struct PredictedGhostComponent : IComponentData\n    {\n        public uint AppliedTick;\n        public uint PredictionStartTick;\n    }\n",[298],{"type":14,"tag":285,"props":299,"children":300},{"__ignoreMap":7},[301],{"type":20,"value":296},{"type":14,"tag":114,"props":303,"children":304},{},[305],{"type":20,"value":306},"服务端PredictedGhostComponent其中AppliedTick和PredictionStartTick永远为0",{"type":14,"tag":280,"props":308,"children":310},{"code":309},"[UpdateInGroup(typeof(GhostPredictionSystemGroup))]\npublic class MoveCubeSystem : ComponentSystem\n{\n    protected override void OnUpdate()\n    {\n        var group = World.GetExistingSystem\u003CGhostPredictionSystemGroup>();\n        var tick = group.PredictingTick;\n        var deltaTime = Time.DeltaTime;\n        Entities.ForEach((DynamicBuffer\u003CCubeInput> inputBuffer, ref Translation trans, ref PredictedGhostComponent prediction) =>\n        {\n            if (!GhostPredictionSystemGroup.ShouldPredict(tick, prediction))\n                return;\n            CubeInput input;\n            inputBuffer.GetDataAtTick(tick, out input);\n            if (input.horizontal > 0)\n                trans.Value.x += deltaTime;\n            if (input.horizontal \u003C 0)\n                trans.Value.x -= deltaTime;\n            if (input.vertical > 0)\n                trans.Value.z += deltaTime;\n            if (input.vertical \u003C 0)\n                trans.Value.z -= deltaTime;\n        });\n    }\n}\n",[311],{"type":14,"tag":285,"props":312,"children":313},{"__ignoreMap":7},[314],{"type":20,"value":309},{"type":14,"tag":114,"props":316,"children":317},{},[318],{"type":20,"value":319},"让我们看下GhostPredictionSystemGroup的源代码:",{"type":14,"tag":280,"props":321,"children":323},{"code":322},"   protected override void OnUpdate()\n        {\n            // If client, go from oldest applied predicted tick to target tick, apply. Allow filtering on latest received tick somehow\n            if (isServer)\n            {\n                // If server, apply once\n                var simulationSystemGroup = World.GetExistingSystem\u003CServerSimulationSystemGroup>();\n                PredictingTick = simulationSystemGroup.ServerTick;\n                IsFinalPredictionTick = true;\n                base.OnUpdate();\n            }\n            else\n            {\n                if (predictedTickWriters.Length > 1)\n                {\n                    predictedTickWriters[0] = JobHandle.CombineDependencies(predictedTickWriters);\n                    predictedTickWriters.ResizeUninitialized(1);\n                }\n\n                if (predictedTickWriters.Length > 0)\n                    predictedTickWriters[0].Complete();\n                predictedTickWriters.Clear();\n                uint oldestAppliedTick = 0;\n                for (int i = 0; i \u003C OldestPredictedTick.Length; ++i)\n                {\n                    if (OldestPredictedTick[i] != 0)\n                    {\n                        if (oldestAppliedTick == 0 ||\n                            SequenceHelpers.IsNewer(oldestAppliedTick, OldestPredictedTick[i]))\n                            oldestAppliedTick = OldestPredictedTick[i];\n                        OldestPredictedTick[i] = 0;\n                    }\n                }\n\n                var simulationSystemGroup = World.GetExistingSystem\u003CClientSimulationSystemGroup>();\n                var serverTick = simulationSystemGroup.ServerTick;\n                var targetTick = serverTick;\n\n                if (oldestAppliedTick == 0 ||\n                    !SequenceHelpers.IsNewer(targetTick, oldestAppliedTick))\n                    //oldestAppliedTick = targetTick - 1;\n                    return; // Nothing rolled back - nothing to predict\n                // Do not try to predict more frames than we can have input for\n                if (targetTick - oldestAppliedTick > CommandDataUtility.k_CommandDataMaxSize)\n                    oldestAppliedTick = targetTick - CommandDataUtility.k_CommandDataMaxSize;\n\n                var previousTime = Time;\n                var elapsedTime = previousTime.ElapsedTime;\n                if (simulationSystemGroup.ServerTickFraction \u003C 1)\n                {\n                    --targetTick;\n                    elapsedTime -= simulationSystemGroup.ServerTickDeltaTime * simulationSystemGroup.ServerTickFraction;\n                }\n\n                for (uint i = oldestAppliedTick + 1; i != targetTick+1; ++i)\n                {\n                    uint tickAge = targetTick - i;\n                    World.SetTime(new TimeData(elapsedTime - simulationSystemGroup.ServerTickDeltaTime*tickAge, simulationSystemGroup.ServerTickDeltaTime));\n                    PredictingTick = i;\n                    IsFinalPredictionTick = (i == serverTick);\n                    base.OnUpdate();\n                }\n\n                if (simulationSystemGroup.ServerTickFraction \u003C 1)\n                {\n                    PredictingTick = targetTick + 1;\n                    IsFinalPredictionTick = true;\n                    World.SetTime(new TimeData(previousTime.ElapsedTime, simulationSystemGroup.ServerTickDeltaTime *\n                                                                        simulationSystemGroup.ServerTickFraction));\n                    base.OnUpdate();\n                }\n                World.SetTime(previousTime);\n            }\n        }\n",[324],{"type":14,"tag":285,"props":325,"children":326},{"__ignoreMap":7},[327],{"type":20,"value":322},{"type":14,"tag":114,"props":329,"children":330},{},[331],{"type":20,"value":332},"可以看到从开始值不断的改变PredictingTick进行预测,然后执行了base.OnUpdate()",{"type":14,"tag":15,"props":334,"children":336},{"id":335},"插值",[337],{"type":20,"value":335},{"type":14,"tag":114,"props":339,"children":340},{},[341],{"type":20,"value":342},"插值就是将网络玩家显示在过去的某个时刻",{"type":14,"tag":114,"props":344,"children":345},{},[346],{"type":20,"value":347},"假设你在t=1000收到位置信息，你已经在t=900收到了一次位置信息，所以你知道玩家在t=900和t=1000的位置，所以在t=1000到t=1100之间，你只要显示玩家t=900到t=1000的位置。这种方法，你所显示的都是玩家的真实数据，只是有100ms的延迟。",{"type":14,"tag":349,"props":350,"children":352},"h3",{"id":351},"translation和rotation的转换",[353],{"type":20,"value":354},"Translation和Rotation的转换",{"type":14,"tag":114,"props":356,"children":357},{},[358],{"type":20,"value":359},"Unity.NetCode.Editor.GhostAuthoringComponentEditor",{"type":14,"tag":114,"props":361,"children":362},{},[363],{"type":20,"value":364},"中添加了Translation和Rotation的转换,只有被转换的才会被传输..如果不想转换可以在code gen window中勾掉Unity.Transforms..auto compile也勾掉",{"type":14,"tag":280,"props":366,"children":368},{"code":367},"    public static void InitDefaultOverrides()\n        {\n            GhostDefaultOverrides = new Dictionary\u003Cstring, GhostComponent>();\n            AssembliesDefaultOverrides = new HashSet\u003Cstring>(new []{\n                \"Unity.NetCode\",\n                \"Unity.Transforms\",\n            });\n\n            var comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Translation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 100, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n            comp = new GhostComponent\n            {\n                name = \"Unity.Transforms.Rotation\",\n                attribute = new GhostComponentAttribute{PrefabType = GhostPrefabType.All, OwnerPredictedSendType = GhostSendType.All, SendDataForChildEntity = false},\n                fields = new GhostComponentField[]\n                {\n                    new GhostComponentField\n                    {\n                        name = \"Value\",\n                        attribute = new GhostFieldAttribute{Quantization = 1000, Interpolate = true}\n                    }\n                },\n                entityIndex = 0\n            };\n            GhostDefaultOverrides.Add(comp.name, comp);\n        }\n",[369],{"type":14,"tag":285,"props":370,"children":371},{"__ignoreMap":7},[372],{"type":20,"value":367},{"type":14,"tag":114,"props":374,"children":375},{},[376],{"type":20,"value":377},"我们可以看到这里使用了GhostFiled并且将其设置为Interpolate..我们在看下他生成的code",{"type":14,"tag":280,"props":379,"children":381},{"code":380},"        [BurstCompile]\n        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]\n        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)\n        {\n            for (int i = 0; i \u003C count; ++i)\n            {\n                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast\u003CSnapshotData.DataAtTick>(snapshotData, snapshotStride*i);\n                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast\u003CSnapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);\n                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast\u003CSnapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);\n                float snapshotInterpolationFactor = snapshotInterpolationData.InterpolationFactor;\n                ref var component = ref GhostComponentSerializer.TypeCast\u003CUnity.Transforms.Translation>(componentData, componentStride*i);\n                var deserializerState = GhostComponentSerializer.TypeCast\u003CGhostDeserializerState>(stateData, 0);\n                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;\n                component.Value = math.lerp(\n                    new float3(snapshotBefore.Value_x * 0.01f, snapshotBefore.Value_y * 0.01f, snapshotBefore.Value_z * 0.01f),\n                    new float3(snapshotAfter.Value_x * 0.01f, snapshotAfter.Value_y * 0.01f, snapshotAfter.Value_z * 0.01f),\n                    snapshotInterpolationFactor);\n            }\n        }\n",[382],{"type":14,"tag":285,"props":383,"children":384},{"__ignoreMap":7},[385],{"type":20,"value":380},{"type":14,"tag":114,"props":387,"children":388},{},[389],{"type":20,"value":390},"我们看到在读取快照的时候使用了snapshotInterpolationFactor进行插值,SnapshotData类中",{"type":14,"tag":280,"props":392,"children":394},{"code":393},"\n  public unsafe bool GetDataAtTick(uint targetTick, float targetTickFraction, in DynamicBuffer\u003CSnapshotDataBuffer> buffer, out DataAtTick data)\n        {\n            data = default;\n            if (buffer.Length == 0)\n                return false;\n            var numBuffers = buffer.Length / SnapshotSize;\n            int beforeIdx = 0;\n            uint beforeTick = 0;\n            int afterIdx = 0;\n            uint afterTick = 0;\n            // If last tick is fractional before should not include the tick we are targeting, it should instead be included in after\n            if (targetTickFraction \u003C 1)\n                --targetTick;\n            byte* snapshotData;\n            // Loop from latest available to oldest available snapshot\n            for (int slot = 0; slot \u003C numBuffers; ++slot)\n            {\n                var curIndex = (LatestIndex + GhostSystemConstants.SnapshotHistorySize - slot) % GhostSystemConstants.SnapshotHistorySize;\n                snapshotData = (byte*)buffer.GetUnsafePtr() + curIndex * SnapshotSize;\n                uint tick = *(uint*)snapshotData;\n                if (tick == 0)\n                    continue;\n                if (SequenceHelpers.IsNewer(tick, targetTick))\n                {\n                    afterTick = tick;\n                    afterIdx = curIndex;\n                }\n                else\n                {\n                    beforeTick = tick;\n                    beforeIdx = curIndex;\n                    break;\n                }\n            }\n\n            if (beforeTick == 0)\n            {\n                return false;\n            }\n\n            data.SnapshotBefore = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + beforeIdx * SnapshotSize);\n            data.Tick = beforeTick;\n            if (afterTick == 0)\n            {\n                data.SnapshotAfter = data.SnapshotBefore;\n                data.InterpolationFactor = 0;\n            }\n            else\n            {\n                data.SnapshotAfter = (System.IntPtr)((byte*)buffer.GetUnsafePtr() + afterIdx * SnapshotSize);\n                data.InterpolationFactor = (float) (targetTick - beforeTick) / (float) (afterTick - beforeTick);\n                if (targetTickFraction \u003C 1)\n                    data.InterpolationFactor += targetTickFraction / (float) (afterTick - beforeTick);\n            }\n\n            return true;\n        }\n",[395],{"type":14,"tag":285,"props":396,"children":397},{"__ignoreMap":7},[398],{"type":20,"value":393},{"type":14,"tag":114,"props":400,"children":401},{},[402],{"type":20,"value":403},"在其中计算了InterpolationFactor.",{"type":14,"tag":114,"props":405,"children":406},{},[407],{"type":20,"value":408},"无论是插值和预测都是先读取快照.我们看下GhostUpdateSystem",{"type":14,"tag":280,"props":410,"children":412},{"code":411}," public void Execute(ArchetypeChunk chunk, int chunkIndex, int firstEntityIndex, DynamicComponentTypeHandle* ghostChunkComponentTypesPtr, int ghostChunkComponentTypesLength)\n            {\n                bool predicted = chunk.Has(predictedGhostComponentType);\n                uint targetTick = predicted ? predictedTargetTick : interpolatedTargetTick;\n                float targetTickFraction = predicted ? 1.0f : interpolatedTargetTickFraction;\n",[413],{"type":14,"tag":285,"props":414,"children":415},{"__ignoreMap":7},[416],{"type":20,"value":411},{"type":14,"tag":114,"props":418,"children":419},{},[420],{"type":20,"value":421},"预测使用的是predictedTargetTick,插值使用的是interpolatedTargetTick",{"type":14,"tag":280,"props":423,"children":425},{"code":424}," interpolatedTargetTick = m_ClientSimulationSystemGroup.InterpolationTick,\n                interpolatedTargetTickFraction = m_ClientSimulationSystemGroup.InterpolationTickFraction,\n\n                predictedTargetTick = m_ClientSimulationSystemGroup.ServerTick,\n",[426],{"type":14,"tag":285,"props":427,"children":428},{"__ignoreMap":7},[429],{"type":20,"value":424},{"type":14,"tag":114,"props":431,"children":432},{},[433],{"type":20,"value":434},"而他们又都来自m_ClientSimulationSystemGroup,m_ClientSimulationSystemGroup的tick又来自NetworkTimeSystem",{"type":14,"tag":349,"props":436,"children":438},{"id":437},"clientservertickrate",[439],{"type":20,"value":440},"ClientServerTickRate",{"type":14,"tag":114,"props":442,"children":443},{},[444],{"type":20,"value":445},"RpcSetNetworkId",{"type":14,"tag":280,"props":447,"children":449},{"code":448}," [BurstCompile]\n        [AOT.MonoPInvokeCallback(typeof(RpcExecutor.ExecuteDelegate))]\n        private static void InvokeExecute(ref RpcExecutor.Parameters parameters)\n        {\n            var rpcData = default(RpcSetNetworkId);\n            var rpcSerializer = default(RpcSetNetworkId);\n            rpcSerializer.Deserialize(ref parameters.Reader, parameters.DeserializerState, ref rpcData);\n\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, parameters.Connection, new NetworkIdComponent {Value = rpcData.nid});\n            var ent = parameters.CommandBuffer.CreateEntity(parameters.JobIndex);\n            parameters.CommandBuffer.AddComponent(parameters.JobIndex, ent, new ClientServerTickRateRefreshRequest\n            {\n                MaxSimulationStepsPerFrame = rpcData.simMaxSteps,\n                NetworkTickRate = rpcData.netTickRate,\n                SimulationTickRate = rpcData.simTickRate\n            });\n        }\n",[450],{"type":14,"tag":285,"props":451,"children":452},{"__ignoreMap":7},[453],{"type":20,"value":448},{"type":14,"tag":114,"props":455,"children":456},{},[457],{"type":20,"value":458},"服务端在同步networkid的时候会一起同步ClientServerTickRate",{"type":14,"tag":114,"props":460,"children":461},{},[462],{"type":20,"value":463},"客户端会比服务端多一个NetworkTimeSystem根据往返时间和最近从服务器收到的快照来计算服务器时间的初始估计",{"type":14,"tag":114,"props":465,"children":466},{},[467],{"type":20,"value":468},"来看下插值tick的计算..他首先是算出predictTargetTick然后减去一个插值",{"type":14,"tag":280,"props":470,"children":472},{"code":471},"\n var idiff = (uint)currentInterpolationFrames;\n            interpolateTargetTick = predictTargetTick - idiff;\n            var subidiff = currentInterpolationFrames - idiff;\n            subidiff -= subInterpolateTargetTick+subPredictTargetTick;\n            if (subidiff \u003C 0)\n            {\n                ++interpolateTargetTick;\n                subidiff = -subidiff;\n            }\n            else if (subidiff > 0)\n            {\n                idiff = (uint)subidiff;\n                subidiff -= idiff;\n                interpolateTargetTick -= idiff;\n                subidiff = 1f-subidiff;\n            }\n            subInterpolateTargetTick = subidiff;\n",[473],{"type":14,"tag":285,"props":474,"children":475},{"__ignoreMap":7},[476],{"type":20,"value":471},{"type":14,"tag":114,"props":478,"children":479},{},[480],{"type":20,"value":481},"它是根据网络延迟算出一个tick,然后从快照中取出...",{"type":14,"tag":15,"props":483,"children":485},{"id":484},"补偿",[486],{"type":20,"value":484},{"type":14,"tag":15,"props":488,"children":490},{"id":489},"ghostsendsystem",[491],{"type":20,"value":492},"GhostSendSystem",{"type":14,"tag":114,"props":494,"children":495},{},[496],{"type":20,"value":497},"以下皆为脑补:",{"type":14,"tag":114,"props":499,"children":500},{},[501],{"type":20,"value":502},"发送的时候根据ghost的设置,来判断发送给该用户的数据(ghosts),其中谁是插值,谁是预测..因为插值和预测的包应该是有区别的..",{"type":14,"tag":114,"props":504,"children":505},{},[506],{"type":20,"value":507},"接收的时候再根据是否预测,还是插值.进行PredictedGhostComponent的设置",{"type":14,"tag":259,"props":509,"children":511},{"id":510},"ghost",[512],{"type":20,"value":513},"GHOST",{"type":14,"tag":114,"props":515,"children":516},{},[517],{"type":20,"value":518},"GhostAuthoringComponent验证的时候会生成prefabId",{"type":14,"tag":280,"props":520,"children":522},{"code":521},"    if (gameObject.transform.parent == null)\n            {\n                // The common case is a root object in a prefab, in this case we always validate the guid to detect cloned files\n                var prefabStage = UnityEditor.Experimental.SceneManagement.PrefabStageUtility.GetPrefabStage(gameObject);\n                if (prefabStage != null)\n                {\n#if UNITY_2020_1_OR_NEWER\n                    var assetPath = prefabStage.assetPath;\n#else\n                    var assetPath = prefabStage.prefabAssetPath;\n#endif\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(assetPath);\n                }\n                else if (UnityEditor.PrefabUtility.GetPrefabAssetType(gameObject) != UnityEditor.PrefabAssetType.NotAPrefab)\n                {\n                    var path = UnityEditor.AssetDatabase.GetAssetPath(gameObject);\n                    if (String.IsNullOrEmpty(path))\n                        return;\n                    guid = UnityEditor.AssetDatabase.AssetPathToGUID(path);\n                }\n            }\n            if (guid != prefabId)\n            {\n                UnityEditor.Undo.RecordObject(this, \"\");\n                prefabId = guid;\n            }\n",[523],{"type":14,"tag":285,"props":524,"children":525},{"__ignoreMap":7},[526],{"type":20,"value":521},{"type":14,"tag":114,"props":528,"children":529},{},[530],{"type":20,"value":531},"GhostAuthoringConversion,会为prefab根据client和server添加各种组件ghost, Snapshot",{"type":14,"tag":280,"props":533,"children":535},{"code":534},"    var ghostType = new GhostTypeComponent();\n    ghostType.guid0 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(0, 8), 16);\n    ghostType.guid1 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(8, 8), 16);\n    ghostType.guid2 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(16, 8), 16);\n    ghostType.guid3 = Convert.ToUInt32(ghostAuthoring.prefabId.Substring(24, 8), 16);\n    DstEntityManager.AddComponentData(entity, ghostType);\n                    \n                    \n                    \n                    \n  DstEntityManager.AddComponentData(entity, new GhostComponent());\n",[536],{"type":14,"tag":285,"props":537,"children":538},{"__ignoreMap":7},[539],{"type":20,"value":534},{"type":14,"tag":114,"props":541,"children":542},{},[543],{"type":20,"value":544},"默认一定会添加的组件:",{"type":14,"tag":114,"props":546,"children":547},{},[548],{"type":20,"value":549},"客户端会添加 snapshotData和snapshotDataBuffer",{"type":14,"tag":114,"props":551,"children":552},{},[553],{"type":20,"value":554},"服务端会添加PredictedGhostComponent,GhostSystemStateComponent,sharedGhostTypeComponent",{"type":14,"tag":114,"props":556,"children":557},{},[558],{"type":20,"value":559},"[GhostComponent(PrefabType=GhostPrefabType.Client)] 可以控制服务端和客户端是否添加该组件",{"type":14,"tag":114,"props":561,"children":562},{},[563],{"type":20,"value":564},"他会同步ghost prefab..根据ghostid..然后客户端.根据ghostid实例化ghost",{"type":14,"tag":280,"props":566,"children":568},{"code":567},"    public struct SpawnedGhost : IEquatable\u003CSpawnedGhost>\n    {\n        public int ghostId;\n        public uint spawnTick;\n        public override int GetHashCode()\n        {\n            return ghostId;\n        }\n        public bool Equals(SpawnedGhost ghost)\n        {\n            return ghost.ghostId == ghostId && ghost.spawnTick == spawnTick;\n        }\n    }\n",[569],{"type":14,"tag":285,"props":570,"children":571},{"__ignoreMap":7},[572],{"type":20,"value":567},{"title":7,"searchDepth":574,"depth":574,"links":575},2,[576,581],{"id":261,"depth":574,"text":261,"children":577},[578,580],{"id":351,"depth":579,"text":354},3,{"id":437,"depth":579,"text":440},{"id":510,"depth":574,"text":513},"markdown","content:unity:2020-11-18-netcode-sourcecode.md","content","unity/2020-11-18-netcode-sourcecode.md","md","2020-11-18",[589,599,726,775,827,840,952],{"title":590,"_path":591,"children":592},"Art","/art",[593,596],{"title":594,"_path":595},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":597,"_path":598},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":600,"_path":601,"children":602},"Dotnet","/dotnet",[603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723],{"title":604,"_path":605},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":607,"_path":608},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":610,"_path":611},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":613,"_path":614},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":616,"_path":617},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":619,"_path":620},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":622,"_path":623},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":625,"_path":626},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":628,"_path":629},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":631,"_path":632},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":634,"_path":635},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":637,"_path":638},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":640,"_path":641},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":643,"_path":644},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":646,"_path":647},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":649,"_path":650},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":652,"_path":653},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":655,"_path":656},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":658,"_path":659},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":661,"_path":662},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":664,"_path":665},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":667,"_path":668},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":670,"_path":671},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":673,"_path":674},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":676,"_path":677},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":679,"_path":680},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":682,"_path":683},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":685,"_path":686},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":688,"_path":689},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":691,"_path":692},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":694,"_path":695},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":697,"_path":698},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":700,"_path":701},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":703,"_path":704},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":706,"_path":707},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":709,"_path":710},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":712,"_path":713},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":715,"_path":716},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":718,"_path":719},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":721,"_path":722},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":724,"_path":725},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":727,"_path":728,"children":729},"Game","/game",[730,733,736,739,742,745,748,751,754,757,760,763,766,769,772],{"title":731,"_path":732},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":734,"_path":735},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":737,"_path":738},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":740,"_path":741},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":743,"_path":744},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":746,"_path":747},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":749,"_path":750},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":752,"_path":753},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":755,"_path":756},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":758,"_path":759},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":761,"_path":762},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":764,"_path":765},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":767,"_path":768},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":770,"_path":771},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":773,"_path":774},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":776,"_path":777,"children":778},"Gyj","/gyj",[779,782,785,788,791,794,797,800,803,806,809,812,815,818,821,824],{"title":780,"_path":781},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":783,"_path":784},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":786,"_path":787},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":789,"_path":790},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":792,"_path":793},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":795,"_path":796},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":798,"_path":799},"玩法","/gyj/2022-08-22-wanfa",{"title":801,"_path":802},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":804,"_path":805},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":807,"_path":808},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":810,"_path":811},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":813,"_path":814},"门派内容相关","/gyj/2022-11-17-sect",{"title":816,"_path":817},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":819,"_path":820},"种植","/gyj/2022-12-01-zhongzhi",{"title":822,"_path":823},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":825,"_path":826},"跑商","/gyj/2023-11-01-paoshang",{"title":828,"_path":829,"children":830},"Js","/js",[831,834,837],{"title":832,"_path":833},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":835,"_path":836},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":838,"_path":839},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":841,"_path":842,"children":843},"Tool","/tool",[844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901,904,907,910,913,916,919,922,925,928,931,934,937,940,943,946,949],{"title":845,"_path":846},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":848,"_path":849},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":851,"_path":852},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":854,"_path":855},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":857,"_path":858},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":860,"_path":861},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":863,"_path":864},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":866,"_path":867},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":869,"_path":870},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":872,"_path":873},"mac下brew 使用","/tool/2020-01-13-brew",{"title":875,"_path":876},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":878,"_path":879},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":881,"_path":882},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":884,"_path":885},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":887,"_path":888},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":890,"_path":891},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":893,"_path":894},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":896,"_path":897},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":899,"_path":900},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":902,"_path":903},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":905,"_path":906},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":908,"_path":909},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":911,"_path":912},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":914,"_path":915},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":917,"_path":918},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":920,"_path":921},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":923,"_path":924},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":926,"_path":927},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":929,"_path":930},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":932,"_path":933},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":935,"_path":936},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":938,"_path":939},"rider的使用","/tool/2022-08-02-rider-use",{"title":941,"_path":942},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":944,"_path":945},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":947,"_path":948},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":950,"_path":951},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":953,"_path":954,"children":955},"Unity","/unity",[956,959,962,965,968,971,974,977,980,983,986,989,992,995,998,1001,1004,1007,1010,1013,1016,1019,1022,1025,1028,1031,1034,1037,1040,1043,1046,1049,1052,1055,1058,1061,1064,1067,1070,1073,1076,1079,1082,1085,1088,1091,1094,1097,1100,1103,1106,1109,1112,1115,1118,1121,1124,1125,1128,1131,1134,1137,1140,1143,1146,1149,1152,1155,1158,1161,1164,1167],{"title":957,"_path":958},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":960,"_path":961},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":963,"_path":964},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":966,"_path":967},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":969,"_path":970},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":972,"_path":973},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":975,"_path":976},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":978,"_path":979},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":981,"_path":982},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":984,"_path":985},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":987,"_path":988},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":990,"_path":991},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":993,"_path":994},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":996,"_path":997},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":999,"_path":1000},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1002,"_path":1003},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1005,"_path":1006},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1008,"_path":1009},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1011,"_path":1012},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1014,"_path":1015},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1017,"_path":1018},"技能系统","/unity/2020-02-15-skill-system",{"title":1020,"_path":1021},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1023,"_path":1024},"角色状态设计","/unity/2020-02-17-character-states",{"title":1026,"_path":1027},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1029,"_path":1030},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1032,"_path":1033},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1035,"_path":1036},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1038,"_path":1039},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1041,"_path":1042},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1044,"_path":1045},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1047,"_path":1048},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1050,"_path":1051},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1053,"_path":1054},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1056,"_path":1057},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1059,"_path":1060},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1062,"_path":1063},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1065,"_path":1066},"unity的addressables","/unity/2020-09-12-addressables",{"title":1068,"_path":1069},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1071,"_path":1072},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1074,"_path":1075},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1077,"_path":1078},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1080,"_path":1081},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1083,"_path":1084},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1086,"_path":1087},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1089,"_path":1090},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1092,"_path":1093},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1095,"_path":1096},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1098,"_path":1099},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1101,"_path":1102},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1104,"_path":1105},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1107,"_path":1108},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1110,"_path":1111},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1113,"_path":1114},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1116,"_path":1117},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1119,"_path":1120},"ability","/unity/2020-11-16-dotssample",{"title":1122,"_path":1123},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":8,"_path":4},{"title":1126,"_path":1127},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1129,"_path":1130},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1132,"_path":1133},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1135,"_path":1136},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1138,"_path":1139},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1141,"_path":1142},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1144,"_path":1145},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1147,"_path":1148},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1150,"_path":1151},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1153,"_path":1154},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1156,"_path":1157},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1159,"_path":1160},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1162,"_path":1163},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1165,"_path":1166},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1168,"_path":1169},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039069]