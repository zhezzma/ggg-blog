[{"data":1,"prerenderedAt":868},["Reactive",2],{"content-query-cC3sdOYdDq":3,"content-navigation-8C37fagqQL":286},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":280,"_id":281,"_source":282,"_file":283,"_extension":284,"date":285},"/unity/2020-11-16-dotssample","unity",false,"","ability","首先ability总是和item或者character结合在一起的",{"type":11,"children":12,"toc":276},"root",[13,20,25,30,65,75,82,93,98,103,108,113,118,123,128,133,139,147,152,157,162,167,172,178,186,191,196,204,209,215,223,236,241,246,251,257],{"type":14,"tag":15,"props":16,"children":17},"element","h1",{"id":8},[18],{"type":19,"value":8},"text",{"type":14,"tag":21,"props":22,"children":23},"p",{},[24],{"type":19,"value":9},{"type":14,"tag":21,"props":26,"children":27},{},[28],{"type":19,"value":29},"以下Authoring 会为ability加上不同的组件",{"type":14,"tag":31,"props":32,"children":33},"ul",{},[34,40,45,50,55,60],{"type":14,"tag":35,"props":36,"children":37},"li",{},[38],{"type":19,"value":39},"AbilityAutoRifleAuthoring",{"type":14,"tag":35,"props":41,"children":42},{},[43],{"type":19,"value":44},"AbilityMovementAuthoring",{"type":14,"tag":35,"props":46,"children":47},{},[48],{"type":19,"value":49},"AbilitySprintAuthoring",{"type":14,"tag":35,"props":51,"children":52},{},[53],{"type":19,"value":54},"AbilityDeadAuthoring",{"type":14,"tag":35,"props":56,"children":57},{},[58],{"type":19,"value":59},"AbilitySelectSlotAuthoring",{"type":14,"tag":35,"props":61,"children":62},{},[63],{"type":19,"value":64},"AbilityMeleeAuthoring",{"type":14,"tag":66,"props":67,"children":69},"pre",{"code":68},"EntityManager.CreateArchetype(\ntypeof(Ability.AbilityControl),  //控制器\ntypeof(Ability.AbilityTag), //技能tag( Melee,Movement,AutoRifle, SelectSlot,Dead,Sprint)\ntypeof(Ability.AbilityAction),  //技能动作(None,PrimaryFire,SecondaryFire,Reloading,Melee,NumActions)会通过Item关联具体值\ntypeof(settings),  // 技能的配置\ntypeof(state), // 技能状态  \ntypeof(PredictedState),  // 预测状态\ntypeof(InterpolatedState), // 插值状态\n);\n",[70],{"type":14,"tag":71,"props":72,"children":73},"code",{"__ignoreMap":7},[74],{"type":19,"value":68},{"type":14,"tag":76,"props":77,"children":79},"h2",{"id":78},"abilitycollection",[80],{"type":19,"value":81},"AbilityCollection",{"type":14,"tag":21,"props":83,"children":84},{},[85,91],{"type":14,"tag":71,"props":86,"children":88},{"className":87},[],[89],{"type":19,"value":90},"AbilityEntry",{"type":19,"value":92},"是一个IBufferElementData.存储了多个ability",{"type":14,"tag":21,"props":94,"children":95},{},[96],{"type":19,"value":97},"定义了技能类型,能和什么类型一起运行,会打断什么类型",{"type":14,"tag":21,"props":99,"children":100},{},[101],{"type":19,"value":102},"一个技能可能会有多个触发button,比如一把枪,会有开火键和装弹键",{"type":14,"tag":21,"props":104,"children":105},{},[106],{"type":19,"value":107},"UpdateAbilityOwnership系统.. 填充character的OwnedCollection组件.分别为自己和item",{"type":14,"tag":21,"props":109,"children":110},{},[111],{"type":19,"value":112},"再根据OwnedCollection填充ownedAbilities",{"type":14,"tag":21,"props":114,"children":115},{},[116],{"type":19,"value":117},"PrepareOwnerForAbilityUpdate系统",{"type":14,"tag":21,"props":119,"children":120},{},[121],{"type":19,"value":122},"检查ability是否启用.未启用则删除",{"type":14,"tag":21,"props":124,"children":125},{},[126],{"type":19,"value":127},"SelectActiveBehavior系统",{"type":14,"tag":21,"props":129,"children":130},{},[131],{"type":19,"value":132},"选择激活一个ability",{"type":14,"tag":15,"props":134,"children":136},{"id":135},"item",[137],{"type":19,"value":138},"Item",{"type":14,"tag":66,"props":140,"children":142},{"code":141},"EntityManager.CreateArchetype(\ntypeof(Item.InputState),  //输入状态\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个item可能有多个技能\n);\n",[143],{"type":14,"tag":71,"props":144,"children":145},{"__ignoreMap":7},[146],{"type":19,"value":141},{"type":14,"tag":21,"props":148,"children":149},{},[150],{"type":19,"value":151},"Item.Initialize会查找所有拥有(Inventory.ItemEntry)的实体(就是character)",{"type":14,"tag":21,"props":153,"children":154},{},[155],{"type":19,"value":156},"然后将item添加到character的Inventory.ItemEntry组件的buff中.",{"type":14,"tag":21,"props":158,"children":159},{},[160],{"type":19,"value":161},"将item和character关联起来",{"type":14,"tag":21,"props":163,"children":164},{},[165],{"type":19,"value":166},"Inventory.update系统",{"type":14,"tag":21,"props":168,"children":169},{},[170],{"type":19,"value":171},"比较activeslot和lastactiveinventoryslot.来在item上添加和删除PartOwner.Visible组件",{"type":14,"tag":15,"props":173,"children":175},{"id":174},"character",[176],{"type":19,"value":177},"Character",{"type":14,"tag":66,"props":179,"children":181},{"code":180},"EntityManager.CreateArchetype(\ntypeof(Settings),  //角色设置\ntypeof(InterpolatedData), // 插值数据\ntypeof(PredictedData),//预测数据\ntypeof(ReplicatedData),// 角色类型\n\ntypeof(Player.OwnerPlayerId.Default),// 拥有者id\ntypeof(PlayerControlled.State),// 玩家控制器状态\ntypeof(HitColliderOwner.State),  //碰撞器状态\n\n//Inventory\ntypeof(Inventory.ItemEntry)   //一个item的buff\ntypeof(Inventory.State)   //状态..激活的是哪一个item\ntypeof(Inventory.InternalState)  //最后激活的item\n\n//生命和伤害\ntypeof(HealthStateData),\ntypeof(DamageEvent), //注意是个buff\ntypeof(DamageHistoryData),  \n\n//ability\ntypeof(AbilityCollection.State),   //存储的是技能拥有者entity\ntypeof(AbilityCollection.AbilityEntry),//一个角色可能有多个能力\ntypeof(AbilityOwner.State),//技能拥有者状态\ntypeof(AbilityOwner.OwnedCollection),//技能拥有者是个buff  拥有者有可能是角色也有可能是item\ntypeof(AbilityOwner.OwnedAbility),//拥有的所有技能,包括角色和item的\n\n\n\n\n\n//角色控制器数据\ntypeof(CharacterControllerComponentData),  // 一些角色控制器数据\ntypeof(CharacterControllerInitializationData),   //碰撞盒数据\ntypeof(CharacterControllerVelocity),\ntypeof(CharacterControllerMoveQuery),\ntypeof(CharacterControllerMoveResult),\ntypeof(CharacterControllerGroundSupportData),\n\n\n\n);\n",[182],{"type":14,"tag":71,"props":183,"children":184},{"__ignoreMap":7},[185],{"type":19,"value":180},{"type":14,"tag":15,"props":187,"children":189},{"id":188},"part",[190],{"type":19,"value":188},{"type":14,"tag":21,"props":192,"children":193},{},[194],{"type":19,"value":195},"Part 模块是抽象\"部分关系\"的一种存在, 不过具体到实现来说, 就是可以用来管理角色模型, 武器模型(以及其LOD), 以角色配置为例说明下述具体用法",{"type":14,"tag":66,"props":197,"children":199},{"code":198},"EntityManager.CreateArchetype(\ntypeof(Part.Owner),  //部件拥有者\ntypeof(TerraformerWeaponPart.AutoringData)  //声音\ntypeof(TerraformerWeaponPart.AuthoringClass)  //材质,特效之类的\ntypeof(TerraformerWeaponPart.State)  //状态\n);\n",[200],{"type":14,"tag":71,"props":201,"children":202},{"__ignoreMap":7},[203],{"type":19,"value":198},{"type":14,"tag":21,"props":205,"children":206},{},[207],{"type":19,"value":208},"同样的item和character都可以拥有part",{"type":14,"tag":15,"props":210,"children":212},{"id":211},"local-player",[213],{"type":19,"value":214},"local player",{"type":14,"tag":66,"props":216,"children":218},{"code":217},"EntityManager.CreateArchetype(\ntypeof(Player.State)  \ntypeof(UserCommand)    //是个buff\ntypeof(LocalPlayer)  \ntypeof(LocalPlayerCharacterControl.State)\n\ntypeof(AbilityUIElement)\ntypeof(PresentationElement)\ntypeof(PlayerCameraControl.State)\n);\n\n\n",[219],{"type":14,"tag":71,"props":220,"children":221},{"__ignoreMap":7},[222],{"type":19,"value":217},{"type":14,"tag":21,"props":224,"children":225},{},[226,228,234],{"type":19,"value":227},"首先看",{"type":14,"tag":71,"props":229,"children":231},{"className":230},[],[232],{"type":19,"value":233},"CharacterAuthoring",{"type":19,"value":235},"然后我们就知道.一个character到底有哪些东东了",{"type":14,"tag":21,"props":237,"children":238},{},[239],{"type":19,"value":240},"//Assets/Unity.Sample.Terraformer/Prefabs/Characters/Terraformer/Char_Terraformer.prefab",{"type":14,"tag":21,"props":242,"children":243},{},[244],{"type":19,"value":245},"SpawnCharacter",{"type":14,"tag":21,"props":247,"children":248},{},[249],{"type":19,"value":250},"ItemAuthoring",{"type":14,"tag":15,"props":252,"children":254},{"id":253},"palyer-实例化流程",[255],{"type":19,"value":256},"palyer 实例化流程",{"type":14,"tag":258,"props":259,"children":260},"ol",{},[261,266,271],{"type":14,"tag":35,"props":262,"children":263},{},[264],{"type":19,"value":265},"客户端连接的时候,服务端PlayerModuleServer.CreatePlayerEntity 创建player实体",{"type":14,"tag":35,"props":267,"children":268},{},[269],{"type":19,"value":270},"服务端根据GameMode,创建角色GameModeSystemServer.Update()",{"type":14,"tag":35,"props":272,"children":273},{},[274],{"type":19,"value":275},"客户端创建localplayer.并根据系统将localplayer和character和player进行绑定",{"title":7,"searchDepth":277,"depth":277,"links":278},2,[279],{"id":78,"depth":277,"text":81},"markdown","content:unity:2020-11-16-dotssample.md","content","unity/2020-11-16-dotssample.md","md","2020-11-16",[287,297,424,473,525,538,650],{"title":288,"_path":289,"children":290},"Art","/art",[291,294],{"title":292,"_path":293},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":295,"_path":296},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":298,"_path":299,"children":300},"Dotnet","/dotnet",[301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403,406,409,412,415,418,421],{"title":302,"_path":303},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":305,"_path":306},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":308,"_path":309},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":311,"_path":312},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":314,"_path":315},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":317,"_path":318},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":320,"_path":321},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":323,"_path":324},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":326,"_path":327},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":329,"_path":330},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":332,"_path":333},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":335,"_path":336},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":338,"_path":339},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":341,"_path":342},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":344,"_path":345},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":347,"_path":348},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":350,"_path":351},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":353,"_path":354},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":356,"_path":357},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":359,"_path":360},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":362,"_path":363},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":365,"_path":366},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":368,"_path":369},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":371,"_path":372},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":374,"_path":375},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":377,"_path":378},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":380,"_path":381},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":383,"_path":384},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":386,"_path":387},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":389,"_path":390},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":392,"_path":393},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":395,"_path":396},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":398,"_path":399},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":401,"_path":402},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":404,"_path":405},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":407,"_path":408},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":410,"_path":411},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":413,"_path":414},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":416,"_path":417},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":419,"_path":420},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":422,"_path":423},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":425,"_path":426,"children":427},"Game","/game",[428,431,434,437,440,443,446,449,452,455,458,461,464,467,470],{"title":429,"_path":430},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":432,"_path":433},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":435,"_path":436},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":438,"_path":439},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":441,"_path":442},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":444,"_path":445},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":447,"_path":448},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":450,"_path":451},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":453,"_path":454},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":456,"_path":457},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":459,"_path":460},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":462,"_path":463},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":465,"_path":466},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":468,"_path":469},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":471,"_path":472},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":474,"_path":475,"children":476},"Gyj","/gyj",[477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522],{"title":478,"_path":479},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":481,"_path":482},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":484,"_path":485},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":487,"_path":488},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":490,"_path":491},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":493,"_path":494},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":496,"_path":497},"玩法","/gyj/2022-08-22-wanfa",{"title":499,"_path":500},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":502,"_path":503},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":505,"_path":506},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":508,"_path":509},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":511,"_path":512},"门派内容相关","/gyj/2022-11-17-sect",{"title":514,"_path":515},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":517,"_path":518},"种植","/gyj/2022-12-01-zhongzhi",{"title":520,"_path":521},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":523,"_path":524},"跑商","/gyj/2023-11-01-paoshang",{"title":526,"_path":527,"children":528},"Js","/js",[529,532,535],{"title":530,"_path":531},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":533,"_path":534},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":536,"_path":537},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":539,"_path":540,"children":541},"Tool","/tool",[542,545,548,551,554,557,560,563,566,569,572,575,578,581,584,587,590,593,596,599,602,605,608,611,614,617,620,623,626,629,632,635,638,641,644,647],{"title":543,"_path":544},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":546,"_path":547},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":549,"_path":550},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":552,"_path":553},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":555,"_path":556},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":558,"_path":559},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":561,"_path":562},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":564,"_path":565},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":567,"_path":568},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":570,"_path":571},"mac下brew 使用","/tool/2020-01-13-brew",{"title":573,"_path":574},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":576,"_path":577},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":579,"_path":580},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":582,"_path":583},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":585,"_path":586},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":588,"_path":589},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":591,"_path":592},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":594,"_path":595},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":597,"_path":598},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":600,"_path":601},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":603,"_path":604},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":606,"_path":607},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":609,"_path":610},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":612,"_path":613},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":615,"_path":616},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":618,"_path":619},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":621,"_path":622},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":624,"_path":625},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":627,"_path":628},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":630,"_path":631},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":633,"_path":634},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":636,"_path":637},"rider的使用","/tool/2022-08-02-rider-use",{"title":639,"_path":640},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":642,"_path":643},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":645,"_path":646},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":648,"_path":649},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":651,"_path":652,"children":653},"Unity","/unity",[654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786,789,792,795,798,801,804,807,810,813,816,817,820,823,826,829,832,835,838,841,844,847,850,853,856,859,862,865],{"title":655,"_path":656},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":658,"_path":659},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":661,"_path":662},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":664,"_path":665},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":667,"_path":668},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":670,"_path":671},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":673,"_path":674},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":676,"_path":677},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":679,"_path":680},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":682,"_path":683},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":685,"_path":686},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":688,"_path":689},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":691,"_path":692},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":694,"_path":695},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":697,"_path":698},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":700,"_path":701},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":703,"_path":704},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":706,"_path":707},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":709,"_path":710},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":712,"_path":713},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":715,"_path":716},"技能系统","/unity/2020-02-15-skill-system",{"title":718,"_path":719},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":721,"_path":722},"角色状态设计","/unity/2020-02-17-character-states",{"title":724,"_path":725},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":727,"_path":728},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":730,"_path":731},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":733,"_path":734},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":736,"_path":737},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":739,"_path":740},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":742,"_path":743},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":745,"_path":746},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":748,"_path":749},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":751,"_path":752},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":754,"_path":755},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":757,"_path":758},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":760,"_path":761},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":763,"_path":764},"unity的addressables","/unity/2020-09-12-addressables",{"title":766,"_path":767},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":769,"_path":770},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":772,"_path":773},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":775,"_path":776},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":778,"_path":779},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":781,"_path":782},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":784,"_path":785},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":787,"_path":788},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":790,"_path":791},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":793,"_path":794},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":796,"_path":797},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":799,"_path":800},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":802,"_path":803},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":805,"_path":806},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":808,"_path":809},"简单保存工具","/unity/2020-11-13-simple-save",{"title":811,"_path":812},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":814,"_path":815},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":8,"_path":4},{"title":818,"_path":819},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":821,"_path":822},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":824,"_path":825},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":827,"_path":828},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":830,"_path":831},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":833,"_path":834},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":836,"_path":837},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":839,"_path":840},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":842,"_path":843},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":845,"_path":846},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":848,"_path":849},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":851,"_path":852},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":854,"_path":855},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":857,"_path":858},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":860,"_path":861},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":863,"_path":864},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":866,"_path":867},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039111]