[{"data":1,"prerenderedAt":730},["Reactive",2],{"content-query-tk1uhlX3sl":3,"content-navigation-8C37fagqQL":148},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":142,"_id":143,"_source":144,"_file":145,"_extension":146,"date":147},"/unity/2020-10-17-runtime-spriteatlas","unity",false,"","运行时打包图集","不管NGUI还是UGUI，图集都是在制作期间就生成了的，运行时是一张大图，这样做的好处在于我们可以在一定程度上去合并批次，但是图集通常在制作过程中，会分成commonatlas和系统atlas两类，一个界面prefab至少会用到两张图集，就会出现ABA的图集穿插打断合批的情况。还有一种游戏内容多了以后，各种图片也相应的变多，类似图标、commonatlas这种图集，一张2048x2048可能就放不下了，这时候如果用到两张2048x2048，就又出现了之前说的ABA的情况，而且内存上也上去了。这时候就出现了新的解决方案：动态图集。",{"type":11,"children":12,"toc":139},"root",[13,20,25,30,35,45,50,55,63,68,76,81,88,93,100,107,112],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":19,"value":24},"动态图集其实就是我们在打包的时候，图片是零散的，但是最后运行时，自动生成一张空白大图片，然后将界面上用到的零散的图片绘制在这个大图上，只将这个大图传入到gpu里头，达到合批的效果。由于手机界面制作过程中，标准分辨率往往是低于2048的，所以一张2048的动态图集就能完全解决一个界面的绘制工作了，但是动态图集也是有缺点的，动态图集因为将图集的生成过程延迟到了游戏运行时，所以必然会比静态图集多了图集生成的成本，当然这也是可以优化的。并且在目前的动态图集生成方案中，还没有出现公开的支持压缩的动态图集解决方案，所以动态图集目前看来只能是RGBA32的格式。还有一点，静态图集由于图片在生成过程中是确定的，可以将分配算法做得很好，图集的利用率也能做到很高。动态图集由于图片是动态生成的，在游戏运行过程中也会动态的增减图片，类似操作系统的内存分配算法，图集必然会出现碎片，图集的利用率也不可能做得很高。",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":19,"value":29},"说了那么多 就做个demo来看看动态图集的威力吧。",{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":19,"value":34},"这个demo只是简单的演示一下动态图集的主要思路，图片分配算法也只是将大图片分成128x128的一个一个分区，每个分区采用引用计数开控制是否在使用图片，用于维护整个UI系统的话，这种算法并不适用，但是如果只是用于icon图标的话，由于icon图标是固定尺寸的，所以这套算法就很合适了。下面上源码：",{"type":14,"tag":36,"props":37,"children":39},"pre",{"code":38},"\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n \npublic class NxSpriteInfo\n{\n    private int _x;\n    private int _y;\n    private Sprite _sprite;\n    private int _referenceCount;\n \n    private int _width;\n    private int _height;\n \n    public int x { get { return _x; } }\n    public int y { get { return _y; } }\n \n    public Sprite sprite\n    {\n        get { return _sprite; }\n    }\n \n    public NxSpriteInfo(int x, int y, Texture2D mainTexture, int startX, int startY, int width, int height)\n    {\n        _x = x;\n        _y = y;\n        _referenceCount = 0;\n \n        _width = width;\n        _height = height;\n \n        _sprite = Sprite.Create(mainTexture, new Rect(startX, startY, width, height), Vector2.one / 2f);\n    }\n \n    public bool IsEmpty()\n    {\n        return _referenceCount == 0;\n    }\n \n    public void AddReference()\n    {\n        ++_referenceCount;\n        Debug.Log(string.Format(\"[AddReference]Sprite:[{0},{1}] ref:{2}\", x, y, _referenceCount));\n    }\n \n    public void RemoveReference()\n    {\n        if (_referenceCount == 0) return;\n        --_referenceCount;\n \n        Debug.Log(string.Format(\"[RemoveReference]Sprite:[{0},{1}] ref:{2}\", x, y, _referenceCount));\n    }\n}\n \npublic class DynamicAtlas : MonoBehaviour\n{\n    private const int MAX_DYNAMIC_ATLAS_SIZE = 1024;\n    private const int DYNAMIC_ATLAS_CELL_SIZE = 128;\n    private const int DYNAMIC_ATLAS_CELL_COUNT = MAX_DYNAMIC_ATLAS_SIZE / DYNAMIC_ATLAS_CELL_SIZE;\n \n    [SerializeField]\n    private Texture2D _dynamicAtlasTex;\n \n    // 策略 分成格子\n    private List\u003CNxSpriteInfo> _spriteCacheList;\n    private Dictionary\u003Cint, int> _spriteRedirectMap = new Dictionary\u003Cint, int>();\n \n    private void Awake()\n    {\n        _dynamicAtlasTex = new Texture2D(MAX_DYNAMIC_ATLAS_SIZE, MAX_DYNAMIC_ATLAS_SIZE, TextureFormat.RGBA32, false);\n        _initCacheSprite();\n    }\n \n    private void _initCacheSprite()\n    {\n        int cellCount = DYNAMIC_ATLAS_CELL_COUNT;\n \n        _spriteCacheList = new List\u003CNxSpriteInfo>();\n        for (int i = 0; i \u003C cellCount; ++i)\n        {\n            for (int j = 0; j \u003C cellCount; ++j)\n            {\n                _spriteCacheList.Add(new NxSpriteInfo(i, j, \n                    _dynamicAtlasTex,\n                    i * DYNAMIC_ATLAS_CELL_SIZE, j * DYNAMIC_ATLAS_CELL_SIZE,\n                    DYNAMIC_ATLAS_CELL_SIZE, DYNAMIC_ATLAS_CELL_SIZE));\n            }\n        }\n    }\n \n    public Sprite GetOrLoadSprite(Sprite sprite)\n    {\n        // 拿缓存\n        var spriteInstanceID = sprite.GetInstanceID();\n        //Debug.Log(string.Format(\" name: {0} instanceid: {1}\", sprite.name, spriteInstanceID));\n        int index = -1;\n        if (_spriteRedirectMap.TryGetValue(spriteInstanceID, out index))\n        {\n            var newSprite = _spriteCacheList[index];\n            newSprite.AddReference();\n            return newSprite.sprite;\n        }\n \n        // 检查是不是本身就是动态生成的 如果是的话 什么都不用做\n        for (int i = 0; i \u003C _spriteCacheList.Count; ++i)\n        {\n            var sp = _spriteCacheList[i];\n            if (sp.sprite == sprite)\n            {\n                return sprite;\n            }\n        }\n \n        // 拿不到缓存就找个空格子新增\n        var emptySprite = GetEmptySprite();\n        if (emptySprite != null)\n        {\n            // GPU上直接操作 速度快 兼容性差\n            Graphics.CopyTexture(sprite.texture, 0, 0, (int)sprite.rect.x, (int)sprite.rect.y, (int)sprite.rect.width, (int)sprite.rect.height,\n                                _dynamicAtlasTex, 0, 0, (int)emptySprite.sprite.rect.x, (int)emptySprite.sprite.rect.y);\n \n            // 这里要先删除上一个的\n            index = GetIndex(emptySprite);\n            foreach (var redirect in _spriteRedirectMap)\n            {\n                if (redirect.Value == index)\n                {\n                    _spriteRedirectMap.Remove(redirect.Key);\n                    break;\n                }\n            }\n            _spriteRedirectMap.Add(spriteInstanceID, GetIndex(emptySprite));\n            emptySprite.AddReference();\n            emptySprite.sprite.name = sprite.name + \"(Dynamic)\";\n            return emptySprite.sprite;\n        }\n \n        // 找不到空格子就直接返回sprite\n        return sprite;\n    }\n \n    public void ReleaseSprite(Sprite sprite)\n    {\n        for (int i = 0; i \u003C _spriteCacheList.Count; ++i)\n        {\n            var sp = _spriteCacheList[i];\n            if (sp.sprite == sprite)\n            {\n                sp.RemoveReference();\n                break;\n            }\n        }\n    }\n \n    private NxSpriteInfo GetEmptySprite()\n    {\n        for (int i = 0; i \u003C _spriteCacheList.Count; ++i)\n        {\n            var sp = _spriteCacheList[i];\n            if (sp.IsEmpty())\n                return sp;\n        }\n        return null;\n    }\n \n    private int GetIndex(NxSpriteInfo sprite)\n    {\n        return sprite.x * DYNAMIC_ATLAS_CELL_COUNT + sprite.y;\n    }\n \n}\n",[40],{"type":14,"tag":41,"props":42,"children":43},"code",{"__ignoreMap":7},[44],{"type":19,"value":38},{"type":14,"tag":15,"props":46,"children":47},{},[48],{"type":19,"value":49},"关键代码都在GetOrLoadSprite这个函数里面了，其中最重要的一句就是Graphics.CopyTexture，这个是直接在GPU上操作图片，速度非常快，但是缺点是兼容性不是很好，也用备用方案，直接上内存copy再传到gpu上，会慢一些，demo这里就不做演示了，需要的自行查相关资料，我记得雨松似乎做过类似分享，当时应该是用于角色的贴图合并。",{"type":14,"tag":15,"props":51,"children":52},{},[53],{"type":19,"value":54},"另外配合这个DynamicAtlas，我也做了一个NxImage来配合它，简单继承了一下ugui的image，在awake和ondestory做了引用计数的加减，只是用于功能演示，真正用到项目中，应该会更加注重细节。",{"type":14,"tag":36,"props":56,"children":58},{"code":57},"\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing UnityEngine.UI;\n \npublic class NxImage : Image\n{\n    protected override void Start()\n    {\n        base.Start();\n \n        if (Application.isPlaying && this.sprite != null)\n        {\n            var dynamicAtlasGo = GameObject.Find(\"DynamicAtlas\");\n            if (dynamicAtlasGo == null)\n            {\n                GameObject go = new GameObject();\n                go.name = \"DynamicAtlas\";\n                go.AddComponent\u003CDynamicAtlas>();\n                dynamicAtlasGo = go;\n            }\n \n            if (dynamicAtlasGo != null)\n            {\n                var dynamicAtlas = dynamicAtlasGo.GetComponent\u003CDynamicAtlas>();\n                if (dynamicAtlas != null)\n                {\n                    this.sprite = dynamicAtlas.GetOrLoadSprite(this.sprite);\n                }\n            }\n        }\n    }\n \n    public void SetNewSprite(Sprite sp)\n    {\n        var dynamicAtlasGo = GameObject.Find(\"DynamicAtlas\");\n        if (dynamicAtlasGo != null)\n        {\n            var dynamicAtlas = dynamicAtlasGo.GetComponent\u003CDynamicAtlas>();\n            if (dynamicAtlas != null)\n            {\n                if (this.sprite != null)\n                    dynamicAtlas.ReleaseSprite(this.sprite);\n                this.sprite = dynamicAtlas.GetOrLoadSprite(sp);\n            }\n        }\n    }\n \n    protected override void OnDestroy()\n    {\n        base.OnDestroy();\n \n        if (this.sprite != null)\n        {\n            var dynamicAtlasGo = GameObject.Find(\"DynamicAtlas\");\n            if (dynamicAtlasGo != null)\n            {\n                var dynamicAtlas = dynamicAtlasGo.GetComponent\u003CDynamicAtlas>();\n                if (dynamicAtlas != null)\n                {\n                    dynamicAtlas.ReleaseSprite(this.sprite);\n                }\n            }\n        }\n \n    }\n}\n",[59],{"type":14,"tag":41,"props":60,"children":61},{"__ignoreMap":7},[62],{"type":19,"value":57},{"type":14,"tag":15,"props":64,"children":65},{},[66],{"type":19,"value":67},"简单挂了几个图片上去测试，效果如下：",{"type":14,"tag":15,"props":69,"children":70},{},[71],{"type":14,"tag":72,"props":73,"children":75},"img",{"alt":72,"src":74},"/images/2020-10-17-runtime-spriteatlas/20190531235426813.png",[],{"type":14,"tag":15,"props":77,"children":78},{},[79],{"type":19,"value":80},"运行后：",{"type":14,"tag":15,"props":82,"children":83},{},[84],{"type":14,"tag":72,"props":85,"children":87},{"alt":72,"src":86},"/images/2020-10-17-runtime-spriteatlas/20190531235500426.png",[],{"type":14,"tag":15,"props":89,"children":90},{},[91],{"type":19,"value":92},"可以看到drawcall明显降低了，我们再看看合并后真正用到的图片：",{"type":14,"tag":15,"props":94,"children":95},{},[96],{"type":14,"tag":72,"props":97,"children":99},{"alt":72,"src":98},"/images/2020-10-17-runtime-spriteatlas/20190531235616604.png",[],{"type":14,"tag":15,"props":101,"children":102},{},[103],{"type":14,"tag":72,"props":104,"children":106},{"alt":72,"src":105},"/images/2020-10-17-runtime-spriteatlas/20190531235636594.png",[],{"type":14,"tag":15,"props":108,"children":109},{},[110],{"type":19,"value":111},"以上就是动态生成图集的简单思路 仅供参考",{"type":14,"tag":113,"props":114,"children":115},"ul",{},[116,129],{"type":14,"tag":117,"props":118,"children":119},"li",{},[120],{"type":14,"tag":121,"props":122,"children":126},"a",{"href":123,"rel":124},"https://github.com/DaVikingCode/UnityRuntimeSpriteSheetsGenerator",[125],"nofollow",[127],{"type":19,"value":128},"DaVikingCode/UnityRuntimeSpriteSheetsGenerator: Unity – generate SpriteSheets at runtime! (github.com)",{"type":14,"tag":117,"props":130,"children":131},{},[132],{"type":14,"tag":121,"props":133,"children":136},{"href":134,"rel":135},"https://github.com/jintiao/RuntimeTextureAtlas",[125],[137],{"type":19,"value":138},"jintiao/RuntimeTextureAtlas: runtime texture atlas (github.com)",{"title":7,"searchDepth":140,"depth":140,"links":141},2,[],"markdown","content:unity:2020-10-17-runtime-spriteatlas.md","content","unity/2020-10-17-runtime-spriteatlas.md","md","2020-10-17",[149,159,286,335,387,400,512],{"title":150,"_path":151,"children":152},"Art","/art",[153,156],{"title":154,"_path":155},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":157,"_path":158},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":160,"_path":161,"children":162},"Dotnet","/dotnet",[163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268,271,274,277,280,283],{"title":164,"_path":165},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":167,"_path":168},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":170,"_path":171},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":173,"_path":174},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":176,"_path":177},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":179,"_path":180},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":182,"_path":183},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":185,"_path":186},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":188,"_path":189},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":191,"_path":192},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":194,"_path":195},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":197,"_path":198},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":200,"_path":201},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":203,"_path":204},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":206,"_path":207},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":209,"_path":210},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":212,"_path":213},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":215,"_path":216},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":218,"_path":219},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":221,"_path":222},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":224,"_path":225},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":227,"_path":228},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":230,"_path":231},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":233,"_path":234},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":236,"_path":237},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":239,"_path":240},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":242,"_path":243},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":245,"_path":246},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":248,"_path":249},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":251,"_path":252},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":254,"_path":255},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":257,"_path":258},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":260,"_path":261},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":263,"_path":264},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":266,"_path":267},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":269,"_path":270},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":272,"_path":273},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":275,"_path":276},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":278,"_path":279},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":281,"_path":282},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":284,"_path":285},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":287,"_path":288,"children":289},"Game","/game",[290,293,296,299,302,305,308,311,314,317,320,323,326,329,332],{"title":291,"_path":292},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":294,"_path":295},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":297,"_path":298},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":300,"_path":301},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":303,"_path":304},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":306,"_path":307},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":309,"_path":310},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":312,"_path":313},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":315,"_path":316},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":318,"_path":319},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":321,"_path":322},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":324,"_path":325},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":327,"_path":328},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":330,"_path":331},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":333,"_path":334},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":336,"_path":337,"children":338},"Gyj","/gyj",[339,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384],{"title":340,"_path":341},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":343,"_path":344},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":346,"_path":347},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":349,"_path":350},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":352,"_path":353},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":355,"_path":356},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":358,"_path":359},"玩法","/gyj/2022-08-22-wanfa",{"title":361,"_path":362},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":364,"_path":365},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":367,"_path":368},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":370,"_path":371},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":373,"_path":374},"门派内容相关","/gyj/2022-11-17-sect",{"title":376,"_path":377},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":379,"_path":380},"种植","/gyj/2022-12-01-zhongzhi",{"title":382,"_path":383},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":385,"_path":386},"跑商","/gyj/2023-11-01-paoshang",{"title":388,"_path":389,"children":390},"Js","/js",[391,394,397],{"title":392,"_path":393},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":395,"_path":396},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":398,"_path":399},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":401,"_path":402,"children":403},"Tool","/tool",[404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509],{"title":405,"_path":406},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":408,"_path":409},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":411,"_path":412},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":414,"_path":415},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":417,"_path":418},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":420,"_path":421},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":423,"_path":424},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":426,"_path":427},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":429,"_path":430},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":432,"_path":433},"mac下brew 使用","/tool/2020-01-13-brew",{"title":435,"_path":436},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":438,"_path":439},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":441,"_path":442},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":444,"_path":445},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":447,"_path":448},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":450,"_path":451},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":453,"_path":454},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":456,"_path":457},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":459,"_path":460},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":462,"_path":463},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":465,"_path":466},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":468,"_path":469},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":471,"_path":472},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":474,"_path":475},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":477,"_path":478},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":480,"_path":481},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":483,"_path":484},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":486,"_path":487},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":489,"_path":490},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":492,"_path":493},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":495,"_path":496},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":498,"_path":499},"rider的使用","/tool/2022-08-02-rider-use",{"title":501,"_path":502},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":504,"_path":505},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":507,"_path":508},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":510,"_path":511},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":513,"_path":514,"children":515},"Unity","/unity",[516,519,522,525,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,576,579,582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694,697,700,703,706,709,712,715,718,721,724,727],{"title":517,"_path":518},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":520,"_path":521},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":523,"_path":524},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":526,"_path":527},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":529,"_path":530},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":532,"_path":533},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":535,"_path":536},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":538,"_path":539},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":541,"_path":542},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":544,"_path":545},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":547,"_path":548},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":550,"_path":551},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":553,"_path":554},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":556,"_path":557},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":559,"_path":560},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":562,"_path":563},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":565,"_path":566},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":568,"_path":569},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":571,"_path":572},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":574,"_path":575},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":577,"_path":578},"技能系统","/unity/2020-02-15-skill-system",{"title":580,"_path":581},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":583,"_path":584},"角色状态设计","/unity/2020-02-17-character-states",{"title":586,"_path":587},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":589,"_path":590},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":592,"_path":593},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":595,"_path":596},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":598,"_path":599},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":601,"_path":602},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":604,"_path":605},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":607,"_path":608},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":610,"_path":611},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":613,"_path":614},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":616,"_path":617},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":619,"_path":620},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":622,"_path":623},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":625,"_path":626},"unity的addressables","/unity/2020-09-12-addressables",{"title":628,"_path":629},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":631,"_path":632},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":634,"_path":635},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":8,"_path":4},{"title":638,"_path":639},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":641,"_path":642},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":644,"_path":645},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":647,"_path":648},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":650,"_path":651},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":653,"_path":654},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":656,"_path":657},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":659,"_path":660},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":662,"_path":663},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":665,"_path":666},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":668,"_path":669},"简单保存工具","/unity/2020-11-13-simple-save",{"title":671,"_path":672},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":674,"_path":675},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":677,"_path":678},"ability","/unity/2020-11-16-dotssample",{"title":680,"_path":681},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":683,"_path":684},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":686,"_path":687},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":689,"_path":690},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":692,"_path":693},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":695,"_path":696},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":698,"_path":699},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":701,"_path":702},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":704,"_path":705},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":707,"_path":708},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":710,"_path":711},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":713,"_path":714},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":716,"_path":717},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":719,"_path":720},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":722,"_path":723},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":725,"_path":726},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":728,"_path":729},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039570]