[{"data":1,"prerenderedAt":899},["Reactive",2],{"content-query-iNz7lJyIwQ":3,"content-navigation-8C37fagqQL":317},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":311,"_id":312,"_source":313,"_file":314,"_extension":315,"date":316},"/unity/2020-11-12-sprite-image-diff","unity",false,"","Unity中Sprite和UI Image的区别","coffeecato写在前面：\n本文确实不错，作者用以说明自动生成网格的示图非常具有代表性，从drawcall的生成过程分析性能开销的重点，引出了overdraw和达到GPU像素填充率限制的原因，从中也可以看出作者对这个主题的理解颇有深度。查看作者的个人自述，居然是个2012年毕业的小伙子，后生可畏啊！翻译本文对自己也是个考验。\n英文水平捉急，如果错误请多多指正。",{"type":11,"children":12,"toc":308},"root",[13,20,49,54,59,76,91,99,104,109,114,119,136,145,150,158,163,168,198,203,208,234,239,248,257,265,270],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23,29,41,43],{"type":14,"tag":24,"props":25,"children":26},"em",{},[27],{"type":19,"value":28},"原文：",{"type":14,"tag":30,"props":31,"children":35},"a",{"href":32,"rel":33},"https://rubentorresbonet.wordpress.com/2016/05/26/unity-sprites-spriterenderer-vs-canvasrenderer-ui-image/",[34],"nofollow",[36],{"type":14,"tag":24,"props":37,"children":38},{},[39],{"type":19,"value":40},"UNITY SPRITES: SPRITERENDERER VS. CANVASRENDERER (UI IMAGE)",{"type":19,"value":42},"\n翻译已征得原作者同意：\n",{"type":14,"tag":44,"props":45,"children":48},"img",{"alt":46,"src":47},"这里写图片描述","/images/2020-11-12-sprite-image-diff/20171116103038856",[],{"type":14,"tag":15,"props":50,"children":51},{},[52],{"type":19,"value":53},"当在一个公司项目工作时，我被问到关于sprites(SpriteRenderer)和UI image(CanvasRenderer)的区别。我没找到多少相关的信息，所以我决定在公司准备一场介绍来帮助大家把两者的区别搞清楚。本文中你将会看到一个比当时的介绍更完整的版本。运行环境是Unity5.3.4f1.",{"type":14,"tag":15,"props":55,"children":56},{},[57],{"type":19,"value":58},"Sprites本质上是半透明texture，其中texture是在导入时被设置导入为sprites的。它们不是直接被应用于meshes,而是会应用于长方形/多边形（最后，它们始终是meshes，因为没有那么大的区别）。Sprites就是被渲染到2d/3d场景或者其他界面中的图片.",{"type":14,"tag":15,"props":60,"children":61},{},[62,68,70,74],{"type":14,"tag":63,"props":64,"children":65},"strong",{},[66],{"type":19,"value":67},"1.用法",{"type":19,"value":69},"\n在Unity中使用sprites很简单。只需将目标图片移动到assets文件夹下然后点击打开inspector settings.将texture type改为sprite(2D and UI),如下图：\n",{"type":14,"tag":44,"props":71,"children":73},{"alt":46,"src":72},"/images/2020-11-12-sprite-image-diff/20171114233841299",[],{"type":19,"value":75},"\n现在你该决定将图片当成sprite使用还是作为UI Image.但是如果考虑到渲染，你可能并不确定你想要使用哪种方式。我们将会在下一节描述两种方式间的区别；现在我们大概描述一下如何在Unity中创建它们。",{"type":14,"tag":15,"props":77,"children":78},{},[79,81,85,87],{"type":19,"value":80},"如果你想使用SpriteRenderer,将sprite从Project窗口移动到Hierarchy窗口或者Scene窗口。成功创建后的窗口应该像这样：\n",{"type":14,"tag":44,"props":82,"children":84},{"alt":46,"src":83},"/images/2020-11-12-sprite-image-diff/20171114233856654",[],{"type":19,"value":86},"\n如果你想创建UI Image,在Hierarchy中右键然后create new UI–>Image.这个控件需要canvas,如果没有canvas会自动创建一个。最后，你将看到：\n",{"type":14,"tag":44,"props":88,"children":90},{"alt":46,"src":89},"/images/2020-11-12-sprite-image-diff/20171114233911906",[],{"type":14,"tag":15,"props":92,"children":93},{},[94],{"type":14,"tag":63,"props":95,"children":96},{},[97],{"type":19,"value":98},"2.对比：SpriteRenderer vs CanvasRenderer",{"type":14,"tag":15,"props":100,"children":101},{},[102],{"type":19,"value":103},"在Hierarchy窗口,你可以把sprites随便放在哪。然而，UI Images不得不放在canvas下面。你可以通过transform移动其他obejcts那样移动sprites,但是images使用RectTransform来在界面系统中移动。",{"type":14,"tag":15,"props":105,"children":106},{},[107],{"type":19,"value":108},"使用默认材质时，Sprites是在”Queue” = “Transparent” “RenderType” = “Geometry”(原文： transparent geometry queue)模式下渲染的。UI Images也是在这种模式下渲染的，除非你使用了Overlay 模式渲染（coffeecato补充：Canvas的Render Mode）,这种情况下它将会通过Canvas.RenderOverlay渲染。你可能会猜到，这样在移动设备上的开销很大。我们稍后会讨论到。",{"type":14,"tag":15,"props":110,"children":111},{},[112],{"type":19,"value":113},"sprites和images的一个最重要的区别在于sprites支持网格的自动构造，而UI Image的网格始终由矩形构成。构造网格的原因将会在下一节讲到；我们将会看到它的重要性及它对性能的重大影响。",{"type":14,"tag":15,"props":115,"children":116},{},[117],{"type":19,"value":118},"最后，两种方式都可以通过使用sprite atlases来减少draw calls.",{"type":14,"tag":15,"props":120,"children":121},{},[122,124,128,130,134],{"type":19,"value":123},"下面的例子将会帮助看到二者之间的区别：\n",{"type":14,"tag":44,"props":125,"children":127},{"alt":46,"src":126},"/images/2020-11-12-sprite-image-diff/20171114233924452",[],{"type":19,"value":129},"\n上图中可以看到，UI Image创造了一个紧密的矩形来包裹sprite,而SpriteRenderer创造了一个能更好匹配将要渲染的sprite的网格。看看另一个例子：\n",{"type":14,"tag":44,"props":131,"children":133},{"alt":46,"src":132},"/images/2020-11-12-sprite-image-diff/20171114233938619",[],{"type":19,"value":135},"\n同样的情况出现这个例子中。但是网格这次看起来更复杂了，为什么呢？Unity尝试去为sprites构造最佳的网格来避免引入太多的多边形。可能有人会说这样的权衡到底是利是弊。",{"type":14,"tag":15,"props":137,"children":138},{},[139,141],{"type":19,"value":140},"如果我们导入一张拥有孤岛（coffeecato补充：原文是islands）的png，一张图片包含被透明区域分隔开的图形会发生什么情况？\n",{"type":14,"tag":44,"props":142,"children":144},{"alt":46,"src":143},"/images/2020-11-12-sprite-image-diff/20171114233951951",[],{"type":14,"tag":15,"props":146,"children":147},{},[148],{"type":19,"value":149},"上图中我们看到的情况很有意思，SpriteRenderer创造了两个子网格，一个对应一个孤岛；然后UI Image只是通过扩展矩形来覆盖整个图片。",{"type":14,"tag":15,"props":151,"children":152},{},[153],{"type":14,"tag":63,"props":154,"children":155},{},[156],{"type":19,"value":157},"3.性能",{"type":14,"tag":15,"props":159,"children":160},{},[161],{"type":19,"value":162},"你可能会猜到，上面例子显示的不同处理方式可能会导致性能的差异。当渲染很多对象时，差别会更明显（比如地形中的草，或者粒子特效）。下面我们来分析一下其中的原因。",{"type":14,"tag":15,"props":164,"children":165},{},[166],{"type":19,"value":167},"当渲染texture时，设置好顶点，索引，uv坐标，纹理数据和shader参数，然后向GPU发送数据，这个过程就是著名的draw call.随后，在图片最终显示之前，一些乱七八糟的事情在GPU发生。一个简单的渲染管线通常包括：",{"type":14,"tag":169,"props":170,"children":171},"ol",{},[172,178,183,188,193],{"type":14,"tag":173,"props":174,"children":175},"li",{},[176],{"type":19,"value":177},"CPU 发送一个draw命令到GPU",{"type":14,"tag":173,"props":179,"children":180},{},[181],{"type":19,"value":182},"GPU获取到绘制所需的所有信息",{"type":14,"tag":173,"props":184,"children":185},{},[186],{"type":19,"value":187},"几何图形通过顶点着色器和光栅化被转化为像素",{"type":14,"tag":173,"props":189,"children":190},{},[191],{"type":19,"value":192},"每个像素通过片元着色器被转化然后被写入到帧缓存一次或数次",{"type":14,"tag":173,"props":194,"children":195},{},[196],{"type":19,"value":197},"当一帧结束时，图形会显示在你的显示器上",{"type":14,"tag":15,"props":199,"children":200},{},[201],{"type":19,"value":202},"回到主题，SpriteRenderer和UI Image之间的区别是什么？显而易见，sprites的开销更大，因为它的几何数据更复杂。但是如果我告诉你顶点操作通常比片元操作开销小的多呢？尤其对于移动设备和半透明对象。",{"type":14,"tag":15,"props":204,"children":205},{},[206],{"type":19,"value":207},"在很多引擎包括Unity中，半透明材质是由后向前渲染的。那意味着，最远的物体（从camera出发）最先渲染，这样alpha混合操作才能像预期那样工作。对于不透明材质，渲染正好反过来这样便于我们剔除不可见物体。",{"type":14,"tag":15,"props":209,"children":210},{},[211,213,218,220,225,227,232],{"type":19,"value":212},"像素着色器会被渲染sprite中的每一个像素都执行，因此，当存在较大的图形时（相对屏幕尺寸），片元着色器将会在很多像素上执行。问题在于，当透明物体在视锥体内时没有很有效的方法将它们剔除，因此你将会渲染所有的半透明物体即使其中的大多数最终都不可见。所以你会发现同一个像素会渲染多次，在帧缓存中也会重写多次。这个问题通常被称为",{"type":14,"tag":63,"props":214,"children":215},{},[216],{"type":19,"value":217},"overdraw",{"type":19,"value":219},".同样地，由于这种现象带来了",{"type":14,"tag":63,"props":221,"children":222},{},[223],{"type":19,"value":224},"内存带宽",{"type":19,"value":226},"的浪费，会很快达到GPU ",{"type":14,"tag":63,"props":228,"children":229},{},[230],{"type":19,"value":231},"像素填充率",{"type":19,"value":233},"的限制，这种情况是移动设备应当极力避免的。这就是问题的关键。",{"type":14,"tag":15,"props":235,"children":236},{},[237],{"type":19,"value":238},"如果你确实理解了上面一段，你将会弄明白SpriteRenderer和CanvasRenderer是多么的不同。前者通过构造网格清除了不必要的透明像素（因此，避免了执行开销巨大的片元着色器，从而避免了overdraw），然而UI Image创建了一个简单的网格很可能会引起很多overdraw。你需要在复杂的几何图形和更多的片操作之间做一个权衡。",{"type":14,"tag":15,"props":240,"children":241},{},[242,244],{"type":19,"value":243},"你应该会想到使用sprite atlases，因为spritest通常数量很大同时尺寸很小。这会导致绘制sprites有很多drawcall.同样地，对于较大的图形，图形压缩也是不错的方法。\n",{"type":14,"tag":44,"props":245,"children":247},{"alt":46,"src":246},"/images/2020-11-12-sprite-image-diff/20171114234009365",[],{"type":14,"tag":15,"props":249,"children":250},{},[251,253],{"type":19,"value":252},"你可以通过Atlas Packer很方便的创建sprite atlas.同时，有时自动构造的网格性能上并不好你也无法控制它，因此你可能会使用一些性能更好的插件比如ShoeBox 或者 TexturePacker.\n",{"type":14,"tag":44,"props":254,"children":256},{"alt":46,"src":255},"/images/2020-11-12-sprite-image-diff/20171114234059641",[],{"type":14,"tag":15,"props":258,"children":259},{},[260],{"type":14,"tag":63,"props":261,"children":262},{},[263],{"type":19,"value":264},"4.结论",{"type":14,"tag":15,"props":266,"children":267},{},[268],{"type":19,"value":269},"当下次再遇到sprites时，不妨考虑下面的建议：",{"type":14,"tag":169,"props":271,"children":272},{},[273,278,283,288,293,298,303],{"type":14,"tag":173,"props":274,"children":275},{},[276],{"type":19,"value":277},"如果sprites的数量不多，想用什么用什么。如果拥有上百个sprites，重新读读本文。",{"type":14,"tag":173,"props":279,"children":280},{},[281],{"type":19,"value":282},"使用profiler和frame debugger来搞清楚发生的状况。",{"type":14,"tag":173,"props":284,"children":285},{},[286],{"type":19,"value":287},"避免使用透明，尽量使用不透明的物体替代透明物体。",{"type":14,"tag":173,"props":289,"children":290},{},[291],{"type":19,"value":292},"避免在屏幕上渲染尺寸较大的sprites，这会引起更多的overdraw。你可以通过在Scene View中选择rendering mode为Overdraw来查看overdraw的情况。这对于粒子特效很关键。",{"type":14,"tag":173,"props":294,"children":295},{},[296],{"type":19,"value":297},"选择更复杂的几何体而不是更多的像素，尤其对于移动设备。可以通过选择Scene View中的Shading Mode为shaded wireframe来查看。",{"type":14,"tag":173,"props":299,"children":300},{},[301],{"type":19,"value":302},"如果需要对界面进行较多的位置操作（比如content fitter, vertical groups等）选择UI Images.",{"type":14,"tag":173,"props":304,"children":305},{},[306],{"type":19,"value":307},"减少渲染区域的分辨率来查看性能有没有实质的提升，通过这种方法来判断是否达到了像素填充率的限制。",{"title":7,"searchDepth":309,"depth":309,"links":310},2,[],"markdown","content:unity:2020-11-12-sprite-image-diff.md","content","unity/2020-11-12-sprite-image-diff.md","md","2020-11-12",[318,328,455,504,556,569,681],{"title":319,"_path":320,"children":321},"Art","/art",[322,325],{"title":323,"_path":324},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":326,"_path":327},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":329,"_path":330,"children":331},"Dotnet","/dotnet",[332,335,338,341,344,347,350,353,356,359,362,365,368,371,374,377,380,383,386,389,392,395,398,401,404,407,410,413,416,419,422,425,428,431,434,437,440,443,446,449,452],{"title":333,"_path":334},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":336,"_path":337},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":339,"_path":340},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":342,"_path":343},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":345,"_path":346},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":348,"_path":349},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":351,"_path":352},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":354,"_path":355},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":357,"_path":358},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":360,"_path":361},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":363,"_path":364},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":366,"_path":367},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":369,"_path":370},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":372,"_path":373},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":375,"_path":376},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":378,"_path":379},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":381,"_path":382},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":384,"_path":385},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":387,"_path":388},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":390,"_path":391},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":393,"_path":394},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":396,"_path":397},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":399,"_path":400},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":402,"_path":403},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":405,"_path":406},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":408,"_path":409},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":411,"_path":412},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":414,"_path":415},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":417,"_path":418},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":420,"_path":421},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":423,"_path":424},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":426,"_path":427},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":429,"_path":430},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":432,"_path":433},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":435,"_path":436},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":438,"_path":439},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":441,"_path":442},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":444,"_path":445},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":447,"_path":448},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":450,"_path":451},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":453,"_path":454},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":456,"_path":457,"children":458},"Game","/game",[459,462,465,468,471,474,477,480,483,486,489,492,495,498,501],{"title":460,"_path":461},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":463,"_path":464},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":466,"_path":467},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":469,"_path":470},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":472,"_path":473},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":475,"_path":476},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":478,"_path":479},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":481,"_path":482},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":484,"_path":485},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":487,"_path":488},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":490,"_path":491},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":493,"_path":494},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":496,"_path":497},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":499,"_path":500},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":502,"_path":503},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":505,"_path":506,"children":507},"Gyj","/gyj",[508,511,514,517,520,523,526,529,532,535,538,541,544,547,550,553],{"title":509,"_path":510},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":512,"_path":513},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":515,"_path":516},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":518,"_path":519},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":521,"_path":522},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":524,"_path":525},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":527,"_path":528},"玩法","/gyj/2022-08-22-wanfa",{"title":530,"_path":531},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":533,"_path":534},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":536,"_path":537},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":539,"_path":540},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":542,"_path":543},"门派内容相关","/gyj/2022-11-17-sect",{"title":545,"_path":546},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":548,"_path":549},"种植","/gyj/2022-12-01-zhongzhi",{"title":551,"_path":552},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":554,"_path":555},"跑商","/gyj/2023-11-01-paoshang",{"title":557,"_path":558,"children":559},"Js","/js",[560,563,566],{"title":561,"_path":562},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":564,"_path":565},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":567,"_path":568},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":570,"_path":571,"children":572},"Tool","/tool",[573,576,579,582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678],{"title":574,"_path":575},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":577,"_path":578},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":580,"_path":581},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":583,"_path":584},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":586,"_path":587},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":589,"_path":590},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":592,"_path":593},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":595,"_path":596},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":598,"_path":599},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":601,"_path":602},"mac下brew 使用","/tool/2020-01-13-brew",{"title":604,"_path":605},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":607,"_path":608},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":610,"_path":611},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":613,"_path":614},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":616,"_path":617},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":619,"_path":620},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":622,"_path":623},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":625,"_path":626},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":628,"_path":629},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":631,"_path":632},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":634,"_path":635},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":637,"_path":638},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":640,"_path":641},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":643,"_path":644},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":646,"_path":647},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":649,"_path":650},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":652,"_path":653},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":655,"_path":656},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":658,"_path":659},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":661,"_path":662},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":664,"_path":665},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":667,"_path":668},"rider的使用","/tool/2022-08-02-rider-use",{"title":670,"_path":671},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":673,"_path":674},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":676,"_path":677},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":679,"_path":680},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":682,"_path":683,"children":684},"Unity","/unity",[685,688,691,694,697,700,703,706,709,712,715,718,721,724,727,730,733,736,739,742,745,748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832,835,836,839,842,845,848,851,854,857,860,863,866,869,872,875,878,881,884,887,890,893,896],{"title":686,"_path":687},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":689,"_path":690},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":692,"_path":693},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":695,"_path":696},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":698,"_path":699},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":701,"_path":702},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":704,"_path":705},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":707,"_path":708},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":710,"_path":711},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":713,"_path":714},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":716,"_path":717},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":719,"_path":720},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":722,"_path":723},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":725,"_path":726},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":728,"_path":729},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":731,"_path":732},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":734,"_path":735},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":737,"_path":738},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":740,"_path":741},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":743,"_path":744},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":746,"_path":747},"技能系统","/unity/2020-02-15-skill-system",{"title":749,"_path":750},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":752,"_path":753},"角色状态设计","/unity/2020-02-17-character-states",{"title":755,"_path":756},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":758,"_path":759},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":761,"_path":762},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":764,"_path":765},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":767,"_path":768},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":770,"_path":771},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":773,"_path":774},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":776,"_path":777},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":779,"_path":780},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":782,"_path":783},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":785,"_path":786},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":788,"_path":789},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":791,"_path":792},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":794,"_path":795},"unity的addressables","/unity/2020-09-12-addressables",{"title":797,"_path":798},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":800,"_path":801},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":803,"_path":804},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":806,"_path":807},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":809,"_path":810},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":812,"_path":813},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":815,"_path":816},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":818,"_path":819},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":821,"_path":822},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":824,"_path":825},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":827,"_path":828},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":830,"_path":831},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":833,"_path":834},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":8,"_path":4},{"title":837,"_path":838},"简单保存工具","/unity/2020-11-13-simple-save",{"title":840,"_path":841},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":843,"_path":844},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":846,"_path":847},"ability","/unity/2020-11-16-dotssample",{"title":849,"_path":850},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":852,"_path":853},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":855,"_path":856},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":858,"_path":859},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":861,"_path":862},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":864,"_path":865},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":867,"_path":868},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":870,"_path":871},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":873,"_path":874},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":876,"_path":877},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":879,"_path":880},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":882,"_path":883},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":885,"_path":886},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":888,"_path":889},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":891,"_path":892},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":894,"_path":895},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":897,"_path":898},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779039184]