[{"data":1,"prerenderedAt":1058},["Reactive",2],{"content-query-WC41BUlU29":3,"content-navigation-8C37fagqQL":476},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":470,"_id":471,"_source":472,"_file":473,"_extension":474,"date":475},"/unity/2021-06-14-unity-render-order","unity",false,"","UNITY的渲染顺序","工欲善其事，必先利其器。为了搞清楚 Unity 的渲染顺序，首先我们要准备一个能方便修改 SortingLayer 以及 RenderQueue 的工具，下面这个编辑器脚本可以满足这个需求：",{"type":11,"children":12,"toc":467},"root",[13,20,32,37,45,58,65,70,75,85,89,96,102,107,122,127,134,139,147,152,154,277,282,288,293,298,303,312,318,323,329,334,339,350,362,374,384,395,401,411,427,435,441,452,457],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":15,"props":21,"children":22},{},[23],{"type":14,"tag":24,"props":25,"children":29},"a",{"href":26,"rel":27},"https://gist.github.com/qxsoftware/499135b6482ca57727c69e11b91a12bf",[28],"nofollow",[30],{"type":19,"value":31},"MeshRendererInspector.cs",{"type":14,"tag":15,"props":33,"children":34},{},[35],{"type":19,"value":36},"效果如下：",{"type":14,"tag":15,"props":38,"children":39},{},[40],{"type":14,"tag":41,"props":42,"children":44},"img",{"alt":41,"src":43},"/images/2021-06-14-unity-render-order/mesh-renderer-inspector.jpg",[],{"type":14,"tag":15,"props":46,"children":47},{},[48,50,56],{"type":19,"value":49},"如何添加新的 SortingLayer？请通过 ",{"type":14,"tag":51,"props":52,"children":53},"strong",{},[54],{"type":19,"value":55},"Edit/Project Settings/Tags and Layers",{"type":19,"value":57}," 菜单选项打开：",{"type":14,"tag":15,"props":59,"children":60},{},[61],{"type":14,"tag":41,"props":62,"children":64},{"alt":41,"src":63},"/images/2021-06-14-unity-render-order/tags-layers.jpg",[],{"type":14,"tag":15,"props":66,"children":67},{},[68],{"type":19,"value":69},"然后添加三个 Sorting Layer，如上图所示。注意，Sorting Layer 添加后是可以拖动调整顺序的。",{"type":14,"tag":15,"props":71,"children":72},{},[73],{"type":19,"value":74},"便捷修改 Camera 的 opaqueSortMode 和 transparencySortMode：",{"type":14,"tag":15,"props":76,"children":77},{},[78],{"type":14,"tag":24,"props":79,"children":82},{"href":80,"rel":81},"https://gist.github.com/qxsoftware/1821915377e333e45f7a632ae07e64aa",[28],[83],{"type":19,"value":84},"CameraInspector.cs",{"type":14,"tag":15,"props":86,"children":87},{},[88],{"type":19,"value":36},{"type":14,"tag":15,"props":90,"children":91},{},[92],{"type":14,"tag":41,"props":93,"children":95},{"alt":41,"src":94},"/images/2021-06-14-unity-render-order/sort-mode.jpg",[],{"type":14,"tag":97,"props":98,"children":100},"h4",{"id":99},"实际测试",[101],{"type":19,"value":99},{"type":14,"tag":15,"props":103,"children":104},{},[105],{"type":19,"value":106},"测试之前首先明确两点：",{"type":14,"tag":108,"props":109,"children":110},"ul",{},[111,117],{"type":14,"tag":112,"props":113,"children":114},"li",{},[115],{"type":19,"value":116},"什么因素影响绘制顺序",{"type":14,"tag":112,"props":118,"children":119},{},[120],{"type":19,"value":121},"深度缓冲区对绘制结果的影响",{"type":14,"tag":15,"props":123,"children":124},{},[125],{"type":19,"value":126},"为了弄清楚第一点，什么因素影响绘制顺序，我们需要把 ZWrite 关闭。同时结合 Unity Frame Debugger来观察绘制顺序。",{"type":14,"tag":128,"props":129,"children":131},"h5",{"id":130},"render-queue",[132],{"type":19,"value":133},"Render Queue",{"type":14,"tag":15,"props":135,"children":136},{},[137],{"type":19,"value":138},"RenderQueue 是材质（Material）的关键属性，当我们在 Unity 中创建一个材质后，Unity 会给这个材质设置一个默认 Shader，然后这个材质的 RenderQueue 被改为其 Shader 中设定的 RenderQueue。如果给这个材质球换了 Shader，Unity 会更新它的 RenderQueue（但是请注意，假如当前材质的 Shader 的 RenderQueue 是 3000，然后你修改 Shader 让其 RenderQueue 变成 3100，对应材质球的 RenderQueue 并不会更新！）。",{"type":14,"tag":15,"props":140,"children":141},{},[142],{"type":14,"tag":51,"props":143,"children":144},{},[145],{"type":19,"value":146},"Unity 最终以 Material 的 RenderQueue 为准。",{"type":14,"tag":15,"props":148,"children":149},{},[150],{"type":19,"value":151},"Unity 内置了几个 RenderQueue 的字面值：",{"type":19,"value":153},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":14,"tag":155,"props":156,"children":157},"table",{},[158,182],{"type":14,"tag":159,"props":160,"children":161},"thead",{},[162],{"type":14,"tag":163,"props":164,"children":165},"tr",{},[166,172,177],{"type":14,"tag":167,"props":168,"children":169},"th",{},[170],{"type":19,"value":171},"RenderQueue",{"type":14,"tag":167,"props":173,"children":174},{},[175],{"type":19,"value":176},"值",{"type":14,"tag":167,"props":178,"children":179},{},[180],{"type":19,"value":181},"说明",{"type":14,"tag":183,"props":184,"children":185},"tbody",{},[186,205,223,241,259],{"type":14,"tag":163,"props":187,"children":188},{},[189,195,200],{"type":14,"tag":190,"props":191,"children":192},"td",{},[193],{"type":19,"value":194},"Background",{"type":14,"tag":190,"props":196,"children":197},{},[198],{"type":19,"value":199},"1000",{"type":14,"tag":190,"props":201,"children":202},{},[203],{"type":19,"value":204},"这个渲染队列最先渲染，一般用于渲染背景",{"type":14,"tag":163,"props":206,"children":207},{},[208,213,218],{"type":14,"tag":190,"props":209,"children":210},{},[211],{"type":19,"value":212},"Geometry(默认值)",{"type":14,"tag":190,"props":214,"children":215},{},[216],{"type":19,"value":217},"2000",{"type":14,"tag":190,"props":219,"children":220},{},[221],{"type":19,"value":222},"这个渲染队列是大多数物体的默认队列，用于渲染不透明物体",{"type":14,"tag":163,"props":224,"children":225},{},[226,231,236],{"type":14,"tag":190,"props":227,"children":228},{},[229],{"type":19,"value":230},"AlphaTest",{"type":14,"tag":190,"props":232,"children":233},{},[234],{"type":19,"value":235},"2450",{"type":14,"tag":190,"props":237,"children":238},{},[239],{"type":19,"value":240},"使用了 AlphaTest 的物体在这个队列渲染，当所有的不透明物体都渲染完了再渲染这个，有助于提升性能",{"type":14,"tag":163,"props":242,"children":243},{},[244,249,254],{"type":14,"tag":190,"props":245,"children":246},{},[247],{"type":19,"value":248},"Transparent",{"type":14,"tag":190,"props":250,"children":251},{},[252],{"type":19,"value":253},"3000",{"type":14,"tag":190,"props":255,"children":256},{},[257],{"type":19,"value":258},"在 Geometry 和 AlphaTest 之后、从后往前渲染，所有的半透明物体都应该在这里渲染",{"type":14,"tag":163,"props":260,"children":261},{},[262,267,272],{"type":14,"tag":190,"props":263,"children":264},{},[265],{"type":19,"value":266},"Overlay",{"type":14,"tag":190,"props":268,"children":269},{},[270],{"type":19,"value":271},"4000",{"type":14,"tag":190,"props":273,"children":274},{},[275],{"type":19,"value":276},"在之前的所有渲染队列都渲染完了之后渲染，比如镜头光晕",{"type":14,"tag":15,"props":278,"children":279},{},[280],{"type":19,"value":281},"可以看到，RenderQueue 越大，渲染越靠后。",{"type":14,"tag":128,"props":283,"children":285},{"id":284},"cameraopaquesortmode",[286],{"type":19,"value":287},"Camera.opaqueSortMode",{"type":14,"tag":15,"props":289,"children":290},{},[291],{"type":19,"value":292},"默认情况下，不透明物体被放在粗略分隔的从前往后排布的桶中，GPU 按照这种方式渲染能节省性能。但是也有部分 GPU 不这么干，比如 PowerVR。Camera.opaqueSortMode 这个值的默认值是 Dafault，根据不同硬件平台，这个值有可能是：OpaqueSortMode.FrontToBack 或者 OpaqueSortMode.NoDistanceSort。我们也可以主动设置这个值为某一种。比如为了减少 CPU 消耗，把这个值设置为 NoDistanceSort。",{"type":14,"tag":15,"props":294,"children":295},{},[296],{"type":19,"value":297},"所以，不透明物体大部分情况下是按照从前往后渲染，也就是离相机越近，越先渲染。",{"type":14,"tag":15,"props":299,"children":300},{},[301],{"type":19,"value":302},"如果是手动选择了 FrontToBack，就是从前往后渲染；如果是 NoDistanceSort，就是从后往前渲染。",{"type":14,"tag":304,"props":305,"children":306},"blockquote",{},[307],{"type":14,"tag":15,"props":308,"children":309},{},[310],{"type":19,"value":311},"根据实际测试，渲染的顺序并不是完全按照物体几何中心离相机的距离进行排序，而是一个近似的排序。",{"type":14,"tag":128,"props":313,"children":315},{"id":314},"cameratransparencysortmode",[316],{"type":19,"value":317},"Camera.transparencySortMode",{"type":14,"tag":15,"props":319,"children":320},{},[321],{"type":19,"value":322},"按照我测试用的 Unity5.3.4f1，修改这个值也会影响不透明物体的渲染顺序。所以这个东西很可能不重要，而且有 bug。",{"type":14,"tag":128,"props":324,"children":326},{"id":325},"sortinglayer",[327],{"type":19,"value":328},"SortingLayer",{"type":14,"tag":15,"props":330,"children":331},{},[332],{"type":19,"value":333},"SortingLayer 拥有最高优先级，如果 SortingLayer 不同，则首先按照 SortingLayer 排序；如果 SortingLayer 相同，再按照 RenderQueue 排序。",{"type":14,"tag":15,"props":335,"children":336},{},[337],{"type":19,"value":338},"如下图所示，有 6 个立方体，分别按顺序在摄像机前排开：",{"type":14,"tag":15,"props":340,"children":341},{},[342,346],{"type":14,"tag":41,"props":343,"children":345},{"alt":41,"src":344},"/images/2021-06-14-unity-render-order/preview.png",[],{"type":14,"tag":41,"props":347,"children":349},{"alt":41,"src":348},"/images/2021-06-14-unity-render-order/cubes.jpg",[],{"type":14,"tag":15,"props":351,"children":352},{},[353,355,360],{"type":19,"value":354},"其中，g1 组的立方体 SortingLayer 都是 Layer3，RenderQueue 都是 3000；g2 组的立方体 SortingLayer 都是 Layer2，RenderQueue 都是3500，最终渲染顺序是：",{"type":14,"tag":51,"props":356,"children":357},{},[358],{"type":19,"value":359},"g2m1 g2m2 g2m3 g1m1 g1m2 g1m3",{"type":19,"value":361},"。",{"type":14,"tag":15,"props":363,"children":364},{},[365,367,372],{"type":19,"value":366},"直观地说，就是 SortingLayer 越大，则物体",{"type":14,"tag":51,"props":368,"children":369},{},[370],{"type":19,"value":371},"层级",{"type":19,"value":373},"越高。SortingLayer 默认只有一个：Default，越往后添加的 SortingLayer 越大。",{"type":14,"tag":15,"props":375,"children":376},{},[377,379,383],{"type":19,"value":378},"现在把 g1 组的立方体 SortingLayer 改成 Layer2，RenderQueue 改成 3600，最终渲染顺序还是：",{"type":14,"tag":51,"props":380,"children":381},{},[382],{"type":19,"value":359},{"type":19,"value":361},{"type":14,"tag":15,"props":385,"children":386},{},[387,389,393],{"type":19,"value":388},"直观地说，SortingLayer 相同的前提下，RenderQueue 越大，则物体",{"type":14,"tag":51,"props":390,"children":391},{},[392],{"type":19,"value":371},{"type":19,"value":394},"越高。",{"type":14,"tag":128,"props":396,"children":398},{"id":397},"sortingorder",[399],{"type":19,"value":400},"SortingOrder",{"type":14,"tag":15,"props":402,"children":403},{},[404,406,410],{"type":19,"value":405},"如果 SortingLayer 和 RenderQueue 都一样，则 SortingOrder 越大，则物体",{"type":14,"tag":51,"props":407,"children":408},{},[409],{"type":19,"value":371},{"type":19,"value":394},{"type":14,"tag":15,"props":412,"children":413},{},[414,416,420,422,426],{"type":19,"value":415},"如果只是 SortingLayer 一样，RenderQueue 和 SortingOrder 都不一样，则物体的",{"type":14,"tag":51,"props":417,"children":418},{},[419],{"type":19,"value":371},{"type":19,"value":421},"由 RenderQueue 和 SortingOrder 之和决定，相加之和越大，",{"type":14,"tag":51,"props":423,"children":424},{},[425],{"type":19,"value":371},{"type":19,"value":394},{"type":14,"tag":304,"props":428,"children":429},{},[430],{"type":14,"tag":15,"props":431,"children":432},{},[433],{"type":19,"value":434},"以上结论是通过 Frame Debugger 单步执行得出的。",{"type":14,"tag":128,"props":436,"children":438},{"id":437},"cameradepth",[439],{"type":19,"value":440},"Camera.depth",{"type":14,"tag":15,"props":442,"children":443},{},[444,446,450],{"type":19,"value":445},"还有一个很常用的调整渲染顺序的选项：摄像机深度。摄像机深度是优先级最高的选项，深度值越大，物体",{"type":14,"tag":51,"props":447,"children":448},{},[449],{"type":19,"value":371},{"type":19,"value":451},"越高。常用的比如 NGUI 就是用一个单独的相机（深度值比渲染场景的相机大）来渲染 UI，这样就保证 UI 在所有东西上方。",{"type":14,"tag":15,"props":453,"children":454},{},[455],{"type":19,"value":456},"参考资料：",{"type":14,"tag":15,"props":458,"children":459},{},[460],{"type":14,"tag":24,"props":461,"children":464},{"href":462,"rel":463},"https://jakobknudsen.wordpress.com/2013/07/20/transparency-and-sorting/",[28],[465],{"type":19,"value":466},"Transparency and sorting in Unity",{"title":7,"searchDepth":468,"depth":468,"links":469},2,[],"markdown","content:unity:2021-06-14-unity-render-order.md","content","unity/2021-06-14-unity-render-order.md","md","2021-06-14",[477,487,614,663,715,728,840],{"title":478,"_path":479,"children":480},"Art","/art",[481,484],{"title":482,"_path":483},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":485,"_path":486},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":488,"_path":489,"children":490},"Dotnet","/dotnet",[491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572,575,578,581,584,587,590,593,596,599,602,605,608,611],{"title":492,"_path":493},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":495,"_path":496},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":498,"_path":499},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":501,"_path":502},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":504,"_path":505},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":507,"_path":508},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":510,"_path":511},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":513,"_path":514},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":516,"_path":517},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":519,"_path":520},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":522,"_path":523},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":525,"_path":526},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":528,"_path":529},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":531,"_path":532},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":534,"_path":535},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":537,"_path":538},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":540,"_path":541},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":543,"_path":544},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":546,"_path":547},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":549,"_path":550},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":552,"_path":553},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":555,"_path":556},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":558,"_path":559},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":561,"_path":562},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":564,"_path":565},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":567,"_path":568},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":570,"_path":571},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":573,"_path":574},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":576,"_path":577},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":579,"_path":580},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":582,"_path":583},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":585,"_path":586},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":588,"_path":589},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":591,"_path":592},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":594,"_path":595},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":597,"_path":598},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":600,"_path":601},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":603,"_path":604},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":606,"_path":607},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":609,"_path":610},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":612,"_path":613},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":615,"_path":616,"children":617},"Game","/game",[618,621,624,627,630,633,636,639,642,645,648,651,654,657,660],{"title":619,"_path":620},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":622,"_path":623},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":625,"_path":626},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":628,"_path":629},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":631,"_path":632},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":634,"_path":635},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":637,"_path":638},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":640,"_path":641},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":643,"_path":644},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":646,"_path":647},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":649,"_path":650},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":652,"_path":653},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":655,"_path":656},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":658,"_path":659},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":661,"_path":662},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":664,"_path":665,"children":666},"Gyj","/gyj",[667,670,673,676,679,682,685,688,691,694,697,700,703,706,709,712],{"title":668,"_path":669},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":671,"_path":672},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":674,"_path":675},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":677,"_path":678},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":680,"_path":681},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":683,"_path":684},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":686,"_path":687},"玩法","/gyj/2022-08-22-wanfa",{"title":689,"_path":690},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":692,"_path":693},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":695,"_path":696},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":698,"_path":699},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":701,"_path":702},"门派内容相关","/gyj/2022-11-17-sect",{"title":704,"_path":705},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":707,"_path":708},"种植","/gyj/2022-12-01-zhongzhi",{"title":710,"_path":711},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":713,"_path":714},"跑商","/gyj/2023-11-01-paoshang",{"title":716,"_path":717,"children":718},"Js","/js",[719,722,725],{"title":720,"_path":721},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":723,"_path":724},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":726,"_path":727},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":729,"_path":730,"children":731},"Tool","/tool",[732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786,789,792,795,798,801,804,807,810,813,816,819,822,825,828,831,834,837],{"title":733,"_path":734},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":736,"_path":737},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":739,"_path":740},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":742,"_path":743},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":745,"_path":746},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":748,"_path":749},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":751,"_path":752},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":754,"_path":755},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":757,"_path":758},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":760,"_path":761},"mac下brew 使用","/tool/2020-01-13-brew",{"title":763,"_path":764},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":766,"_path":767},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":769,"_path":770},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":772,"_path":773},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":775,"_path":776},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":778,"_path":779},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":781,"_path":782},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":784,"_path":785},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":787,"_path":788},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":790,"_path":791},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":793,"_path":794},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":796,"_path":797},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":799,"_path":800},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":802,"_path":803},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":805,"_path":806},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":808,"_path":809},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":811,"_path":812},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":814,"_path":815},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":817,"_path":818},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":820,"_path":821},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":823,"_path":824},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":826,"_path":827},"rider的使用","/tool/2022-08-02-rider-use",{"title":829,"_path":830},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":832,"_path":833},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":835,"_path":836},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":838,"_path":839},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":841,"_path":842,"children":843},"Unity","/unity",[844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901,904,907,910,913,916,919,922,925,928,931,934,937,940,943,946,949,952,955,958,961,964,967,970,973,976,979,982,985,988,991,994,997,1000,1003,1006,1009,1012,1015,1018,1021,1024,1027,1030,1033,1036,1037,1040,1043,1046,1049,1052,1055],{"title":845,"_path":846},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":848,"_path":849},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":851,"_path":852},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":854,"_path":855},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":857,"_path":858},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":860,"_path":861},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":863,"_path":864},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":866,"_path":867},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":869,"_path":870},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":872,"_path":873},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":875,"_path":876},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":878,"_path":879},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":881,"_path":882},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":884,"_path":885},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":887,"_path":888},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":890,"_path":891},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":893,"_path":894},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":896,"_path":897},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":899,"_path":900},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":902,"_path":903},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":905,"_path":906},"技能系统","/unity/2020-02-15-skill-system",{"title":908,"_path":909},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":911,"_path":912},"角色状态设计","/unity/2020-02-17-character-states",{"title":914,"_path":915},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":917,"_path":918},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":920,"_path":921},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":923,"_path":924},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":926,"_path":927},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":929,"_path":930},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":932,"_path":933},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":935,"_path":936},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":938,"_path":939},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":941,"_path":942},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":944,"_path":945},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":947,"_path":948},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":950,"_path":951},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":953,"_path":954},"unity的addressables","/unity/2020-09-12-addressables",{"title":956,"_path":957},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":959,"_path":960},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":962,"_path":963},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":965,"_path":966},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":968,"_path":969},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":971,"_path":972},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":974,"_path":975},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":977,"_path":978},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":980,"_path":981},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":983,"_path":984},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":986,"_path":987},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":989,"_path":990},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":992,"_path":993},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":995,"_path":996},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":998,"_path":999},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1001,"_path":1002},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1004,"_path":1005},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1007,"_path":1008},"ability","/unity/2020-11-16-dotssample",{"title":1010,"_path":1011},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1013,"_path":1014},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1016,"_path":1017},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1019,"_path":1020},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1022,"_path":1023},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1025,"_path":1026},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1028,"_path":1029},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1031,"_path":1032},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1034,"_path":1035},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":8,"_path":4},{"title":1038,"_path":1039},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1041,"_path":1042},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1044,"_path":1045},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1047,"_path":1048},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1050,"_path":1051},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1053,"_path":1054},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1056,"_path":1057},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779038804]