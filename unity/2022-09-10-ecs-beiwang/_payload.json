[{"data":1,"prerenderedAt":793},["Reactive",2],{"content-query-AYDXlmNZI0":3,"content-navigation-8C37fagqQL":211},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":205,"_id":206,"_source":207,"_file":208,"_extension":209,"date":210},"/unity/2022-09-10-ecs-beiwang","unity",false,"","unity ecs的备忘录","关于parent和LinkedEntityGroupparent 涉及到localtoworld, 以及一些物理和其他的转换规则parent和位置有关系..所以父实体需要添加Translation和LocalToWorld.否则会删除该parent和LocalToParent组件添加了parent组件且添加了Translation,LocalToWorld,LocalToParent组件,会自动给父实体添加child组件,四个组件缺一不可如果使用了LocalToParent,这个时候Translation代表的是相对于父对象的坐标..相当于传统的localTranslation\n这个时候如果获",{"type":11,"children":12,"toc":200},"root",[13,22,79,84,90,98,103],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"关于parent和linkedentitygroup",[19],{"type":20,"value":21},"text","关于parent和LinkedEntityGroup",{"type":14,"tag":23,"props":24,"children":25},"ul",{},[26,50],{"type":14,"tag":27,"props":28,"children":29},"li",{},[30,32],{"type":20,"value":31},"parent 涉及到localtoworld, 以及一些物理和其他的转换规则",{"type":14,"tag":23,"props":33,"children":34},{},[35,40,45],{"type":14,"tag":27,"props":36,"children":37},{},[38],{"type":20,"value":39},"parent和位置有关系..所以父实体需要添加Translation和LocalToWorld.否则会删除该parent和LocalToParent组件",{"type":14,"tag":27,"props":41,"children":42},{},[43],{"type":20,"value":44},"添加了parent组件且添加了Translation,LocalToWorld,LocalToParent组件,会自动给父实体添加child组件,四个组件缺一不可",{"type":14,"tag":27,"props":46,"children":47},{},[48],{"type":20,"value":49},"如果使用了LocalToParent,这个时候Translation代表的是相对于父对象的坐标..相当于传统的localTranslation\n这个时候如果获取世界坐标..可以使用LocalToWorld.pos",{"type":14,"tag":27,"props":51,"children":52},{},[53,55,62,64,70,71,77],{"type":20,"value":54},"linkedEntityGroup 和 ",{"type":14,"tag":56,"props":57,"children":59},"code",{"className":58},[],[60],{"type":20,"value":61},"Instantiate",{"type":20,"value":63}," ",{"type":14,"tag":56,"props":65,"children":67},{"className":66},[],[68],{"type":20,"value":69},"SetEnabled",{"type":20,"value":63},{"type":14,"tag":56,"props":72,"children":74},{"className":73},[],[75],{"type":20,"value":76},"DestroyEntity",{"type":20,"value":78}," 有关",{"type":14,"tag":15,"props":80,"children":82},{"id":81},"关于转换",[83],{"type":20,"value":81},{"type":14,"tag":85,"props":86,"children":87},"p",{},[88],{"type":20,"value":89},"在Conversion World中，仅仅是复制生成了来自Classic World的、保留原有Hierarchy关系的GameObject Entity，这些Entity拥有的组件仍然是我们熟知的传统Unity组件，例如Transform、MeshFilter。接下来，将调用DOTS预置的或我们自定义的Convert接口，完成向IComponentData组件的转换。自然而然的，可能没有实现对某Component Object的转换接口，那么在转换过程中将被丢弃，所以该转换不一定是“一对一”，所以Unity称呼其为\"Primary Entity\"。下图呈现了转换全过程。",{"type":14,"tag":85,"props":91,"children":92},{},[93],{"type":14,"tag":94,"props":95,"children":97},"img",{"alt":7,"src":96},"/images/2022-09-10-ecs-beiwang/v2-332760451f516eb225e95ea7683945e5_720w.jpg",[],{"type":14,"tag":85,"props":99,"children":100},{},[101],{"type":20,"value":102},"转换过程都是在Conversion World中完成的,DOTS在内部为转换过程创建了一个World。作为独立World，它拥有自己的EntityManager和ComponentSystem，进而拥有并管理自己的Entity和ComponentData。",{"type":14,"tag":104,"props":105,"children":106},"ol",{},[107,126,140],{"type":14,"tag":27,"props":108,"children":109},{},[110,112,118,122],{"type":20,"value":111},"使用ConvertToEntity组件,添加IConvertGameObjectToEntity接口,或者在组件上添加",{"type":14,"tag":56,"props":113,"children":115},{"className":114},[],[116],{"type":20,"value":117},"[GenerateAuthoringComponent]",{"type":14,"tag":119,"props":120,"children":121},"br",{},[],{"type":14,"tag":94,"props":123,"children":125},{"alt":7,"src":124},"/images/2022-09-10-ecs-beiwang/1662571573000.png",[],{"type":14,"tag":27,"props":127,"children":128},{},[129,131],{"type":20,"value":130},"同一,但是使用代码控制转换的时机,继承ConvertToSingleEntity,并覆盖awake,然后在手动调用.",{"type":14,"tag":132,"props":133,"children":135},"pre",{"code":134},"public class ConvertToSingleEntity : ConvertToEntity\n{\n    void Awake()\n    {\n    }\n}\n\n//实际上就是ConvertToEntity中的代码\npublic static void ConvertGameObejct(World dstWorld, GameObject gameObject)\n{\n    var system = World.DefaultGameObjectInjectionWorld.GetOrCreateSystem\u003CConvertToEntitySystem>();\n\n    var convert = gameObject.GetComponent\u003CConvertToEntity>();\n\n    if (convert == null)\n    {\n        return ;\n    }\n    system.AddToBeConverted(dstWorld, convert);\n}\n",[136],{"type":14,"tag":56,"props":137,"children":138},{"__ignoreMap":7},[139],{"type":20,"value":134},{"type":14,"tag":27,"props":141,"children":142},{},[143,145,148,150,158,161,163,171,174,176,182,184,190,192],{"type":20,"value":144},"使用IDeclareReferencedPrefabs.声明实体的prefab,然后进行存储,以便进行之后的实例化",{"type":14,"tag":119,"props":146,"children":147},{},[],{"type":20,"value":149},"对于转换世界中的每个游戏对象，在任何转换系统运行之前，都会在目标世界中自动创建一个主要实体。随后可以通过 GameObjectConversionSystem.GetPrimaryEntity 访问与 GameObject 关联的实体。",{"type":14,"tag":132,"props":151,"children":153},{"code":152},"  /*\n     *    \n     *    \n         if (m_Prefab == Entity.Null)\n               {\n                   var prefabEntity = GetSingletonEntity\u003CGamePrefabCollectionComponent>();\n                   var prefabs = GetBuffer\u003CGamePrefabBuffer>(prefabEntity);\n                   for (int i = 0; i \u003C prefabs.Length; ++i)\n                   {\n                       if (HasComponent\u003CPlayer.State>(prefabs[i].Value))\n                           m_Prefab = prefabs[i].Value;\n                   }\n               }\n     * \n     * \n     * 添加进来的prefab不需要添加convert to entity\n     * 可以用单例获取GamePrefabCollectionComponent,然后获取想要的entity\n     * \n     */\n    public class GameDeclareReferencedPrefabs : MonoBehaviour, IConvertGameObjectToEntity, IDeclareReferencedPrefabs\n    {\n   \n        public List\u003CGameObject> Prefabs = new List\u003CGameObject>();\n\n        public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n        {\n            dstManager.AddComponentData(entity, default(GamePrefabCollectionComponent));\n            var prefabs = dstManager.AddBuffer\u003CGamePrefabBuffer>(entity);\n\n            foreach (var prefab in Prefabs)\n            { \n                var prefabEnt = conversionSystem.GetPrimaryEntity(prefab);\n                if (dstManager.Exists(prefabEnt))\n                    prefabs.Add(new GamePrefabBuffer { Value = prefabEnt });\n                else\n                    Debug.LogError($\"The prefab {prefab.name} in the ghost collection was no converted to an entity, skipping it\");\n            }\n        }\n\n        public void DeclareReferencedPrefabs(List\u003CGameObject> referencedPrefabs)\n        {\n            foreach (var prefab in Prefabs)\n            {\n                if(prefab == null)\n                {\n                    continue;\n                }\n                referencedPrefabs.Add(prefab);\n            }\n        }\n    }\n",[154],{"type":14,"tag":56,"props":155,"children":156},{"__ignoreMap":7},[157],{"type":20,"value":152},{"type":14,"tag":119,"props":159,"children":160},{},[],{"type":20,"value":162},"4.从转换系统中根据component获取实体,和上面类似..因为转换子物体的时候,转换系统中会生成实体,这个时候可以使用组件从conversionSystem中获取,",{"type":14,"tag":132,"props":164,"children":166},{"code":165},"     public static void AddAbilityComponents(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem, AbilityAuthoring[] abilities)\n        {\n            dstManager.AddComponentData(entity, new AbilityCollection.State());\n\n            // Create ability entities\n            var abilityEntities = new List\u003CEntity>(abilities.Length);\n            for (int i = 0; i \u003C abilities.Length; i++)\n            {\n                var e = conversionSystem.GetEntities(abilities[i]);\n                e.MoveNext();\n                var abilityEntity = e.Current;\n\n                if (abilityEntities.Contains(abilityEntity))\n                {\n                    GameDebug.LogError(\"Ability \" + abilities[i] + \" registered multiple times in abilities list\");\n                }\n\n                abilityEntities.Add(abilityEntity);\n            }\n\n            // Add abilities to ability buffer\n            dstManager.AddBuffer\u003CAbilityCollection.AbilityEntry>(entity);\n            var abilityBuffer = dstManager.GetBuffer\u003CAbilityCollection.AbilityEntry>(entity);\n            for (int i = 0; i \u003C abilities.Length; i++)\n            {\n                abilityBuffer.Add(new AbilityCollection.AbilityEntry\n                {\n                    entity = abilityEntities[i],\n                    abilityType = abilities[i].abilityTypeFlags,\n                    canRunWith = abilities[i].canRunWithFlags,\n                    canInterrupt = abilities[i].canInterruptFlags,\n                });\n            }\n        }\n",[167],{"type":14,"tag":56,"props":168,"children":169},{"__ignoreMap":7},[170],{"type":20,"value":165},{"type":14,"tag":119,"props":172,"children":173},{},[],{"type":20,"value":175},"5.手动转换gameobject,他的代码和",{"type":14,"tag":56,"props":177,"children":179},{"className":178},[],[180],{"type":20,"value":181},"ConvertToEntitySystem",{"type":20,"value":183},"的代码差不多.会创建一个ConversionWorld,然后进行转换,都是使用了",{"type":14,"tag":56,"props":185,"children":187},{"className":186},[],[188],{"type":20,"value":189},"GameObjectConversionUtility.Convert",{"type":20,"value":191},"工作",{"type":14,"tag":132,"props":193,"children":195},{"code":194},"        public static Entity ConvertGameObjectPrefab(GameObject go,World dstWorld,out BlobAssetStore blob)\n        {\n            Entity returnEntity = Entity.Null;\n        \n            blob = new BlobAssetStore();\n\n            returnEntity =\n                GameObjectConversionUtility.ConvertGameObjectHierarchy(go,GameObjectConversionSettings.FromWorld(dstWorld, blob));\n\n            return returnEntity;\n        }\n",[196],{"type":14,"tag":56,"props":197,"children":198},{"__ignoreMap":7},[199],{"type":20,"value":194},{"title":7,"searchDepth":201,"depth":201,"links":202},2,[203,204],{"id":17,"depth":201,"text":21},{"id":81,"depth":201,"text":81},"markdown","content:unity:2022-09-10-ecs-beiwang.md","content","unity/2022-09-10-ecs-beiwang.md","md","2022-09-10",[212,222,349,398,450,463,575],{"title":213,"_path":214,"children":215},"Art","/art",[216,219],{"title":217,"_path":218},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":220,"_path":221},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":223,"_path":224,"children":225},"Dotnet","/dotnet",[226,229,232,235,238,241,244,247,250,253,256,259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,346],{"title":227,"_path":228},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":230,"_path":231},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":233,"_path":234},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":236,"_path":237},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":239,"_path":240},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":242,"_path":243},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":245,"_path":246},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":248,"_path":249},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":251,"_path":252},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":254,"_path":255},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":257,"_path":258},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":260,"_path":261},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":263,"_path":264},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":266,"_path":267},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":269,"_path":270},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":272,"_path":273},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":275,"_path":276},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":278,"_path":279},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":281,"_path":282},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":284,"_path":285},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":287,"_path":288},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":290,"_path":291},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":293,"_path":294},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":296,"_path":297},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":299,"_path":300},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":302,"_path":303},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":305,"_path":306},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":308,"_path":309},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":311,"_path":312},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":314,"_path":315},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":317,"_path":318},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":320,"_path":321},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":323,"_path":324},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":326,"_path":327},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":329,"_path":330},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":332,"_path":333},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":335,"_path":336},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":338,"_path":339},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":341,"_path":342},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":344,"_path":345},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":347,"_path":348},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":350,"_path":351,"children":352},"Game","/game",[353,356,359,362,365,368,371,374,377,380,383,386,389,392,395],{"title":354,"_path":355},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":357,"_path":358},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":360,"_path":361},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":363,"_path":364},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":366,"_path":367},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":369,"_path":370},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":372,"_path":373},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":375,"_path":376},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":378,"_path":379},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":381,"_path":382},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":384,"_path":385},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":387,"_path":388},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":390,"_path":391},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":393,"_path":394},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":396,"_path":397},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":399,"_path":400,"children":401},"Gyj","/gyj",[402,405,408,411,414,417,420,423,426,429,432,435,438,441,444,447],{"title":403,"_path":404},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":406,"_path":407},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":409,"_path":410},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":412,"_path":413},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":415,"_path":416},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":418,"_path":419},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":421,"_path":422},"玩法","/gyj/2022-08-22-wanfa",{"title":424,"_path":425},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":427,"_path":428},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":430,"_path":431},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":433,"_path":434},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":436,"_path":437},"门派内容相关","/gyj/2022-11-17-sect",{"title":439,"_path":440},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":442,"_path":443},"种植","/gyj/2022-12-01-zhongzhi",{"title":445,"_path":446},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":448,"_path":449},"跑商","/gyj/2023-11-01-paoshang",{"title":451,"_path":452,"children":453},"Js","/js",[454,457,460],{"title":455,"_path":456},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":458,"_path":459},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":461,"_path":462},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":464,"_path":465,"children":466},"Tool","/tool",[467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518,521,524,527,530,533,536,539,542,545,548,551,554,557,560,563,566,569,572],{"title":468,"_path":469},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":471,"_path":472},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":474,"_path":475},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":477,"_path":478},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":480,"_path":481},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":483,"_path":484},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":486,"_path":487},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":489,"_path":490},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":492,"_path":493},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":495,"_path":496},"mac下brew 使用","/tool/2020-01-13-brew",{"title":498,"_path":499},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":501,"_path":502},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":504,"_path":505},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":507,"_path":508},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":510,"_path":511},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":513,"_path":514},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":516,"_path":517},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":519,"_path":520},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":522,"_path":523},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":525,"_path":526},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":528,"_path":529},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":531,"_path":532},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":534,"_path":535},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":537,"_path":538},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":540,"_path":541},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":543,"_path":544},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":546,"_path":547},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":549,"_path":550},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":552,"_path":553},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":555,"_path":556},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":558,"_path":559},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":561,"_path":562},"rider的使用","/tool/2022-08-02-rider-use",{"title":564,"_path":565},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":567,"_path":568},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":570,"_path":571},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":573,"_path":574},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":576,"_path":577,"children":578},"Unity","/unity",[579,582,585,588,591,594,597,600,603,606,609,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750,753,756,759,762,765,768,771,774,777,780,783,786,789,792],{"title":580,"_path":581},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":583,"_path":584},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":586,"_path":587},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":589,"_path":590},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":592,"_path":593},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":595,"_path":596},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":598,"_path":599},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":601,"_path":602},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":604,"_path":605},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":607,"_path":608},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":610,"_path":611},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":613,"_path":614},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":616,"_path":617},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":619,"_path":620},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":622,"_path":623},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":625,"_path":626},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":628,"_path":629},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":631,"_path":632},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":634,"_path":635},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":637,"_path":638},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":640,"_path":641},"技能系统","/unity/2020-02-15-skill-system",{"title":643,"_path":644},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":646,"_path":647},"角色状态设计","/unity/2020-02-17-character-states",{"title":649,"_path":650},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":652,"_path":653},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":655,"_path":656},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":658,"_path":659},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":661,"_path":662},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":664,"_path":665},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":667,"_path":668},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":670,"_path":671},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":673,"_path":674},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":676,"_path":677},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":679,"_path":680},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":682,"_path":683},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":685,"_path":686},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":688,"_path":689},"unity的addressables","/unity/2020-09-12-addressables",{"title":691,"_path":692},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":694,"_path":695},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":697,"_path":698},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":700,"_path":701},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":703,"_path":704},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":706,"_path":707},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":709,"_path":710},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":712,"_path":713},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":715,"_path":716},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":718,"_path":719},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":721,"_path":722},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":724,"_path":725},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":727,"_path":728},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":730,"_path":731},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":733,"_path":734},"简单保存工具","/unity/2020-11-13-simple-save",{"title":736,"_path":737},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":739,"_path":740},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":742,"_path":743},"ability","/unity/2020-11-16-dotssample",{"title":745,"_path":746},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":748,"_path":749},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":751,"_path":752},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":754,"_path":755},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":757,"_path":758},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":760,"_path":761},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":763,"_path":764},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":766,"_path":767},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":769,"_path":770},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":772,"_path":773},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":775,"_path":776},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":778,"_path":779},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":781,"_path":782},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":784,"_path":785},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":787,"_path":788},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":790,"_path":791},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":8,"_path":4},1710779038667]