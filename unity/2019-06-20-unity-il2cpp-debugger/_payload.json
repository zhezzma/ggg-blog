[{"data":1,"prerenderedAt":1380},["Reactive",2],{"content-query-QLGP1wHTLK":3,"content-navigation-8C37fagqQL":798},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":792,"_id":793,"_source":794,"_file":795,"_extension":796,"date":797},"/unity/2019-06-20-unity-il2cpp-debugger","unity",false,"","Unity的il2cpp","unity是运行在mono下的,il2cpp有自己的运行时,il2cpp不是运行在mono下的不是mono的aotmono的gc和.net的gc是不同的,il2cpp运行时实现了自己的垃圾回收(Boehm-Demers-Weiser garbage collector)编译和运行时是两个阶段,可以用csc.exe编译然后运行在mono上, .NET 4.x可以使用就是这个原理Note that the .rsp file needs to match the compiler being invoked. For example:when targeting the .NET 3.5 Equi",{"type":11,"children":12,"toc":770},"root",[13,93,99,104,109,117,122,129,134,139,144,150,155,160,165,174,179,184,189,194,200,205,217,222,230,235,244,255,266,279,290,301,310,315,320,325,333,338,343,348,354,359,364,370,375,380,385,390,395,400,405,412,418,438,443,448,453,461,469,482,487,508,513,518,524,545,551,559,571,579,604,609,622,627,632,637,645,651,673,687,692,710,715],{"type":14,"tag":15,"props":16,"children":17},"element","ol",{},[18,25,30],{"type":14,"tag":19,"props":20,"children":21},"li",{},[22],{"type":23,"value":24},"text","unity是运行在mono下的,il2cpp有自己的运行时,il2cpp不是运行在mono下的不是mono的aot",{"type":14,"tag":19,"props":26,"children":27},{},[28],{"type":23,"value":29},"mono的gc和.net的gc是不同的,il2cpp运行时实现了自己的垃圾回收(Boehm-Demers-Weiser garbage collector)",{"type":14,"tag":19,"props":31,"children":32},{},[33,35,39,41,47,49],{"type":23,"value":34},"编译和运行时是两个阶段,可以用csc.exe编译然后运行在mono上, .NET 4.x可以使用就是这个原理",{"type":14,"tag":36,"props":37,"children":38},"br",{},[],{"type":23,"value":40},"Note that the ",{"type":14,"tag":42,"props":43,"children":44},"strong",{},[45],{"type":23,"value":46},".rsp",{"type":23,"value":48}," file needs to match the compiler being invoked. For example:",{"type":14,"tag":50,"props":51,"children":52},"ul",{},[53,74],{"type":14,"tag":19,"props":54,"children":55},{},[56,58,63,65,72],{"type":23,"value":57},"when targeting the .NET 3.5 Equivalent (deprecated) scripting runtime version, ",{"type":14,"tag":42,"props":59,"children":60},{},[61],{"type":23,"value":62},"mcs",{"type":23,"value":64}," is used with ",{"type":14,"tag":66,"props":67,"children":69},"code",{"className":68},[],[70],{"type":23,"value":71},"mcs.rsp",{"type":23,"value":73},", and",{"type":14,"tag":19,"props":75,"children":76},{},[77,79,84,85,91],{"type":23,"value":78},"when targeting the .NET 4.x Eqivalent scripting runtime version compiler, ",{"type":14,"tag":42,"props":80,"children":81},{},[82],{"type":23,"value":83},"csc",{"type":23,"value":64},{"type":14,"tag":66,"props":86,"children":88},{"className":87},[],[89],{"type":23,"value":90},"csc.rsp",{"type":23,"value":92},".",{"type":14,"tag":94,"props":95,"children":96},"p",{},[97],{"type":23,"value":98},"大约在一年以前，我们写了一篇博客讨论Unity中脚本将来会是个什么样子，在那篇博客中我们提到了崭新的IL2CPP后端，并许诺其会为Unity带来更高效和更适合于各个平台的虚拟机。在2015年的一月份，我们正式发布了第一个使用IL2CPP的平台：iOS 64-bit。而随着Unity 5的发布，又带给大家另一个使用IL2CPP的平台：WebGL。感谢我们社区中用户的大量宝贵的反馈，我们在接下来的时间里根据这些反馈得以更新IL2CPP，发布补丁版本，从而持续的改进IL2CPP的编译器和运行时库。",{"type":14,"tag":94,"props":100,"children":101},{},[102],{"type":23,"value":103},"我们没有停止改进IL2CPP的打算，但是在目前这个时间点上，我们觉得可以回过头来抽出点时间告诉大家一些IL2CPP的内部工作机制。在接下来的几个月的时间里，我们打算对以下话题（或者还有其他未列出的话题）进行讨论，来做一个IL2CPP深入讲解系列。目前准备讨论的话题有：",{"type":14,"tag":94,"props":105,"children":106},{},[107],{"type":23,"value":108},"1.基础 - 工具链和命令行参数（本篇博文）\n2.IL2CPP生成代码介绍\n3.IL2CPP生成代码调试小窍门\n4.方法调用介绍（一般方法调用和虚方法调用等）",{"type":14,"tag":15,"props":110,"children":111},{},[112],{"type":14,"tag":19,"props":113,"children":114},{},[115],{"type":23,"value":116},"通用代码共享的实现\n6.P/invoke(Platform Invocation Service)对于类型（types）和方法（methods）的封装\n7.垃圾回收器的集成\n8.测试框架（Testing frameworks）及其使用",{"type":14,"tag":94,"props":118,"children":119},{},[120],{"type":23,"value":121},"为了能让这个系列的讨论成为可能，我们会涉及到一些将来肯定会进行改动的IL2CPP的实现细节。但这也没有关系，通过这些讨论，我们希望能给大家提供一些有用和有趣的信息。",{"type":14,"tag":123,"props":124,"children":126},"h2",{"id":125},"什么是il2cpp",[127],{"type":23,"value":128},"什么是IL2CPP？",{"type":14,"tag":94,"props":130,"children":131},{},[132],{"type":23,"value":133},"从技术层面上来说，我们说的IL2CPP包含了两部分：一个进行 预先编译（译注：ahead-of-time，又叫AOT，以下一律使用AOT缩写）的编译器。",{"type":14,"tag":123,"props":135,"children":137},{"id":136},"一个支持虚拟机的运行时库",[138],{"type":23,"value":136},{"type":14,"tag":94,"props":140,"children":141},{},[142],{"type":23,"value":143},"AOT编译器将由.NET 输出的中间语言(IL)代码生成为C++代码。运行时库则提供诸如垃圾回收，与平台无关的线程，IO以及内部调用（C++原生代码直接访问托管代码结构）这样的服务和抽象层。",{"type":14,"tag":123,"props":145,"children":147},{"id":146},"aot编译器",[148],{"type":23,"value":149},"AOT编译器",{"type":14,"tag":94,"props":151,"children":152},{},[153],{"type":23,"value":154},"IL2CPP AOT编译器实际的执行文件是il2cpp.exe。在Windows平台你可以在Unity安装路径的Editor\\Data\\il2cpp目录下找到。对于OSX平台，它位于Unity安装路径的Contents/Frameworks/il2cpp/build目录内。 il2cpp.exe这个工具是一个托管代码可执行文件，其完全由C#写成。在开发IL2CPP的过程中，我们同时使用.NET和Mono编译器对其进行编译。",{"type":14,"tag":94,"props":156,"children":157},{},[158],{"type":23,"value":159},"il2cpp 接受来自Unity自带的或者由Mono编译器产生的托管程序集，将这些程序集转换成C++代码。这些转换出的C++代码最终由部署目标平台上的C++编译器进行编译。",{"type":14,"tag":94,"props":161,"children":162},{},[163],{"type":23,"value":164},"你可以参照下图理解IL2CPP工具链的作用：",{"type":14,"tag":94,"props":166,"children":167},{},[168],{"type":14,"tag":169,"props":170,"children":173},"img",{"alt":171,"src":172},"il2cpp toolchain smaller","/images/2019-06-20-unity-il2cpp-debugger/il2cpp-toolchain-smaller.png",[],{"type":14,"tag":123,"props":175,"children":177},{"id":176},"运行时库",[178],{"type":23,"value":176},{"type":14,"tag":94,"props":180,"children":181},{},[182],{"type":23,"value":183},"IL2CPP的另外一个部分就是对虚拟机提供支持的运行时库。我们基本上是用C++代码来实现整个运行时库的（好吧，其实里面还是有一些和平台相关的代码使用了程序集，这个只要你知我知便好，不要告诉别人 ）。我们把运行时库称之为libli2cpp，它是作为一个静态库被连接到最终的游戏可执行文件中。这么做的一个主要的好处是可以使得整个IL2CPP技术是简单并且是可移植的。",{"type":14,"tag":94,"props":185,"children":186},{},[187],{"type":23,"value":188},"你能通过查看随Unity一起发布的libil2cpp头文件来窥探其代码组织方式（Windows平台，头文件在Editor\\Data\\PlaybackEngines\\webglsupport\\BuildTools\\Libraries\\libil2cpp\\include目录中。OSX平台，头文件在Contents/Frameworks/il2cpp/libil2cpp目录中）。举个例子，由il2cpp产生的C++代码和libil2cpp之间的接口API，存在于codegen/il2cpp-codegen.h这个文件中。",{"type":14,"tag":94,"props":190,"children":191},{},[192],{"type":23,"value":193},"运行时的另外一个重要的部分，就是垃圾收集器。在Unity 5中，我们使用libgc垃圾收集器。它是一个典型的贝姆垃圾收集器（Boehm-Demers-Weiser garbage collector）。（译注：相对使用保守垃圾回收策略）。然而我们的libil2cpp被设计成可以方便使用其他垃圾回收器。因此我们现在也在研究集成微软开源的垃圾回收器（Microsoft GC）。对于垃圾回收器这一点，我们会在后续的一篇中专门的讨论，这里就不多说了。",{"type":14,"tag":123,"props":195,"children":197},{"id":196},"il2cpp是如何执行的",[198],{"type":23,"value":199},"il2cpp是如何执行的？",{"type":14,"tag":94,"props":201,"children":202},{},[203],{"type":23,"value":204},"让我们从一个简单的例子入手。这里使用Unity的版本是5.0.1，在Windows环境并且建立一个全新的空项目。然后创建一个带MonoBehaviour的脚本文件，将其作为组件加入到Main Camera上。代码也是非常的简单，输出Hello World：",{"type":14,"tag":206,"props":207,"children":212},"pre",{"code":208,"language":209,"meta":7,"className":210},"using UnityEngine;\n\npublic class HelloWorld : MonoBehaviour {\n  void Start () {\n    Debug.Log(\"Hello, IL2CPP!\");\n  }\n}\n","cpp",[211],"language-cpp",[213],{"type":14,"tag":66,"props":214,"children":215},{"__ignoreMap":7},[216],{"type":23,"value":208},{"type":14,"tag":94,"props":218,"children":219},{},[220],{"type":23,"value":221},"当我切换到WebGL平台进行项目生成的时候，我们可以用Process Explorer来对il2cpp的命令行进行观察，得到以下内容：",{"type":14,"tag":206,"props":223,"children":225},{"code":224},"\n \"C:\\Program Files\\Unity\\Editor\\Data\\MonoBleedingEdge\\bin\\mono.exe\" \"C:\\Program Files\\Unity\\Editor\\Data\\il2cpp/il2cpp.exe\" --copy-level=None --enable-generic-sharing --enable-unity-event-support --output-format=Compact --extra-types.file=\"C:\\Program Files\\Unity\\Editor\\Data\\il2cpp\\il2cpp_default_extra_types.txt\" \"C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\Assembly-CSharp.dll\" \"C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\UnityEngine.UI.dll\" \"C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\il2cppOutput\"\n",[226],{"type":14,"tag":66,"props":227,"children":228},{"__ignoreMap":7},[229],{"type":23,"value":224},{"type":14,"tag":94,"props":231,"children":232},{},[233],{"type":23,"value":234},"嗯，这个真是老太太的裹脚布 - 又臭又长......，所以让我们把命令分拆一下，Unity运行的是这个可执行文件：",{"type":14,"tag":94,"props":236,"children":237},{},[238],{"type":14,"tag":66,"props":239,"children":241},{"className":240},[],[242],{"type":23,"value":243},"\"C:\\Program Files\\Unity\\Editor\\Data\\MonoBleedingEdge\\bin\\mono.exe\"",{"type":14,"tag":94,"props":245,"children":246},{},[247,249],{"type":23,"value":248},"下一个参数是il2cpp.exe工具本身：\n",{"type":14,"tag":66,"props":250,"children":252},{"className":251},[],[253],{"type":23,"value":254},"\"C:\\Program Files\\Unity\\Editor\\Data\\il2cpp/il2cpp.exe\"",{"type":14,"tag":94,"props":256,"children":257},{},[258,260],{"type":23,"value":259},"请注意剩下的参数其实都是传递给il2cpp.exe的而不是mono.exe。上面的例子里传递了5个参数给il2cpp.exe：\n",{"type":14,"tag":66,"props":261,"children":263},{"className":262},[],[264],{"type":23,"value":265},"–copy-level=None",{"type":14,"tag":94,"props":267,"children":268},{},[269,271,277],{"type":23,"value":270},"指明il2cpp.exe不对生成的C++文件进行copy操作\n",{"type":14,"tag":66,"props":272,"children":274},{"className":273},[],[275],{"type":23,"value":276}," –enable-generic-sharing",{"type":23,"value":278},"\n告诉IL2CPP如果可以，对通用方法进行共享。这个可以减少代码并降低最后二进制文件的尺寸",{"type":14,"tag":94,"props":280,"children":281},{},[282,288],{"type":14,"tag":66,"props":283,"children":285},{"className":284},[],[286],{"type":23,"value":287},"–enable-unity-event-support",{"type":23,"value":289},"\n确保和Unity events相关的，通过反射机制来运作的代码，能够正确生成。",{"type":14,"tag":94,"props":291,"children":292},{},[293,299],{"type":14,"tag":66,"props":294,"children":296},{"className":295},[],[297],{"type":23,"value":298},"–output-format=Compact",{"type":23,"value":300},"\n在生成C++代码时为里面的类型和方法使用更短的名字。这会使得C++代码难以阅读，因为原来在IL中的名字被更短的取代了。但好处是可以让C++编译器运行的更快。",{"type":14,"tag":94,"props":302,"children":303},{},[304],{"type":14,"tag":66,"props":305,"children":307},{"className":306},[],[308],{"type":23,"value":309},"–extra-types.file=”C:\\Program Files\\Unity\\Editor\\Data\\il2cpp\\il2cpp_default_extra_types.txt”",{"type":14,"tag":94,"props":311,"children":312},{},[313],{"type":23,"value":314},"使用默认的（也是空的）额外类型文件。il2cpp.exe会将在这个文件中出现的基本类型或者数组类型看作是在运行时生成的而不是一开始出现在IL代码中来对待。",{"type":14,"tag":94,"props":316,"children":317},{},[318],{"type":23,"value":319},"需要注意的是这些参数可能会在以后的Unity版本中有所变化。我们现在还没有稳定到把il2cpp.exe的命令行参数整理固定下来的阶段。",{"type":14,"tag":94,"props":321,"children":322},{},[323],{"type":23,"value":324},"最后，我们有由两个文件组成的一个列表和一个目录在这个长长的命令行中：",{"type":14,"tag":206,"props":326,"children":328},{"code":327},"\n“C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\Assembly-CSharp.dll”\n“C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\Managed\\UnityEngine.UI.dll”\n“C:\\Users\\Josh Peterson\\Documents\\IL2CPP Blog Example\\Temp\\StagingArea\\Data\\il2cppOutput”\n",[329],{"type":14,"tag":66,"props":330,"children":331},{"__ignoreMap":7},[332],{"type":23,"value":327},{"type":14,"tag":94,"props":334,"children":335},{},[336],{"type":23,"value":337},"il2cpp.exe工具可以接收一个由IL程序集组成的列表。在上面这个例子中，程序集包含了项目中的简单脚本程序集：Assembly-CSharp.dll，和GUI程序集：UnityEngine.UI.dll。大家可能会注意到这里面明显少了什么：UnityEngine.dll到哪去了？系统底层的mscorlib.dll也不见了踪影。实际上，il2cpp.exe会在内部自动引用这些程序集。你当然也可以把这些放入列表中，但他们不是必须的。你只需要提及那些根程序集（那些没有被其他任何程序集引用到的程序集），剩下的il2cpp.exe会根据引用关系自动加入。",{"type":14,"tag":94,"props":339,"children":340},{},[341],{"type":23,"value":342},"裹脚布的最后一块是一个目录，il2cpp.exe会将最终的C++代码生成到这里。如果你还保持着一颗好奇的心，可以看看这个目录中产生的文件。这些文件是我们下一个讨论的主题。在你审视这些代码前，可以考虑将WebGL构建设置中的“Development Player”选项勾上。这么做会移除–output-format=Compact命令行参数从而让C++代码中的类型和方法的名字更加可读。",{"type":14,"tag":94,"props":344,"children":345},{},[346],{"type":23,"value":347},"尝试在WebGL或者iOS构建设置中进行些改变。这样你会发现传递给il2cpp.exe的参数也会相应的发生变化。例如，将“Enable Exceptions” 设置成“Full” 会将–emit-null-checks，–enable-stacktrace，和 –enable-array-bounds-check这三个参数加入il2cpp.exe命令行。",{"type":14,"tag":123,"props":349,"children":351},{"id":350},"il2cpp没做的事情",[352],{"type":23,"value":353},"IL2CPP没做的事情",{"type":14,"tag":94,"props":355,"children":356},{},[357],{"type":23,"value":358},"我想指出IL2CPP有一向挑战我们没有接受,而且我们也高兴我们忽略了它。我们没有尝试重写整个C#标准库。当你使用IL2CPP后端构建Unity项目的时候，所有在mscorlib.dll，System.dll等中的C#标准库和原来使用Mono编译时候的一模一样。",{"type":14,"tag":94,"props":360,"children":361},{},[362],{"type":23,"value":363},"我们可以依赖健壮的且久经考验的C#标准库，所以当处理有关IL2CPP的bug的时候，我们可以很肯定的说问题出在AOT编译器或者运行时库这两个地方而不是在其他地方。",{"type":14,"tag":123,"props":365,"children":367},{"id":366},"我们如何开发测试发布il2cpp",[368],{"type":23,"value":369},"我们如何开发，测试，发布IL2CPP",{"type":14,"tag":94,"props":371,"children":372},{},[373],{"type":23,"value":374},"自从我们在一月份的4.6.1 p5版本中首次引入IL2CPP以来，我们已经连续发布了6个Unity版本和7个补丁（Unity版本号跨越4.6和5.0）。在这些发布中我们修正了超过100个bug。",{"type":14,"tag":94,"props":376,"children":377},{},[378],{"type":23,"value":379},"为了确保持续的改进得以实施，我们内部只保留一份最新的开发代码在主干分之（trunk branch）上，在发布各个版本之前，我们会将IL2CPP的改动挂到一个特定的分之下，然后进行测试，确保所有的bug已经正确的修正了。我们的QA和维护工作组为此付出了惊人的努力才得以保证发布版本的快速迭代。（译注：感觉是版本管理的标准的开发流程）",{"type":14,"tag":94,"props":381,"children":382},{},[383],{"type":23,"value":384},"提供高质量Bug的用户社区被证明是一个无价之宝。我们非常感谢用户的反馈来帮助我们改进IL2CPP，并且希望这类反馈越多越好。",{"type":14,"tag":94,"props":386,"children":387},{},[388],{"type":23,"value":389},"我们的IL2CPP研发组有很强烈的“测试优先”意识。我们时常使用“Test Driven Design”方法，在没有进行足够全面的测试的情况下，几乎不会进行代码的合并工作。这个策略用在IL2CPP项目上非常的棒。我们现在所面对的大部分bug并不是意想不到的行为产生的，而是由意想不到的特殊情况产生的。（例如在一个32位的索引数组中使用了64位的指针从而导致C++编译器失败）面对这种类型的bug我们可以快速的并且很自信的进行修正。",{"type":14,"tag":94,"props":391,"children":392},{},[393],{"type":23,"value":394},"有了社区的帮助，我们非常努力的让IL2CPP既快又稳定。顺便说一句，如果你对我刚才说的这些有兴趣，我们正在招人（嗯.....我只是这么一说）",{"type":14,"tag":123,"props":396,"children":398},{"id":397},"好戏连台",[399],{"type":23,"value":397},{"type":14,"tag":94,"props":401,"children":402},{},[403],{"type":23,"value":404},"关于IL2CPP我们还有很多可以说的。下一次我们会深入到il2cpp.exe代码生成的细节中。看看对于C++编译器来说，由il2cpp.exe生成的代码会是个什么样子。",{"type":14,"tag":406,"props":407,"children":409},"h1",{"id":408},"il2cpp-脚本限制",[410],{"type":23,"value":411},"IL2CPP 脚本限制",{"type":14,"tag":123,"props":413,"children":415},{"id":414},"systemreflectionemit",[416],{"type":23,"value":417},"System.Reflection.Emit",{"type":14,"tag":94,"props":419,"children":420},{},[421,423,428,430,436],{"type":23,"value":422},"AOT 平台无法实现 ",{"type":14,"tag":66,"props":424,"children":426},{"className":425},[],[427],{"type":23,"value":417},{"type":23,"value":429}," 命名空间中的任何方法。",{"type":14,"tag":66,"props":431,"children":433},{"className":432},[],[434],{"type":23,"value":435},"System.Reflection",{"type":23,"value":437}," 的其余部分是可接受的，只要编译器可以推断通过反射使用的代码需要在运行时存在。",{"type":14,"tag":123,"props":439,"children":441},{"id":440},"序列化",[442],{"type":23,"value":440},{"type":14,"tag":94,"props":444,"children":445},{},[446],{"type":23,"value":447},"AOT 平台可能会由于使用了反射而遇到序列化和反序列化问题。如果仅通过反射将某个类型或方法作为序列化或反序列化的一部分使用，则 AOT 编译器无法检测到需要为该类型或方法生成代码。",{"type":14,"tag":94,"props":449,"children":450},{},[451],{"type":23,"value":452},"这是我们常遇到的问题..一个是scriptobject的asset,一个是网络协议都是序列化数据",{"type":14,"tag":15,"props":454,"children":455},{},[456],{"type":14,"tag":19,"props":457,"children":458},{},[459],{"type":23,"value":460},"odin,最佳模式新建一个aot场景,将需要的scriptobject放在该场景.或者声明序列化字段",{"type":14,"tag":206,"props":462,"children":464},{"code":463},"public class OdinAOTSetting : Sirenix.OdinInspector.SerializedMonoBehaviour\n{\n\n    public List\u003CScriptableObject> Configs;\n\n\n    [NonSerialized, OdinSerialize]\n    public UnityEngine.Color Color;\n\n    [NonSerialized, OdinSerialize]\n    public CityMapLandType CityMapLandType;\n\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, InventoryItemConfig> InventoryItemConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, LootTableConfig> LootTableConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, MerchantConfig> MerchantConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, LandConfig> LandConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, MapConfig> MapConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Clong, NPCConfig> NPCConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Clong, QuestConfig> QuestConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, RedeemCodeConfig> RedeemCodeConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, BuffConfig> BuffConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, ProjectileConfig> ProjectileConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cint, SkillConfig> SkillConfigs;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, AttrAsset> AttrAssets;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, StatAsset> StatAssets;\n    [NonSerialized, OdinSerialize]\n    Dictionary\u003Cstring, StatusEffectAsset> StatusEffectAssets;\n}\n",[465],{"type":14,"tag":66,"props":466,"children":467},{"__ignoreMap":7},[468],{"type":23,"value":463},{"type":14,"tag":15,"props":470,"children":471},{},[472,477],{"type":14,"tag":19,"props":473,"children":474},{},[475],{"type":23,"value":476},"网络协议Json,使用字段,而不是使用属性(get,set),il2cpp 在运行时会剥离去除Get属性，",{"type":14,"tag":19,"props":478,"children":479},{},[480],{"type":23,"value":481},"网络协议protobuf,虽然protobuf本身是支持Dictionary的,但是aot就不能使用了..未找到解决办法 ,用class代替",{"type":14,"tag":123,"props":483,"children":485},{"id":484},"泛型",[486],{"type":23,"value":484},{"type":14,"tag":94,"props":488,"children":489},{},[490,492,498,500,506],{"type":23,"value":491},"每个泛型实例实际上都是一个独立的类型，",{"type":14,"tag":66,"props":493,"children":495},{"className":494},[],[496],{"type":23,"value":497},"List\u003CA>",{"type":23,"value":499}," 和 ",{"type":14,"tag":66,"props":501,"children":503},{"className":502},[],[504],{"type":23,"value":505},"List\u003CB>",{"type":23,"value":507},"是两个完全没有关系的类型，这意味着，如果在运行时无法通过JIT来创建新类型的话，代码中没有直接使用过的泛型实例都会在运行时出现问题。",{"type":14,"tag":94,"props":509,"children":510},{},[511],{"type":23,"value":512},"在ILRuntime中解决这个问题有两种方式，一个是使用CLR绑定，把用到的泛型实例都进行CLR绑定。另外一个方式是在Unity主工程中，建立一个类，然后在里面定义用到的那些泛型实例的public变量。这两种方式都可以告诉IL2CPP保留这个类型的代码供运行中使用。",{"type":14,"tag":94,"props":514,"children":515},{},[516],{"type":23,"value":517},"因此建议大家在实际开发中，尽量使用热更DLL内部的类作为泛型参数，因为DLL内部的类型都是ILTypeInstance，只需处理一个就行了。此外如果泛型模版类就是在DLL里定义的的话，那就完全不需要进行任何处理。",{"type":14,"tag":519,"props":520,"children":522},"h3",{"id":521},"泛型方法",[523],{"type":23,"value":521},{"type":14,"tag":94,"props":525,"children":526},{},[527,529,535,537,543],{"type":23,"value":528},"跟泛型实例一样，",{"type":14,"tag":66,"props":530,"children":532},{"className":531},[],[533],{"type":23,"value":534},"foo.Bar\u003CTypeA>",{"type":23,"value":536}," 和",{"type":14,"tag":66,"props":538,"children":540},{"className":539},[],[541],{"type":23,"value":542},"foo.Bar\u003CTypeB>",{"type":23,"value":544},"是两个完全不同的方法，需要在主工程中显式调用过，IL2CPP才能够完整保留，因此需要尽量避免在热更DLL中调用Unity主工程的泛型方法。如果在iOS上实际运行遇到报错，可以尝试在Unity的主工程中随便写一个static的方法，然后对这个泛型方法调用一下即可，这个方法无需被调用，只是用来告诉IL2CPP我们需要这个方法",{"type":14,"tag":123,"props":546,"children":548},{"id":547},"animatorcontroller-等",[549],{"type":23,"value":550},"AnimatorController 等",{"type":14,"tag":206,"props":552,"children":554},{"code":553},"错误信息#\nCould not produce class with ID #\nCould not produce class with ID XXX.\nThis could be caused by a class being stripped from the build even though it is needed. Try disabling 'Strip Engine Code' in Player Settings.:\u003CLoadWWWIEnumerator>c__Iterator99:MoveNext()\n",[555],{"type":14,"tag":66,"props":556,"children":557},{"__ignoreMap":7},[558],{"type":23,"value":553},{"type":14,"tag":94,"props":560,"children":561},{},[562,564,569],{"type":23,"value":563},"如果提示的ID的是Editor的，比如 AnimatorController(ID 91)属于Editor包里的，不能用link.xm加回来，可以在",{"type":14,"tag":42,"props":565,"children":566},{},[567],{"type":23,"value":568},"Resource",{"type":23,"value":570},"下建一个空的prefab,在上面挂一个AnimatorController，打包时留下这个prefab就可以确保这个类不被strip掉了。",{"type":14,"tag":94,"props":572,"children":573},{},[574],{"type":14,"tag":42,"props":575,"children":576},{},[577],{"type":23,"value":578},"参考 :",{"type":14,"tag":50,"props":580,"children":581},{},[582,594],{"type":14,"tag":19,"props":583,"children":584},{},[585],{"type":14,"tag":586,"props":587,"children":591},"a",{"href":588,"rel":589},"https://forum.unity.com/threads/could-not-produce-class-with-id-91-ios.267548/",[590],"nofollow",[592],{"type":23,"value":593},"Could not produce class with ID 91 - iOS - Unity Forum",{"type":14,"tag":19,"props":595,"children":596},{},[597],{"type":14,"tag":586,"props":598,"children":601},{"href":599,"rel":600},"https://docs.unity3d.com/cn/2020.2/Manual/ClassIDReference.html",[590],[602],{"type":23,"value":603},"YAML 类 ID 参考 - Unity 手册 (unity3d.com)",{"type":14,"tag":123,"props":605,"children":607},{"id":606},"其他",[608],{"type":23,"value":606},{"type":14,"tag":50,"props":610,"children":611},{},[612,617],{"type":14,"tag":19,"props":613,"children":614},{},[615],{"type":23,"value":616},"不要用dynamic关键字",{"type":14,"tag":19,"props":618,"children":619},{},[620],{"type":23,"value":621},"没有使用的字段都不会被编译..",{"type":14,"tag":406,"props":623,"children":625},{"id":624},"托管代码剥离",[626],{"type":23,"value":624},{"type":14,"tag":94,"props":628,"children":629},{},[630],{"type":23,"value":631},"IL2CPP在打包时会自动对Unity工程的DLL进行裁剪，将代码中没有引用到的类型裁剪掉，以达到减小发布后ipa包的尺寸的目的。然而在实际使用过程中，很多类型有可能会被意外剪裁掉，造成运行时抛出找不到某个类型的异常。特别是通过反射等方式在编译时无法得知的函数调用，在运行时都很有可能遇到问题。",{"type":14,"tag":94,"props":633,"children":634},{},[635],{"type":23,"value":636},"Unity提供了一个方式来告诉Unity引擎，哪些类型是不能够被剪裁掉的。具体做法就是在Unity工程的Assets目录中建立一个叫link.xml的XML文件，然后按照下面的格式指定你需要保留的类型：",{"type":14,"tag":206,"props":638,"children":640},{"code":639},"\u003Clinker>\n  \u003Cassembly fullname=\"UnityEngine\" preserve=\"all\"/>\n  \u003Cassembly fullname=\"Assembly-CSharp\">\n    \u003Cnamespace fullname=\"MyGame.Utils\" preserve=\"all\"/>\n    \u003Ctype fullname=\"MyGame.SomeClass\" preserve=\"all\"/>\n  \u003C/assembly>  \n\u003C/linker>\n",[641],{"type":14,"tag":66,"props":642,"children":643},{"__ignoreMap":7},[644],{"type":23,"value":639},{"type":14,"tag":123,"props":646,"children":648},{"id":647},"il2cpp限制",[649],{"type":23,"value":650},"IL2CPP限制",{"type":14,"tag":94,"props":652,"children":653},{},[654,656,662,664,671],{"type":23,"value":655},"将游戏导出到 iOS 等平台时，Unity 将使用其 IL2CPP 引擎将 IL“转换”为 C++ 代码，然后使用目标平台的本机编译器进行编译。 在此方案中，有几个不支持的 .NET 功能，例如反射的部分内容和使用 ",{"type":14,"tag":66,"props":657,"children":659},{"className":658},[],[660],{"type":23,"value":661},"dynamic",{"type":23,"value":663}," 关键字。 虽然可在自己的代码中使用这些功能，但使用第三方 DLL 和 SDK 时可能会遇到问题，这些 DLL 和 SDK 并非使用 Unity 和 IL2CPP 编写。 有关此主题的详细信息，请参阅 Unity 站点上的",{"type":14,"tag":586,"props":665,"children":668},{"href":666,"rel":667},"https://docs.unity3d.com/Manual/ScriptingRestrictions.html",[590],[669],{"type":23,"value":670},"脚本限制",{"type":23,"value":672},"文档。",{"type":14,"tag":94,"props":674,"children":675},{},[676,678,685],{"type":23,"value":677},"此外，如之前 Json.NET 示例中所述，Unity 将尝试在 IL2CPP 导出过程中裁剪掉未使用的代码。 虽然这通常不是问题，但对于使用反射的库，它可能会意外地删除在导出时无法确定是否被调用而在运行时可能被调用的属性或方法。 若要解决这些问题，请添加一个 link.xml 文件到项目中，该文件中包含的程序集和命名空间列表不会执行裁剪过程。 有关完整详细信息，请参阅",{"type":14,"tag":586,"props":679,"children":682},{"href":680,"rel":681},"https://docs.unity3d.com/Manual/IL2CPP-BytecodeStripping.html",[590],[683],{"type":23,"value":684},"有关字节码裁剪的 Unity 文档",{"type":23,"value":686},"。",{"type":14,"tag":123,"props":688,"children":690},{"id":689},"编译速度优化",[691],{"type":23,"value":689},{"type":14,"tag":15,"props":693,"children":694},{},[695,700,705],{"type":14,"tag":19,"props":696,"children":697},{},[698],{"type":23,"value":699},"增量编译",{"type":14,"tag":19,"props":701,"children":702},{},[703],{"type":23,"value":704},"关闭实时保护",{"type":14,"tag":19,"props":706,"children":707},{},[708],{"type":23,"value":709},"使用ssd",{"type":14,"tag":123,"props":711,"children":713},{"id":712},"相关链接",[714],{"type":23,"value":712},{"type":14,"tag":50,"props":716,"children":717},{},[718,727,736,744,752,761],{"type":14,"tag":19,"props":719,"children":720},{},[721],{"type":14,"tag":586,"props":722,"children":725},{"href":723,"rel":724},"https://docs.microsoft.com/en-us/visualstudio/cross-platform/unity-scripting-upgrade?view=vs-2019",[590],[726],{"type":23,"value":723},{"type":14,"tag":19,"props":728,"children":729},{},[730],{"type":14,"tag":586,"props":731,"children":734},{"href":732,"rel":733},"https://docs.unity3d.com/Manual/IL2CPP-OptimizingBuildTimes.html",[590],[735],{"type":23,"value":732},{"type":14,"tag":19,"props":737,"children":738},{},[739],{"type":14,"tag":586,"props":740,"children":742},{"href":680,"rel":741},[590],[743],{"type":23,"value":680},{"type":14,"tag":19,"props":745,"children":746},{},[747],{"type":14,"tag":586,"props":748,"children":750},{"href":666,"rel":749},[590],[751],{"type":23,"value":666},{"type":14,"tag":19,"props":753,"children":754},{},[755],{"type":14,"tag":586,"props":756,"children":759},{"href":757,"rel":758},"https://www.jianshu.com/p/7cfcb7b0cfe7",[590],[760],{"type":23,"value":757},{"type":14,"tag":19,"props":762,"children":763},{},[764],{"type":14,"tag":586,"props":765,"children":768},{"href":766,"rel":767},"https://blogs.unity3d.com/cn/2015/05/06/an-introduction-to-ilcpp-internals/",[590],[769],{"type":23,"value":766},{"title":7,"searchDepth":771,"depth":771,"links":772},2,[773,774,775,776,777,778,779,780,781,782,783,787,788,789,790,791],{"id":125,"depth":771,"text":128},{"id":136,"depth":771,"text":136},{"id":146,"depth":771,"text":149},{"id":176,"depth":771,"text":176},{"id":196,"depth":771,"text":199},{"id":350,"depth":771,"text":353},{"id":366,"depth":771,"text":369},{"id":397,"depth":771,"text":397},{"id":414,"depth":771,"text":417},{"id":440,"depth":771,"text":440},{"id":484,"depth":771,"text":484,"children":784},[785],{"id":521,"depth":786,"text":521},3,{"id":547,"depth":771,"text":550},{"id":606,"depth":771,"text":606},{"id":647,"depth":771,"text":650},{"id":689,"depth":771,"text":689},{"id":712,"depth":771,"text":712},"markdown","content:unity:2019-06-20-unity-il2cpp-debugger.md","content","unity/2019-06-20-unity-il2cpp-debugger.md","md","2019-06-20",[799,809,936,985,1037,1050,1162],{"title":800,"_path":801,"children":802},"Art","/art",[803,806],{"title":804,"_path":805},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":807,"_path":808},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":810,"_path":811,"children":812},"Dotnet","/dotnet",[813,816,819,822,825,828,831,834,837,840,843,846,849,852,855,858,861,864,867,870,873,876,879,882,885,888,891,894,897,900,903,906,909,912,915,918,921,924,927,930,933],{"title":814,"_path":815},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":817,"_path":818},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":820,"_path":821},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":823,"_path":824},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":826,"_path":827},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":829,"_path":830},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":832,"_path":833},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":835,"_path":836},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":838,"_path":839},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":841,"_path":842},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":844,"_path":845},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":847,"_path":848},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":850,"_path":851},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":853,"_path":854},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":856,"_path":857},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":859,"_path":860},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":862,"_path":863},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":865,"_path":866},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":868,"_path":869},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":871,"_path":872},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":874,"_path":875},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":877,"_path":878},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":880,"_path":881},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":883,"_path":884},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":886,"_path":887},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":889,"_path":890},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":892,"_path":893},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":895,"_path":896},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":898,"_path":899},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":901,"_path":902},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":904,"_path":905},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":907,"_path":908},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":910,"_path":911},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":913,"_path":914},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":916,"_path":917},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":919,"_path":920},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":922,"_path":923},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":925,"_path":926},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":928,"_path":929},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":931,"_path":932},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":934,"_path":935},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":937,"_path":938,"children":939},"Game","/game",[940,943,946,949,952,955,958,961,964,967,970,973,976,979,982],{"title":941,"_path":942},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":944,"_path":945},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":947,"_path":948},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":950,"_path":951},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":953,"_path":954},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":956,"_path":957},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":959,"_path":960},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":962,"_path":963},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":965,"_path":966},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":968,"_path":969},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":971,"_path":972},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":974,"_path":975},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":977,"_path":978},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":980,"_path":981},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":983,"_path":984},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":986,"_path":987,"children":988},"Gyj","/gyj",[989,992,995,998,1001,1004,1007,1010,1013,1016,1019,1022,1025,1028,1031,1034],{"title":990,"_path":991},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":993,"_path":994},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":996,"_path":997},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":999,"_path":1000},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1002,"_path":1003},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1005,"_path":1006},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1008,"_path":1009},"玩法","/gyj/2022-08-22-wanfa",{"title":1011,"_path":1012},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1014,"_path":1015},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1017,"_path":1018},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1020,"_path":1021},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1023,"_path":1024},"门派内容相关","/gyj/2022-11-17-sect",{"title":1026,"_path":1027},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1029,"_path":1030},"种植","/gyj/2022-12-01-zhongzhi",{"title":1032,"_path":1033},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1035,"_path":1036},"跑商","/gyj/2023-11-01-paoshang",{"title":1038,"_path":1039,"children":1040},"Js","/js",[1041,1044,1047],{"title":1042,"_path":1043},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1045,"_path":1046},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1048,"_path":1049},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1051,"_path":1052,"children":1053},"Tool","/tool",[1054,1057,1060,1063,1066,1069,1072,1075,1078,1081,1084,1087,1090,1093,1096,1099,1102,1105,1108,1111,1114,1117,1120,1123,1126,1129,1132,1135,1138,1141,1144,1147,1150,1153,1156,1159],{"title":1055,"_path":1056},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1058,"_path":1059},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1061,"_path":1062},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1064,"_path":1065},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1067,"_path":1068},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1070,"_path":1071},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1073,"_path":1074},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1076,"_path":1077},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1079,"_path":1080},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1082,"_path":1083},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1085,"_path":1086},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1088,"_path":1089},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1091,"_path":1092},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1094,"_path":1095},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1097,"_path":1098},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1100,"_path":1101},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1103,"_path":1104},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1106,"_path":1107},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1109,"_path":1110},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1112,"_path":1113},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1115,"_path":1116},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1118,"_path":1119},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1121,"_path":1122},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1124,"_path":1125},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1127,"_path":1128},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1130,"_path":1131},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1133,"_path":1134},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1136,"_path":1137},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1139,"_path":1140},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1142,"_path":1143},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1145,"_path":1146},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1148,"_path":1149},"rider的使用","/tool/2022-08-02-rider-use",{"title":1151,"_path":1152},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1154,"_path":1155},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1157,"_path":1158},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1160,"_path":1161},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1163,"_path":1164,"children":1165},"Unity","/unity",[1166,1169,1170,1173,1176,1179,1182,1185,1188,1191,1194,1197,1200,1203,1206,1209,1212,1215,1218,1221,1224,1227,1230,1233,1236,1239,1242,1245,1248,1251,1254,1257,1260,1263,1266,1269,1272,1275,1278,1281,1284,1287,1290,1293,1296,1299,1302,1305,1308,1311,1314,1317,1320,1323,1326,1329,1332,1335,1338,1341,1344,1347,1350,1353,1356,1359,1362,1365,1368,1371,1374,1377],{"title":1167,"_path":1168},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":8,"_path":4},{"title":1171,"_path":1172},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1174,"_path":1175},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1177,"_path":1178},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1180,"_path":1181},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1183,"_path":1184},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1186,"_path":1187},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1189,"_path":1190},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1192,"_path":1193},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":1195,"_path":1196},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":1198,"_path":1199},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1201,"_path":1202},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1204,"_path":1205},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1207,"_path":1208},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1210,"_path":1211},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1213,"_path":1214},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1216,"_path":1217},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1219,"_path":1220},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1222,"_path":1223},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1225,"_path":1226},"技能系统","/unity/2020-02-15-skill-system",{"title":1228,"_path":1229},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1231,"_path":1232},"角色状态设计","/unity/2020-02-17-character-states",{"title":1234,"_path":1235},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1237,"_path":1238},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1240,"_path":1241},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1243,"_path":1244},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1246,"_path":1247},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1249,"_path":1250},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1252,"_path":1253},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1255,"_path":1256},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1258,"_path":1259},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1261,"_path":1262},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1264,"_path":1265},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1267,"_path":1268},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1270,"_path":1271},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1273,"_path":1274},"unity的addressables","/unity/2020-09-12-addressables",{"title":1276,"_path":1277},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1279,"_path":1280},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1282,"_path":1283},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1285,"_path":1286},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1288,"_path":1289},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1291,"_path":1292},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1294,"_path":1295},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1297,"_path":1298},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1300,"_path":1301},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1303,"_path":1304},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1306,"_path":1307},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1309,"_path":1310},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1312,"_path":1313},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1315,"_path":1316},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1318,"_path":1319},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1321,"_path":1322},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1324,"_path":1325},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1327,"_path":1328},"ability","/unity/2020-11-16-dotssample",{"title":1330,"_path":1331},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1333,"_path":1334},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1336,"_path":1337},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1339,"_path":1340},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1342,"_path":1343},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1345,"_path":1346},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1348,"_path":1349},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1351,"_path":1352},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1354,"_path":1355},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1357,"_path":1358},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1360,"_path":1361},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1363,"_path":1364},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1366,"_path":1367},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1369,"_path":1370},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1372,"_path":1373},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1375,"_path":1376},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1378,"_path":1379},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779042386]