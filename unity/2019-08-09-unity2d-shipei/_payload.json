[{"data":1,"prerenderedAt":1087},["Reactive",2],{"content-query-2ixZEQOIlN":3,"content-navigation-8C37fagqQL":505},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":499,"_id":500,"_source":501,"_file":502,"_extension":503,"date":504},"/unity/2019-08-09-unity2d-shipei","unity",false,"","关于unity的适配问题","先说明一些基本的概念：1.屏幕的宽高比Aspect Ratio = 屏幕宽度/屏幕高度2.Unity2D中摄像机镜头的尺寸决定了我们实际看到游戏内容的多少，在编辑器中我们可以通过调整摄像机Camera的orthographicSize属性值来调整摄像机的大小。如下图所示，当摄像机orthographicSize属性值等于当前屏幕高度单位的一半时，摄像机大小正好与屏幕大小相等。注意这里提到的是屏幕单位高度的一半，这个数值是经过像素到单位比即Pixels To Units换算的，Unity2D中这个比例的默认值是100，即100像素等于1单位。如果我们的游戏屏幕有640像素高，那么实际换算成单位高",{"type":11,"children":12,"toc":483},"root",[13,21,30,38,43,51,56,63,70,75,83,88,96,101,107,114,134,139,145,150,155,163,168,176,181,186,194,200,205,215,223,228,236,242,247,252,257,277,284,291,296,301,306,311,317,322,327,333,345,351,356,364,376,381,386,391,396,401,406,411,416,421,426,431,437,442,447,452,457],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":20},"text","先说明一些基本的概念：",{"type":14,"tag":15,"props":22,"children":23},{},[24],{"type":14,"tag":25,"props":26,"children":27},"strong",{},[28],{"type":19,"value":29},"1.屏幕的宽高比Aspect Ratio = 屏幕宽度/屏幕高度",{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":14,"tag":25,"props":34,"children":35},{},[36],{"type":19,"value":37},"2.Unity2D中摄像机镜头的尺寸决定了我们实际看到游戏内容的多少，在编辑器中我们可以通过调整摄像机Camera的orthographicSize属性值来调整摄像机的大小。",{"type":14,"tag":15,"props":39,"children":40},{},[41],{"type":19,"value":42},"如下图所示，当摄像机orthographicSize属性值等于当前屏幕高度单位的一半时，摄像机大小正好与屏幕大小相等。注意这里提到的是屏幕单位高度的一半，这个数值是经过像素到单位比即Pixels To Units换算的，Unity2D中这个比例的默认值是100，即100像素等于1单位。如果我们的游戏屏幕有640像素高，那么实际换算成单位高度则是6.4个单位，当我们摄像机的orthographicSize值是3.2时，摄像机大小刚好与屏幕大小相等。",{"type":14,"tag":15,"props":44,"children":45},{},[46],{"type":14,"tag":47,"props":48,"children":50},"img",{"alt":47,"src":49},"/images/2019-08-09-unity2d-shipei/041527387365011.png",[],{"type":14,"tag":15,"props":52,"children":53},{},[54],{"type":19,"value":55},"可以通过此选项调整每张图片的像素单位比",{"type":14,"tag":15,"props":57,"children":58},{},[59],{"type":14,"tag":47,"props":60,"children":62},{"alt":47,"src":61},"/images/2019-08-09-unity2d-shipei/041505358774753.png",[],{"type":14,"tag":64,"props":65,"children":67},"h3",{"id":66},"unity编辑器中只能直接调整摄像机的高度那摄像机的宽度是如何确定的呢",[68],{"type":19,"value":69},"Unity编辑器中只能直接调整摄像机的高度，那摄像机的宽度是如何确定的呢？",{"type":14,"tag":15,"props":71,"children":72},{},[73],{"type":19,"value":74},"答案就是我们最前面提到的屏幕宽高比。Unity会根据当前屏幕实际的宽高比和摄像机的orthographicSize值来计算出摄像机的宽度值，即：",{"type":14,"tag":15,"props":76,"children":77},{},[78],{"type":14,"tag":25,"props":79,"children":80},{},[81],{"type":19,"value":82},"摄像机实际宽度 = 摄像机orthographicSize * 2 * 屏幕宽高比",{"type":14,"tag":15,"props":84,"children":85},{},[86],{"type":19,"value":87},"也即是",{"type":14,"tag":15,"props":89,"children":90},{},[91],{"type":14,"tag":25,"props":92,"children":93},{},[94],{"type":19,"value":95},"摄像机实际宽度 = 摄像机高度 * 屏幕宽高比",{"type":14,"tag":15,"props":97,"children":98},{},[99],{"type":19,"value":100},"我举个例子说明一下，iPhone4的屏幕像素为640*960，宽高比为2:3，假设Pixels To Units值为100，那么如果设摄像机高度size值为4.8，那么摄像机实际宽度按照公式算出6.4，刚好就是屏幕的单位宽度。",{"type":14,"tag":102,"props":103,"children":105},"h1",{"id":104},"场景适配",[106],{"type":19,"value":104},{"type":14,"tag":108,"props":109,"children":111},"h2",{"id":110},"_2d场景和3d摄像机的适配",[112],{"type":19,"value":113},"2d场景和3d摄像机的适配",{"type":14,"tag":115,"props":116,"children":117},"ol",{},[118,124,129],{"type":14,"tag":119,"props":120,"children":121},"li",{},[122],{"type":19,"value":123},"因为需要引入3d的内容所以 worldcamera,使用了透视摄像机",{"type":14,"tag":119,"props":125,"children":126},{},[127],{"type":19,"value":128},"透视摄像机旋转了15度使其可以看到地面..因为是透视相机,这就造成了2d角色在相机移动后会发生偏移的问题..这个时候需要将2d角色始终面向相机.所以2d单位的容器也需要旋转15度",{"type":14,"tag":119,"props":130,"children":131},{},[132],{"type":19,"value":133},"为什么不单独使用一个正交摄像机看角色?因为这样的画,地面和角色不是用一个相机,且其中一个使用的是透视,会造成人物移动后,地面和角色形成视差,造成其他角色看起来不像站在地面上一样",{"type":14,"tag":108,"props":135,"children":137},{"id":136},"场景和ui位置的适配",[138],{"type":19,"value":136},{"type":14,"tag":64,"props":140,"children":142},{"id":141},"_3d形象如何展现在ui中",[143],{"type":19,"value":144},"3d形象如何展现在ui中",{"type":14,"tag":15,"props":146,"children":147},{},[148],{"type":19,"value":149},"直接将3d物品拖到ui中然后添加rect transform属性,3d物品会根据ui的位置改变而改变",{"type":14,"tag":15,"props":151,"children":152},{},[153],{"type":19,"value":154},"然后可能会出现看不到3d对象的问题.这个可能和canvas的plane distance有关,即摄像机和canvas的z的距离",{"type":14,"tag":15,"props":156,"children":157},{},[158],{"type":14,"tag":47,"props":159,"children":162},{"alt":160,"src":161},"image-20200828173613476","/images/2019-08-09-unity2d-shipei/image-20200828173613476.png",[],{"type":14,"tag":15,"props":164,"children":165},{},[166],{"type":19,"value":167},"用3d视图看下",{"type":14,"tag":15,"props":169,"children":170},{},[171],{"type":14,"tag":47,"props":172,"children":175},{"alt":173,"src":174},"image-20200828173814986","/images/2019-08-09-unity2d-shipei/image-20200828173814986.png",[],{"type":14,"tag":15,"props":177,"children":178},{},[179],{"type":19,"value":180},"这个时候是看不到cube的",{"type":14,"tag":15,"props":182,"children":183},{},[184],{"type":19,"value":185},"注意: 想用canvas中的ui去遮挡3d物品是做不到的,sortingGroup也不会有用处..如下图想用绿色盖住cube,是做不到的.因为他们在摄像机的显示是按照z去排的",{"type":14,"tag":15,"props":187,"children":188},{},[189],{"type":14,"tag":47,"props":190,"children":193},{"alt":191,"src":192},"image-20200828174105986","/images/2019-08-09-unity2d-shipei/image-20200828174105986.png",[],{"type":14,"tag":64,"props":195,"children":197},{"id":196},"根据场景位置设置ui位置",[198],{"type":19,"value":199},"根据场景位置设置ui位置..",{"type":14,"tag":15,"props":201,"children":202},{},[203],{"type":19,"value":204},"比如竖屏游戏.有一半是场景一半是ui,如何让ui去准确的盖住场景",{"type":14,"tag":206,"props":207,"children":209},"pre",{"code":208},"        public static Vector3 WorldToCanvasPosition(Camera objectCamera, Vector3 objectTransformPosition, RectTransform CanvasRect)\n        {\n            // Get the position on the canvas\n            Vector3 ViewportPosition = objectCamera.WorldToViewportPoint(objectTransformPosition);\n            Vector3 result = new Vector3(\n            ((ViewportPosition.x * CanvasRect.sizeDelta.x) - (CanvasRect.sizeDelta.x * 0.5f)),\n            ((ViewportPosition.y * CanvasRect.sizeDelta.y) - (CanvasRect.sizeDelta.y * 0.5f)), 0);\n\n            return CanvasRect.TransformPoint(result);\n        }\n",[210],{"type":14,"tag":211,"props":212,"children":213},"code",{"__ignoreMap":7},[214],{"type":19,"value":208},{"type":14,"tag":206,"props":216,"children":218},{"code":217},"       public static Vector3 WorldToCanvasPosition(Camera objectCamera, Vector3 objectTransformPosition, RectTransform CanvasRect, Canvas Canvas, Camera UICamera)\n        {\n            Vector3 screenPoint = RectTransformUtility.WorldToScreenPoint(objectCamera, objectTransformPosition);\n\n            RectTransformUtility.ScreenPointToLocalPointInRectangle(CanvasRect, screenPoint, Canvas.renderMode == RenderMode.ScreenSpaceOverlay ? null : UICamera, out Vector2 result);\n\n            return CanvasRect.TransformPoint(result);\n        }\n",[219],{"type":14,"tag":211,"props":220,"children":221},{"__ignoreMap":7},[222],{"type":19,"value":217},{"type":14,"tag":15,"props":224,"children":225},{},[226],{"type":19,"value":227},"使用:",{"type":14,"tag":206,"props":229,"children":231},{"code":230},"                    //0.3盖住半个单位的地形\n                    var pos = CameraUtils.WorldToCanvasPosition(this.mainCamera, new Vector3(boardRoot.position.x, boardRoot.position.y, boardRoot.position.z), rect);\n                    var perUnit = rect.sizeDelta.y / (2f * this.uiCamera.orthographicSize);\n                    (notification.Body as RectTransform).offsetMax = new Vector2(0, -(this.uiCamera.orthographicSize - pos.y) * perUnit);\n",[232],{"type":14,"tag":211,"props":233,"children":234},{"__ignoreMap":7},[235],{"type":19,"value":230},{"type":14,"tag":102,"props":237,"children":239},{"id":238},"ugui的适配",[240],{"type":19,"value":241},"UGUI的适配",{"type":14,"tag":15,"props":243,"children":244},{},[245],{"type":19,"value":246},"锚点是解决ui控件在canvas里面位置的问题.而Canvas Scaler主要是设置canvas(ui控件)显示的大小(缩放)问题",{"type":14,"tag":108,"props":248,"children":250},{"id":249},"锚点",[251],{"type":19,"value":249},{"type":14,"tag":15,"props":253,"children":254},{},[255],{"type":19,"value":256},"锚点这个概念在Unity文档的多分辨率适配中被明确的提到其作用。简单的说，就是定位。如果一个物体相对于屏幕位置左上角，那么无论屏幕分辨率怎么变化，它始终位于左上角。同理，如果是在（0,0）原点，那么也始终在中心原点。我对锚点定义为，锚点，是相对于父节点的偏移量，这个偏移量随屏幕分辨率变化而按比例变化，如果将分辨率的宽，高，看做归一化的数值（即0~1，实际UGUI就是这么做的），那么锚点是指一个偏移百分比。所以有了锚点，子节点在相对于父节点的位置上保持不变的。",{"type":14,"tag":15,"props":258,"children":259},{},[260,262,268,270,275],{"type":19,"value":261},"如图，参考分辨率960",{"type":14,"tag":263,"props":264,"children":265},"em",{},[266],{"type":19,"value":267},"640，我改变GameView的分辨率为800",{"type":19,"value":269},"468，图中绿色背景大小960",{"type":14,"tag":263,"props":271,"children":272},{},[273],{"type":19,"value":274},"640，红色Image大小100",{"type":19,"value":276},"100，红色图片的锚点为左上，轴点为左上，在参考分辨率下，红色正方形的左上顶点距离Canvas左上顶点距离（50，-150）",{"type":14,"tag":15,"props":278,"children":279},{},[280],{"type":14,"tag":47,"props":281,"children":283},{"alt":47,"src":282},"/images/2019-08-09-unity2d-shipei/php2Hv6xD.1469191739.png",[],{"type":14,"tag":15,"props":285,"children":286},{},[287],{"type":14,"tag":47,"props":288,"children":290},{"alt":47,"src":289},"/images/2019-08-09-unity2d-shipei/phpwptKbd.1469191746.png",[],{"type":14,"tag":15,"props":292,"children":293},{},[294],{"type":19,"value":295},"​    当我将屏幕分辨率切换为800*468后，",{"type":14,"tag":15,"props":297,"children":298},{},[299],{"type":19,"value":300},"​    因为我选的Screen Match Mode为Weight = 0，所以在800 * 468分辨率下的实际屏幕高度为 960 * （468/800）= 561.6。",{"type":14,"tag":15,"props":302,"children":303},{},[304],{"type":19,"value":305},"​    又因为我的UI Scale Mode选的是Scale with Screen Size随屏幕尺寸变化，这个时候的缩放比是由宽度决定的，960/800 = 1.2 ,所以红色正方形此时的高度为100 / 1.2= 83.333",{"type":14,"tag":15,"props":307,"children":308},{},[309],{"type":19,"value":310},"​    红色正方向锚点y轴坐标 = 参考锚点位置 * 缩放比 = 150 * 1.2 = 125，",{"type":14,"tag":108,"props":312,"children":314},{"id":313},"canvas-scaler",[315],{"type":19,"value":316},"Canvas Scaler",{"type":14,"tag":15,"props":318,"children":319},{},[320],{"type":19,"value":321},"看名字就知道..是设置canvas如何根据屏幕进行缩放",{"type":14,"tag":15,"props":323,"children":324},{},[325],{"type":19,"value":326},"UGUI的屏幕自适应，是通过Canvas Scaler来做的，根据屏幕的分辨率，计算出canvas的大小，同时计算ScaleXY,通过Size + Scale来控制Canvas的变换，UI作为canvas的子物体，也会跟随着一起变化；为了保证UI的位置，需要在设计UI的时候，利用锚点来保证UI与边缘或角落的距离，",{"type":14,"tag":64,"props":328,"children":330},{"id":329},"固定像素-constant-pixel-size",[331],{"type":19,"value":332},"固定像素 (Constant Pixel Size)",{"type":14,"tag":15,"props":334,"children":335},{},[336,338,343],{"type":19,"value":337},"忽略屏幕的大小根据UI元素的实际像素显示 ,像素大小始终不变，即一个100",{"type":14,"tag":263,"props":339,"children":340},{},[341],{"type":19,"value":342},"100的图片在任何的分辨率下都占用100",{"type":19,"value":344},"100的像素。一般PC上会使用这种方式，因为PC端分辨率差异并不大。",{"type":14,"tag":64,"props":346,"children":348},{"id":347},"根据屏幕大小进行缩放screen-match-mode",[349],{"type":19,"value":350},"根据屏幕大小进行缩放(Screen Match Mode)",{"type":14,"tag":15,"props":352,"children":353},{},[354],{"type":19,"value":355},"此项会根据设备真实分辨率与设计分辨率来对Canvas进行缩放。有三种模式：",{"type":14,"tag":115,"props":357,"children":358},{},[359],{"type":14,"tag":119,"props":360,"children":361},{},[362],{"type":19,"value":363},"Match Width or Height",{"type":14,"tag":15,"props":365,"children":366},{},[367,369,374],{"type":19,"value":368},"根据宽或者高来对Canvas进行缩放，比如设备分辨率为1920",{"type":14,"tag":263,"props":370,"children":371},{},[372],{"type":19,"value":373},"900，设计分辨率为1280",{"type":19,"value":375},"720，此时，如果采用宽进行匹配那么可以通过公式计算出此时应该缩放多少倍，公式如下：",{"type":14,"tag":15,"props":377,"children":378},{},[379],{"type":19,"value":380},"缩放因子：1920/1280 = 1.5",{"type":14,"tag":15,"props":382,"children":383},{},[384],{"type":19,"value":385},"缩放后的Canvas的宽为：1920（刚好能够完全显示）",{"type":14,"tag":15,"props":387,"children":388},{},[389],{"type":19,"value":390},"缩放后的Canvas的高为：720*1.5 = 1080",{"type":14,"tag":15,"props":392,"children":393},{},[394],{"type":19,"value":395},"由于设备的高为900所以会导致高度上的一部分不会被显示出来",{"type":14,"tag":15,"props":397,"children":398},{},[399],{"type":19,"value":400},"2.Expand",{"type":14,"tag":15,"props":402,"children":403},{},[404],{"type":19,"value":405},"适配的计算公式同上，只是在此模式下会保证设计分辨率下的东西能够全部显示出来，及选择设备分辨率和设计分辨率的宽、高比中选择最小值作为缩放因子。",{"type":14,"tag":15,"props":407,"children":408},{},[409],{"type":19,"value":410},"3.Shrink",{"type":14,"tag":15,"props":412,"children":413},{},[414],{"type":19,"value":415},"和Expand恰好相反，在此模式下不会留黑边但是会导致显示不完全。及选择设备分辨率和设计分辨率的宽、高比中选择最大值作为缩放因子。",{"type":14,"tag":15,"props":417,"children":418},{},[419],{"type":19,"value":420},"UiScaleMode一般选择Scale With Screen Size，并设置好设计分辨率。其他两个选项都是固定像素大小。",{"type":14,"tag":15,"props":422,"children":423},{},[424],{"type":19,"value":425},"Screen Match Mode中一般选择Expand，它可以保证ui中的所有元素都在屏幕内部。 相对比的一个选项是Shrink，它可以保证不留空白边。",{"type":14,"tag":15,"props":427,"children":428},{},[429],{"type":19,"value":430},"3、多分辨率的思路是Scaler中选择Expand保证所有ui元素在屏幕内部。少部分界面，如主界面、战斗界面等根据需要设置Anchors中的全屏拉伸。注意，这里的拉伸的含义仅仅是设置Panel的宽、高，并不影响子控件的缩放，但是会影响其布局。",{"type":14,"tag":64,"props":432,"children":434},{"id":433},"固定物理大小constant-physical-size",[435],{"type":19,"value":436},"固定物理大小(Constant Physical Size)",{"type":14,"tag":15,"props":438,"children":439},{},[440],{"type":19,"value":441},"忽略屏幕大小和分辨率根据UI的实际物理大小来显示。",{"type":14,"tag":102,"props":443,"children":445},{"id":444},"刘海屏的适配",[446],{"type":19,"value":444},{"type":14,"tag":15,"props":448,"children":449},{},[450],{"type":19,"value":451},"待续",{"type":14,"tag":102,"props":453,"children":455},{"id":454},"参考链接",[456],{"type":19,"value":454},{"type":14,"tag":458,"props":459,"children":460},"ul",{},[461,473],{"type":14,"tag":119,"props":462,"children":463},{},[464],{"type":14,"tag":465,"props":466,"children":470},"a",{"href":467,"rel":468},"https://blog.csdn.net/shitangdejiaozi/article/details/88964850",[469],"nofollow",[471],{"type":19,"value":472},"Unity记录-UGUI的屏幕自适应原理和应用_shitangdejiaozi的博客-CSDN博客",{"type":14,"tag":119,"props":474,"children":475},{},[476],{"type":14,"tag":465,"props":477,"children":480},{"href":478,"rel":479},"https://www.jianshu.com/p/8ead0701d8ef",[469],[481],{"type":19,"value":482},"Android刘海屏适配方案总结 - 简书 (jianshu.com)",{"title":7,"searchDepth":484,"depth":484,"links":485},2,[486,488,489,493,494],{"id":66,"depth":487,"text":69},3,{"id":110,"depth":484,"text":113},{"id":136,"depth":484,"text":136,"children":490},[491,492],{"id":141,"depth":487,"text":144},{"id":196,"depth":487,"text":199},{"id":249,"depth":484,"text":249},{"id":313,"depth":484,"text":316,"children":495},[496,497,498],{"id":329,"depth":487,"text":332},{"id":347,"depth":487,"text":350},{"id":433,"depth":487,"text":436},"markdown","content:unity:2019-08-09-unity2d-shipei.md","content","unity/2019-08-09-unity2d-shipei.md","md","2019-08-09",[506,516,643,692,744,757,869],{"title":507,"_path":508,"children":509},"Art","/art",[510,513],{"title":511,"_path":512},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":514,"_path":515},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":517,"_path":518,"children":519},"Dotnet","/dotnet",[520,523,526,529,532,535,538,541,544,547,550,553,556,559,562,565,568,571,574,577,580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,640],{"title":521,"_path":522},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":524,"_path":525},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":527,"_path":528},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":530,"_path":531},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":533,"_path":534},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":536,"_path":537},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":539,"_path":540},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":542,"_path":543},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":545,"_path":546},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":548,"_path":549},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":551,"_path":552},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":554,"_path":555},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":557,"_path":558},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":560,"_path":561},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":563,"_path":564},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":566,"_path":567},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":569,"_path":570},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":572,"_path":573},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":575,"_path":576},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":578,"_path":579},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":581,"_path":582},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":584,"_path":585},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":587,"_path":588},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":590,"_path":591},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":593,"_path":594},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":596,"_path":597},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":599,"_path":600},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":602,"_path":603},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":605,"_path":606},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":608,"_path":609},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":611,"_path":612},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":614,"_path":615},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":617,"_path":618},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":620,"_path":621},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":623,"_path":624},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":626,"_path":627},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":629,"_path":630},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":632,"_path":633},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":635,"_path":636},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":638,"_path":639},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":641,"_path":642},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":644,"_path":645,"children":646},"Game","/game",[647,650,653,656,659,662,665,668,671,674,677,680,683,686,689],{"title":648,"_path":649},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":651,"_path":652},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":654,"_path":655},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":657,"_path":658},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":660,"_path":661},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":663,"_path":664},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":666,"_path":667},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":669,"_path":670},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":672,"_path":673},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":675,"_path":676},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":678,"_path":679},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":681,"_path":682},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":684,"_path":685},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":687,"_path":688},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":690,"_path":691},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":693,"_path":694,"children":695},"Gyj","/gyj",[696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741],{"title":697,"_path":698},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":700,"_path":701},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":703,"_path":704},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":706,"_path":707},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":709,"_path":710},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":712,"_path":713},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":715,"_path":716},"玩法","/gyj/2022-08-22-wanfa",{"title":718,"_path":719},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":721,"_path":722},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":724,"_path":725},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":727,"_path":728},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":730,"_path":731},"门派内容相关","/gyj/2022-11-17-sect",{"title":733,"_path":734},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":736,"_path":737},"种植","/gyj/2022-12-01-zhongzhi",{"title":739,"_path":740},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":742,"_path":743},"跑商","/gyj/2023-11-01-paoshang",{"title":745,"_path":746,"children":747},"Js","/js",[748,751,754],{"title":749,"_path":750},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":752,"_path":753},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":755,"_path":756},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":758,"_path":759,"children":760},"Tool","/tool",[761,764,767,770,773,776,779,782,785,788,791,794,797,800,803,806,809,812,815,818,821,824,827,830,833,836,839,842,845,848,851,854,857,860,863,866],{"title":762,"_path":763},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":765,"_path":766},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":768,"_path":769},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":771,"_path":772},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":774,"_path":775},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":777,"_path":778},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":780,"_path":781},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":783,"_path":784},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":786,"_path":787},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":789,"_path":790},"mac下brew 使用","/tool/2020-01-13-brew",{"title":792,"_path":793},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":795,"_path":796},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":798,"_path":799},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":801,"_path":802},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":804,"_path":805},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":807,"_path":808},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":810,"_path":811},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":813,"_path":814},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":816,"_path":817},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":819,"_path":820},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":822,"_path":823},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":825,"_path":826},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":828,"_path":829},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":831,"_path":832},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":834,"_path":835},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":837,"_path":838},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":840,"_path":841},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":843,"_path":844},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":846,"_path":847},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":849,"_path":850},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":852,"_path":853},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":855,"_path":856},"rider的使用","/tool/2022-08-02-rider-use",{"title":858,"_path":859},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":861,"_path":862},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":864,"_path":865},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":867,"_path":868},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":870,"_path":871,"children":872},"Unity","/unity",[873,876,879,882,883,886,889,892,895,898,901,904,907,910,913,916,919,922,925,928,931,934,937,940,943,946,949,952,955,958,961,964,967,970,973,976,979,982,985,988,991,994,997,1000,1003,1006,1009,1012,1015,1018,1021,1024,1027,1030,1033,1036,1039,1042,1045,1048,1051,1054,1057,1060,1063,1066,1069,1072,1075,1078,1081,1084],{"title":874,"_path":875},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":877,"_path":878},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":880,"_path":881},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":8,"_path":4},{"title":884,"_path":885},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":887,"_path":888},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":890,"_path":891},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":893,"_path":894},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":896,"_path":897},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":899,"_path":900},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":902,"_path":903},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":905,"_path":906},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":908,"_path":909},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":911,"_path":912},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":914,"_path":915},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":917,"_path":918},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":920,"_path":921},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":923,"_path":924},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":926,"_path":927},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":929,"_path":930},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":932,"_path":933},"技能系统","/unity/2020-02-15-skill-system",{"title":935,"_path":936},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":938,"_path":939},"角色状态设计","/unity/2020-02-17-character-states",{"title":941,"_path":942},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":944,"_path":945},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":947,"_path":948},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":950,"_path":951},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":953,"_path":954},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":956,"_path":957},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":959,"_path":960},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":962,"_path":963},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":965,"_path":966},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":968,"_path":969},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":971,"_path":972},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":974,"_path":975},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":977,"_path":978},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":980,"_path":981},"unity的addressables","/unity/2020-09-12-addressables",{"title":983,"_path":984},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":986,"_path":987},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":989,"_path":990},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":992,"_path":993},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":995,"_path":996},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":998,"_path":999},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1001,"_path":1002},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1004,"_path":1005},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1007,"_path":1008},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1010,"_path":1011},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1013,"_path":1014},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1016,"_path":1017},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1019,"_path":1020},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1022,"_path":1023},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1025,"_path":1026},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1028,"_path":1029},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1031,"_path":1032},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1034,"_path":1035},"ability","/unity/2020-11-16-dotssample",{"title":1037,"_path":1038},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1040,"_path":1041},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1043,"_path":1044},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1046,"_path":1047},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1049,"_path":1050},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1052,"_path":1053},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1055,"_path":1056},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1058,"_path":1059},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1061,"_path":1062},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1064,"_path":1065},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1067,"_path":1068},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1070,"_path":1071},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1073,"_path":1074},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1076,"_path":1077},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1079,"_path":1080},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1082,"_path":1083},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1085,"_path":1086},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779042095]