[{"data":1,"prerenderedAt":1141},["Reactive",2],{"content-query-eamRBlbQI3":3,"content-navigation-8C37fagqQL":559},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":553,"_id":554,"_source":555,"_file":556,"_extension":557,"date":558},"/game/2021-01-23-roguelike-map","game",false,"","roguelike地牢生成算法","引言文章作者：Mike Anderson随机生成的地图是 Roguelike 类游戏最独特的一点，它让游戏变得很有乐趣，因为玩家永远要面对新的挑战。但是随机地图却不是那么容易生成的。在传统的游戏中，一般你都会有一个地图编辑器，可以自由的创建地图。在任何一款称得上是“Roguelike”的游戏中，开发者都要自己创造一个“虚拟地图编辑器”，这样才能随机创建无限的动态地图，从而让玩家在其中流连忘返。在这篇文章里，我会将自己在开发一款名为 Tyrant 的 Roguelike 游戏中使用的方法记录下来。我怀疑这可能只能算是一个原型，但是我之前也没有见过什么一本正经讲述生成 Roguelike 地图算法",{"type":11,"children":12,"toc":550},"root",[13,21,36,50,55,69,74,79,93,118,123,128,133,138,143,148,153,158,212,226,231,236,241,246,251,256,261,266,271,276,281,286,295,300,308,313,321,326,334,339,347,352,360,365,373,378,386,391,399,404,412,417,424,429,437,442,450,455,460,465,470,496,510,524,538],{"type":14,"tag":15,"props":16,"children":18},"element","h4",{"id":17},"引言",[19],{"type":20,"value":17},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25,27],{"type":20,"value":26},"文章作者：",{"type":14,"tag":28,"props":29,"children":33},"a",{"href":30,"rel":31},"http://www.roguebasin.com/index.php?title=Mike_Anderson",[32],"nofollow",[34],{"type":20,"value":35},"Mike Anderson",{"type":14,"tag":22,"props":37,"children":38},{},[39,41,48],{"type":20,"value":40},"随机生成的地图是 ",{"type":14,"tag":28,"props":42,"children":45},{"href":43,"rel":44},"https://indienova.com/tag/roguelike/",[32],[46],{"type":20,"value":47},"Roguelike",{"type":20,"value":49}," 类游戏最独特的一点，它让游戏变得很有乐趣，因为玩家永远要面对新的挑战。",{"type":14,"tag":22,"props":51,"children":52},{},[53],{"type":20,"value":54},"但是随机地图却不是那么容易生成的。在传统的游戏中，一般你都会有一个地图编辑器，可以自由的创建地图。在任何一款称得上是“Roguelike”的游戏中，开发者都要自己创造一个“虚拟地图编辑器”，这样才能随机创建无限的动态地图，从而让玩家在其中流连忘返。",{"type":14,"tag":22,"props":56,"children":57},{},[58,60,67],{"type":20,"value":59},"在这篇文章里，我会将自己在开发一款名为 ",{"type":14,"tag":28,"props":61,"children":64},{"href":62,"rel":63},"http://sourceforge.net/projects/tyrant/",[32],[65],{"type":20,"value":66},"Tyrant",{"type":20,"value":68}," 的 Roguelike 游戏中使用的方法记录下来。我怀疑这可能只能算是一个原型，但是我之前也没有见过什么一本正经讲述生成 Roguelike 地图算法的文章。而且，它工作得还是比较令人满意的，所以，我愿意将它分享给大家。",{"type":14,"tag":15,"props":70,"children":72},{"id":71},"这款算法的目标",[73],{"type":20,"value":71},{"type":14,"tag":22,"props":75,"children":76},{},[77],{"type":20,"value":78},"在写任何代码之前，了解自己的目标总是很重要的，这对编程很有帮助，哪怕你随后会做无数的修改。",{"type":14,"tag":22,"props":80,"children":81},{},[82,84,91],{"type":20,"value":83},"一个地牢（",{"type":14,"tag":28,"props":85,"children":88},{"href":86,"rel":87},"https://indienova.com/tag/dungeon/",[32],[89],{"type":20,"value":90},"Dungeon",{"type":20,"value":92},"）应该包含以下要点：",{"type":14,"tag":94,"props":95,"children":96},"ul",{},[97,103,108,113],{"type":14,"tag":98,"props":99,"children":100},"li",{},[101],{"type":20,"value":102},"一组相互连通的房间、门和通道",{"type":14,"tag":98,"props":104,"children":105},{},[106],{"type":20,"value":107},"一个入口（向上走的楼梯）",{"type":14,"tag":98,"props":109,"children":110},{},[111],{"type":20,"value":112},"一个出口（向下走的楼梯）",{"type":14,"tag":98,"props":114,"children":115},{},[116],{"type":20,"value":117},"所有的空间必须能够到达",{"type":14,"tag":22,"props":119,"children":120},{},[121],{"type":20,"value":122},"最后一点尤其重要。要知道，你的玩家在契而不舍的努力之后，应该能够顺利通过这一层，不要让他们失望。另外，如果放了某个物品到地图上的某个空间，它应该不会被藏在无法到达的地方。",{"type":14,"tag":15,"props":124,"children":126},{"id":125},"计划",[127],{"type":20,"value":125},{"type":14,"tag":22,"props":129,"children":130},{},[131],{"type":20,"value":132},"在我写 Tyrant 的时候，我尝试了很多种不同的算法来生成地图，这里所讲的是我能做到的最好的一个，也是目前游戏中使用的那个。",{"type":14,"tag":22,"props":134,"children":135},{},[136],{"type":20,"value":137},"我的灵感来自于此：“如果我是地下城的一个居民，那么我该怎么去建设我的地牢呢？”",{"type":14,"tag":22,"props":139,"children":140},{},[141],{"type":20,"value":142},"显然，我并不会将我的地下城建造成一个一个看起来不错的小房间，然后在中间用长长的通道连接起来。所以，当我需要为我的小怪物们提供更多空间的时候，我应该是拿起我的斧头，挖一个更大一些的洞。这样当他们有所需要的时候就会增加一些新房间——尽管它们看起来可能杂乱无章。",{"type":14,"tag":22,"props":144,"children":145},{},[146],{"type":20,"value":147},"有些地下城主可能想要用吊桥呀、陷阱呀什么的来守护比较“有趣”的房间，但是这些需求都异曲同工。由一个小的地牢开始，慢慢向四周扩散，直到整个地牢形成。这就是我们的计划。",{"type":14,"tag":15,"props":149,"children":151},{"id":150},"算法",[152],{"type":20,"value":150},{"type":14,"tag":22,"props":154,"children":155},{},[156],{"type":20,"value":157},"在这个算法里面，“元素”代表着某种地图元素，比如：大房间、小房间、通道、圆形竞技场、保险柜等等。",{"type":14,"tag":159,"props":160,"children":161},"ol",{},[162,167,172,177,182,187,192,197,202,207],{"type":14,"tag":98,"props":163,"children":164},{},[165],{"type":20,"value":166},"将整个地图填满土",{"type":14,"tag":98,"props":168,"children":169},{},[170],{"type":20,"value":171},"在地图中间挖一个房间出来",{"type":14,"tag":98,"props":173,"children":174},{},[175],{"type":20,"value":176},"选中某一房间（如果有多个的话）的墙壁",{"type":14,"tag":98,"props":178,"children":179},{},[180],{"type":20,"value":181},"确定要修建某种新元素",{"type":14,"tag":98,"props":183,"children":184},{},[185],{"type":20,"value":186},"查看从选中的墙延伸出去是否有足够的空间承载新的元素",{"type":14,"tag":98,"props":188,"children":189},{},[190],{"type":20,"value":191},"如果有的话继续，不然就返回第 3 步",{"type":14,"tag":98,"props":193,"children":194},{},[195],{"type":20,"value":196},"从选中的墙处增加新的元素",{"type":14,"tag":98,"props":198,"children":199},{},[200],{"type":20,"value":201},"返回第 3 步，直到地牢建设完成",{"type":14,"tag":98,"props":203,"children":204},{},[205],{"type":20,"value":206},"在地图的随机点上安排上楼和下楼的楼梯",{"type":14,"tag":98,"props":208,"children":209},{},[210],{"type":20,"value":211},"最后，放进去怪兽和物品",{"type":14,"tag":22,"props":213,"children":214},{},[215,217,224],{"type":20,"value":216},"第 1、2 步很简单。只要你创建好地图就可以去做到。我发现，写一个 ",{"type":14,"tag":218,"props":219,"children":221},"code",{"className":220},[],[222],{"type":20,"value":223},"fillRect",{"type":20,"value":225}," 指令用来填充一个区域是比较有效的做法。",{"type":14,"tag":22,"props":227,"children":228},{},[229],{"type":20,"value":230},"第 3 步麻烦一些。你不能随意的寻找一个方块区域去添加你的元素，因为规则是要将元素添加到当前的地牢当中。这样会使得连接看起来比较不错，也确保了所有的区域都可以到达。Tyrant 的做法是：在地图上随机选择一个方块，直到找到横向或者纵向毗邻一个干净的方块那个。这样做的好处是：它给了你一个近乎公平的方式去选择某一面墙。",{"type":14,"tag":22,"props":232,"children":233},{},[234],{"type":20,"value":235},"第 4 步不太困难。我自己写了一个随机方法来决定建造哪一种元素。你可以自己定义它们，调整某些元素出现的权重，这会让你的地牢有自己的特点和侧重点。一个规划比较好的地牢会有很多规矩的房间，中间有长而且直的走廊连接。而洞穴则可能有一堆打洞以及曲折的小道等等。",{"type":14,"tag":22,"props":237,"children":238},{},[239],{"type":20,"value":240},"第 5 步更复杂一些，而且也是整个算法的核心。针对每一种元素，你需要知道它会占用的空间大小。然后你要去判断它是否和已经有的元素相交。Tyrant 使用了相对简单的一种方法：它会先得到要创建的元素所占用的空间大小，得到这个空间的数据，然后检查是否这个空间由土填满。",{"type":14,"tag":22,"props":242,"children":243},{},[244],{"type":20,"value":245},"第 6 步决定是否创建这个元素。如果这个待确定的空间包含有除了土之外的内容，那么就回到第 3 步继续。注意，大部分元素在这步都会被打回。不过这不是个问题，因为处理时间可以忽略。Tyrant 尝试着将某个元素加入 300 次左右到地牢中去，一般只有 40 次左右会通过这步。",{"type":14,"tag":22,"props":247,"children":248},{},[249],{"type":20,"value":250},"第 7 步会将新元素添加到地图上去。在这步，你还可以增加一些有趣的元素，比如动物、居民、秘道门和财宝什么的。",{"type":14,"tag":22,"props":252,"children":253},{},[254],{"type":20,"value":255},"第 8 步返回去创建更多的房间。确切的次数跟你地牢的尺寸以及其它参数有关。",{"type":14,"tag":22,"props":257,"children":258},{},[259],{"type":20,"value":260},"第 9 步要看个人喜好了。最简单的方法就是随机的去查找方块，直到找到一个空的位置去放置楼梯。",{"type":14,"tag":22,"props":262,"children":263},{},[264],{"type":20,"value":265},"第 10 步就是随机的创建怪兽。Tyrant 在这一步才加入游戏中大多数的怪兽，由少量的特殊怪兽或者生物会在生成房间的时候添加进去。",{"type":14,"tag":22,"props":267,"children":268},{},[269],{"type":20,"value":270},"就这样啦，这里所说的只是算法的规则，具体还要您自己去实现啦。",{"type":14,"tag":15,"props":272,"children":274},{"id":273},"例子",[275],{"type":20,"value":273},{"type":14,"tag":22,"props":277,"children":278},{},[279],{"type":20,"value":280},"好了，在看了半天算法之后，我们来一个例子吧：",{"type":14,"tag":22,"props":282,"children":283},{},[284],{"type":20,"value":285},"Key:",{"type":14,"tag":287,"props":288,"children":290},"pre",{"code":289},"# = 地板\nD = 门\nW = 正在考查中的墙\nC = 宝箱\n",[291],{"type":14,"tag":218,"props":292,"children":293},{"__ignoreMap":7},[294],{"type":20,"value":289},{"type":14,"tag":22,"props":296,"children":297},{},[298],{"type":20,"value":299},"\\1. 第一个房间",{"type":14,"tag":287,"props":301,"children":303},{"code":302},"#####\n#####\n#####\n",[304],{"type":14,"tag":218,"props":305,"children":306},{"__ignoreMap":7},[307],{"type":20,"value":302},{"type":14,"tag":22,"props":309,"children":310},{},[311],{"type":20,"value":312},"\\2. 随机选择一面墙",{"type":14,"tag":287,"props":314,"children":316},{"code":315},"#####\n#####W\n#####\n",[317],{"type":14,"tag":218,"props":318,"children":319},{"__ignoreMap":7},[320],{"type":20,"value":315},{"type":14,"tag":22,"props":322,"children":323},{},[324],{"type":20,"value":325},"\\3. 为新的通道元素进行区域搜索（包括两边的空间）",{"type":14,"tag":287,"props":327,"children":329},{"code":328},"#####**********\n#####W*********\n#####**********\n",[330],{"type":14,"tag":218,"props":331,"children":332},{"__ignoreMap":7},[333],{"type":20,"value":328},{"type":14,"tag":22,"props":335,"children":336},{},[337],{"type":20,"value":338},"\\4. 是空的，可以添加元素",{"type":14,"tag":287,"props":340,"children":342},{"code":341},"#####\n#####D########\n#####\n",[343],{"type":14,"tag":218,"props":344,"children":345},{"__ignoreMap":7},[346],{"type":20,"value":341},{"type":14,"tag":22,"props":348,"children":349},{},[350],{"type":20,"value":351},"\\5. 选择另外一面墙",{"type":14,"tag":287,"props":353,"children":355},{"code":354},"#####     W\n#####D########\n#####\n",[356],{"type":14,"tag":218,"props":357,"children":358},{"__ignoreMap":7},[359],{"type":20,"value":354},{"type":14,"tag":22,"props":361,"children":362},{},[363],{"type":20,"value":364},"\\6. 扫描寻找新的房间所占用空间：",{"type":14,"tag":287,"props":366,"children":368},{"code":367},"       ******\n       ******\n       ******\n       ******\n       ******\n#####  ***W**\n#####D########\n#####\n",[369],{"type":14,"tag":218,"props":370,"children":371},{"__ignoreMap":7},[372],{"type":20,"value":367},{"type":14,"tag":22,"props":374,"children":375},{},[376],{"type":20,"value":377},"\\7. 这个地区也可以，那就添加一个新房间，再往里面扔一个宝箱 C（Chest）：",{"type":14,"tag":287,"props":379,"children":381},{"code":380},"        ####\n        ###C\n        ####\n        ####\n#####     D  \n#####D########\n#####\n",[382],{"type":14,"tag":218,"props":383,"children":384},{"__ignoreMap":7},[385],{"type":20,"value":380},{"type":14,"tag":22,"props":387,"children":388},{},[389],{"type":20,"value":390},"\\8. 跟前面做法一样，我们增加一个新的通道元素",{"type":14,"tag":287,"props":392,"children":394},{"code":393},"             #\n             #\n        #### #\n        ###C #\n        #### #\n        #### #\n#####     D  #\n#####D########\n#####\n",[395],{"type":14,"tag":218,"props":396,"children":397},{"__ignoreMap":7},[398],{"type":20,"value":393},{"type":14,"tag":22,"props":400,"children":401},{},[402],{"type":20,"value":403},"\\9. 这一次，我们试着为第二个房间增加一个通道元素",{"type":14,"tag":287,"props":405,"children":407},{"code":406},"             #\n             #\n        #### #\n        ###C*******\n        ####W******\n        ####*******\n#####     D  #\n#####D########\n#####\n",[408],{"type":14,"tag":218,"props":409,"children":410},{"__ignoreMap":7},[411],{"type":20,"value":406},{"type":14,"tag":22,"props":413,"children":414},{},[415],{"type":20,"value":416},"\\10. 扫描失败了，已经被占用",{"type":14,"tag":287,"props":418,"children":419},{"code":393},[420],{"type":14,"tag":218,"props":421,"children":422},{"__ignoreMap":7},[423],{"type":20,"value":393},{"type":14,"tag":22,"props":425,"children":426},{},[427],{"type":20,"value":428},"\\11. 比较特别的元素，一个菱形的房间",{"type":14,"tag":287,"props":430,"children":432},{"code":431},"             #\n             #   ###\n        #### #  #####\n        ###C # #######\n        #### #D#######\n        #### # #######\n#####     D  #  #####\n#####D########   ###\n#####\n",[433],{"type":14,"tag":218,"props":434,"children":435},{"__ignoreMap":7},[436],{"type":20,"value":431},{"type":14,"tag":22,"props":438,"children":439},{},[440],{"type":20,"value":441},"\\12. 添加一个隐藏的暗门，以及充满陷阱的通道：",{"type":14,"tag":287,"props":443,"children":445},{"code":444},"             #\n             #   ###\n        #### #  #####\n        ###C # #######S###T##TT#T##\n        #### #D#######\n        #### # #######\n#####     D  #  #####\n#####D########   ###\n#####\n",[446],{"type":14,"tag":218,"props":447,"children":448},{"__ignoreMap":7},[449],{"type":20,"value":444},{"type":14,"tag":22,"props":451,"children":452},{},[453],{"type":20,"value":454},"\\13. 继续……",{"type":14,"tag":15,"props":456,"children":458},{"id":457},"总结",[459],{"type":20,"value":457},{"type":14,"tag":22,"props":461,"children":462},{},[463],{"type":20,"value":464},"好了，这就是我的算法，我希望它对你有用，或者从一个有趣的角度去看如何解决一个问题。",{"type":14,"tag":15,"props":466,"children":468},{"id":467},"代码实现",[469],{"type":20,"value":467},{"type":14,"tag":22,"props":471,"children":472},{},[473,479,485,487,494],{"type":14,"tag":474,"props":475,"children":476},"strong",{},[477],{"type":20,"value":478},"Java 代码实现",{"type":14,"tag":28,"props":480,"children":483},{"href":481,"rel":482},"http://www.roguebasin.com/index.php?title=Java_Example_of_Dungeon-Building_Algorithm",[32],[484],{"type":20,"value":478},{"type":20,"value":486},"\n你可以通过 ",{"type":14,"tag":28,"props":488,"children":491},{"href":489,"rel":490},"http://openprocessing.org/visuals/?visualID=18822",[32],[492],{"type":20,"value":493},"Open Processing",{"type":20,"value":495}," 在浏览器里面运行它（需要做一些小修改）。它会创建一个图形化的地牢。",{"type":14,"tag":22,"props":497,"children":498},{},[499,504],{"type":14,"tag":474,"props":500,"children":501},{},[502],{"type":20,"value":503},"Python Curses 代码实现",{"type":14,"tag":28,"props":505,"children":508},{"href":506,"rel":507},"http://www.roguebasin.com/index.php?title=Python_Curses_Example_of_Dungeon-Building_Algorithm",[32],[509],{"type":20,"value":503},{"type":14,"tag":22,"props":511,"children":512},{},[513,518],{"type":14,"tag":474,"props":514,"children":515},{},[516],{"type":20,"value":517},"C++ 代码实现",{"type":14,"tag":28,"props":519,"children":522},{"href":520,"rel":521},"http://www.roguebasin.com/index.php?title=C%2B%2B_Example_of_Dungeon-Building_Algorithm",[32],[523],{"type":20,"value":517},{"type":14,"tag":22,"props":525,"children":526},{},[527,532],{"type":14,"tag":474,"props":528,"children":529},{},[530],{"type":20,"value":531},"C# 代码实现",{"type":14,"tag":28,"props":533,"children":536},{"href":534,"rel":535},"http://www.roguebasin.com/index.php?title=CSharp_Example_of_a_Dungeon-Building_Algorithm",[32],[537],{"type":20,"value":531},{"type":14,"tag":22,"props":539,"children":540},{},[541,543],{"type":20,"value":542},"原文地址：",{"type":14,"tag":28,"props":544,"children":547},{"href":545,"rel":546},"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm",[32],[548],{"type":20,"value":549},"链接",{"title":7,"searchDepth":551,"depth":551,"links":552},2,[],"markdown","content:game:2021-01-23-roguelike-map.md","content","game/2021-01-23-roguelike-map.md","md","2021-01-23",[560,570,697,744,796,809,921],{"title":561,"_path":562,"children":563},"Art","/art",[564,567],{"title":565,"_path":566},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":568,"_path":569},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":571,"_path":572,"children":573},"Dotnet","/dotnet",[574,577,580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625,628,631,634,637,640,643,646,649,652,655,658,661,664,667,670,673,676,679,682,685,688,691,694],{"title":575,"_path":576},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":578,"_path":579},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":581,"_path":582},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":584,"_path":585},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":587,"_path":588},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":590,"_path":591},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":593,"_path":594},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":596,"_path":597},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":599,"_path":600},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":602,"_path":603},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":605,"_path":606},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":608,"_path":609},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":611,"_path":612},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":614,"_path":615},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":617,"_path":618},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":620,"_path":621},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":623,"_path":624},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":626,"_path":627},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":629,"_path":630},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":632,"_path":633},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":635,"_path":636},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":638,"_path":639},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":641,"_path":642},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":644,"_path":645},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":647,"_path":648},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":650,"_path":651},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":653,"_path":654},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":656,"_path":657},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":659,"_path":660},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":662,"_path":663},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":665,"_path":666},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":668,"_path":669},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":671,"_path":672},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":674,"_path":675},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":677,"_path":678},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":680,"_path":681},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":683,"_path":684},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":686,"_path":687},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":689,"_path":690},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":692,"_path":693},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":695,"_path":696},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":698,"_path":699,"children":700},"Game","/game",[701,704,707,710,711,714,717,720,723,726,729,732,735,738,741],{"title":702,"_path":703},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":705,"_path":706},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":708,"_path":709},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":8,"_path":4},{"title":712,"_path":713},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":715,"_path":716},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":718,"_path":719},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":721,"_path":722},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":724,"_path":725},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":727,"_path":728},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":730,"_path":731},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":733,"_path":734},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":736,"_path":737},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":739,"_path":740},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":742,"_path":743},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":745,"_path":746,"children":747},"Gyj","/gyj",[748,751,754,757,760,763,766,769,772,775,778,781,784,787,790,793],{"title":749,"_path":750},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":752,"_path":753},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":755,"_path":756},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":758,"_path":759},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":761,"_path":762},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":764,"_path":765},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":767,"_path":768},"玩法","/gyj/2022-08-22-wanfa",{"title":770,"_path":771},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":773,"_path":774},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":776,"_path":777},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":779,"_path":780},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":782,"_path":783},"门派内容相关","/gyj/2022-11-17-sect",{"title":785,"_path":786},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":788,"_path":789},"种植","/gyj/2022-12-01-zhongzhi",{"title":791,"_path":792},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":794,"_path":795},"跑商","/gyj/2023-11-01-paoshang",{"title":797,"_path":798,"children":799},"Js","/js",[800,803,806],{"title":801,"_path":802},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":804,"_path":805},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":807,"_path":808},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":810,"_path":811,"children":812},"Tool","/tool",[813,816,819,822,825,828,831,834,837,840,843,846,849,852,855,858,861,864,867,870,873,876,879,882,885,888,891,894,897,900,903,906,909,912,915,918],{"title":814,"_path":815},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":817,"_path":818},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":820,"_path":821},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":823,"_path":824},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":826,"_path":827},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":829,"_path":830},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":832,"_path":833},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":835,"_path":836},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":838,"_path":839},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":841,"_path":842},"mac下brew 使用","/tool/2020-01-13-brew",{"title":844,"_path":845},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":847,"_path":848},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":850,"_path":851},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":853,"_path":854},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":856,"_path":857},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":859,"_path":860},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":862,"_path":863},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":865,"_path":866},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":868,"_path":869},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":871,"_path":872},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":874,"_path":875},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":877,"_path":878},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":880,"_path":881},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":883,"_path":884},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":886,"_path":887},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":889,"_path":890},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":892,"_path":893},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":895,"_path":896},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":898,"_path":899},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":901,"_path":902},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":904,"_path":905},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":907,"_path":908},"rider的使用","/tool/2022-08-02-rider-use",{"title":910,"_path":911},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":913,"_path":914},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":916,"_path":917},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":919,"_path":920},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":922,"_path":923,"children":924},"Unity","/unity",[925,928,931,934,937,940,943,946,949,952,955,958,961,964,967,970,973,976,979,982,985,988,991,994,997,1000,1003,1006,1009,1012,1015,1018,1021,1024,1027,1030,1033,1036,1039,1042,1045,1048,1051,1054,1057,1060,1063,1066,1069,1072,1075,1078,1081,1084,1087,1090,1093,1096,1099,1102,1105,1108,1111,1114,1117,1120,1123,1126,1129,1132,1135,1138],{"title":926,"_path":927},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":929,"_path":930},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":932,"_path":933},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":935,"_path":936},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":938,"_path":939},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":941,"_path":942},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":944,"_path":945},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":947,"_path":948},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":950,"_path":951},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":953,"_path":954},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":956,"_path":957},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":959,"_path":960},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":962,"_path":963},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":965,"_path":966},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":968,"_path":969},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":971,"_path":972},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":974,"_path":975},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":977,"_path":978},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":980,"_path":981},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":983,"_path":984},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":986,"_path":987},"技能系统","/unity/2020-02-15-skill-system",{"title":989,"_path":990},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":992,"_path":993},"角色状态设计","/unity/2020-02-17-character-states",{"title":995,"_path":996},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":998,"_path":999},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1001,"_path":1002},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1004,"_path":1005},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1007,"_path":1008},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1010,"_path":1011},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1013,"_path":1014},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1016,"_path":1017},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1019,"_path":1020},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1022,"_path":1023},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1025,"_path":1026},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1028,"_path":1029},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1031,"_path":1032},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1034,"_path":1035},"unity的addressables","/unity/2020-09-12-addressables",{"title":1037,"_path":1038},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1040,"_path":1041},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1043,"_path":1044},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1046,"_path":1047},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1049,"_path":1050},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1052,"_path":1053},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1055,"_path":1056},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1058,"_path":1059},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1061,"_path":1062},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1064,"_path":1065},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1067,"_path":1068},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1070,"_path":1071},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1073,"_path":1074},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1076,"_path":1077},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1079,"_path":1080},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1082,"_path":1083},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1085,"_path":1086},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1088,"_path":1089},"ability","/unity/2020-11-16-dotssample",{"title":1091,"_path":1092},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1094,"_path":1095},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1097,"_path":1098},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1100,"_path":1101},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1103,"_path":1104},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1106,"_path":1107},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1109,"_path":1110},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1112,"_path":1113},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1115,"_path":1116},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1118,"_path":1119},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1121,"_path":1122},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1124,"_path":1125},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1127,"_path":1128},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1130,"_path":1131},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1133,"_path":1134},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1136,"_path":1137},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1139,"_path":1140},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779036555]