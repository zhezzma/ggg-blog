[{"data":1,"prerenderedAt":1705},["Reactive",2],{"content-query-nBBZoDtbbo":3,"content-navigation-8C37fagqQL":1123},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":1117,"_id":1118,"_source":1119,"_file":1120,"_extension":1121,"date":1122},"/game/2021-08-05-game-task-design","game",false,"","游戏人物设计","前言我知道没人爱看理论文章。可偶尔也得定期坐下来写点枯燥的设计理论文章，以防本旗舰彻底变成一个专业游戏评论博客。虽然我在写评论的时候从来都是本着“写评论是为了写设计要点”的方针，但是这事情干多了，还是不免会陷入就事论事的陷阱之中。也经常会有人问“FNV和F1、F2的任务系统不是一样的吗”这种问题，有时候也还是应该总结一下，写点理论文章。整理一下工作文档，再定期写一些抽象的文字对自己是有好处的。任务的概念与发展简史：从具体，到抽象，再到具体“老僧三十年前未参禅时，见山是山，见水是水。及至拿来，亲见知识，有个入处，见山不是山，见水不是水。而今得个休歇处，依前见山只是山，见水只是水。”——《五灯会元",{"type":11,"children":12,"toc":1114},"root",[13,25,30,35,40,48,57,65,73,78,86,91,99,104,112,117,122,130,135,143,176,181,189,194,199,204,209,214,219,224,240,245,253,258,263,268,329,334,342,347,352,357,362,367,372,377,382,387,392,397,409,414,425,430,435,440,445,450,455,460,465,470,475,483,488,493,498,503,508,513,518,523,528,533,538,543,548,553,558,563,568,573,578,583,595,600,605,610,615,620,625,630,635,640,645,650,655,667,679,684,689,694,706,711,716,721,726,731,739,744,749,754,759,764,776,781,786,791,796,801,806,811,816,821,826,831,836,841,849,854,859,871,876,881,886,891,896,901,906,911,916,921,926,934,939,944,956,968,978,986,1005,1031,1036,1044,1049,1054,1073,1078],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":14,"tag":19,"props":20,"children":21},"strong",{},[22],{"type":23,"value":24},"text","前言",{"type":14,"tag":15,"props":26,"children":27},{},[28],{"type":23,"value":29},"我知道没人爱看理论文章。",{"type":14,"tag":15,"props":31,"children":32},{},[33],{"type":23,"value":34},"可偶尔也得定期坐下来写点枯燥的设计理论文章，以防本旗舰彻底变成一个专业游戏评论博客。虽然我在写评论的时候从来都是本着“写评论是为了写设计要点”的方针，但是这事情干多了，还是不免会陷入就事论事的陷阱之中。",{"type":14,"tag":15,"props":36,"children":37},{},[38],{"type":23,"value":39},"也经常会有人问“FNV和F1、F2的任务系统不是一样的吗”这种问题，有时候也还是应该总结一下，写点理论文章。整理一下工作文档，再定期写一些抽象的文字对自己是有好处的。",{"type":14,"tag":15,"props":41,"children":42},{},[43],{"type":14,"tag":19,"props":44,"children":45},{},[46],{"type":23,"value":47},"任务的概念与发展简史：从具体，到抽象，再到具体",{"type":14,"tag":15,"props":49,"children":50},{},[51],{"type":14,"tag":52,"props":53,"children":54},"em",{},[55],{"type":23,"value":56},"“老僧三十年前未参禅时，见山是山，见水是水。及至拿来，亲见知识，有个入处，见山不是山，见水不是水。而今得个休歇处，依前见山只是山，见水只是水。”",{"type":14,"tag":15,"props":58,"children":59},{},[60],{"type":14,"tag":52,"props":61,"children":62},{},[63],{"type":23,"value":64},"——《五灯会元》卷十七《青原惟信禅师》",{"type":14,"tag":15,"props":66,"children":67},{},[68],{"type":14,"tag":19,"props":69,"children":70},{},[71],{"type":23,"value":72},"任务是什么？",{"type":14,"tag":15,"props":74,"children":75},{},[76],{"type":23,"value":77},"不管你是玩家还是设计者，你可能都没有仔细考虑过这个问题。\n任务似乎是那种“慢慢浸透了整个行业”的设计要素，我们甚至找不到游戏中任务系统的第一个发明人。\n但当你看到任务的时候，你就会认出它们。\n任务就是魔兽世界里面那些头顶着问号和感叹号的家伙们。\n任务就是使命召唤里面那些不停在屏幕一侧刷新的作战目标和前进方向。\n任务就是360的成就和PS3的奖杯列表里面密密麻麻令人眼晕的文字。\n任务就是网络游戏里在左下角刷个不停的的游戏活动提示。\n总之，任务就是游戏的时候告诉你“你现在应该去干什么”的那些系统，这些任务完成以后，你通常会得到对应的报酬。把用户需要的帮助、行为和报酬打个包，就能得到一个任务；接着，设计师就可以往任务里面插进各种各样的其他要素。\n“看，我这里有胡萝卜。你干完什么什么就肯定能得到胡萝卜哦！”\n这个设计的思路实在太过简单，但当我们回过头来看，却发现这个设计已经统治了整个行业。从FPS到RPG，甚至手机游戏和网页游戏，到处都充斥着任务和类任务系统的身影。\n因为任务实在是太好用了。它就是游戏行业对所谓的“叙事五要素”的综合解答。\n我们都知道，不管是小说、电影还是电视，都有五个经典的问题：时间、地点、人物、事件、原因，也就是When、Where、Whom、What、Why。对于游戏行业来说，这五个问题却没有这么简单。\n你用文字表述？玩家根本不看。你用其他表达方式表述？这些解决方案又没有通用性。\n而在一个任务之中，这些问题同时都会被展示出来。\n你能不能做这个任务？你应该去什么地方？你为什么要做这个任务，能得到什么东西？任务要怎么完成？用户现在到底应该做什么，怎么做？\n设计师总归要把这些东西告诉用户的，而任务是个比其他展示形式更为完善的解答。\n玩家需要的东西，帮助、行动和报酬，只要打开任务列表就一目了然了。\n所以现代游戏里到处都是任务、成就和目标，而游戏用户也飞快接受了它们。\n那些从不玩游戏的人看到现代的大型游戏，经常会问类似这样的问题：“这个角色光这么跑来跑去/打打杀杀是要干什么呢？”\n自从有了任务，这种问题总算也能回答了。\n但是——\n为什么我们的现代游戏中有这么多无聊的任务呢？为什么我们都讨厌Farm呢？为什么有的游戏任务好，有的游戏任务就差呢？要怎么做才能做出更好玩的任务呢？\n这都不是简单地把帮助、行动和报酬打个包就能解决的问题。肯定还有什么比“把帮助、行动和报酬打包”更根本的东西，存在在任务之中。",{"type":14,"tag":15,"props":79,"children":80},{},[81],{"type":14,"tag":19,"props":82,"children":83},{},[84],{"type":23,"value":85},"思想的起源",{"type":14,"tag":15,"props":87,"children":88},{},[89],{"type":23,"value":90},"也许任务最早的思想源头来自现实。\n如果说是现实中的“任务”概念，历史倒是很明确的。那些管理学大师们主张把工作分拆成一个又一个独立的模块，每个模块自然由许多任务组成。把这些任务分解到人头上，就是成功的管理了。\n但这种官僚而枯燥的管理方式，显然不应该是任务设计的起源。\n你们有谁觉得拿到每周工作任务表的时候觉得特高兴特好玩么？没有吧？\n你们会因为工作任务特复杂特有挑战性觉得充满了乐趣么？不会吧？\n明明工作也有行动啊。明明工作完了也能得到报酬啊。\n为什么工作就不好玩呢？\n但是在游戏里接到一排复杂的任务的时候，我们就会觉得好玩。\n应该这么说，游戏任务设计借鉴了管理学上的模型，但是其发展自有其源流，可谓殊途同归。\n所以，我们还是要沿着游戏本身的发展脉络，回溯到“任务”是隐含条件的古早时代中去。",{"type":14,"tag":15,"props":92,"children":93},{},[94],{"type":14,"tag":19,"props":95,"children":96},{},[97],{"type":23,"value":98},"见山是山：没有任务的时代",{"type":14,"tag":15,"props":100,"children":101},{},[102],{"type":23,"value":103},"早期的游戏当然没有任务，这似乎是个不容置疑的事实。\n最早的游戏，不管是太空侵略者还是Pong，包括Atari上那些东西，都只是光点、线段和色块，连显示文字的能力都不太有，自然没有任务的空间。\n超级玛丽的屏幕左上角不会有个对话框，告诉你你还需要踩死3只蘑菇才能获得5个金币的报酬。\n而在勇者斗恶龙里面，国王也只会让你去打倒恶龙，不会告诉你“你打倒恶龙需要屠龙剑，我在小地图上已经把它的位置标出来了，你顺着雷达走去就好”。\n至于游戏的另外来源呢？那些桌面游戏也同样没有任务。\n战棋游戏贡献的核心是数值系统和规则表。桌面角色扮演游戏则带来了迷宫、成长和宏大华丽的叙事。\n不管你是爱玩龙与地下城还是魂斗罗，你都不会见到类似今天主流游戏这样的任务。\n那时候的快乐似乎也很纯粹——\n稍等。\n早期的游戏确实没有任务，但是，这并不代表早期游戏没有“目的”。\n即便机能受到限制，即使整个行业都还出于萌芽期，但是游戏带给人们的快乐其实是没有变化的。\n比如我们玩超级玛丽这样的横板动作游戏，最初始的动力就是“我要打通这一关”。如果换成任务制的语言，就是“你要不停地反复到达屏幕的尽头”，以便看到更多的关卡、敌人和BOSS。\n当然，打通这一关以后，我的目标立刻就会变成“我想打通整个游戏”。那我就需要知道，“杀死库巴大王可以看到一段和公主的动画小电影”，或者“在地下城关卡有隐藏的房间到达就可以跳关”。\n然后，假定我没满足于打通关，还想用尽可能少的命打通关，我就需要想办法利用游戏的系统，比如“吃100个金币奖励一条命”、“吃蘑菇可以变大”、“吃花可以喷火”。这同样可以换成任务制的语言，比如“收集57/100个金币，获得自动复活药”。\n接着呢？我的朋友打得比我还好，他的分数比我更高，我还想打高分。我就必须开始研究杀死什么样的怪物可以获得怎样的分数回报好向他炫耀。那么，“一只乌龟跳一下等于100分”的任务回报也是可行的了。\n你看，如果用现代任务设计中的语言，完全可以把整个超级玛丽的系统都翻译过来。早期游戏没有任务，却并不代表他们没有今天游戏这些任务的要素。他们只是没有使用“任务设计”这种工具而已。如果是RPG类游戏，那就更方便了：不管是魔法门还是勇者斗恶龙，都可以非常容易地把冒险日志和攻略转化成任务化的语言。\n早期游戏的设计师们同样深谙“必须让玩家知道现在他应该要干什么”这个道理。只是在他们的时代中，游戏还是一件很新锐的玩具，并不需要掌握那么多的用户，也不需要努力让所有人都来理解游戏的目的，只要他们自己觉得“展示成这样玩家就能理解了吧”就可以了。\n早期游戏有游戏目的，只是他们还没有任务制来让玩家掌握目的；他们希望玩家自己可以探索出这些目的来。\n他们见山是山，是因为山在那里，而且也只需要接待懂得如何爬山的人就好了。",{"type":14,"tag":15,"props":105,"children":106},{},[107],{"type":14,"tag":19,"props":108,"children":109},{},[110],{"type":23,"value":111},"见山不是山：任务导向勃发的年代",{"type":14,"tag":15,"props":113,"children":114},{},[115],{"type":23,"value":116},"大概是从90年代中期开始，无论是东方还是西方，无论是家用机还是PC游戏，大家都开始逐渐采用任务设计了。\n任务的出现不是一个一夜之间的事件。现在回头看那个时期的游戏，可以发现有大量的“复合设计”：普通的主线剧情或日志和以列表形式出现的任务同时出现在游戏的系统里。\n玩家可以直接点击任务名获取单个任务的详情，也可以阅读庞大的日志，或者直接冲进游戏的关卡里打打杀杀。如果说上面的说法不太具体，你回忆一下暗黑破坏神（Diablo）或者博得之门（Baldur’s Gate），就能立刻明白“混合”这种说法的含义。日系游戏则更偏爱“列表”式的任务呈现方法，玩家需要到一个统一的“任务中心”去获取和完成任务，这种思路被大规模继承到了后来的网络游戏里，很多网络游戏都把任务设计集中在一点上完成。\n然后，在不知不觉中，游戏中的任务提示越来越明确，任务获得和完成越来越清楚，回报也越来越明显了。不光是角色扮演游戏有了任务和目标，模拟游戏、即时战略游戏、FPS和TPS射击游戏、动作游戏也纷纷从善如流加入了任务和目标。不管哪个游戏，只要打开菜单，总有个地方告诉你“你现在应该去干什么”。\n任务制被大规模采用的主要原因，其实并不是任务制本身有多少优势；而是游戏已经逐渐复杂化了，谁也不敢保证玩家能通过自己的探索就理解游戏所有的设计。\n有很多业内人士指出，那是因为现代游戏发展得太复杂了。他们觉得应该回到游戏的本原去，做些独立游戏，做些大家一看就会玩的东西，才是正确的道路。评论家和华尔街追捧那些独立游戏，追捧各种各样的创意小游戏，对360和PS3上的作品嗤之以鼻。\n真的吗？难道电影业会因为一个长镜头到底无法处理庞大的信息量，就指责说这是电影导演和编剧的错误，他们试图用电影承载太多的内容，所以整个电影业都应该回到用摄影机拍摄一些五分钟短片的年代去，以便可以继续用一个长镜头处理到底？\n显然不是。\n任务是一种如此好用的特殊语言，5分钟就能教会一个从没玩过这个游戏的人这个游戏的规则，并指导着他一步一步把这个游戏打通。\n任务时代的高潮出现在进入21世纪以后，到魔兽世界的时代到达巅峰。\n在魔兽世界和怪物猎人这样的游戏中，所有的设计都被任务统一起来，你不接任务几乎无法进行游戏。不管是叙事、系统还是教学，一切都有相对的任务进行指引。GTA这样的沙盘游戏更是整个就以任务展开剧情，不完成任务连地图都不会开启。\n同样，这个时代的其他游戏也在进行着疯狂的任务化和目标化：每个FPS游戏都有目标列表，多数的关卡都可以选择，就连赛车游戏也充满了限定条件的任务挑战模式。",{"type":14,"tag":15,"props":118,"children":119},{},[120],{"type":23,"value":121},"但是，并不是任务本身好玩，而是任务想要达成的那些目的好玩。一旦搞错了因果关系，任务设计很容易滑入到“为了任务而任务”的歧途上去。",{"type":14,"tag":15,"props":123,"children":124},{},[125],{"type":14,"tag":19,"props":126,"children":127},{},[128],{"type":23,"value":129},"见山只是山：重新淡化任务的年代",{"type":14,"tag":15,"props":131,"children":132},{},[133],{"type":23,"value":134},"把所有东西都任务化没问题吗？不要紧的，没有问题！\n——但就算这么说，在看到伦敦：地狱门里面用程序代码来生成任务的时候，人们心里也会忍不住打鼓吧。\n任务的泛滥很快就产生了一些负面效果。\n在任务列表把所有游戏内容都规范化、标准化的同时，“乏味”这个魔鬼也开始进入了这个系统。当我们看到任务列表越来越长，而每个任务的格式也越来越相似的时候，忍不住就有了“这是工作”的错觉。一旦玩家有了“这是工作”的错觉，他们就会抛弃这些设计。\n尤其是在某些网络游戏和纯任务制游戏中，这种乏味的感觉到达了顶峰。\n我就不多举例子了，但是你们每个人脑海中肯定都有一大排无聊到爆的纯任务制游戏和网络游戏列表。\n在这样的游戏中，典型的任务就是“打死多少个某种怪”、“打死多少个某种怪然后从他们身上拿回掉落”、“打死某种怪的BOSS”，然后如此重复循环。如果游戏的怪物设计有点特色还好，如果所有的怪物只有数值不同，打通这种游戏简直是折磨。\n这种游戏多了当然会产生反弹。\n在发售日期距离现在更近的游戏中，我们已经不太经常看到“任务中心”或者“关卡列表”这种东西了；取而代之的是重新复活的“发现设计目标”模式。\n很多任务是通过提示出现的。如果玩家没有完成过某个特定操作，或者没有发现线索，这个任务就不会在任务列表里出现。就算是魔兽世界式的问号、感叹号这样的明显提示，设计师在后来的版本中也在努力增加着任务本身的变化性，把任务获得、推进、完成的方法变得更为多样。\n与其说是“淡化”任务，不如说是大家对任务制设计的理解已经更加精进，更加娴熟。\nFNV就是一个好例子：虽然基本的设计元素仍然是那些任务，但是任务的变化已经更为多样，入口、出口和完成方式也更加变化多端。现代FPS/TPS游戏也不再像以前那么强调关卡和目标的概念，而更喜欢用类似成就的被动处理方法来提示玩家正确的玩法。\n同样，类任务设计也大行其道。在网络游戏里面，厂商们已经忍不住把任务从策划手里拿了出来，改名叫作“活动”、“每日”和“运镖”之类五花八门的名目。XBOX360的成就和PS3的奖杯只是换了个名字，两者其实也是明显的类任务设计。就连往常应该毫无“任务”可言的对战FPS/TPS游戏，也忍不住加入了升级、连杀奖励、称号这样的类任务系统，鼓励大家带着目的去打每一盘对战。\n总之，任务还是任务，在设计师的脑海和他们的工作文档中，大概还是这么组织的；只是，他们正在努力让用户看不到那个乏味的大任务列表。",{"type":14,"tag":15,"props":136,"children":137},{},[138],{"type":14,"tag":19,"props":139,"children":140},{},[141],{"type":23,"value":142},"回到概念",{"type":14,"tag":15,"props":144,"children":145},{},[146,148,153,155,160,162,167,169,174],{"type":23,"value":147},"正如上面的简史所说，",{"type":14,"tag":19,"props":149,"children":150},{},[151],{"type":23,"value":152},"任务是一个被完全“凭空创造”出来的概念",{"type":23,"value":154},"。\n就如电影和电视中的“镜头”，或者戏剧创作中的“幕”和“场”，是创造者为了创作方便，也为了观众接受方便而创作的概念。\n也就是说，",{"type":14,"tag":19,"props":156,"children":157},{},[158],{"type":23,"value":159},"“任务”无论对故事、对可玩性还是对互动来说，其实都是不必要的",{"type":23,"value":161},"。\n导演用自然的一个长镜头到底，理论上也能拍电影——他们要真这么干了还能成为大师。当然，你做一个没有任务的游戏成不了大师。\n但是，人类和动物的区别就在于我们可以使用工具。“任务”正是我们这个行业所创造出来的最犀利的工具之一，这种设计理念甚至已经不仅仅限于游戏之中了，渗透到了现代社会的许多角落中去。\n顺便说一句，要知道我们游戏行业已经创造了多少超乎常理的设计概念了？去看看刚刚出了DVDRIP的电影《Scott.Pilgrim.Vs.The.World》吧。对游戏没有了解的人不可能知道为什么群众给这片子在IMDB上投了8.0分的。\n一个好的游戏设计师，应当在心中时刻有着“任务”的概念；但是他不应当被任务的固有概念所束缚。\n当他需要剧情的时候，他应该能够把各种各样的剧情和故事熟练拆解成各种所需要的任务形式，并分配下去；当他需要游戏性的时候，他也应当能够将这种游戏性所需要的所有知识和操作，分散在不同的任务和目标之中。\n",{"type":14,"tag":19,"props":163,"children":164},{},[165],{"type":23,"value":166},"让玩家每时每刻都知道他应当去做什么，这就是整个任务设计的核心。",{"type":23,"value":168},"\n事情的关键并不是设计任务。\n你不应该为了设计任务而设计任务。\n那些充斥在三流游戏中的草率任务，正是在这种“我们需要500个任务”的粗暴指示下产生的。\n在如今的时代，如果一个任务只是因为“我需要填满任务列表”而存在，那这个任务就应该毫不犹豫地被删除。\n作为一个游戏设计师，你应该要保证：",{"type":14,"tag":19,"props":170,"children":171},{},[172],{"type":23,"value":173},"你所设计的每一个任务，都有明确的设计目的。因为任务只是表象，设计目的才是真正的血肉。",{"type":23,"value":175},"\n哪怕是最不起眼的“去杀10条狼”的Farm任务，实际上也是可以有设计目的的。我将在接下来的“任务的设计方法”一节中深入这个问题。",{"type":14,"tag":15,"props":177,"children":178},{},[179],{"type":23,"value":180},"照例，我知道你们都不爱看的枯燥无聊的理论文章……第二部分。说真的我没想到这个命题竟然能扯出这么多，写起来收不住了……所以这篇只是设计方法的（上）。",{"type":14,"tag":15,"props":182,"children":183},{},[184],{"type":14,"tag":19,"props":185,"children":186},{},[187],{"type":23,"value":188},"工具箱",{"type":14,"tag":15,"props":190,"children":191},{},[192],{"type":23,"value":193},"任务设计的方法说简单很简单，就是对各种设计手法的灵活使用。说复杂也复杂，因为任务的种类实在是多种多样。一个像魔兽世界这样庞大的游戏起码能分类出几十种不同的任务形式，如果细化到设计师们交给程序的需求列表这种程度，这个数字肯定会增加到三位数或者四位数。",{"type":14,"tag":15,"props":195,"children":196},{},[197],{"type":23,"value":198},"要把多种多样的设计目的、游戏内容和故事情节分解成任务的形式，你必须先对任务这个工具箱本身了若指掌。那些大号的电钻和锤子要放在最下面，钳子和螺丝刀在中层，螺母和螺钉装在顶层的塑料袋里。",{"type":14,"tag":15,"props":200,"children":201},{},[202],{"type":23,"value":203},"所以，在正式进入主题之前，我先说一下这个工具箱的各层结构。",{"type":14,"tag":15,"props":205,"children":206},{},[207],{"type":23,"value":208},"要解决的第一个问题是“这是个什么样的任务”，由设计目的决定的是任务的执行方式。我这个任务是要用来指引用户呢，满足用户的收集欲望呢，提供一种全新的游戏内容呢，还是方便关卡制作呢？从这个角度去思考任务的执行方式，就能把纷繁复杂的任务形式梳理清楚。",{"type":14,"tag":15,"props":210,"children":211},{},[212],{"type":23,"value":213},"接下来的问题是“用户怎么获得这个任务”，由展示方法决定的是任务的逻辑结构。怎么把一个任务呈现给用户？把怎样的任务呈现给什么类型的用户？怎么给用户提供对一个任务的期待？在逻辑结构层来解决。",{"type":14,"tag":15,"props":215,"children":216},{},[217],{"type":23,"value":218},"最后的一个问题是“各种各样的任务怎么管理”，由管理方法决定的是任务的分层模型；对玩家来说，这个分层模型也同时决定了他所看到的界面组织形式。",{"type":14,"tag":15,"props":220,"children":221},{},[222],{"type":23,"value":223},"从这里再前进一步就是“任务相关的制作资源怎么管理”，这个说起来就太枯燥乏味了，我这篇文章可能不会提到。",{"type":14,"tag":15,"props":225,"children":226},{},[227,229,238],{"type":23,"value":228},"最后一步是“预先告知用户任务回报”，这是个博大精深的话题，就算谈到我也只会是泛泛而谈。如果真要深入论述，恐怕得等到这架",{"type":14,"tag":230,"props":231,"children":235},"a",{"href":232,"rel":233},"https://necromanov.wordpress.com/",[234],"nofollow",[236],{"type":23,"value":237},"战略航空军的旗舰",{"type":23,"value":239},"上出现一篇叫“游戏数值设计”的理论性文章以后了。",{"type":14,"tag":15,"props":241,"children":242},{},[243],{"type":23,"value":244},"这些设计工具出现的时间有早有晚，有些仍然在发展中，有些工具已经产生了各种各样的变体。但是无论出现早晚，每种工具都有其优势和劣势。考虑到这是个进步非常迅速变化也非常快的领域，如果读者有什么意见也请自由发表。",{"type":14,"tag":15,"props":246,"children":247},{},[248],{"type":14,"tag":19,"props":249,"children":250},{},[251],{"type":23,"value":252},"执行方式：从设计目的出发",{"type":14,"tag":15,"props":254,"children":255},{},[256],{"type":23,"value":257},"任务的执行方式设计是现代游戏设计中最多变，也是最需要创造力的范畴。",{"type":14,"tag":15,"props":259,"children":260},{},[261],{"type":23,"value":262},"在执行方式这节中，我不打算像那些典型的“游戏教学书籍”那样用庞大枯燥的列表淹没你们——看那些“玩法教学书籍”是绝对学不会怎么设计的。同样，我也不需要重复一遍各种流行游戏中的任务设计，鹦鹉学舌的文章没有任何意义可言。与其有空看这种无意义的文章，还不如随便装个游戏抓紧时间打一打。",{"type":14,"tag":15,"props":264,"children":265},{},[266],{"type":23,"value":267},"我会从“任务的设计目的”入手，从设计者和玩家两方面的动机出发把任务分成六个大类以及一个灵活的附加类。",{"type":14,"tag":269,"props":270,"children":271},"ul",{},[272,281,289,297,305,313,321],{"type":14,"tag":273,"props":274,"children":275},"li",{},[276],{"type":14,"tag":19,"props":277,"children":278},{},[279],{"type":23,"value":280},"MoveTo型任务（移动）",{"type":14,"tag":273,"props":282,"children":283},{},[284],{"type":14,"tag":19,"props":285,"children":286},{},[287],{"type":23,"value":288},"Farm型任务（重复）",{"type":14,"tag":273,"props":290,"children":291},{},[292],{"type":14,"tag":19,"props":293,"children":294},{},[295],{"type":23,"value":296},"Collect型任务（收集）",{"type":14,"tag":273,"props":298,"children":299},{},[300],{"type":14,"tag":19,"props":301,"children":302},{},[303],{"type":23,"value":304},"Hunt型任务（狩猎）",{"type":14,"tag":273,"props":306,"children":307},{},[308],{"type":14,"tag":19,"props":309,"children":310},{},[311],{"type":23,"value":312},"Puzzle型任务（解谜）",{"type":14,"tag":273,"props":314,"children":315},{},[316],{"type":14,"tag":19,"props":317,"children":318},{},[319],{"type":23,"value":320},"Challenge型任务（挑战）",{"type":14,"tag":273,"props":322,"children":323},{},[324],{"type":14,"tag":19,"props":325,"children":326},{},[327],{"type":23,"value":328},"附加类：Storytelling型任务（叙事）",{"type":14,"tag":15,"props":330,"children":331},{},[332],{"type":23,"value":333},"由于我国是游戏设计后发国家，有些设计概念用中文表述可能不是太清晰，所有的类型都带个英文命名……总之你们知道Farm任务指代的是“重复作业”而不是“种田”就好了。",{"type":14,"tag":15,"props":335,"children":336},{},[337],{"type":14,"tag":19,"props":338,"children":339},{},[340],{"type":23,"value":341},"MoveTo型任务（移动任务）",{"type":14,"tag":15,"props":343,"children":344},{},[345],{"type":23,"value":346},"人类是这样一种生物：他们声称自己喜欢自由。但对大多数人来说，如果真的把自由的选择权给了他们，他们就会不知所措。",{"type":14,"tag":15,"props":348,"children":349},{},[350],{"type":23,"value":351},"所以，1990年的每个游戏中，都有庞大的地下城和分支对话。2010年的绝大多数游戏中，你只需要跟着任务黄点的指示，从一个黄点跑到下一个黄点。这是一个有点冷酷的事实，多数人并不是真的喜欢自由，或者喜欢选择——他们只是装作喜欢而已。",{"type":14,"tag":15,"props":353,"children":354},{},[355],{"type":23,"value":356},"所以我们必须要给这些人设计MoveTo型任务。别给他们选择权，直接告诉他们现在应该去哪里吧。",{"type":14,"tag":15,"props":358,"children":359},{},[360],{"type":23,"value":361},"MoveTo型任务是所有任务形式中最原始的一个，它的目的就是让玩家移动，或者说“跑路”。不管是魔戒的“到魔多去销毁戒指”还是西游记的“到西天去取经”，都是典型的Moveto任务。超级玛莉要从左到右突破所有关卡，雪人兄弟不往上冲就会被拖死，几乎所有FPS都要奔向一个又一个Checkpoint，这些也都是Moveto任务。从广义上来讲，甚至那些指示玩家如何按键移动人物、如何使用鼠标/手柄的教学目标都是Moveto类别的一种。",{"type":14,"tag":15,"props":363,"children":364},{},[365],{"type":23,"value":366},"它的设计目的也非常显而易见：指引玩家行动，展示游戏内容。这个目的类型几乎和整个游戏史一样久远：既然你设计了游戏，当然要告诉玩家里面有些什么吧！",{"type":14,"tag":15,"props":368,"children":369},{},[370],{"type":23,"value":371},"对玩家来说，完成MoveTo任务的目的是看到更多的没有看过的新内容；对设计者来说，MoveTo任务的目的除了展示玩家没有看过的新鲜设计内容之外，还要起到控制任务复杂度、关卡和脚本位置、Debug等等设计各种规范化的重要作用。在完成一个MoveTo任务之后，我们几乎可以笃定玩家必定在某个位置——这实在是太适合作为一段脚本的开头了。同样，对测试和Debug人员来说，移动任务也起到了重要的降低工作复杂度的作用——几乎是各种类沙盘游戏中唯一一个能起到该作用的设计手段。你不知道玩家什么时候去打哪里的怪，你也不知道玩家会怎么理解一个谜题，但是一个移动任务的结束地点肯定是个固定点。",{"type":14,"tag":15,"props":373,"children":374},{},[375],{"type":23,"value":376},"“这不都是废话吗！”",{"type":14,"tag":15,"props":378,"children":379},{},[380],{"type":23,"value":381},"肯定有好多读者要这么说了吧……且慢，且慢。从这个简单的事实陈述里面，能够导出一个很重要的问题，我把这个事实陈述换种说法看看。",{"type":14,"tag":15,"props":383,"children":384},{},[385],{"type":23,"value":386},"“如果玩家跟着这种任务移动到了新地点，却没有新的游戏内容呢？”",{"type":14,"tag":15,"props":388,"children":389},{},[390],{"type":23,"value":391},"现在你看到问题所在了。设计师设计Moveto任务除了指引之外，还有一个规范任务行动区间的作用；而玩家则不能理解这种作用，他们会觉得一段看不到任何内容的纯跑路是非常无聊枯燥的。",{"type":14,"tag":15,"props":393,"children":394},{},[395],{"type":23,"value":396},"事实也是如此。偶尔做一两个还好，如果连续几个任务都是纯跑路，路上没有任何游戏内容，哪怕报酬再好，玩家也是很烦躁的。从根本的设计目的上来说，跑路任务就不应该是用来消耗玩家时间的。成天让他在毫无内容变化的地方跑来跑去，不枯燥才怪呢！你能怪玩家想要自动跑路吗？你能怪他想要传送系统吗？显然不能。这甚至不能用回报来加以平衡；毕竟跑路的过程中，玩家什么也没干。你可以偶尔给玩家大笔的横财，但你不能老给他横财，长此以往必将吊起玩家的口味，让你想给他真正的回报的时候也没得可给。",{"type":14,"tag":15,"props":398,"children":399},{},[400,402,407],{"type":23,"value":401},"从这个简单的陈述中，我们可以推论出现代MoveTo任务设计的指导思想：“",{"type":14,"tag":19,"props":403,"children":404},{},[405],{"type":23,"value":406},"如果玩家不能看到任何新内容，就不要让他去做一个MoveTo任务",{"type":23,"value":408},"”。",{"type":14,"tag":15,"props":410,"children":411},{},[412],{"type":23,"value":413},"用设计目的这个标准来看，许多传统的任务设计方式都是有问题的。比如说，一个任务做完了以后，为什么一定要跑路回去交？如果没有任何新内容或者下阶段展开的话，有必要吗？一个关系到多个相关NPC的连续任务，需要让玩家跑来跑去吗？有没有什么代替方法？如果还不行，那么你就需要给玩家提供方便的移动方式：载具、出租车、自动跑路、瞬间移动，什么都行。这不是“现代浮躁的玩家不懂得游戏性”，而是“你根本没有给玩家提供任何游戏性”，这两者之间的区别是显而易见的。",{"type":14,"tag":15,"props":415,"children":416},{},[417,419,424],{"type":23,"value":418},"而这条规则当然也可以反过来用：“",{"type":14,"tag":19,"props":420,"children":421},{},[422],{"type":23,"value":423},"在有重要的新游戏内容的情况下，你必须用Moveto任务来保证这些内容不被玩家错过",{"type":23,"value":408},{"type":14,"tag":15,"props":426,"children":427},{},[428],{"type":23,"value":429},"在这类情况下，MoveTo类型的任务则是绝对必要的，不能完全被方便移动方式所代替。最典型的用法，就如同介绍一个大型新场景给玩家的时候，最好能用MoveTo任务把你这个场景的各个设计要点交待清楚。一座主城需要让玩家了解各个功能区；一个副本需要让玩家了解各个关键设计所在；哪怕是一段大型的即时电影演出，玩家也需要观摩电影的指引。在这些情况下，不要用快速移动方式代替你的MoveTo任务；在可能的情况下，甚至可以限制玩家移动来保证BUG数量能够得到控制。回去交任务也并不是都是没有用的操作，有些时候交任务本身可能也是一个设计要点，这个例子就比如荒野大镖客RDR里面回家那一段的杰出演出。我们不应该对“快速移动”或者“自动跑路”这样的设计要素一棍子打死，而应该区分对待。",{"type":14,"tag":15,"props":431,"children":432},{},[433],{"type":23,"value":434},"那如果设计师一定要插入一段内容不太丰富的MoveTo任务呢？倒也不是不能设计，只要你改换一下任务的类型。",{"type":14,"tag":15,"props":436,"children":437},{},[438],{"type":23,"value":439},"我可以提供这么几个任务设计的例子。在通常的设计方法中，这些都被归类于不同的任务类别，甚至不同的游戏性；但如果从设计目的考虑，你会发现他们本质上都是MovTo类的任务。跑到某个地方采集一组药草，安装一个炸弹，拉动一个开关什么的，本质上有区别吗？其实没有。",{"type":14,"tag":15,"props":441,"children":442},{},[443],{"type":23,"value":444},"设计师有一段路必需要求玩家跑两遍->在这两遍路上产生不同的、无法跳过的敌人。用不同的敌人来制造差异性。",{"type":14,"tag":15,"props":446,"children":447},{},[448],{"type":23,"value":449},"设计师有一个大关卡必须要求玩家先到最里面然后再出来->在进去的时候是一个MoveTo任务，在脱出的时候是一个强制推进的MoveTo型任务，可能是有时间限制、炸弹、毒气、洪水，总之你自己去想吧。",{"type":14,"tag":15,"props":451,"children":452},{},[453],{"type":23,"value":454},"设计师希望控制玩家特定的移动路径，或者交待重要的NPC剧情/性格->把MoveTo任务改写成一个护送任务，这是MoveTo任务的一个子类型。让NPC沿着事先设好的固定点移动，同时控制玩家不能离开NPC过远。",{"type":14,"tag":15,"props":456,"children":457},{},[458],{"type":23,"value":459},"设计师不在乎玩家怎么移动，但希望玩家看到这个区域内所有的重要点->把MoveTo任务改写成一个多段的物品收集/地点到达任务。设定几个操作点，让玩家去完成特定的操作，同时完成区域的交待工作。这种任务虽然以收集、解谜甚至Farm的形式出现，但本质上还是MoveTo型任务。",{"type":14,"tag":15,"props":461,"children":462},{},[463],{"type":23,"value":464},"设计师有一个复杂的关卡，但他希望玩家能按顺序完成这个关卡->把一个单一目标的MoveTo任务改写成一个连续而拥有多段目标的MoveTo任务。拆开路点，让用户每时每刻都有个短路点等在前面。",{"type":14,"tag":15,"props":466,"children":467},{},[468],{"type":23,"value":469},"你可以从这个基础上发挥你的设计能力和创造力，继续改善你的设计。关键仍然是设计目的，只要不是拖延游戏时间，玩家就不会讨厌MoveTo任务。难道有人会讨厌看激烈的大场面？那还玩什么游戏啊。",{"type":14,"tag":15,"props":471,"children":472},{},[473],{"type":23,"value":474},"实际上，不管是出于叙事考虑、设计考虑还是测试考虑，几乎每个任务的第一步都会是一个MoveTo型任务，这也是我把这个类别放在第一位的原因。",{"type":14,"tag":15,"props":476,"children":477},{},[478],{"type":14,"tag":19,"props":479,"children":480},{},[481],{"type":23,"value":482},"Farm型任务（重复任务）",{"type":14,"tag":15,"props":484,"children":485},{},[486],{"type":23,"value":487},"设计师不应该用MoveTo任务来拖延游戏时间。那他们应该用什么工具呢？",{"type":14,"tag":15,"props":489,"children":490},{},[491],{"type":23,"value":492},"当然是Farm任务。我说的不是种田，Farm在这里也不当种田讲（虽然在目前最流行的开心农场和Farmville里，他们的“Farm任务”真的是在种田……但理论还是应该更普适一点）。",{"type":14,"tag":15,"props":494,"children":495},{},[496],{"type":23,"value":497},"那Farm任务到底是什么呢？",{"type":14,"tag":15,"props":499,"children":500},{},[501],{"type":23,"value":502},"Farm任务的历史同样非常久远，可以追溯到游戏的史前期，甚至比Moveto类型还要早。",{"type":14,"tag":15,"props":504,"children":505},{},[506],{"type":23,"value":507},"我们总是说“打怪练功”、“打怪练功”。早在卷轴滚动技术出现之前，人们就开始玩各种只有一个固定画面的游戏，并且在这个固定的画面上用几个像素点对抗另外一些几个像素点组成的太空侵略者们。然后他们开始玩各种动作游戏，这些游戏的主题仍然是打怪（或者被怪打，总之还是有怪的）。然后是射击游戏，还是打怪。然后是角色扮演游戏，这次不光是打怪，还有升级……总之，光一个打怪就能覆盖80%的游戏。",{"type":14,"tag":15,"props":509,"children":510},{},[511],{"type":23,"value":512},"那么，打怪能得到什么呢？对这个问题的思考产生了Farm任务。一开始设计师们只是简单地计算分数，鼓励玩家的虚荣心；但这种行为很快就不够了，玩家们需要更明确的回报，设计师们就开始在游戏里加入什么奖命啊、奖励武器啊之类的新花样。终于，那些RPG设计师们把这些东西包装成了标准范式。",{"type":14,"tag":15,"props":514,"children":515},{},[516],{"type":23,"value":517},"随着设计师们在“打怪”和“练功”两者之间建立了明确的关系，Farm任务也由此产生。通常认为，只要在这两者之间建立联系的任务，就是Farm任务。所有那些让你去杀7只鸡15头猪20个兽人45个德国佬然后给你金币银币美刀钞票的任务，也全都是Farm任务。如果在广义上放宽到“所有需要反复熟练操作的游戏”，那Farm任务几乎能覆盖100%的类型。",{"type":14,"tag":15,"props":519,"children":520},{},[521],{"type":23,"value":522},"为什么这么命名呢？理由也很简单。",{"type":14,"tag":15,"props":524,"children":525},{},[526],{"type":23,"value":527},"种田有什么特点？主要就是两条，第一条是“田每年都要种，反反复复的种”，第二条是“种瓜得瓜，种豆得豆”。",{"type":14,"tag":15,"props":529,"children":530},{},[531],{"type":23,"value":532},"Farm任务有什么特点？同样是两条，第一条是“重复进行一样的工作”（打怪为主），第二条是“你费了多少力和时间，就有多少回报”。",{"type":14,"tag":15,"props":534,"children":535},{},[536],{"type":23,"value":537},"换句话说，Farm任务的核心就是“重复”和“回报”。只要把握住这个核心要点，你就能轻易地识别出各种各样的Farm任务。",{"type":14,"tag":15,"props":539,"children":540},{},[541],{"type":23,"value":542},"而这些就是设计师们赖以拖延游戏时间的神兵利器。从一开始，就算没有Farm任务，游戏也很好玩，人们也要趴在电视/电脑/手机前面玩太空侵略者，超级玛丽，勇者斗恶龙，使命召唤和愤怒的小鸟。加上回报以后，群众不就会想要“多打一个任务”，“再多打一个任务”了吗？",{"type":14,"tag":15,"props":544,"children":545},{},[546],{"type":23,"value":547},"多完美啊。",{"type":14,"tag":15,"props":549,"children":550},{},[551],{"type":23,"value":552},"好，那么我们现在知道了设计师侧的设计目的是“拖延时间”。那么玩家呢？对玩家来说，“重复”除了拖延时间之外还有什么用处？",{"type":14,"tag":15,"props":554,"children":555},{},[556],{"type":23,"value":557},"这个也再明显不过了——有个成语叫“熟能生巧”。人们为何要不停玩一样的游戏呢？自然是因为他们越玩越好啊。游戏技巧的提高本身，就已经是一件非常强力的武器了，足以拉着一部分人在游戏面前反复尝试。如果这种技巧的提高还伴随着各种游戏数值的提高，他们就更忍不住了。",{"type":14,"tag":15,"props":559,"children":560},{},[561],{"type":23,"value":562},"他们提高技巧，开启新内容，挑战新内容，再提高技巧，如此反复。",{"type":14,"tag":15,"props":564,"children":565},{},[566],{"type":23,"value":567},"也就是说，Farm任务的设计目的也分两个方面：设计师想用这种设计拖延用户的游戏时间，把他们拴在自己的游戏上；另一方面是用户，他们希望通过这些Farm任务熟悉游戏和熟练操作。",{"type":14,"tag":15,"props":569,"children":570},{},[571],{"type":23,"value":572},"看起来真是太完美了。设计师们拖延了时间，用户自己也乐意，大家还有额外回报。加个没啥实际用途的升级槽，玩家就该高兴死了吧？",{"type":14,"tag":15,"props":574,"children":575},{},[576],{"type":23,"value":577},"那么……喜欢反复完成“干掉15头迅猛龙/干掉15头老虎/干掉15头豹子”这类任务的人请举手。有人吗？喂，举手啊？",{"type":14,"tag":15,"props":579,"children":580},{},[581],{"type":23,"value":582},"好吧，为什么现在的Farm任务越设计越烦人了呢？明明是这么一个你情我愿的设计模式啊。它怎么就越做越无聊了呢？",{"type":14,"tag":15,"props":584,"children":585},{},[586,588,593],{"type":23,"value":587},"Farm任务之所以能击中大量玩家心中的软肋，其原因和种田一样：“",{"type":14,"tag":19,"props":589,"children":590},{},[591],{"type":23,"value":592},"付出总有回报",{"type":23,"value":594},"”。付出努力，收获与之相应的回报，永远是最令人兴奋的YY故事主线。",{"type":14,"tag":15,"props":596,"children":597},{},[598],{"type":23,"value":599},"Farm任务比现实有一个最大的优点：游戏里的回报从不赖账。现实是难以预测的，谋事在人，成事在天；游戏则是个非常公平的裁判。在完成了Farm任务以后，玩家可以得到非常确实的回报，系统绝不会贪污，不会打官腔，也不会踢皮球，该升级升级，该捞钱捞钱。",{"type":14,"tag":15,"props":601,"children":602},{},[603],{"type":23,"value":604},"这种回报有一种短暂而强烈的上瘾性，几乎我们每个人都体会过那种看着回报一次次增加或者角色一次次成长的兴奋感，脑内的兴奋物质——大概是内啡肽吧，如果不是请纠正——大量分泌。如果你不太玩游戏，那么就想象看着自己投资的股票市值不停上升的景象吧，带来的快感和上瘾性有其相似之处。对于初次接触游戏的人，这种上瘾性尤其可怕——在现实中可能一辈子也获得不了的成就感和安全感，在游戏里只用几天就能满足了。所以那些第一次玩网络游戏的人纷纷沉迷，办公室里的白领们忙着偷菜，Facebook上的洋人们在Farmville面前纷纷垂首……谁也不是内啡肽的对手。",{"type":14,"tag":15,"props":606,"children":607},{},[608],{"type":23,"value":609},"但如果你想做一个真正了不起的游戏，你就不能过于依赖这种廉价的Farm成瘾性，它更不该是你作为一个游戏设计师的唯一依赖。把猴子关在笼子里，他每次去拿同样的香蕉都会感到兴奋，用户可不会……好吧，至少有很大一部分用户会逐渐产生抗药性。",{"type":14,"tag":15,"props":611,"children":612},{},[613],{"type":23,"value":614},"确实，有些人会一直满足于这种成瘾性，但也有很多人不会。对游戏了解不多的人往往对这种上瘾性大惊失色，从而对此口诛笔伐，指责电子海洛因；一些对游戏浅尝辄止的轻度用户体验过上瘾性后对它产生了抗体，却会觉得“游戏什么的不过如此大同小异”。",{"type":14,"tag":15,"props":616,"children":617},{},[618],{"type":23,"value":619},"说实话，连猴子都能抄来一个Farm-升级系统，还要游戏设计师干什么？那可不是你的本事，而是用户大脑中内啡肽的本事啊。集中36只猴子，里面肯定有一只能押中轮盘赌的数字；如果你只是简单地做了打怪升级的Farm任务，那就意味着你和猴子一样，完全把运气寄托在用户身上，希望他们中的绝大多数人都还没对这种兴奋物质分泌模式产生抗性。",{"type":14,"tag":15,"props":621,"children":622},{},[623],{"type":23,"value":624},"如果你觉得这样就够了，当然也可以。最近的一只猴子公司估值都有51亿美元了，可以得很呢……但既然这是一篇设计理论文章，就该写出点儿比猴子转轮盘赌更多的东西来。",{"type":14,"tag":15,"props":626,"children":627},{},[628],{"type":23,"value":629},"那除了“重复”和“回报”以外，玩家还想要什么？再想想之前那句话，“熟能生巧”。",{"type":14,"tag":15,"props":631,"children":632},{},[633],{"type":23,"value":634},"没错，他们还要技能的提高。如果有技能的提高，没有回报他们都一遍遍玩游戏。让我们再看看前面那几个Farm任务。猎龙，猎虎，猎豹。玩家完成这几个任务之后，技术提高了吗？对游戏内容更熟悉了吗？除了那点银币和经验他们得到别的了吗？",{"type":14,"tag":15,"props":636,"children":637},{},[638],{"type":23,"value":639},"现在你该知道这几个Farm任务的问题出在哪里了吧。",{"type":14,"tag":15,"props":641,"children":642},{},[643],{"type":23,"value":644},"既然是重复一样枯燥乏味的操作，技术不仅得不到任何提高，就算提高了也没用的话，就别怨用户上外挂啊！",{"type":14,"tag":15,"props":646,"children":647},{},[648],{"type":23,"value":649},"Farm任务要做好，关键问题并不是你这个Farm任务本身的文本或者程序脚本写出高潮来，而是你这个游戏打怪部分本身必须有趣，而且有深度。",{"type":14,"tag":15,"props":651,"children":652},{},[653],{"type":23,"value":654},"深度可以分成两个方面。",{"type":14,"tag":15,"props":656,"children":657},{},[658,660,665],{"type":23,"value":659},"第一，",{"type":14,"tag":19,"props":661,"children":662},{},[663],{"type":23,"value":664},"玩家的技术可以提高",{"type":23,"value":666},"。这里有好多个方面可以提高，他的角色数值可以提高；他本人的操作能力可以提高；他对游戏的知识也可以提高。",{"type":14,"tag":15,"props":668,"children":669},{},[670,672,677],{"type":23,"value":671},"第二，",{"type":14,"tag":19,"props":673,"children":674},{},[675],{"type":23,"value":676},"这个提高必须有用，而且总是有用",{"type":23,"value":678},"。这一点总是被很多设计师忽略，所以我想强调一下。如果提高知识对游戏进程/游戏效率并无影响的话，那它就不是一个提高；数值和操作能力也是一样的。如果提高造成的效果近乎可以忽略——干掉这个设计要素。反正你不干掉它玩家也不会在乎，谁在意我杀一个怪是用4.8秒还是4.6秒？",{"type":14,"tag":15,"props":680,"children":681},{},[682],{"type":23,"value":683},"要做到这两点，你设计的游戏毫无疑问会拥有一张“成长阶梯表”，这是一件比猴子画的升级槽复杂而有趣得多的东西。你的游戏有多少种怪物，这些怪物有多少相关知识，玩家要消灭这些怪物需要多少操作能力和角色数值，和他们对应的有多少Farm任务，这些Farm任务完成以后能获得多少种不同的回报……等等等等。",{"type":14,"tag":15,"props":685,"children":686},{},[687],{"type":23,"value":688},"现在这些Farm任务就是有明确设计目的了：它们就是引导玩家通向这张成长表的桥梁。",{"type":14,"tag":15,"props":690,"children":691},{},[692],{"type":23,"value":693},"只要保证玩家能提高技能，而且这些技能对他进一步玩游戏有帮助，Farm任务就没有问题。甚至都不用Farm任务的额外奖励，玩家们自己都会去找最有效率的打怪升级方式；如果游戏设计能做到这个方式随着“成长阶梯表”不停变化的话，整个游戏就不会显得那么枯燥乏味。",{"type":14,"tag":15,"props":695,"children":696},{},[697,699,704],{"type":23,"value":698},"游戏设计师们务必要记住，你要在Farm任务中设计的是",{"type":14,"tag":19,"props":700,"children":701},{},[702],{"type":23,"value":703},"一种需要不断“重复”的游戏内容，它应当是经得起不断重复的",{"type":23,"value":705},"。",{"type":14,"tag":15,"props":707,"children":708},{},[709],{"type":23,"value":710},"照例，也有几点补充。",{"type":14,"tag":15,"props":712,"children":713},{},[714],{"type":23,"value":715},"是不是要做出游戏深度，就一定要把Farm任务做得很难或者很复杂？**–>**不一定。单纯地提高难度往往只是增加枯燥而已，单纯地提高操作复杂度肯定只是增加乏味。你只需要保证“相应的难度有相应的回报”就可以了。让没有技能或者厌恶复杂度的玩家接受低风险的回报，让喜欢挑战和提高技能的玩家去面对高风险高回报，别盲目地做那些对深度玩家好玩但是难死庸手的东西。如果要做，给他们相应的高回报，这样也能顺利地把玩家分开档次。",{"type":14,"tag":15,"props":717,"children":718},{},[719],{"type":23,"value":720},"是不是能够通过调整随机性来改善Farm任务的重复性？我加点状态变化啦随机怪物啦随机掉落啦什么的怎样？**–>**不是。务必记住，深度只是第二级的目的，在你实现这个目的之前，要先保证第一阶段“付出总有回报”的Farm任务公式没有受到破坏。种田的特点是固定的投入和固定的产出，就算有随机的天灾也应当能够以人力进行应对。不要用你对随机性的偏爱破坏Farm部分，那是另外一个设计目的完全不同的类型任务：Hunt任务的范畴。当然，可以有意外惊喜，也可以有累计奖励，没有玩家讨厌意外惊喜或者累积奖励。但是，别做过分的随机性。Farm的用户最讨厌天灾了。如果非要有天灾，给他们设计对策，掌握对策就能战胜的天灾立刻就变成游戏深度了。",{"type":14,"tag":15,"props":722,"children":723},{},[724],{"type":23,"value":725},"如果一定要做无聊的Farm任务来拖延时间该怎么办？开发周期来不及了呀！**–>**无论如何，加点儿调剂。改变一下回报的种类，把不同的Farm任务明确分开。玩家其实不怕重复做一件事，他们更怕“只能做一件事”，例如最终幻想13里面的刷乌龟……一旦一个游戏只能做一件事，这不仅是玩家不满的源泉，更是对整个游戏制作资源的极大浪费，游戏设计师们应该感到耻辱。所以，在成长阶梯表上，时刻考虑多提供几个不同方向的Farm任务作为选择。甚至，不同的打法给不同的回报。只要你的“付出就有回报”这个原则是确定的，根据完成方法的不同给不同的回报并不会降低Farm本身带来的乐趣。还不行……偶尔插点纯正内啡肽吧。但如果真的要插，这次就千万别给玩家他还要Farm多久的提示了，他爱Farm多久Farm多久——永恒之塔的100遍Farm任务恐怕是游戏设计史上最愚蠢的设计之一了。",{"type":14,"tag":15,"props":727,"children":728},{},[729],{"type":23,"value":730},"这次还是两个重要大类……继续继续。常见任务种类这就差不多了，剩下的2+1种其实都是特殊用途了，还得再整理整理思路。",{"type":14,"tag":15,"props":732,"children":733},{},[734],{"type":14,"tag":19,"props":735,"children":736},{},[737],{"type":23,"value":738},"Collect型任务（收集任务）",{"type":14,"tag":15,"props":740,"children":741},{},[742],{"type":23,"value":743},"说完了MoveTo型的任务和Farm型的任务，接下来可以说点确实没啥内涵的东西了。Collect任务就是任务里最好设计的一类。",{"type":14,"tag":15,"props":745,"children":746},{},[747],{"type":23,"value":748},"几乎每类常见游戏设计都是冲着某一种人性的弱点去的，收集任务也不例外。有人完全不收集任何东西吗？从藏书、集邮、标本制作、奢侈品购买、艺术品收藏一直到首办、变形金刚、网络资源下载狂，一般人总归会忍不住去收集某些自己喜欢的东西。小学生就会本能地收集弹珠啦、烟标啦之类的东西，可见这确实是人类基本的爱好之一。",{"type":14,"tag":15,"props":750,"children":751},{},[752],{"type":23,"value":753},"收集任务收集的并不一定是装备或者道具；收集装备或者道具的任务，也并不一定是出于收集目的所设计的。比如最简单的“打某种怪随机掉落n个专属物品”这种任务，从形式上来说是收集型任务，本质上却不是。这种任务是Farm型任务的一种变种，用来填千篇一律的Farm型任务表的。类似的，“到若干固定地点取得特定任务物品”也同样不是Collect任务，而是Moveto任务。但如果这种掉落品有其特殊的规律和值得研究的多样性，它却又可以成为收集任务的一部分了。",{"type":14,"tag":15,"props":755,"children":756},{},[757],{"type":23,"value":758},"为什么呢？因为收集任务设计中，最重要的就是“收集欲”。**所有不能激发收集欲望的任务都不是好的收集任务。**人们并不想收集那些完全一样的东西。",{"type":14,"tag":15,"props":760,"children":761},{},[762],{"type":23,"value":763},"说实话，收集欲望这东西本身没啥好说的，几条基本规律开天辟地以来就没改过，而且都是地球人都知道的设计原则，还做不到就是设计师的错了。",{"type":14,"tag":15,"props":765,"children":766},{},[767,769,774],{"type":23,"value":768},"就像金融衍生品的核心就是“打包与交换”这个概念一样，收集设计的核心就是“标准化与列表化”，把杂乱无章的物品合并，并组织成有逻辑的收集表。把相同的物品组织成收集内容，在内容的基础上产生逻辑，把过大的列表分成多级别的小表。",{"type":14,"tag":19,"props":770,"children":771},{},[772],{"type":23,"value":773},"收集任务的设计目的就是赤裸裸地利用人类本能的收集欲甚至收集强迫症，来推销设计师们想卖的东西",{"type":23,"value":775},"，最典型也是最混蛋的设计就是臭名昭著的成就系统。",{"type":14,"tag":15,"props":777,"children":778},{},[779],{"type":23,"value":780},"至于详细的设计要点么，我随便一列，你们也随便一看。",{"type":14,"tag":15,"props":782,"children":783},{},[784],{"type":23,"value":785},"首先，容易理解，容易入门。能够大众化的收集爱好通常都入门很容易，在游戏里也不例外。集邮的开始只是几张纪念邮票，钱币的入门也不过是几个平常找零回来的硬币，一个奢侈品狂姑娘的起步可能只是一个三流品牌的包包。好的收集品通常应该在玩家不知不觉间入手，然后给他展开一幅未来的庞大画卷。正面例子我就不多说了，反面例子么，COD7就是一个近在咫尺的例子。我估计肯定有好多用户直到通关也没发现游戏里有情报箱可以收集吧？",{"type":14,"tag":15,"props":787,"children":788},{},[789],{"type":23,"value":790},"然后，提示明确。什么东西能收集，收集了有好处，应该有明确的提示。在开放式的沙盘游戏，比如荒野大镖客、辐射这样的作品里，这点特别重要——因为你完全无法控制玩家什么时候拿到什么物品。如果实在不能像FNV一样用游戏内的任务进行提示，用一些超游戏的手段进行提示也是合理的。",{"type":14,"tag":15,"props":792,"children":793},{},[794],{"type":23,"value":795},"再次，阶段和收集目标清晰。弹珠为什么只是小孩子的收集品？因为弹珠和弹珠彼此之间的区别实在太小了。收集设计也是同样的道理，每个阶段都要有自己的特色，收集完一定数量以后要立刻给玩家回报，别去搞那些容易令人放弃的“贯穿性收集”。我刚批评过的哥特4就不说了，贯穿整个游戏的多种“漏掉一个就完了”的收集品实在是令人无语。COD7也很令人绝望，如果说有比从头到尾都没发现一个情报箱更惨的事情，那就是打了大半游戏以后才拾取到第一个情报箱……所有不能回去重新收集的收集品，起码应该给一个数量提示吧。就像臭名昭著的金融行业一样，“贪婪”和“恐惧”也是永远的设计主题。人类很难抗拒把已经有相当进程的收集项目收集完的冲动。",{"type":14,"tag":15,"props":797,"children":798},{},[799],{"type":23,"value":800},"最后，留下充足的想象空间。有哪个现实中的收集领域有尽头呢？在一个领域后面接着的是另一个领域，在一个类型后面接着的是另一个类型。每个能够流行开来的收集爱好都有着几乎无穷无尽的深度，游戏用不到做到这种程度，但是相当深度的收集目标也是必要的。已经收集的内容是进一步收集的垫脚石，已经收集到的奖励装备可以通过收集进一步升级，都是提供深度的简单办法。再深入就可以引入类似鉴定、随机属性或者隐藏属性这样的高级收集爱好者才会喜欢的要素，模仿现实收集行业里捡漏和鉴宝的要素。",{"type":14,"tag":15,"props":802,"children":803},{},[804],{"type":23,"value":805},"其他……其他真没什么好写的了。能做到这些，有收集癖的人就会欢欢地去做了；至于没有收集癖的那少数人，还是在收集回报上想办法吧。至于那些连贪婪和恐惧都没有的冷静强者，估计也不会来玩游戏吧？",{"type":14,"tag":15,"props":807,"children":808},{},[809],{"type":23,"value":810},"所以，我想谈另一个问题：收集设计思路的扩展用法。利用收集癖好本身不算什么了不起的设计，但怎样利用收集癖好来引导用户就是个艺术了。从开放的角度来想，只要能激发用户收集欲，收集的是什么其实无所谓。你到底要在收集任务里推销些什么呢？",{"type":14,"tag":15,"props":812,"children":813},{},[814],{"type":23,"value":815},"把眼光放远一点，不要把收集设计仅仅局限在任务上。最传统的想法是收集道具，这当然没有问题；音乐、CG、回想、图鉴这些想法比收集道具前进了一步，但本质上也区别不大。\n最简单的例子是成就。收集成就把收集的领域扩大到了“行为”方面。成就是挑战性设计，但把挑战们打包成一个成就系统，就是典型的收集设计了。这个类型改变的效果是非常明显的，现在几乎每个游戏都在努力做着类似成就的系统，瞄准的就是那些收集型玩家。",{"type":14,"tag":15,"props":817,"children":818},{},[819],{"type":23,"value":820},"关卡同样可以做成一种收集。谁规定所有关卡都要马上开放给玩家的？一点点解锁、凭票制、时间制、积分制都是可以考虑的设计。几乎每个音乐游戏都有用颜色清晰标明的不同难度及其评价，打开这个界面本身就是一种收集性质的激励。",{"type":14,"tag":15,"props":822,"children":823},{},[824],{"type":23,"value":825},"收集在装备设计中同样有大量应用。最经典的收集装备设计就是魔兽世界的套装……我上面说的入手简单、阶段目标清晰、提示明确、想象空间充足全齐了，可以当作一个经典的收集设计范例。暗黑破坏神的镶嵌是另外一个把收集要素融入到装备系统的好例子。这里值得一提的收集设计是“隐性收集装备”，也就是从数值角度按照套装设计，却并不写明的套装。在收集品过多的情况下，可以考虑用这个思路来设计。",{"type":14,"tag":15,"props":827,"children":828},{},[829],{"type":23,"value":830},"更进一步，制造业还是一种收集。用收集任务的角度来看制造业系统设计，很多问题就迎刃而解了。要怎么安排制造业生产的装备？要如何引导玩家去获得各种不同来源的道具，然后投入制造？要怎么安排制造业的阶梯性？用收集的理念来设计，会比用简单的公式合成或者复杂的真实系制造理念好玩得多。",{"type":14,"tag":15,"props":832,"children":833},{},[834],{"type":23,"value":835},"现阶段能想到的收集设计，个人认为是剧情线索的收集。这是一项真正愿者上钩的收集。那些最好的小说，实际上也是把细节和叙事线索什么的隐藏在字里行间，直到所有线索汇集，才一气呵成讲完所有的故事，塑造出令人印象深刻的人物。",{"type":14,"tag":15,"props":837,"children":838},{},[839],{"type":23,"value":840},"目前这方面有几个很好的尝试，比如Bioshock系列，通过录音和关卡的完美结合来安排收集性质的线索叙事；FNV在结构上已经是线索收集-任务展开的形式了，可惜的是影响要素还并没有按照收集系统来设计，缺乏了一些形式美感，也不容易让一般玩家领会到那种草蛇灰线伏线千里的气势。在没有任何提示下，有多少人能发现凯撒的死亡竟然会影响好几个八竿子都打不着的遥远任务的展开线索？在叙事领域，目前还没有将线索收集作为核心收集要素的例子，最多也就是Bioshock这样无伤大雅的补充；但我个人觉得，类似作品的出现也不会太远了。",{"type":14,"tag":15,"props":842,"children":843},{},[844],{"type":14,"tag":19,"props":845,"children":846},{},[847],{"type":23,"value":848},"Hunt型任务（狩猎任务）",{"type":14,"tag":15,"props":850,"children":851},{},[852],{"type":23,"value":853},"自古以来狩猎就是人类的本能，在游戏世界里也不例外。当然，打死那些没啥抵抗能力的家畜不算狩猎，所谓Hunt任务，就是要拿出最好的武器和装备，和相对更强大的敌人进行生死的决斗，并获得惊人的报酬——俗称打BOSS。",{"type":14,"tag":15,"props":855,"children":856},{},[857],{"type":23,"value":858},"如果说Farm任务对应的是动作游戏中的杂兵，那么Hunt任务对应的就是动作游戏中的Boss战。\n如果说Farm任务对应的是代表幸福安宁满足感的内啡肽，那么Hunt任务对应的就是亢奋专注快感的多巴胺。\n如果说Farm任务的目的是设计成“普通玩家经过努力后不用脑也可以完成”，那么Hunt任务就应该保证成为“玩家反复磨练技术后得到的报偿”。\nOK，到此为止。理论上是该这么说的啦……实际上不是这么回事。把上面那些基本常识记下来，然后来考虑一下真正的设计目的。",{"type":14,"tag":15,"props":860,"children":861},{},[862,864,869],{"type":23,"value":863},"设计Hunt任务的目的和考验玩家什么的没有任何关系。你设计首领战不是为了让玩家打不过去，而是为了让他的辛苦练习和成长有用武之地。真正的设计目的是消费。",{"type":14,"tag":19,"props":865,"children":866},{},[867],{"type":23,"value":868},"Hunt任务和BOSS战的设计，对应的是玩家的消费",{"type":23,"value":870},"（当然还有投资，但这两者在游戏中就和现实经济中一样难以区分）。",{"type":14,"tag":15,"props":872,"children":873},{},[874],{"type":23,"value":875},"换句话说，如果说其他类型的任务起到的是积累的作用，那么Hunt任务（当然还有PVP）就要起到消费的作用：在其他内容中取得的技能、等级和消耗品在这里被用掉，并变成玩家们最爱的回报和装备不动产。",{"type":14,"tag":15,"props":877,"children":878},{},[879],{"type":23,"value":880},"一个游戏的BOSS战可不是设计到谁都打不过去就是好的。想要做这种内容，去做怒首领蜂好了，听说直到今天在整个世界也只有一个人类可以打败二周目真绯蜂改发狂，而且大家还没有在录像上亲见。你通过传送每小时打败10次巴尔和考验玩家有任何关系么？你集结25个人和一个有钱的老板，去刷一个大副本和考验玩家有任何关系么？什么关系都没有啊。\n无他，唯手熟尔。Farm任务是连外挂也能完成的任务，而Hunt任务就应该是要求操作熟练度和专克外挂的那些内容。",{"type":14,"tag":15,"props":882,"children":883},{},[884],{"type":23,"value":885},"说到这里，最重要的是什么简直呼之欲出。主要有两个问题，门槛和随机性。",{"type":14,"tag":15,"props":887,"children":888},{},[889],{"type":23,"value":890},"门槛部分的设计思想很简单，保证用户大多数的资产都能在某个Hunt任务中用上。所有的武器、职业和技能都有优势领域自然最好，大部分有用也很不错。让不同的Hunt任务之间所需要的门槛错开也是很重要的，有些BOSS可能是硬性的数值门槛，有些可能是队伍组成/技能熟练门槛，有些可能是特殊装备门槛、时间门槛甚至用户金钱/资产门槛。不要太轻视这个部分：除了让用户怎么捞以外，让用户捞到的东西有用也是非常重要的。如果条件允许的话，负责设计重要的门槛BOSS的游戏设计师最好同时负责数值或系统的设计，至少也要有项目内数值或系统设计的经验。",{"type":14,"tag":15,"props":892,"children":893},{},[894],{"type":23,"value":895},"再说随机性。随机性看起来很简单，但其实也有不少小窍门。核心的指导思想么……我就说的浅白且反动一点了：**距离现实中的赌博（或者彩票）设计越近，那么随机性的设计就越令人舒服。**不算金融衍生品的话，赌博是人类掌握的最有效的财富消灭器，久经考验。如果这个游戏设计的目的是让人反复玩，那么Hunt任务和BOSS设计就要当仁不让，扛起作为赌场的责任来。",{"type":14,"tag":15,"props":897,"children":898},{},[899],{"type":23,"value":900},"最无聊的BOSS就是那种可以按照固定套路简单地对付，但是期望回报还一直非常高的BOSS。买100块随机返回80~120块奖金的彩票会有人爱买吗？一个这种高级BOSS就能毁掉整个游戏，最典型的例子就是FF13，网游里面也有大量“只有一个BOSS有人在刷”的游戏。当一个游戏所有的Hunt部分都变成Farm的时候，这个游戏的生命也就差不多到头了。性质非常类似的糟糕设计是“一切BOSS都可以用同样的招数简单的处理”，这会让玩家觉得不管是熟练操作还是角色成长都没有任何实际意义。",{"type":14,"tag":15,"props":902,"children":903},{},[904],{"type":23,"value":905},"另外一种乍看之下很好，其实却很令人烦躁的随机性设计就是所谓“平均化几率”。BOSS确实会很多招数，但他只是每次以相同的概率抽取几个差不多难度的招数。好不容易打倒了某个BOSS，这个BOSS却只会以平均的概率掉落各种相同等级的装备（在魔兽世界的某些BOSS中这种设计特别常见）。平均化随机的问题在于，事实上的回报和给玩家造成的期望不符。比如BOSS掉落三种装备，几率全是1/3。一般玩家自然会想“打三次应该就能都掉出来了吧”，实际上却不是这么回事——大多数时候起码要打4次或者5次才能都掉出来（感兴趣的人可以自己算算，我就不附公式了）。这个心理期望概率和实际概率的误差在重复次数不是太多的时候会非常明显。可以参考一下轮盘的设计：如果回报严格遵循算数平均的话，就应该给不同风险偏好的用户不同的赔率。",{"type":14,"tag":15,"props":907,"children":908},{},[909],{"type":23,"value":910},"从这里再进一步，就是在“玩法的随机性”和“回报的随机性”之间建立逻辑关系。流行的赌博形式可以分为四种：赔率规则非常简单，但是玩法策略充满可控性和对抗性的赌博（例如二十一点和得克萨斯扑克）；赔率规则非常复杂，但是玩法策略非常简单或者完全不可操控的赌博（例如轮盘）；赔率和玩法都非常简单的赌博（例如彩票，老虎机）；赔率和玩法都非常复杂的赌博（例如麻将，赛马）。其中第三种是最有趣的。六合彩本身是一个纯粹随机的游戏，但是由于回报倍率惊人，而且形式十分迷惑人，人们忍不住发展出了众多的“彩票逻辑”。计算数字概率啦，改变投注策略啦，就仿佛六合彩那几个数字和赛马或足球一样是有规律可循的一般……人们是多么热爱虚幻的操控感啊。",{"type":14,"tag":15,"props":912,"children":913},{},[914],{"type":23,"value":915},"那么回到随机性设计的问题上来。在目前的BOSS设计中，玩家的行动或行动策略对他所能获得的回报有影响吗？",{"type":14,"tag":15,"props":917,"children":918},{},[919],{"type":23,"value":920},"和赌博一对比，就显示出多数游戏在这方面设计的空白和乏力。暗黑破坏神显然是没有的，魔兽世界也基本是没有的，赌注状态仅有“能打过”和“打不过”两级门槛，用户并不能下更大的赌注，或者提高自己赢得赌注的几率。有些游戏倒是拉开了回报赔率的差距，同样一个BOSS可能掉落等级差距极大的回报，但这个回报赔率的区别并不取决于玩家所做出的赌注决策，只是纯粹碰运气而已。",{"type":14,"tag":15,"props":922,"children":923},{},[924],{"type":23,"value":925},"是否可以适当强化不同BOSS之间的赌博公式区别，让不同的BOSS拥有不同的回报赔率，并且这个赔率可以随着玩家的选择而改变呢？有些游戏选择了根据打法改变掉落表，有些游戏则引入了时间和评价之类的其他影响因素，不过在这方面的尝试仍然远远不够。比如，能不能制作一个类似轮盘或者赛马赌票的Hunt任务系统呢？能不能刻意限制玩家打BOSS的次数，让“无限下注赌场”变成“有限下注赌场”呢？顺着“赌场下注”的思路想下去，应该还有更多有趣的想法吧。",{"type":14,"tag":15,"props":927,"children":928},{},[929],{"type":14,"tag":19,"props":930,"children":931},{},[932],{"type":23,"value":933},"Puzzle型任务（解谜任务）",{"type":14,"tag":15,"props":935,"children":936},{},[937],{"type":23,"value":938},"如果这篇文章写作于1990年而不是2010年，肯定会写“Puzzle型任务的设计目的是智力挑战和由此带来的愉悦感”。就像神秘岛里的层层机关，就像国家宝藏里的条条线索，抽丝剥茧到最后揭开所有谜题……多有趣啊。\n就连在大众传媒和一般人的想象中，游戏设计师们干的也应该是类似这样的工作：他们（经常也有她们，通常还是些美妞……可恶，我恨现实）坐在一些塑胶玩具和毛绒玩具中间，对着一些色彩斑斓的电脑屏幕画画图，连连线，就做出来了一些类似愤怒的小鸟和植物大战僵尸的可爱游戏，然后大赚其钱。\n多美好的想象啊。大众传媒还觉得魔兽世界的测试员是世界上最好最有趣的十个工作之一呢……你们敢找个魔兽世界的Tester来么？",{"type":14,"tag":15,"props":940,"children":941},{},[942],{"type":23,"value":943},"遗憾的是，现在是2010年，一个互联网络已经大行其道的年代，所以这一段不会这么写。人类的智力在Google面前实在不值一提，再难的谜题在搜索引擎面前也会被分秒解决。智力挑战？抱歉一般人不喜欢这个。大家能面对的智力挑战到头就是雷顿教授（而且还要查攻略），稍微差点儿就是脑白金，一本字书或者一篇长文能秒掉百分之八十的用户，你还挑战他们的智力？开什么玩笑啊。\n所以，解谜任务在网络时代分出了两条支流。简单的那条支流瞄准的是操作，把“智力”简化成了简单重复操作考验，代表作品就如同脑白金、Puzzle Quest和愤怒的小鸟；难的那条支流则担负着另外一个任务，这类Puzzle型任务的最主要设计目的不是“智力挑战”，而是“用户交流”。",{"type":14,"tag":15,"props":945,"children":946},{},[947,949,954],{"type":23,"value":948},"先说“操作性谜题”。操作性谜题……本质上不是谜题。它们是一些通过程序生成的小游戏，只是装成谜题的样子而已。\n最低档的操作性谜题就仿佛国内网游非常流行的“每日文化答题”，用户只需要背背题库就好——为了每日领赏，他们也确实对题库倒背如流（我时常想，如果专门开个雅思题库或者GRE题库服务器，没准比新东方教学效果还好呢）。俄罗斯方块衍生系和宝石迷阵衍生系也非常受欢迎，做成和游戏内系统挂钩的或者3D视角的也不算费事（Puzzle Quest就算是个最典型的例子了）。再强一点的放拼字游戏或者数独，虽然抄起来很省心，只要设计师们改头换面一番就能瞬间生成数以千计的谜题表——脑白金是最好的例子了。喜欢动作性的设计师可以像愤怒的小鸟一样照抄某些经典的动作或者解谜游戏设计，反正愤怒的小鸟自己也不过是照抄那些前辈，例如百战天虫什么的（事实上这个抛物线解谜类型久远到电脑都还没出现就已经有了，如果十七世纪会解这种谜题，你就可以在任意一家国家的炮兵中找到一份好工作）。再往上才是“自己设计操作性谜题任务”——虽然大众媒体都吹捧这种做法，但我非常非常不推荐这条道路。一百个放在Appstore或者Xboxlive上的原创小游戏里，起码有九十五个无人问津。一百个放在主流游戏里面的解谜小游戏，起码有九十个是垃圾。劳民伤财呀，何苦呢？\n那么这种谜题任务用来干吗呢？目的也很简单，这大概是",{"type":14,"tag":19,"props":950,"children":951},{},[952],{"type":23,"value":953},"成本最低的用来调剂节奏和拖延游戏时间的方法",{"type":23,"value":955},"。设计操作性谜题任务几乎不需要什么游戏设计师，只需要些谜题数据库就能搞定了，而这点努力能换回玩家成千上万的游戏时间。它们也很适合做那些跨等级和横跨整个游戏的固定任务/每日任务，这样设计内容方面就不用操心了，只要简单调整调整题库的难度表和回报比例就成。除了“天才的设计师自己钩钩画画出来”的小游戏之外，剩下的操作性谜题都是久经考验，一般人也都玩得非常好，用户引导方面同样不用费心。\n就只是这样？没错，就只是这样，我想不出有什么更深刻的设计目标了。除了“低成本内容”外，没有其他意义，甭指望用户会因为你做了一个比愤怒的小鸟还好玩还漂亮的小游戏就凑过来，因为他们买的本来就是愤怒的小鸟而不是其他。",{"type":14,"tag":15,"props":957,"children":958},{},[959,961,966],{"type":23,"value":960},"再说“交流性谜题任务”。交流性谜题的设计目的就是让玩家们在游戏内或者游戏外勾勾搭搭，吵吵嚷嚷，间接",{"type":14,"tag":19,"props":962,"children":963},{},[964],{"type":23,"value":965},"提高游戏的黏着度",{"type":23,"value":967},"。\n最简单的交流性谜题自然是“多人合作”Puzzle任务了。在任务里强制让玩家们协作解除机关就能达成最简单的强制多人合作，再进一步就是让玩家们在战术/移动层上达成配合的解谜任务。玩家们在行动上的配合，或者强制限时推进同样非常好用，可以逼着用户们强化彼此之间的关系等级，构建出一些要求比野队、随机副本或者G团更高的任务内容。\n“寻求帮助”也是一种很好的交流性任务。大多数有任务的游戏，都有不止一种职业，设计师可以通过这种需要其他职业能力的任务来强化沟通。如果把这种任务放大到关卡或者副本的层面上来看，还可以发掘出更多变的用法：例如某个副本，有要求一个五人队伍中有四个战士才能完成的交流性Puzzle任务，也就无形间提供了整个副本的另外一套强制打法。\n再往上一层的目的就是想办法引导玩家去进行游戏外的讨论，这通过普通任务就很难做到了——搜索引擎和教程仍然是无敌的。通常来说，要让一个任务在玩家中造成分歧，用“隐藏”或者“推理”这种寻常手段是没用的，这种手段最多能制造一些“XXX地区还差两个任务没做成就完不成求助”这样的低水平讨论。你必须要做到两点：第一，隐藏一部份数据和逻辑。第二，构造虚假的线索。争论，只有争论才是制造分歧和掩盖谜题真相的最有力武器。构造虚假的线索，隐藏关键的数据，让玩家在他的直觉和逻辑之间产生矛盾。这事儿暴雪干得精熟，Square Enix也不遑多让。",{"type":14,"tag":15,"props":969,"children":970},{},[971,973],{"type":23,"value":972},"最后我还是用实例来说明，说个我所知道的“交流性谜题”（其实不是谜题任务了，但是设计目的差不多）的设计例子吧。你们都知道暗黑破坏神2那臭名昭著的“物品掉落率增加7%护符（俗称SC）”吧？由于可以增加7%的掉落率，所有人都喜欢它。在某大型网络游戏里面，有个类似的设计，某些职业和装备上有个属性叫做“物品掉落率增加”的、看起来就像SC一样非常重要的属性。官方只是草草一说“这个属性可以增加物品的掉落率啊”就结束了，然后几个设计师在非官方的场合透露过“确实是有改变率的啊”。争论由此展开。由于持有技能的职业通常在大Raid中不太重要，有这种属性的装备本身战斗力通常非常低下，那到底要怎么才能最大化利益呢？一个Raid团应该带几个这种掉落率相关群众，又应该怎么围绕它们来安排战术呢？技术党们争论不止，自然想到了测试，结果发现——这个属性的效果是根据目标BOSS和掉落物种类的不同而变化的。对于大多数低等便宜原料来说掉落率常常倍增，但是对于各种装备、高级原料、宝石什么的就很难说了……于是持各种论调的技术党们争辩不止，论坛上定期出现“最新一期掉落率实测结果！推翻传统论调”的月经贴，各国人民组团时左右为难。\n我相信设计师们一定在偷笑吧。例子到此为止——Puzzle任务应该也不用再多说了。想办法创造出新的谜题和话题点，创造更多的争辩和分歧吧。",{"type":14,"tag":19,"props":974,"children":975},{},[976],{"type":23,"value":977},"只有能产生分歧的问题，才是互联网和搜索引擎无法战胜的内容。",{"type":14,"tag":15,"props":979,"children":980},{},[981],{"type":14,"tag":19,"props":982,"children":983},{},[984],{"type":23,"value":985},"Challenge型任务（挑战任务）",{"type":14,"tag":15,"props":987,"children":988},{},[989,991,996,998,1003],{"type":23,"value":990},"Challenge型任务的设计目的是“玩家分层”和“虚荣心”。如果说以上前几类任务的最终设计目的都是“让所有用户都能完成”的话，那么挑战型任务设计的目的只有一个：",{"type":14,"tag":19,"props":992,"children":993},{},[994],{"type":23,"value":995},"让绝大多数用户只能部分地完成它",{"type":23,"value":997},"（注意不是完不成它，一个用户不感兴趣或怎么也完不成的挑战是相当失败的）。“人人都有”的东西大家不太感兴趣，只有“人无我有”才是可恶的虚荣心。\n这个类型任务的设计思路直接继承了原始时代“分数”的设计目标，",{"type":14,"tag":19,"props":999,"children":1000},{},[1001],{"type":23,"value":1002},"让用户分层化",{"type":23,"value":1004},"。人生的目的就是打到最高分，每天的最高分，每周的最高分，每月的最高分，每服务器的最高分，历史的最高分……强者们，高手们，人民币日元美元欧元战士们，你们炫耀的时候到了！\n“挑战么……增加难度不就行了？”\n不要把这事儿想得太容易。没错，难度变化是几乎每个游戏都有的基础。变更数量、变更敌方属性、变更敌方行动规律（玩家管这叫AI，虽然实质上这和AI关系非常小）。同样的内容，改变一下数值和容错率就能提供完全不同的难度，是大家喜闻乐见的挑战自我和挑战他人的形式。这里棘手的问题，主要是怎么把这些难度变化任务展示给一般玩家……大多数游戏的设计是完全失败的，只有少数精英玩家会去挑战高难度。我印象里最成功的设计恐怕还是暴雪的暗黑破坏神，强逼着一般用户去挑战最高难度反复刷刷刷。如果你想让玩家挑战不同难度的相同任务，首先要控制难度种类不超过四种（最多五种吧，再多一般人就直接忽略了），然后是尽量让他们认为这是一次通关顺序上不同的内容——而不是反复进行同样的内容。\n可对精英玩家来说，这是远远不够的。设计师们总在抱怨用户弱智，他们总能发现，用户中最弱的那一部分永远比人类所能想象的程度还要弱。反过来说，用户们最强的那一部分也是强到几乎无止境的。反射神经论毫秒计算的只是基础，高手们的肉眼不光可以分辨单独帧，甚至还能分辨出每个单独帧延迟的时间；你的十个指头每分钟最多输出一百个有意义的操作，有的高手每分钟能输出五百个；你觉得能弹个钢琴已经很了不起了，可用户里多的是有绝对音感加精准操作媲美职业钢琴师的高手；你能在甩狙击枪的过程中命中目标？高手还能用肉眼对抛物线做积分呢。设计师当然要尽全力设计各种各样的高难度内容，这是他们当然的职责。但光靠难度是不够的，谁能斗过无敌的玩家呢？甭管是噩梦还是神级难度都有人无伤通关，设计目标是50分钟的内容可能会被突破到两三分钟，理论上决不可能的精确操作会被打到100%命中，高手的手指和外挂无异。光从难度入手是不够的，还得另想办法。",{"type":14,"tag":15,"props":1006,"children":1007},{},[1008,1010,1015,1017,1022,1024,1029],{"type":23,"value":1009},"另外的办法，就是设计师放弃去挑战玩家，而是",{"type":14,"tag":19,"props":1011,"children":1012},{},[1013],{"type":23,"value":1014},"让玩家挑战自己和其他玩家的极限",{"type":23,"value":1016},"。无论是单机还是网游，都在试图走这个方向，设计那些让强力用户和强力用户自身进行极限挑战的内容。所以，挑战任务设计的核心，其实是“你要让玩家们在什么样的项目上分出高下”。由于挑战本身就是一种快乐，是否要在这里设计对应的回报都存在很大争议——从结果来看，通常有没有回报都可以。有些人喜欢留个象征性的入门回报，有些人喜欢留个分级制但是上不封顶的回报，有些人喜欢留个只给冠军的回报——怎么操作都行的，反正挑战任务的目标是玩家的好胜心和虚荣心；既然是“虚”荣心，当上冠军这件事情本身已经足以让那些高手们手舞足蹈了。除了回报之外，改善挑战任务的组织同样有不错的小说。理论上来说，挑战任务直接散布在整个游戏中是可以的；但像荒野大镖客RDR一样，用一些等级和列表把这些挑战任务组织起来会更好一些。看到100个挑战任务像芝麻一样分布在游戏里会令不少人抓狂；但如果挑战任务的组织结构是4",{"type":14,"tag":52,"props":1018,"children":1019},{},[1020],{"type":23,"value":1021},"10（容易）、3",{"type":23,"value":1023},"10（普通）、2",{"type":14,"tag":52,"props":1025,"children":1026},{},[1027],{"type":23,"value":1028},"10（困难）、1",{"type":23,"value":1030},"10（噩梦），那同样数量的挑战任务能让更多的人上钩。\n撇开难度不说，还有几种被广泛使用的低成本Challenge类任务设计手法——呃，我就不提人民币/美元充值榜和道具/装备排行榜了，那些太邪恶了，要用也得想办法立个牌坊再说。PVP要素也不多提了，给一个任务制作协作模式或者对抗模式的成本太高，基本可以视作完全做了个不同的新任务了——八成还得搭做一张新地图什么的。",{"type":14,"tag":15,"props":1032,"children":1033},{},[1034],{"type":23,"value":1035},"精确操作：传统上来说，分数主要就是用来奖励精确操作的——偶尔也用来奖励一下下面说的其他几类挑战任务。千万别设计那种“谁来了都能打满分”的分数统计任务，如果有这种内容，请果断砍掉，没有任何意义。精确操作通常有两种表现形式，一种是“操作得越准越好”，另一种是“操作得不出错就好”，前者考验反应，后者考验意识。这个对非网络游戏来说是非常常用的设计手段，但对网络游戏来说有个棘手的延时问题（同时也衍生出了外挂问题）。选择哪种，只取决于你所需要的游戏类型。前者更适合做分数排行榜，设计毫无失误的连击和目押；后者更适合做网络游戏和各种用来展现神一般的意识和飘忽的操作的内容。\n时间限制和时间统计：时限任务是最最最好做的挑战任务了。甭管什么内容，你都可以加个时间限制在那里，立马就可以开始计时排名。倒数计时可以强化紧张感，顺序计时可以用来做用户水准评价。再弱智的游戏都可以有时间挑战任务，怎么都能加进去的……只是有一个小小的问题，似乎有很大一部分玩家生理上本能讨厌计时。我个人的建议是，尽量少用倒计时，把倒计时任务丢在关键位置和某些可选任务里，不要做全局化的计时任务系统（也就是那种所有任务都自带一个计时器的禁忌设计）。这种东西偶尔有几个可以，走到哪儿都有就会破坏整个游戏的节奏感，还会吓跑患有隐性闹钟恐惧症的玩家。如果打算大量使用时间相关的设计，可以考虑用其他的方式变通处理，例如限定时间的BUFF或者道具，或者用“全世界/全服务器第一个达成某某目标”这样的变通手段来做。\n探索与意外发现：也就是“完成度”，同样是加起来不费什么大事儿的内容。和时间设计正好相反的挑战要素，时间相关挑战对应那些快准狠玩家，完成度相关挑战对应那些细慢精玩家。这个类型的挑战任务倒是不怕多，甚至从某种意义上来说，越多越好，做得越多就能引导玩家看到越多的设计细节——前提是你的游戏有足够的设计细节。击杀一个任务中生成的所有敌人，踹翻所有的生成宝箱，认真看完小电影抓紧时间按掉里面所有QTE，打柴堆一下向下移动三步空挥五刀就能吃到1UP……怎样变态的小知识都可以。暴雪饭们都对WOW“服务器里的树苗会随着版本更新逐渐换成大树”这事情赞不绝口，UO粉们对“因为游戏BUG产生的不同颜色的一般物品”趋之若鹜，玩家们探索设计细节的这个过程本身有时就能构成口碑营销。知道这些没用的小知识也算是炫耀要素之一，是真正爱好者们引以为豪的话题，做点儿东西满足他们的期待也是没错的。完全没有这些小知识的游戏看起来会很粗糙。",{"type":14,"tag":15,"props":1037,"children":1038},{},[1039],{"type":14,"tag":19,"props":1040,"children":1041},{},[1042],{"type":23,"value":1043},"Storytelling型任务（叙事任务）",{"type":14,"tag":15,"props":1045,"children":1046},{},[1047],{"type":23,"value":1048},"说完了六类主要的设计目的，按以上教程做出来的任务就能好玩，或者令人印象很深刻了么？\n很遗憾，恐怕还是不能。这篇理论文章的目的是把任务做得很舒服，不会有人动辄跳起来骂娘，可不代表这些任务不会无聊。\n设计和艺术是不一样的。因为设计可以很容易地复制，而艺术不能。上面这些并不是什么了不起的东西，只是一篇基础设计常识的实用菜谱。不管怎么无聊的故事线，照着上面这些任务分类去做，至少能把普通的文本转换成看起来不那么单调的任务线，也能保证一般用户都能轻松地接受这些任务。\n但叙事没有这么简单，因为叙事的要求比不无聊要高得多。叙事任务并无其固定的形式。形式并不等于公式，世上有好的食谱和差的食谱，但绝无那种神奇的食谱可以保证你的蛋糕一定美味可口。\n所以，最后一个附加的任务分类就是叙事（Storytelling），探讨一下怎么用讨厌的任务制设计方法来实现电影化或者小说化的叙事。这一部分基本上全是设想了，不像前面六个大类，你们直接去找个“魔兽世界大灾变”来玩就能看到里面很多任务设计思路的具体改进方案。",{"type":14,"tag":15,"props":1050,"children":1051},{},[1052],{"type":23,"value":1053},"这个问题其实相当为难。大多数时候，任务制就是叙事的天敌。\n任务制天生就适合做短篇小说，它甚至能把很好的长篇故事拆成很多什么都不是的短篇小说和超短篇小说。回想一下你最喜欢的那些电影和小说吧，每个拆成任务制以后似乎都很无聊，连贯的故事变得支离破碎。\n几个还算成功的游戏作品在这些方面的努力看起来也乏善可陈。魔兽世界制作了数以万计的任务和数百万字的任务文本，但能让玩家感到激动地任务怕是连十分之一都没有。侠盗列车手GTA4在单个任务上下的功夫不可谓不深，投入不可谓不多，但大多数任务还是只配被玩家快速地按掉又按掉。辐射新维加斯在任务结构和复杂程度方面的努力创下了角色扮演游戏史上的新高，但这种努力也没有遮掩住主线任务故事的散乱和最终决战的巨大落差。我们手头没什么太成功的例子，只好从那些一闪而过的成功火花里来找灵感。",{"type":14,"tag":15,"props":1055,"children":1056},{},[1057,1059,1064,1066,1071],{"type":23,"value":1058},"对于游戏来说，叙事三要素的实现顺序和其他媒体是不一样的。我们的叙事三要素按照难度从低往高排，是环境，情节，人物。\n对于一个游戏来说，最容易搞定的就是环境了。环境带来的冲击随时都能看到，而且能够感受到；要塑造一个出色的环境也用不着什么太复杂的技巧：音乐加场景设计就能基本搞定。几乎每个成功的游戏，背后都有一个杰出的世界观。这也是任务设计最容易发挥其威力的地方——所谓世界，原本就是由一个又一个的细节拼成的，任务设计恰恰擅长描述细节。只要隔三差五分配一些任务或目标在世界观塑造上，就能很成功地构造环境。\n情节就相对比较难办了。任务制和情节的抵触看起来十分彻底：谁愿意每次情节发生的时候看到“你的任务已经更新”，然后又要重新跑一大段路？别管设计师或者剧本原来打算搞什么叙事节奏，现在都已经破坏光了。一个恶劣的反面例子就是辐射新维加斯最后的胡佛水坝大战，虽然剧本和线索布置得很充足，但真打到这里的时候就会令人感觉“啊，不过如此……”，一点也没有最终决战应有的节奏。\n我个人的观点，正确的发展方向只能是“",{"type":14,"tag":19,"props":1060,"children":1061},{},[1062],{"type":23,"value":1063},"关键情节连贯化",{"type":23,"value":1065},"”。当情节上需要进行关键高潮的时候，尽一切可能进行连贯化。任务不用回去交，回报直接打进道具栏，跑路部分使用强制传送，小电影部分用即时互动……把所有的精力集中在叙事进程本身上，能跳的部分毫不犹豫地跳，能省的部分毫不犹豫地省。所有的叙事应当一气呵成，就像电影的高潮部分一样。任务执行本身也应当和叙事结合起来，要把游戏时间、难度，甚至是玩家失败的可能性也考虑进整个叙事流程当中。当然，出于成本和周期考虑，不可能所有任务都这么设计；为了达到这个目的，甚至可以牺牲那些不重要的次要任务的质量，明确地在“主线关键剧情任务”和“环境塑造任务”之间拉开差距。至于网络游戏么……你看，网络游戏本来也是要送新手包诱骗用户去升级的，不是么？既然用户肯定有额外资源，索性都用在这里好了。\n人物是最大的难点。就算是小说，要塑造一个人物形象也是难比登天的事情；更别说游戏了。说实话，我实在想不到什么成功塑造了人物形象的普通游戏例子，偶尔有几个成功的例子，又不太具备普适性，比如Bioshock这样的大成功连他们自己的二代都复制不了。日本游戏曾经倒是有很多成就，但那些成就是FC和PS舞台剧时代的成就，沿用的是戏剧形式的夸张演出，并不是当代的成就，当代的日本游戏人物塑造可以说是普遍失败的（美少女游戏Galgame除外啦……以5pb为代表的角色营销干得还不错)。我们只好从叙事常识角度试着来构思如何在任务中塑造人物了。\n先不说人物曲线什么的劳什子，塑造人物的最基本要求就是“信息量”，光这一点大多数任务制的游戏就保证不了。如果一部电影剧本看到第50页的时候还不知道谁是主角，有几个，这电影剧本肯定会被打回去重写；这样的事偏偏在游戏中反复地发生。不管是魔兽世界、GTA还是荒野大镖客里，主要角色塑造很少有超过十个任务的——区区十个任务！通常来说，不算任务进行过程，这十个任务也只够将就交待一下角色的出身性格什么的，距离有血有肉还差得远呢。想用这种分量的信息量塑造一个了不起的角色，你们需要的不是编剧，是莎士比亚了。要真想通过任务塑造人物，第一件事情就是",{"type":14,"tag":19,"props":1067,"children":1068},{},[1069],{"type":23,"value":1070},"把人物角色相关任务的密度和数量提高",{"type":23,"value":1072},"，把所有能拉到目标角色身上的任务都拉过来，聚集成一条事件线，甚至一个巨大的事件团。\n接着就是所谓的“人物曲线”，一个人物角色的背景、动机、内在目标和性格变化。这个要求就更高了，就算在电影里通常也只是极少数主角能享受的高级待遇。对于游戏来说，这个变化更必须是能在游戏过程中让玩家潜移默化地体会出来的……难上加难。舞台剧式的角色直接转职固然省事，但以叙事手段来说未免落了下乘。用好感度之类的数值来处理人物不同阶段的反应和AI比前者略好，但以这种系统作为游戏内容却显得十分生硬，只有最早期那些“恋爱”游戏才会用这种生硬的系统——别看了，近期游戏里Dragon Age我说的就是你，这种上个世纪的Gameplay你不觉得难受么！如果参照日本galgame脚本的发展过程，比较受欢迎的处理方式其实是“同样的关键任务事件中，不同的角色有不同的反应”，但这个在游戏制作成本上的投入又实在太大了……现代游戏不能光掰对话树啊，也需要有不同的演出甚至具体的不同游戏内容。稍微退让一些的做法可能更有实际可操作性：人物的背景、动机、过去等等都是独立的小型任务或任务细节，关键的“性格变化”和“冲突”两步则和游戏内的大型情节任务挂钩处理，并设计对应的任务体验内容。由于大多数游戏都做得很差，在这方面努力一些，再在关键的体验部分想出个好点子就能令玩家留下深刻印象，典型例子如Bioshock的某角色以及最近COD7的某角色。",{"type":14,"tag":15,"props":1074,"children":1075},{},[1076],{"type":23,"value":1077},"总之，叙事性任务是所有任务类型中最需要灵活想法的一个部分，它是由其他所有类别任务复合而形成的。怎样巧妙地将任务系统的文本和游戏内容勾连成庞大而美妙的叙事体验，更接近艺术而不是技术，我也只能泛泛而谈了。在接下来的逻辑结构一节里，还会继续探讨不同的任务结构形式和玩家体验之间的关系。",{"type":14,"tag":15,"props":1079,"children":1080},{},[1081,1086,1093,1100,1107],{"type":14,"tag":19,"props":1082,"children":1083},{},[1084],{"type":23,"value":1085},"内容为转载，总篇幅较长。原文地址（自备梯子）：",{"type":14,"tag":230,"props":1087,"children":1090},{"href":1088,"rel":1089},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/11/14/quest-design-01/",[234],[1091],{"type":23,"value":1092},"游戏任务设计(1)：概念与简史",{"type":14,"tag":230,"props":1094,"children":1097},{"href":1095,"rel":1096},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/11/23/quest_design_2/",[234],[1098],{"type":23,"value":1099},"游戏任务设计(2)：MoveTo与Farm任务",{"type":14,"tag":230,"props":1101,"children":1104},{"href":1102,"rel":1103},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/12/03/quest_design_03/",[234],[1105],{"type":23,"value":1106},"游戏任务设计(3)：Collect与Hunt任务",{"type":14,"tag":230,"props":1108,"children":1111},{"href":1109,"rel":1110},"https://link.zhihu.com/?target=https%3A//necromanov.wordpress.com/2010/12/14/quest_design_04/",[234],[1112],{"type":23,"value":1113},"游戏任务设计(4)：Puzzle、Challenge和任务叙事",{"title":7,"searchDepth":1115,"depth":1115,"links":1116},2,[],"markdown","content:game:2021-08-05-game-task-design.md","content","game/2021-08-05-game-task-design.md","md","2021-08-05",[1124,1134,1261,1308,1360,1373,1485],{"title":1125,"_path":1126,"children":1127},"Art","/art",[1128,1131],{"title":1129,"_path":1130},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":1132,"_path":1133},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":1135,"_path":1136,"children":1137},"Dotnet","/dotnet",[1138,1141,1144,1147,1150,1153,1156,1159,1162,1165,1168,1171,1174,1177,1180,1183,1186,1189,1192,1195,1198,1201,1204,1207,1210,1213,1216,1219,1222,1225,1228,1231,1234,1237,1240,1243,1246,1249,1252,1255,1258],{"title":1139,"_path":1140},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":1142,"_path":1143},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":1145,"_path":1146},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":1148,"_path":1149},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":1151,"_path":1152},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":1154,"_path":1155},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":1157,"_path":1158},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":1160,"_path":1161},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":1163,"_path":1164},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":1166,"_path":1167},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":1169,"_path":1170},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":1172,"_path":1173},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":1175,"_path":1176},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":1178,"_path":1179},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":1181,"_path":1182},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":1184,"_path":1185},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":1187,"_path":1188},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":1190,"_path":1191},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":1193,"_path":1194},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":1196,"_path":1197},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":1199,"_path":1200},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":1202,"_path":1203},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":1205,"_path":1206},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":1208,"_path":1209},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":1211,"_path":1212},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":1214,"_path":1215},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":1217,"_path":1218},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":1220,"_path":1221},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":1223,"_path":1224},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":1226,"_path":1227},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":1229,"_path":1230},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":1232,"_path":1233},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":1235,"_path":1236},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":1238,"_path":1239},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":1241,"_path":1242},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":1244,"_path":1245},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":1247,"_path":1248},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":1250,"_path":1251},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":1253,"_path":1254},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":1256,"_path":1257},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":1259,"_path":1260},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":1262,"_path":1263,"children":1264},"Game","/game",[1265,1268,1271,1274,1277,1280,1283,1286,1287,1290,1293,1296,1299,1302,1305],{"title":1266,"_path":1267},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":1269,"_path":1270},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":1272,"_path":1273},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":1275,"_path":1276},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":1278,"_path":1279},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":1281,"_path":1282},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":1284,"_path":1285},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":8,"_path":4},{"title":1288,"_path":1289},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":1291,"_path":1292},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":1294,"_path":1295},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":1297,"_path":1298},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":1300,"_path":1301},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":1303,"_path":1304},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":1306,"_path":1307},"行为树源代码解析","/game/2022-08-21-behavior-tree-source-code",{"title":1309,"_path":1310,"children":1311},"Gyj","/gyj",[1312,1315,1318,1321,1324,1327,1330,1333,1336,1339,1342,1345,1348,1351,1354,1357],{"title":1313,"_path":1314},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":1316,"_path":1317},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":1319,"_path":1320},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":1322,"_path":1323},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":1325,"_path":1326},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":1328,"_path":1329},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":1331,"_path":1332},"玩法","/gyj/2022-08-22-wanfa",{"title":1334,"_path":1335},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":1337,"_path":1338},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":1340,"_path":1341},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":1343,"_path":1344},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":1346,"_path":1347},"门派内容相关","/gyj/2022-11-17-sect",{"title":1349,"_path":1350},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":1352,"_path":1353},"种植","/gyj/2022-12-01-zhongzhi",{"title":1355,"_path":1356},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":1358,"_path":1359},"跑商","/gyj/2023-11-01-paoshang",{"title":1361,"_path":1362,"children":1363},"Js","/js",[1364,1367,1370],{"title":1365,"_path":1366},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":1368,"_path":1369},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":1371,"_path":1372},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":1374,"_path":1375,"children":1376},"Tool","/tool",[1377,1380,1383,1386,1389,1392,1395,1398,1401,1404,1407,1410,1413,1416,1419,1422,1425,1428,1431,1434,1437,1440,1443,1446,1449,1452,1455,1458,1461,1464,1467,1470,1473,1476,1479,1482],{"title":1378,"_path":1379},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":1381,"_path":1382},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":1384,"_path":1385},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":1387,"_path":1388},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":1390,"_path":1391},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":1393,"_path":1394},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":1396,"_path":1397},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":1399,"_path":1400},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":1402,"_path":1403},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":1405,"_path":1406},"mac下brew 使用","/tool/2020-01-13-brew",{"title":1408,"_path":1409},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":1411,"_path":1412},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":1414,"_path":1415},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":1417,"_path":1418},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":1420,"_path":1421},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":1423,"_path":1424},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":1426,"_path":1427},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":1429,"_path":1430},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":1432,"_path":1433},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":1435,"_path":1436},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":1438,"_path":1439},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":1441,"_path":1442},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":1444,"_path":1445},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":1447,"_path":1448},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":1450,"_path":1451},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":1453,"_path":1454},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":1456,"_path":1457},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":1459,"_path":1460},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":1462,"_path":1463},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":1465,"_path":1466},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":1468,"_path":1469},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":1471,"_path":1472},"rider的使用","/tool/2022-08-02-rider-use",{"title":1474,"_path":1475},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":1477,"_path":1478},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":1480,"_path":1481},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":1483,"_path":1484},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":1486,"_path":1487,"children":1488},"Unity","/unity",[1489,1492,1495,1498,1501,1504,1507,1510,1513,1516,1519,1522,1525,1528,1531,1534,1537,1540,1543,1546,1549,1552,1555,1558,1561,1564,1567,1570,1573,1576,1579,1582,1585,1588,1591,1594,1597,1600,1603,1606,1609,1612,1615,1618,1621,1624,1627,1630,1633,1636,1639,1642,1645,1648,1651,1654,1657,1660,1663,1666,1669,1672,1675,1678,1681,1684,1687,1690,1693,1696,1699,1702],{"title":1490,"_path":1491},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":1493,"_path":1494},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":1496,"_path":1497},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":1499,"_path":1500},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":1502,"_path":1503},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":1505,"_path":1506},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":1508,"_path":1509},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":1511,"_path":1512},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":1514,"_path":1515},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":1517,"_path":1518},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":1520,"_path":1521},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":1523,"_path":1524},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":1526,"_path":1527},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":1529,"_path":1530},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":1532,"_path":1533},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":1535,"_path":1536},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":1538,"_path":1539},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":1541,"_path":1542},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":1544,"_path":1545},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":1547,"_path":1548},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":1550,"_path":1551},"技能系统","/unity/2020-02-15-skill-system",{"title":1553,"_path":1554},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":1556,"_path":1557},"角色状态设计","/unity/2020-02-17-character-states",{"title":1559,"_path":1560},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":1562,"_path":1563},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":1565,"_path":1566},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":1568,"_path":1569},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":1571,"_path":1572},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":1574,"_path":1575},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":1577,"_path":1578},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":1580,"_path":1581},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":1583,"_path":1584},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":1586,"_path":1587},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":1589,"_path":1590},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":1592,"_path":1593},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":1595,"_path":1596},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":1598,"_path":1599},"unity的addressables","/unity/2020-09-12-addressables",{"title":1601,"_path":1602},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":1604,"_path":1605},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":1607,"_path":1608},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":1610,"_path":1611},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":1613,"_path":1614},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":1616,"_path":1617},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":1619,"_path":1620},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":1622,"_path":1623},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":1625,"_path":1626},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":1628,"_path":1629},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":1631,"_path":1632},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":1634,"_path":1635},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":1637,"_path":1638},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":1640,"_path":1641},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":1643,"_path":1644},"简单保存工具","/unity/2020-11-13-simple-save",{"title":1646,"_path":1647},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":1649,"_path":1650},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":1652,"_path":1653},"ability","/unity/2020-11-16-dotssample",{"title":1655,"_path":1656},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":1658,"_path":1659},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":1661,"_path":1662},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":1664,"_path":1665},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":1667,"_path":1668},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":1670,"_path":1671},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":1673,"_path":1674},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":1676,"_path":1677},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":1679,"_path":1680},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":1682,"_path":1683},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":1685,"_path":1686},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":1688,"_path":1689},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":1691,"_path":1692},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":1694,"_path":1695},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":1697,"_path":1698},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":1700,"_path":1701},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":1703,"_path":1704},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779036243]