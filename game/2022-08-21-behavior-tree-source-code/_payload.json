[{"data":1,"prerenderedAt":973},["Reactive",2],{"content-query-oMZUa6OC7q":3,"content-navigation-8C37fagqQL":391},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":385,"_id":386,"_source":387,"_file":388,"_extension":389,"date":390},"/game/2022-08-21-behavior-tree-source-code","game",false,"","行为树源代码解析","行为树的构建首先行为树会有个根节点TaskRoot ,当构建行为树的时候,会将节点添加到该root下行为树的构建如下://获取当前父节点..默认则为TaskRoot\nprivate ITaskParent PointerCurrent {\n    get {\n        if (_pointers.Count == 0) return null;\n        return _pointers[_pointers.Count - 1];\n    }\n}\n//增加节点到当前父节点\npublic BehaviorTreeBuilder AddNode (ITask node) {\n    _",{"type":11,"children":12,"toc":370},"root",[13,21,36,41,50,55,86,97,102,139,176,182,193,198,203,208,213,218,236,241,246,255,260,265,273,278,287,292,301,306,311,316,321,340,345,350,355,360,365],{"type":14,"tag":15,"props":16,"children":18},"element","h2",{"id":17},"行为树的构建",[19],{"type":20,"value":17},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25,27,34],{"type":20,"value":26},"首先行为树会有个根节点",{"type":14,"tag":28,"props":29,"children":31},"code",{"className":30},[],[32],{"type":20,"value":33},"TaskRoot",{"type":20,"value":35}," ,当构建行为树的时候,会将节点添加到该root下",{"type":14,"tag":22,"props":37,"children":38},{},[39],{"type":20,"value":40},"行为树的构建如下:",{"type":14,"tag":42,"props":43,"children":45},"pre",{"code":44},"//获取当前父节点..默认则为TaskRoot\nprivate ITaskParent PointerCurrent {\n    get {\n        if (_pointers.Count == 0) return null;\n        return _pointers[_pointers.Count - 1];\n    }\n}\n//增加节点到当前父节点\npublic BehaviorTreeBuilder AddNode (ITask node) {\n    _tree.AddNode(PointerCurrent, node);\n    return this;\n}\n//增加节点,并将该节点设置为当前父节点\npublic BehaviorTreeBuilder AddNodeWithPointer (ITaskParent task) {\n    AddNode(task);\n    _pointers.Add(task);\n    \n    return this;\n}\n//退出当前父节点\npublic BehaviorTreeBuilder End () {\n    _pointers.RemoveAt(_pointers.Count - 1);\n    \n    return this;\n}\n",[46],{"type":14,"tag":28,"props":47,"children":48},{"__ignoreMap":7},[49],{"type":20,"value":44},{"type":14,"tag":15,"props":51,"children":53},{"id":52},"行为树的运行",[54],{"type":20,"value":52},{"type":14,"tag":56,"props":57,"children":58},"ul",{},[59,73],{"type":14,"tag":60,"props":61,"children":62},"li",{},[63,65,71],{"type":20,"value":64},"每一帧都执行update(),且如果根节点返回的是成功或者失败,则清空所有任务并",{"type":14,"tag":28,"props":66,"children":68},{"className":67},[],[69],{"type":20,"value":70},"End()",{"type":20,"value":72},",累计tick(所有子节点都会执行Reset())",{"type":14,"tag":60,"props":74,"children":75},{},[76,78,84],{"type":20,"value":77},"如果子节点中有",{"type":14,"tag":28,"props":79,"children":81},{"className":80},[],[82],{"type":20,"value":83},"持续",{"type":20,"value":85},"的任务时,则该任务会被认为时激活的.添加到行为树中",{"type":14,"tag":42,"props":87,"children":92},{"code":88,"language":89,"meta":7,"className":90},"public TaskStatus Tick () {\n    var status = Root.Update();\n    if (status != TaskStatus.Continue) {\n        Reset();\n    }\n\n    return status;\n}\n\npublic void Reset () {\n    foreach (var task in _tasks) {\n        task.End();\n    }\n\n    _tasks.Clear();\n    TickCount++;\n}\n","csharp",[91],"language-csharp",[93],{"type":14,"tag":28,"props":94,"children":95},{"__ignoreMap":7},[96],{"type":20,"value":88},{"type":14,"tag":22,"props":98,"children":99},{},[100],{"type":20,"value":101},"让我们看看任务的子类有哪些:",{"type":14,"tag":56,"props":103,"children":104},{},[105,115],{"type":14,"tag":60,"props":106,"children":107},{},[108,113],{"type":14,"tag":28,"props":109,"children":111},{"className":110},[],[112],{"type":20,"value":33},{"type":20,"value":114}," 一般来说只有一个子节点",{"type":14,"tag":60,"props":116,"children":117},{},[118,124,126,132,134],{"type":14,"tag":28,"props":119,"children":121},{"className":120},[],[122],{"type":20,"value":123},"TaskParentBase",{"type":20,"value":125}," ,会在每一次循环中同步tick,如果tick和行为树不一样,则会",{"type":14,"tag":28,"props":127,"children":129},{"className":128},[],[130],{"type":20,"value":131},"Reset",{"type":20,"value":133},",如果onUpdate()返回的时成功或者失败,也会",{"type":14,"tag":28,"props":135,"children":137},{"className":136},[],[138],{"type":20,"value":131},{"type":14,"tag":56,"props":140,"children":141},{},[142],{"type":14,"tag":60,"props":143,"children":144},{},[145,151,153,158,160,166,168,174],{"type":14,"tag":28,"props":146,"children":148},{"className":147},[],[149],{"type":20,"value":150},"TaskBase",{"type":20,"value":152}," 会在每一次循环中同步tick,如果tick和行为树不一样,则会",{"type":14,"tag":28,"props":154,"children":156},{"className":155},[],[157],{"type":20,"value":131},{"type":20,"value":159},",如果GetUpdate()返回的时成功或者失败,则会",{"type":14,"tag":28,"props":161,"children":163},{"className":162},[],[164],{"type":20,"value":165},"Exit",{"type":20,"value":167}," (Exit时会Reset)且如果自己的状态曾经为",{"type":14,"tag":28,"props":169,"children":171},{"className":170},[],[172],{"type":20,"value":173},"Continue",{"type":20,"value":175},"会从行为树的激活任务中移除,否则会将自身添加到行为树的激活任务中.",{"type":14,"tag":177,"props":178,"children":180},"h3",{"id":179},"持续的任务是怎么运行的",[181],{"type":20,"value":179},{"type":14,"tag":42,"props":183,"children":188},{"code":184,"language":185,"meta":7,"className":186},"graph TD;\nRoot --> Sequence;\nSequence-->TaskA;\nSequence-->TaskB;\nSequence-->TaskC;\n","mermaid",[187],"language-mermaid",[189],{"type":14,"tag":28,"props":190,"children":191},{"__ignoreMap":7},[192],{"type":20,"value":184},{"type":14,"tag":22,"props":194,"children":195},{},[196],{"type":20,"value":197},"Sequence会记录自己循环过哪些task. 当taskb持续状态时,则会进入下一个循环,但不会进入下一tick,走到Sequence后,他不会执行已经执行过的任务,所以进入Sequence后会直接执行TaskB;",{"type":14,"tag":22,"props":199,"children":200},{},[201],{"type":20,"value":202},"只有当有任务失败或者成功,才会执行下一个tick,下一个tick所有task都会reset",{"type":14,"tag":15,"props":204,"children":206},{"id":205},"使用",[207],{"type":20,"value":205},{"type":14,"tag":177,"props":209,"children":211},{"id":210},"并行",[212],{"type":20,"value":210},{"type":14,"tag":22,"props":214,"children":215},{},[216],{"type":20,"value":217},"如果使用.,注意子节点,要么是持续的,要么是成功的..如果有任何失败了将会reset",{"type":14,"tag":56,"props":219,"children":220},{},[221,226,231],{"type":14,"tag":60,"props":222,"children":223},{},[224],{"type":20,"value":225},"并行需要等待子节点全部完成,再根据子节点的返回状态判断该并行节点的状态",{"type":14,"tag":60,"props":227,"children":228},{},[229],{"type":20,"value":230},"并不是说并行,就是两个不想干的node不断的执行",{"type":14,"tag":60,"props":232,"children":233},{},[234],{"type":20,"value":235},"同时执行下面所有子节点的start(),然后等待所有子节点的反馈是成功还是失败",{"type":14,"tag":177,"props":237,"children":239},{"id":238},"序列",[240],{"type":20,"value":238},{"type":14,"tag":22,"props":242,"children":243},{},[244],{"type":20,"value":245},"一般把Sequence-->Condition  当作if  就可以",{"type":14,"tag":42,"props":247,"children":250},{"code":248,"language":185,"meta":7,"className":249},"graph TD;Sequence --> Condition;Sequence --> AC\n",[187],[251],{"type":14,"tag":28,"props":252,"children":253},{"__ignoreMap":7},[254],{"type":20,"value":248},{"type":14,"tag":177,"props":256,"children":258},{"id":257},"选择",[259],{"type":20,"value":257},{"type":14,"tag":22,"props":261,"children":262},{},[263],{"type":20,"value":264},"由下图可以看出..Selector --> Sequence--> Condition  相当于if else",{"type":14,"tag":22,"props":266,"children":267},{},[268],{"type":14,"tag":269,"props":270,"children":272},"img",{"alt":7,"src":271},"/images/2022-08-21-behavior-tree-source-code/1660118886000.png",[],{"type":14,"tag":22,"props":274,"children":275},{},[276],{"type":20,"value":277},"把select,当成 if not来看",{"type":14,"tag":42,"props":279,"children":282},{"code":280,"language":185,"meta":7,"className":281},"graph TD;\nSelect -->Condition; Select-->action\n",[187],[283],{"type":14,"tag":28,"props":284,"children":285},{"__ignoreMap":7},[286],{"type":20,"value":280},{"type":14,"tag":22,"props":288,"children":289},{},[290],{"type":20,"value":291},"select-->Inverter -->Condition  可以当作if来看..",{"type":14,"tag":42,"props":293,"children":296},{"code":294,"language":185,"meta":7,"className":295},"graph TD;select --> inverter-->conditions;select-->action\n",[187],[297],{"type":14,"tag":28,"props":298,"children":299},{"__ignoreMap":7},[300],{"type":20,"value":294},{"type":14,"tag":22,"props":302,"children":303},{},[304],{"type":20,"value":305},"和Sequence的区别就是,select在执行b前返回的是true.",{"type":14,"tag":177,"props":307,"children":309},{"id":308},"观察者模式",[310],{"type":20,"value":308},{"type":14,"tag":22,"props":312,"children":313},{},[314],{"type":20,"value":315},"观察者装饰器...就是观察某个变量..然后决定低优先级节点,自身节点,的执行(重启等)方式",{"type":14,"tag":22,"props":317,"children":318},{},[319],{"type":20,"value":320},"分为两种状况\n1.在当前节点未激活的时候,观察某个变量 生效的方式:Stops.LOWER_PRIORITY,Stops.BOTH,Stops.LOWER_PRIORITY_IMMEDIATE_RESTART,Stops.IMMEDIATE_RESTART\n2.在当前节点激活的时候,观察某个变量Stops.SELF Stops.BOTH Stops.IMMEDIATE_RESTART\n所以会有三种节点出现",{"type":14,"tag":322,"props":323,"children":324},"ol",{},[325,330,335],{"type":14,"tag":60,"props":326,"children":327},{},[328],{"type":20,"value":329},"IsConditionMet()永远返回true,子节点永远返回false,保证该装饰器节点是inactive状态",{"type":14,"tag":60,"props":331,"children":332},{},[333],{"type":20,"value":334},"IsConditionMet()永远返回false,子节点永远返回true,保证该装饰器节点是active状态",{"type":14,"tag":60,"props":336,"children":337},{},[338],{"type":20,"value":339},"IsConditionMet()根据情况返回true和false,比如如果玩家在附近,则执行该装饰器下代码.如果玩家不在附近则stop,执行低优先级代码",{"type":14,"tag":22,"props":341,"children":342},{},[343],{"type":20,"value":344},"Stops.NONE：装饰器只会在启动时检查一次它的状态，并且永远不会停止任何正在运行的节点。\nStops.SELF：装饰器将在启动时检查一次它的条件状态，如果满足，它将继续观察黑板的变化。一旦不再满足该条件，它将终止自身，并让父组合继续处理它的下一个节点。\nStops.LOWER_PRIORITY：装饰器将在启动时检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停止比此结点优先级较低的节点，允许父组合继续处理下一个节点\nStops.BOTH：装饰器将同时停止:self和优先级较低的节点。\nStops.LOWER_PRIORITY_IMMEDIATE_RESTART：一旦启动，装饰器将检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停止优先级较低的节点，并命令父组合立即重启此装饰器。\nStops.IMMEDIATE_RESTART：一旦启动，装饰器将检查它的状态，如果不满足，它将观察黑板的变化。一旦条件满足，它将停止优先级较低的节点，并命令父组合立即重启装饰器。正如在这两种情况下，一旦不再满足条件，它也将停止自己。",{"type":14,"tag":22,"props":346,"children":347},{},[348],{"type":20,"value":349},"说人话..就是\n在当前节点未激活的时候,观察某个变量\nStops.LOWER_PRIORITY_IMMEDIATE_RESTART和Stops.IMMEDIATE_RESTART这个会停止低优先级(就是该节点后面的)的节点,然后会立即重新开始当前节点\nStops.LOWER_PRIORITY和Stops.BOTH 会先停止优先级较低的节点,然后再停止父节点",{"type":14,"tag":22,"props":351,"children":352},{},[353],{"type":20,"value":354},"在当前节点激活的时候,观察某个变量\nStops.SELF Stops.BOTH Stops.IMMEDIATE_RESTART 这三个,都会先停止子节点.然后停止自身,最后会影响到停止父节点",{"type":14,"tag":177,"props":356,"children":358},{"id":357},"条件和装饰器",[359],{"type":20,"value":357},{"type":14,"tag":22,"props":361,"children":362},{},[363],{"type":20,"value":364},"RepeatUntilSuccess --> ConditionBase 可以构成一个新动作",{"type":14,"tag":22,"props":366,"children":367},{},[368],{"type":20,"value":369},"ConditionBase 在返回失败的时候被RepeatUntilSuccess 转换为持续",{"title":7,"searchDepth":371,"depth":371,"links":372},2,[373,374,378],{"id":17,"depth":371,"text":17},{"id":52,"depth":371,"text":52,"children":375},[376],{"id":179,"depth":377,"text":179},3,{"id":205,"depth":371,"text":205,"children":379},[380,381,382,383,384],{"id":210,"depth":377,"text":210},{"id":238,"depth":377,"text":238},{"id":257,"depth":377,"text":257},{"id":308,"depth":377,"text":308},{"id":357,"depth":377,"text":357},"markdown","content:game:2022-08-21-behavior-tree-source-code.md","content","game/2022-08-21-behavior-tree-source-code.md","md","2022-08-21",[392,402,529,576,628,641,753],{"title":393,"_path":394,"children":395},"Art","/art",[396,399],{"title":397,"_path":398},"如何用蒙版将两个图过渡融合","/art/2020-09-03-ps-ronghe-pics",{"title":400,"_path":401},"像素画入门","/art/2022-02-02-xiangsuhuarumen",{"title":403,"_path":404,"children":405},"Dotnet","/dotnet",[406,409,412,415,418,421,424,427,430,433,436,439,442,445,448,451,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,499,502,505,508,511,514,517,520,523,526],{"title":407,"_path":408},"Linux部署dotnetcore记录","/dotnet/2019-06-05-linux-dotnet-daemon",{"title":410,"_path":411},"时间轮的引入","/dotnet/2019-10-29-time-wheel",{"title":413,"_path":414},"帧同步的相关问题","/dotnet/2019-11-01-lock-step",{"title":416,"_path":417},"状态同步的相关问题","/dotnet/2019-11-01-state-sync-npc",{"title":419,"_path":420},"状态同步--技能系统的同步机制分析","/dotnet/2019-11-02-state-sync-skill",{"title":422,"_path":423},"Creating a Quartz.NET hosted service with ASP.NET Core","/dotnet/2019-11-05-quartz",{"title":425,"_path":426},"DatetimeOffset和Datetime的区别","/dotnet/2019-12-01-datetimeoffset",{"title":428,"_path":429},"大小端字节序(Big Endian和Little Endian)","/dotnet/2020-01-05-big-little-endian",{"title":431,"_path":432},"dll文件的加载","/dotnet/2020-01-06-dll-load",{"title":434,"_path":435},"延迟补偿在C/S架构游戏协议设计和优化中的应用","/dotnet/2020-02-02-latency_compensating_methods_in_clientserver_in-game_protocol_design_and_optimization",{"title":437,"_path":438},"延迟补偿和对时的相关总结","/dotnet/2020-02-02-latency_compensating-rtt",{"title":440,"_path":441},"快节奏多人游戏同步(1)-ClientServer架构","/dotnet/2020-02-02-net-sync-client-server-game-architecture",{"title":443,"_path":444},"快节奏多人游戏同步(2)-客户端预测与服务器校对","/dotnet/2020-02-02-net-sync-client-side-prediction-and-server-reconciliation",{"title":446,"_path":447},"快节奏多人游戏同步(3)-Entity插值","/dotnet/2020-02-02-net-sync-entity-interpolation",{"title":449,"_path":450},"快节奏多人游戏同步(4)-延时补偿","/dotnet/2020-02-02-net-sync-lag-compensation",{"title":452,"_path":453},"守望先锋等FPS游戏的网络同步","/dotnet/2020-02-02-overwatch-a-guide-to-understanding-netcode",{"title":455,"_path":456},"起源引擎网络同步模型","/dotnet/2020-02-02-source_multiplayer_networking",{"title":458,"_path":459},"orleans的部署模式","/dotnet/2020-02-03-orleans-deployment",{"title":461,"_path":462},"一致性hash算法","/dotnet/2020-02-06-consistent_hash",{"title":464,"_path":465},"地图的aoi","/dotnet/2020-02-07-aoi",{"title":467,"_path":468},"游戏的匹配机制ELO","/dotnet/2020-02-09-room-elo",{"title":470,"_path":471},"C# 深浅复制","/dotnet/2020-02-10-icloneable",{"title":473,"_path":474},"C#引用类型对象在循环引用时会不会内存泄漏","/dotnet/2020-02-11-gc",{"title":476,"_path":477},"扒一扒.net、.net framework、mono和Unity","/dotnet/2020-02-12-netcore-mono-netframework",{"title":479,"_path":480},"c#编译和运行启动原理","/dotnet/2020-02-13-csharp-run",{"title":482,"_path":483},"abp新建项目指南","/dotnet/2020-05-29-abp-start",{"title":485,"_path":486},"2020 06 11 IdentityServer Use","/dotnet/2020-06-11-identityserver-use",{"title":488,"_path":489},"关于abp的用户的一些问题","/dotnet/2020-07-05-abp-database-user",{"title":491,"_path":492},"abp的dOC模块使用","/dotnet/2020-07-10-abp-doc",{"title":494,"_path":495},"abp默认语言规则","/dotnet/2020-07-15-abp-default-language",{"title":497,"_path":498},"Orleans 最佳实践","/dotnet/2020-08-09-orleans-best-practices",{"title":500,"_path":501},"c#特性参数","/dotnet/2020-08-10-param-attribute",{"title":503,"_path":504},".NET Core 获取 HttpContext.Current 以及 AsyncLocal 与 ThreadLocal","/dotnet/2020-08-11-httpcontextaccessor-asynclocal",{"title":506,"_path":507},"Kestrel源码分析","/dotnet/2020-08-15-kestrel-source-code",{"title":509,"_path":510},"ConcurrentDictionary并发字典","/dotnet/2020-08-16-concurrentdictionary",{"title":512,"_path":513},"IOptions、IOptionsMonitor以及IOptionsSnapshot","/dotnet/2020-08-17-netcore-options",{"title":515,"_path":516},".NET Core/Framework 创建委托以大幅度提高反射调用的性能","/dotnet/2020-11-13-reflection-method",{"title":518,"_path":519},"C＃枚举中使用Flags特性","/dotnet/2020-11-24-flags",{"title":521,"_path":522},"谷歌浏览器下netcore登录失败问题","/dotnet/2020-12-11-chrome-login-fail",{"title":524,"_path":525},"Converting between Structs and Byte Arrays","/dotnet/2021-05-01-converting-between-structs-and-byte-arrays",{"title":527,"_path":528},"c#在重写object中的Equal方法时需要对GetHashCode进行重写（Dictionary引用）","/dotnet/2022-08-15-equal-hashcode",{"title":530,"_path":531,"children":532},"Game","/game",[533,536,539,542,545,548,551,554,557,560,563,566,569,572,575],{"title":534,"_path":535},"使用柏林噪声算法生成地图","/game/2021-01-20-perlin-map",{"title":537,"_path":538},"波函数坍塌算法生成地图","/game/2021-01-21-wave-collapse-function",{"title":540,"_path":541},"文明6地图生成算法","/game/2021-01-22-civ-map",{"title":543,"_path":544},"roguelike地牢生成算法","/game/2021-01-23-roguelike-map",{"title":546,"_path":547},"Spelunky关卡生成","/game/2021-01-23-spelunky-map",{"title":549,"_path":550},"Edgar源代码解读","/game/2021-06-12-edgar-code-read",{"title":552,"_path":553},"rpgbuild的一些备注","/game/2021-06-15-rpgbuilder",{"title":555,"_path":556},"游戏人物设计","/game/2021-08-05-game-task-design",{"title":558,"_path":559},"unity gameplay ability源代码解析","/game/2021-12-14-untiy-gameplay-ablility-sourcecode",{"title":561,"_path":562},"苟与剑游戏技能分析","/game/2021-12-21-gyj-skill",{"title":564,"_path":565},"quest machine 使用相关","/game/2022-02-19-quest-machine",{"title":567,"_path":568},"苟与剑中的单位生成方式","/game/2022-03-16-gyj-map",{"title":570,"_path":571},"ecs中实体创建方法","/game/2022-08-03-ecs",{"title":573,"_path":574},"暗黑2怪物等级和掉落规则","/game/2022-08-05-dia2",{"title":8,"_path":4},{"title":577,"_path":578,"children":579},"Gyj","/gyj",[580,583,586,589,592,595,598,601,604,607,610,613,616,619,622,625],{"title":581,"_path":582},"美术要求","/gyj/2022-06-11-meishuyaoqiu",{"title":584,"_path":585},"游戏基础知识","/gyj/2022-06-12-jichuzhishi",{"title":587,"_path":588},"2022 08 22 地图房间的种类","/gyj/2022-08-22-detufangjiandezhonglei",{"title":590,"_path":591},"2022 08 22 奇遇事件","/gyj/2022-08-22-qiyushijian",{"title":593,"_path":594},"游戏流程","/gyj/2022-08-22-youxiliucheng",{"title":596,"_path":597},"物品产出表","/gyj/2022-08-22-wupinchanchubiao",{"title":599,"_path":600},"玩法","/gyj/2022-08-22-wanfa",{"title":602,"_path":603},"初入江湖","/gyj/2022-08-22-diyizhang",{"title":605,"_path":606},"2022 08 22 职业与工作","/gyj/2022-08-22-zhiyeyugongzuo",{"title":608,"_path":609},"天下霸图研究","/gyj/2022-11-01-tianxiabatu",{"title":611,"_path":612},"流放之路关于伤害公式和技能的分析","/gyj/2022-11-17-liufangzhilu",{"title":614,"_path":615},"门派内容相关","/gyj/2022-11-17-sect",{"title":617,"_path":618},"2022 12 01 养殖","/gyj/2022-12-01-yangzhi",{"title":620,"_path":621},"种植","/gyj/2022-12-01-zhongzhi",{"title":623,"_path":624},"人物属性设计","/gyj/2022-12-15-renwushuxing",{"title":626,"_path":627},"跑商","/gyj/2023-11-01-paoshang",{"title":629,"_path":630,"children":631},"Js","/js",[632,635,638],{"title":633,"_path":634},"如何在TypeScript中使用JS类库","/js/2022-02-12-typescript-use-js",{"title":636,"_path":637},"nuxt3项目初始化失败","/js/2023-05-16-nuxt3-init-fail",{"title":639,"_path":640},"Flex 布局使用","/js/2024-03-17-flex-use",{"title":642,"_path":643,"children":644},"Tool","/tool",[645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702,705,708,711,714,717,720,723,726,729,732,735,738,741,744,747,750],{"title":646,"_path":647},"windows发送到手机Ftp","/tool/2019-06-20-windows-send-to-ftp",{"title":649,"_path":650},"windows特殊目录修复","/tool/2019-06-24-shell-folders-are-displayed-with-the-standard-folder-icon-in-windows",{"title":652,"_path":653},"scourcetree  总是需要输入密码","/tool/2019-08-07-sourcetree-git-password",{"title":655,"_path":656},"powershell 常用命令","/tool/2019-08-10-powershell-command",{"title":658,"_path":659},"scoop的使用","/tool/2019-08-20-scoop-use",{"title":661,"_path":662},"使用配置文件来管理NuGet包版本F","/tool/2019-09-02-nuget-manager",{"title":664,"_path":665},"Redis的两种持久化RDB和AOF","/tool/2019-09-02-redis-aof-rdb",{"title":667,"_path":668},"使用 SSH 登陆谷歌云 root 或者 普通账户的方法","/tool/2020-01-02-google-clound-local-login",{"title":670,"_path":671},"CentOS 下安装Shadowsocks 搭建ss","/tool/2020-01-12-centosn-ss-install",{"title":673,"_path":674},"mac下brew 使用","/tool/2020-01-13-brew",{"title":676,"_path":677},"术语中英文对照","/tool/2020-02-05-game_en_zh",{"title":679,"_path":680},"Excel中以文本形式存储的数字","/tool/2020-02-06-excel-text-number",{"title":682,"_path":683},"protobuf序列化的一些问题","/tool/2020-03-25-protobuf-empty-collections",{"title":685,"_path":686},"为博客将 RSS 转为邮件订阅","/tool/2020-06-26-blog-mail-sub",{"title":688,"_path":689},"github下载代码的速度太慢","/tool/2020-06-27-linux-github-slow",{"title":691,"_path":692},"win10开始菜单添加软件以及备份和恢复","/tool/2020-07-02-win10-start-menu",{"title":694,"_path":695},"gitbook的使用","/tool/2020-07-06-gitbook-use",{"title":697,"_path":698},"github actions 简单使用","/tool/2020-07-11-github-actions",{"title":700,"_path":701},"使用hexo建立博客并部署到github","/tool/2020-07-12-hexo-github",{"title":703,"_path":704},"终端下设置代理","/tool/2020-07-13-terminal-proxy",{"title":706,"_path":707},"发现nuget包太占用C盘，怎么办？","/tool/2020-08-30-nuget-is-big",{"title":709,"_path":710},"unity商店下载资源迁移","/tool/2020-11-15-unity-is-big",{"title":712,"_path":713},"关于coding的pages介绍","/tool/2020-11-16-coding-pages",{"title":715,"_path":716},"一些常用的dns服务器","/tool/2021-05-06-dns",{"title":718,"_path":719},"UE4素材破解","/tool/2021-11-06-ue4-view",{"title":721,"_path":722},"安装cockpit通过nginx代理访问","/tool/2021-11-07-cockpit-linux",{"title":724,"_path":725},"Windows LTSC、LTSB、Server 安装 Windows Store 应用商店 ","/tool/2021-11-15-install-windowsstore",{"title":727,"_path":728},"我是如何把 VS Code 插件启动速度从 8 秒减少到 1 秒 ","/tool/2021-12-02-vscode-plugins-big",{"title":730,"_path":731},"云效部署hexo到自己的主机 ","/tool/2021-12-11-yunxiao-liushuixian-hexo",{"title":733,"_path":734},"github 怎么合并原始分支？ ","/tool/2021-12-12-github-sync",{"title":736,"_path":737},"code server安装制作online ide","/tool/2022-01-30-code-server",{"title":739,"_path":740},"rider的使用","/tool/2022-08-02-rider-use",{"title":742,"_path":743},"2022 08 09 Amd Over","/tool/2022-08-09-amd-over",{"title":745,"_path":746},"rider破解","/tool/2022-11-19-rider-po-jie",{"title":748,"_path":749},"stable diffusion install","/tool/2023-01-20-stable-diffusion-install",{"title":751,"_path":752},"CGI, FastCGI, WSGI, uWSGI, uwsgi一文搞懂","/tool/2023-02-15-cgi-fastcgi-wsgi-uswgi",{"title":754,"_path":755,"children":756},"Unity","/unity",[757,760,763,766,769,772,775,778,781,784,787,790,793,796,799,802,805,808,811,814,817,820,823,826,829,832,835,838,841,844,847,850,853,856,859,862,865,868,871,874,877,880,883,886,889,892,895,898,901,904,907,910,913,916,919,922,925,928,931,934,937,940,943,946,949,952,955,958,961,964,967,970],{"title":758,"_path":759},"Unity 导出 Android 64-bit 版本","/unity/2019-06-20-unity-android-x64",{"title":761,"_path":762},"Unity的il2cpp","/unity/2019-06-20-unity-il2cpp-debugger",{"title":764,"_path":765},"googlePlay 发布问题","/unity/2019-06-23-googlplay-pulish",{"title":767,"_path":768},"关于unity的适配问题","/unity/2019-08-09-unity2d-shipei",{"title":770,"_path":771},"一次精通 RectTransform","/unity/2019-08-10-ugui-recttransform",{"title":773,"_path":774},"一次精通 eventmanager","/unity/2019-08-11-ugui-eventmanager",{"title":776,"_path":777},"ugui的eventsystem源码解读","/unity/2019-08-12-ugui-eventsystem-sourcecode",{"title":779,"_path":780},"Unity Raycasters 剖析","/unity/2019-08-12-ugui-raycasters",{"title":782,"_path":783},"关于addressable那些事","/unity/2019-09-01-addressable",{"title":785,"_path":786},"关于spriteAtlas打包那些事","/unity/2019-09-01-spriteatlas",{"title":788,"_path":789},"ilruntime的研究","/unity/2019-09-02-ilruntime",{"title":791,"_path":792},"unity的宏以及添加net框架中未引用的dll","/unity/2019-09-02-unity-reference-dll",{"title":794,"_path":795},"xlua注入源码解读","/unity/2019-09-03-xlua-inject",{"title":797,"_path":798},"如何快速的注入汇编","/unity/2019-09-04-mono.cecil-inject",{"title":800,"_path":801},"2D游戏视差背景的实现","/unity/2019-09-13-parallax-2d",{"title":803,"_path":804},"unity使用代理","/unity/2019-11-15-unity-proxy",{"title":806,"_path":807},"一篇文章搞定Entitas","/unity/2020-01-01-unity-entitas",{"title":809,"_path":810},"unity攻击范围检测的方式区别","/unity/2020-01-11-unity-attack-range-detection-type",{"title":812,"_path":813},"常见的2D碰撞检测","/unity/2020-01-12-collision-detection",{"title":815,"_path":816},"unity攻击范围检测","/unity/2020-01-13-unity-attack-detection",{"title":818,"_path":819},"技能系统","/unity/2020-02-15-skill-system",{"title":821,"_path":822},"游戏buff系统设计","/unity/2020-02-16-buff-system",{"title":824,"_path":825},"角色状态设计","/unity/2020-02-17-character-states",{"title":827,"_path":828},"理解托管堆","/unity/2020-02-18-bestpracticeunderstandingperformanceinunity",{"title":830,"_path":831},"理解自动内存管理","/unity/2020-02-19-understandingautomaticmemorymanagement",{"title":833,"_path":834},"unity 移动平台打包丢失shader的问题","/unity/2020-02-20-shader-lost",{"title":836,"_path":837},"Unity的调试相关","/unity/2020-03-01-unity-debug",{"title":839,"_path":840},"unity启动运行脚本流程","/unity/2020-03-04-unity-startup",{"title":842,"_path":843},"unity的坐标体系","/unity/2020-07-01-unity-coordinate",{"title":845,"_path":846},"2020 07 03 Unity Mesh","/unity/2020-07-03-unity-mesh",{"title":848,"_path":849},"unity Render Pipeline","/unity/2020-07-04-unity-render-pipeline",{"title":851,"_path":852},"Notch Solution","/unity/2020-08-29-notch-solution",{"title":854,"_path":855},"unity 项目dll检查","/unity/2020-08-30-unity-dll-check",{"title":857,"_path":858},"UNITY的垂直同步和帧率","/unity/2020-09-05-unity-vsynccount",{"title":860,"_path":861},"UNITY性能优化流程","/unity/2020-09-10-optimizing-for-performance",{"title":863,"_path":864},"堆栈内存Stack和堆内存Heap","/unity/2020-09-11-stack-heap",{"title":866,"_path":867},"unity的addressables","/unity/2020-09-12-addressables",{"title":869,"_path":870},"游戏中的向量使用","/unity/2020-09-13-vector",{"title":872,"_path":873},"UNITY ECS 详解","/unity/2020-10-15-unity-ecs",{"title":875,"_path":876},"UNITY JOB SYSTEM详解","/unity/2020-10-16-unity-job",{"title":878,"_path":879},"运行时打包图集","/unity/2020-10-17-runtime-spriteatlas",{"title":881,"_path":882},"unity ecs component","/unity/2020-10-18-unity-ecs-component",{"title":884,"_path":885},"基于 Game Object Conversion 和 SubScene 的 DOTS 开发工作流","/unity/2020-10-19-game-object-conversion-and-subscene",{"title":887,"_path":888},"源代码分析world的创建","/unity/2020-10-20-ecs-world",{"title":890,"_path":891},"unity使用platforms构建","/unity/2020-10-21-platform",{"title":893,"_path":894},"Unity rendering order渲染顺序","/unity/2020-10-22-unity-render-order",{"title":896,"_path":897},"关于静态批处理/动态批处理/GPU Instancing /SRP Batcher的详细剖析","/unity/2020-10-23-unity-optimizing-gpu",{"title":899,"_path":900},"unity的ScreenToWorldPoint","/unity/2020-10-24-screentoworldpoint",{"title":902,"_path":903},"URP性能测试","/unity/2020-10-24-unity-urp-performance",{"title":905,"_path":906},"如何使用Unity ECS打造Reactive System？","/unity/2020-11-11-how-to-build-reactive-systems-with-unity-ecs",{"title":908,"_path":909},"Unity中Sprite和UI Image的区别","/unity/2020-11-12-sprite-image-diff",{"title":911,"_path":912},"简单保存工具","/unity/2020-11-13-simple-save",{"title":914,"_path":915},"2020 11 14 Netcode","/unity/2020-11-14-netcode",{"title":917,"_path":918},"ecs中的parent","/unity/2020-11-15-ecs-parent",{"title":920,"_path":921},"ability","/unity/2020-11-16-dotssample",{"title":923,"_path":924},"unity world time system","/unity/2020-11-17-unity-ecs-worldtime",{"title":926,"_path":927},"netcode源代码解读","/unity/2020-11-18-netcode-sourcecode",{"title":929,"_path":930},"pitch yaw roll是什么","/unity/2020-11-29-pitch-yaw-roll",{"title":932,"_path":933},"A Native Collection has not been disposed, resulting in a memory leak. Allocated from:","/unity/2020-12-20-collection-has-not-been-disposed",{"title":935,"_path":936},"解决Unity鼠标坐标点转成世界坐标系坐标点","/unity/2021-01-24-screentoworld",{"title":938,"_path":939},"2021 01 25 Tilemap","/unity/2021-01-25-tilemap",{"title":941,"_path":942},"Unity RenderTexture的应用","/unity/2021-04-11-render-texture",{"title":944,"_path":945},"commandbuff的一些问题","/unity/2021-05-20-ecs-commandbuff-question",{"title":947,"_path":948},"How to Make One Way Platform in unity","/unity/2021-06-13-how-to-make-one-way-platform",{"title":950,"_path":951},"UNITY的渲染顺序","/unity/2021-06-14-unity-render-order",{"title":953,"_path":954},"防止变量引用丢失 FormerlySerializedAs","/unity/2021-07-20-formerlyserializedas",{"title":956,"_path":957},"AI-PLANNER使用","/unity/2021-08-01-ai-planner",{"title":959,"_path":960},"Increased script assembly reload time","/unity/2021-10-01-increased-script-assembly-reload-time",{"title":962,"_path":963},"关于unity的热重载的研究","/unity/2022-01-02-unity-hot-reload",{"title":965,"_path":966},"Editor Iteration Profiler的使用","/unity/2022-01-28-unity-editor-iteration-profiler",{"title":968,"_path":969},"CircleCast和Overlapple的区别是什么","/unity/2022-04-02-circlecast-overlapple-diff",{"title":971,"_path":972},"unity ecs的备忘录","/unity/2022-09-10-ecs-beiwang",1710779035943]